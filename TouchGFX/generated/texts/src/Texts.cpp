/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x2e, 0x2e, 0x2e, 0x2e, 0xa, 0x20, 0x20, 0x20, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x0, // @0 "Initialisation error ....?    System Restart "
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x2, 0x20, 0x6d, 0x6d, 0x48, 0x67, 0x0, // @46 "                           | <> mmHg"
    0x45, 0x72, 0x72, 0x6f, 0x72, 0x2c, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0xa, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x0, // @82 "Error, no patients found? in the database"
    0x45, 0x72, 0x72, 0x6f, 0x72, 0x2c, 0x20, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0xa, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x0, // @124 "Error, patient not found? in the database"
    0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x0, // @166 "Password changed successfully"
    0x45, 0x6e, 0x64, 0x20, 0x49, 0x6e, 0x3a, 0x20, 0x2, 0x68, 0x3a, 0x2, 0x6d, 0x69, 0x6e, 0x0, // @196 "End In: <>h:<>min"
    0x73, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x20, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x6d, 0x0, // @212 "syringe diameter :       mm"
    0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x6c, 0x0, // @240 "Volume left :       ml"
    0x41, 0x6e, 0x65, 0x73, 0x74, 0x68, 0x65, 0x73, 0x69, 0x61, 0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x0, // @263 "Anesthesia algorithms"
    0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x3a, 0x20, 0x2, 0x20, 0x6d, 0x4c, 0x0, // @285 "Injected : <> mL"
    0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x6c, 0x0, // @301 "Total volume:     ml"
    0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x4e, 0x65, 0x77, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x0, // @322 "Insert New Password"
    0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x4f, 0x6c, 0x64, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x0, // @342 "Insert Old Password"
    0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x0, // @362 "Input Patient Name"
    0x2d, 0x2d, 0x20, 0x2d, 0x2d, 0x20, 0x2d, 0x2d, 0x20, 0x2d, 0x2d, 0x20, 0x2d, 0x2d, 0x20, 0x2d, 0x2d, 0x0, // @381 "-- -- -- -- -- --"
    0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x0, // @399 "Anonymous Patient"
    0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x20, 0x0, // @417 "Current Pressure "
    0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x0, // @435 "Diagnosing System"
    0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x73, 0x65, 0x0, // @453 "Patients DataBase"
    0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x0, // @471 "Patients Database"
    0x2, 0x20, 0x68, 0x20, 0x2, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @489 "<> h <> min"
    0x4f, 0x63, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x0, // @499 "Occlusion Levels"
    0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x0, // @516 "change password "
    0x41, 0x75, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x0, // @533 "Auto diagnostic"
    0x4e, 0x65, 0x77, 0x20, 0x54, 0x65, 0x78, 0x74, 0x2, 0x0, // @549 "New Text<>"
    0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x0, // @559 "Password  Error"
    0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x0, // @575 "InsertPassword"
    0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x20, 0x43, 0x61, 0x72, 0x65, 0x0, // @590 "Intensive Care"
    0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x0, // @605 "ScreenUnlocked"
    0x2, 0x20, 0x68, 0x20, 0x3a, 0x20, 0x2, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @620 "<> h : <> min"
    0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x0, // @632 "Active Alarms"
    0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @646 "Configuration"
    0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x0, // @660 "Departements "
    0x49, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x74, 0x65, 0x0, // @674 "Infusion Rate"
    0x49, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x0, // @688 "Infusion Time"
    0x4d, 0x65, 0x64, 0x75, 0x69, 0x6d, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x0, // @702 "Meduim Level "
    0x53, 0x54, 0x41, 0x52, 0x54, 0x20, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x0, // @716 "START STATION"
    0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x0, // @730 "Special Modes"
    0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x0, // @744 "Display mode"
    0x44, 0x72, 0x75, 0x67, 0x20, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x0, // @757 "Drug Library"
    0x4c, 0x61, 0x73, 0x74, 0x20, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x0, // @770 "Last Patient"
    0x53, 0x61, 0x6d, 0x65, 0x20, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x0, // @783 "Same Patient"
    0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x0, // @796 "ScreenLocked"
    0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x44, 0x72, 0x75, 0x67, 0x20, 0x0, // @809 "Select Drug "
    0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x0, // @822 "Total Volume"
    0x43, 0x6c, 0x6f, 0x73, 0x65, 0x20, 0x47, 0x72, 0x61, 0x70, 0x68, 0x0, // @835 "Close Graph"
    0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x0, // @847 "Departement"
    0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x0, // @859 "Maintenance"
    0x4e, 0x65, 0x77, 0x20, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x0, // @871 "New Patient"
    0x54, 0x69, 0x6d, 0x65, 0x20, 0x26, 0x20, 0x44, 0x61, 0x74, 0x65, 0x0, // @883 "Time & Date"
    0x42, 0x6f, 0x6c, 0x75, 0x73, 0x20, 0x52, 0x61, 0x74, 0x65, 0x0, // @895 "Bolus Rate"
    0x4e, 0x65, 0x6f, 0x20, 0x4e, 0x61, 0x74, 0x61, 0x6c, 0x20, 0x0, // @906 "Neo Natal "
    0x50, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x73, 0x0, // @917 "Pediatrics"
    0x68, 0x69, 0x67, 0x68, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x0, // @928 "high Level"
    0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x0, // @939 "Emergency"
    0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x0, // @949 "Language "
    0x4c, 0x6f, 0x77, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x0, // @959 "Low Level"
    0x4d, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x74, 0x79, 0x0, // @969 "Maternity"
    0x2e, 0x2, 0x0, // @979 ".<>"
    0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x0, // @982 "00:00:00"
    0x2, 0x2e, 0x0, // @991 "<>."
    0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x20, 0x0, // @994 "Battery "
    0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x0, // @1003 "History "
    0x4b, 0x56, 0x4f, 0x20, 0x52, 0x61, 0x74, 0x65, 0x0, // @1012 "KVO Rate"
    0x4e, 0x65, 0x77, 0x20, 0x54, 0x65, 0x78, 0x74, 0x0, // @1021 "New Text"
    0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x0, // @1030 "Settings"
    0x53, 0x79, 0x72, 0x69, 0x57, 0x61, 0x76, 0x65, 0x0, // @1039 "SyriWave"
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0, // @1048 "-------"
    0x2, 0x20, 0x6d, 0x4c, 0x2f, 0x68, 0x0, // @1056 "<> mL/h"
    0x2, 0x20, 0x6d, 0x6d, 0x48, 0x47, 0x0, // @1063 "<> mmHG"
    0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x20, 0x0, // @1070 "CANCEL "
    0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x20, 0x0, // @1078 "SELECT "
    0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x0, // @1086 "Setting"
    0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x0, // @1094 "0000.0"
    0x3a, 0x20, 0x52, 0x61, 0x74, 0x65, 0x0, // @1101 ": Rate"
    0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x0, // @1108 "Cancel"
    0x45, 0x52, 0x41, 0x53, 0x45, 0x20, 0x0, // @1115 "ERASE "
    0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x0, // @1122 "Female"
    0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x0, // @1129 "Gender"
    0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x0, // @1136 "Height"
    0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x0, // @1143 "Manual"
    0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x0, // @1150 "Medium"
    0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x0, // @1157 "Minute"
    0x53, 0x54, 0x41, 0x52, 0x54, 0x20, 0x0, // @1164 "START "
    0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x0, // @1171 "Search"
    0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x0, // @1178 "Weight"
    0x41, 0x49, 0x56, 0x4f, 0x43, 0x0, // @1185 "AIVOC"
    0x42, 0x61, 0x63, 0x6b, 0x20, 0x0, // @1191 "Back "
    0x42, 0x6f, 0x6c, 0x75, 0x73, 0x0, // @1197 "Bolus"
    0x43, 0x6c, 0x6f, 0x73, 0x65, 0x0, // @1203 "Close"
    0x45, 0x72, 0x61, 0x73, 0x65, 0x0, // @1209 "Erase"
    0x4c, 0x6f, 0x63, 0x6b, 0x20, 0x0, // @1215 "Lock "
    0x4f, 0x74, 0x68, 0x65, 0x72, 0x0, // @1221 "Other"
    0x50, 0x61, 0x75, 0x73, 0x65, 0x0, // @1227 "Pause"
    0x53, 0x54, 0x41, 0x52, 0x54, 0x0, // @1233 "START"
    0x53, 0x6f, 0x75, 0x6e, 0x64, 0x0, // @1239 "Sound"
    0x62, 0x61, 0x63, 0x6b, 0x20, 0x0, // @1245 "back "
    0x30, 0x30, 0x30, 0x30, 0x0, // @1251 "0000"
    0x42, 0x61, 0x63, 0x6b, 0x0, // @1256 "Back"
    0x44, 0x72, 0x75, 0x67, 0x0, // @1261 "Drug"
    0x48, 0x65, 0x6c, 0x70, 0x0, // @1266 "Help"
    0x48, 0x69, 0x67, 0x68, 0x0, // @1271 "High"
    0x48, 0x6f, 0x75, 0x72, 0x0, // @1276 "Hour"
    0x4c, 0x6f, 0x63, 0x6b, 0x0, // @1281 "Lock"
    0x4d, 0x61, 0x6c, 0x65, 0x0, // @1286 "Male"
    0x4d, 0x75, 0x74, 0x65, 0x0, // @1291 "Mute"
    0x50, 0x61, 0x73, 0x73, 0x0, // @1296 "Pass"
    0x53, 0x54, 0x4f, 0x50, 0x0, // @1301 "STOP"
    0x53, 0x61, 0x76, 0x65, 0x0, // @1306 "Save"
    0x54, 0x49, 0x56, 0x41, 0x0, // @1311 "TIVA"
    0x56, 0x54, 0x42, 0x49, 0x0, // @1316 "VTBI"
    0x62, 0x61, 0x63, 0x6b, 0x0, // @1321 "back"
    0x73, 0x61, 0x76, 0x65, 0x0, // @1326 "save"
    0x30, 0x2e, 0x31, 0x0, // @1331 "0.1"
    0x31, 0x32, 0x33, 0x0, // @1335 "123"
    0x33, 0x30, 0x30, 0x0, // @1339 "300"
    0x34, 0x30, 0x30, 0x0, // @1343 "400"
    0x36, 0x30, 0x30, 0x0, // @1347 "600"
    0x38, 0x30, 0x30, 0x0, // @1351 "800"
    0x2, 0x20, 0x0, // @1355 "<> "
    0x41, 0x42, 0x43, 0x0, // @1358 "ABC"
    0x41, 0x67, 0x65, 0x0, // @1362 "Age"
    0x4c, 0x6f, 0x77, 0x0, // @1366 "Low"
    0x53, 0x45, 0x54, 0x0, // @1370 "SET"
    0x55, 0x73, 0x65, 0x0, // @1374 "Use"
    0x4b, 0x67, 0x0, // @1378 "Kg"
    0x63, 0x6d, 0x0, // @1381 "cm"
    0x32, 0x0, // @1384 "2"
    0x34, 0x0, // @1386 "4"
    0x35, 0x0, // @1388 "5"
    0x36, 0x0, // @1390 "6"
    0x37, 0x0, // @1392 "7"
    0x38, 0x0, // @1394 "8"
    0x39, 0x0 // @1396 "9"
};
TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;
TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesFr[] TEXT_LOCATION_FLASH_ATTRIBUTE;

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[2] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb,
    indicesFr
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 2)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
