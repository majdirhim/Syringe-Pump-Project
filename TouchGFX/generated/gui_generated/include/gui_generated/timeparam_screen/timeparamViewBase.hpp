/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TIMEPARAMVIEWBASE_HPP
#define TIMEPARAMVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/timeparam_screen/timeparamPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <gui/containers/CustomContainer1.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class timeparamViewBase : public touchgfx::View<timeparamPresenter>
{
public:
    timeparamViewBase();
    virtual ~timeparamViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonhourupclicked()
    {
        // Override and implement this function in timeparam
    }

    virtual void buttonhourdownclicked()
    {
        // Override and implement this function in timeparam
    }

    virtual void buttonminuteupclicked()
    {
        // Override and implement this function in timeparam
    }

    virtual void buttonminutedownclicked()
    {
        // Override and implement this function in timeparam
    }

    virtual void saveclockP()
    {
        // Override and implement this function in timeparam
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage BackendBlack;
    touchgfx::ScalableImage BackendChildren;
    touchgfx::Image Backend;
    CustomContainer1 customContainer11;
    CustomContainer1 customContainer11_1;
    touchgfx::TextArea textareahourcaption;
    touchgfx::TextAreaWithOneWildcard textaearHour;
    touchgfx::TextArea textareaminutecaption;
    touchgfx::TextAreaWithOneWildcard textAreaminute;
    touchgfx::Button buttonhourup;
    touchgfx::Button buttonhourdown;
    touchgfx::Button buttonminuteup;
    touchgfx::Button buttonminutedown;
    touchgfx::ButtonWithLabel buttonclock;
    touchgfx::Box box1;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  >  btn_Back;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAEARHOUR_SIZE = 3;
    touchgfx::Unicode::UnicodeChar textaearHourBuffer[TEXTAEARHOUR_SIZE];
    static const uint16_t TEXTAREAMINUTE_SIZE = 3;
    touchgfx::Unicode::UnicodeChar textAreaminuteBuffer[TEXTAREAMINUTE_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<timeparamViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<timeparamViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // TIMEPARAMVIEWBASE_HPP
