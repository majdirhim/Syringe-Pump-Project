/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef KEYBOARDNBVIEWBASE_HPP
#define KEYBOARDNBVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/keyboardnb_screen/KeyboardNBPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>

class KeyboardNBViewBase : public touchgfx::View<KeyboardNBPresenter>
{
public:
    KeyboardNBViewBase();
    virtual ~KeyboardNBViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void write0()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void IT_ERASE()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void write1()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void write2()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void write3()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void write4()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void write5()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void write6()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void write7()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void write8()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void write9()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void savedata()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void writecomma()
    {
        // Override and implement this function in KeyboardNB
    }

    virtual void closepopup()
    {
        // Override and implement this function in KeyboardNB
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage BackendBlack;
    touchgfx::ScalableImage BackendChildren;
    touchgfx::Image Backend;
    touchgfx::Box box1;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  >  Back;
    touchgfx::ScalableImage scalableImage1;
    touchgfx::ScalableImage scalableImage2_1_1;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Button7;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Button6;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Button9;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Button2;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Button5;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Button8;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Button1;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Button4;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  button3;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Button0;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  ERASE;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  SET;
    touchgfx::TextAreaWithOneWildcard textArea_centaine;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Buttoncoma;
    touchgfx::TextAreaWithOneWildcard textArea_comma;
    touchgfx::ModalWindow modalinputerror;
    touchgfx::TextArea inputerror;
    touchgfx::ButtonWithIcon buttonWithIcon1;
    touchgfx::TextAreaWithOneWildcard error;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA_CENTAINE_SIZE = 6;
    touchgfx::Unicode::UnicodeChar textArea_centaineBuffer[TEXTAREA_CENTAINE_SIZE];
    static const uint16_t TEXTAREA_COMMA_SIZE = 2;
    touchgfx::Unicode::UnicodeChar textArea_commaBuffer[TEXTAREA_COMMA_SIZE];
    static const uint16_t ERROR_SIZE = 20;
    touchgfx::Unicode::UnicodeChar errorBuffer[ERROR_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<KeyboardNBViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<KeyboardNBViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // KEYBOARDNBVIEWBASE_HPP
