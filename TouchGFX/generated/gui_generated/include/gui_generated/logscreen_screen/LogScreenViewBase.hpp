/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef LOGSCREENVIEWBASE_HPP
#define LOGSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/logscreen_screen/LogScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/containers/ListLayout.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/widgets/AnimatedImage.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class LogScreenViewBase : public touchgfx::View<LogScreenPresenter>
{
public:
    LogScreenViewBase();
    virtual ~LogScreenViewBase() {}
    virtual void setupScreen();
    virtual void handleTickEvent();
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void RequestData()
    {
        // Override and implement this function in LogScreen
    }

    virtual void testdata()
    {
        // Override and implement this function in LogScreen
    }

    virtual void RequestForward()
    {
        // Override and implement this function in LogScreen
    }

    virtual void testdataafteInit()
    {
        // Override and implement this function in LogScreen
    }

    virtual void RequestBack()
    {
        // Override and implement this function in LogScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage BackendBlack;
    touchgfx::ScalableImage BackendChildren;
    touchgfx::Image Backend;
    touchgfx::ScrollableContainer scrollableContainer1;
    touchgfx::ListLayout list;
    touchgfx::ModalWindow WaitPopUp;
    touchgfx::AnimatedImage WaitAnimation;
    touchgfx::TextArea nodata;
    touchgfx::Box box1_1;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  btn_Next;
    touchgfx::Box box1;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  >  btn_Back;
    touchgfx::Box box1_1_1;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  btn_Previous;

private:

    /*
     * Delay Variable Declarations
     */
    static const uint16_t WAIT_DURATION = 60;
    uint16_t waitCounter;
    static const uint16_t WAIT1_DURATION = 60;
    uint16_t wait1Counter;
    static const uint16_t WAIT2_DURATION = 60;
    uint16_t wait2Counter;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<LogScreenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // LOGSCREENVIEWBASE_HPP
