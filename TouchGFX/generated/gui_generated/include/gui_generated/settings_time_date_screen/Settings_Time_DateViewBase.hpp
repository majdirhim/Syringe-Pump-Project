/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SETTINGS_TIME_DATEVIEWBASE_HPP
#define SETTINGS_TIME_DATEVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/settings_time_date_screen/Settings_Time_DatePresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>

class Settings_Time_DateViewBase : public touchgfx::View<Settings_Time_DatePresenter>
{
public:
    Settings_Time_DateViewBase();
    virtual ~Settings_Time_DateViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonminuteupclicked()
    {
        // Override and implement this function in Settings_Time_Date
    }

    virtual void buttonminutedownclicked()
    {
        // Override and implement this function in Settings_Time_Date
    }

    virtual void buttonhourdownclicked()
    {
        // Override and implement this function in Settings_Time_Date
    }

    virtual void buttonhourupclicked()
    {
        // Override and implement this function in Settings_Time_Date
    }

    virtual void saveclock()
    {
        // Override and implement this function in Settings_Time_Date
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage BackendChildren;
    touchgfx::ScalableImage BackendBlack;
    touchgfx::ScalableImage Backend;
    touchgfx::Box box1;
    touchgfx::Box box2;
    touchgfx::TextArea textArea1;
    touchgfx::TextArea textArea2;
    touchgfx::TextAreaWithOneWildcard textaearHour;
    touchgfx::TextAreaWithOneWildcard textAreaminute;
    touchgfx::Button buttonhourup;
    touchgfx::Button buttonhourdown;
    touchgfx::Button buttonminuteup;
    touchgfx::Button buttonminutedown;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  Back;
    touchgfx::Box box3;
    touchgfx::ScalableImage BackArrow;
    touchgfx::ButtonWithLabel buttonclock;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAEARHOUR_SIZE = 3;
    touchgfx::Unicode::UnicodeChar textaearHourBuffer[TEXTAEARHOUR_SIZE];
    static const uint16_t TEXTAREAMINUTE_SIZE = 3;
    touchgfx::Unicode::UnicodeChar textAreaminuteBuffer[TEXTAREAMINUTE_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Settings_Time_DateViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Settings_Time_DateViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // SETTINGS_TIME_DATEVIEWBASE_HPP
