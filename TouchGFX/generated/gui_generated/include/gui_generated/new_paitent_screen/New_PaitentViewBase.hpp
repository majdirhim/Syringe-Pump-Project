/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef NEW_PAITENTVIEWBASE_HPP
#define NEW_PAITENTVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/new_paitent_screen/New_PaitentPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/Button.hpp>

class New_PaitentViewBase : public touchgfx::View<New_PaitentPresenter>
{
public:
    New_PaitentViewBase();
    virtual ~New_PaitentViewBase() {}
    virtual void setupScreen();

    /*
     * Custom Actions
     */
    virtual void keyboardSelectedVar(uint8_t value);
    virtual void genderselect(int8_t value);
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void keyboardSelected(uint8_t value)
    {
        // Override and implement this function in New_Paitent
    }

    virtual void updateScreen()
    {
        // Override and implement this function in New_Paitent
    }

    virtual void savepatientdata()
    {
        // Override and implement this function in New_Paitent
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage BackendBlack;
    touchgfx::ScalableImage BackendChildren;
    touchgfx::Image backend;
    touchgfx::BoxWithBorder boxWithBorderName;
    touchgfx::TextAreaWithOneWildcard textAreaName;
    touchgfx::TextArea textArea2;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonName;
    touchgfx::BoxWithBorder boxWithBorderWeight;
    touchgfx::TextAreaWithOneWildcard textAreaWeight;
    touchgfx::TextArea textArea2_1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonWeight;
    touchgfx::BoxWithBorder boxWithBorderAge;
    touchgfx::TextAreaWithOneWildcard textAreaAge;
    touchgfx::TextArea textArea2_2;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonAge;
    touchgfx::BoxWithBorder boxWithBorderHeight;
    touchgfx::TextAreaWithOneWildcard textAreaHeight;
    touchgfx::TextArea textArea2_3;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonHeight;
    touchgfx::BoxWithBorder boxWithBorderGender;
    touchgfx::TextAreaWithOneWildcard textAreaGender;
    touchgfx::TextArea textArea2_4;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonGender;
    touchgfx::Button button;
    touchgfx::Box box1;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  >  Back;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREANAME_SIZE = 18;
    touchgfx::Unicode::UnicodeChar textAreaNameBuffer[TEXTAREANAME_SIZE];
    static const uint16_t TEXTAREAWEIGHT_SIZE = 18;
    touchgfx::Unicode::UnicodeChar textAreaWeightBuffer[TEXTAREAWEIGHT_SIZE];
    static const uint16_t TEXTAREAAGE_SIZE = 18;
    touchgfx::Unicode::UnicodeChar textAreaAgeBuffer[TEXTAREAAGE_SIZE];
    static const uint16_t TEXTAREAHEIGHT_SIZE = 18;
    touchgfx::Unicode::UnicodeChar textAreaHeightBuffer[TEXTAREAHEIGHT_SIZE];
    static const uint16_t TEXTAREAGENDER_SIZE = 18;
    touchgfx::Unicode::UnicodeChar textAreaGenderBuffer[TEXTAREAGENDER_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<New_PaitentViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<New_PaitentViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // NEW_PAITENTVIEWBASE_HPP
