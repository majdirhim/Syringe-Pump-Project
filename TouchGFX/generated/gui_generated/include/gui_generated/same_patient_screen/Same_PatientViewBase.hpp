/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SAME_PATIENTVIEWBASE_HPP
#define SAME_PATIENTVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/same_patient_screen/Same_PatientPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/widgets/AnimatedImage.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class Same_PatientViewBase : public touchgfx::View<Same_PatientPresenter>
{
public:
    Same_PatientViewBase();
    virtual ~Same_PatientViewBase() {}
    virtual void setupScreen();
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void GetStoredParam()
    {
        // Override and implement this function in Same_Patient
    }

    virtual void testdata()
    {
        // Override and implement this function in Same_Patient
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage BackendBlack;
    touchgfx::ScalableImage BackendChildren;
    touchgfx::Image backend;
    touchgfx::ScrollableContainer ScrollContainer;
    touchgfx::BoxWithBorder boxWithBorderName;
    touchgfx::TextAreaWithOneWildcard textAreaName;
    touchgfx::TextArea Name;
    touchgfx::BoxWithBorder boxWithBorderWeight;
    touchgfx::TextAreaWithOneWildcard textAreaWeight;
    touchgfx::TextArea Weight;
    touchgfx::BoxWithBorder boxWithBorderAge;
    touchgfx::TextAreaWithOneWildcard textAreaAge;
    touchgfx::TextArea Age;
    touchgfx::BoxWithBorder boxWithBorderHeight;
    touchgfx::TextAreaWithOneWildcard textAreaHeight;
    touchgfx::TextArea Height;
    touchgfx::BoxWithBorder boxWithBorderGender;
    touchgfx::TextArea Gender;
    touchgfx::TextAreaWithOneWildcard textAreaGender;
    touchgfx::Button button;
    touchgfx::ModalWindow WaitPopUp;
    touchgfx::AnimatedImage WaitAnimation;
    touchgfx::TextArea nodata;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  >  Back;
    touchgfx::Box box1;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREANAME_SIZE = 18;
    touchgfx::Unicode::UnicodeChar textAreaNameBuffer[TEXTAREANAME_SIZE];
    static const uint16_t TEXTAREAWEIGHT_SIZE = 18;
    touchgfx::Unicode::UnicodeChar textAreaWeightBuffer[TEXTAREAWEIGHT_SIZE];
    static const uint16_t TEXTAREAAGE_SIZE = 18;
    touchgfx::Unicode::UnicodeChar textAreaAgeBuffer[TEXTAREAAGE_SIZE];
    static const uint16_t TEXTAREAHEIGHT_SIZE = 18;
    touchgfx::Unicode::UnicodeChar textAreaHeightBuffer[TEXTAREAHEIGHT_SIZE];
    static const uint16_t TEXTAREAGENDER_SIZE = 18;
    touchgfx::Unicode::UnicodeChar textAreaGenderBuffer[TEXTAREAGENDER_SIZE];

private:

    /*
     * Delay Variable Declarations
     */
    static const uint16_t WAIT_DURATION = 60;
    uint16_t waitCounter;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Same_PatientViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Same_PatientViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // SAME_PATIENTVIEWBASE_HPP
