/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/startup_screen/StartUpViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


StartUpViewBase::StartUpViewBase() :
    waitForInitCounter(0),
    hideWhiteScreenEndedCallback(this, &StartUpViewBase::hideWhiteScreenEndedCallbackHandler),
    moveLogoEndedCallback(this, &StartUpViewBase::moveLogoEndedCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    ChildrenBackground.setBitmap(touchgfx::Bitmap(BITMAP_BACKEND4_ID));
    ChildrenBackground.setPosition(0, 0, 480, 272);
    ChildrenBackground.setVisible(false);
    ChildrenBackground.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    DarkBackground.setBitmap(touchgfx::Bitmap(BITMAP_BACKEND3_ID));
    DarkBackground.setPosition(0, 0, 480, 272);
    DarkBackground.setVisible(false);
    DarkBackground.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    DefaultBackground.setBitmap(touchgfx::Bitmap(BITMAP_BACKEND2_ID));
    DefaultBackground.setPosition(0, 0, 480, 272);
    DefaultBackground.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    MediWaveLogo.setBitmap(touchgfx::Bitmap(BITMAP_GROUPE7_ID));
    MediWaveLogo.setPosition(201, 0, 78, 103);
    MediWaveLogo.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    WhiteScreen.setPosition(-81, -40, 643, 352);
    WhiteScreen.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));

    InitErrorPopUp.setBackground(touchgfx::BitmapId(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_800X480PX_ID), -160, -104);
    InitErrorPopUp.setShadeColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    InitErrorPopUp.setShadeAlpha(150);
    InitErrorPopUp.hide();

    InitErrorMessage.setXY(292, 215);
    InitErrorMessage.setColor(touchgfx::Color::getColorFromRGB(250, 0, 0));
    InitErrorMessage.setLinespacing(0);
    InitErrorMessage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JIW4));
    InitErrorPopUp.add(InitErrorMessage);

    LoadingCercle.setPosition(94, 47, 293, 178);
    LoadingCercle.setCenter(146, 86);
    LoadingCercle.setRadius(61);
    LoadingCercle.setLineWidth(3);
    LoadingCercle.setArc(0, 360);
    LoadingCercle.setCapPrecision(180);
    LoadingCerclePainter.setColor(touchgfx::Color::getColorFromRGB(28, 208, 252));
    LoadingCercle.setPainter(LoadingCerclePainter);

    textArea1.setXY(144, 26);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(28, 208, 252));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GS2L));

    add(__background);
    add(ChildrenBackground);
    add(DarkBackground);
    add(DefaultBackground);
    add(MediWaveLogo);
    add(WhiteScreen);
    add(InitErrorPopUp);
    add(LoadingCercle);
    add(textArea1);
}

void StartUpViewBase::setupScreen()
{

    //WaitForInit
    //When screen transition begins delay
    //Delay for 1000 ms (60 Ticks)
    waitForInitCounter = WAITFORINIT_DURATION;

}

//Handles delays
void StartUpViewBase::handleTickEvent()
{
    if(waitForInitCounter > 0)
    {
        waitForInitCounter--;
        if(waitForInitCounter == 0)
        {
            //CheckInitStatus
            //When WaitForInit completed call virtual function
            //Call checkInitStatus
            checkInitStatus();
        }
    }
}

void StartUpViewBase::initSuccess(uint8_t value)
{
    //HideWhiteScreen
    //When initSuccess is called fade WhiteScreen
    //Fade WhiteScreen to alpha:0 with LinearIn easing in 1000 ms (60 Ticks)
    WhiteScreen.clearFadeAnimationEndedAction();
    WhiteScreen.startFadeAnimation(0, 60, touchgfx::EasingEquations::linearEaseIn);
    WhiteScreen.setFadeAnimationEndedAction(hideWhiteScreenEndedCallback);
}

void StartUpViewBase::hideWhiteScreenEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Box>& comp)
{
    //MoveLogo
    //When HideWhiteScreen completed move MediWaveLogo
    //Move MediWaveLogo to x:252, y:106 with LinearIn easing in 1000 ms (60 Ticks)
    MediWaveLogo.clearMoveAnimationEndedAction();
    MediWaveLogo.startMoveAnimation(252, 106, 60, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);
    MediWaveLogo.setMoveAnimationEndedAction(moveLogoEndedCallback);
}

void StartUpViewBase::moveLogoEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::ScalableImage>& comp)
{
    //ChangeScreenToHome
    //When MoveLogo completed change screen to Home
    //Go to Home with no screen transition
    application().gotoHomeScreenNoTransition();
}
