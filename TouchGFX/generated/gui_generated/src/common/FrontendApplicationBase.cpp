/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/startup_screen/startupView.hpp>
#include <gui/startup_screen/startupPresenter.hpp>
#include <gui/intro_screen/introView.hpp>
#include <gui/intro_screen/introPresenter.hpp>
#include <gui/new_paitent_screen/New_PaitentView.hpp>
#include <gui/new_paitent_screen/New_PaitentPresenter.hpp>
#include <gui/same_patient_screen/Same_PatientView.hpp>
#include <gui/same_patient_screen/Same_PatientPresenter.hpp>
#include <gui/specialmode_screen/SpecialModeView.hpp>
#include <gui/specialmode_screen/SpecialModePresenter.hpp>
#include <gui/screenkeyboard_screen/ScreenKeyboardView.hpp>
#include <gui/screenkeyboard_screen/ScreenKeyboardPresenter.hpp>
#include <gui/genderchoice_screen/genderchoiceView.hpp>
#include <gui/genderchoice_screen/genderchoicePresenter.hpp>
#include <gui/mainscreen_withstart_screen/mainScreen_WithSTARTView.hpp>
#include <gui/mainscreen_withstart_screen/mainScreen_WithSTARTPresenter.hpp>
#include <gui/testversion_screen/testVersionView.hpp>
#include <gui/testversion_screen/testVersionPresenter.hpp>
#include <gui/syringedetected_screen/syringedetectedView.hpp>
#include <gui/syringedetected_screen/syringedetectedPresenter.hpp>
#include <gui/settings__screen_screen/Settings__screenView.hpp>
#include <gui/settings__screen_screen/Settings__screenPresenter.hpp>
#include <gui/keyboardnb_screen/KeyboardNBView.hpp>
#include <gui/keyboardnb_screen/KeyboardNBPresenter.hpp>
#include <gui/settings_time_date_screen/Settings_Time_DateView.hpp>
#include <gui/settings_time_date_screen/Settings_Time_DatePresenter.hpp>
#include <gui/screenselectdrug_screen/ScreenselectdrugView.hpp>
#include <gui/screenselectdrug_screen/ScreenselectdrugPresenter.hpp>
#include <gui/oclusion_level_screen/Oclusion_levelView.hpp>
#include <gui/oclusion_level_screen/Oclusion_levelPresenter.hpp>
#include <gui/timeparam_screen/timeparamView.hpp>
#include <gui/timeparam_screen/timeparamPresenter.hpp>
#include <gui/alarmlist_screen/AlarmListView.hpp>
#include <gui/alarmlist_screen/AlarmListPresenter.hpp>
#include <gui/lockscreen_screen/LockScreenView.hpp>
#include <gui/lockscreen_screen/LockScreenPresenter.hpp>
#include <gui/logscreen_screen/LogScreenView.hpp>
#include <gui/logscreen_screen/LogScreenPresenter.hpp>
#include <gui/departement_screen/DepartementView.hpp>
#include <gui/departement_screen/DepartementPresenter.hpp>
#include <gui/druglibrary_screen/DrugLibraryView.hpp>
#include <gui/druglibrary_screen/DrugLibraryPresenter.hpp>
#include <gui/manual_screen/ManualView.hpp>
#include <gui/manual_screen/ManualPresenter.hpp>
#include <gui/battery_screen/BatteryView.hpp>
#include <gui/battery_screen/BatteryPresenter.hpp>
#include <gui/maintenance_screen/MaintenanceView.hpp>
#include <gui/maintenance_screen/MaintenancePresenter.hpp>
#include <gui/functiongeneration_screen/functiongenerationView.hpp>
#include <gui/functiongeneration_screen/functiongenerationPresenter.hpp>
#include <gui/intro_1_screen/intro_1View.hpp>
#include <gui/intro_1_screen/intro_1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
}

/*
 * Screen Transition Declarations
 */

// startup

void FrontendApplicationBase::gotostartupScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotostartupScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotostartupScreenNoTransitionImpl()
{
    touchgfx::makeTransition<startupView, startupPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// New_Paitent

void FrontendApplicationBase::gotoNew_PaitentScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoNew_PaitentScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoNew_PaitentScreenNoTransitionImpl()
{
    touchgfx::makeTransition<New_PaitentView, New_PaitentPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Same_Patient

void FrontendApplicationBase::gotoSame_PatientScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSame_PatientScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSame_PatientScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Same_PatientView, Same_PatientPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// SpecialMode

void FrontendApplicationBase::gotoSpecialModeScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSpecialModeScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSpecialModeScreenNoTransitionImpl()
{
    touchgfx::makeTransition<SpecialModeView, SpecialModePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ScreenKeyboard

void FrontendApplicationBase::gotoScreenKeyboardScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenKeyboardScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenKeyboardScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenKeyboardView, ScreenKeyboardPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// genderchoice

void FrontendApplicationBase::gotogenderchoiceScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotogenderchoiceScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotogenderchoiceScreenNoTransitionImpl()
{
    touchgfx::makeTransition<genderchoiceView, genderchoicePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// mainScreen_WithSTART

void FrontendApplicationBase::gotomainScreen_WithSTARTScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreen_WithSTARTScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotomainScreen_WithSTARTScreenNoTransitionImpl()
{
    touchgfx::makeTransition<mainScreen_WithSTARTView, mainScreen_WithSTARTPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// testVersion

void FrontendApplicationBase::gototestVersionScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gototestVersionScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gototestVersionScreenNoTransitionImpl()
{
    touchgfx::makeTransition<testVersionView, testVersionPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// syringedetected

void FrontendApplicationBase::gotosyringedetectedScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotosyringedetectedScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotosyringedetectedScreenNoTransitionImpl()
{
    touchgfx::makeTransition<syringedetectedView, syringedetectedPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Settings__screen

void FrontendApplicationBase::gotoSettings__screenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSettings__screenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSettings__screenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Settings__screenView, Settings__screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// KeyboardNB

void FrontendApplicationBase::gotoKeyboardNBScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoKeyboardNBScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoKeyboardNBScreenNoTransitionImpl()
{
    touchgfx::makeTransition<KeyboardNBView, KeyboardNBPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Settings_Time_Date

void FrontendApplicationBase::gotoSettings_Time_DateScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSettings_Time_DateScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSettings_Time_DateScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Settings_Time_DateView, Settings_Time_DatePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Screenselectdrug

void FrontendApplicationBase::gotoScreenselectdrugScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenselectdrugScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenselectdrugScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenselectdrugView, ScreenselectdrugPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Oclusion_level

void FrontendApplicationBase::gotoOclusion_levelScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoOclusion_levelScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoOclusion_levelScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Oclusion_levelView, Oclusion_levelPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// timeparam

void FrontendApplicationBase::gototimeparamScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gototimeparamScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gototimeparamScreenNoTransitionImpl()
{
    touchgfx::makeTransition<timeparamView, timeparamPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// AlarmList

void FrontendApplicationBase::gotoAlarmListScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoAlarmListScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoAlarmListScreenNoTransitionImpl()
{
    touchgfx::makeTransition<AlarmListView, AlarmListPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// LockScreen

void FrontendApplicationBase::gotoLockScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLockScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoLockScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<LockScreenView, LockScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// LogScreen

void FrontendApplicationBase::gotoLogScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLogScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoLogScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<LogScreenView, LogScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Departement

void FrontendApplicationBase::gotoDepartementScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoDepartementScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoDepartementScreenNoTransitionImpl()
{
    touchgfx::makeTransition<DepartementView, DepartementPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// DrugLibrary

void FrontendApplicationBase::gotoDrugLibraryScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoDrugLibraryScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoDrugLibraryScreenNoTransitionImpl()
{
    touchgfx::makeTransition<DrugLibraryView, DrugLibraryPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Manual

void FrontendApplicationBase::gotoManualScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoManualScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoManualScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ManualView, ManualPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Battery

void FrontendApplicationBase::gotoBatteryScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoBatteryScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoBatteryScreenNoTransitionImpl()
{
    touchgfx::makeTransition<BatteryView, BatteryPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Maintenance

void FrontendApplicationBase::gotoMaintenanceScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMaintenanceScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoMaintenanceScreenNoTransitionImpl()
{
    touchgfx::makeTransition<MaintenanceView, MaintenancePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
