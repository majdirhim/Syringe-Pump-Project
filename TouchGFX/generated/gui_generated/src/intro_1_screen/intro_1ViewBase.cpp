/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/intro_1_screen/intro_1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

intro_1ViewBase::intro_1ViewBase() :
    waitCounter(0),
    apearEndedCallback(this, &intro_1ViewBase::apearEndedCallbackHandler),
    moveEndedCallback(this, &intro_1ViewBase::moveEndedCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    BackendBlack.setBitmap(touchgfx::Bitmap(BITMAP_BACKEND3_ID));
    BackendBlack.setPosition(0, 0, 480, 272);
    BackendBlack.setVisible(false);
    BackendBlack.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    BackendChildren.setBitmap(touchgfx::Bitmap(BITMAP_BACKEND4_ID));
    BackendChildren.setPosition(0, 0, 481, 272);
    BackendChildren.setVisible(false);
    BackendChildren.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    backend.setXY(0, 0);
    backend.setBitmap(touchgfx::Bitmap(BITMAP_MINI_BACKEND2_ID));

    logoMEDIWAVE.setBitmap(touchgfx::Bitmap(BITMAP_MINI_GROUPE7_ID));
    logoMEDIWAVE.setPosition(188, 72, 105, 128);
    logoMEDIWAVE.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    logoMEDIWAVE.setAlpha(0);

    add(__background);
    add(BackendBlack);
    add(BackendChildren);
    add(backend);
    add(logoMEDIWAVE);
}

void intro_1ViewBase::setupScreen()
{

}

//Handles delays
void intro_1ViewBase::handleTickEvent()
{
    if(waitCounter > 0)
    {
        waitCounter--;
        if(waitCounter == 0)
        {
            //move
            //When wait completed move logoMEDIWAVE
            //Move logoMEDIWAVE to x:209, y:96 with LinearIn easing in 1000 ms (60 Ticks)
            logoMEDIWAVE.clearMoveAnimationEndedAction();
            logoMEDIWAVE.startMoveAnimation(209, 96, 60, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);
            logoMEDIWAVE.setMoveAnimationEndedAction(moveEndedCallback);
        }
    }
}

//Called when the screen transition ends
void intro_1ViewBase::afterTransition()
{
    //apear
    //When screen transition ends fade logoMEDIWAVE
    //Fade logoMEDIWAVE to alpha:255 with CubicIn easing in 1000 ms (60 Ticks)
    logoMEDIWAVE.clearFadeAnimationEndedAction();
    logoMEDIWAVE.startFadeAnimation(255, 60, touchgfx::EasingEquations::cubicEaseIn);
    logoMEDIWAVE.setFadeAnimationEndedAction(apearEndedCallback);
}

void intro_1ViewBase::apearEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::MoveAnimator<touchgfx::ScalableImage> >& comp)
{
    //paramRequest
    //When apear completed call virtual function
    //Call systemparaminit
    systemparaminit();

    //wait
    //When paramRequest completed delay
    //Delay for 1000 ms (60 Ticks)
    waitCounter = WAIT_DURATION;
}

void intro_1ViewBase::moveEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::ScalableImage>& comp)
{
    //gotostartup
    //When move completed change screen to startup
    //Go to startup with no screen transition
    application().gotostartupScreenNoTransition();
}
