
openh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f588  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800f828  0800f828  0001f828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f95c  0800f95c  0001f95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f964  0800f964  0001f964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f968  0800f968  0001f968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  20000000  0800f96c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ee8  20000168  0800fad4  00020168  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005050  0800fad4  00025050  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003435d  00000000  00000000  00020196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006225  00000000  00000000  000544f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026f0  00000000  00000000  0005a718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000024b0  00000000  00000000  0005ce08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003fd68  00000000  00000000  0005f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003086a  00000000  00000000  0009f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018f25e  00000000  00000000  000cf88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0025eae8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a430  00000000  00000000  0025eb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000168 	.word	0x20000168
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f810 	.word	0x0800f810

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000016c 	.word	0x2000016c
 80002dc:	0800f810 	.word	0x0800f810

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]
 80005fa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <MX_ADC3_Init+0xc0>)
 80005fe:	4a2a      	ldr	r2, [pc, #168]	; (80006a8 <MX_ADC3_Init+0xc4>)
 8000600:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_ADC3_Init+0xc0>)
 8000604:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000608:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_ADC3_Init+0xc0>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <MX_ADC3_Init+0xc0>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <MX_ADC3_Init+0xc0>)
 8000618:	2204      	movs	r2, #4
 800061a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_ADC3_Init+0xc0>)
 800061e:	2200      	movs	r2, #0
 8000620:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_ADC3_Init+0xc0>)
 8000624:	2201      	movs	r2, #1
 8000626:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_ADC3_Init+0xc0>)
 800062a:	2201      	movs	r2, #1
 800062c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC3_Init+0xc0>)
 8000630:	2200      	movs	r2, #0
 8000632:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_ADC3_Init+0xc0>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_ADC3_Init+0xc0>)
 800063c:	2200      	movs	r2, #0
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_ADC3_Init+0xc0>)
 8000642:	2200      	movs	r2, #0
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_ADC3_Init+0xc0>)
 8000648:	2200      	movs	r2, #0
 800064a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_ADC3_Init+0xc0>)
 800064e:	2200      	movs	r2, #0
 8000650:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_ADC3_Init+0xc0>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800065a:	4812      	ldr	r0, [pc, #72]	; (80006a4 <MX_ADC3_Init+0xc0>)
 800065c:	f004 f8d2 	bl	8004804 <HAL_ADC_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000666:	f002 ffdf 	bl	8003628 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_ADC3_Init+0xc8>)
 800066c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066e:	2306      	movs	r3, #6
 8000670:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000672:	2306      	movs	r3, #6
 8000674:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000676:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800067a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067c:	2304      	movs	r3, #4
 800067e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_ADC3_Init+0xc0>)
 800068e:	f004 fc27 	bl	8004ee0 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000698:	f002 ffc6 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000184 	.word	0x20000184
 80006a8:	58026000 	.word	0x58026000
 80006ac:	cb840000 	.word	0xcb840000

080006b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0b2      	sub	sp, #200	; 0xc8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	22bc      	movs	r2, #188	; 0xbc
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f00f f89d 	bl	800f800 <memset>
  if(adcHandle->Instance==ADC3)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <HAL_ADC_MspInit+0x88>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d12f      	bne.n	8000730 <HAL_ADC_MspInit+0x80>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80006d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 80006da:	2312      	movs	r3, #18
 80006dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80006ea:	23c0      	movs	r3, #192	; 0xc0
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80006ee:	2320      	movs	r3, #32
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80006f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4618      	mov	r0, r3
 8000704:	f007 f916 	bl	8007934 <HAL_RCCEx_PeriphCLKConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <HAL_ADC_MspInit+0x62>
    {
      Error_Handler();
 800070e:	f002 ff8b 	bl	8003628 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_ADC_MspInit+0x8c>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	4a08      	ldr	r2, [pc, #32]	; (800073c <HAL_ADC_MspInit+0x8c>)
 800071a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_ADC_MspInit+0x8c>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000730:	bf00      	nop
 8000732:	37c8      	adds	r7, #200	; 0xc8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	58026000 	.word	0x58026000
 800073c:	58024400 	.word	0x58024400

08000740 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_CRC_Init+0x3c>)
 8000746:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <MX_CRC_Init+0x40>)
 8000748:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_CRC_Init+0x3c>)
 800074c:	2200      	movs	r2, #0
 800074e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_CRC_Init+0x3c>)
 8000752:	2200      	movs	r2, #0
 8000754:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_CRC_Init+0x3c>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_CRC_Init+0x3c>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_CRC_Init+0x3c>)
 8000764:	2201      	movs	r2, #1
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_CRC_Init+0x3c>)
 800076a:	f005 f97d 	bl	8005a68 <HAL_CRC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000774:	f002 ff58 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200001e8 	.word	0x200001e8
 8000780:	58024c00 	.word	0x58024c00

08000784 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <HAL_CRC_MspInit+0x3c>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d10e      	bne.n	80007b4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_CRC_MspInit+0x40>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <HAL_CRC_MspInit+0x40>)
 800079e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <HAL_CRC_MspInit+0x40>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	58024c00 	.word	0x58024c00
 80007c4:	58024400 	.word	0x58024400

080007c8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_DMA2D_Init+0x6c>)
 80007ce:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <MX_DMA2D_Init+0x70>)
 80007d0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_DMA2D_Init+0x6c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_DMA2D_Init+0x6c>)
 80007da:	2202      	movs	r2, #2
 80007dc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_DMA2D_Init+0x6c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_DMA2D_Init+0x6c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_DMA2D_Init+0x6c>)
 80007ec:	2202      	movs	r2, #2
 80007ee:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_DMA2D_Init+0x6c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_DMA2D_Init+0x6c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80007fc:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <MX_DMA2D_Init+0x6c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_DMA2D_Init+0x6c>)
 8000804:	2200      	movs	r2, #0
 8000806:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_DMA2D_Init+0x6c>)
 800080a:	2200      	movs	r2, #0
 800080c:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800080e:	4809      	ldr	r0, [pc, #36]	; (8000834 <MX_DMA2D_Init+0x6c>)
 8000810:	f005 fa14 	bl	8005c3c <HAL_DMA2D_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800081a:	f002 ff05 	bl	8003628 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800081e:	2101      	movs	r1, #1
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_DMA2D_Init+0x6c>)
 8000822:	f005 fa6f 	bl	8005d04 <HAL_DMA2D_ConfigLayer>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800082c:	f002 fefc 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000020c 	.word	0x2000020c
 8000838:	52001000 	.word	0x52001000

0800083c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <HAL_DMA2D_MspInit+0x3c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d10e      	bne.n	800086c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_DMA2D_MspInit+0x40>)
 8000850:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000854:	4a09      	ldr	r2, [pc, #36]	; (800087c <HAL_DMA2D_MspInit+0x40>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <HAL_DMA2D_MspInit+0x40>)
 8000860:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000864:	f003 0310 	and.w	r3, r3, #16
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	52001000 	.word	0x52001000
 800087c:	58024400 	.word	0x58024400

08000880 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000884:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <MX_FREERTOS_Init+0x58>)
 8000886:	2100      	movs	r1, #0
 8000888:	4814      	ldr	r0, [pc, #80]	; (80008dc <MX_FREERTOS_Init+0x5c>)
 800088a:	f00c fa77 	bl	800cd7c <osThreadNew>
 800088e:	4603      	mov	r3, r0
 8000890:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_FREERTOS_Init+0x60>)
 8000892:	6013      	str	r3, [r2, #0]

  /* creation of Stepper */
  StepperHandle = osThreadNew(Stepper_motor, NULL, &Stepper_attributes);
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <MX_FREERTOS_Init+0x64>)
 8000896:	2100      	movs	r1, #0
 8000898:	4813      	ldr	r0, [pc, #76]	; (80008e8 <MX_FREERTOS_Init+0x68>)
 800089a:	f00c fa6f 	bl	800cd7c <osThreadNew>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_FREERTOS_Init+0x6c>)
 80008a2:	6013      	str	r3, [r2, #0]

  /* creation of Connectivity */
  ConnectivityHandle = osThreadNew(Cloud_Connectivity, NULL, &Connectivity_attributes);
 80008a4:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_FREERTOS_Init+0x70>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4812      	ldr	r0, [pc, #72]	; (80008f4 <MX_FREERTOS_Init+0x74>)
 80008aa:	f00c fa67 	bl	800cd7c <osThreadNew>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <MX_FREERTOS_Init+0x78>)
 80008b2:	6013      	str	r3, [r2, #0]

  /* creation of Sensors */
  SensorsHandle = osThreadNew(Sensors_measurements, NULL, &Sensors_attributes);
 80008b4:	4a11      	ldr	r2, [pc, #68]	; (80008fc <MX_FREERTOS_Init+0x7c>)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4811      	ldr	r0, [pc, #68]	; (8000900 <MX_FREERTOS_Init+0x80>)
 80008ba:	f00c fa5f 	bl	800cd7c <osThreadNew>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a10      	ldr	r2, [pc, #64]	; (8000904 <MX_FREERTOS_Init+0x84>)
 80008c2:	6013      	str	r3, [r2, #0]

  /* creation of IHM */
  IHMHandle = osThreadNew(Interface, NULL, &IHM_attributes);
 80008c4:	4a10      	ldr	r2, [pc, #64]	; (8000908 <MX_FREERTOS_Init+0x88>)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4810      	ldr	r0, [pc, #64]	; (800090c <MX_FREERTOS_Init+0x8c>)
 80008ca:	f00c fa57 	bl	800cd7c <osThreadNew>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <MX_FREERTOS_Init+0x90>)
 80008d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	0800f870 	.word	0x0800f870
 80008dc:	08000915 	.word	0x08000915
 80008e0:	20000278 	.word	0x20000278
 80008e4:	0800f894 	.word	0x0800f894
 80008e8:	08000925 	.word	0x08000925
 80008ec:	2000027c 	.word	0x2000027c
 80008f0:	0800f8b8 	.word	0x0800f8b8
 80008f4:	0800097d 	.word	0x0800097d
 80008f8:	20000280 	.word	0x20000280
 80008fc:	0800f8dc 	.word	0x0800f8dc
 8000900:	08000991 	.word	0x08000991
 8000904:	20000284 	.word	0x20000284
 8000908:	0800f900 	.word	0x0800f900
 800090c:	080009f9 	.word	0x080009f9
 8000910:	20000288 	.word	0x20000288

08000914 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f00c fabf 	bl	800cea0 <osDelay>
 8000922:	e7fb      	b.n	800091c <StartDefaultTask+0x8>

08000924 <Stepper_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Stepper_motor */
void Stepper_motor(void *argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_motor */
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <Stepper_motor+0x54>)
 800092e:	f002 fe99 	bl	8003664 <BSP_MotorControl_AttachFlagInterrupt>
  /* Infinite loop */
  for(;;)
  {
	L6474_SetMaxSpeed(0, 100);
 8000932:	2164      	movs	r1, #100	; 0x64
 8000934:	2000      	movs	r0, #0
 8000936:	f001 fa75 	bl	8001e24 <L6474_SetMaxSpeed>
	L6474_SetMinSpeed(0, 100);
 800093a:	2164      	movs	r1, #100	; 0x64
 800093c:	2000      	movs	r0, #0
 800093e:	f001 fabd 	bl	8001ebc <L6474_SetMinSpeed>
	L6474_Move(0, BACKWARD, 16000);
 8000942:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000946:	2100      	movs	r1, #0
 8000948:	2000      	movs	r0, #0
 800094a:	f000 ff4d 	bl	80017e8 <L6474_Move>
	L6474_WaitWhileActive(0);
 800094e:	2000      	movs	r0, #0
 8000950:	f001 fb42 	bl	8001fd8 <L6474_WaitWhileActive>
	osDelay(1000);
 8000954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000958:	f00c faa2 	bl	800cea0 <osDelay>
	L6474_Move(0, FORWARD, 16000);
 800095c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000960:	2101      	movs	r1, #1
 8000962:	2000      	movs	r0, #0
 8000964:	f000 ff40 	bl	80017e8 <L6474_Move>
	L6474_WaitWhileActive(0);
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fb35 	bl	8001fd8 <L6474_WaitWhileActive>
	osDelay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000972:	f00c fa95 	bl	800cea0 <osDelay>
	L6474_SetMaxSpeed(0, 100);
 8000976:	e7dc      	b.n	8000932 <Stepper_motor+0xe>
 8000978:	080035ed 	.word	0x080035ed

0800097c <Cloud_Connectivity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Cloud_Connectivity */
void Cloud_Connectivity(void *argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Cloud_Connectivity */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000984:	2001      	movs	r0, #1
 8000986:	f00c fa8b 	bl	800cea0 <osDelay>
 800098a:	e7fb      	b.n	8000984 <Cloud_Connectivity+0x8>
 800098c:	0000      	movs	r0, r0
	...

08000990 <Sensors_measurements>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensors_measurements */
void Sensors_measurements(void *argument)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	uint16_t readValue;

  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_PollForConversion(&hadc3, 10000);
 8000998:	f242 7110 	movw	r1, #10000	; 0x2710
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <Sensors_measurements+0x60>)
 800099e:	f004 f99d 	bl	8004cdc <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc3);
 80009a2:	4813      	ldr	r0, [pc, #76]	; (80009f0 <Sensors_measurements+0x60>)
 80009a4:	f004 fa8e 	bl	8004ec4 <HAL_ADC_GetValue>
 80009a8:	4603      	mov	r3, r0
 80009aa:	81fb      	strh	r3, [r7, #14]
	  tCelsius = 357.558 - 0.187364 * readValue;
 80009ac:	89fb      	ldrh	r3, [r7, #14]
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009b6:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80009e0 <Sensors_measurements+0x50>
 80009ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009be:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80009e8 <Sensors_measurements+0x58>
 80009c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80009c6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009ca:	ee17 2a90 	vmov	r2, s15
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <Sensors_measurements+0x64>)
 80009d0:	601a      	str	r2, [r3, #0]
	  osDelay(1000);
 80009d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d6:	f00c fa63 	bl	800cea0 <osDelay>
	  HAL_ADC_PollForConversion(&hadc3, 10000);
 80009da:	e7dd      	b.n	8000998 <Sensors_measurements+0x8>
 80009dc:	f3af 8000 	nop.w
 80009e0:	26394fad 	.word	0x26394fad
 80009e4:	3fc7fb8b 	.word	0x3fc7fb8b
 80009e8:	916872b0 	.word	0x916872b0
 80009ec:	407658ed 	.word	0x407658ed
 80009f0:	20000184 	.word	0x20000184
 80009f4:	20000274 	.word	0x20000274

080009f8 <Interface>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Interface */
void Interface(void *argument)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Interface */
  /* Infinite loop */
  for(;;)
 8000a00:	e7fe      	b.n	8000a00 <Interface+0x8>
	...

08000a04 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08e      	sub	sp, #56	; 0x38
 8000a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1a:	4b68      	ldr	r3, [pc, #416]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	4a66      	ldr	r2, [pc, #408]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a22:	f043 0310 	orr.w	r3, r3, #16
 8000a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2a:	4b64      	ldr	r3, [pc, #400]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	f003 0310 	and.w	r3, r3, #16
 8000a34:	623b      	str	r3, [r7, #32]
 8000a36:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a38:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3e:	4a5f      	ldr	r2, [pc, #380]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a48:	4b5c      	ldr	r3, [pc, #368]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a52:	61fb      	str	r3, [r7, #28]
 8000a54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a56:	4b59      	ldr	r3, [pc, #356]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	4a57      	ldr	r2, [pc, #348]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a5e:	f043 0320 	orr.w	r3, r3, #32
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a66:	4b55      	ldr	r3, [pc, #340]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	f003 0320 	and.w	r3, r3, #32
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a74:	4b51      	ldr	r3, [pc, #324]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7a:	4a50      	ldr	r2, [pc, #320]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a84:	4b4d      	ldr	r3, [pc, #308]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a48      	ldr	r2, [pc, #288]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a41      	ldr	r2, [pc, #260]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aec:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a32      	ldr	r2, [pc, #200]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0a:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a2a      	ldr	r2, [pc, #168]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0308 	and.w	r3, r3, #8
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, STBY_RST_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000b2e:	4824      	ldr	r0, [pc, #144]	; (8000bc0 <MX_GPIO_Init+0x1bc>)
 8000b30:	f005 fb46 	bl	80061c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	21c0      	movs	r1, #192	; 0xc0
 8000b38:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <MX_GPIO_Init+0x1c0>)
 8000b3a:	f005 fb41 	bl	80061c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = STBY_RST_Pin|DIR1_Pin;
 8000b3e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <MX_GPIO_Init+0x1bc>)
 8000b58:	f005 f982 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLAG_Pin;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FLAG_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <MX_GPIO_Init+0x1c4>)
 8000b70:	f005 f976 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b86:	2301      	movs	r3, #1
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480e      	ldr	r0, [pc, #56]	; (8000bcc <MX_GPIO_Init+0x1c8>)
 8000b92:	f005 f965 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000b96:	23c0      	movs	r3, #192	; 0xc0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_GPIO_Init+0x1c0>)
 8000bae:	f005 f957 	bl	8005e60 <HAL_GPIO_Init>

}
 8000bb2:	bf00      	nop
 8000bb4:	3738      	adds	r7, #56	; 0x38
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	58024400 	.word	0x58024400
 8000bc0:	58022000 	.word	0x58022000
 8000bc4:	58020400 	.word	0x58020400
 8000bc8:	58021c00 	.word	0x58021c00
 8000bcc:	58020000 	.word	0x58020000

08000bd0 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bd6:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <MX_I2C1_SMBUS_Init+0x80>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10C0ECFF;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <MX_I2C1_SMBUS_Init+0x84>)
 8000bde:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000be8:	2202      	movs	r2, #2
 8000bea:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000084C4;
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c1e:	f248 42c4 	movw	r2, #33988	; 0x84c4
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c26:	f009 f811 	bl	8009c4c <HAL_SMBUS_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000c30:	f002 fcfa 	bl	8003628 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_SMBUS_ConfigDigitalFilter(&hsmbus1, 0) != HAL_OK)
 8000c34:	2100      	movs	r1, #0
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c38:	f009 f8c0 	bl	8009dbc <HAL_SMBUS_ConfigDigitalFilter>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_I2C1_SMBUS_Init+0x76>
  {
    Error_Handler();
 8000c42:	f002 fcf1 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000028c 	.word	0x2000028c
 8000c50:	40005400 	.word	0x40005400
 8000c54:	10c0ecff 	.word	0x10c0ecff

08000c58 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0b8      	sub	sp, #224	; 0xe0
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	22bc      	movs	r2, #188	; 0xbc
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00e fdc1 	bl	800f800 <memset>
  if(smbusHandle->Instance==I2C1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a25      	ldr	r2, [pc, #148]	; (8000d18 <HAL_SMBUS_MspInit+0xc0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d142      	bne.n	8000d0e <HAL_SMBUS_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4618      	mov	r0, r3
 8000c98:	f006 fe4c 	bl	8007934 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 8000ca2:	f002 fcc1 	bl	8003628 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <HAL_SMBUS_MspInit+0xc4>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <HAL_SMBUS_MspInit+0xc4>)
 8000cae:	f043 0302 	orr.w	r3, r3, #2
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_SMBUS_MspInit+0xc4>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ccc:	2312      	movs	r3, #18
 8000cce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <HAL_SMBUS_MspInit+0xc8>)
 8000cec:	f005 f8b8 	bl	8005e60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_SMBUS_MspInit+0xc4>)
 8000cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf6:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <HAL_SMBUS_MspInit+0xc4>)
 8000cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_SMBUS_MspInit+0xc4>)
 8000d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d0e:	bf00      	nop
 8000d10:	37e0      	adds	r7, #224	; 0xe0
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40005400 	.word	0x40005400
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	58020400 	.word	0x58020400

08000d24 <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <L6474_AttachErrorHandler+0x1c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200002e0 	.word	0x200002e0

08000d44 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <L6474_AttachFlagInterrupt+0x1c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200002dc 	.word	0x200002dc

08000d64 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	21a8      	movs	r1, #168	; 0xa8
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fa8c 	bl	8002290 <L6474_SendCommand>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	21b8      	movs	r1, #184	; 0xb8
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fa7e 	bl	8002290 <L6474_SendCommand>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000dac:	4b70      	ldr	r3, [pc, #448]	; (8000f70 <L6474_CmdGetParam+0x1d4>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	3b01      	subs	r3, #1
 8000dba:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000dc0:	4b6c      	ldr	r3, [pc, #432]	; (8000f74 <L6474_CmdGetParam+0x1d8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000dc6:	7cbb      	ldrb	r3, [r7, #18]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <L6474_CmdGetParam+0x34>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      //L6474_Board_EnableIrq();
      //__enable_irq();
      itDisable = FALSE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e02b      	b.n	8000e2e <L6474_CmdGetParam+0x92>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000dd6:	4a68      	ldr	r2, [pc, #416]	; (8000f78 <L6474_CmdGetParam+0x1dc>)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	4413      	add	r3, r2
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8000de0:	4a65      	ldr	r2, [pc, #404]	; (8000f78 <L6474_CmdGetParam+0x1dc>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	4413      	add	r3, r2
 8000de6:	3303      	adds	r3, #3
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8000dec:	4a62      	ldr	r2, [pc, #392]	; (8000f78 <L6474_CmdGetParam+0x1dc>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	4413      	add	r3, r2
 8000df2:	3306      	adds	r3, #6
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8000df8:	4a5f      	ldr	r2, [pc, #380]	; (8000f78 <L6474_CmdGetParam+0x1dc>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3309      	adds	r3, #9
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 8000e04:	4a5d      	ldr	r2, [pc, #372]	; (8000f7c <L6474_CmdGetParam+0x1e0>)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	4413      	add	r3, r2
 8000e0a:	3303      	adds	r3, #3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 8000e10:	4a5a      	ldr	r2, [pc, #360]	; (8000f7c <L6474_CmdGetParam+0x1e0>)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4413      	add	r3, r2
 8000e16:	3306      	adds	r3, #6
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 8000e1c:	4a57      	ldr	r2, [pc, #348]	; (8000f7c <L6474_CmdGetParam+0x1e0>)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	4413      	add	r3, r2
 8000e22:	3309      	adds	r3, #9
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	4b50      	ldr	r3, [pc, #320]	; (8000f70 <L6474_CmdGetParam+0x1d4>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d3cc      	bcc.n	8000dd6 <L6474_CmdGetParam+0x3a>
    }
    switch (param)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	2b18      	cmp	r3, #24
 8000e42:	d84d      	bhi.n	8000ee0 <L6474_CmdGetParam+0x144>
 8000e44:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <L6474_CmdGetParam+0xb0>)
 8000e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4a:	bf00      	nop
 8000e4c:	08000eb1 	.word	0x08000eb1
 8000e50:	08000ec7 	.word	0x08000ec7
 8000e54:	08000eb1 	.word	0x08000eb1
 8000e58:	08000ee1 	.word	0x08000ee1
 8000e5c:	08000ee1 	.word	0x08000ee1
 8000e60:	08000ee1 	.word	0x08000ee1
 8000e64:	08000ee1 	.word	0x08000ee1
 8000e68:	08000ee1 	.word	0x08000ee1
 8000e6c:	08000ee1 	.word	0x08000ee1
 8000e70:	08000ee1 	.word	0x08000ee1
 8000e74:	08000ee1 	.word	0x08000ee1
 8000e78:	08000ee1 	.word	0x08000ee1
 8000e7c:	08000ee1 	.word	0x08000ee1
 8000e80:	08000ee1 	.word	0x08000ee1
 8000e84:	08000ee1 	.word	0x08000ee1
 8000e88:	08000ee1 	.word	0x08000ee1
 8000e8c:	08000ee1 	.word	0x08000ee1
 8000e90:	08000ee1 	.word	0x08000ee1
 8000e94:	08000ee1 	.word	0x08000ee1
 8000e98:	08000ee1 	.word	0x08000ee1
 8000e9c:	08000ee1 	.word	0x08000ee1
 8000ea0:	08000ee1 	.word	0x08000ee1
 8000ea4:	08000ee1 	.word	0x08000ee1
 8000ea8:	08000ec7 	.word	0x08000ec7
 8000eac:	08000ec7 	.word	0x08000ec7
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	7c7b      	ldrb	r3, [r7, #17]
 8000eb6:	f042 0220 	orr.w	r2, r2, #32
 8000eba:	b2d1      	uxtb	r1, r2
 8000ebc:	4a2e      	ldr	r2, [pc, #184]	; (8000f78 <L6474_CmdGetParam+0x1dc>)
 8000ebe:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	74fb      	strb	r3, [r7, #19]
        break;
 8000ec4:	e018      	b.n	8000ef8 <L6474_CmdGetParam+0x15c>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	7c7b      	ldrb	r3, [r7, #17]
 8000ecc:	f042 0220 	orr.w	r2, r2, #32
 8000ed0:	b2d1      	uxtb	r1, r2
 8000ed2:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <L6474_CmdGetParam+0x1dc>)
 8000ed4:	4413      	add	r3, r2
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	74fb      	strb	r3, [r7, #19]
        break;
 8000ede:	e00b      	b.n	8000ef8 <L6474_CmdGetParam+0x15c>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	7c7b      	ldrb	r3, [r7, #17]
 8000ee6:	f042 0220 	orr.w	r2, r2, #32
 8000eea:	b2d1      	uxtb	r1, r2
 8000eec:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <L6474_CmdGetParam+0x1dc>)
 8000eee:	4413      	add	r3, r2
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8000ef8:	f002 ff65 	bl	8003dc6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8000efc:	2301      	movs	r3, #1
 8000efe:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <L6474_CmdGetParam+0x1d8>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f47f af5a 	bne.w	8000dc0 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000f0c:	7cfb      	ldrb	r3, [r7, #19]
 8000f0e:	f1c3 0303 	rsb	r3, r3, #3
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e011      	b.n	8000f3a <L6474_CmdGetParam+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <L6474_CmdGetParam+0x1dc>)
 8000f20:	1898      	adds	r0, r3, r2
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <L6474_CmdGetParam+0x1e0>)
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f002 f850 	bl	8002fd4 <L6474_WriteBytes>
       i++)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3301      	adds	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d9ea      	bls.n	8000f16 <L6474_CmdGetParam+0x17a>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000f40:	7c7b      	ldrb	r3, [r7, #17]
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <L6474_CmdGetParam+0x1e0>)
 8000f44:	4413      	add	r3, r2
 8000f46:	78db      	ldrb	r3, [r3, #3]
 8000f48:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 8000f4a:	7c7a      	ldrb	r2, [r7, #17]
 8000f4c:	490b      	ldr	r1, [pc, #44]	; (8000f7c <L6474_CmdGetParam+0x1e0>)
 8000f4e:	440a      	add	r2, r1
 8000f50:	7992      	ldrb	r2, [r2, #6]
 8000f52:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000f54:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 8000f56:	7c7a      	ldrb	r2, [r7, #17]
 8000f58:	4908      	ldr	r1, [pc, #32]	; (8000f7c <L6474_CmdGetParam+0x1e0>)
 8000f5a:	440a      	add	r2, r1
 8000f5c:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8000f62:	f002 ff39 	bl	8003dd8 <L6474_Board_EnableIrq>
    
  return (spiRxData);
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200002e4 	.word	0x200002e4
 8000f74:	20000300 	.word	0x20000300
 8000f78:	200002e8 	.word	0x200002e8
 8000f7c:	200002f4 	.word	0x200002f4

08000f80 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	; (800107c <L6474_CmdGetStatus+0xfc>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	3b01      	subs	r3, #1
 8000f98:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000f9e:	4b38      	ldr	r3, [pc, #224]	; (8001080 <L6474_CmdGetStatus+0x100>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000fa4:	7afb      	ldrb	r3, [r7, #11]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8000faa:	f002 ff15 	bl	8003dd8 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e01f      	b.n	8000ff8 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 8000fb8:	4a32      	ldr	r2, [pc, #200]	; (8001084 <L6474_CmdGetStatus+0x104>)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 8000fc2:	4a30      	ldr	r2, [pc, #192]	; (8001084 <L6474_CmdGetStatus+0x104>)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3303      	adds	r3, #3
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 8000fce:	4a2d      	ldr	r2, [pc, #180]	; (8001084 <L6474_CmdGetStatus+0x104>)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3306      	adds	r3, #6
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 8000fda:	4a2b      	ldr	r2, [pc, #172]	; (8001088 <L6474_CmdGetStatus+0x108>)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	3303      	adds	r3, #3
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 8000fe6:	4a28      	ldr	r2, [pc, #160]	; (8001088 <L6474_CmdGetStatus+0x108>)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	3306      	adds	r3, #6
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <L6474_CmdGetStatus+0xfc>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4293      	cmp	r3, r2
 8001004:	d3d8      	bcc.n	8000fb8 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 8001006:	7abb      	ldrb	r3, [r7, #10]
 8001008:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <L6474_CmdGetStatus+0x104>)
 800100a:	21d0      	movs	r1, #208	; 0xd0
 800100c:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 800100e:	f002 feda 	bl	8003dc6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001012:	2301      	movs	r3, #1
 8001014:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <L6474_CmdGetStatus+0x100>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1be      	bne.n	8000f9e <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	e011      	b.n	800104a <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <L6474_CmdGetStatus+0x104>)
 8001030:	1898      	adds	r0, r3, r2
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <L6474_CmdGetStatus+0x108>)
 800103c:	4413      	add	r3, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f001 ffc8 	bl	8002fd4 <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d9ea      	bls.n	8001026 <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001050:	7abb      	ldrb	r3, [r7, #10]
 8001052:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <L6474_CmdGetStatus+0x108>)
 8001054:	4413      	add	r3, r2
 8001056:	78db      	ldrb	r3, [r3, #3]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	7abb      	ldrb	r3, [r7, #10]
 800105e:	490a      	ldr	r1, [pc, #40]	; (8001088 <L6474_CmdGetStatus+0x108>)
 8001060:	440b      	add	r3, r1
 8001062:	799b      	ldrb	r3, [r3, #6]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800106c:	f002 feb4 	bl	8003dd8 <L6474_Board_EnableIrq>
  
  return (status);
 8001070:	893b      	ldrh	r3, [r7, #8]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200002e4 	.word	0x200002e4
 8001080:	20000300 	.word	0x20000300
 8001084:	200002e8 	.word	0x200002e8
 8001088:	200002f4 	.word	0x200002f4

0800108c <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f001 f8f8 	bl	8002290 <L6474_SendCommand>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80010ba:	4b69      	ldr	r3, [pc, #420]	; (8001260 <L6474_CmdSetParam+0x1b8>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3b01      	subs	r3, #1
 80010c8:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80010ca:	2300      	movs	r3, #0
 80010cc:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 80010ce:	4b65      	ldr	r3, [pc, #404]	; (8001264 <L6474_CmdSetParam+0x1bc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80010d4:	7cbb      	ldrb	r3, [r7, #18]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80010da:	f002 fe7d 	bl	8003dd8 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80010de:	2300      	movs	r3, #0
 80010e0:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e019      	b.n	800111c <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80010e8:	4a5f      	ldr	r2, [pc, #380]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	4413      	add	r3, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80010f2:	4a5d      	ldr	r2, [pc, #372]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	4413      	add	r3, r2
 80010f8:	3303      	adds	r3, #3
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80010fe:	4a5a      	ldr	r2, [pc, #360]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	4413      	add	r3, r2
 8001104:	3306      	adds	r3, #6
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 800110a:	4a57      	ldr	r2, [pc, #348]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	4413      	add	r3, r2
 8001110:	3309      	adds	r3, #9
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	4b50      	ldr	r3, [pc, #320]	; (8001260 <L6474_CmdSetParam+0x1b8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	4293      	cmp	r3, r2
 8001128:	d3de      	bcc.n	80010e8 <L6474_CmdSetParam+0x40>
    }
    switch (param)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	3b01      	subs	r3, #1
 800112e:	2b17      	cmp	r3, #23
 8001130:	d85c      	bhi.n	80011ec <L6474_CmdSetParam+0x144>
 8001132:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <L6474_CmdSetParam+0x90>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	08001199 	.word	0x08001199
 800113c:	080011c9 	.word	0x080011c9
 8001140:	08001199 	.word	0x08001199
 8001144:	080011ed 	.word	0x080011ed
 8001148:	080011ed 	.word	0x080011ed
 800114c:	080011ed 	.word	0x080011ed
 8001150:	080011ed 	.word	0x080011ed
 8001154:	080011ed 	.word	0x080011ed
 8001158:	080011ed 	.word	0x080011ed
 800115c:	080011ed 	.word	0x080011ed
 8001160:	080011ed 	.word	0x080011ed
 8001164:	080011ed 	.word	0x080011ed
 8001168:	080011ed 	.word	0x080011ed
 800116c:	080011ed 	.word	0x080011ed
 8001170:	080011ed 	.word	0x080011ed
 8001174:	080011ed 	.word	0x080011ed
 8001178:	080011ed 	.word	0x080011ed
 800117c:	080011ed 	.word	0x080011ed
 8001180:	080011ed 	.word	0x080011ed
 8001184:	080011ed 	.word	0x080011ed
 8001188:	080011ed 	.word	0x080011ed
 800118c:	080011ed 	.word	0x080011ed
 8001190:	080011ed 	.word	0x080011ed
 8001194:	080011c9 	.word	0x080011c9
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8001198:	7c7b      	ldrb	r3, [r7, #17]
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	b2d1      	uxtb	r1, r2
 800119e:	4a32      	ldr	r2, [pc, #200]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 80011a0:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	0c1a      	lsrs	r2, r3, #16
 80011a6:	7c7b      	ldrb	r3, [r7, #17]
 80011a8:	b2d1      	uxtb	r1, r2
 80011aa:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 80011ac:	4413      	add	r3, r2
 80011ae:	460a      	mov	r2, r1
 80011b0:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	0a1a      	lsrs	r2, r3, #8
 80011b6:	7c7b      	ldrb	r3, [r7, #17]
 80011b8:	b2d1      	uxtb	r1, r2
 80011ba:	4a2b      	ldr	r2, [pc, #172]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 80011bc:	4413      	add	r3, r2
 80011be:	460a      	mov	r2, r1
 80011c0:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 80011c2:	2303      	movs	r3, #3
 80011c4:	74fb      	strb	r3, [r7, #19]
        break;
 80011c6:	e01a      	b.n	80011fe <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 80011c8:	7c7b      	ldrb	r3, [r7, #17]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	b2d1      	uxtb	r1, r2
 80011ce:	4a26      	ldr	r2, [pc, #152]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 80011d0:	4413      	add	r3, r2
 80011d2:	460a      	mov	r2, r1
 80011d4:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	0a1a      	lsrs	r2, r3, #8
 80011da:	7c7b      	ldrb	r3, [r7, #17]
 80011dc:	b2d1      	uxtb	r1, r2
 80011de:	4a22      	ldr	r2, [pc, #136]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 80011e0:	4413      	add	r3, r2
 80011e2:	460a      	mov	r2, r1
 80011e4:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	74fb      	strb	r3, [r7, #19]
        break;
 80011ea:	e008      	b.n	80011fe <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 80011ec:	7c7b      	ldrb	r3, [r7, #17]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	b2d1      	uxtb	r1, r2
 80011f2:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 80011f4:	4413      	add	r3, r2
 80011f6:	460a      	mov	r2, r1
 80011f8:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80011fe:	7c7b      	ldrb	r3, [r7, #17]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	b2d1      	uxtb	r1, r2
 8001204:	4a18      	ldr	r2, [pc, #96]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 8001206:	4413      	add	r3, r2
 8001208:	460a      	mov	r2, r1
 800120a:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 800120c:	f002 fddb 	bl	8003dc6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001210:	2301      	movs	r3, #1
 8001212:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <L6474_CmdSetParam+0x1bc>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	f47f af57 	bne.w	80010ce <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001220:	7cfb      	ldrb	r3, [r7, #19]
 8001222:	f1c3 0303 	rsb	r3, r3, #3
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e011      	b.n	800124e <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <L6474_CmdSetParam+0x1c0>)
 8001234:	1898      	adds	r0, r3, r2
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <L6474_CmdSetParam+0x1c4>)
 8001240:	4413      	add	r3, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f001 fec6 	bl	8002fd4 <L6474_WriteBytes>
       i++)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d9ea      	bls.n	800122a <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001254:	f002 fdc0 	bl	8003dd8 <L6474_Board_EnableIrq>
}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200002e4 	.word	0x200002e4
 8001264:	20000300 	.word	0x20000300
 8001268:	200002e8 	.word	0x200002e8
 800126c:	200002f4 	.word	0x200002f4

08001270 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <L6474_Init+0x94>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fdb4 	bl	8003dec <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 8001284:	f002 ffb0 	bl	80041e8 <L6474_Board_SpiInit>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 800128e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001292:	f000 ffd1 	bl	8002238 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <L6474_Init+0x94>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f002 fecf 	bl	8004040 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <L6474_Init+0x94>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 ff49 	bl	8004140 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 80012ae:	2001      	movs	r0, #1
 80012b0:	f002 fd7e 	bl	8003db0 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <L6474_Init+0x94>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 f8db 	bl	800247c <L6474_SetDeviceParamsToPredefinedValues>
 80012c6:	e006      	b.n	80012d6 <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <L6474_Init+0x94>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 f82f 	bl	8002334 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <L6474_Init+0x94>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fd41 	bl	8000d64 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <L6474_Init+0x94>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe49 	bl	8000f80 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <L6474_Init+0x94>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	4b03      	ldr	r3, [pc, #12]	; (8001304 <L6474_Init+0x94>)
 80012f8:	801a      	strh	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000302 	.word	0x20000302

08001308 <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 8001312:	79fa      	ldrb	r2, [r7, #7]
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <L6474_GetAcceleration+0x2c>)
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3318      	adds	r3, #24
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
}            
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000304 	.word	0x20000304

08001338 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 8001342:	79fa      	ldrb	r2, [r7, #7]
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <L6474_GetCurrentSpeed+0x2c>)
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	440b      	add	r3, r1
 8001350:	3320      	adds	r3, #32
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000304 	.word	0x20000304

08001368 <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <L6474_GetDeceleration+0x2c>)
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	331a      	adds	r3, #26
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	b29b      	uxth	r3, r3
}          
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000304 	.word	0x20000304

08001398 <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 80013a2:	79fa      	ldrb	r2, [r7, #7]
 80013a4:	4907      	ldr	r1, [pc, #28]	; (80013c4 <L6474_GetDeviceState+0x2c>)
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	3324      	adds	r3, #36	; 0x24
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000304 	.word	0x20000304

080013c8 <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 80013d2:	79fa      	ldrb	r2, [r7, #7]
 80013d4:	4907      	ldr	r1, [pc, #28]	; (80013f4 <L6474_GetDirection+0x2c>)
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	440b      	add	r3, r1
 80013e0:	3323      	adds	r3, #35	; 0x23
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000304 	.word	0x20000304

080013f8 <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 80013fc:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <L6474_GetMotorHandle+0x10>)
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	20000000 	.word	0x20000000

08001420 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2103      	movs	r1, #3
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fcb4 	bl	8000d9c <L6474_CmdGetParam>
 8001434:	4603      	mov	r3, r0
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fede 	bl	80021f8 <L6474_ConvertPosition>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 8001452:	79fa      	ldrb	r2, [r7, #7]
 8001454:	4907      	ldr	r1, [pc, #28]	; (8001474 <L6474_GetMaxSpeed+0x2c>)
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	331c      	adds	r3, #28
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000304 	.word	0x20000304

08001478 <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	4907      	ldr	r1, [pc, #28]	; (80014a4 <L6474_GetMinSpeed+0x2c>)
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	331e      	adds	r3, #30
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	b29b      	uxth	r3, r3
}                                                     
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000304 	.word	0x20000304

080014a8 <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <L6474_GetNbDevices+0x14>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	200002e4 	.word	0x200002e4

080014c0 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2101      	movs	r1, #1
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fc64 	bl	8000d9c <L6474_CmdGetParam>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fe8e 	bl	80021f8 <L6474_ConvertPosition>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2116      	movs	r1, #22
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fc50 	bl	8000d9c <L6474_CmdGetParam>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f043 0308 	orr.w	r3, r3, #8
 800150a:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	3b08      	subs	r3, #8
 8001510:	2b04      	cmp	r3, #4
 8001512:	d81c      	bhi.n	800154e <L6474_GetStepMode+0x66>
 8001514:	a201      	add	r2, pc, #4	; (adr r2, 800151c <L6474_GetStepMode+0x34>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	08001531 	.word	0x08001531
 8001520:	08001537 	.word	0x08001537
 8001524:	0800153d 	.word	0x0800153d
 8001528:	08001543 	.word	0x08001543
 800152c:	08001549 	.word	0x08001549
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
      break;
 8001534:	e00e      	b.n	8001554 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 8001536:	2301      	movs	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
      break;    
 800153a:	e00b      	b.n	8001554 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 800153c:	2302      	movs	r3, #2
 800153e:	73fb      	strb	r3, [r7, #15]
      break;        
 8001540:	e008      	b.n	8001554 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 8001542:	2303      	movs	r3, #3
 8001544:	73fb      	strb	r3, [r7, #15]
      break;       
 8001546:	e005      	b.n	8001554 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 8001548:	2304      	movs	r3, #4
 800154a:	73fb      	strb	r3, [r7, #15]
      break;
 800154c:	e002      	b.n	8001554 <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 800154e:	23fe      	movs	r3, #254	; 0xfe
 8001550:	73fb      	strb	r3, [r7, #15]
      break;       
 8001552:	bf00      	nop
  }
  
  return stepMode;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop

08001560 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <L6474_GetStopMode+0x2c>)
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3325      	adds	r3, #37	; 0x25
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000304 	.word	0x20000304

08001590 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f81e 	bl	80015e0 <L6474_GoTo>
} 
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2103      	movs	r1, #3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fbee 	bl	8000d9c <L6474_CmdGetParam>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fe18 	bl	80021f8 <L6474_ConvertPosition>
 80015c8:	4603      	mov	r3, r0
 80015ca:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f804 	bl	80015e0 <L6474_GoTo>
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	493a      	ldr	r1, [pc, #232]	; (80016d8 <L6474_GoTo+0xf8>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	3324      	adds	r3, #36	; 0x24
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b08      	cmp	r3, #8
 8001602:	d003      	beq.n	800160c <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f868 	bl	80016dc <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2101      	movs	r1, #1
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fbc3 	bl	8000d9c <L6474_CmdGetParam>
 8001616:	4603      	mov	r3, r0
 8001618:	79fc      	ldrb	r4, [r7, #7]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fdec 	bl	80021f8 <L6474_ConvertPosition>
 8001620:	4602      	mov	r2, r0
 8001622:	492d      	ldr	r1, [pc, #180]	; (80016d8 <L6474_GoTo+0xf8>)
 8001624:	4623      	mov	r3, r4
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4423      	add	r3, r4
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	3304      	adds	r3, #4
 8001630:	601a      	str	r2, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 8001632:	79fa      	ldrb	r2, [r7, #7]
 8001634:	4928      	ldr	r1, [pc, #160]	; (80016d8 <L6474_GoTo+0xf8>)
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	3304      	adds	r3, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	60bb      	str	r3, [r7, #8]
  
  if (steps >= 0) 
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0c      	blt.n	800166a <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 8001650:	79fa      	ldrb	r2, [r7, #7]
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	4820      	ldr	r0, [pc, #128]	; (80016d8 <L6474_GoTo+0xf8>)
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4403      	add	r3, r0
 8001660:	3314      	adds	r3, #20
 8001662:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e00d      	b.n	8001686 <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	425b      	negs	r3, r3
 800166e:	79fa      	ldrb	r2, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	4919      	ldr	r1, [pc, #100]	; (80016d8 <L6474_GoTo+0xf8>)
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	440b      	add	r3, r1
 800167e:	3314      	adds	r3, #20
 8001680:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d021      	beq.n	80016d0 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 800168c:	79fa      	ldrb	r2, [r7, #7]
 800168e:	4912      	ldr	r1, [pc, #72]	; (80016d8 <L6474_GoTo+0xf8>)
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3322      	adds	r3, #34	; 0x22
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fb48 	bl	8001d3c <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	490a      	ldr	r1, [pc, #40]	; (80016d8 <L6474_GoTo+0xf8>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	440b      	add	r3, r1
 80016ba:	3314      	adds	r3, #20
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fcda 	bl	800207c <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 f8ea 	bl	80028a4 <L6474_StartMovement>
  }  
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	20000304 	.word	0x20000304

080016dc <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	4920      	ldr	r1, [pc, #128]	; (800176c <L6474_HardStop+0x90>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	440b      	add	r3, r1
 80016f4:	3325      	adds	r3, #37	; 0x25
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d12d      	bne.n	800175a <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fcf3 	bl	80040ec <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	4918      	ldr	r1, [pc, #96]	; (800176c <L6474_HardStop+0x90>)
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	3324      	adds	r3, #36	; 0x24
 8001716:	2208      	movs	r2, #8
 8001718:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	4913      	ldr	r1, [pc, #76]	; (800176c <L6474_HardStop+0x90>)
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	440b      	add	r3, r1
 8001728:	3322      	adds	r3, #34	; 0x22
 800172a:	2203      	movs	r2, #3
 800172c:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 800172e:	79fa      	ldrb	r2, [r7, #7]
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <L6474_HardStop+0x90>)
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	3314      	adds	r3, #20
 800173e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001742:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8001744:	79fa      	ldrb	r2, [r7, #7]
 8001746:	4909      	ldr	r1, [pc, #36]	; (800176c <L6474_HardStop+0x90>)
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	3320      	adds	r3, #32
 8001754:	2200      	movs	r2, #0
 8001756:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8001758:	e003      	b.n	8001762 <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f000 f807 	bl	8001770 <L6474_HizStop>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000304 	.word	0x20000304

08001770 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4618      	mov	r0, r3
 800177e:	f002 fcb5 	bl	80040ec <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff faed 	bl	8000d64 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 800178a:	79fa      	ldrb	r2, [r7, #7]
 800178c:	4915      	ldr	r1, [pc, #84]	; (80017e4 <L6474_HizStop+0x74>)
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	3324      	adds	r3, #36	; 0x24
 800179a:	2208      	movs	r2, #8
 800179c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 800179e:	79fa      	ldrb	r2, [r7, #7]
 80017a0:	4910      	ldr	r1, [pc, #64]	; (80017e4 <L6474_HizStop+0x74>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	3322      	adds	r3, #34	; 0x22
 80017ae:	2203      	movs	r2, #3
 80017b0:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 80017b2:	79fa      	ldrb	r2, [r7, #7]
 80017b4:	490b      	ldr	r1, [pc, #44]	; (80017e4 <L6474_HizStop+0x74>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	3314      	adds	r3, #20
 80017c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017c6:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 80017c8:	79fa      	ldrb	r2, [r7, #7]
 80017ca:	4906      	ldr	r1, [pc, #24]	; (80017e4 <L6474_HizStop+0x74>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3320      	adds	r3, #32
 80017d8:	2200      	movs	r2, #0
 80017da:	801a      	strh	r2, [r3, #0]
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000304 	.word	0x20000304

080017e8 <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	603a      	str	r2, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	460b      	mov	r3, r1
 80017f6:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80017f8:	79fa      	ldrb	r2, [r7, #7]
 80017fa:	4926      	ldr	r1, [pc, #152]	; (8001894 <L6474_Move+0xac>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	3324      	adds	r3, #36	; 0x24
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b08      	cmp	r3, #8
 800180e:	d003      	beq.n	8001818 <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff62 	bl	80016dc <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d035      	beq.n	800188a <L6474_Move+0xa2>
  {
    devicePrm[deviceId].stepsToTake = stepCount;
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	491c      	ldr	r1, [pc, #112]	; (8001894 <L6474_Move+0xac>)
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	3314      	adds	r3, #20
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001832:	79fa      	ldrb	r2, [r7, #7]
 8001834:	4917      	ldr	r1, [pc, #92]	; (8001894 <L6474_Move+0xac>)
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	440b      	add	r3, r1
 8001840:	3322      	adds	r3, #34	; 0x22
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2101      	movs	r1, #1
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff faa6 	bl	8000d9c <L6474_CmdGetParam>
 8001850:	4603      	mov	r3, r0
 8001852:	79fc      	ldrb	r4, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fccf 	bl	80021f8 <L6474_ConvertPosition>
 800185a:	4602      	mov	r2, r0
 800185c:	490d      	ldr	r1, [pc, #52]	; (8001894 <L6474_Move+0xac>)
 800185e:	4623      	mov	r3, r4
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4423      	add	r3, r4
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	3304      	adds	r3, #4
 800186a:	601a      	str	r2, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 800186c:	79ba      	ldrb	r2, [r7, #6]
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fa62 	bl	8001d3c <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	6839      	ldr	r1, [r7, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fbfd 	bl	800207c <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f001 f80d 	bl	80028a4 <L6474_StartMovement>
  }  
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}
 8001892:	bf00      	nop
 8001894:	20000304 	.word	0x20000304

08001898 <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <L6474_ReadId+0x14>)
 800189e:	881b      	ldrh	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000302 	.word	0x20000302

080018b0 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2119      	movs	r1, #25
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fa6c 	bl	8000d9c <L6474_CmdGetParam>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29b      	uxth	r3, r3
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fc2f 	bl	8004140 <L6474_Board_ReleaseReset>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fc34 	bl	8004164 <L6474_Board_Reset>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 800190a:	2300      	movs	r3, #0
 800190c:	71fb      	strb	r3, [r7, #7]
 800190e:	e014      	b.n	800193a <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff2c 	bl	8001770 <L6474_HizStop>
    L6474_Reset(loop);
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ffe5 	bl	80018ea <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 8001920:	2001      	movs	r0, #1
 8001922:	f002 fa45 	bl	8003db0 <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	4618      	mov	r0, r3
 800192a:	f002 fc09 	bl	8004140 <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 800192e:	2001      	movs	r0, #1
 8001930:	f002 fa3e 	bl	8003db0 <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	3301      	adds	r3, #1
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <L6474_ResetAllDevices+0x4c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	79fa      	ldrb	r2, [r7, #7]
 8001942:	429a      	cmp	r2, r3
 8001944:	d3e4      	bcc.n	8001910 <L6474_ResetAllDevices+0xc>
  }
}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200002e4 	.word	0x200002e4

08001954 <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001964:	79fa      	ldrb	r2, [r7, #7]
 8001966:	4913      	ldr	r1, [pc, #76]	; (80019b4 <L6474_Run+0x60>)
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	3324      	adds	r3, #36	; 0x24
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b08      	cmp	r3, #8
 800197a:	d003      	beq.n	8001984 <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff feac 	bl	80016dc <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001984:	79ba      	ldrb	r2, [r7, #6]
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f9d6 	bl	8001d3c <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001990:	79fa      	ldrb	r2, [r7, #7]
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <L6474_Run+0x60>)
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	3322      	adds	r3, #34	; 0x22
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 ff7c 	bl	80028a4 <L6474_StartMovement>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000304 	.word	0x20000304

080019b8 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	460a      	mov	r2, r1
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	4613      	mov	r3, r2
 80019c6:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d816      	bhi.n	80019fc <L6474_SelectStepMode+0x44>
 80019ce:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <L6474_SelectStepMode+0x1c>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	080019eb 	.word	0x080019eb
 80019dc:	080019f1 	.word	0x080019f1
 80019e0:	080019f7 	.word	0x080019f7
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 80019e4:	2308      	movs	r3, #8
 80019e6:	73fb      	strb	r3, [r7, #15]
      break;
 80019e8:	e00b      	b.n	8001a02 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 80019ea:	2309      	movs	r3, #9
 80019ec:	73fb      	strb	r3, [r7, #15]
      break;    
 80019ee:	e008      	b.n	8001a02 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 80019f0:	230a      	movs	r3, #10
 80019f2:	73fb      	strb	r3, [r7, #15]
      break;        
 80019f4:	e005      	b.n	8001a02 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 80019f6:	230b      	movs	r3, #11
 80019f8:	73fb      	strb	r3, [r7, #15]
      break;       
 80019fa:	e002      	b.n	8001a02 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 80019fc:	230c      	movs	r3, #12
 80019fe:	73fb      	strb	r3, [r7, #15]
      break;       
 8001a00:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff feb3 	bl	8001770 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2116      	movs	r1, #22
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f9c4 	bl	8000d9c <L6474_CmdGetParam>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f023 0307 	bic.w	r3, r3, #7
 8001a1c:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001a1e:	7bba      	ldrb	r2, [r7, #14]
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	2116      	movs	r1, #22
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fb3b 	bl	80010a8 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2200      	movs	r2, #0
 8001a36:	2101      	movs	r1, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fb35 	bl	80010a8 <L6474_CmdSetParam>
  
  return (1);
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	460a      	mov	r2, r1
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	4613      	mov	r3, r2
 8001a56:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001a5c:	88bb      	ldrh	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d023      	beq.n	8001aaa <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001a62:	79fa      	ldrb	r2, [r7, #7]
 8001a64:	4914      	ldr	r1, [pc, #80]	; (8001ab8 <L6474_SetAcceleration+0x70>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	3324      	adds	r3, #36	; 0x24
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d00b      	beq.n	8001a92 <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <L6474_SetAcceleration+0x70>)
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	3322      	adds	r3, #34	; 0x22
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10b      	bne.n	8001aaa <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8001a92:	79fa      	ldrb	r2, [r7, #7]
 8001a94:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <L6474_SetAcceleration+0x70>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3318      	adds	r3, #24
 8001aa2:	88ba      	ldrh	r2, [r7, #4]
 8001aa4:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	20000304 	.word	0x20000304

08001abc <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001aca:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001acc:	2301      	movs	r3, #1
 8001ace:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ad4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d508      	bpl.n	8001af0 <L6474_SetAnalogValue+0x34>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d005      	beq.n	8001af0 <L6474_SetAnalogValue+0x34>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d002      	beq.n	8001af0 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	74fb      	strb	r3, [r7, #19]
 8001aee:	e0d9      	b.n	8001ca4 <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	2b12      	cmp	r3, #18
 8001af6:	f200 80ca 	bhi.w	8001c8e <L6474_SetAnalogValue+0x1d2>
 8001afa:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <L6474_SetAnalogValue+0x44>)
 8001afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b00:	08001bb3 	.word	0x08001bb3
 8001b04:	08001b4d 	.word	0x08001b4d
 8001b08:	08001bb3 	.word	0x08001bb3
 8001b0c:	08001c8f 	.word	0x08001c8f
 8001b10:	08001c8f 	.word	0x08001c8f
 8001b14:	08001c8f 	.word	0x08001c8f
 8001b18:	08001c8f 	.word	0x08001c8f
 8001b1c:	08001c8f 	.word	0x08001c8f
 8001b20:	08001c1d 	.word	0x08001c1d
 8001b24:	08001c8f 	.word	0x08001c8f
 8001b28:	08001c8f 	.word	0x08001c8f
 8001b2c:	08001c8f 	.word	0x08001c8f
 8001b30:	08001c8f 	.word	0x08001c8f
 8001b34:	08001c8f 	.word	0x08001c8f
 8001b38:	08001c69 	.word	0x08001c69
 8001b3c:	08001c69 	.word	0x08001c69
 8001b40:	08001c8f 	.word	0x08001c8f
 8001b44:	08001c8f 	.word	0x08001c8f
 8001b48:	08001c43 	.word	0x08001c43
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001b4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	d021      	beq.n	8001b9e <L6474_SetAnalogValue+0xe2>
 8001b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001cb0 <L6474_SetAnalogValue+0x1f4>
 8001b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6a:	dc15      	bgt.n	8001b98 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001b6c:	2116      	movs	r1, #22
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff f914 	bl	8000d9c <L6474_CmdGetParam>
 8001b74:	4603      	mov	r3, r0
 8001b76:	43db      	mvns	r3, r3
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001b8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	d502      	bpl.n	8001b9e <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001b9c:	e079      	b.n	8001c92 <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba6:	ee17 3a90 	vmov	r3, s15
 8001baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bae:	617b      	str	r3, [r7, #20]
        break;
 8001bb0:	e06f      	b.n	8001c92 <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001cb4 <L6474_SetAnalogValue+0x1f8>
 8001bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	db27      	blt.n	8001c14 <L6474_SetAnalogValue+0x158>
 8001bc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001cb8 <L6474_SetAnalogValue+0x1fc>
 8001bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d81e      	bhi.n	8001c14 <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be2:	db09      	blt.n	8001bf8 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001be4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bec:	ee17 3a90 	vmov	r3, s15
 8001bf0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001bf4:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001bf6:	e010      	b.n	8001c1a <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001bf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bfc:	eef1 7a67 	vneg.f32	s15, s15
 8001c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c04:	ee17 3a90 	vmov	r3, s15
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001c12:	e002      	b.n	8001c1a <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001c18:	e03b      	b.n	8001c92 <L6474_SetAnalogValue+0x1d6>
 8001c1a:	e03a      	b.n	8001c92 <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001c1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c20:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001cbc <L6474_SetAnalogValue+0x200>
 8001c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	dd02      	ble.n	8001c34 <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001c32:	e02e      	b.n	8001c92 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001c34:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c38:	f001 f98a 	bl	8002f50 <L6474_Tval_Current_to_Par>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	617b      	str	r3, [r7, #20]
        break;
 8001c40:	e027      	b.n	8001c92 <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001c42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c46:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001cc0 <L6474_SetAnalogValue+0x204>
 8001c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	dd02      	ble.n	8001c5a <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001c58:	e01b      	b.n	8001c92 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001c5a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c5e:	f001 f953 	bl	8002f08 <L6474_Ocd_Th_to_Par>
 8001c62:	4603      	mov	r3, r0
 8001c64:	617b      	str	r3, [r7, #20]
        break;
 8001c66:	e014      	b.n	8001c92 <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001c68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c6c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001cc4 <L6474_SetAnalogValue+0x208>
 8001c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	dd02      	ble.n	8001c80 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001c7e:	e008      	b.n	8001c92 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001c80:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c84:	f001 f988 	bl	8002f98 <L6474_Tmin_Time_to_Par>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	617b      	str	r3, [r7, #20]
        break;    
 8001c8c:	e001      	b.n	8001c92 <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001c92:	7cfb      	ldrb	r3, [r7, #19]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fa02 	bl	80010a8 <L6474_CmdSetParam>
    }
  }
  return result;
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	43ff8000 	.word	0x43ff8000
 8001cb4:	ca000000 	.word	0xca000000
 8001cb8:	49fffff8 	.word	0x49fffff8
 8001cbc:	457a0000 	.word	0x457a0000
 8001cc0:	45bb8000 	.word	0x45bb8000
 8001cc4:	42800000 	.word	0x42800000

08001cc8 <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	460a      	mov	r2, r1
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 8001cdc:	88bb      	ldrh	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d023      	beq.n	8001d2a <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001ce2:	79fa      	ldrb	r2, [r7, #7]
 8001ce4:	4914      	ldr	r1, [pc, #80]	; (8001d38 <L6474_SetDeceleration+0x70>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	3324      	adds	r3, #36	; 0x24
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d00b      	beq.n	8001d12 <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	490e      	ldr	r1, [pc, #56]	; (8001d38 <L6474_SetDeceleration+0x70>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	3322      	adds	r3, #34	; 0x22
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10b      	bne.n	8001d2a <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 8001d12:	79fa      	ldrb	r2, [r7, #7]
 8001d14:	4908      	ldr	r1, [pc, #32]	; (8001d38 <L6474_SetDeceleration+0x70>)
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	331a      	adds	r3, #26
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
}        
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	20000304 	.word	0x20000304

08001d3c <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	460a      	mov	r2, r1
 8001d46:	71fb      	strb	r3, [r7, #7]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8001d4c:	79fa      	ldrb	r2, [r7, #7]
 8001d4e:	490f      	ldr	r1, [pc, #60]	; (8001d8c <L6474_SetDirection+0x50>)
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	440b      	add	r3, r1
 8001d5a:	3324      	adds	r3, #36	; 0x24
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d10f      	bne.n	8001d84 <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8001d64:	79fa      	ldrb	r2, [r7, #7]
 8001d66:	4909      	ldr	r1, [pc, #36]	; (8001d8c <L6474_SetDirection+0x50>)
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	3323      	adds	r3, #35	; 0x23
 8001d74:	79ba      	ldrb	r2, [r7, #6]
 8001d76:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8001d78:	79ba      	ldrb	r2, [r7, #6]
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 fa02 	bl	8004188 <L6474_Board_SetDirectionGpio>
  }
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000304 	.word	0x20000304

08001d90 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fffb 	bl	8000d9c <L6474_CmdGetParam>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fa25 	bl	80021f8 <L6474_ConvertPosition>
 8001dae:	4602      	mov	r2, r0
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db04      	blt.n	8001dc6 <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e005      	b.n	8001dd2 <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff f965 	bl	80010a8 <L6474_CmdSetParam>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	6039      	str	r1, [r7, #0]
 8001df0:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db04      	blt.n	8001e02 <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e005      	b.n	8001e0e <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	2103      	movs	r1, #3
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f947 	bl	80010a8 <L6474_CmdSetParam>
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	4613      	mov	r3, r2
 8001e32:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001e38:	88bb      	ldrh	r3, [r7, #4]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d935      	bls.n	8001eaa <L6474_SetMaxSpeed+0x86>
 8001e3e:	88bb      	ldrh	r3, [r7, #4]
 8001e40:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d830      	bhi.n	8001eaa <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001e48:	79fa      	ldrb	r2, [r7, #7]
 8001e4a:	491b      	ldr	r1, [pc, #108]	; (8001eb8 <L6474_SetMaxSpeed+0x94>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	331e      	adds	r3, #30
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8001e5c:	88ba      	ldrh	r2, [r7, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d323      	bcc.n	8001eaa <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001e62:	79fa      	ldrb	r2, [r7, #7]
 8001e64:	4914      	ldr	r1, [pc, #80]	; (8001eb8 <L6474_SetMaxSpeed+0x94>)
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	3324      	adds	r3, #36	; 0x24
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d00b      	beq.n	8001e92 <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001e7a:	79fa      	ldrb	r2, [r7, #7]
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <L6474_SetMaxSpeed+0x94>)
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	3322      	adds	r3, #34	; 0x22
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10b      	bne.n	8001eaa <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 8001e92:	79fa      	ldrb	r2, [r7, #7]
 8001e94:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <L6474_SetMaxSpeed+0x94>)
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	331c      	adds	r3, #28
 8001ea2:	88ba      	ldrh	r2, [r7, #4]
 8001ea4:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	20000304 	.word	0x20000304

08001ebc <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	460a      	mov	r2, r1
 8001ec6:	71fb      	strb	r3, [r7, #7]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001ed0:	88bb      	ldrh	r3, [r7, #4]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d935      	bls.n	8001f42 <L6474_SetMinSpeed+0x86>
 8001ed6:	88bb      	ldrh	r3, [r7, #4]
 8001ed8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d830      	bhi.n	8001f42 <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001ee0:	79fa      	ldrb	r2, [r7, #7]
 8001ee2:	491b      	ldr	r1, [pc, #108]	; (8001f50 <L6474_SetMinSpeed+0x94>)
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	331c      	adds	r3, #28
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8001ef4:	88ba      	ldrh	r2, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d823      	bhi.n	8001f42 <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001efa:	79fa      	ldrb	r2, [r7, #7]
 8001efc:	4914      	ldr	r1, [pc, #80]	; (8001f50 <L6474_SetMinSpeed+0x94>)
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	440b      	add	r3, r1
 8001f08:	3324      	adds	r3, #36	; 0x24
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d00b      	beq.n	8001f2a <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001f12:	79fa      	ldrb	r2, [r7, #7]
 8001f14:	490e      	ldr	r1, [pc, #56]	; (8001f50 <L6474_SetMinSpeed+0x94>)
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3322      	adds	r3, #34	; 0x22
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10b      	bne.n	8001f42 <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	4908      	ldr	r1, [pc, #32]	; (8001f50 <L6474_SetMinSpeed+0x94>)
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	331e      	adds	r3, #30
 8001f3a:	88ba      	ldrh	r2, [r7, #4]
 8001f3c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	20000304 	.word	0x20000304

08001f54 <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	71fb      	strb	r3, [r7, #7]
 8001f60:	4613      	mov	r3, r2
 8001f62:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	4907      	ldr	r1, [pc, #28]	; (8001f84 <L6474_SetStopMode+0x30>)
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3325      	adds	r3, #37	; 0x25
 8001f74:	79ba      	ldrb	r2, [r7, #6]
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	20000304 	.word	0x20000304

08001f88 <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 8001f96:	79fa      	ldrb	r2, [r7, #7]
 8001f98:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <L6474_SoftStop+0x4c>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3324      	adds	r3, #36	; 0x24
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d00b      	beq.n	8001fc6 <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 8001fae:	79fa      	ldrb	r2, [r7, #7]
 8001fb0:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <L6474_SoftStop+0x4c>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	3322      	adds	r3, #34	; 0x22
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	20000304 	.word	0x20000304

08001fd8 <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 8001fe2:	bf00      	nop
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f9d6 	bl	8001398 <L6474_GetDeviceState>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d1f8      	bne.n	8001fe4 <L6474_WaitWhileActive+0xc>
}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	460a      	mov	r2, r1
 8002006:	71fb      	strb	r3, [r7, #7]
 8002008:	4613      	mov	r3, r2
 800200a:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 800200c:	88bb      	ldrh	r3, [r7, #4]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d801      	bhi.n	8002016 <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 8002012:	2302      	movs	r3, #2
 8002014:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 8002016:	88bb      	ldrh	r3, [r7, #4]
 8002018:	f242 7210 	movw	r2, #10000	; 0x2710
 800201c:	4293      	cmp	r3, r2
 800201e:	d902      	bls.n	8002026 <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 8002020:	f242 7310 	movw	r3, #10000	; 0x2710
 8002024:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 8002026:	79fa      	ldrb	r2, [r7, #7]
 8002028:	4913      	ldr	r1, [pc, #76]	; (8002078 <L6474_ApplySpeed+0x7c>)
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	3320      	adds	r3, #32
 8002036:	88ba      	ldrh	r2, [r7, #4]
 8002038:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d010      	beq.n	8002062 <L6474_ApplySpeed+0x66>
 8002040:	2b02      	cmp	r3, #2
 8002042:	dc13      	bgt.n	800206c <L6474_ApplySpeed+0x70>
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <L6474_ApplySpeed+0x52>
 8002048:	2b01      	cmp	r3, #1
 800204a:	d005      	beq.n	8002058 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 800204c:	e00e      	b.n	800206c <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 800204e:	88bb      	ldrh	r3, [r7, #4]
 8002050:	4618      	mov	r0, r3
 8002052:	f001 ff83 	bl	8003f5c <L6474_Board_Pwm1SetFreq>
      break;
 8002056:	e00a      	b.n	800206e <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8002058:	88bb      	ldrh	r3, [r7, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f001 ffa4 	bl	8003fa8 <L6474_Board_Pwm2SetFreq>
      break;
 8002060:	e005      	b.n	800206e <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 8002062:	88bb      	ldrh	r3, [r7, #4]
 8002064:	4618      	mov	r0, r3
 8002066:	f001 ffc5 	bl	8003ff4 <L6474_Board_Pwm3SetFreq>
      break;
 800206a:	e000      	b.n	800206e <L6474_ApplySpeed+0x72>
      break; //ignore error
 800206c:	bf00      	nop
  }
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000304 	.word	0x20000304

0800207c <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
  uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 8002088:	79fa      	ldrb	r2, [r7, #7]
 800208a:	495a      	ldr	r1, [pc, #360]	; (80021f4 <L6474_ComputeSpeedProfile+0x178>)
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	331e      	adds	r3, #30
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 800209c:	79fa      	ldrb	r2, [r7, #7]
 800209e:	4955      	ldr	r1, [pc, #340]	; (80021f4 <L6474_ComputeSpeedProfile+0x178>)
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	331c      	adds	r3, #28
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	8b7b      	ldrh	r3, [r7, #26]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 80020b8:	79fa      	ldrb	r2, [r7, #7]
 80020ba:	494e      	ldr	r1, [pc, #312]	; (80021f4 <L6474_ComputeSpeedProfile+0x178>)
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	331c      	adds	r3, #28
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	8b7b      	ldrh	r3, [r7, #26]
 80020d0:	4413      	add	r3, r2
 80020d2:	461a      	mov	r2, r3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 80020e0:	79fa      	ldrb	r2, [r7, #7]
 80020e2:	4944      	ldr	r1, [pc, #272]	; (80021f4 <L6474_ComputeSpeedProfile+0x178>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	3318      	adds	r3, #24
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80020fc:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	085b      	lsrs	r3, r3, #1
 8002102:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 8002104:	79fa      	ldrb	r2, [r7, #7]
 8002106:	493b      	ldr	r1, [pc, #236]	; (80021f4 <L6474_ComputeSpeedProfile+0x178>)
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	331a      	adds	r3, #26
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002120:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	4413      	add	r3, r2
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d242      	bcs.n	80021ba <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 8002134:	79fa      	ldrb	r2, [r7, #7]
 8002136:	492f      	ldr	r1, [pc, #188]	; (80021f4 <L6474_ComputeSpeedProfile+0x178>)
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	331a      	adds	r3, #26
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 800214a:	79fa      	ldrb	r2, [r7, #7]
 800214c:	4929      	ldr	r1, [pc, #164]	; (80021f4 <L6474_ComputeSpeedProfile+0x178>)
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	3318      	adds	r3, #24
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	fb03 f202 	mul.w	r2, r3, r2
 8002168:	68f9      	ldr	r1, [r7, #12]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	440b      	add	r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d908      	bls.n	800218c <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3b01      	subs	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d104      	bne.n	8002190 <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 8002186:	2301      	movs	r3, #1
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e001      	b.n	8002190 <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8002190:	79fa      	ldrb	r2, [r7, #7]
 8002192:	4918      	ldr	r1, [pc, #96]	; (80021f4 <L6474_ComputeSpeedProfile+0x178>)
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	3308      	adds	r3, #8
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 80021a4:	79fa      	ldrb	r2, [r7, #7]
 80021a6:	4913      	ldr	r1, [pc, #76]	; (80021f4 <L6474_ComputeSpeedProfile+0x178>)
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	3310      	adds	r3, #16
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 80021b8:	e016      	b.n	80021e8 <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 80021ba:	79fa      	ldrb	r2, [r7, #7]
 80021bc:	490d      	ldr	r1, [pc, #52]	; (80021f4 <L6474_ComputeSpeedProfile+0x178>)
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	3308      	adds	r3, #8
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	79fa      	ldrb	r2, [r7, #7]
 80021d6:	1e59      	subs	r1, r3, #1
 80021d8:	4806      	ldr	r0, [pc, #24]	; (80021f4 <L6474_ComputeSpeedProfile+0x178>)
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4403      	add	r3, r0
 80021e4:	3310      	adds	r3, #16
 80021e6:	6019      	str	r1, [r3, #0]
}
 80021e8:	bf00      	nop
 80021ea:	3724      	adds	r7, #36	; 0x24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	20000304 	.word	0x20000304

080021f8 <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00d      	beq.n	8002226 <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	43db      	mvns	r3, r3
 800220e:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3301      	adds	r3, #1
 8002214:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800221c:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	425b      	negs	r3, r3
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e001      	b.n	800222a <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <L6474_ErrorHandler+0x28>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <L6474_ErrorHandler+0x28>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	4610      	mov	r0, r2
 8002252:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8002254:	e000      	b.n	8002258 <L6474_ErrorHandler+0x20>
    while(1)
 8002256:	e7fe      	b.n	8002256 <L6474_ErrorHandler+0x1e>
}
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200002e0 	.word	0x200002e0

08002264 <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <L6474_FlagInterruptHandler+0x24>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <L6474_FlagInterruptHandler+0x28>)
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <L6474_FlagInterruptHandler+0x24>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <L6474_FlagInterruptHandler+0x28>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
  }
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200002dc 	.word	0x200002dc
 800228c:	20000301 	.word	0x20000301

08002290 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	460a      	mov	r2, r1
 800229a:	71fb      	strb	r3, [r7, #7]
 800229c:	4613      	mov	r3, r2
 800229e:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <L6474_SendCommand+0x90>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 80022b0:	2300      	movs	r3, #0
 80022b2:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <L6474_SendCommand+0x94>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80022ba:	7afb      	ldrb	r3, [r7, #11]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80022c0:	f001 fd8a 	bl	8003dd8 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e008      	b.n	80022e0 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 80022ce:	4a16      	ldr	r2, [pc, #88]	; (8002328 <L6474_SendCommand+0x98>)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	3309      	adds	r3, #9
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3301      	adds	r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <L6474_SendCommand+0x90>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d3ef      	bcc.n	80022ce <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 80022ee:	7abb      	ldrb	r3, [r7, #10]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <L6474_SendCommand+0x98>)
 80022f2:	4413      	add	r3, r2
 80022f4:	79ba      	ldrb	r2, [r7, #6]
 80022f6:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80022f8:	f001 fd65 	bl	8003dc6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80022fc:	2301      	movs	r3, #1
 80022fe:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <L6474_SendCommand+0x94>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1d4      	bne.n	80022b4 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <L6474_SendCommand+0x9c>)
 800230c:	4808      	ldr	r0, [pc, #32]	; (8002330 <L6474_SendCommand+0xa0>)
 800230e:	f000 fe61 	bl	8002fd4 <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8002312:	f001 fd61 	bl	8003dd8 <L6474_Board_EnableIrq>
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200002e4 	.word	0x200002e4
 8002324:	20000300 	.word	0x20000300
 8002328:	200002e8 	.word	0x200002e8
 800232c:	200002fd 	.word	0x200002fd
 8002330:	200002f1 	.word	0x200002f1

08002334 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8002340:	79fa      	ldrb	r2, [r7, #7]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	8818      	ldrh	r0, [r3, #0]
 8002346:	494c      	ldr	r1, [pc, #304]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3318      	adds	r3, #24
 8002354:	4602      	mov	r2, r0
 8002356:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 8002358:	79fa      	ldrb	r2, [r7, #7]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	8858      	ldrh	r0, [r3, #2]
 800235e:	4946      	ldr	r1, [pc, #280]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	331a      	adds	r3, #26
 800236c:	4602      	mov	r2, r0
 800236e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 8002370:	79fa      	ldrb	r2, [r7, #7]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	8898      	ldrh	r0, [r3, #4]
 8002376:	4940      	ldr	r1, [pc, #256]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	331c      	adds	r3, #28
 8002384:	4602      	mov	r2, r0
 8002386:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 8002388:	79fa      	ldrb	r2, [r7, #7]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	88d8      	ldrh	r0, [r3, #6]
 800238e:	493a      	ldr	r1, [pc, #232]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	331e      	adds	r3, #30
 800239c:	4602      	mov	r2, r0
 800239e:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80023a0:	79fa      	ldrb	r2, [r7, #7]
 80023a2:	4935      	ldr	r1, [pc, #212]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80023b2:	79fa      	ldrb	r2, [r7, #7]
 80023b4:	4930      	ldr	r1, [pc, #192]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	3304      	adds	r3, #4
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80023c6:	79fa      	ldrb	r2, [r7, #7]
 80023c8:	492b      	ldr	r1, [pc, #172]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	3308      	adds	r3, #8
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80023da:	79fa      	ldrb	r2, [r7, #7]
 80023dc:	4926      	ldr	r1, [pc, #152]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	440b      	add	r3, r1
 80023e8:	330c      	adds	r3, #12
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 80023ee:	79fa      	ldrb	r2, [r7, #7]
 80023f0:	4921      	ldr	r1, [pc, #132]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	3310      	adds	r3, #16
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	491c      	ldr	r1, [pc, #112]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	3314      	adds	r3, #20
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	4917      	ldr	r1, [pc, #92]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	3320      	adds	r3, #32
 8002426:	2200      	movs	r2, #0
 8002428:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	4912      	ldr	r1, [pc, #72]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	3322      	adds	r3, #34	; 0x22
 800243a:	2203      	movs	r2, #3
 800243c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 800243e:	79fa      	ldrb	r2, [r7, #7]
 8002440:	490d      	ldr	r1, [pc, #52]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	440b      	add	r3, r1
 800244c:	3323      	adds	r3, #35	; 0x23
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 8002452:	79fa      	ldrb	r2, [r7, #7]
 8002454:	4908      	ldr	r1, [pc, #32]	; (8002478 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	440b      	add	r3, r1
 8002460:	3324      	adds	r3, #36	; 0x24
 8002462:	2208      	movs	r2, #8
 8002464:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f8a2 	bl	80025b4 <L6474_SetRegisterToGivenValues>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000304 	.word	0x20000304

0800247c <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 8002486:	79fa      	ldrb	r2, [r7, #7]
 8002488:	4949      	ldr	r1, [pc, #292]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	3318      	adds	r3, #24
 8002496:	22a0      	movs	r2, #160	; 0xa0
 8002498:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 800249a:	79fa      	ldrb	r2, [r7, #7]
 800249c:	4944      	ldr	r1, [pc, #272]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	331a      	adds	r3, #26
 80024aa:	22a0      	movs	r2, #160	; 0xa0
 80024ac:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 80024ae:	79fa      	ldrb	r2, [r7, #7]
 80024b0:	493f      	ldr	r1, [pc, #252]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	331c      	adds	r3, #28
 80024be:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80024c2:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 80024c4:	79fa      	ldrb	r2, [r7, #7]
 80024c6:	493a      	ldr	r1, [pc, #232]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	440b      	add	r3, r1
 80024d2:	331e      	adds	r3, #30
 80024d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80024d8:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80024da:	79fa      	ldrb	r2, [r7, #7]
 80024dc:	4934      	ldr	r1, [pc, #208]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80024ec:	79fa      	ldrb	r2, [r7, #7]
 80024ee:	4930      	ldr	r1, [pc, #192]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	3304      	adds	r3, #4
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8002500:	79fa      	ldrb	r2, [r7, #7]
 8002502:	492b      	ldr	r1, [pc, #172]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	3308      	adds	r3, #8
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002514:	79fa      	ldrb	r2, [r7, #7]
 8002516:	4926      	ldr	r1, [pc, #152]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	330c      	adds	r3, #12
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002528:	79fa      	ldrb	r2, [r7, #7]
 800252a:	4921      	ldr	r1, [pc, #132]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	3310      	adds	r3, #16
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 800253c:	79fa      	ldrb	r2, [r7, #7]
 800253e:	491c      	ldr	r1, [pc, #112]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	3314      	adds	r3, #20
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002550:	79fa      	ldrb	r2, [r7, #7]
 8002552:	4917      	ldr	r1, [pc, #92]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	3320      	adds	r3, #32
 8002560:	2200      	movs	r2, #0
 8002562:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002564:	79fa      	ldrb	r2, [r7, #7]
 8002566:	4912      	ldr	r1, [pc, #72]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3322      	adds	r3, #34	; 0x22
 8002574:	2203      	movs	r2, #3
 8002576:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002578:	79fa      	ldrb	r2, [r7, #7]
 800257a:	490d      	ldr	r1, [pc, #52]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	3323      	adds	r3, #35	; 0x23
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 800258c:	79fa      	ldrb	r2, [r7, #7]
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	3324      	adds	r3, #36	; 0x24
 800259c:	2208      	movs	r2, #8
 800259e:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f882 	bl	80026ac <L6474_SetRegisterToPredefinedValues>

}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000304 	.word	0x20000304

080025b4 <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2200      	movs	r2, #0
 80025c4:	2101      	movs	r1, #1
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fd6e 	bl	80010a8 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2200      	movs	r2, #0
 80025d0:	2102      	movs	r1, #2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fd68 	bl	80010a8 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	2200      	movs	r2, #0
 80025dc:	2103      	movs	r1, #3
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fd62 	bl	80010a8 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	eeb0 0a67 	vmov.f32	s0, s15
 80025f0:	2109      	movs	r1, #9
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fa62 	bl	8001abc <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 8002600:	4313      	orrs	r3, r2
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	210e      	movs	r1, #14
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fd4c 	bl	80010a8 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	edd3 7a06 	vldr	s15, [r3, #24]
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	eeb0 0a67 	vmov.f32	s0, s15
 800261c:	210f      	movs	r1, #15
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fa4c 	bl	8001abc <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	edd3 7a07 	vldr	s15, [r3, #28]
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	eeb0 0a67 	vmov.f32	s0, s15
 8002630:	2110      	movs	r1, #16
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fa42 	bl	8001abc <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	edd3 7a03 	vldr	s15, [r3, #12]
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	eeb0 0a67 	vmov.f32	s0, s15
 8002644:	2113      	movs	r1, #19
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fa38 	bl	8001abc <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 8002654:	4313      	orrs	r3, r2
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2116      	movs	r1, #22
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fd22 	bl	80010a8 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2117      	movs	r1, #23
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fd1b 	bl	80010a8 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	7c5b      	ldrb	r3, [r3, #17]
 800267c:	4313      	orrs	r3, r2
 800267e:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002684:	4313      	orrs	r3, r2
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 800268e:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 8002694:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 8002696:	461a      	mov	r2, r3
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	2118      	movs	r1, #24
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fd03 	bl	80010a8 <L6474_CmdSetParam>
  
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2101      	movs	r1, #1
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fcf3 	bl	80010a8 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2200      	movs	r2, #0
 80026c6:	2102      	movs	r1, #2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe fced 	bl	80010a8 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	2200      	movs	r2, #0
 80026d2:	2103      	movs	r1, #3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fce7 	bl	80010a8 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	f000 8094 	beq.w	800280a <L6474_SetRegisterToPredefinedValues+0x15e>
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	f300 80d7 	bgt.w	8002896 <L6474_SetRegisterToPredefinedValues+0x1ea>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <L6474_SetRegisterToPredefinedValues+0x46>
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d046      	beq.n	800277e <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 80026f0:	e0d1      	b.n	8002896 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 80026f2:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80028a0 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80026f6:	f000 fc2b 	bl	8002f50 <L6474_Tval_Current_to_Par>
 80026fa:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80026fc:	461a      	mov	r2, r3
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2109      	movs	r1, #9
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fcd0 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	2235      	movs	r2, #53	; 0x35
 800270c:	210e      	movs	r1, #14
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fcca 	bl	80010a8 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8002714:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002718:	f000 fc3e 	bl	8002f98 <L6474_Tmin_Time_to_Par>
 800271c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800271e:	461a      	mov	r2, r3
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	210f      	movs	r1, #15
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fcbf 	bl	80010a8 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 800272a:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800272e:	f000 fc33 	bl	8002f98 <L6474_Tmin_Time_to_Par>
 8002732:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002734:	461a      	mov	r2, r3
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	2110      	movs	r1, #16
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fcb4 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	2201      	movs	r2, #1
 8002744:	2113      	movs	r1, #19
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fcae 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	228c      	movs	r2, #140	; 0x8c
 8002750:	2116      	movs	r1, #22
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fca8 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	22cf      	movs	r2, #207	; 0xcf
 800275c:	2117      	movs	r1, #23
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fca2 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800276a:	2118      	movs	r1, #24
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fc9b 	bl	80010a8 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fbec 	bl	8001f54 <L6474_SetStopMode>
      break;
 800277c:	e08b      	b.n	8002896 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 800277e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80028a0 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002782:	f000 fbe5 	bl	8002f50 <L6474_Tval_Current_to_Par>
 8002786:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002788:	461a      	mov	r2, r3
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	2109      	movs	r1, #9
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fc8a 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	2235      	movs	r2, #53	; 0x35
 8002798:	210e      	movs	r1, #14
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fc84 	bl	80010a8 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 80027a0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80027a4:	f000 fbf8 	bl	8002f98 <L6474_Tmin_Time_to_Par>
 80027a8:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80027aa:	461a      	mov	r2, r3
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	210f      	movs	r1, #15
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fc79 	bl	80010a8 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 80027b6:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 80027ba:	f000 fbed 	bl	8002f98 <L6474_Tmin_Time_to_Par>
 80027be:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80027c0:	461a      	mov	r2, r3
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	2110      	movs	r1, #16
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fc6e 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	2201      	movs	r2, #1
 80027d0:	2113      	movs	r1, #19
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fc68 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	228c      	movs	r2, #140	; 0x8c
 80027dc:	2116      	movs	r1, #22
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fc62 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	22cf      	movs	r2, #207	; 0xcf
 80027e8:	2117      	movs	r1, #23
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fc5c 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 80027f6:	2118      	movs	r1, #24
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe fc55 	bl	80010a8 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fba6 	bl	8001f54 <L6474_SetStopMode>
      break;
 8002808:	e045      	b.n	8002896 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 800280a:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80028a0 <L6474_SetRegisterToPredefinedValues+0x1f4>
 800280e:	f000 fb9f 	bl	8002f50 <L6474_Tval_Current_to_Par>
 8002812:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002814:	461a      	mov	r2, r3
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	2109      	movs	r1, #9
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fc44 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2235      	movs	r2, #53	; 0x35
 8002824:	210e      	movs	r1, #14
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fc3e 	bl	80010a8 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 800282c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002830:	f000 fbb2 	bl	8002f98 <L6474_Tmin_Time_to_Par>
 8002834:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002836:	461a      	mov	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	210f      	movs	r1, #15
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fc33 	bl	80010a8 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 8002842:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002846:	f000 fba7 	bl	8002f98 <L6474_Tmin_Time_to_Par>
 800284a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800284c:	461a      	mov	r2, r3
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	2110      	movs	r1, #16
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fc28 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	2201      	movs	r2, #1
 800285c:	2113      	movs	r1, #19
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fc22 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	228c      	movs	r2, #140	; 0x8c
 8002868:	2116      	movs	r1, #22
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fc1c 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	22cf      	movs	r2, #207	; 0xcf
 8002874:	2117      	movs	r1, #23
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fc16 	bl	80010a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002882:	2118      	movs	r1, #24
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fc0f 	bl	80010a8 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fb60 	bl	8001f54 <L6474_SetStopMode>
      break;
 8002894:	bf00      	nop
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	437a0000 	.word	0x437a0000

080028a4 <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fa65 	bl	8000d80 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 80028b6:	79fa      	ldrb	r2, [r7, #7]
 80028b8:	4922      	ldr	r1, [pc, #136]	; (8002944 <L6474_StartMovement+0xa0>)
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	3308      	adds	r3, #8
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 80028cc:	79fa      	ldrb	r2, [r7, #7]
 80028ce:	491d      	ldr	r1, [pc, #116]	; (8002944 <L6474_StartMovement+0xa0>)
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	3324      	adds	r3, #36	; 0x24
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e009      	b.n	80028f6 <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 80028e2:	79fa      	ldrb	r2, [r7, #7]
 80028e4:	4917      	ldr	r1, [pc, #92]	; (8002944 <L6474_StartMovement+0xa0>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	3324      	adds	r3, #36	; 0x24
 80028f2:	2202      	movs	r2, #2
 80028f4:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 80028f6:	79fa      	ldrb	r2, [r7, #7]
 80028f8:	4912      	ldr	r1, [pc, #72]	; (8002944 <L6474_StartMovement+0xa0>)
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002908:	79fa      	ldrb	r2, [r7, #7]
 800290a:	490e      	ldr	r1, [pc, #56]	; (8002944 <L6474_StartMovement+0xa0>)
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	440b      	add	r3, r1
 8002916:	330c      	adds	r3, #12
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 800291c:	79fa      	ldrb	r2, [r7, #7]
 800291e:	4909      	ldr	r1, [pc, #36]	; (8002944 <L6474_StartMovement+0xa0>)
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	331e      	adds	r3, #30
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29a      	uxth	r2, r3
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fb61 	bl	8001ffc <L6474_ApplySpeed>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000304 	.word	0x20000304

08002948 <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 8002952:	4b96      	ldr	r3, [pc, #600]	; (8002bac <L6474_StepClockHandler+0x264>)
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 8002958:	79fa      	ldrb	r2, [r7, #7]
 800295a:	4995      	ldr	r1, [pc, #596]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	330c      	adds	r3, #12
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	1c59      	adds	r1, r3, #1
 800296c:	4890      	ldr	r0, [pc, #576]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4403      	add	r3, r0
 8002978:	330c      	adds	r3, #12
 800297a:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 800297c:	79fa      	ldrb	r2, [r7, #7]
 800297e:	498c      	ldr	r1, [pc, #560]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	3324      	adds	r3, #36	; 0x24
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b03      	cmp	r3, #3
 8002992:	f000 810f 	beq.w	8002bb4 <L6474_StepClockHandler+0x26c>
 8002996:	2b03      	cmp	r3, #3
 8002998:	f300 82a4 	bgt.w	8002ee4 <L6474_StepClockHandler+0x59c>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <L6474_StepClockHandler+0x60>
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	f000 819b 	beq.w	8002cdc <L6474_StepClockHandler+0x394>
      }
      break;
    }
    default: 
    {
      break;
 80029a6:	e29d      	b.n	8002ee4 <L6474_StepClockHandler+0x59c>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 80029a8:	79fa      	ldrb	r2, [r7, #7]
 80029aa:	4981      	ldr	r1, [pc, #516]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	330c      	adds	r3, #12
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 80029bc:	79fa      	ldrb	r2, [r7, #7]
 80029be:	497c      	ldr	r1, [pc, #496]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	3308      	adds	r3, #8
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 80029d0:	79fa      	ldrb	r2, [r7, #7]
 80029d2:	4977      	ldr	r1, [pc, #476]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	3320      	adds	r3, #32
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 80029e4:	79fa      	ldrb	r2, [r7, #7]
 80029e6:	4972      	ldr	r1, [pc, #456]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	3318      	adds	r3, #24
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 80029fc:	79fa      	ldrb	r2, [r7, #7]
 80029fe:	496c      	ldr	r1, [pc, #432]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	3322      	adds	r3, #34	; 0x22
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d017      	beq.n	8002a44 <L6474_StepClockHandler+0xfc>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002a14:	79fa      	ldrb	r2, [r7, #7]
 8002a16:	4966      	ldr	r1, [pc, #408]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	3322      	adds	r3, #34	; 0x22
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01f      	beq.n	8002a6c <L6474_StepClockHandler+0x124>
             (relPos == devicePrm[deviceId].startDecPos)))
 8002a2c:	79fa      	ldrb	r2, [r7, #7]
 8002a2e:	4960      	ldr	r1, [pc, #384]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	3310      	adds	r3, #16
 8002a3c:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d113      	bne.n	8002a6c <L6474_StepClockHandler+0x124>
          devicePrm[deviceId].motionState = DECELERATING;
 8002a44:	79fa      	ldrb	r2, [r7, #7]
 8002a46:	495a      	ldr	r1, [pc, #360]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	3324      	adds	r3, #36	; 0x24
 8002a54:	2202      	movs	r2, #2
 8002a56:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 8002a58:	79fa      	ldrb	r2, [r7, #7]
 8002a5a:	4955      	ldr	r1, [pc, #340]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	440b      	add	r3, r1
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e09e      	b.n	8002baa <L6474_StepClockHandler+0x262>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002a6c:	79fa      	ldrb	r2, [r7, #7]
 8002a6e:	4950      	ldr	r1, [pc, #320]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	331c      	adds	r3, #28
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d20f      	bcs.n	8002aa6 <L6474_StepClockHandler+0x15e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002a86:	79fa      	ldrb	r2, [r7, #7]
 8002a88:	4949      	ldr	r1, [pc, #292]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	3322      	adds	r3, #34	; 0x22
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00e      	beq.n	8002abc <L6474_StepClockHandler+0x174>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d10a      	bne.n	8002abc <L6474_StepClockHandler+0x174>
          devicePrm[deviceId].motionState = STEADY;
 8002aa6:	79fa      	ldrb	r2, [r7, #7]
 8002aa8:	4941      	ldr	r1, [pc, #260]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3324      	adds	r3, #36	; 0x24
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	e076      	b.n	8002baa <L6474_StepClockHandler+0x262>
          bool speedUpdated = FALSE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 8002ac2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <L6474_StepClockHandler+0x184>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002acc:	79fa      	ldrb	r2, [r7, #7]
 8002ace:	4938      	ldr	r1, [pc, #224]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	6819      	ldr	r1, [r3, #0]
 8002adc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	79fa      	ldrb	r2, [r7, #7]
 8002ae6:	4419      	add	r1, r3
 8002ae8:	4831      	ldr	r0, [pc, #196]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4403      	add	r3, r0
 8002af4:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002af6:	e017      	b.n	8002b28 <L6474_StepClockHandler+0x1e0>
            devicePrm[deviceId].accu -= (0X10000L);
 8002af8:	79fa      	ldrb	r2, [r7, #7]
 8002afa:	492d      	ldr	r1, [pc, #180]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	79fa      	ldrb	r2, [r7, #7]
 8002b0a:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002b0e:	4828      	ldr	r0, [pc, #160]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4403      	add	r3, r0
 8002b1a:	6019      	str	r1, [r3, #0]
            speed +=1;
 8002b1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b1e:	3301      	adds	r3, #1
 8002b20:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 8002b22:	2301      	movs	r3, #1
 8002b24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002b28:	79fa      	ldrb	r2, [r7, #7]
 8002b2a:	4921      	ldr	r1, [pc, #132]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d2dc      	bcs.n	8002af8 <L6474_StepClockHandler+0x1b0>
          if (speedUpdated)
 8002b3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 81d0 	beq.w	8002ee8 <L6474_StepClockHandler+0x5a0>
            if (speed > devicePrm[deviceId].maxSpeed)
 8002b48:	79fa      	ldrb	r2, [r7, #7]
 8002b4a:	4919      	ldr	r1, [pc, #100]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	331c      	adds	r3, #28
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d909      	bls.n	8002b76 <L6474_StepClockHandler+0x22e>
              speed = devicePrm[deviceId].maxSpeed;
 8002b62:	79fa      	ldrb	r2, [r7, #7]
 8002b64:	4912      	ldr	r1, [pc, #72]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	331c      	adds	r3, #28
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8002b76:	79fa      	ldrb	r2, [r7, #7]
 8002b78:	490d      	ldr	r1, [pc, #52]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	3320      	adds	r3, #32
 8002b86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b88:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002b8a:	79fa      	ldrb	r2, [r7, #7]
 8002b8c:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <L6474_StepClockHandler+0x268>)
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	3320      	adds	r3, #32
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fa2a 	bl	8001ffc <L6474_ApplySpeed>
        break;
 8002ba8:	e19e      	b.n	8002ee8 <L6474_StepClockHandler+0x5a0>
 8002baa:	e19d      	b.n	8002ee8 <L6474_StepClockHandler+0x5a0>
 8002bac:	20000301 	.word	0x20000301
 8002bb0:	20000304 	.word	0x20000304
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002bb4:	79fa      	ldrb	r2, [r7, #7]
 8002bb6:	499c      	ldr	r1, [pc, #624]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	331c      	adds	r3, #28
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002bc8:	79fa      	ldrb	r2, [r7, #7]
 8002bca:	4997      	ldr	r1, [pc, #604]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002bdc:	79fa      	ldrb	r2, [r7, #7]
 8002bde:	4992      	ldr	r1, [pc, #584]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	3322      	adds	r3, #34	; 0x22
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d030      	beq.n	8002c56 <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002bf4:	79fa      	ldrb	r2, [r7, #7]
 8002bf6:	498c      	ldr	r1, [pc, #560]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	3322      	adds	r3, #34	; 0x22
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <L6474_StepClockHandler+0x2dc>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002c0c:	79fa      	ldrb	r2, [r7, #7]
 8002c0e:	4986      	ldr	r1, [pc, #536]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	3310      	adds	r3, #16
 8002c1c:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002c1e:	6a3a      	ldr	r2, [r7, #32]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d218      	bcs.n	8002c56 <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002c24:	79fa      	ldrb	r2, [r7, #7]
 8002c26:	4980      	ldr	r1, [pc, #512]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	3322      	adds	r3, #34	; 0x22
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d120      	bne.n	8002c7e <L6474_StepClockHandler+0x336>
            (devicePrm[deviceId].speed > maxSpeed)))
 8002c3c:	79fa      	ldrb	r2, [r7, #7]
 8002c3e:	497a      	ldr	r1, [pc, #488]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	3320      	adds	r3, #32
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002c50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d213      	bcs.n	8002c7e <L6474_StepClockHandler+0x336>
        devicePrm[deviceId].motionState = DECELERATING;
 8002c56:	79fa      	ldrb	r2, [r7, #7]
 8002c58:	4973      	ldr	r1, [pc, #460]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	3324      	adds	r3, #36	; 0x24
 8002c66:	2202      	movs	r2, #2
 8002c68:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002c6a:	79fa      	ldrb	r2, [r7, #7]
 8002c6c:	496e      	ldr	r1, [pc, #440]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
      break;
 8002c7c:	e136      	b.n	8002eec <L6474_StepClockHandler+0x5a4>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	4969      	ldr	r1, [pc, #420]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3322      	adds	r3, #34	; 0x22
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 812a 	bne.w	8002eec <L6474_StepClockHandler+0x5a4>
               (devicePrm[deviceId].speed < maxSpeed))
 8002c98:	79fa      	ldrb	r2, [r7, #7]
 8002c9a:	4963      	ldr	r1, [pc, #396]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3320      	adds	r3, #32
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002cac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	f240 811c 	bls.w	8002eec <L6474_StepClockHandler+0x5a4>
        devicePrm[deviceId].motionState = ACCELERATING;
 8002cb4:	79fa      	ldrb	r2, [r7, #7]
 8002cb6:	495c      	ldr	r1, [pc, #368]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3324      	adds	r3, #36	; 0x24
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002cc8:	79fa      	ldrb	r2, [r7, #7]
 8002cca:	4957      	ldr	r1, [pc, #348]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
      break;
 8002cda:	e107      	b.n	8002eec <L6474_StepClockHandler+0x5a4>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002cdc:	79fa      	ldrb	r2, [r7, #7]
 8002cde:	4952      	ldr	r1, [pc, #328]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	330c      	adds	r3, #12
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 8002cf0:	79fa      	ldrb	r2, [r7, #7]
 8002cf2:	494d      	ldr	r1, [pc, #308]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3320      	adds	r3, #32
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 8002d04:	79fa      	ldrb	r2, [r7, #7]
 8002d06:	4948      	ldr	r1, [pc, #288]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	331a      	adds	r3, #26
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002d1c:	79fa      	ldrb	r2, [r7, #7]
 8002d1e:	4942      	ldr	r1, [pc, #264]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	440b      	add	r3, r1
 8002d2a:	3322      	adds	r3, #34	; 0x22
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d10c      	bne.n	8002d4e <L6474_StepClockHandler+0x406>
 8002d34:	79fa      	ldrb	r2, [r7, #7]
 8002d36:	493c      	ldr	r1, [pc, #240]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	440b      	add	r3, r1
 8002d42:	331e      	adds	r3, #30
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d917      	bls.n	8002d7e <L6474_StepClockHandler+0x436>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002d4e:	79fa      	ldrb	r2, [r7, #7]
 8002d50:	4935      	ldr	r1, [pc, #212]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3322      	adds	r3, #34	; 0x22
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d010      	beq.n	8002d88 <L6474_StepClockHandler+0x440>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 8002d66:	79fa      	ldrb	r2, [r7, #7]
 8002d68:	492f      	ldr	r1, [pc, #188]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	440b      	add	r3, r1
 8002d74:	3314      	adds	r3, #20
 8002d76:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d304      	bcc.n	8002d88 <L6474_StepClockHandler+0x440>
        L6474_HardStop(deviceId);
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fcab 	bl	80016dc <L6474_HardStop>
 8002d86:	e0ac      	b.n	8002ee2 <L6474_StepClockHandler+0x59a>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d88:	79fa      	ldrb	r2, [r7, #7]
 8002d8a:	4927      	ldr	r1, [pc, #156]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	3322      	adds	r3, #34	; 0x22
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d117      	bne.n	8002dd0 <L6474_StepClockHandler+0x488>
               (speed <= devicePrm[deviceId].maxSpeed))
 8002da0:	79fa      	ldrb	r2, [r7, #7]
 8002da2:	4921      	ldr	r1, [pc, #132]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	331c      	adds	r3, #28
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002db4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d80a      	bhi.n	8002dd0 <L6474_StepClockHandler+0x488>
        devicePrm[deviceId].motionState = STEADY;
 8002dba:	79fa      	ldrb	r2, [r7, #7]
 8002dbc:	491a      	ldr	r1, [pc, #104]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3324      	adds	r3, #36	; 0x24
 8002dca:	2203      	movs	r2, #3
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e088      	b.n	8002ee2 <L6474_StepClockHandler+0x59a>
        if (speed > devicePrm[deviceId].minSpeed)
 8002dd0:	79fa      	ldrb	r2, [r7, #7]
 8002dd2:	4915      	ldr	r1, [pc, #84]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	331e      	adds	r3, #30
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002de6:	429a      	cmp	r2, r3
 8002de8:	f240 8082 	bls.w	8002ef0 <L6474_StepClockHandler+0x5a8>
          bool speedUpdated = FALSE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 8002df2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <L6474_StepClockHandler+0x4b4>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 8002dfc:	79fa      	ldrb	r2, [r7, #7]
 8002dfe:	490a      	ldr	r1, [pc, #40]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	6819      	ldr	r1, [r3, #0]
 8002e0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	79fa      	ldrb	r2, [r7, #7]
 8002e16:	4419      	add	r1, r3
 8002e18:	4803      	ldr	r0, [pc, #12]	; (8002e28 <L6474_StepClockHandler+0x4e0>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4403      	add	r3, r0
 8002e24:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002e26:	e01c      	b.n	8002e62 <L6474_StepClockHandler+0x51a>
 8002e28:	20000304 	.word	0x20000304
            devicePrm[deviceId].accu -= (0X10000L);
 8002e2c:	79fa      	ldrb	r2, [r7, #7]
 8002e2e:	4934      	ldr	r1, [pc, #208]	; (8002f00 <L6474_StepClockHandler+0x5b8>)
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	440b      	add	r3, r1
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	79fa      	ldrb	r2, [r7, #7]
 8002e3e:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002e42:	482f      	ldr	r0, [pc, #188]	; (8002f00 <L6474_StepClockHandler+0x5b8>)
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4403      	add	r3, r0
 8002e4e:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 8002e50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d902      	bls.n	8002e5c <L6474_StepClockHandler+0x514>
              speed -=1;
 8002e56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002e62:	79fa      	ldrb	r2, [r7, #7]
 8002e64:	4926      	ldr	r1, [pc, #152]	; (8002f00 <L6474_StepClockHandler+0x5b8>)
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e76:	d2d9      	bcs.n	8002e2c <L6474_StepClockHandler+0x4e4>
          if (speedUpdated)
 8002e78:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d037      	beq.n	8002ef0 <L6474_StepClockHandler+0x5a8>
            if (speed < devicePrm[deviceId].minSpeed)
 8002e80:	79fa      	ldrb	r2, [r7, #7]
 8002e82:	491f      	ldr	r1, [pc, #124]	; (8002f00 <L6474_StepClockHandler+0x5b8>)
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	331e      	adds	r3, #30
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d209      	bcs.n	8002eae <L6474_StepClockHandler+0x566>
              speed = devicePrm[deviceId].minSpeed;
 8002e9a:	79fa      	ldrb	r2, [r7, #7]
 8002e9c:	4918      	ldr	r1, [pc, #96]	; (8002f00 <L6474_StepClockHandler+0x5b8>)
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	331e      	adds	r3, #30
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 8002eae:	79fa      	ldrb	r2, [r7, #7]
 8002eb0:	4913      	ldr	r1, [pc, #76]	; (8002f00 <L6474_StepClockHandler+0x5b8>)
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	3320      	adds	r3, #32
 8002ebe:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002ec0:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002ec2:	79fa      	ldrb	r2, [r7, #7]
 8002ec4:	490e      	ldr	r1, [pc, #56]	; (8002f00 <L6474_StepClockHandler+0x5b8>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	440b      	add	r3, r1
 8002ed0:	3320      	adds	r3, #32
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f88e 	bl	8001ffc <L6474_ApplySpeed>
      break;
 8002ee0:	e006      	b.n	8002ef0 <L6474_StepClockHandler+0x5a8>
 8002ee2:	e005      	b.n	8002ef0 <L6474_StepClockHandler+0x5a8>
      break;
 8002ee4:	bf00      	nop
 8002ee6:	e004      	b.n	8002ef2 <L6474_StepClockHandler+0x5aa>
        break;
 8002ee8:	bf00      	nop
 8002eea:	e002      	b.n	8002ef2 <L6474_StepClockHandler+0x5aa>
      break;
 8002eec:	bf00      	nop
 8002eee:	e000      	b.n	8002ef2 <L6474_StepClockHandler+0x5aa>
      break;
 8002ef0:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <L6474_StepClockHandler+0x5bc>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	3730      	adds	r7, #48	; 0x30
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000304 	.word	0x20000304
 8002f04:	20000301 	.word	0x20000301

08002f08 <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 8002f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f16:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002f48 <L6474_Ocd_Th_to_Par+0x40>
 8002f1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f1e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002f4c <L6474_Ocd_Th_to_Par+0x44>
 8002f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f32:	edc7 7a00 	vstr	s15, [r7]
 8002f36:	783b      	ldrb	r3, [r7, #0]
 8002f38:	b2db      	uxtb	r3, r3
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	43bb8000 	.word	0x43bb8000
 8002f4c:	3b2eb80f 	.word	0x3b2eb80f

08002f50 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 8002f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f5e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002f90 <L6474_Tval_Current_to_Par+0x40>
 8002f62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f66:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002f94 <L6474_Tval_Current_to_Par+0x44>
 8002f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f7a:	edc7 7a00 	vstr	s15, [r7]
 8002f7e:	783b      	ldrb	r3, [r7, #0]
 8002f80:	b2db      	uxtb	r3, r3
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	41fa0000 	.word	0x41fa0000
 8002f94:	3d03126f 	.word	0x3d03126f

08002f98 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 8002fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fbe:	edc7 7a00 	vstr	s15, [r7]
 8002fc2:	783b      	ldrb	r3, [r7, #0]
 8002fc4:	b2db      	uxtb	r3, r3
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <L6474_WriteBytes+0x40>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f001 f937 	bl	800425c <L6474_Board_SpiWriteBytes>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 8002ff4:	f248 0001 	movw	r0, #32769	; 0x8001
 8002ff8:	f7ff f91e 	bl	8002238 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <L6474_WriteBytes+0x44>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <L6474_WriteBytes+0x48>)
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
  }
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200002e4 	.word	0x200002e4
 8003018:	20000301 	.word	0x20000301
 800301c:	20000300 	.word	0x20000300

08003020 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08e      	sub	sp, #56	; 0x38
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003026:	1d3b      	adds	r3, r7, #4
 8003028:	2234      	movs	r2, #52	; 0x34
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f00c fbe7 	bl	800f800 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003032:	4b3a      	ldr	r3, [pc, #232]	; (800311c <MX_LTDC_Init+0xfc>)
 8003034:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <MX_LTDC_Init+0x100>)
 8003036:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003038:	4b38      	ldr	r3, [pc, #224]	; (800311c <MX_LTDC_Init+0xfc>)
 800303a:	2200      	movs	r2, #0
 800303c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800303e:	4b37      	ldr	r3, [pc, #220]	; (800311c <MX_LTDC_Init+0xfc>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003044:	4b35      	ldr	r3, [pc, #212]	; (800311c <MX_LTDC_Init+0xfc>)
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800304a:	4b34      	ldr	r3, [pc, #208]	; (800311c <MX_LTDC_Init+0xfc>)
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 39;
 8003050:	4b32      	ldr	r3, [pc, #200]	; (800311c <MX_LTDC_Init+0xfc>)
 8003052:	2227      	movs	r2, #39	; 0x27
 8003054:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 8003056:	4b31      	ldr	r3, [pc, #196]	; (800311c <MX_LTDC_Init+0xfc>)
 8003058:	2208      	movs	r2, #8
 800305a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 800305c:	4b2f      	ldr	r3, [pc, #188]	; (800311c <MX_LTDC_Init+0xfc>)
 800305e:	222a      	movs	r2, #42	; 0x2a
 8003060:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8003062:	4b2e      	ldr	r3, [pc, #184]	; (800311c <MX_LTDC_Init+0xfc>)
 8003064:	220b      	movs	r2, #11
 8003066:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8003068:	4b2c      	ldr	r3, [pc, #176]	; (800311c <MX_LTDC_Init+0xfc>)
 800306a:	f240 220a 	movw	r2, #522	; 0x20a
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003070:	4b2a      	ldr	r3, [pc, #168]	; (800311c <MX_LTDC_Init+0xfc>)
 8003072:	f240 121b 	movw	r2, #283	; 0x11b
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 528;
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <MX_LTDC_Init+0xfc>)
 800307a:	f44f 7204 	mov.w	r2, #528	; 0x210
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003080:	4b26      	ldr	r3, [pc, #152]	; (800311c <MX_LTDC_Init+0xfc>)
 8003082:	f240 121d 	movw	r2, #285	; 0x11d
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003088:	4b24      	ldr	r3, [pc, #144]	; (800311c <MX_LTDC_Init+0xfc>)
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003090:	4b22      	ldr	r3, [pc, #136]	; (800311c <MX_LTDC_Init+0xfc>)
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003098:	4b20      	ldr	r3, [pc, #128]	; (800311c <MX_LTDC_Init+0xfc>)
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80030a0:	481e      	ldr	r0, [pc, #120]	; (800311c <MX_LTDC_Init+0xfc>)
 80030a2:	f003 f8a7 	bl	80061f4 <HAL_LTDC_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80030ac:	f000 fabc 	bl	8003628 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80030b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80030b8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80030be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80030c2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80030c4:	2302      	movs	r3, #2
 80030c6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80030c8:	23ff      	movs	r3, #255	; 0xff
 80030ca:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80030d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80030d6:	2305      	movs	r3, #5
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80030de:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80030e4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	2200      	movs	r2, #0
 8003100:	4619      	mov	r1, r3
 8003102:	4806      	ldr	r0, [pc, #24]	; (800311c <MX_LTDC_Init+0xfc>)
 8003104:	f003 fa08 	bl	8006518 <HAL_LTDC_ConfigLayer>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 800310e:	f000 fa8b 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003112:	bf00      	nop
 8003114:	3738      	adds	r7, #56	; 0x38
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000037c 	.word	0x2000037c
 8003120:	50001000 	.word	0x50001000

08003124 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b0c0      	sub	sp, #256	; 0x100
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800313c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003140:	22bc      	movs	r2, #188	; 0xbc
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f00c fb5b 	bl	800f800 <memset>
  if(ltdcHandle->Instance==LTDC)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4abd      	ldr	r2, [pc, #756]	; (8003444 <HAL_LTDC_MspInit+0x320>)
 8003150:	4293      	cmp	r3, r2
 8003152:	f040 8171 	bne.w	8003438 <HAL_LTDC_MspInit+0x314>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003156:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800315c:	2301      	movs	r3, #1
 800315e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8003160:	2312      	movs	r3, #18
 8003162:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003164:	2302      	movs	r3, #2
 8003166:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003168:	2302      	movs	r3, #2
 800316a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3R = 1;
 800316c:	2301      	movs	r3, #1
 800316e:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003170:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003174:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8003176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800317a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800317c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003180:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003186:	4618      	mov	r0, r3
 8003188:	f004 fbd4 	bl	8007934 <HAL_RCCEx_PeriphCLKConfig>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 8003192:	f000 fa49 	bl	8003628 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003196:	4bac      	ldr	r3, [pc, #688]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 8003198:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800319c:	4aaa      	ldr	r2, [pc, #680]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 800319e:	f043 0308 	orr.w	r3, r3, #8
 80031a2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80031a6:	4ba8      	ldr	r3, [pc, #672]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 80031a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031b4:	4ba4      	ldr	r3, [pc, #656]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ba:	4aa3      	ldr	r2, [pc, #652]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 80031bc:	f043 0310 	orr.w	r3, r3, #16
 80031c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031c4:	4ba0      	ldr	r3, [pc, #640]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031d2:	4b9d      	ldr	r3, [pc, #628]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d8:	4a9b      	ldr	r2, [pc, #620]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 80031da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031e2:	4b99      	ldr	r3, [pc, #612]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031f0:	4b95      	ldr	r3, [pc, #596]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 80031f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f6:	4a94      	ldr	r2, [pc, #592]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 80031f8:	f043 0320 	orr.w	r3, r3, #32
 80031fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003200:	4b91      	ldr	r3, [pc, #580]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	623b      	str	r3, [r7, #32]
 800320c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320e:	4b8e      	ldr	r3, [pc, #568]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 8003210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003214:	4a8c      	ldr	r2, [pc, #560]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800321e:	4b8a      	ldr	r3, [pc, #552]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 8003220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322c:	4b86      	ldr	r3, [pc, #536]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 800322e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003232:	4a85      	ldr	r2, [pc, #532]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800323c:	4b82      	ldr	r3, [pc, #520]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 800323e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324a:	4b7f      	ldr	r3, [pc, #508]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 800324c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003250:	4a7d      	ldr	r2, [pc, #500]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800325a:	4b7b      	ldr	r3, [pc, #492]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 800325c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003268:	4b77      	ldr	r3, [pc, #476]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 800326a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326e:	4a76      	ldr	r2, [pc, #472]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 8003270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003278:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 800327a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003286:	4b70      	ldr	r3, [pc, #448]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 8003288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328c:	4a6e      	ldr	r2, [pc, #440]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 800328e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003296:	4b6c      	ldr	r3, [pc, #432]	; (8003448 <HAL_LTDC_MspInit+0x324>)
 8003298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80032a4:	2370      	movs	r3, #112	; 0x70
 80032a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032aa:	2302      	movs	r3, #2
 80032ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032bc:	230e      	movs	r3, #14
 80032be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032c2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032c6:	4619      	mov	r1, r3
 80032c8:	4860      	ldr	r0, [pc, #384]	; (800344c <HAL_LTDC_MspInit+0x328>)
 80032ca:	f002 fdc9 	bl	8005e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80032ce:	f240 63f7 	movw	r3, #1783	; 0x6f7
 80032d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d6:	2302      	movs	r3, #2
 80032d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032e8:	230e      	movs	r3, #14
 80032ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80032ee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032f2:	4619      	mov	r1, r3
 80032f4:	4856      	ldr	r0, [pc, #344]	; (8003450 <HAL_LTDC_MspInit+0x32c>)
 80032f6:	f002 fdb3 	bl	8005e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330e:	2300      	movs	r3, #0
 8003310:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003314:	230e      	movs	r3, #14
 8003316:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800331a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800331e:	4619      	mov	r1, r3
 8003320:	484c      	ldr	r0, [pc, #304]	; (8003454 <HAL_LTDC_MspInit+0x330>)
 8003322:	f002 fd9d 	bl	8005e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003326:	2301      	movs	r3, #1
 8003328:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003338:	2300      	movs	r3, #0
 800333a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800333e:	230e      	movs	r3, #14
 8003340:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003344:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003348:	4619      	mov	r1, r3
 800334a:	4843      	ldr	r0, [pc, #268]	; (8003458 <HAL_LTDC_MspInit+0x334>)
 800334c:	f002 fd88 	bl	8005e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003350:	2320      	movs	r3, #32
 8003352:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003368:	230e      	movs	r3, #14
 800336a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003372:	4619      	mov	r1, r3
 8003374:	4839      	ldr	r0, [pc, #228]	; (800345c <HAL_LTDC_MspInit+0x338>)
 8003376:	f002 fd73 	bl	8005e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800337a:	2302      	movs	r3, #2
 800337c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003392:	2309      	movs	r3, #9
 8003394:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003398:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800339c:	4619      	mov	r1, r3
 800339e:	4830      	ldr	r0, [pc, #192]	; (8003460 <HAL_LTDC_MspInit+0x33c>)
 80033a0:	f002 fd5e 	bl	8005e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_15;
 80033a4:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 80033a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033be:	230e      	movs	r3, #14
 80033c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80033c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033c8:	4619      	mov	r1, r3
 80033ca:	4826      	ldr	r0, [pc, #152]	; (8003464 <HAL_LTDC_MspInit+0x340>)
 80033cc:	f002 fd48 	bl	8005e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80033d0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80033d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033ea:	230e      	movs	r3, #14
 80033ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033f4:	4619      	mov	r1, r3
 80033f6:	481c      	ldr	r0, [pc, #112]	; (8003468 <HAL_LTDC_MspInit+0x344>)
 80033f8:	f002 fd32 	bl	8005e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003400:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003416:	2309      	movs	r3, #9
 8003418:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800341c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003420:	4619      	mov	r1, r3
 8003422:	4811      	ldr	r0, [pc, #68]	; (8003468 <HAL_LTDC_MspInit+0x344>)
 8003424:	f002 fd1c 	bl	8005e60 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003428:	2200      	movs	r2, #0
 800342a:	2105      	movs	r1, #5
 800342c:	2058      	movs	r0, #88	; 0x58
 800342e:	f002 faf3 	bl	8005a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003432:	2058      	movs	r0, #88	; 0x58
 8003434:	f002 fb0a 	bl	8005a4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003438:	bf00      	nop
 800343a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	50001000 	.word	0x50001000
 8003448:	58024400 	.word	0x58024400
 800344c:	58021000 	.word	0x58021000
 8003450:	58022000 	.word	0x58022000
 8003454:	58021400 	.word	0x58021400
 8003458:	58020800 	.word	0x58020800
 800345c:	58020000 	.word	0x58020000
 8003460:	58020400 	.word	0x58020400
 8003464:	58021c00 	.word	0x58021c00
 8003468:	58021800 	.word	0x58021800

0800346c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003472:	f000 ff59 	bl	8004328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003476:	f000 f835 	bl	80034e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800347a:	f7fd fac3 	bl	8000a04 <MX_GPIO_Init>
  MX_SPI2_Init();
 800347e:	f000 f9a7 	bl	80037d0 <MX_SPI2_Init>
  MX_ADC3_Init();
 8003482:	f7fd f8af 	bl	80005e4 <MX_ADC3_Init>
  MX_UART5_Init();
 8003486:	f000 fbbb 	bl	8003c00 <MX_UART5_Init>
  MX_I2C1_SMBUS_Init();
 800348a:	f7fd fba1 	bl	8000bd0 <MX_I2C1_SMBUS_Init>
  MX_DMA2D_Init();
 800348e:	f7fd f99b 	bl	80007c8 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8003492:	f7ff fdc5 	bl	8003020 <MX_LTDC_Init>
  MX_CRC_Init();
 8003496:	f7fd f953 	bl	8000740 <MX_CRC_Init>
  MX_TouchGFX_Init();
 800349a:	f00c f977 	bl	800f78c <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  L6474_SetRegisterToGivenValues(0,gL6474InitParams);
 800349e:	4e0f      	ldr	r6, [pc, #60]	; (80034dc <main+0x70>)
 80034a0:	466d      	mov	r5, sp
 80034a2:	f106 040c 	add.w	r4, r6, #12
 80034a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80034b2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80034b6:	2000      	movs	r0, #0
 80034b8:	f7ff f87c 	bl	80025b4 <L6474_SetRegisterToGivenValues>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474,1);
 80034bc:	2101      	movs	r1, #1
 80034be:	f641 104a 	movw	r0, #6474	; 0x194a
 80034c2:	f000 f90b 	bl	80036dc <BSP_MotorControl_Init>
  HAL_ADC_Start(&hadc3); // internal_temp measurement
 80034c6:	4806      	ldr	r0, [pc, #24]	; (80034e0 <main+0x74>)
 80034c8:	f001 fb3e 	bl	8004b48 <HAL_ADC_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80034cc:	f009 fc0c 	bl	800cce8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80034d0:	f7fd f9d6 	bl	8000880 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80034d4:	f009 fc2c 	bl	800cd30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80034d8:	e7fe      	b.n	80034d8 <main+0x6c>
 80034da:	bf00      	nop
 80034dc:	20000128 	.word	0x20000128
 80034e0:	20000184 	.word	0x20000184

080034e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b09c      	sub	sp, #112	; 0x70
 80034e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ee:	224c      	movs	r2, #76	; 0x4c
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f00c f984 	bl	800f800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	2220      	movs	r2, #32
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f00c f97e 	bl	800f800 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003504:	2002      	movs	r0, #2
 8003506:	f003 f9df 	bl	80068c8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800350a:	2300      	movs	r3, #0
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4b34      	ldr	r3, [pc, #208]	; (80035e0 <SystemClock_Config+0xfc>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	4a33      	ldr	r2, [pc, #204]	; (80035e0 <SystemClock_Config+0xfc>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	62d3      	str	r3, [r2, #44]	; 0x2c
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <SystemClock_Config+0xfc>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <SystemClock_Config+0x100>)
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	4a2e      	ldr	r2, [pc, #184]	; (80035e4 <SystemClock_Config+0x100>)
 800352a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800352e:	6193      	str	r3, [r2, #24]
 8003530:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <SystemClock_Config+0x100>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800353c:	bf00      	nop
 800353e:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <SystemClock_Config+0x100>)
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354a:	d1f8      	bne.n	800353e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800354c:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <SystemClock_Config+0x104>)
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f023 0303 	bic.w	r3, r3, #3
 8003554:	4a24      	ldr	r2, [pc, #144]	; (80035e8 <SystemClock_Config+0x104>)
 8003556:	f043 0302 	orr.w	r3, r3, #2
 800355a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800355c:	2301      	movs	r3, #1
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003566:	2302      	movs	r3, #2
 8003568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800356a:	2302      	movs	r3, #2
 800356c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800356e:	2301      	movs	r3, #1
 8003570:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003572:	2364      	movs	r3, #100	; 0x64
 8003574:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003576:	2302      	movs	r3, #2
 8003578:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800357a:	2304      	movs	r3, #4
 800357c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800357e:	2302      	movs	r3, #2
 8003580:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003582:	230c      	movs	r3, #12
 8003584:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003586:	2300      	movs	r3, #0
 8003588:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800358e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003592:	4618      	mov	r0, r3
 8003594:	f003 f9d2 	bl	800693c <HAL_RCC_OscConfig>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800359e:	f000 f843 	bl	8003628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035a2:	233f      	movs	r3, #63	; 0x3f
 80035a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035a6:	2303      	movs	r3, #3
 80035a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80035ae:	2308      	movs	r3, #8
 80035b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80035b2:	2340      	movs	r3, #64	; 0x40
 80035b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80035b6:	2340      	movs	r3, #64	; 0x40
 80035b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80035ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80035c0:	2340      	movs	r3, #64	; 0x40
 80035c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035c4:	1d3b      	adds	r3, r7, #4
 80035c6:	2102      	movs	r1, #2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f003 fde5 	bl	8007198 <HAL_RCC_ClockConfig>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80035d4:	f000 f828 	bl	8003628 <Error_Handler>
  }
}
 80035d8:	bf00      	nop
 80035da:	3770      	adds	r7, #112	; 0x70
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	58000400 	.word	0x58000400
 80035e4:	58024800 	.word	0x58024800
 80035e8:	58024400 	.word	0x58024400

080035ec <MyFlagInterruptHandler>:

/* USER CODE BEGIN 4 */
void MyFlagInterruptHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 80035f2:	2000      	movs	r0, #0
 80035f4:	f000 f8c6 	bl	8003784 <BSP_MotorControl_CmdGetStatus>
 80035f8:	4603      	mov	r3, r0
 80035fa:	80fb      	strh	r3, [r7, #6]
  {
    //overcurrent detection
    // Action to be customized
  }

}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003616:	f000 fec3 	bl	80043a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40000400 	.word	0x40000400

08003628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800362c:	b672      	cpsid	i
}
 800362e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003630:	e7fe      	b.n	8003630 <Error_Handler+0x8>

08003632 <Powerstep01_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0
 8003636:	2300      	movs	r3, #0
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0
 8003646:	2300      	movs	r3, #0
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003652:	b480      	push	{r7}
 8003654:	af00      	add	r7, sp, #0
 8003656:	2300      	movs	r3, #0
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 800367e:	4b07      	ldr	r3, [pc, #28]	; (800369c <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
 8003688:	e004      	b.n	8003694 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 800368a:	f640 0002 	movw	r0, #2050	; 0x802
 800368e:	f000 f807 	bl	80036a0 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20000424 	.word	0x20000424

080036a0 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <BSP_MotorControl_ErrorHandler+0x38>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00d      	beq.n	80036ce <BSP_MotorControl_ErrorHandler+0x2e>
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <BSP_MotorControl_ErrorHandler+0x38>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <BSP_MotorControl_ErrorHandler+0x38>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036c6:	88fa      	ldrh	r2, [r7, #6]
 80036c8:	4610      	mov	r0, r2
 80036ca:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 80036cc:	e000      	b.n	80036d0 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 80036ce:	e7fe      	b.n	80036ce <BSP_MotorControl_ErrorHandler+0x2e>
}
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000424 	.word	0x20000424

080036dc <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] nbDevices Number of motor devices to use (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, uint8_t nbDevices)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	460a      	mov	r2, r1
 80036e6:	80fb      	strh	r3, [r7, #6]
 80036e8:	4613      	mov	r3, r2
 80036ea:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 80036ec:	4a23      	ldr	r2, [pc, #140]	; (800377c <BSP_MotorControl_Init+0xa0>)
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	8013      	strh	r3, [r2, #0]
  
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	f641 124a 	movw	r2, #6474	; 0x194a
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d105      	bne.n	8003708 <BSP_MotorControl_Init+0x2c>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80036fc:	f7fd fe86 	bl	800140c <L6474_GetMotorHandle>
 8003700:	4603      	mov	r3, r0
 8003702:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <BSP_MotorControl_Init+0xa4>)
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e020      	b.n	800374a <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d105      	bne.n	800371a <BSP_MotorControl_Init+0x3e>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 800370e:	f7ff ff90 	bl	8003632 <Powerstep01_GetMotorHandle>
 8003712:	4603      	mov	r3, r0
 8003714:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <BSP_MotorControl_Init+0xa4>)
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	e017      	b.n	800374a <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	f641 023e 	movw	r2, #6206	; 0x183e
 8003720:	4293      	cmp	r3, r2
 8003722:	d105      	bne.n	8003730 <BSP_MotorControl_Init+0x54>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 8003724:	f7ff ff8d 	bl	8003642 <L6206_GetMotorHandle>
 8003728:	4603      	mov	r3, r0
 800372a:	4a15      	ldr	r2, [pc, #84]	; (8003780 <BSP_MotorControl_Init+0xa4>)
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e00c      	b.n	800374a <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 8003736:	d105      	bne.n	8003744 <BSP_MotorControl_Init+0x68>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 8003738:	f7ff ff8b 	bl	8003652 <L6208_GetMotorHandle>
 800373c:	4603      	mov	r3, r0
 800373e:	4a10      	ldr	r2, [pc, #64]	; (8003780 <BSP_MotorControl_Init+0xa4>)
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e002      	b.n	800374a <BSP_MotorControl_Init+0x6e>
  }
  else
  {
    motorDrvHandle = 0;
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <BSP_MotorControl_Init+0xa4>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
  }

  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <BSP_MotorControl_Init+0xa4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <BSP_MotorControl_Init+0x8e>
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <BSP_MotorControl_Init+0xa4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <BSP_MotorControl_Init+0x8e>
  {
    motorDrvHandle->Init(nbDevices);
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <BSP_MotorControl_Init+0xa4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	797a      	ldrb	r2, [r7, #5]
 8003764:	4610      	mov	r0, r2
 8003766:	4798      	blx	r3
 8003768:	e004      	b.n	8003774 <BSP_MotorControl_Init+0x98>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 800376a:	f640 0004 	movw	r0, #2052	; 0x804
 800376e:	f7ff ff97 	bl	80036a0 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003772:	bf00      	nop
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000428 	.word	0x20000428
 8003780:	20000424 	.word	0x20000424

08003784 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8003792:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <BSP_MotorControl_CmdGetStatus+0x48>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00f      	beq.n	80037ba <BSP_MotorControl_CmdGetStatus+0x36>
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <BSP_MotorControl_CmdGetStatus+0x48>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <BSP_MotorControl_CmdGetStatus+0x48>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	79fa      	ldrb	r2, [r7, #7]
 80037b0:	4610      	mov	r0, r2
 80037b2:	4798      	blx	r3
 80037b4:	4603      	mov	r3, r0
 80037b6:	81fb      	strh	r3, [r7, #14]
 80037b8:	e003      	b.n	80037c2 <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 80037ba:	f640 0022 	movw	r0, #2082	; 0x822
 80037be:	f7ff ff6f 	bl	80036a0 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 80037c2:	89fb      	ldrh	r3, [r7, #14]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000424 	.word	0x20000424

080037d0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <MX_SPI2_Init+0xa4>)
 80037d6:	4a28      	ldr	r2, [pc, #160]	; (8003878 <MX_SPI2_Init+0xa8>)
 80037d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037da:	4b26      	ldr	r3, [pc, #152]	; (8003874 <MX_SPI2_Init+0xa4>)
 80037dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80037e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <MX_SPI2_Init+0xa4>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_32BIT;
 80037e8:	4b22      	ldr	r3, [pc, #136]	; (8003874 <MX_SPI2_Init+0xa4>)
 80037ea:	221f      	movs	r2, #31
 80037ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037ee:	4b21      	ldr	r3, [pc, #132]	; (8003874 <MX_SPI2_Init+0xa4>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037f4:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <MX_SPI2_Init+0xa4>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <MX_SPI2_Init+0xa4>)
 80037fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003800:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <MX_SPI2_Init+0xa4>)
 8003804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003808:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <MX_SPI2_Init+0xa4>)
 800380c:	2200      	movs	r2, #0
 800380e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <MX_SPI2_Init+0xa4>)
 8003812:	2200      	movs	r2, #0
 8003814:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003816:	4b17      	ldr	r3, [pc, #92]	; (8003874 <MX_SPI2_Init+0xa4>)
 8003818:	2200      	movs	r2, #0
 800381a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800381c:	4b15      	ldr	r3, [pc, #84]	; (8003874 <MX_SPI2_Init+0xa4>)
 800381e:	2200      	movs	r2, #0
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003822:	4b14      	ldr	r3, [pc, #80]	; (8003874 <MX_SPI2_Init+0xa4>)
 8003824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003828:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <MX_SPI2_Init+0xa4>)
 800382c:	2200      	movs	r2, #0
 800382e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003830:	4b10      	ldr	r3, [pc, #64]	; (8003874 <MX_SPI2_Init+0xa4>)
 8003832:	2200      	movs	r2, #0
 8003834:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <MX_SPI2_Init+0xa4>)
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800383c:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <MX_SPI2_Init+0xa4>)
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <MX_SPI2_Init+0xa4>)
 8003844:	2200      	movs	r2, #0
 8003846:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <MX_SPI2_Init+0xa4>)
 800384a:	2200      	movs	r2, #0
 800384c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <MX_SPI2_Init+0xa4>)
 8003850:	2200      	movs	r2, #0
 8003852:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003854:	4b07      	ldr	r3, [pc, #28]	; (8003874 <MX_SPI2_Init+0xa4>)
 8003856:	2200      	movs	r2, #0
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <MX_SPI2_Init+0xa4>)
 800385c:	2200      	movs	r2, #0
 800385e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003860:	4804      	ldr	r0, [pc, #16]	; (8003874 <MX_SPI2_Init+0xa4>)
 8003862:	f006 faf3 	bl	8009e4c <HAL_SPI_Init>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800386c:	f7ff fedc 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003870:	bf00      	nop
 8003872:	bd80      	pop	{r7, pc}
 8003874:	2000042c 	.word	0x2000042c
 8003878:	40003800 	.word	0x40003800

0800387c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b0b8      	sub	sp, #224	; 0xe0
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003884:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	22bc      	movs	r2, #188	; 0xbc
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f00b ffaf 	bl	800f800 <memset>
  if(spiHandle->Instance==SPI2)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a25      	ldr	r2, [pc, #148]	; (800393c <HAL_SPI_MspInit+0xc0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d142      	bne.n	8003932 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80038ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038b6:	f107 0310 	add.w	r3, r7, #16
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 f83a 	bl	8007934 <HAL_RCCEx_PeriphCLKConfig>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80038c6:	f7ff feaf 	bl	8003628 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038ca:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_SPI_MspInit+0xc4>)
 80038cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <HAL_SPI_MspInit+0xc4>)
 80038d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038da:	4b19      	ldr	r3, [pc, #100]	; (8003940 <HAL_SPI_MspInit+0xc4>)
 80038dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e8:	4b15      	ldr	r3, [pc, #84]	; (8003940 <HAL_SPI_MspInit+0xc4>)
 80038ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ee:	4a14      	ldr	r2, [pc, #80]	; (8003940 <HAL_SPI_MspInit+0xc4>)
 80038f0:	f043 0302 	orr.w	r3, r3, #2
 80038f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <HAL_SPI_MspInit+0xc4>)
 80038fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003906:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800390a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390e:	2302      	movs	r3, #2
 8003910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391a:	2300      	movs	r3, #0
 800391c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003920:	2305      	movs	r3, #5
 8003922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003926:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800392a:	4619      	mov	r1, r3
 800392c:	4805      	ldr	r0, [pc, #20]	; (8003944 <HAL_SPI_MspInit+0xc8>)
 800392e:	f002 fa97 	bl	8005e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003932:	bf00      	nop
 8003934:	37e0      	adds	r7, #224	; 0xe0
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40003800 	.word	0x40003800
 8003940:	58024400 	.word	0x58024400
 8003944:	58020400 	.word	0x58020400

08003948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <HAL_MspInit+0x38>)
 8003950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003954:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <HAL_MspInit+0x38>)
 8003956:	f043 0302 	orr.w	r3, r3, #2
 800395a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <HAL_MspInit+0x38>)
 8003960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800396c:	2200      	movs	r2, #0
 800396e:	210f      	movs	r1, #15
 8003970:	f06f 0001 	mvn.w	r0, #1
 8003974:	f002 f850 	bl	8005a18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	58024400 	.word	0x58024400

08003984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b090      	sub	sp, #64	; 0x40
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	d827      	bhi.n	80039e2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 8003992:	2200      	movs	r2, #0
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	201d      	movs	r0, #29
 8003998:	f002 f83e 	bl	8005a18 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800399c:	201d      	movs	r0, #29
 800399e:	f002 f855 	bl	8005a4c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80039a2:	4a29      	ldr	r2, [pc, #164]	; (8003a48 <HAL_InitTick+0xc4>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <HAL_InitTick+0xc8>)
 80039aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ae:	4a27      	ldr	r2, [pc, #156]	; (8003a4c <HAL_InitTick+0xc8>)
 80039b0:	f043 0302 	orr.w	r3, r3, #2
 80039b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039b8:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <HAL_InitTick+0xc8>)
 80039ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039c6:	f107 0210 	add.w	r2, r7, #16
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 ff6d 	bl	80078b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <HAL_InitTick+0x6a>
 80039e0:	e001      	b.n	80039e6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e02b      	b.n	8003a3e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80039e6:	f003 ff37 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 80039ea:	63f8      	str	r0, [r7, #60]	; 0x3c
 80039ec:	e004      	b.n	80039f8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80039ee:	f003 ff33 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 80039f2:	4603      	mov	r3, r0
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fa:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <HAL_InitTick+0xcc>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	0c9b      	lsrs	r3, r3, #18
 8003a02:	3b01      	subs	r3, #1
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003a06:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <HAL_InitTick+0xd0>)
 8003a08:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <HAL_InitTick+0xd4>)
 8003a0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <HAL_InitTick+0xd0>)
 8003a0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a12:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <HAL_InitTick+0xd0>)
 8003a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a18:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <HAL_InitTick+0xd0>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <HAL_InitTick+0xd0>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8003a26:	480b      	ldr	r0, [pc, #44]	; (8003a54 <HAL_InitTick+0xd0>)
 8003a28:	f006 feeb 	bl	800a802 <HAL_TIM_Base_Init>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8003a32:	4808      	ldr	r0, [pc, #32]	; (8003a54 <HAL_InitTick+0xd0>)
 8003a34:	f006 ff46 	bl	800a8c4 <HAL_TIM_Base_Start_IT>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	e000      	b.n	8003a3e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3740      	adds	r7, #64	; 0x40
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	2000015c 	.word	0x2000015c
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	431bde83 	.word	0x431bde83
 8003a54:	200004b4 	.word	0x200004b4
 8003a58:	40000400 	.word	0x40000400

08003a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <NMI_Handler+0x4>

08003a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a66:	e7fe      	b.n	8003a66 <HardFault_Handler+0x4>

08003a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a6c:	e7fe      	b.n	8003a6c <MemManage_Handler+0x4>

08003a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a72:	e7fe      	b.n	8003a72 <BusFault_Handler+0x4>

08003a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a78:	e7fe      	b.n	8003a78 <UsageFault_Handler+0x4>

08003a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <TIM3_IRQHandler+0x10>)
 8003a8e:	f007 f9d9 	bl	800ae44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	200004b4 	.word	0x200004b4

08003a9c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <LTDC_IRQHandler+0x10>)
 8003aa2:	f002 fc77 	bl	8006394 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	2000037c 	.word	0x2000037c

08003ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ab4:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <SystemInit+0xe4>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	4a36      	ldr	r2, [pc, #216]	; (8003b94 <SystemInit+0xe4>)
 8003abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ac4:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <SystemInit+0xe8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	2b06      	cmp	r3, #6
 8003ace:	d807      	bhi.n	8003ae0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <SystemInit+0xe8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f023 030f 	bic.w	r3, r3, #15
 8003ad8:	4a2f      	ldr	r2, [pc, #188]	; (8003b98 <SystemInit+0xe8>)
 8003ada:	f043 0307 	orr.w	r3, r3, #7
 8003ade:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <SystemInit+0xec>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a2d      	ldr	r2, [pc, #180]	; (8003b9c <SystemInit+0xec>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <SystemInit+0xec>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003af2:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <SystemInit+0xec>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4929      	ldr	r1, [pc, #164]	; (8003b9c <SystemInit+0xec>)
 8003af8:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <SystemInit+0xf0>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003afe:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <SystemInit+0xe8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b0a:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <SystemInit+0xe8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 030f 	bic.w	r3, r3, #15
 8003b12:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <SystemInit+0xe8>)
 8003b14:	f043 0307 	orr.w	r3, r3, #7
 8003b18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b1a:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <SystemInit+0xec>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b20:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <SystemInit+0xec>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <SystemInit+0xec>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <SystemInit+0xec>)
 8003b2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <SystemInit+0xf4>)
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b32:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <SystemInit+0xec>)
 8003b34:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <SystemInit+0xf8>)
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b38:	4b18      	ldr	r3, [pc, #96]	; (8003b9c <SystemInit+0xec>)
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <SystemInit+0xfc>)
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b3e:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <SystemInit+0xec>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b44:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <SystemInit+0xec>)
 8003b46:	4a19      	ldr	r2, [pc, #100]	; (8003bac <SystemInit+0xfc>)
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <SystemInit+0xec>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b50:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <SystemInit+0xec>)
 8003b52:	4a16      	ldr	r2, [pc, #88]	; (8003bac <SystemInit+0xfc>)
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <SystemInit+0xec>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <SystemInit+0xec>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <SystemInit+0xec>)
 8003b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <SystemInit+0xec>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <SystemInit+0x100>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <SystemInit+0x104>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7a:	d202      	bcs.n	8003b82 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <SystemInit+0x108>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b82:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <SystemInit+0x10c>)
 8003b84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b88:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000ed00 	.word	0xe000ed00
 8003b98:	52002000 	.word	0x52002000
 8003b9c:	58024400 	.word	0x58024400
 8003ba0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ba4:	02020200 	.word	0x02020200
 8003ba8:	01ff0000 	.word	0x01ff0000
 8003bac:	01010280 	.word	0x01010280
 8003bb0:	5c001000 	.word	0x5c001000
 8003bb4:	ffff0000 	.word	0xffff0000
 8003bb8:	51008108 	.word	0x51008108
 8003bbc:	52004000 	.word	0x52004000

08003bc0 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim2);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_TIM_PWM_MspInit+0x3c>)
 8003bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bd8:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <HAL_TIM_PWM_MspInit+0x3c>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_TIM_PWM_MspInit+0x3c>)
 8003be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	58024400 	.word	0x58024400

08003c00 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c06:	4a23      	ldr	r2, [pc, #140]	; (8003c94 <MX_UART5_Init+0x94>)
 8003c08:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003c0a:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c10:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003c12:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c26:	220c      	movs	r2, #12
 8003c28:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c30:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003c48:	4811      	ldr	r0, [pc, #68]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c4a:	f007 ff99 	bl	800bb80 <HAL_UART_Init>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003c54:	f7ff fce8 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c58:	2100      	movs	r1, #0
 8003c5a:	480d      	ldr	r0, [pc, #52]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c5c:	f008 ff36 	bl	800cacc <HAL_UARTEx_SetTxFifoThreshold>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003c66:	f7ff fcdf 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4808      	ldr	r0, [pc, #32]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c6e:	f008 ff6b 	bl	800cb48 <HAL_UARTEx_SetRxFifoThreshold>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003c78:	f7ff fcd6 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003c7c:	4804      	ldr	r0, [pc, #16]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c7e:	f008 feec 	bl	800ca5a <HAL_UARTEx_DisableFifoMode>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003c88:	f7ff fcce 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000500 	.word	0x20000500
 8003c94:	40005000 	.word	0x40005000

08003c98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b0ba      	sub	sp, #232	; 0xe8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cb0:	f107 0318 	add.w	r3, r7, #24
 8003cb4:	22bc      	movs	r2, #188	; 0xbc
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f00b fda1 	bl	800f800 <memset>
  if(uartHandle->Instance==UART5)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a37      	ldr	r2, [pc, #220]	; (8003da0 <HAL_UART_MspInit+0x108>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d166      	bne.n	8003d96 <HAL_UART_MspInit+0xfe>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cd2:	f107 0318 	add.w	r3, r7, #24
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f003 fe2c 	bl	8007934 <HAL_RCCEx_PeriphCLKConfig>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003ce2:	f7ff fca1 	bl	8003628 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003ce6:	4b2f      	ldr	r3, [pc, #188]	; (8003da4 <HAL_UART_MspInit+0x10c>)
 8003ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cec:	4a2d      	ldr	r2, [pc, #180]	; (8003da4 <HAL_UART_MspInit+0x10c>)
 8003cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cf6:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <HAL_UART_MspInit+0x10c>)
 8003cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d04:	4b27      	ldr	r3, [pc, #156]	; (8003da4 <HAL_UART_MspInit+0x10c>)
 8003d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d0a:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <HAL_UART_MspInit+0x10c>)
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d14:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <HAL_UART_MspInit+0x10c>)
 8003d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_UART_MspInit+0x10c>)
 8003d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d28:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <HAL_UART_MspInit+0x10c>)
 8003d2a:	f043 0308 	orr.w	r3, r3, #8
 8003d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d32:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <HAL_UART_MspInit+0x10c>)
 8003d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4810      	ldr	r0, [pc, #64]	; (8003da8 <HAL_UART_MspInit+0x110>)
 8003d68:	f002 f87a 	bl	8005e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d72:	2302      	movs	r3, #2
 8003d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d84:	2308      	movs	r3, #8
 8003d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4806      	ldr	r0, [pc, #24]	; (8003dac <HAL_UART_MspInit+0x114>)
 8003d92:	f002 f865 	bl	8005e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8003d96:	bf00      	nop
 8003d98:	37e8      	adds	r7, #232	; 0xe8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40005000 	.word	0x40005000
 8003da4:	58024400 	.word	0x58024400
 8003da8:	58020800 	.word	0x58020800
 8003dac:	58020c00 	.word	0x58020c00

08003db0 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fb11 	bl	80043e0 <HAL_Delay>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003dca:	b672      	cpsid	i
}
 8003dcc:	bf00      	nop
  __disable_irq();
}
 8003dce:	bf00      	nop
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8003ddc:	b662      	cpsie	i
}
 8003dde:	bf00      	nop
  __enable_irq();
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d16a      	bne.n	8003ed2 <L6474_Board_GpioInit+0xe6>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 8003dfc:	4b53      	ldr	r3, [pc, #332]	; (8003f4c <L6474_Board_GpioInit+0x160>)
 8003dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e02:	4a52      	ldr	r2, [pc, #328]	; (8003f4c <L6474_Board_GpioInit+0x160>)
 8003e04:	f043 0304 	orr.w	r3, r3, #4
 8003e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e0c:	4b4f      	ldr	r3, [pc, #316]	; (8003f4c <L6474_Board_GpioInit+0x160>)
 8003e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 8003e1a:	4b4c      	ldr	r3, [pc, #304]	; (8003f4c <L6474_Board_GpioInit+0x160>)
 8003e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e20:	4a4a      	ldr	r2, [pc, #296]	; (8003f4c <L6474_Board_GpioInit+0x160>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e2a:	4b48      	ldr	r3, [pc, #288]	; (8003f4c <L6474_Board_GpioInit+0x160>)
 8003e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 8003e38:	4b44      	ldr	r3, [pc, #272]	; (8003f4c <L6474_Board_GpioInit+0x160>)
 8003e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e3e:	4a43      	ldr	r2, [pc, #268]	; (8003f4c <L6474_Board_GpioInit+0x160>)
 8003e40:	f043 0302 	orr.w	r3, r3, #2
 8003e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e48:	4b40      	ldr	r3, [pc, #256]	; (8003f4c <L6474_Board_GpioInit+0x160>)
 8003e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8003e56:	2310      	movs	r3, #16
 8003e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e60:	2301      	movs	r3, #1
 8003e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003e64:	2301      	movs	r3, #1
 8003e66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4838      	ldr	r0, [pc, #224]	; (8003f50 <L6474_Board_GpioInit+0x164>)
 8003e70:	f001 fff6 	bl	8005e60 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 8003e74:	2200      	movs	r2, #0
 8003e76:	2105      	movs	r1, #5
 8003e78:	2028      	movs	r0, #40	; 0x28
 8003e7a:	f001 fdcd 	bl	8005a18 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 8003e7e:	2028      	movs	r0, #40	; 0x28
 8003e80:	f001 fde4 	bl	8005a4c <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8003e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003e92:	2301      	movs	r3, #1
 8003e94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8003e96:	f107 0314 	add.w	r3, r7, #20
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	482d      	ldr	r0, [pc, #180]	; (8003f54 <L6474_Board_GpioInit+0x168>)
 8003e9e:	f001 ffdf 	bl	8005e60 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ea8:	482a      	ldr	r0, [pc, #168]	; (8003f54 <L6474_Board_GpioInit+0x168>)
 8003eaa:	f002 f989 	bl	80061c0 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 8003eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 8003ec0:	f107 0314 	add.w	r3, r7, #20
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4824      	ldr	r0, [pc, #144]	; (8003f58 <L6474_Board_GpioInit+0x16c>)
 8003ec8:	f001 ffca 	bl	8005e60 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 8003ecc:	2000      	movs	r0, #0
 8003ece:	f000 f949 	bl	8004164 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d025      	beq.n	8003f24 <L6474_Board_GpioInit+0x138>
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	dc32      	bgt.n	8003f42 <L6474_Board_GpioInit+0x156>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <L6474_Board_GpioInit+0xfa>
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d010      	beq.n	8003f06 <L6474_Board_GpioInit+0x11a>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 8003ee4:	e02d      	b.n	8003f42 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 8003ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eea:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eec:	2301      	movs	r3, #1
 8003eee:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 8003ef8:	f107 0314 	add.w	r3, r7, #20
 8003efc:	4619      	mov	r1, r3
 8003efe:	4816      	ldr	r0, [pc, #88]	; (8003f58 <L6474_Board_GpioInit+0x16c>)
 8003f00:	f001 ffae 	bl	8005e60 <HAL_GPIO_Init>
      break;
 8003f04:	e01d      	b.n	8003f42 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8003f06:	2320      	movs	r3, #32
 8003f08:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003f12:	2301      	movs	r3, #1
 8003f14:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 8003f16:	f107 0314 	add.w	r3, r7, #20
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	480d      	ldr	r0, [pc, #52]	; (8003f54 <L6474_Board_GpioInit+0x168>)
 8003f1e:	f001 ff9f 	bl	8005e60 <HAL_GPIO_Init>
      break;
 8003f22:	e00e      	b.n	8003f42 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 8003f24:	2310      	movs	r3, #16
 8003f26:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003f30:	2301      	movs	r3, #1
 8003f32:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4806      	ldr	r0, [pc, #24]	; (8003f54 <L6474_Board_GpioInit+0x168>)
 8003f3c:	f001 ff90 	bl	8005e60 <HAL_GPIO_Init>
        break;
 8003f40:	bf00      	nop
}
 8003f42:	bf00      	nop
 8003f44:	3728      	adds	r7, #40	; 0x28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	58024400 	.word	0x58024400
 8003f50:	58021c00 	.word	0x58021c00
 8003f54:	58020400 	.word	0x58020400
 8003f58:	58022000 	.word	0x58022000

08003f5c <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003f66:	f003 facd 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 8003f6a:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	029b      	lsls	r3, r3, #10
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <L6474_Board_Pwm1SetFreq+0x48>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <L6474_Board_Pwm1SetFreq+0x48>)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <L6474_Board_Pwm1SetFreq+0x48>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	0852      	lsrs	r2, r2, #1
 8003f90:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 8003f92:	2100      	movs	r1, #0
 8003f94:	4803      	ldr	r0, [pc, #12]	; (8003fa4 <L6474_Board_Pwm1SetFreq+0x48>)
 8003f96:	f006 fdfb 	bl	800ab90 <HAL_TIM_PWM_Start_IT>
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000618 	.word	0x20000618

08003fa8 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003fb2:	f003 faa7 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 8003fb6:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	029b      	lsls	r3, r3, #10
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <L6474_Board_Pwm2SetFreq+0x48>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fce:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <L6474_Board_Pwm2SetFreq+0x48>)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <L6474_Board_Pwm2SetFreq+0x48>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	0852      	lsrs	r2, r2, #1
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8003fde:	2104      	movs	r1, #4
 8003fe0:	4803      	ldr	r0, [pc, #12]	; (8003ff0 <L6474_Board_Pwm2SetFreq+0x48>)
 8003fe2:	f006 fdd5 	bl	800ab90 <HAL_TIM_PWM_Start_IT>
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000664 	.word	0x20000664

08003ff4 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003ffe:	f003 fa81 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 8004002:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	02db      	lsls	r3, r3, #11
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	fbb2 f3f3 	udiv	r3, r2, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 8004012:	4b0a      	ldr	r3, [pc, #40]	; (800403c <L6474_Board_Pwm3SetFreq+0x48>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	62da      	str	r2, [r3, #44]	; 0x2c
 800401a:	4a08      	ldr	r2, [pc, #32]	; (800403c <L6474_Board_Pwm3SetFreq+0x48>)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <L6474_Board_Pwm3SetFreq+0x48>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	0852      	lsrs	r2, r2, #1
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 800402a:	2108      	movs	r1, #8
 800402c:	4803      	ldr	r0, [pc, #12]	; (800403c <L6474_Board_Pwm3SetFreq+0x48>)
 800402e:	f006 fdaf 	bl	800ab90 <HAL_TIM_PWM_Start_IT>
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	200006b0 	.word	0x200006b0

08004040 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08e      	sub	sp, #56	; 0x38
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d00a      	beq.n	8004066 <L6474_Board_PwmInit+0x26>
 8004050:	2b02      	cmp	r3, #2
 8004052:	d011      	beq.n	8004078 <L6474_Board_PwmInit+0x38>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 8004054:	4b21      	ldr	r3, [pc, #132]	; (80040dc <L6474_Board_PwmInit+0x9c>)
 8004056:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 8004058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800405e:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 8004060:	2300      	movs	r3, #0
 8004062:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8004064:	e010      	b.n	8004088 <L6474_Board_PwmInit+0x48>
    case  1:
      pHTim = &hTimPwm2;
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <L6474_Board_PwmInit+0xa0>)
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004070:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 8004072:	2304      	movs	r3, #4
 8004074:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004076:	e007      	b.n	8004088 <L6474_Board_PwmInit+0x48>


    case 2:
      pHTim = &hTimPwm3;
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <L6474_Board_PwmInit+0xa4>)
 800407a:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 800407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407e:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <L6474_Board_PwmInit+0xa8>)
 8004080:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 8004082:	2308      	movs	r3, #8
 8004084:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004086:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8004088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800408e:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 8004090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004092:	2200      	movs	r2, #0
 8004094:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004098:	2200      	movs	r2, #0
 800409a:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 800409c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800409e:	f006 fc89 	bl	800a9b4 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040a2:	2360      	movs	r3, #96	; 0x60
 80040a4:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 80040b2:	f107 0314 	add.w	r3, r7, #20
 80040b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b8:	4619      	mov	r1, r3
 80040ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040bc:	f006 ffe2 	bl	800b084 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 80040c8:	f107 0308 	add.w	r3, r7, #8
 80040cc:	4619      	mov	r1, r3
 80040ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040d0:	f007 fcaa 	bl	800ba28 <HAL_TIMEx_MasterConfigSynchronization>
}
 80040d4:	bf00      	nop
 80040d6:	3738      	adds	r7, #56	; 0x38
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000618 	.word	0x20000618
 80040e0:	20000664 	.word	0x20000664
 80040e4:	200006b0 	.word	0x200006b0
 80040e8:	40000800 	.word	0x40000800

080040ec <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d010      	beq.n	800411e <L6474_Board_PwmStop+0x32>
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	dc13      	bgt.n	8004128 <L6474_Board_PwmStop+0x3c>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <L6474_Board_PwmStop+0x1e>
 8004104:	2b01      	cmp	r3, #1
 8004106:	d005      	beq.n	8004114 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8004108:	e00e      	b.n	8004128 <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 800410a:	2100      	movs	r1, #0
 800410c:	4809      	ldr	r0, [pc, #36]	; (8004134 <L6474_Board_PwmStop+0x48>)
 800410e:	f006 fca9 	bl	800aa64 <HAL_TIM_PWM_Stop>
      break;
 8004112:	e00a      	b.n	800412a <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8004114:	2104      	movs	r1, #4
 8004116:	4808      	ldr	r0, [pc, #32]	; (8004138 <L6474_Board_PwmStop+0x4c>)
 8004118:	f006 fca4 	bl	800aa64 <HAL_TIM_PWM_Stop>
      break;
 800411c:	e005      	b.n	800412a <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 800411e:	2108      	movs	r1, #8
 8004120:	4806      	ldr	r0, [pc, #24]	; (800413c <L6474_Board_PwmStop+0x50>)
 8004122:	f006 fc9f 	bl	800aa64 <HAL_TIM_PWM_Stop>
      break;
 8004126:	e000      	b.n	800412a <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 8004128:	bf00      	nop
  }
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000618 	.word	0x20000618
 8004138:	20000664 	.word	0x20000664
 800413c:	200006b0 	.word	0x200006b0

08004140 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 800414a:	2201      	movs	r2, #1
 800414c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004150:	4803      	ldr	r0, [pc, #12]	; (8004160 <L6474_Board_ReleaseReset+0x20>)
 8004152:	f002 f835 	bl	80061c0 <HAL_GPIO_WritePin>
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	58022000 	.word	0x58022000

08004164 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 800416e:	2200      	movs	r2, #0
 8004170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004174:	4803      	ldr	r0, [pc, #12]	; (8004184 <L6474_Board_Reset+0x20>)
 8004176:	f002 f823 	bl	80061c0 <HAL_GPIO_WritePin>
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	58022000 	.word	0x58022000

08004188 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	460a      	mov	r2, r1
 8004192:	71fb      	strb	r3, [r7, #7]
 8004194:	4613      	mov	r3, r2
 8004196:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d006      	beq.n	80041ac <L6474_Board_SetDirectionGpio+0x24>
 800419e:	2b02      	cmp	r3, #2
 80041a0:	dc1a      	bgt.n	80041d8 <L6474_Board_SetDirectionGpio+0x50>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d010      	beq.n	80041c8 <L6474_Board_SetDirectionGpio+0x40>
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d007      	beq.n	80041ba <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 80041aa:	e015      	b.n	80041d8 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 80041ac:	79bb      	ldrb	r3, [r7, #6]
 80041ae:	461a      	mov	r2, r3
 80041b0:	2110      	movs	r1, #16
 80041b2:	480b      	ldr	r0, [pc, #44]	; (80041e0 <L6474_Board_SetDirectionGpio+0x58>)
 80041b4:	f002 f804 	bl	80061c0 <HAL_GPIO_WritePin>
      break;
 80041b8:	e00e      	b.n	80041d8 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 80041ba:	79bb      	ldrb	r3, [r7, #6]
 80041bc:	461a      	mov	r2, r3
 80041be:	2120      	movs	r1, #32
 80041c0:	4807      	ldr	r0, [pc, #28]	; (80041e0 <L6474_Board_SetDirectionGpio+0x58>)
 80041c2:	f001 fffd 	bl	80061c0 <HAL_GPIO_WritePin>
      break;
 80041c6:	e007      	b.n	80041d8 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 80041c8:	79bb      	ldrb	r3, [r7, #6]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041d0:	4804      	ldr	r0, [pc, #16]	; (80041e4 <L6474_Board_SetDirectionGpio+0x5c>)
 80041d2:	f001 fff5 	bl	80061c0 <HAL_GPIO_WritePin>
      break;
 80041d6:	bf00      	nop
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	58020400 	.word	0x58020400
 80041e4:	58022000 	.word	0x58022000

080041e8 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 80041ee:	4b19      	ldr	r3, [pc, #100]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 80041f0:	4a19      	ldr	r2, [pc, #100]	; (8004258 <L6474_Board_SpiInit+0x70>)
 80041f2:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 80041f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041fa:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80041fc:	4b15      	ldr	r3, [pc, #84]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 80041fe:	2200      	movs	r2, #0
 8004200:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 8004204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004208:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 800420c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004210:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 8004214:	2200      	movs	r2, #0
 8004216:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 800421a:	2207      	movs	r2, #7
 800421c:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 8004220:	2207      	movs	r2, #7
 8004222:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8004224:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 8004226:	2200      	movs	r2, #0
 8004228:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 800422c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004230:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 8004234:	2200      	movs	r2, #0
 8004236:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 800423a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800423e:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8004240:	4804      	ldr	r0, [pc, #16]	; (8004254 <L6474_Board_SpiInit+0x6c>)
 8004242:	f005 fe03 	bl	8009e4c <HAL_SPI_Init>
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 800424a:	79fb      	ldrb	r3, [r7, #7]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000590 	.word	0x20000590
 8004258:	40003800 	.word	0x40003800

0800425c <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	4613      	mov	r3, r2
 8004268:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 800426a:	2200      	movs	r2, #0
 800426c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004270:	4816      	ldr	r0, [pc, #88]	; (80042cc <L6474_Board_SpiWriteBytes+0x70>)
 8004272:	f001 ffa5 	bl	80061c0 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e016      	b.n	80042aa <L6474_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 800427c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2301      	movs	r3, #1
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	4811      	ldr	r0, [pc, #68]	; (80042d0 <L6474_Board_SpiWriteBytes+0x74>)
 800428a:	f005 fee5 	bl	800a058 <HAL_SPI_TransmitReceive>
 800428e:	4603      	mov	r3, r0
 8004290:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8004292:	7dfb      	ldrb	r3, [r7, #23]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10d      	bne.n	80042b4 <L6474_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	3301      	adds	r3, #1
 80042a2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	3301      	adds	r3, #1
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d3e4      	bcc.n	800427c <L6474_Board_SpiWriteBytes+0x20>
 80042b2:	e000      	b.n	80042b6 <L6474_Board_SpiWriteBytes+0x5a>
      break;
 80042b4:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80042b6:	2201      	movs	r2, #1
 80042b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042bc:	4803      	ldr	r0, [pc, #12]	; (80042cc <L6474_Board_SpiWriteBytes+0x70>)
 80042be:	f001 ff7f 	bl	80061c0 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 80042c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	58020400 	.word	0x58020400
 80042d0:	20000590 	.word	0x20000590

080042d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80042d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800430c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80042d8:	f7ff fbea 	bl	8003ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042dc:	480c      	ldr	r0, [pc, #48]	; (8004310 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042de:	490d      	ldr	r1, [pc, #52]	; (8004314 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042e0:	4a0d      	ldr	r2, [pc, #52]	; (8004318 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042e4:	e002      	b.n	80042ec <LoopCopyDataInit>

080042e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ea:	3304      	adds	r3, #4

080042ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042f0:	d3f9      	bcc.n	80042e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042f4:	4c0a      	ldr	r4, [pc, #40]	; (8004320 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042f8:	e001      	b.n	80042fe <LoopFillZerobss>

080042fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042fc:	3204      	adds	r2, #4

080042fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004300:	d3fb      	bcc.n	80042fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004302:	f00b fa4b 	bl	800f79c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004306:	f7ff f8b1 	bl	800346c <main>
  bx  lr
 800430a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800430c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004314:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8004318:	0800f96c 	.word	0x0800f96c
  ldr r2, =_sbss
 800431c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8004320:	20005050 	.word	0x20005050

08004324 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004324:	e7fe      	b.n	8004324 <ADC3_IRQHandler>
	...

08004328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800432e:	2003      	movs	r0, #3
 8004330:	f001 fb67 	bl	8005a02 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004334:	f003 f8e6 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <HAL_Init+0x68>)
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	0a1b      	lsrs	r3, r3, #8
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	4913      	ldr	r1, [pc, #76]	; (8004394 <HAL_Init+0x6c>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
 8004350:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004352:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <HAL_Init+0x68>)
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	4a0e      	ldr	r2, [pc, #56]	; (8004394 <HAL_Init+0x6c>)
 800435c:	5cd3      	ldrb	r3, [r2, r3]
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
 8004368:	4a0b      	ldr	r2, [pc, #44]	; (8004398 <HAL_Init+0x70>)
 800436a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800436c:	4a0b      	ldr	r2, [pc, #44]	; (800439c <HAL_Init+0x74>)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004372:	2000      	movs	r0, #0
 8004374:	f7ff fb06 	bl	8003984 <HAL_InitTick>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e002      	b.n	8004388 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004382:	f7ff fae1 	bl	8003948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	58024400 	.word	0x58024400
 8004394:	0800f924 	.word	0x0800f924
 8004398:	20000158 	.word	0x20000158
 800439c:	20000154 	.word	0x20000154

080043a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_IncTick+0x20>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_IncTick+0x24>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <HAL_IncTick+0x24>)
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000160 	.word	0x20000160
 80043c4:	200006fc 	.word	0x200006fc

080043c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return uwTick;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_GetTick+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	200006fc 	.word	0x200006fc

080043e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7ff ffee 	bl	80043c8 <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d005      	beq.n	8004406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043fa:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <HAL_Delay+0x44>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004406:	bf00      	nop
 8004408:	f7ff ffde 	bl	80043c8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	429a      	cmp	r2, r3
 8004416:	d8f7      	bhi.n	8004408 <HAL_Delay+0x28>
  {
  }
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000160 	.word	0x20000160

08004428 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_GetREVID+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0c1b      	lsrs	r3, r3, #16
}
 8004432:	4618      	mov	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	5c001000 	.word	0x5c001000

08004440 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	609a      	str	r2, [r3, #8]
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	609a      	str	r2, [r3, #8]
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3360      	adds	r3, #96	; 0x60
 80044ba:	461a      	mov	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	431a      	orrs	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	fa01 f303 	lsl.w	r3, r1, r3
 8004508:	431a      	orrs	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	611a      	str	r2, [r3, #16]
}
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800451a:	b480      	push	{r7}
 800451c:	b087      	sub	sp, #28
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3360      	adds	r3, #96	; 0x60
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	431a      	orrs	r2, r3
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	601a      	str	r2, [r3, #0]
  }
}
 8004544:	bf00      	nop
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004576:	b480      	push	{r7}
 8004578:	b087      	sub	sp, #28
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3330      	adds	r3, #48	; 0x30
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	4413      	add	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	211f      	movs	r1, #31
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	401a      	ands	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0e9b      	lsrs	r3, r3, #26
 80045ae:	f003 011f 	and.w	r1, r3, #31
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	431a      	orrs	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b087      	sub	sp, #28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3314      	adds	r3, #20
 80045de:	461a      	mov	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	0e5b      	lsrs	r3, r3, #25
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	4413      	add	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	0d1b      	lsrs	r3, r3, #20
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2107      	movs	r1, #7
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	401a      	ands	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	0d1b      	lsrs	r3, r3, #20
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	431a      	orrs	r2, r3
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004618:	bf00      	nop
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800463c:	43db      	mvns	r3, r3
 800463e:	401a      	ands	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f003 0318 	and.w	r3, r3, #24
 8004646:	4908      	ldr	r1, [pc, #32]	; (8004668 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004648:	40d9      	lsrs	r1, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	400b      	ands	r3, r1
 800464e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004652:	431a      	orrs	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	000fffff 	.word	0x000fffff

0800466c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 031f 	and.w	r3, r3, #31
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6093      	str	r3, [r2, #8]
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	5fffffc0 	.word	0x5fffffc0

080046c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046dc:	d101      	bne.n	80046e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <LL_ADC_EnableInternalRegulator+0x24>)
 80046fe:	4013      	ands	r3, r2
 8004700:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	6fffffc0 	.word	0x6fffffc0

08004718 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800472c:	d101      	bne.n	8004732 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <LL_ADC_Enable+0x24>)
 800474e:	4013      	ands	r3, r2
 8004750:	f043 0201 	orr.w	r2, r3, #1
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	7fffffc0 	.word	0x7fffffc0

08004768 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <LL_ADC_IsEnabled+0x18>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <LL_ADC_IsEnabled+0x1a>
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <LL_ADC_REG_StartConversion+0x24>)
 800479e:	4013      	ands	r3, r2
 80047a0:	f043 0204 	orr.w	r2, r3, #4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	7fffffc0 	.word	0x7fffffc0

080047b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d101      	bne.n	80047d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d101      	bne.n	80047f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e18f      	b.n	8004b3e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fb ff3f 	bl	80006b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff ff3f 	bl	80046c8 <LL_ADC_IsDeepPowerDownEnabled>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff ff25 	bl	80046a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff ff5a 	bl	8004718 <LL_ADC_IsInternalRegulatorEnabled>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d114      	bne.n	8004894 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ff3e 	bl	80046f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004874:	4b87      	ldr	r3, [pc, #540]	; (8004a94 <HAL_ADC_Init+0x290>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	099b      	lsrs	r3, r3, #6
 800487a:	4a87      	ldr	r2, [pc, #540]	; (8004a98 <HAL_ADC_Init+0x294>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	099b      	lsrs	r3, r3, #6
 8004882:	3301      	adds	r3, #1
 8004884:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004886:	e002      	b.n	800488e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	3b01      	subs	r3, #1
 800488c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f9      	bne.n	8004888 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff ff3d 	bl	8004718 <LL_ADC_IsInternalRegulatorEnabled>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10d      	bne.n	80048c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a8:	f043 0210 	orr.w	r2, r3, #16
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	f043 0201 	orr.w	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff ff77 	bl	80047b8 <LL_ADC_REG_IsConversionOngoing>
 80048ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 8129 	bne.w	8004b2c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f040 8125 	bne.w	8004b2c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048ea:	f043 0202 	orr.w	r2, r3, #2
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff ff36 	bl	8004768 <LL_ADC_IsEnabled>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d136      	bne.n	8004970 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a65      	ldr	r2, [pc, #404]	; (8004a9c <HAL_ADC_Init+0x298>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_ADC_Init+0x112>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a63      	ldr	r2, [pc, #396]	; (8004aa0 <HAL_ADC_Init+0x29c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10e      	bne.n	8004934 <HAL_ADC_Init+0x130>
 8004916:	4861      	ldr	r0, [pc, #388]	; (8004a9c <HAL_ADC_Init+0x298>)
 8004918:	f7ff ff26 	bl	8004768 <LL_ADC_IsEnabled>
 800491c:	4604      	mov	r4, r0
 800491e:	4860      	ldr	r0, [pc, #384]	; (8004aa0 <HAL_ADC_Init+0x29c>)
 8004920:	f7ff ff22 	bl	8004768 <LL_ADC_IsEnabled>
 8004924:	4603      	mov	r3, r0
 8004926:	4323      	orrs	r3, r4
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e008      	b.n	8004946 <HAL_ADC_Init+0x142>
 8004934:	485b      	ldr	r0, [pc, #364]	; (8004aa4 <HAL_ADC_Init+0x2a0>)
 8004936:	f7ff ff17 	bl	8004768 <LL_ADC_IsEnabled>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d012      	beq.n	8004970 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a53      	ldr	r2, [pc, #332]	; (8004a9c <HAL_ADC_Init+0x298>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_ADC_Init+0x15a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a51      	ldr	r2, [pc, #324]	; (8004aa0 <HAL_ADC_Init+0x29c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d101      	bne.n	8004962 <HAL_ADC_Init+0x15e>
 800495e:	4a52      	ldr	r2, [pc, #328]	; (8004aa8 <HAL_ADC_Init+0x2a4>)
 8004960:	e000      	b.n	8004964 <HAL_ADC_Init+0x160>
 8004962:	4a52      	ldr	r2, [pc, #328]	; (8004aac <HAL_ADC_Init+0x2a8>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4619      	mov	r1, r3
 800496a:	4610      	mov	r0, r2
 800496c:	f7ff fd68 	bl	8004440 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004970:	f7ff fd5a 	bl	8004428 <HAL_GetREVID>
 8004974:	4603      	mov	r3, r0
 8004976:	f241 0203 	movw	r2, #4099	; 0x1003
 800497a:	4293      	cmp	r3, r2
 800497c:	d914      	bls.n	80049a8 <HAL_ADC_Init+0x1a4>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b10      	cmp	r3, #16
 8004984:	d110      	bne.n	80049a8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	7d5b      	ldrb	r3, [r3, #21]
 800498a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004990:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004996:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7f1b      	ldrb	r3, [r3, #28]
 800499c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800499e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049a0:	f043 030c 	orr.w	r3, r3, #12
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	e00d      	b.n	80049c4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	7d5b      	ldrb	r3, [r3, #21]
 80049ac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049b2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80049b8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	7f1b      	ldrb	r3, [r3, #28]
 80049be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	7f1b      	ldrb	r3, [r3, #28]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d106      	bne.n	80049da <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	045b      	lsls	r3, r3, #17
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	4b2c      	ldr	r3, [pc, #176]	; (8004ab0 <HAL_ADC_Init+0x2ac>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	69b9      	ldr	r1, [r7, #24]
 8004a06:	430b      	orrs	r3, r1
 8004a08:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fed2 	bl	80047b8 <LL_ADC_REG_IsConversionOngoing>
 8004a14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fedf 	bl	80047de <LL_ADC_INJ_IsConversionOngoing>
 8004a20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d15f      	bne.n	8004ae8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d15c      	bne.n	8004ae8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	7d1b      	ldrb	r3, [r3, #20]
 8004a32:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <HAL_ADC_Init+0x2b0>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	69b9      	ldr	r1, [r7, #24]
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d130      	bne.n	8004abc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <HAL_ADC_Init+0x2b4>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a6e:	3a01      	subs	r2, #1
 8004a70:	0411      	lsls	r1, r2, #16
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a76:	4311      	orrs	r1, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a7c:	4311      	orrs	r1, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a82:	430a      	orrs	r2, r1
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	611a      	str	r2, [r3, #16]
 8004a90:	e01c      	b.n	8004acc <HAL_ADC_Init+0x2c8>
 8004a92:	bf00      	nop
 8004a94:	20000154 	.word	0x20000154
 8004a98:	053e2d63 	.word	0x053e2d63
 8004a9c:	40022000 	.word	0x40022000
 8004aa0:	40022100 	.word	0x40022100
 8004aa4:	58026000 	.word	0x58026000
 8004aa8:	40022300 	.word	0x40022300
 8004aac:	58026300 	.word	0x58026300
 8004ab0:	fff0c003 	.word	0xfff0c003
 8004ab4:	ffffbffc 	.word	0xffffbffc
 8004ab8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
 8004aca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fdd6 	bl	8005694 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10c      	bne.n	8004b0a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f023 010f 	bic.w	r1, r3, #15
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	1e5a      	subs	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30
 8004b08:	e007      	b.n	8004b1a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 020f 	bic.w	r2, r2, #15
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	f043 0201 	orr.w	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
 8004b2a:	e007      	b.n	8004b3c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b30:	f043 0210 	orr.w	r2, r3, #16
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3724      	adds	r7, #36	; 0x24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd90      	pop	{r4, r7, pc}
 8004b46:	bf00      	nop

08004b48 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a5c      	ldr	r2, [pc, #368]	; (8004cc8 <HAL_ADC_Start+0x180>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_ADC_Start+0x1c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a5b      	ldr	r2, [pc, #364]	; (8004ccc <HAL_ADC_Start+0x184>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d101      	bne.n	8004b68 <HAL_ADC_Start+0x20>
 8004b64:	4b5a      	ldr	r3, [pc, #360]	; (8004cd0 <HAL_ADC_Start+0x188>)
 8004b66:	e000      	b.n	8004b6a <HAL_ADC_Start+0x22>
 8004b68:	4b5a      	ldr	r3, [pc, #360]	; (8004cd4 <HAL_ADC_Start+0x18c>)
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fd7e 	bl	800466c <LL_ADC_GetMultimode>
 8004b70:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff fe1e 	bl	80047b8 <LL_ADC_REG_IsConversionOngoing>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f040 809a 	bne.w	8004cb8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_ADC_Start+0x4a>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e095      	b.n	8004cbe <HAL_ADC_Start+0x176>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fcf0 	bl	8005580 <ADC_Enable>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 8081 	bne.w	8004cae <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bb0:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <HAL_ADC_Start+0x190>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a42      	ldr	r2, [pc, #264]	; (8004ccc <HAL_ADC_Start+0x184>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d002      	beq.n	8004bcc <HAL_ADC_Start+0x84>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	e000      	b.n	8004bce <HAL_ADC_Start+0x86>
 8004bcc:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <HAL_ADC_Start+0x180>)
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d002      	beq.n	8004bdc <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf4:	d106      	bne.n	8004c04 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	f023 0206 	bic.w	r2, r3, #6
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	659a      	str	r2, [r3, #88]	; 0x58
 8004c02:	e002      	b.n	8004c0a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	221c      	movs	r2, #28
 8004c10:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2b      	ldr	r2, [pc, #172]	; (8004ccc <HAL_ADC_Start+0x184>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d002      	beq.n	8004c2a <HAL_ADC_Start+0xe2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	e000      	b.n	8004c2c <HAL_ADC_Start+0xe4>
 8004c2a:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <HAL_ADC_Start+0x180>)
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d008      	beq.n	8004c46 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b05      	cmp	r3, #5
 8004c3e:	d002      	beq.n	8004c46 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b09      	cmp	r3, #9
 8004c44:	d114      	bne.n	8004c70 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fd91 	bl	8004790 <LL_ADC_REG_StartConversion>
 8004c6e:	e025      	b.n	8004cbc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c74:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <HAL_ADC_Start+0x184>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d002      	beq.n	8004c8c <HAL_ADC_Start+0x144>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	e000      	b.n	8004c8e <HAL_ADC_Start+0x146>
 8004c8c:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <HAL_ADC_Start+0x180>)
 8004c8e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00f      	beq.n	8004cbc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ca4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
 8004cac:	e006      	b.n	8004cbc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004cb6:	e001      	b.n	8004cbc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40022000 	.word	0x40022000
 8004ccc:	40022100 	.word	0x40022100
 8004cd0:	40022300 	.word	0x40022300
 8004cd4:	58026300 	.word	0x58026300
 8004cd8:	fffff0fe 	.word	0xfffff0fe

08004cdc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a72      	ldr	r2, [pc, #456]	; (8004eb4 <HAL_ADC_PollForConversion+0x1d8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_ADC_PollForConversion+0x1e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a70      	ldr	r2, [pc, #448]	; (8004eb8 <HAL_ADC_PollForConversion+0x1dc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_ADC_PollForConversion+0x22>
 8004cfa:	4b70      	ldr	r3, [pc, #448]	; (8004ebc <HAL_ADC_PollForConversion+0x1e0>)
 8004cfc:	e000      	b.n	8004d00 <HAL_ADC_PollForConversion+0x24>
 8004cfe:	4b70      	ldr	r3, [pc, #448]	; (8004ec0 <HAL_ADC_PollForConversion+0x1e4>)
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fcb3 	bl	800466c <LL_ADC_GetMultimode>
 8004d06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d102      	bne.n	8004d16 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004d10:	2308      	movs	r3, #8
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	e037      	b.n	8004d86 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b05      	cmp	r3, #5
 8004d20:	d002      	beq.n	8004d28 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b09      	cmp	r3, #9
 8004d26:	d111      	bne.n	8004d4c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d007      	beq.n	8004d46 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	f043 0220 	orr.w	r2, r3, #32
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0b1      	b.n	8004eaa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004d46:	2304      	movs	r3, #4
 8004d48:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004d4a:	e01c      	b.n	8004d86 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a58      	ldr	r2, [pc, #352]	; (8004eb4 <HAL_ADC_PollForConversion+0x1d8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_ADC_PollForConversion+0x84>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a57      	ldr	r2, [pc, #348]	; (8004eb8 <HAL_ADC_PollForConversion+0x1dc>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d101      	bne.n	8004d64 <HAL_ADC_PollForConversion+0x88>
 8004d60:	4b56      	ldr	r3, [pc, #344]	; (8004ebc <HAL_ADC_PollForConversion+0x1e0>)
 8004d62:	e000      	b.n	8004d66 <HAL_ADC_PollForConversion+0x8a>
 8004d64:	4b56      	ldr	r3, [pc, #344]	; (8004ec0 <HAL_ADC_PollForConversion+0x1e4>)
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fc8e 	bl	8004688 <LL_ADC_GetMultiDMATransfer>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	f043 0220 	orr.w	r2, r3, #32
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e093      	b.n	8004eaa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004d82:	2304      	movs	r3, #4
 8004d84:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004d86:	f7ff fb1f 	bl	80043c8 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004d8c:	e021      	b.n	8004dd2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d01d      	beq.n	8004dd2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004d96:	f7ff fb17 	bl	80043c8 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <HAL_ADC_PollForConversion+0xd0>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d112      	bne.n	8004dd2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10b      	bne.n	8004dd2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	f043 0204 	orr.w	r2, r3, #4
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e06b      	b.n	8004eaa <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0d6      	beq.n	8004d8e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fbad 	bl	8004550 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01c      	beq.n	8004e36 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	7d5b      	ldrb	r3, [r3, #21]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d118      	bne.n	8004e36 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d111      	bne.n	8004e36 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	f043 0201 	orr.w	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <HAL_ADC_PollForConversion+0x1dc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d002      	beq.n	8004e46 <HAL_ADC_PollForConversion+0x16a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	e000      	b.n	8004e48 <HAL_ADC_PollForConversion+0x16c>
 8004e46:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <HAL_ADC_PollForConversion+0x1d8>)
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d008      	beq.n	8004e62 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	d002      	beq.n	8004e62 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2b09      	cmp	r3, #9
 8004e60:	d104      	bne.n	8004e6c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e00c      	b.n	8004e86 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a11      	ldr	r2, [pc, #68]	; (8004eb8 <HAL_ADC_PollForConversion+0x1dc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d002      	beq.n	8004e7c <HAL_ADC_PollForConversion+0x1a0>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	e000      	b.n	8004e7e <HAL_ADC_PollForConversion+0x1a2>
 8004e7c:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <HAL_ADC_PollForConversion+0x1d8>)
 8004e7e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d104      	bne.n	8004e96 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2208      	movs	r2, #8
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	e008      	b.n	8004ea8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	220c      	movs	r2, #12
 8004ea6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40022000 	.word	0x40022000
 8004eb8:	40022100 	.word	0x40022100
 8004ebc:	40022300 	.word	0x40022300
 8004ec0:	58026300 	.word	0x58026300

08004ec4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b0a1      	sub	sp, #132	; 0x84
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a9d      	ldr	r2, [pc, #628]	; (8005170 <HAL_ADC_ConfigChannel+0x290>)
 8004efa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x2a>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e321      	b.n	800554e <HAL_ADC_ConfigChannel+0x66e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fc4e 	bl	80047b8 <LL_ADC_REG_IsConversionOngoing>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 8306 	bne.w	8005530 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0x62>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	0e9b      	lsrs	r3, r3, #26
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	e016      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x90>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f4a:	fa93 f3a3 	rbit	r3, r3
 8004f4e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f52:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004f5a:	2320      	movs	r3, #32
 8004f5c:	e003      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f60:	fab3 f383 	clz	r3, r3
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	69d1      	ldr	r1, [r2, #28]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6859      	ldr	r1, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f7ff faf3 	bl	8004576 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fc0f 	bl	80047b8 <LL_ADC_REG_IsConversionOngoing>
 8004f9a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fc1c 	bl	80047de <LL_ADC_INJ_IsConversionOngoing>
 8004fa6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f040 80b3 	bne.w	8005116 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 80af 	bne.w	8005116 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f7ff fb02 	bl	80045ce <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004fca:	4b6a      	ldr	r3, [pc, #424]	; (8005174 <HAL_ADC_ConfigChannel+0x294>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x110>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	089b      	lsrs	r3, r3, #2
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	e01d      	b.n	800502c <HAL_ADC_ConfigChannel+0x14c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <HAL_ADC_ConfigChannel+0x136>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695a      	ldr	r2, [r3, #20]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	089b      	lsrs	r3, r3, #2
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	e00a      	b.n	800502c <HAL_ADC_ConfigChannel+0x14c>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	695a      	ldr	r2, [r3, #20]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b04      	cmp	r3, #4
 8005034:	d027      	beq.n	8005086 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6919      	ldr	r1, [r3, #16]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005044:	f7ff fa30 	bl	80044a8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	6919      	ldr	r1, [r3, #16]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	7e5b      	ldrb	r3, [r3, #25]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d102      	bne.n	800505e <HAL_ADC_ConfigChannel+0x17e>
 8005058:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800505c:	e000      	b.n	8005060 <HAL_ADC_ConfigChannel+0x180>
 800505e:	2300      	movs	r3, #0
 8005060:	461a      	mov	r2, r3
 8005062:	f7ff fa5a 	bl	800451a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6919      	ldr	r1, [r3, #16]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	7e1b      	ldrb	r3, [r3, #24]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d102      	bne.n	800507c <HAL_ADC_ConfigChannel+0x19c>
 8005076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800507a:	e000      	b.n	800507e <HAL_ADC_ConfigChannel+0x19e>
 800507c:	2300      	movs	r3, #0
 800507e:	461a      	mov	r2, r3
 8005080:	f7ff fa32 	bl	80044e8 <LL_ADC_SetDataRightShift>
 8005084:	e047      	b.n	8005116 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	069b      	lsls	r3, r3, #26
 8005096:	429a      	cmp	r2, r3
 8005098:	d107      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050a8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	069b      	lsls	r3, r3, #26
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d107      	bne.n	80050ce <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050cc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	069b      	lsls	r3, r3, #26
 80050de:	429a      	cmp	r2, r3
 80050e0:	d107      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050f0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	069b      	lsls	r3, r3, #26
 8005102:	429a      	cmp	r2, r3
 8005104:	d107      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005114:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff fb24 	bl	8004768 <LL_ADC_IsEnabled>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 820d 	bne.w	8005542 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	461a      	mov	r2, r3
 8005136:	f7ff fa75 	bl	8004624 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	4a0c      	ldr	r2, [pc, #48]	; (8005170 <HAL_ADC_ConfigChannel+0x290>)
 8005140:	4293      	cmp	r3, r2
 8005142:	f040 8133 	bne.w	80053ac <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005152:	2b00      	cmp	r3, #0
 8005154:	d110      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x298>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	0e9b      	lsrs	r3, r3, #26
 800515c:	3301      	adds	r3, #1
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	2b09      	cmp	r3, #9
 8005164:	bf94      	ite	ls
 8005166:	2301      	movls	r3, #1
 8005168:	2300      	movhi	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	e01e      	b.n	80051ac <HAL_ADC_ConfigChannel+0x2cc>
 800516e:	bf00      	nop
 8005170:	47ff0000 	.word	0x47ff0000
 8005174:	5c001000 	.word	0x5c001000
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005180:	fa93 f3a3 	rbit	r3, r3
 8005184:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005188:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800518a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005190:	2320      	movs	r3, #32
 8005192:	e003      	b.n	800519c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005196:	fab3 f383 	clz	r3, r3
 800519a:	b2db      	uxtb	r3, r3
 800519c:	3301      	adds	r3, #1
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	2b09      	cmp	r3, #9
 80051a4:	bf94      	ite	ls
 80051a6:	2301      	movls	r3, #1
 80051a8:	2300      	movhi	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d079      	beq.n	80052a4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d107      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x2ec>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	0e9b      	lsrs	r3, r3, #26
 80051c2:	3301      	adds	r3, #1
 80051c4:	069b      	lsls	r3, r3, #26
 80051c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051ca:	e015      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x318>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d4:	fa93 f3a3 	rbit	r3, r3
 80051d8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80051da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80051de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80051e4:	2320      	movs	r3, #32
 80051e6:	e003      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80051e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ea:	fab3 f383 	clz	r3, r3
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	3301      	adds	r3, #1
 80051f2:	069b      	lsls	r3, r3, #26
 80051f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005200:	2b00      	cmp	r3, #0
 8005202:	d109      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x338>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	0e9b      	lsrs	r3, r3, #26
 800520a:	3301      	adds	r3, #1
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	2101      	movs	r1, #1
 8005212:	fa01 f303 	lsl.w	r3, r1, r3
 8005216:	e017      	b.n	8005248 <HAL_ADC_ConfigChannel+0x368>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005220:	fa93 f3a3 	rbit	r3, r3
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005228:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800522a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005230:	2320      	movs	r3, #32
 8005232:	e003      	b.n	800523c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005236:	fab3 f383 	clz	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	3301      	adds	r3, #1
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2101      	movs	r1, #1
 8005244:	fa01 f303 	lsl.w	r3, r1, r3
 8005248:	ea42 0103 	orr.w	r1, r2, r3
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <HAL_ADC_ConfigChannel+0x38e>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	0e9b      	lsrs	r3, r3, #26
 800525e:	3301      	adds	r3, #1
 8005260:	f003 021f 	and.w	r2, r3, #31
 8005264:	4613      	mov	r3, r2
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	4413      	add	r3, r2
 800526a:	051b      	lsls	r3, r3, #20
 800526c:	e018      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3c0>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005276:	fa93 f3a3 	rbit	r3, r3
 800527a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005286:	2320      	movs	r3, #32
 8005288:	e003      	b.n	8005292 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	fab3 f383 	clz	r3, r3
 8005290:	b2db      	uxtb	r3, r3
 8005292:	3301      	adds	r3, #1
 8005294:	f003 021f 	and.w	r2, r3, #31
 8005298:	4613      	mov	r3, r2
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	4413      	add	r3, r2
 800529e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052a0:	430b      	orrs	r3, r1
 80052a2:	e07e      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d107      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x3e0>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	0e9b      	lsrs	r3, r3, #26
 80052b6:	3301      	adds	r3, #1
 80052b8:	069b      	lsls	r3, r3, #26
 80052ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052be:	e015      	b.n	80052ec <HAL_ADC_ConfigChannel+0x40c>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	fa93 f3a3 	rbit	r3, r3
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80052d8:	2320      	movs	r3, #32
 80052da:	e003      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	fab3 f383 	clz	r3, r3
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	3301      	adds	r3, #1
 80052e6:	069b      	lsls	r3, r3, #26
 80052e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <HAL_ADC_ConfigChannel+0x42c>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	0e9b      	lsrs	r3, r3, #26
 80052fe:	3301      	adds	r3, #1
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2101      	movs	r1, #1
 8005306:	fa01 f303 	lsl.w	r3, r1, r3
 800530a:	e017      	b.n	800533c <HAL_ADC_ConfigChannel+0x45c>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	fa93 f3a3 	rbit	r3, r3
 8005318:	61bb      	str	r3, [r7, #24]
  return result;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005324:	2320      	movs	r3, #32
 8005326:	e003      	b.n	8005330 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	fab3 f383 	clz	r3, r3
 800532e:	b2db      	uxtb	r3, r3
 8005330:	3301      	adds	r3, #1
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	2101      	movs	r1, #1
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	ea42 0103 	orr.w	r1, r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10d      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x488>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	0e9b      	lsrs	r3, r3, #26
 8005352:	3301      	adds	r3, #1
 8005354:	f003 021f 	and.w	r2, r3, #31
 8005358:	4613      	mov	r3, r2
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	4413      	add	r3, r2
 800535e:	3b1e      	subs	r3, #30
 8005360:	051b      	lsls	r3, r3, #20
 8005362:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005366:	e01b      	b.n	80053a0 <HAL_ADC_ConfigChannel+0x4c0>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	fa93 f3a3 	rbit	r3, r3
 8005374:	60fb      	str	r3, [r7, #12]
  return result;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005380:	2320      	movs	r3, #32
 8005382:	e003      	b.n	800538c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	fab3 f383 	clz	r3, r3
 800538a:	b2db      	uxtb	r3, r3
 800538c:	3301      	adds	r3, #1
 800538e:	f003 021f 	and.w	r2, r3, #31
 8005392:	4613      	mov	r3, r2
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	4413      	add	r3, r2
 8005398:	3b1e      	subs	r3, #30
 800539a:	051b      	lsls	r3, r3, #20
 800539c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053a0:	430b      	orrs	r3, r1
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	6892      	ldr	r2, [r2, #8]
 80053a6:	4619      	mov	r1, r3
 80053a8:	f7ff f911 	bl	80045ce <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f280 80c6 	bge.w	8005542 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a67      	ldr	r2, [pc, #412]	; (8005558 <HAL_ADC_ConfigChannel+0x678>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_ADC_ConfigChannel+0x4ea>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a65      	ldr	r2, [pc, #404]	; (800555c <HAL_ADC_ConfigChannel+0x67c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d101      	bne.n	80053ce <HAL_ADC_ConfigChannel+0x4ee>
 80053ca:	4b65      	ldr	r3, [pc, #404]	; (8005560 <HAL_ADC_ConfigChannel+0x680>)
 80053cc:	e000      	b.n	80053d0 <HAL_ADC_ConfigChannel+0x4f0>
 80053ce:	4b65      	ldr	r3, [pc, #404]	; (8005564 <HAL_ADC_ConfigChannel+0x684>)
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff f85b 	bl	800448c <LL_ADC_GetCommonPathInternalCh>
 80053d6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a5e      	ldr	r2, [pc, #376]	; (8005558 <HAL_ADC_ConfigChannel+0x678>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <HAL_ADC_ConfigChannel+0x50c>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a5d      	ldr	r2, [pc, #372]	; (800555c <HAL_ADC_ConfigChannel+0x67c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10e      	bne.n	800540a <HAL_ADC_ConfigChannel+0x52a>
 80053ec:	485a      	ldr	r0, [pc, #360]	; (8005558 <HAL_ADC_ConfigChannel+0x678>)
 80053ee:	f7ff f9bb 	bl	8004768 <LL_ADC_IsEnabled>
 80053f2:	4604      	mov	r4, r0
 80053f4:	4859      	ldr	r0, [pc, #356]	; (800555c <HAL_ADC_ConfigChannel+0x67c>)
 80053f6:	f7ff f9b7 	bl	8004768 <LL_ADC_IsEnabled>
 80053fa:	4603      	mov	r3, r0
 80053fc:	4323      	orrs	r3, r4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bf0c      	ite	eq
 8005402:	2301      	moveq	r3, #1
 8005404:	2300      	movne	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	e008      	b.n	800541c <HAL_ADC_ConfigChannel+0x53c>
 800540a:	4857      	ldr	r0, [pc, #348]	; (8005568 <HAL_ADC_ConfigChannel+0x688>)
 800540c:	f7ff f9ac 	bl	8004768 <LL_ADC_IsEnabled>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d07d      	beq.n	800551c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a51      	ldr	r2, [pc, #324]	; (800556c <HAL_ADC_ConfigChannel+0x68c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d130      	bne.n	800548c <HAL_ADC_ConfigChannel+0x5ac>
 800542a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d12b      	bne.n	800548c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a4b      	ldr	r2, [pc, #300]	; (8005568 <HAL_ADC_ConfigChannel+0x688>)
 800543a:	4293      	cmp	r3, r2
 800543c:	f040 8081 	bne.w	8005542 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a44      	ldr	r2, [pc, #272]	; (8005558 <HAL_ADC_ConfigChannel+0x678>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <HAL_ADC_ConfigChannel+0x574>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a43      	ldr	r2, [pc, #268]	; (800555c <HAL_ADC_ConfigChannel+0x67c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d101      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x578>
 8005454:	4a42      	ldr	r2, [pc, #264]	; (8005560 <HAL_ADC_ConfigChannel+0x680>)
 8005456:	e000      	b.n	800545a <HAL_ADC_ConfigChannel+0x57a>
 8005458:	4a42      	ldr	r2, [pc, #264]	; (8005564 <HAL_ADC_ConfigChannel+0x684>)
 800545a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f7fe ffff 	bl	8004466 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005468:	4b41      	ldr	r3, [pc, #260]	; (8005570 <HAL_ADC_ConfigChannel+0x690>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	099b      	lsrs	r3, r3, #6
 800546e:	4a41      	ldr	r2, [pc, #260]	; (8005574 <HAL_ADC_ConfigChannel+0x694>)
 8005470:	fba2 2303 	umull	r2, r3, r2, r3
 8005474:	099b      	lsrs	r3, r3, #6
 8005476:	3301      	adds	r3, #1
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800547c:	e002      	b.n	8005484 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3b01      	subs	r3, #1
 8005482:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f9      	bne.n	800547e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800548a:	e05a      	b.n	8005542 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a39      	ldr	r2, [pc, #228]	; (8005578 <HAL_ADC_ConfigChannel+0x698>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d11e      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x5f4>
 8005496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d119      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a30      	ldr	r2, [pc, #192]	; (8005568 <HAL_ADC_ConfigChannel+0x688>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d14b      	bne.n	8005542 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <HAL_ADC_ConfigChannel+0x678>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_ADC_ConfigChannel+0x5de>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a28      	ldr	r2, [pc, #160]	; (800555c <HAL_ADC_ConfigChannel+0x67c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d101      	bne.n	80054c2 <HAL_ADC_ConfigChannel+0x5e2>
 80054be:	4a28      	ldr	r2, [pc, #160]	; (8005560 <HAL_ADC_ConfigChannel+0x680>)
 80054c0:	e000      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x5e4>
 80054c2:	4a28      	ldr	r2, [pc, #160]	; (8005564 <HAL_ADC_ConfigChannel+0x684>)
 80054c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ca:	4619      	mov	r1, r3
 80054cc:	4610      	mov	r0, r2
 80054ce:	f7fe ffca 	bl	8004466 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054d2:	e036      	b.n	8005542 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a28      	ldr	r2, [pc, #160]	; (800557c <HAL_ADC_ConfigChannel+0x69c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d131      	bne.n	8005542 <HAL_ADC_ConfigChannel+0x662>
 80054de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d12c      	bne.n	8005542 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <HAL_ADC_ConfigChannel+0x688>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d127      	bne.n	8005542 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a18      	ldr	r2, [pc, #96]	; (8005558 <HAL_ADC_ConfigChannel+0x678>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <HAL_ADC_ConfigChannel+0x626>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a16      	ldr	r2, [pc, #88]	; (800555c <HAL_ADC_ConfigChannel+0x67c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <HAL_ADC_ConfigChannel+0x62a>
 8005506:	4a16      	ldr	r2, [pc, #88]	; (8005560 <HAL_ADC_ConfigChannel+0x680>)
 8005508:	e000      	b.n	800550c <HAL_ADC_ConfigChannel+0x62c>
 800550a:	4a16      	ldr	r2, [pc, #88]	; (8005564 <HAL_ADC_ConfigChannel+0x684>)
 800550c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005512:	4619      	mov	r1, r3
 8005514:	4610      	mov	r0, r2
 8005516:	f7fe ffa6 	bl	8004466 <LL_ADC_SetCommonPathInternalCh>
 800551a:	e012      	b.n	8005542 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005520:	f043 0220 	orr.w	r2, r3, #32
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800552e:	e008      	b.n	8005542 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005534:	f043 0220 	orr.w	r2, r3, #32
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800554a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800554e:	4618      	mov	r0, r3
 8005550:	3784      	adds	r7, #132	; 0x84
 8005552:	46bd      	mov	sp, r7
 8005554:	bd90      	pop	{r4, r7, pc}
 8005556:	bf00      	nop
 8005558:	40022000 	.word	0x40022000
 800555c:	40022100 	.word	0x40022100
 8005560:	40022300 	.word	0x40022300
 8005564:	58026300 	.word	0x58026300
 8005568:	58026000 	.word	0x58026000
 800556c:	cb840000 	.word	0xcb840000
 8005570:	20000154 	.word	0x20000154
 8005574:	053e2d63 	.word	0x053e2d63
 8005578:	c7520000 	.word	0xc7520000
 800557c:	cfb80000 	.word	0xcfb80000

08005580 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff f8eb 	bl	8004768 <LL_ADC_IsEnabled>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d16e      	bne.n	8005676 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	4b38      	ldr	r3, [pc, #224]	; (8005680 <ADC_Enable+0x100>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055aa:	f043 0210 	orr.w	r2, r3, #16
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b6:	f043 0201 	orr.w	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e05a      	b.n	8005678 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff f8ba 	bl	8004740 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80055cc:	f7fe fefc 	bl	80043c8 <HAL_GetTick>
 80055d0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2b      	ldr	r2, [pc, #172]	; (8005684 <ADC_Enable+0x104>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <ADC_Enable+0x66>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a29      	ldr	r2, [pc, #164]	; (8005688 <ADC_Enable+0x108>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d101      	bne.n	80055ea <ADC_Enable+0x6a>
 80055e6:	4b29      	ldr	r3, [pc, #164]	; (800568c <ADC_Enable+0x10c>)
 80055e8:	e000      	b.n	80055ec <ADC_Enable+0x6c>
 80055ea:	4b29      	ldr	r3, [pc, #164]	; (8005690 <ADC_Enable+0x110>)
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff f83d 	bl	800466c <LL_ADC_GetMultimode>
 80055f2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a23      	ldr	r2, [pc, #140]	; (8005688 <ADC_Enable+0x108>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d002      	beq.n	8005604 <ADC_Enable+0x84>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	e000      	b.n	8005606 <ADC_Enable+0x86>
 8005604:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <ADC_Enable+0x104>)
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	4293      	cmp	r3, r2
 800560c:	d02c      	beq.n	8005668 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d130      	bne.n	8005676 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005614:	e028      	b.n	8005668 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff f8a4 	bl	8004768 <LL_ADC_IsEnabled>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff f888 	bl	8004740 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005630:	f7fe feca 	bl	80043c8 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d914      	bls.n	8005668 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b01      	cmp	r3, #1
 800564a:	d00d      	beq.n	8005668 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	f043 0210 	orr.w	r2, r3, #16
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565c:	f043 0201 	orr.w	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e007      	b.n	8005678 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b01      	cmp	r3, #1
 8005674:	d1cf      	bne.n	8005616 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	8000003f 	.word	0x8000003f
 8005684:	40022000 	.word	0x40022000
 8005688:	40022100 	.word	0x40022100
 800568c:	40022300 	.word	0x40022300
 8005690:	58026300 	.word	0x58026300

08005694 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a79      	ldr	r2, [pc, #484]	; (8005888 <ADC_ConfigureBoostMode+0x1f4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <ADC_ConfigureBoostMode+0x1c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a78      	ldr	r2, [pc, #480]	; (800588c <ADC_ConfigureBoostMode+0x1f8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d109      	bne.n	80056c4 <ADC_ConfigureBoostMode+0x30>
 80056b0:	4b77      	ldr	r3, [pc, #476]	; (8005890 <ADC_ConfigureBoostMode+0x1fc>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	e008      	b.n	80056d6 <ADC_ConfigureBoostMode+0x42>
 80056c4:	4b73      	ldr	r3, [pc, #460]	; (8005894 <ADC_ConfigureBoostMode+0x200>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01c      	beq.n	8005714 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80056da:	f002 f88d 	bl	80077f8 <HAL_RCC_GetHCLKFreq>
 80056de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056e8:	d010      	beq.n	800570c <ADC_ConfigureBoostMode+0x78>
 80056ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056ee:	d871      	bhi.n	80057d4 <ADC_ConfigureBoostMode+0x140>
 80056f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f4:	d002      	beq.n	80056fc <ADC_ConfigureBoostMode+0x68>
 80056f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056fa:	d16b      	bne.n	80057d4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	0c1b      	lsrs	r3, r3, #16
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	fbb2 f3f3 	udiv	r3, r2, r3
 8005708:	60fb      	str	r3, [r7, #12]
        break;
 800570a:	e066      	b.n	80057da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	60fb      	str	r3, [r7, #12]
        break;
 8005712:	e062      	b.n	80057da <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005714:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005718:	f003 f852 	bl	80087c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800571c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005726:	d051      	beq.n	80057cc <ADC_ConfigureBoostMode+0x138>
 8005728:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800572c:	d854      	bhi.n	80057d8 <ADC_ConfigureBoostMode+0x144>
 800572e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005732:	d047      	beq.n	80057c4 <ADC_ConfigureBoostMode+0x130>
 8005734:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005738:	d84e      	bhi.n	80057d8 <ADC_ConfigureBoostMode+0x144>
 800573a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800573e:	d03d      	beq.n	80057bc <ADC_ConfigureBoostMode+0x128>
 8005740:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005744:	d848      	bhi.n	80057d8 <ADC_ConfigureBoostMode+0x144>
 8005746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800574a:	d033      	beq.n	80057b4 <ADC_ConfigureBoostMode+0x120>
 800574c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005750:	d842      	bhi.n	80057d8 <ADC_ConfigureBoostMode+0x144>
 8005752:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005756:	d029      	beq.n	80057ac <ADC_ConfigureBoostMode+0x118>
 8005758:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800575c:	d83c      	bhi.n	80057d8 <ADC_ConfigureBoostMode+0x144>
 800575e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005762:	d01a      	beq.n	800579a <ADC_ConfigureBoostMode+0x106>
 8005764:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005768:	d836      	bhi.n	80057d8 <ADC_ConfigureBoostMode+0x144>
 800576a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800576e:	d014      	beq.n	800579a <ADC_ConfigureBoostMode+0x106>
 8005770:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005774:	d830      	bhi.n	80057d8 <ADC_ConfigureBoostMode+0x144>
 8005776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800577a:	d00e      	beq.n	800579a <ADC_ConfigureBoostMode+0x106>
 800577c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005780:	d82a      	bhi.n	80057d8 <ADC_ConfigureBoostMode+0x144>
 8005782:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005786:	d008      	beq.n	800579a <ADC_ConfigureBoostMode+0x106>
 8005788:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800578c:	d824      	bhi.n	80057d8 <ADC_ConfigureBoostMode+0x144>
 800578e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005792:	d002      	beq.n	800579a <ADC_ConfigureBoostMode+0x106>
 8005794:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005798:	d11e      	bne.n	80057d8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	0c9b      	lsrs	r3, r3, #18
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	60fb      	str	r3, [r7, #12]
        break;
 80057aa:	e016      	b.n	80057da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	60fb      	str	r3, [r7, #12]
        break;
 80057b2:	e012      	b.n	80057da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	60fb      	str	r3, [r7, #12]
        break;
 80057ba:	e00e      	b.n	80057da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	099b      	lsrs	r3, r3, #6
 80057c0:	60fb      	str	r3, [r7, #12]
        break;
 80057c2:	e00a      	b.n	80057da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	09db      	lsrs	r3, r3, #7
 80057c8:	60fb      	str	r3, [r7, #12]
        break;
 80057ca:	e006      	b.n	80057da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	0a1b      	lsrs	r3, r3, #8
 80057d0:	60fb      	str	r3, [r7, #12]
        break;
 80057d2:	e002      	b.n	80057da <ADC_ConfigureBoostMode+0x146>
        break;
 80057d4:	bf00      	nop
 80057d6:	e000      	b.n	80057da <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80057d8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80057da:	f7fe fe25 	bl	8004428 <HAL_GetREVID>
 80057de:	4603      	mov	r3, r0
 80057e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d815      	bhi.n	8005814 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4a2b      	ldr	r2, [pc, #172]	; (8005898 <ADC_ConfigureBoostMode+0x204>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d908      	bls.n	8005802 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005800:	e03e      	b.n	8005880 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005810:	609a      	str	r2, [r3, #8]
}
 8005812:	e035      	b.n	8005880 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4a1f      	ldr	r2, [pc, #124]	; (800589c <ADC_ConfigureBoostMode+0x208>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d808      	bhi.n	8005834 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005830:	609a      	str	r2, [r3, #8]
}
 8005832:	e025      	b.n	8005880 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4a1a      	ldr	r2, [pc, #104]	; (80058a0 <ADC_ConfigureBoostMode+0x20c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d80a      	bhi.n	8005852 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	e016      	b.n	8005880 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4a13      	ldr	r2, [pc, #76]	; (80058a4 <ADC_ConfigureBoostMode+0x210>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d80a      	bhi.n	8005870 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586c:	609a      	str	r2, [r3, #8]
}
 800586e:	e007      	b.n	8005880 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800587e:	609a      	str	r2, [r3, #8]
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40022000 	.word	0x40022000
 800588c:	40022100 	.word	0x40022100
 8005890:	40022300 	.word	0x40022300
 8005894:	58026300 	.word	0x58026300
 8005898:	01312d00 	.word	0x01312d00
 800589c:	005f5e10 	.word	0x005f5e10
 80058a0:	00bebc20 	.word	0x00bebc20
 80058a4:	017d7840 	.word	0x017d7840

080058a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058b8:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <__NVIC_SetPriorityGrouping+0x40>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058c4:	4013      	ands	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <__NVIC_SetPriorityGrouping+0x44>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058d6:	4a04      	ldr	r2, [pc, #16]	; (80058e8 <__NVIC_SetPriorityGrouping+0x40>)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	60d3      	str	r3, [r2, #12]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	e000ed00 	.word	0xe000ed00
 80058ec:	05fa0000 	.word	0x05fa0000

080058f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058f4:	4b04      	ldr	r3, [pc, #16]	; (8005908 <__NVIC_GetPriorityGrouping+0x18>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	f003 0307 	and.w	r3, r3, #7
}
 80058fe:	4618      	mov	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	e000ed00 	.word	0xe000ed00

0800590c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800591a:	2b00      	cmp	r3, #0
 800591c:	db0b      	blt.n	8005936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	f003 021f 	and.w	r2, r3, #31
 8005924:	4907      	ldr	r1, [pc, #28]	; (8005944 <__NVIC_EnableIRQ+0x38>)
 8005926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	2001      	movs	r0, #1
 800592e:	fa00 f202 	lsl.w	r2, r0, r2
 8005932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	e000e100 	.word	0xe000e100

08005948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	6039      	str	r1, [r7, #0]
 8005952:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005958:	2b00      	cmp	r3, #0
 800595a:	db0a      	blt.n	8005972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	b2da      	uxtb	r2, r3
 8005960:	490c      	ldr	r1, [pc, #48]	; (8005994 <__NVIC_SetPriority+0x4c>)
 8005962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005966:	0112      	lsls	r2, r2, #4
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	440b      	add	r3, r1
 800596c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005970:	e00a      	b.n	8005988 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	b2da      	uxtb	r2, r3
 8005976:	4908      	ldr	r1, [pc, #32]	; (8005998 <__NVIC_SetPriority+0x50>)
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	3b04      	subs	r3, #4
 8005980:	0112      	lsls	r2, r2, #4
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	440b      	add	r3, r1
 8005986:	761a      	strb	r2, [r3, #24]
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	e000e100 	.word	0xe000e100
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	; 0x24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f1c3 0307 	rsb	r3, r3, #7
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	bf28      	it	cs
 80059ba:	2304      	movcs	r3, #4
 80059bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3304      	adds	r3, #4
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d902      	bls.n	80059cc <NVIC_EncodePriority+0x30>
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3b03      	subs	r3, #3
 80059ca:	e000      	b.n	80059ce <NVIC_EncodePriority+0x32>
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	43da      	mvns	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	401a      	ands	r2, r3
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059e4:	f04f 31ff 	mov.w	r1, #4294967295
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	fa01 f303 	lsl.w	r3, r1, r3
 80059ee:	43d9      	mvns	r1, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059f4:	4313      	orrs	r3, r2
         );
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3724      	adds	r7, #36	; 0x24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff ff4c 	bl	80058a8 <__NVIC_SetPriorityGrouping>
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a26:	f7ff ff63 	bl	80058f0 <__NVIC_GetPriorityGrouping>
 8005a2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	6978      	ldr	r0, [r7, #20]
 8005a32:	f7ff ffb3 	bl	800599c <NVIC_EncodePriority>
 8005a36:	4602      	mov	r2, r0
 8005a38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff ff82 	bl	8005948 <__NVIC_SetPriority>
}
 8005a44:	bf00      	nop
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff ff56 	bl	800590c <__NVIC_EnableIRQ>
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e054      	b.n	8005b24 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	7f5b      	ldrb	r3, [r3, #29]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d105      	bne.n	8005a90 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fa fe7a 	bl	8000784 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	791b      	ldrb	r3, [r3, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a22      	ldr	r2, [pc, #136]	; (8005b2c <HAL_CRC_Init+0xc4>)
 8005aa4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0218 	bic.w	r2, r2, #24
 8005ab4:	609a      	str	r2, [r3, #8]
 8005ab6:	e00c      	b.n	8005ad2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6899      	ldr	r1, [r3, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f834 	bl	8005b30 <HAL_CRCEx_Polynomial_Set>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e028      	b.n	8005b24 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	795b      	ldrb	r3, [r3, #5]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d105      	bne.n	8005ae6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae2:	611a      	str	r2, [r3, #16]
 8005ae4:	e004      	b.n	8005af0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6912      	ldr	r2, [r2, #16]
 8005aee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	04c11db7 	.word	0x04c11db7

08005b30 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005b40:	231f      	movs	r3, #31
 8005b42:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005b44:	bf00      	nop
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1e5a      	subs	r2, r3, #1
 8005b4a:	613a      	str	r2, [r7, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <HAL_CRCEx_Polynomial_Set+0x34>
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0f0      	beq.n	8005b46 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b18      	cmp	r3, #24
 8005b68:	d846      	bhi.n	8005bf8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005bff 	.word	0x08005bff
 8005b74:	08005bf9 	.word	0x08005bf9
 8005b78:	08005bf9 	.word	0x08005bf9
 8005b7c:	08005bf9 	.word	0x08005bf9
 8005b80:	08005bf9 	.word	0x08005bf9
 8005b84:	08005bf9 	.word	0x08005bf9
 8005b88:	08005bf9 	.word	0x08005bf9
 8005b8c:	08005bf9 	.word	0x08005bf9
 8005b90:	08005bed 	.word	0x08005bed
 8005b94:	08005bf9 	.word	0x08005bf9
 8005b98:	08005bf9 	.word	0x08005bf9
 8005b9c:	08005bf9 	.word	0x08005bf9
 8005ba0:	08005bf9 	.word	0x08005bf9
 8005ba4:	08005bf9 	.word	0x08005bf9
 8005ba8:	08005bf9 	.word	0x08005bf9
 8005bac:	08005bf9 	.word	0x08005bf9
 8005bb0:	08005be1 	.word	0x08005be1
 8005bb4:	08005bf9 	.word	0x08005bf9
 8005bb8:	08005bf9 	.word	0x08005bf9
 8005bbc:	08005bf9 	.word	0x08005bf9
 8005bc0:	08005bf9 	.word	0x08005bf9
 8005bc4:	08005bf9 	.word	0x08005bf9
 8005bc8:	08005bf9 	.word	0x08005bf9
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005bd5 	.word	0x08005bd5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b06      	cmp	r3, #6
 8005bd8:	d913      	bls.n	8005c02 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005bde:	e010      	b.n	8005c02 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b07      	cmp	r3, #7
 8005be4:	d90f      	bls.n	8005c06 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005bea:	e00c      	b.n	8005c06 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2b0f      	cmp	r3, #15
 8005bf0:	d90b      	bls.n	8005c0a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005bf6:	e008      	b.n	8005c0a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005bfc:	e006      	b.n	8005c0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e004      	b.n	8005c0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005c02:	bf00      	nop
 8005c04:	e002      	b.n	8005c0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005c06:	bf00      	nop
 8005c08:	e000      	b.n	8005c0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005c0a:	bf00      	nop
  }
  if (status == HAL_OK)
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10d      	bne.n	8005c2e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f023 0118 	bic.w	r1, r3, #24
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e04f      	b.n	8005cee <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fa fdea 	bl	800083c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4b20      	ldr	r3, [pc, #128]	; (8005cf8 <HAL_DMA2D_Init+0xbc>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6851      	ldr	r1, [r2, #4]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	69d2      	ldr	r2, [r2, #28]
 8005c82:	4311      	orrs	r1, r2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c92:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <HAL_DMA2D_Init+0xc0>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6891      	ldr	r1, [r2, #8]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6992      	ldr	r2, [r2, #24]
 8005c9e:	4311      	orrs	r1, r2
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cae:	4b14      	ldr	r3, [pc, #80]	; (8005d00 <HAL_DMA2D_Init+0xc4>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68d1      	ldr	r1, [r2, #12]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	051a      	lsls	r2, r3, #20
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	055b      	lsls	r3, r3, #21
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	fff8ffbf 	.word	0xfff8ffbf
 8005cfc:	fffffef8 	.word	0xfffffef8
 8005d00:	ffff0000 	.word	0xffff0000

08005d04 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_DMA2D_ConfigLayer+0x24>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e092      	b.n	8005e4e <HAL_DMA2D_ConfigLayer+0x14a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	3328      	adds	r3, #40	; 0x28
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	4413      	add	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	041b      	lsls	r3, r3, #16
 8005d54:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005d5c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005d68:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <HAL_DMA2D_ConfigLayer+0x158>)
 8005d6a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b0a      	cmp	r3, #10
 8005d72:	d003      	beq.n	8005d7c <HAL_DMA2D_ConfigLayer+0x78>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b09      	cmp	r3, #9
 8005d7a:	d107      	bne.n	8005d8c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e005      	b.n	8005d98 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	061b      	lsls	r3, r3, #24
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d120      	bne.n	8005de0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	43db      	mvns	r3, r3
 8005da8:	ea02 0103 	and.w	r1, r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b0a      	cmp	r3, #10
 8005dc6:	d003      	beq.n	8005dd0 <HAL_DMA2D_ConfigLayer+0xcc>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b09      	cmp	r3, #9
 8005dce:	d135      	bne.n	8005e3c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005ddc:	629a      	str	r2, [r3, #40]	; 0x28
 8005dde:	e02d      	b.n	8005e3c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b0b      	cmp	r3, #11
 8005de6:	d109      	bne.n	8005dfc <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	049b      	lsls	r3, r3, #18
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005dfa:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69da      	ldr	r2, [r3, #28]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	ea02 0103 	and.w	r1, r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b0a      	cmp	r3, #10
 8005e24:	d003      	beq.n	8005e2e <HAL_DMA2D_ConfigLayer+0x12a>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b09      	cmp	r3, #9
 8005e2c:	d106      	bne.n	8005e3c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005e3a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	ff33000f 	.word	0xff33000f

08005e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b089      	sub	sp, #36	; 0x24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e6e:	4b89      	ldr	r3, [pc, #548]	; (8006094 <HAL_GPIO_Init+0x234>)
 8005e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e72:	e194      	b.n	800619e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	2101      	movs	r1, #1
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 8186 	beq.w	8006198 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d005      	beq.n	8005ea4 <HAL_GPIO_Init+0x44>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d130      	bne.n	8005f06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	2203      	movs	r2, #3
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005eda:	2201      	movs	r2, #1
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	43db      	mvns	r3, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	091b      	lsrs	r3, r3, #4
 8005ef0:	f003 0201 	and.w	r2, r3, #1
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d017      	beq.n	8005f42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f22:	43db      	mvns	r3, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4013      	ands	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d123      	bne.n	8005f96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	08da      	lsrs	r2, r3, #3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3208      	adds	r2, #8
 8005f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	220f      	movs	r2, #15
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	08da      	lsrs	r2, r3, #3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3208      	adds	r2, #8
 8005f90:	69b9      	ldr	r1, [r7, #24]
 8005f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4013      	ands	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f003 0203 	and.w	r2, r3, #3
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 80e0 	beq.w	8006198 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fd8:	4b2f      	ldr	r3, [pc, #188]	; (8006098 <HAL_GPIO_Init+0x238>)
 8005fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fde:	4a2e      	ldr	r2, [pc, #184]	; (8006098 <HAL_GPIO_Init+0x238>)
 8005fe0:	f043 0302 	orr.w	r3, r3, #2
 8005fe4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005fe8:	4b2b      	ldr	r3, [pc, #172]	; (8006098 <HAL_GPIO_Init+0x238>)
 8005fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ff6:	4a29      	ldr	r2, [pc, #164]	; (800609c <HAL_GPIO_Init+0x23c>)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	089b      	lsrs	r3, r3, #2
 8005ffc:	3302      	adds	r3, #2
 8005ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	220f      	movs	r2, #15
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	43db      	mvns	r3, r3
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	4013      	ands	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a20      	ldr	r2, [pc, #128]	; (80060a0 <HAL_GPIO_Init+0x240>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d052      	beq.n	80060c8 <HAL_GPIO_Init+0x268>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <HAL_GPIO_Init+0x244>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d031      	beq.n	800608e <HAL_GPIO_Init+0x22e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <HAL_GPIO_Init+0x248>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d02b      	beq.n	800608a <HAL_GPIO_Init+0x22a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_GPIO_Init+0x24c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d025      	beq.n	8006086 <HAL_GPIO_Init+0x226>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <HAL_GPIO_Init+0x250>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01f      	beq.n	8006082 <HAL_GPIO_Init+0x222>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_GPIO_Init+0x254>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d019      	beq.n	800607e <HAL_GPIO_Init+0x21e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1a      	ldr	r2, [pc, #104]	; (80060b8 <HAL_GPIO_Init+0x258>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <HAL_GPIO_Init+0x21a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a19      	ldr	r2, [pc, #100]	; (80060bc <HAL_GPIO_Init+0x25c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00d      	beq.n	8006076 <HAL_GPIO_Init+0x216>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a18      	ldr	r2, [pc, #96]	; (80060c0 <HAL_GPIO_Init+0x260>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <HAL_GPIO_Init+0x212>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <HAL_GPIO_Init+0x264>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d101      	bne.n	800606e <HAL_GPIO_Init+0x20e>
 800606a:	2309      	movs	r3, #9
 800606c:	e02d      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800606e:	230a      	movs	r3, #10
 8006070:	e02b      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006072:	2308      	movs	r3, #8
 8006074:	e029      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006076:	2307      	movs	r3, #7
 8006078:	e027      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800607a:	2306      	movs	r3, #6
 800607c:	e025      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800607e:	2305      	movs	r3, #5
 8006080:	e023      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006082:	2304      	movs	r3, #4
 8006084:	e021      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006086:	2303      	movs	r3, #3
 8006088:	e01f      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800608a:	2302      	movs	r3, #2
 800608c:	e01d      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800608e:	2301      	movs	r3, #1
 8006090:	e01b      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006092:	bf00      	nop
 8006094:	58000080 	.word	0x58000080
 8006098:	58024400 	.word	0x58024400
 800609c:	58000400 	.word	0x58000400
 80060a0:	58020000 	.word	0x58020000
 80060a4:	58020400 	.word	0x58020400
 80060a8:	58020800 	.word	0x58020800
 80060ac:	58020c00 	.word	0x58020c00
 80060b0:	58021000 	.word	0x58021000
 80060b4:	58021400 	.word	0x58021400
 80060b8:	58021800 	.word	0x58021800
 80060bc:	58021c00 	.word	0x58021c00
 80060c0:	58022000 	.word	0x58022000
 80060c4:	58022400 	.word	0x58022400
 80060c8:	2300      	movs	r3, #0
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	f002 0203 	and.w	r2, r2, #3
 80060d0:	0092      	lsls	r2, r2, #2
 80060d2:	4093      	lsls	r3, r2
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060da:	4938      	ldr	r1, [pc, #224]	; (80061bc <HAL_GPIO_Init+0x35c>)
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	089b      	lsrs	r3, r3, #2
 80060e0:	3302      	adds	r3, #2
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	43db      	mvns	r3, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4013      	ands	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800610e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800613c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	43db      	mvns	r3, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4013      	ands	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	3301      	adds	r3, #1
 800619c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f47f ae63 	bne.w	8005e74 <HAL_GPIO_Init+0x14>
  }
}
 80061ae:	bf00      	nop
 80061b0:	bf00      	nop
 80061b2:	3724      	adds	r7, #36	; 0x24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	58000400 	.word	0x58000400

080061c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	807b      	strh	r3, [r7, #2]
 80061cc:	4613      	mov	r3, r2
 80061ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061d0:	787b      	ldrb	r3, [r7, #1]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061dc:	e003      	b.n	80061e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061de:	887b      	ldrh	r3, [r7, #2]
 80061e0:	041a      	lsls	r2, r3, #16
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	619a      	str	r2, [r3, #24]
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e0bf      	b.n	8006386 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fc ff82 	bl	8003124 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006236:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6999      	ldr	r1, [r3, #24]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800624c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6899      	ldr	r1, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4b4a      	ldr	r3, [pc, #296]	; (8006390 <HAL_LTDC_Init+0x19c>)
 8006268:	400b      	ands	r3, r1
 800626a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6899      	ldr	r1, [r3, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68d9      	ldr	r1, [r3, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b3e      	ldr	r3, [pc, #248]	; (8006390 <HAL_LTDC_Init+0x19c>)
 8006296:	400b      	ands	r3, r1
 8006298:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	041b      	lsls	r3, r3, #16
 80062a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68d9      	ldr	r1, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1a      	ldr	r2, [r3, #32]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6919      	ldr	r1, [r3, #16]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b33      	ldr	r3, [pc, #204]	; (8006390 <HAL_LTDC_Init+0x19c>)
 80062c4:	400b      	ands	r3, r1
 80062c6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	041b      	lsls	r3, r3, #16
 80062ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6919      	ldr	r1, [r3, #16]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6959      	ldr	r1, [r3, #20]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	4b27      	ldr	r3, [pc, #156]	; (8006390 <HAL_LTDC_Init+0x19c>)
 80062f2:	400b      	ands	r3, r1
 80062f4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	041b      	lsls	r3, r3, #16
 80062fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6959      	ldr	r1, [r3, #20]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006324:	041b      	lsls	r3, r3, #16
 8006326:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006336:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0206 	orr.w	r2, r2, #6
 8006362:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	f000f800 	.word	0xf000f800

08006394 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d023      	beq.n	80063fe <HAL_LTDC_IRQHandler+0x6a>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01e      	beq.n	80063fe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0204 	bic.w	r2, r2, #4
 80063ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2204      	movs	r2, #4
 80063d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063de:	f043 0201 	orr.w	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2204      	movs	r2, #4
 80063ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f86f 	bl	80064dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d023      	beq.n	8006450 <HAL_LTDC_IRQHandler+0xbc>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01e      	beq.n	8006450 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0202 	bic.w	r2, r2, #2
 8006420:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2202      	movs	r2, #2
 8006428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006430:	f043 0202 	orr.w	r2, r3, #2
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2204      	movs	r2, #4
 800643e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f846 	bl	80064dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d01b      	beq.n	8006492 <HAL_LTDC_IRQHandler+0xfe>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d016      	beq.n	8006492 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0201 	bic.w	r2, r2, #1
 8006472:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2201      	movs	r2, #1
 800647a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f82f 	bl	80064f0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01b      	beq.n	80064d4 <HAL_LTDC_IRQHandler+0x140>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d016      	beq.n	80064d4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0208 	bic.w	r2, r2, #8
 80064b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2208      	movs	r2, #8
 80064bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f818 	bl	8006504 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006518:	b5b0      	push	{r4, r5, r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d101      	bne.n	8006532 <HAL_LTDC_ConfigLayer+0x1a>
 800652e:	2302      	movs	r3, #2
 8006530:	e02c      	b.n	800658c <HAL_LTDC_ConfigLayer+0x74>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2134      	movs	r1, #52	; 0x34
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	4413      	add	r3, r2
 800654e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	4614      	mov	r4, r2
 8006556:	461d      	mov	r5, r3
 8006558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800655a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800655c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800655e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f811 	bl	8006594 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2201      	movs	r2, #1
 8006578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bdb0      	pop	{r4, r5, r7, pc}

08006594 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006594:	b480      	push	{r7}
 8006596:	b089      	sub	sp, #36	; 0x24
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	0c1b      	lsrs	r3, r3, #16
 80065ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065b0:	4413      	add	r3, r2
 80065b2:	041b      	lsls	r3, r3, #16
 80065b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	01db      	lsls	r3, r3, #7
 80065c0:	4413      	add	r3, r2
 80065c2:	3384      	adds	r3, #132	; 0x84
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	4611      	mov	r1, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	01d2      	lsls	r2, r2, #7
 80065d0:	440a      	add	r2, r1
 80065d2:	3284      	adds	r2, #132	; 0x84
 80065d4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80065d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	0c1b      	lsrs	r3, r3, #16
 80065e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ea:	4413      	add	r3, r2
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4619      	mov	r1, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	01db      	lsls	r3, r3, #7
 80065f8:	440b      	add	r3, r1
 80065fa:	3384      	adds	r3, #132	; 0x84
 80065fc:	4619      	mov	r1, r3
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4313      	orrs	r3, r2
 8006602:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006612:	4413      	add	r3, r2
 8006614:	041b      	lsls	r3, r3, #16
 8006616:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	01db      	lsls	r3, r3, #7
 8006622:	4413      	add	r3, r2
 8006624:	3384      	adds	r3, #132	; 0x84
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	4611      	mov	r1, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	01d2      	lsls	r2, r2, #7
 8006632:	440a      	add	r2, r1
 8006634:	3284      	adds	r2, #132	; 0x84
 8006636:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800663a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800664a:	4413      	add	r3, r2
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4619      	mov	r1, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	01db      	lsls	r3, r3, #7
 8006658:	440b      	add	r3, r1
 800665a:	3384      	adds	r3, #132	; 0x84
 800665c:	4619      	mov	r1, r3
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4313      	orrs	r3, r2
 8006662:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	01db      	lsls	r3, r3, #7
 800666e:	4413      	add	r3, r2
 8006670:	3384      	adds	r3, #132	; 0x84
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	4611      	mov	r1, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	01d2      	lsls	r2, r2, #7
 800667e:	440a      	add	r2, r1
 8006680:	3284      	adds	r2, #132	; 0x84
 8006682:	f023 0307 	bic.w	r3, r3, #7
 8006686:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	01db      	lsls	r3, r3, #7
 8006692:	4413      	add	r3, r2
 8006694:	3384      	adds	r3, #132	; 0x84
 8006696:	461a      	mov	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80066ae:	041b      	lsls	r3, r3, #16
 80066b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	061b      	lsls	r3, r3, #24
 80066b8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	01db      	lsls	r3, r3, #7
 80066c4:	4413      	add	r3, r2
 80066c6:	3384      	adds	r3, #132	; 0x84
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	01db      	lsls	r3, r3, #7
 80066d4:	4413      	add	r3, r2
 80066d6:	3384      	adds	r3, #132	; 0x84
 80066d8:	461a      	mov	r2, r3
 80066da:	2300      	movs	r3, #0
 80066dc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066e4:	461a      	mov	r2, r3
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	431a      	orrs	r2, r3
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	431a      	orrs	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4619      	mov	r1, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	01db      	lsls	r3, r3, #7
 80066f8:	440b      	add	r3, r1
 80066fa:	3384      	adds	r3, #132	; 0x84
 80066fc:	4619      	mov	r1, r3
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	01db      	lsls	r3, r3, #7
 800670e:	4413      	add	r3, r2
 8006710:	3384      	adds	r3, #132	; 0x84
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	4611      	mov	r1, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	01d2      	lsls	r2, r2, #7
 800671e:	440a      	add	r2, r1
 8006720:	3284      	adds	r2, #132	; 0x84
 8006722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006726:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	01db      	lsls	r3, r3, #7
 8006732:	4413      	add	r3, r2
 8006734:	3384      	adds	r3, #132	; 0x84
 8006736:	461a      	mov	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	01db      	lsls	r3, r3, #7
 8006748:	4413      	add	r3, r2
 800674a:	3384      	adds	r3, #132	; 0x84
 800674c:	69da      	ldr	r2, [r3, #28]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4619      	mov	r1, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	01db      	lsls	r3, r3, #7
 8006758:	440b      	add	r3, r1
 800675a:	3384      	adds	r3, #132	; 0x84
 800675c:	4619      	mov	r1, r3
 800675e:	4b58      	ldr	r3, [pc, #352]	; (80068c0 <LTDC_SetConfig+0x32c>)
 8006760:	4013      	ands	r3, r2
 8006762:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	69da      	ldr	r2, [r3, #28]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	68f9      	ldr	r1, [r7, #12]
 800676e:	6809      	ldr	r1, [r1, #0]
 8006770:	4608      	mov	r0, r1
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	01c9      	lsls	r1, r1, #7
 8006776:	4401      	add	r1, r0
 8006778:	3184      	adds	r1, #132	; 0x84
 800677a:	4313      	orrs	r3, r2
 800677c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	01db      	lsls	r3, r3, #7
 8006788:	4413      	add	r3, r2
 800678a:	3384      	adds	r3, #132	; 0x84
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	01db      	lsls	r3, r3, #7
 8006798:	4413      	add	r3, r2
 800679a:	3384      	adds	r3, #132	; 0x84
 800679c:	461a      	mov	r2, r3
 800679e:	2300      	movs	r3, #0
 80067a0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	01db      	lsls	r3, r3, #7
 80067ac:	4413      	add	r3, r2
 80067ae:	3384      	adds	r3, #132	; 0x84
 80067b0:	461a      	mov	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d102      	bne.n	80067c6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80067c0:	2304      	movs	r3, #4
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e01b      	b.n	80067fe <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d102      	bne.n	80067d4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80067ce:	2303      	movs	r3, #3
 80067d0:	61fb      	str	r3, [r7, #28]
 80067d2:	e014      	b.n	80067fe <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d00b      	beq.n	80067f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d007      	beq.n	80067f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d003      	beq.n	80067f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80067f0:	2b07      	cmp	r3, #7
 80067f2:	d102      	bne.n	80067fa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80067f4:	2302      	movs	r3, #2
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	e001      	b.n	80067fe <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80067fa:	2301      	movs	r3, #1
 80067fc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	01db      	lsls	r3, r3, #7
 8006808:	4413      	add	r3, r2
 800680a:	3384      	adds	r3, #132	; 0x84
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	4611      	mov	r1, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	01d2      	lsls	r2, r2, #7
 8006818:	440a      	add	r2, r1
 800681a:	3284      	adds	r2, #132	; 0x84
 800681c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006820:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	fb02 f303 	mul.w	r3, r2, r3
 800682c:	041a      	lsls	r2, r3, #16
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6859      	ldr	r1, [r3, #4]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	1acb      	subs	r3, r1, r3
 8006838:	69f9      	ldr	r1, [r7, #28]
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	3307      	adds	r3, #7
 8006840:	68f9      	ldr	r1, [r7, #12]
 8006842:	6809      	ldr	r1, [r1, #0]
 8006844:	4608      	mov	r0, r1
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	01c9      	lsls	r1, r1, #7
 800684a:	4401      	add	r1, r0
 800684c:	3184      	adds	r1, #132	; 0x84
 800684e:	4313      	orrs	r3, r2
 8006850:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	01db      	lsls	r3, r3, #7
 800685c:	4413      	add	r3, r2
 800685e:	3384      	adds	r3, #132	; 0x84
 8006860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4619      	mov	r1, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	01db      	lsls	r3, r3, #7
 800686c:	440b      	add	r3, r1
 800686e:	3384      	adds	r3, #132	; 0x84
 8006870:	4619      	mov	r1, r3
 8006872:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <LTDC_SetConfig+0x330>)
 8006874:	4013      	ands	r3, r2
 8006876:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	01db      	lsls	r3, r3, #7
 8006882:	4413      	add	r3, r2
 8006884:	3384      	adds	r3, #132	; 0x84
 8006886:	461a      	mov	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	01db      	lsls	r3, r3, #7
 8006898:	4413      	add	r3, r2
 800689a:	3384      	adds	r3, #132	; 0x84
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	4611      	mov	r1, r2
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	01d2      	lsls	r2, r2, #7
 80068a8:	440a      	add	r2, r1
 80068aa:	3284      	adds	r2, #132	; 0x84
 80068ac:	f043 0301 	orr.w	r3, r3, #1
 80068b0:	6013      	str	r3, [r2, #0]
}
 80068b2:	bf00      	nop
 80068b4:	3724      	adds	r7, #36	; 0x24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	fffff8f8 	.word	0xfffff8f8
 80068c4:	fffff800 	.word	0xfffff800

080068c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80068d0:	4b19      	ldr	r3, [pc, #100]	; (8006938 <HAL_PWREx_ConfigSupply+0x70>)
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d00a      	beq.n	80068f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80068dc:	4b16      	ldr	r3, [pc, #88]	; (8006938 <HAL_PWREx_ConfigSupply+0x70>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d001      	beq.n	80068ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e01f      	b.n	800692e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e01d      	b.n	800692e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068f2:	4b11      	ldr	r3, [pc, #68]	; (8006938 <HAL_PWREx_ConfigSupply+0x70>)
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f023 0207 	bic.w	r2, r3, #7
 80068fa:	490f      	ldr	r1, [pc, #60]	; (8006938 <HAL_PWREx_ConfigSupply+0x70>)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006902:	f7fd fd61 	bl	80043c8 <HAL_GetTick>
 8006906:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006908:	e009      	b.n	800691e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800690a:	f7fd fd5d 	bl	80043c8 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006918:	d901      	bls.n	800691e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e007      	b.n	800692e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800691e:	4b06      	ldr	r3, [pc, #24]	; (8006938 <HAL_PWREx_ConfigSupply+0x70>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692a:	d1ee      	bne.n	800690a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	58024800 	.word	0x58024800

0800693c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08c      	sub	sp, #48	; 0x30
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	f000 bc1d 	b.w	800718a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8087 	beq.w	8006a6c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800695e:	4b99      	ldr	r3, [pc, #612]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006968:	4b96      	ldr	r3, [pc, #600]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 800696a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	2b10      	cmp	r3, #16
 8006972:	d007      	beq.n	8006984 <HAL_RCC_OscConfig+0x48>
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	2b18      	cmp	r3, #24
 8006978:	d110      	bne.n	800699c <HAL_RCC_OscConfig+0x60>
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d10b      	bne.n	800699c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006984:	4b8f      	ldr	r3, [pc, #572]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d06c      	beq.n	8006a6a <HAL_RCC_OscConfig+0x12e>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d168      	bne.n	8006a6a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e3f6      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a4:	d106      	bne.n	80069b4 <HAL_RCC_OscConfig+0x78>
 80069a6:	4b87      	ldr	r3, [pc, #540]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a86      	ldr	r2, [pc, #536]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 80069ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	e02e      	b.n	8006a12 <HAL_RCC_OscConfig+0xd6>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10c      	bne.n	80069d6 <HAL_RCC_OscConfig+0x9a>
 80069bc:	4b81      	ldr	r3, [pc, #516]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a80      	ldr	r2, [pc, #512]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 80069c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	4b7e      	ldr	r3, [pc, #504]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a7d      	ldr	r2, [pc, #500]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 80069ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	e01d      	b.n	8006a12 <HAL_RCC_OscConfig+0xd6>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069de:	d10c      	bne.n	80069fa <HAL_RCC_OscConfig+0xbe>
 80069e0:	4b78      	ldr	r3, [pc, #480]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a77      	ldr	r2, [pc, #476]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 80069e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	4b75      	ldr	r3, [pc, #468]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a74      	ldr	r2, [pc, #464]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 80069f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e00b      	b.n	8006a12 <HAL_RCC_OscConfig+0xd6>
 80069fa:	4b72      	ldr	r3, [pc, #456]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a71      	ldr	r2, [pc, #452]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	4b6f      	ldr	r3, [pc, #444]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a6e      	ldr	r2, [pc, #440]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d013      	beq.n	8006a42 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1a:	f7fd fcd5 	bl	80043c8 <HAL_GetTick>
 8006a1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a22:	f7fd fcd1 	bl	80043c8 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b64      	cmp	r3, #100	; 0x64
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e3aa      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a34:	4b63      	ldr	r3, [pc, #396]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0f0      	beq.n	8006a22 <HAL_RCC_OscConfig+0xe6>
 8006a40:	e014      	b.n	8006a6c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a42:	f7fd fcc1 	bl	80043c8 <HAL_GetTick>
 8006a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a48:	e008      	b.n	8006a5c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a4a:	f7fd fcbd 	bl	80043c8 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b64      	cmp	r3, #100	; 0x64
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e396      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a5c:	4b59      	ldr	r3, [pc, #356]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1f0      	bne.n	8006a4a <HAL_RCC_OscConfig+0x10e>
 8006a68:	e000      	b.n	8006a6c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80cb 	beq.w	8006c10 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a7a:	4b52      	ldr	r3, [pc, #328]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a82:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a84:	4b4f      	ldr	r3, [pc, #316]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x164>
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	2b18      	cmp	r3, #24
 8006a94:	d156      	bne.n	8006b44 <HAL_RCC_OscConfig+0x208>
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f003 0303 	and.w	r3, r3, #3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d151      	bne.n	8006b44 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aa0:	4b48      	ldr	r3, [pc, #288]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x17c>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e368      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ab8:	4b42      	ldr	r3, [pc, #264]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f023 0219 	bic.w	r2, r3, #25
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	493f      	ldr	r1, [pc, #252]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006aca:	f7fd fc7d 	bl	80043c8 <HAL_GetTick>
 8006ace:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ad0:	e008      	b.n	8006ae4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ad2:	f7fd fc79 	bl	80043c8 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e352      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ae4:	4b37      	ldr	r3, [pc, #220]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0f0      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af0:	f7fd fc9a 	bl	8004428 <HAL_GetREVID>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f241 0203 	movw	r2, #4099	; 0x1003
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d817      	bhi.n	8006b2e <HAL_RCC_OscConfig+0x1f2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b40      	cmp	r3, #64	; 0x40
 8006b04:	d108      	bne.n	8006b18 <HAL_RCC_OscConfig+0x1dc>
 8006b06:	4b2f      	ldr	r3, [pc, #188]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b0e:	4a2d      	ldr	r2, [pc, #180]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b14:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b16:	e07b      	b.n	8006c10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b18:	4b2a      	ldr	r3, [pc, #168]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	031b      	lsls	r3, r3, #12
 8006b26:	4927      	ldr	r1, [pc, #156]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b2c:	e070      	b.n	8006c10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b2e:	4b25      	ldr	r3, [pc, #148]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	061b      	lsls	r3, r3, #24
 8006b3c:	4921      	ldr	r1, [pc, #132]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b42:	e065      	b.n	8006c10 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d048      	beq.n	8006bde <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b4c:	4b1d      	ldr	r3, [pc, #116]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f023 0219 	bic.w	r2, r3, #25
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	491a      	ldr	r1, [pc, #104]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5e:	f7fd fc33 	bl	80043c8 <HAL_GetTick>
 8006b62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b66:	f7fd fc2f 	bl	80043c8 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e308      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b78:	4b12      	ldr	r3, [pc, #72]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0f0      	beq.n	8006b66 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b84:	f7fd fc50 	bl	8004428 <HAL_GetREVID>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d81a      	bhi.n	8006bc8 <HAL_RCC_OscConfig+0x28c>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b40      	cmp	r3, #64	; 0x40
 8006b98:	d108      	bne.n	8006bac <HAL_RCC_OscConfig+0x270>
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ba2:	4a08      	ldr	r2, [pc, #32]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ba8:	6053      	str	r3, [r2, #4]
 8006baa:	e031      	b.n	8006c10 <HAL_RCC_OscConfig+0x2d4>
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	031b      	lsls	r3, r3, #12
 8006bba:	4902      	ldr	r1, [pc, #8]	; (8006bc4 <HAL_RCC_OscConfig+0x288>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	604b      	str	r3, [r1, #4]
 8006bc0:	e026      	b.n	8006c10 <HAL_RCC_OscConfig+0x2d4>
 8006bc2:	bf00      	nop
 8006bc4:	58024400 	.word	0x58024400
 8006bc8:	4b9a      	ldr	r3, [pc, #616]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	061b      	lsls	r3, r3, #24
 8006bd6:	4997      	ldr	r1, [pc, #604]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	604b      	str	r3, [r1, #4]
 8006bdc:	e018      	b.n	8006c10 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bde:	4b95      	ldr	r3, [pc, #596]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a94      	ldr	r2, [pc, #592]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bea:	f7fd fbed 	bl	80043c8 <HAL_GetTick>
 8006bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bf0:	e008      	b.n	8006c04 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bf2:	f7fd fbe9 	bl	80043c8 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e2c2      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c04:	4b8b      	ldr	r3, [pc, #556]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1f0      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0310 	and.w	r3, r3, #16
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 80a9 	beq.w	8006d70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c1e:	4b85      	ldr	r3, [pc, #532]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c28:	4b82      	ldr	r3, [pc, #520]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d007      	beq.n	8006c44 <HAL_RCC_OscConfig+0x308>
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	2b18      	cmp	r3, #24
 8006c38:	d13a      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x374>
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d135      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c44:	4b7b      	ldr	r3, [pc, #492]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <HAL_RCC_OscConfig+0x320>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	2b80      	cmp	r3, #128	; 0x80
 8006c56:	d001      	beq.n	8006c5c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e296      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c5c:	f7fd fbe4 	bl	8004428 <HAL_GetREVID>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d817      	bhi.n	8006c9a <HAL_RCC_OscConfig+0x35e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	d108      	bne.n	8006c84 <HAL_RCC_OscConfig+0x348>
 8006c72:	4b70      	ldr	r3, [pc, #448]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c7a:	4a6e      	ldr	r2, [pc, #440]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006c7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c80:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c82:	e075      	b.n	8006d70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c84:	4b6b      	ldr	r3, [pc, #428]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	069b      	lsls	r3, r3, #26
 8006c92:	4968      	ldr	r1, [pc, #416]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c98:	e06a      	b.n	8006d70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c9a:	4b66      	ldr	r3, [pc, #408]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	061b      	lsls	r3, r3, #24
 8006ca8:	4962      	ldr	r1, [pc, #392]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cae:	e05f      	b.n	8006d70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d042      	beq.n	8006d3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006cb8:	4b5e      	ldr	r3, [pc, #376]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a5d      	ldr	r2, [pc, #372]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc4:	f7fd fb80 	bl	80043c8 <HAL_GetTick>
 8006cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ccc:	f7fd fb7c 	bl	80043c8 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e255      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cde:	4b55      	ldr	r3, [pc, #340]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0f0      	beq.n	8006ccc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cea:	f7fd fb9d 	bl	8004428 <HAL_GetREVID>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d817      	bhi.n	8006d28 <HAL_RCC_OscConfig+0x3ec>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d108      	bne.n	8006d12 <HAL_RCC_OscConfig+0x3d6>
 8006d00:	4b4c      	ldr	r3, [pc, #304]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d08:	4a4a      	ldr	r2, [pc, #296]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006d0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d0e:	6053      	str	r3, [r2, #4]
 8006d10:	e02e      	b.n	8006d70 <HAL_RCC_OscConfig+0x434>
 8006d12:	4b48      	ldr	r3, [pc, #288]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	069b      	lsls	r3, r3, #26
 8006d20:	4944      	ldr	r1, [pc, #272]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	604b      	str	r3, [r1, #4]
 8006d26:	e023      	b.n	8006d70 <HAL_RCC_OscConfig+0x434>
 8006d28:	4b42      	ldr	r3, [pc, #264]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	061b      	lsls	r3, r3, #24
 8006d36:	493f      	ldr	r1, [pc, #252]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60cb      	str	r3, [r1, #12]
 8006d3c:	e018      	b.n	8006d70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006d3e:	4b3d      	ldr	r3, [pc, #244]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a3c      	ldr	r2, [pc, #240]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4a:	f7fd fb3d 	bl	80043c8 <HAL_GetTick>
 8006d4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d52:	f7fd fb39 	bl	80043c8 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e212      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d64:	4b33      	ldr	r3, [pc, #204]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1f0      	bne.n	8006d52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d036      	beq.n	8006dea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d019      	beq.n	8006db8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d84:	4b2b      	ldr	r3, [pc, #172]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d88:	4a2a      	ldr	r2, [pc, #168]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d90:	f7fd fb1a 	bl	80043c8 <HAL_GetTick>
 8006d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d98:	f7fd fb16 	bl	80043c8 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e1ef      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006daa:	4b22      	ldr	r3, [pc, #136]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0f0      	beq.n	8006d98 <HAL_RCC_OscConfig+0x45c>
 8006db6:	e018      	b.n	8006dea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006db8:	4b1e      	ldr	r3, [pc, #120]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dbc:	4a1d      	ldr	r2, [pc, #116]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006dbe:	f023 0301 	bic.w	r3, r3, #1
 8006dc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc4:	f7fd fb00 	bl	80043c8 <HAL_GetTick>
 8006dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dcc:	f7fd fafc 	bl	80043c8 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e1d5      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006dde:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1f0      	bne.n	8006dcc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d039      	beq.n	8006e6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d01c      	beq.n	8006e38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a0c      	ldr	r2, [pc, #48]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e0a:	f7fd fadd 	bl	80043c8 <HAL_GetTick>
 8006e0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e10:	e008      	b.n	8006e24 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006e12:	f7fd fad9 	bl	80043c8 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e1b2      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e24:	4b03      	ldr	r3, [pc, #12]	; (8006e34 <HAL_RCC_OscConfig+0x4f8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0f0      	beq.n	8006e12 <HAL_RCC_OscConfig+0x4d6>
 8006e30:	e01b      	b.n	8006e6a <HAL_RCC_OscConfig+0x52e>
 8006e32:	bf00      	nop
 8006e34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e38:	4b9b      	ldr	r3, [pc, #620]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a9a      	ldr	r2, [pc, #616]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e44:	f7fd fac0 	bl	80043c8 <HAL_GetTick>
 8006e48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e4a:	e008      	b.n	8006e5e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006e4c:	f7fd fabc 	bl	80043c8 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e195      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e5e:	4b92      	ldr	r3, [pc, #584]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1f0      	bne.n	8006e4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8081 	beq.w	8006f7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e78:	4b8c      	ldr	r3, [pc, #560]	; (80070ac <HAL_RCC_OscConfig+0x770>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a8b      	ldr	r2, [pc, #556]	; (80070ac <HAL_RCC_OscConfig+0x770>)
 8006e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e84:	f7fd faa0 	bl	80043c8 <HAL_GetTick>
 8006e88:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e8c:	f7fd fa9c 	bl	80043c8 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b64      	cmp	r3, #100	; 0x64
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e175      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e9e:	4b83      	ldr	r3, [pc, #524]	; (80070ac <HAL_RCC_OscConfig+0x770>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d106      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x584>
 8006eb2:	4b7d      	ldr	r3, [pc, #500]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	4a7c      	ldr	r2, [pc, #496]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006eb8:	f043 0301 	orr.w	r3, r3, #1
 8006ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ebe:	e02d      	b.n	8006f1c <HAL_RCC_OscConfig+0x5e0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10c      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x5a6>
 8006ec8:	4b77      	ldr	r3, [pc, #476]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ecc:	4a76      	ldr	r2, [pc, #472]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006ece:	f023 0301 	bic.w	r3, r3, #1
 8006ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed4:	4b74      	ldr	r3, [pc, #464]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	4a73      	ldr	r2, [pc, #460]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006eda:	f023 0304 	bic.w	r3, r3, #4
 8006ede:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee0:	e01c      	b.n	8006f1c <HAL_RCC_OscConfig+0x5e0>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d10c      	bne.n	8006f04 <HAL_RCC_OscConfig+0x5c8>
 8006eea:	4b6f      	ldr	r3, [pc, #444]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	4a6e      	ldr	r2, [pc, #440]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006ef0:	f043 0304 	orr.w	r3, r3, #4
 8006ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ef6:	4b6c      	ldr	r3, [pc, #432]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efa:	4a6b      	ldr	r2, [pc, #428]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006efc:	f043 0301 	orr.w	r3, r3, #1
 8006f00:	6713      	str	r3, [r2, #112]	; 0x70
 8006f02:	e00b      	b.n	8006f1c <HAL_RCC_OscConfig+0x5e0>
 8006f04:	4b68      	ldr	r3, [pc, #416]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f08:	4a67      	ldr	r2, [pc, #412]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f10:	4b65      	ldr	r3, [pc, #404]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	4a64      	ldr	r2, [pc, #400]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006f16:	f023 0304 	bic.w	r3, r3, #4
 8006f1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d015      	beq.n	8006f50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f24:	f7fd fa50 	bl	80043c8 <HAL_GetTick>
 8006f28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f2a:	e00a      	b.n	8006f42 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2c:	f7fd fa4c 	bl	80043c8 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e123      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f42:	4b59      	ldr	r3, [pc, #356]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0ee      	beq.n	8006f2c <HAL_RCC_OscConfig+0x5f0>
 8006f4e:	e014      	b.n	8006f7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f50:	f7fd fa3a 	bl	80043c8 <HAL_GetTick>
 8006f54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f56:	e00a      	b.n	8006f6e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f58:	f7fd fa36 	bl	80043c8 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e10d      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f6e:	4b4e      	ldr	r3, [pc, #312]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1ee      	bne.n	8006f58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 8102 	beq.w	8007188 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f84:	4b48      	ldr	r3, [pc, #288]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f8c:	2b18      	cmp	r3, #24
 8006f8e:	f000 80bd 	beq.w	800710c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	f040 809e 	bne.w	80070d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f9c:	4b42      	ldr	r3, [pc, #264]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a41      	ldr	r2, [pc, #260]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa8:	f7fd fa0e 	bl	80043c8 <HAL_GetTick>
 8006fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb0:	f7fd fa0a 	bl	80043c8 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e0e3      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fc2:	4b39      	ldr	r3, [pc, #228]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f0      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fce:	4b36      	ldr	r3, [pc, #216]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fd2:	4b37      	ldr	r3, [pc, #220]	; (80070b0 <HAL_RCC_OscConfig+0x774>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006fde:	0112      	lsls	r2, r2, #4
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	4931      	ldr	r1, [pc, #196]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	628b      	str	r3, [r1, #40]	; 0x28
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	3b01      	subs	r3, #1
 8006fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	025b      	lsls	r3, r3, #9
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	3b01      	subs	r3, #1
 8007004:	041b      	lsls	r3, r3, #16
 8007006:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007010:	3b01      	subs	r3, #1
 8007012:	061b      	lsls	r3, r3, #24
 8007014:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007018:	4923      	ldr	r1, [pc, #140]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 800701a:	4313      	orrs	r3, r2
 800701c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800701e:	4b22      	ldr	r3, [pc, #136]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007022:	4a21      	ldr	r2, [pc, #132]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007024:	f023 0301 	bic.w	r3, r3, #1
 8007028:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800702a:	4b1f      	ldr	r3, [pc, #124]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 800702c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702e:	4b21      	ldr	r3, [pc, #132]	; (80070b4 <HAL_RCC_OscConfig+0x778>)
 8007030:	4013      	ands	r3, r2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007036:	00d2      	lsls	r2, r2, #3
 8007038:	491b      	ldr	r1, [pc, #108]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 800703a:	4313      	orrs	r3, r2
 800703c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800703e:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	f023 020c 	bic.w	r2, r3, #12
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	4917      	ldr	r1, [pc, #92]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 800704c:	4313      	orrs	r3, r2
 800704e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007050:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	f023 0202 	bic.w	r2, r3, #2
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705c:	4912      	ldr	r1, [pc, #72]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 800705e:	4313      	orrs	r3, r2
 8007060:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007062:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	4a10      	ldr	r2, [pc, #64]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800706c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800706e:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	4a0d      	ldr	r2, [pc, #52]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007078:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800707a:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	4a0a      	ldr	r2, [pc, #40]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007084:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007086:	4b08      	ldr	r3, [pc, #32]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	4a07      	ldr	r2, [pc, #28]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007092:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a04      	ldr	r2, [pc, #16]	; (80070a8 <HAL_RCC_OscConfig+0x76c>)
 8007098:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800709c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709e:	f7fd f993 	bl	80043c8 <HAL_GetTick>
 80070a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070a4:	e011      	b.n	80070ca <HAL_RCC_OscConfig+0x78e>
 80070a6:	bf00      	nop
 80070a8:	58024400 	.word	0x58024400
 80070ac:	58024800 	.word	0x58024800
 80070b0:	fffffc0c 	.word	0xfffffc0c
 80070b4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070b8:	f7fd f986 	bl	80043c8 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e05f      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070ca:	4b32      	ldr	r3, [pc, #200]	; (8007194 <HAL_RCC_OscConfig+0x858>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0f0      	beq.n	80070b8 <HAL_RCC_OscConfig+0x77c>
 80070d6:	e057      	b.n	8007188 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d8:	4b2e      	ldr	r3, [pc, #184]	; (8007194 <HAL_RCC_OscConfig+0x858>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a2d      	ldr	r2, [pc, #180]	; (8007194 <HAL_RCC_OscConfig+0x858>)
 80070de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e4:	f7fd f970 	bl	80043c8 <HAL_GetTick>
 80070e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ec:	f7fd f96c 	bl	80043c8 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e045      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070fe:	4b25      	ldr	r3, [pc, #148]	; (8007194 <HAL_RCC_OscConfig+0x858>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0x7b0>
 800710a:	e03d      	b.n	8007188 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800710c:	4b21      	ldr	r3, [pc, #132]	; (8007194 <HAL_RCC_OscConfig+0x858>)
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007112:	4b20      	ldr	r3, [pc, #128]	; (8007194 <HAL_RCC_OscConfig+0x858>)
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	2b01      	cmp	r3, #1
 800711e:	d031      	beq.n	8007184 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f003 0203 	and.w	r2, r3, #3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800712a:	429a      	cmp	r2, r3
 800712c:	d12a      	bne.n	8007184 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	091b      	lsrs	r3, r3, #4
 8007132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713a:	429a      	cmp	r2, r3
 800713c:	d122      	bne.n	8007184 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800714a:	429a      	cmp	r2, r3
 800714c:	d11a      	bne.n	8007184 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	0a5b      	lsrs	r3, r3, #9
 8007152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800715c:	429a      	cmp	r2, r3
 800715e:	d111      	bne.n	8007184 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	0c1b      	lsrs	r3, r3, #16
 8007164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800716e:	429a      	cmp	r2, r3
 8007170:	d108      	bne.n	8007184 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	0e1b      	lsrs	r3, r3, #24
 8007176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007180:	429a      	cmp	r2, r3
 8007182:	d001      	beq.n	8007188 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e000      	b.n	800718a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3730      	adds	r7, #48	; 0x30
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	58024400 	.word	0x58024400

08007198 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e19c      	b.n	80074e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071ac:	4b8a      	ldr	r3, [pc, #552]	; (80073d8 <HAL_RCC_ClockConfig+0x240>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 030f 	and.w	r3, r3, #15
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d910      	bls.n	80071dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ba:	4b87      	ldr	r3, [pc, #540]	; (80073d8 <HAL_RCC_ClockConfig+0x240>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f023 020f 	bic.w	r2, r3, #15
 80071c2:	4985      	ldr	r1, [pc, #532]	; (80073d8 <HAL_RCC_ClockConfig+0x240>)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ca:	4b83      	ldr	r3, [pc, #524]	; (80073d8 <HAL_RCC_ClockConfig+0x240>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d001      	beq.n	80071dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e184      	b.n	80074e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d010      	beq.n	800720a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	4b7b      	ldr	r3, [pc, #492]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d908      	bls.n	800720a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071f8:	4b78      	ldr	r3, [pc, #480]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	4975      	ldr	r1, [pc, #468]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 8007206:	4313      	orrs	r3, r2
 8007208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d010      	beq.n	8007238 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695a      	ldr	r2, [r3, #20]
 800721a:	4b70      	ldr	r3, [pc, #448]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007222:	429a      	cmp	r2, r3
 8007224:	d908      	bls.n	8007238 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007226:	4b6d      	ldr	r3, [pc, #436]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	496a      	ldr	r1, [pc, #424]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 8007234:	4313      	orrs	r3, r2
 8007236:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	d010      	beq.n	8007266 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699a      	ldr	r2, [r3, #24]
 8007248:	4b64      	ldr	r3, [pc, #400]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007250:	429a      	cmp	r2, r3
 8007252:	d908      	bls.n	8007266 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007254:	4b61      	ldr	r3, [pc, #388]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	495e      	ldr	r1, [pc, #376]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 8007262:	4313      	orrs	r3, r2
 8007264:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b00      	cmp	r3, #0
 8007270:	d010      	beq.n	8007294 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69da      	ldr	r2, [r3, #28]
 8007276:	4b59      	ldr	r3, [pc, #356]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800727e:	429a      	cmp	r2, r3
 8007280:	d908      	bls.n	8007294 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007282:	4b56      	ldr	r3, [pc, #344]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	4953      	ldr	r1, [pc, #332]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 8007290:	4313      	orrs	r3, r2
 8007292:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d010      	beq.n	80072c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	4b4d      	ldr	r3, [pc, #308]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	f003 030f 	and.w	r3, r3, #15
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d908      	bls.n	80072c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072b0:	4b4a      	ldr	r3, [pc, #296]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	f023 020f 	bic.w	r2, r3, #15
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	4947      	ldr	r1, [pc, #284]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d055      	beq.n	800737a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80072ce:	4b43      	ldr	r3, [pc, #268]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	4940      	ldr	r1, [pc, #256]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d107      	bne.n	80072f8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072e8:	4b3c      	ldr	r3, [pc, #240]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d121      	bne.n	8007338 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e0f6      	b.n	80074e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d107      	bne.n	8007310 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007300:	4b36      	ldr	r3, [pc, #216]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d115      	bne.n	8007338 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e0ea      	b.n	80074e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d107      	bne.n	8007328 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007318:	4b30      	ldr	r3, [pc, #192]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e0de      	b.n	80074e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007328:	4b2c      	ldr	r3, [pc, #176]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e0d6      	b.n	80074e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007338:	4b28      	ldr	r3, [pc, #160]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	f023 0207 	bic.w	r2, r3, #7
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	4925      	ldr	r1, [pc, #148]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 8007346:	4313      	orrs	r3, r2
 8007348:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800734a:	f7fd f83d 	bl	80043c8 <HAL_GetTick>
 800734e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007350:	e00a      	b.n	8007368 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007352:	f7fd f839 	bl	80043c8 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007360:	4293      	cmp	r3, r2
 8007362:	d901      	bls.n	8007368 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e0be      	b.n	80074e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007368:	4b1c      	ldr	r3, [pc, #112]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	429a      	cmp	r2, r3
 8007378:	d1eb      	bne.n	8007352 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d010      	beq.n	80073a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	4b14      	ldr	r3, [pc, #80]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	429a      	cmp	r2, r3
 8007394:	d208      	bcs.n	80073a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007396:	4b11      	ldr	r3, [pc, #68]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	f023 020f 	bic.w	r2, r3, #15
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	490e      	ldr	r1, [pc, #56]	; (80073dc <HAL_RCC_ClockConfig+0x244>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073a8:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <HAL_RCC_ClockConfig+0x240>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 030f 	and.w	r3, r3, #15
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d214      	bcs.n	80073e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073b6:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <HAL_RCC_ClockConfig+0x240>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f023 020f 	bic.w	r2, r3, #15
 80073be:	4906      	ldr	r1, [pc, #24]	; (80073d8 <HAL_RCC_ClockConfig+0x240>)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073c6:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <HAL_RCC_ClockConfig+0x240>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d005      	beq.n	80073e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e086      	b.n	80074e6 <HAL_RCC_ClockConfig+0x34e>
 80073d8:	52002000 	.word	0x52002000
 80073dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d010      	beq.n	800740e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	4b3f      	ldr	r3, [pc, #252]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d208      	bcs.n	800740e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073fc:	4b3c      	ldr	r3, [pc, #240]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	4939      	ldr	r1, [pc, #228]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 800740a:	4313      	orrs	r3, r2
 800740c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d010      	beq.n	800743c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	695a      	ldr	r2, [r3, #20]
 800741e:	4b34      	ldr	r3, [pc, #208]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007426:	429a      	cmp	r2, r3
 8007428:	d208      	bcs.n	800743c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800742a:	4b31      	ldr	r3, [pc, #196]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	492e      	ldr	r1, [pc, #184]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 8007438:	4313      	orrs	r3, r2
 800743a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0310 	and.w	r3, r3, #16
 8007444:	2b00      	cmp	r3, #0
 8007446:	d010      	beq.n	800746a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	699a      	ldr	r2, [r3, #24]
 800744c:	4b28      	ldr	r3, [pc, #160]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007454:	429a      	cmp	r2, r3
 8007456:	d208      	bcs.n	800746a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007458:	4b25      	ldr	r3, [pc, #148]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	4922      	ldr	r1, [pc, #136]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 8007466:	4313      	orrs	r3, r2
 8007468:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b00      	cmp	r3, #0
 8007474:	d010      	beq.n	8007498 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69da      	ldr	r2, [r3, #28]
 800747a:	4b1d      	ldr	r3, [pc, #116]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007482:	429a      	cmp	r2, r3
 8007484:	d208      	bcs.n	8007498 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007486:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	4917      	ldr	r1, [pc, #92]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 8007494:	4313      	orrs	r3, r2
 8007496:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007498:	f000 f834 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 800749c:	4602      	mov	r2, r0
 800749e:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	0a1b      	lsrs	r3, r3, #8
 80074a4:	f003 030f 	and.w	r3, r3, #15
 80074a8:	4912      	ldr	r1, [pc, #72]	; (80074f4 <HAL_RCC_ClockConfig+0x35c>)
 80074aa:	5ccb      	ldrb	r3, [r1, r3]
 80074ac:	f003 031f 	and.w	r3, r3, #31
 80074b0:	fa22 f303 	lsr.w	r3, r2, r3
 80074b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074b6:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <HAL_RCC_ClockConfig+0x358>)
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	4a0d      	ldr	r2, [pc, #52]	; (80074f4 <HAL_RCC_ClockConfig+0x35c>)
 80074c0:	5cd3      	ldrb	r3, [r2, r3]
 80074c2:	f003 031f 	and.w	r3, r3, #31
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	fa22 f303 	lsr.w	r3, r2, r3
 80074cc:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <HAL_RCC_ClockConfig+0x360>)
 80074ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074d0:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <HAL_RCC_ClockConfig+0x364>)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80074d6:	4b0a      	ldr	r3, [pc, #40]	; (8007500 <HAL_RCC_ClockConfig+0x368>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fc fa52 	bl	8003984 <HAL_InitTick>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	58024400 	.word	0x58024400
 80074f4:	0800f924 	.word	0x0800f924
 80074f8:	20000158 	.word	0x20000158
 80074fc:	20000154 	.word	0x20000154
 8007500:	2000015c 	.word	0x2000015c

08007504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007504:	b480      	push	{r7}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800750a:	4bb3      	ldr	r3, [pc, #716]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007512:	2b18      	cmp	r3, #24
 8007514:	f200 8155 	bhi.w	80077c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007518:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <HAL_RCC_GetSysClockFreq+0x1c>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007585 	.word	0x08007585
 8007524:	080077c3 	.word	0x080077c3
 8007528:	080077c3 	.word	0x080077c3
 800752c:	080077c3 	.word	0x080077c3
 8007530:	080077c3 	.word	0x080077c3
 8007534:	080077c3 	.word	0x080077c3
 8007538:	080077c3 	.word	0x080077c3
 800753c:	080077c3 	.word	0x080077c3
 8007540:	080075ab 	.word	0x080075ab
 8007544:	080077c3 	.word	0x080077c3
 8007548:	080077c3 	.word	0x080077c3
 800754c:	080077c3 	.word	0x080077c3
 8007550:	080077c3 	.word	0x080077c3
 8007554:	080077c3 	.word	0x080077c3
 8007558:	080077c3 	.word	0x080077c3
 800755c:	080077c3 	.word	0x080077c3
 8007560:	080075b1 	.word	0x080075b1
 8007564:	080077c3 	.word	0x080077c3
 8007568:	080077c3 	.word	0x080077c3
 800756c:	080077c3 	.word	0x080077c3
 8007570:	080077c3 	.word	0x080077c3
 8007574:	080077c3 	.word	0x080077c3
 8007578:	080077c3 	.word	0x080077c3
 800757c:	080077c3 	.word	0x080077c3
 8007580:	080075b7 	.word	0x080075b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007584:	4b94      	ldr	r3, [pc, #592]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0320 	and.w	r3, r3, #32
 800758c:	2b00      	cmp	r3, #0
 800758e:	d009      	beq.n	80075a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007590:	4b91      	ldr	r3, [pc, #580]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	08db      	lsrs	r3, r3, #3
 8007596:	f003 0303 	and.w	r3, r3, #3
 800759a:	4a90      	ldr	r2, [pc, #576]	; (80077dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800759c:	fa22 f303 	lsr.w	r3, r2, r3
 80075a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80075a2:	e111      	b.n	80077c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80075a4:	4b8d      	ldr	r3, [pc, #564]	; (80077dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075a6:	61bb      	str	r3, [r7, #24]
    break;
 80075a8:	e10e      	b.n	80077c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80075aa:	4b8d      	ldr	r3, [pc, #564]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075ac:	61bb      	str	r3, [r7, #24]
    break;
 80075ae:	e10b      	b.n	80077c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80075b0:	4b8c      	ldr	r3, [pc, #560]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80075b2:	61bb      	str	r3, [r7, #24]
    break;
 80075b4:	e108      	b.n	80077c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075b6:	4b88      	ldr	r3, [pc, #544]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80075c0:	4b85      	ldr	r3, [pc, #532]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	091b      	lsrs	r3, r3, #4
 80075c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075cc:	4b82      	ldr	r3, [pc, #520]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80075d6:	4b80      	ldr	r3, [pc, #512]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075da:	08db      	lsrs	r3, r3, #3
 80075dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	fb02 f303 	mul.w	r3, r2, r3
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 80e1 	beq.w	80077bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	f000 8083 	beq.w	8007708 <HAL_RCC_GetSysClockFreq+0x204>
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b02      	cmp	r3, #2
 8007606:	f200 80a1 	bhi.w	800774c <HAL_RCC_GetSysClockFreq+0x248>
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <HAL_RCC_GetSysClockFreq+0x114>
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d056      	beq.n	80076c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007616:	e099      	b.n	800774c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007618:	4b6f      	ldr	r3, [pc, #444]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	2b00      	cmp	r3, #0
 8007622:	d02d      	beq.n	8007680 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007624:	4b6c      	ldr	r3, [pc, #432]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	08db      	lsrs	r3, r3, #3
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	4a6b      	ldr	r2, [pc, #428]	; (80077dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
 8007634:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764e:	4b62      	ldr	r3, [pc, #392]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007662:	eddf 5a61 	vldr	s11, [pc, #388]	; 80077e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800767e:	e087      	b.n	8007790 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80077ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800768e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007692:	4b51      	ldr	r3, [pc, #324]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80076a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80077e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076c2:	e065      	b.n	8007790 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80077f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d6:	4b40      	ldr	r3, [pc, #256]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80077e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007706:	e043      	b.n	8007790 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007712:	eddf 6a38 	vldr	s13, [pc, #224]	; 80077f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771a:	4b2f      	ldr	r3, [pc, #188]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772a:	ed97 6a02 	vldr	s12, [r7, #8]
 800772e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80077e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800773e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800774a:	e021      	b.n	8007790 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	eddf 6a26 	vldr	s13, [pc, #152]	; 80077f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800775a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775e:	4b1e      	ldr	r3, [pc, #120]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007772:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80077e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800778e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007790:	4b11      	ldr	r3, [pc, #68]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	0a5b      	lsrs	r3, r3, #9
 8007796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779a:	3301      	adds	r3, #1
 800779c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80077a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077b4:	ee17 3a90 	vmov	r3, s15
 80077b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80077ba:	e005      	b.n	80077c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	61bb      	str	r3, [r7, #24]
    break;
 80077c0:	e002      	b.n	80077c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80077c2:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077c4:	61bb      	str	r3, [r7, #24]
    break;
 80077c6:	bf00      	nop
  }

  return sysclockfreq;
 80077c8:	69bb      	ldr	r3, [r7, #24]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3724      	adds	r7, #36	; 0x24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	58024400 	.word	0x58024400
 80077dc:	03d09000 	.word	0x03d09000
 80077e0:	003d0900 	.word	0x003d0900
 80077e4:	007a1200 	.word	0x007a1200
 80077e8:	46000000 	.word	0x46000000
 80077ec:	4c742400 	.word	0x4c742400
 80077f0:	4a742400 	.word	0x4a742400
 80077f4:	4af42400 	.word	0x4af42400

080077f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077fe:	f7ff fe81 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 8007802:	4602      	mov	r2, r0
 8007804:	4b10      	ldr	r3, [pc, #64]	; (8007848 <HAL_RCC_GetHCLKFreq+0x50>)
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	0a1b      	lsrs	r3, r3, #8
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	490f      	ldr	r1, [pc, #60]	; (800784c <HAL_RCC_GetHCLKFreq+0x54>)
 8007810:	5ccb      	ldrb	r3, [r1, r3]
 8007812:	f003 031f 	and.w	r3, r3, #31
 8007816:	fa22 f303 	lsr.w	r3, r2, r3
 800781a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <HAL_RCC_GetHCLKFreq+0x50>)
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	4a09      	ldr	r2, [pc, #36]	; (800784c <HAL_RCC_GetHCLKFreq+0x54>)
 8007826:	5cd3      	ldrb	r3, [r2, r3]
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	fa22 f303 	lsr.w	r3, r2, r3
 8007832:	4a07      	ldr	r2, [pc, #28]	; (8007850 <HAL_RCC_GetHCLKFreq+0x58>)
 8007834:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007836:	4a07      	ldr	r2, [pc, #28]	; (8007854 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800783c:	4b04      	ldr	r3, [pc, #16]	; (8007850 <HAL_RCC_GetHCLKFreq+0x58>)
 800783e:	681b      	ldr	r3, [r3, #0]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	58024400 	.word	0x58024400
 800784c:	0800f924 	.word	0x0800f924
 8007850:	20000158 	.word	0x20000158
 8007854:	20000154 	.word	0x20000154

08007858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800785c:	f7ff ffcc 	bl	80077f8 <HAL_RCC_GetHCLKFreq>
 8007860:	4602      	mov	r2, r0
 8007862:	4b06      	ldr	r3, [pc, #24]	; (800787c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	091b      	lsrs	r3, r3, #4
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	4904      	ldr	r1, [pc, #16]	; (8007880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800786e:	5ccb      	ldrb	r3, [r1, r3]
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007878:	4618      	mov	r0, r3
 800787a:	bd80      	pop	{r7, pc}
 800787c:	58024400 	.word	0x58024400
 8007880:	0800f924 	.word	0x0800f924

08007884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007888:	f7ff ffb6 	bl	80077f8 <HAL_RCC_GetHCLKFreq>
 800788c:	4602      	mov	r2, r0
 800788e:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	0a1b      	lsrs	r3, r3, #8
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	4904      	ldr	r1, [pc, #16]	; (80078ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800789a:	5ccb      	ldrb	r3, [r1, r3]
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	58024400 	.word	0x58024400
 80078ac:	0800f924 	.word	0x0800f924

080078b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	223f      	movs	r2, #63	; 0x3f
 80078be:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078c0:	4b1a      	ldr	r3, [pc, #104]	; (800792c <HAL_RCC_GetClockConfig+0x7c>)
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f003 0207 	and.w	r2, r3, #7
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80078cc:	4b17      	ldr	r3, [pc, #92]	; (800792c <HAL_RCC_GetClockConfig+0x7c>)
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80078d8:	4b14      	ldr	r3, [pc, #80]	; (800792c <HAL_RCC_GetClockConfig+0x7c>)
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f003 020f 	and.w	r2, r3, #15
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80078e4:	4b11      	ldr	r3, [pc, #68]	; (800792c <HAL_RCC_GetClockConfig+0x7c>)
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80078f0:	4b0e      	ldr	r3, [pc, #56]	; (800792c <HAL_RCC_GetClockConfig+0x7c>)
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <HAL_RCC_GetClockConfig+0x7c>)
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007908:	4b08      	ldr	r3, [pc, #32]	; (800792c <HAL_RCC_GetClockConfig+0x7c>)
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007914:	4b06      	ldr	r3, [pc, #24]	; (8007930 <HAL_RCC_GetClockConfig+0x80>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 020f 	and.w	r2, r3, #15
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	601a      	str	r2, [r3, #0]
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	58024400 	.word	0x58024400
 8007930:	52002000 	.word	0x52002000

08007934 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800793c:	2300      	movs	r3, #0
 800793e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007940:	2300      	movs	r3, #0
 8007942:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d03f      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007958:	d02a      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800795a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800795e:	d824      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007964:	d018      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800796a:	d81e      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007974:	d007      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007976:	e018      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007978:	4ba3      	ldr	r3, [pc, #652]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	4aa2      	ldr	r2, [pc, #648]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800797e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007984:	e015      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3304      	adds	r3, #4
 800798a:	2102      	movs	r1, #2
 800798c:	4618      	mov	r0, r3
 800798e:	f001 fff9 	bl	8009984 <RCCEx_PLL2_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007996:	e00c      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3324      	adds	r3, #36	; 0x24
 800799c:	2102      	movs	r1, #2
 800799e:	4618      	mov	r0, r3
 80079a0:	f002 f8a2 	bl	8009ae8 <RCCEx_PLL3_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80079a8:	e003      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	75fb      	strb	r3, [r7, #23]
      break;
 80079ae:	e000      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80079b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d109      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80079b8:	4b93      	ldr	r3, [pc, #588]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c4:	4990      	ldr	r1, [pc, #576]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	650b      	str	r3, [r1, #80]	; 0x50
 80079ca:	e001      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d03d      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d826      	bhi.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	08007a01 	.word	0x08007a01
 80079f0:	08007a0f 	.word	0x08007a0f
 80079f4:	08007a21 	.word	0x08007a21
 80079f8:	08007a39 	.word	0x08007a39
 80079fc:	08007a39 	.word	0x08007a39
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a00:	4b81      	ldr	r3, [pc, #516]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	4a80      	ldr	r2, [pc, #512]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a0c:	e015      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3304      	adds	r3, #4
 8007a12:	2100      	movs	r1, #0
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 ffb5 	bl	8009984 <RCCEx_PLL2_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a1e:	e00c      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3324      	adds	r3, #36	; 0x24
 8007a24:	2100      	movs	r1, #0
 8007a26:	4618      	mov	r0, r3
 8007a28:	f002 f85e 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a30:	e003      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	75fb      	strb	r3, [r7, #23]
      break;
 8007a36:	e000      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d109      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a40:	4b71      	ldr	r3, [pc, #452]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a44:	f023 0207 	bic.w	r2, r3, #7
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4c:	496e      	ldr	r1, [pc, #440]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	650b      	str	r3, [r1, #80]	; 0x50
 8007a52:	e001      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d042      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a6c:	d02b      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a72:	d825      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a74:	2bc0      	cmp	r3, #192	; 0xc0
 8007a76:	d028      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007a78:	2bc0      	cmp	r3, #192	; 0xc0
 8007a7a:	d821      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a7c:	2b80      	cmp	r3, #128	; 0x80
 8007a7e:	d016      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007a80:	2b80      	cmp	r3, #128	; 0x80
 8007a82:	d81d      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007a88:	2b40      	cmp	r3, #64	; 0x40
 8007a8a:	d007      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007a8c:	e018      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a8e:	4b5e      	ldr	r3, [pc, #376]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a92:	4a5d      	ldr	r2, [pc, #372]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a9a:	e017      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f001 ff6e 	bl	8009984 <RCCEx_PLL2_Config>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007aac:	e00e      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3324      	adds	r3, #36	; 0x24
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f002 f817 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007abe:	e005      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac4:	e002      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007ac6:	bf00      	nop
 8007ac8:	e000      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007ad2:	4b4d      	ldr	r3, [pc, #308]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	494a      	ldr	r1, [pc, #296]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	650b      	str	r3, [r1, #80]	; 0x50
 8007ae4:	e001      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d049      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007afc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b00:	d030      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007b02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b06:	d82a      	bhi.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007b08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b0c:	d02c      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007b0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b12:	d824      	bhi.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b18:	d018      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b1e:	d81e      	bhi.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b28:	d007      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007b2a:	e018      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b2c:	4b36      	ldr	r3, [pc, #216]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4a35      	ldr	r2, [pc, #212]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b38:	e017      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 ff1f 	bl	8009984 <RCCEx_PLL2_Config>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007b4a:	e00e      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3324      	adds	r3, #36	; 0x24
 8007b50:	2100      	movs	r1, #0
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 ffc8 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b5c:	e005      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	75fb      	strb	r3, [r7, #23]
      break;
 8007b62:	e002      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007b64:	bf00      	nop
 8007b66:	e000      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b70:	4b25      	ldr	r3, [pc, #148]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b74:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b7e:	4922      	ldr	r1, [pc, #136]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	658b      	str	r3, [r1, #88]	; 0x58
 8007b84:	e001      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d04b      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ba0:	d030      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ba6:	d82a      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ba8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bac:	d02e      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007bae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bb2:	d824      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bb8:	d018      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bbe:	d81e      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bc8:	d007      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007bca:	e018      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	4a0d      	ldr	r2, [pc, #52]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bd8:	e019      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	2100      	movs	r1, #0
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 fecf 	bl	8009984 <RCCEx_PLL2_Config>
 8007be6:	4603      	mov	r3, r0
 8007be8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007bea:	e010      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3324      	adds	r3, #36	; 0x24
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 ff78 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bfc:	e007      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	75fb      	strb	r3, [r7, #23]
      break;
 8007c02:	e004      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007c04:	bf00      	nop
 8007c06:	e002      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007c08:	58024400 	.word	0x58024400
      break;
 8007c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c14:	4b99      	ldr	r3, [pc, #612]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c18:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c22:	4996      	ldr	r1, [pc, #600]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	658b      	str	r3, [r1, #88]	; 0x58
 8007c28:	e001      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d032      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c3e:	2b30      	cmp	r3, #48	; 0x30
 8007c40:	d01c      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007c42:	2b30      	cmp	r3, #48	; 0x30
 8007c44:	d817      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d00c      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d813      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d016      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007c52:	2b10      	cmp	r3, #16
 8007c54:	d10f      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c56:	4b89      	ldr	r3, [pc, #548]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	4a88      	ldr	r2, [pc, #544]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007c62:	e00e      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3304      	adds	r3, #4
 8007c68:	2102      	movs	r1, #2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 fe8a 	bl	8009984 <RCCEx_PLL2_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007c74:	e005      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7a:	e002      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007c7c:	bf00      	nop
 8007c7e:	e000      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d109      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c88:	4b7c      	ldr	r3, [pc, #496]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c94:	4979      	ldr	r1, [pc, #484]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c9a:	e001      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d047      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cb4:	d030      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cba:	d82a      	bhi.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007cbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cc0:	d02c      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007cc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cc6:	d824      	bhi.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ccc:	d018      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd2:	d81e      	bhi.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cdc:	d007      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007cde:	e018      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce0:	4b66      	ldr	r3, [pc, #408]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	4a65      	ldr	r2, [pc, #404]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007cec:	e017      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 fe45 	bl	8009984 <RCCEx_PLL2_Config>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007cfe:	e00e      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3324      	adds	r3, #36	; 0x24
 8007d04:	2100      	movs	r1, #0
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 feee 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d10:	e005      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	75fb      	strb	r3, [r7, #23]
      break;
 8007d16:	e002      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007d18:	bf00      	nop
 8007d1a:	e000      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d109      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d24:	4b55      	ldr	r3, [pc, #340]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d28:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d30:	4952      	ldr	r1, [pc, #328]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	650b      	str	r3, [r1, #80]	; 0x50
 8007d36:	e001      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d049      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d50:	d02e      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007d52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d56:	d828      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d5c:	d02a      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007d5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d62:	d822      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d68:	d026      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007d6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d6e:	d81c      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d74:	d010      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d7a:	d816      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01d      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d84:	d111      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f001 fdf9 	bl	8009984 <RCCEx_PLL2_Config>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007d96:	e012      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3324      	adds	r3, #36	; 0x24
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f001 fea2 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007da4:	4603      	mov	r3, r0
 8007da6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007da8:	e009      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
      break;
 8007dae:	e006      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007db0:	bf00      	nop
 8007db2:	e004      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007db4:	bf00      	nop
 8007db6:	e002      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007db8:	bf00      	nop
 8007dba:	e000      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d109      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007dc4:	4b2d      	ldr	r3, [pc, #180]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd0:	492a      	ldr	r1, [pc, #168]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	650b      	str	r3, [r1, #80]	; 0x50
 8007dd6:	e001      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d04d      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007df2:	d02e      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007df8:	d828      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfe:	d02a      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e04:	d822      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007e06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e0a:	d026      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007e0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e10:	d81c      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e16:	d010      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e1c:	d816      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01d      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e26:	d111      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 fda8 	bl	8009984 <RCCEx_PLL2_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e38:	e012      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3324      	adds	r3, #36	; 0x24
 8007e3e:	2101      	movs	r1, #1
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 fe51 	bl	8009ae8 <RCCEx_PLL3_Config>
 8007e46:	4603      	mov	r3, r0
 8007e48:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e4a:	e009      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e50:	e006      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e52:	bf00      	nop
 8007e54:	e004      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e56:	bf00      	nop
 8007e58:	e002      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e5a:	bf00      	nop
 8007e5c:	e000      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10c      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e66:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e74:	4901      	ldr	r1, [pc, #4]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	658b      	str	r3, [r1, #88]	; 0x58
 8007e7a:	e003      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d02f      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e98:	d00e      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e9e:	d814      	bhi.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d015      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007ea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ea8:	d10f      	bne.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eaa:	4baf      	ldr	r3, [pc, #700]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	4aae      	ldr	r2, [pc, #696]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007eb6:	e00c      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f001 fd60 	bl	8009984 <RCCEx_PLL2_Config>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007ec8:	e003      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ece:	e000      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ed8:	4ba3      	ldr	r3, [pc, #652]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007edc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee4:	49a0      	ldr	r1, [pc, #640]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	650b      	str	r3, [r1, #80]	; 0x50
 8007eea:	e001      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d032      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d81b      	bhi.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007f04:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f43 	.word	0x08007f43
 8007f10:	08007f1d 	.word	0x08007f1d
 8007f14:	08007f2b 	.word	0x08007f2b
 8007f18:	08007f43 	.word	0x08007f43
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f1c:	4b92      	ldr	r3, [pc, #584]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	4a91      	ldr	r2, [pc, #580]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007f28:	e00c      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	2102      	movs	r1, #2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 fd27 	bl	8009984 <RCCEx_PLL2_Config>
 8007f36:	4603      	mov	r3, r0
 8007f38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007f3a:	e003      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f40:	e000      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f4a:	4b87      	ldr	r3, [pc, #540]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f4e:	f023 0203 	bic.w	r2, r3, #3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f56:	4984      	ldr	r1, [pc, #528]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f5c:	e001      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 8086 	beq.w	800807c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f70:	4b7e      	ldr	r3, [pc, #504]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a7d      	ldr	r2, [pc, #500]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f7c:	f7fc fa24 	bl	80043c8 <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f82:	e009      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f84:	f7fc fa20 	bl	80043c8 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b64      	cmp	r3, #100	; 0x64
 8007f90:	d902      	bls.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	75fb      	strb	r3, [r7, #23]
        break;
 8007f96:	e005      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f98:	4b74      	ldr	r3, [pc, #464]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0ef      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d166      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007faa:	4b6f      	ldr	r3, [pc, #444]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fb4:	4053      	eors	r3, r2
 8007fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d013      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fbe:	4b6a      	ldr	r3, [pc, #424]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fc8:	4b67      	ldr	r3, [pc, #412]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fcc:	4a66      	ldr	r2, [pc, #408]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fd4:	4b64      	ldr	r3, [pc, #400]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd8:	4a63      	ldr	r2, [pc, #396]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007fe0:	4a61      	ldr	r2, [pc, #388]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff0:	d115      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff2:	f7fc f9e9 	bl	80043c8 <HAL_GetTick>
 8007ff6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ff8:	e00b      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ffa:	f7fc f9e5 	bl	80043c8 <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	f241 3288 	movw	r2, #5000	; 0x1388
 8008008:	4293      	cmp	r3, r2
 800800a:	d902      	bls.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	75fb      	strb	r3, [r7, #23]
            break;
 8008010:	e005      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008012:	4b55      	ldr	r3, [pc, #340]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0ed      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d126      	bne.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800802a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800802e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008032:	d10d      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008034:	4b4c      	ldr	r3, [pc, #304]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008042:	0919      	lsrs	r1, r3, #4
 8008044:	4b4a      	ldr	r3, [pc, #296]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008046:	400b      	ands	r3, r1
 8008048:	4947      	ldr	r1, [pc, #284]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800804a:	4313      	orrs	r3, r2
 800804c:	610b      	str	r3, [r1, #16]
 800804e:	e005      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008050:	4b45      	ldr	r3, [pc, #276]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	4a44      	ldr	r2, [pc, #272]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008056:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800805a:	6113      	str	r3, [r2, #16]
 800805c:	4b42      	ldr	r3, [pc, #264]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800805e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800806a:	493f      	ldr	r1, [pc, #252]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800806c:	4313      	orrs	r3, r2
 800806e:	670b      	str	r3, [r1, #112]	; 0x70
 8008070:	e004      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	75bb      	strb	r3, [r7, #22]
 8008076:	e001      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8085 	beq.w	8008194 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800808e:	2b28      	cmp	r3, #40	; 0x28
 8008090:	d866      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	08008175 	.word	0x08008175
 800809c:	08008161 	.word	0x08008161
 80080a0:	08008161 	.word	0x08008161
 80080a4:	08008161 	.word	0x08008161
 80080a8:	08008161 	.word	0x08008161
 80080ac:	08008161 	.word	0x08008161
 80080b0:	08008161 	.word	0x08008161
 80080b4:	08008161 	.word	0x08008161
 80080b8:	0800813d 	.word	0x0800813d
 80080bc:	08008161 	.word	0x08008161
 80080c0:	08008161 	.word	0x08008161
 80080c4:	08008161 	.word	0x08008161
 80080c8:	08008161 	.word	0x08008161
 80080cc:	08008161 	.word	0x08008161
 80080d0:	08008161 	.word	0x08008161
 80080d4:	08008161 	.word	0x08008161
 80080d8:	0800814f 	.word	0x0800814f
 80080dc:	08008161 	.word	0x08008161
 80080e0:	08008161 	.word	0x08008161
 80080e4:	08008161 	.word	0x08008161
 80080e8:	08008161 	.word	0x08008161
 80080ec:	08008161 	.word	0x08008161
 80080f0:	08008161 	.word	0x08008161
 80080f4:	08008161 	.word	0x08008161
 80080f8:	08008175 	.word	0x08008175
 80080fc:	08008161 	.word	0x08008161
 8008100:	08008161 	.word	0x08008161
 8008104:	08008161 	.word	0x08008161
 8008108:	08008161 	.word	0x08008161
 800810c:	08008161 	.word	0x08008161
 8008110:	08008161 	.word	0x08008161
 8008114:	08008161 	.word	0x08008161
 8008118:	08008175 	.word	0x08008175
 800811c:	08008161 	.word	0x08008161
 8008120:	08008161 	.word	0x08008161
 8008124:	08008161 	.word	0x08008161
 8008128:	08008161 	.word	0x08008161
 800812c:	08008161 	.word	0x08008161
 8008130:	08008161 	.word	0x08008161
 8008134:	08008161 	.word	0x08008161
 8008138:	08008175 	.word	0x08008175
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3304      	adds	r3, #4
 8008140:	2101      	movs	r1, #1
 8008142:	4618      	mov	r0, r3
 8008144:	f001 fc1e 	bl	8009984 <RCCEx_PLL2_Config>
 8008148:	4603      	mov	r3, r0
 800814a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800814c:	e013      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3324      	adds	r3, #36	; 0x24
 8008152:	2101      	movs	r1, #1
 8008154:	4618      	mov	r0, r3
 8008156:	f001 fcc7 	bl	8009ae8 <RCCEx_PLL3_Config>
 800815a:	4603      	mov	r3, r0
 800815c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800815e:	e00a      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	75fb      	strb	r3, [r7, #23]
      break;
 8008164:	e007      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008166:	bf00      	nop
 8008168:	58024400 	.word	0x58024400
 800816c:	58024800 	.word	0x58024800
 8008170:	00ffffcf 	.word	0x00ffffcf
      break;
 8008174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d109      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800817c:	4b96      	ldr	r3, [pc, #600]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800817e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008180:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008188:	4993      	ldr	r1, [pc, #588]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800818a:	4313      	orrs	r3, r2
 800818c:	654b      	str	r3, [r1, #84]	; 0x54
 800818e:	e001      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d038      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a4:	2b05      	cmp	r3, #5
 80081a6:	d821      	bhi.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80081a8:	a201      	add	r2, pc, #4	; (adr r2, 80081b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80081aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ae:	bf00      	nop
 80081b0:	080081f3 	.word	0x080081f3
 80081b4:	080081c9 	.word	0x080081c9
 80081b8:	080081db 	.word	0x080081db
 80081bc:	080081f3 	.word	0x080081f3
 80081c0:	080081f3 	.word	0x080081f3
 80081c4:	080081f3 	.word	0x080081f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3304      	adds	r3, #4
 80081cc:	2101      	movs	r1, #1
 80081ce:	4618      	mov	r0, r3
 80081d0:	f001 fbd8 	bl	8009984 <RCCEx_PLL2_Config>
 80081d4:	4603      	mov	r3, r0
 80081d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80081d8:	e00c      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3324      	adds	r3, #36	; 0x24
 80081de:	2101      	movs	r1, #1
 80081e0:	4618      	mov	r0, r3
 80081e2:	f001 fc81 	bl	8009ae8 <RCCEx_PLL3_Config>
 80081e6:	4603      	mov	r3, r0
 80081e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80081ea:	e003      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	75fb      	strb	r3, [r7, #23]
      break;
 80081f0:	e000      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80081f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d109      	bne.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80081fa:	4b77      	ldr	r3, [pc, #476]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fe:	f023 0207 	bic.w	r2, r3, #7
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008206:	4974      	ldr	r1, [pc, #464]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008208:	4313      	orrs	r3, r2
 800820a:	654b      	str	r3, [r1, #84]	; 0x54
 800820c:	e001      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b00      	cmp	r3, #0
 800821c:	d03a      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008224:	2b05      	cmp	r3, #5
 8008226:	d821      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008228:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800822a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822e:	bf00      	nop
 8008230:	08008273 	.word	0x08008273
 8008234:	08008249 	.word	0x08008249
 8008238:	0800825b 	.word	0x0800825b
 800823c:	08008273 	.word	0x08008273
 8008240:	08008273 	.word	0x08008273
 8008244:	08008273 	.word	0x08008273
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3304      	adds	r3, #4
 800824c:	2101      	movs	r1, #1
 800824e:	4618      	mov	r0, r3
 8008250:	f001 fb98 	bl	8009984 <RCCEx_PLL2_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008258:	e00c      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3324      	adds	r3, #36	; 0x24
 800825e:	2101      	movs	r1, #1
 8008260:	4618      	mov	r0, r3
 8008262:	f001 fc41 	bl	8009ae8 <RCCEx_PLL3_Config>
 8008266:	4603      	mov	r3, r0
 8008268:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800826a:	e003      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	75fb      	strb	r3, [r7, #23]
      break;
 8008270:	e000      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10a      	bne.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800827a:	4b57      	ldr	r3, [pc, #348]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800827c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827e:	f023 0207 	bic.w	r2, r3, #7
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008288:	4953      	ldr	r1, [pc, #332]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800828a:	4313      	orrs	r3, r2
 800828c:	658b      	str	r3, [r1, #88]	; 0x58
 800828e:	e001      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0320 	and.w	r3, r3, #32
 800829c:	2b00      	cmp	r3, #0
 800829e:	d04b      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082aa:	d02e      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80082ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082b0:	d828      	bhi.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80082b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b6:	d02a      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80082b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082bc:	d822      	bhi.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80082be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082c2:	d026      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80082c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082c8:	d81c      	bhi.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80082ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ce:	d010      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80082d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d4:	d816      	bhi.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d01d      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80082da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082de:	d111      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3304      	adds	r3, #4
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 fb4c 	bl	8009984 <RCCEx_PLL2_Config>
 80082ec:	4603      	mov	r3, r0
 80082ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80082f0:	e012      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3324      	adds	r3, #36	; 0x24
 80082f6:	2102      	movs	r1, #2
 80082f8:	4618      	mov	r0, r3
 80082fa:	f001 fbf5 	bl	8009ae8 <RCCEx_PLL3_Config>
 80082fe:	4603      	mov	r3, r0
 8008300:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008302:	e009      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	75fb      	strb	r3, [r7, #23]
      break;
 8008308:	e006      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800830a:	bf00      	nop
 800830c:	e004      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800830e:	bf00      	nop
 8008310:	e002      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008312:	bf00      	nop
 8008314:	e000      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10a      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800831e:	4b2e      	ldr	r3, [pc, #184]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008322:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800832c:	492a      	ldr	r1, [pc, #168]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800832e:	4313      	orrs	r3, r2
 8008330:	654b      	str	r3, [r1, #84]	; 0x54
 8008332:	e001      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008334:	7dfb      	ldrb	r3, [r7, #23]
 8008336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d04d      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800834a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800834e:	d02e      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008350:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008354:	d828      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800835a:	d02a      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800835c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008360:	d822      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008362:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008366:	d026      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800836c:	d81c      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800836e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008372:	d010      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008378:	d816      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d01d      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800837e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008382:	d111      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3304      	adds	r3, #4
 8008388:	2100      	movs	r1, #0
 800838a:	4618      	mov	r0, r3
 800838c:	f001 fafa 	bl	8009984 <RCCEx_PLL2_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008394:	e012      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3324      	adds	r3, #36	; 0x24
 800839a:	2102      	movs	r1, #2
 800839c:	4618      	mov	r0, r3
 800839e:	f001 fba3 	bl	8009ae8 <RCCEx_PLL3_Config>
 80083a2:	4603      	mov	r3, r0
 80083a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80083a6:	e009      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	75fb      	strb	r3, [r7, #23]
      break;
 80083ac:	e006      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80083ae:	bf00      	nop
 80083b0:	e004      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80083b2:	bf00      	nop
 80083b4:	e002      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80083b6:	bf00      	nop
 80083b8:	e000      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80083ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10c      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083d0:	4901      	ldr	r1, [pc, #4]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	658b      	str	r3, [r1, #88]	; 0x58
 80083d6:	e003      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80083d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d04b      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083f6:	d02e      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80083f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083fc:	d828      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008402:	d02a      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008408:	d822      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800840a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800840e:	d026      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008410:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008414:	d81c      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800841a:	d010      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800841c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008420:	d816      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d01d      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800842a:	d111      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3304      	adds	r3, #4
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f001 faa6 	bl	8009984 <RCCEx_PLL2_Config>
 8008438:	4603      	mov	r3, r0
 800843a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800843c:	e012      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3324      	adds	r3, #36	; 0x24
 8008442:	2102      	movs	r1, #2
 8008444:	4618      	mov	r0, r3
 8008446:	f001 fb4f 	bl	8009ae8 <RCCEx_PLL3_Config>
 800844a:	4603      	mov	r3, r0
 800844c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800844e:	e009      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	75fb      	strb	r3, [r7, #23]
      break;
 8008454:	e006      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008456:	bf00      	nop
 8008458:	e004      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800845a:	bf00      	nop
 800845c:	e002      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800845e:	bf00      	nop
 8008460:	e000      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800846a:	4b9d      	ldr	r3, [pc, #628]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800846c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008478:	4999      	ldr	r1, [pc, #612]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800847a:	4313      	orrs	r3, r2
 800847c:	658b      	str	r3, [r1, #88]	; 0x58
 800847e:	e001      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008480:	7dfb      	ldrb	r3, [r7, #23]
 8008482:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0308 	and.w	r3, r3, #8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01a      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849a:	d10a      	bne.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3324      	adds	r3, #36	; 0x24
 80084a0:	2102      	movs	r1, #2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 fb20 	bl	8009ae8 <RCCEx_PLL3_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80084b2:	4b8b      	ldr	r3, [pc, #556]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c0:	4987      	ldr	r1, [pc, #540]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0310 	and.w	r3, r3, #16
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d01a      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084dc:	d10a      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	3324      	adds	r3, #36	; 0x24
 80084e2:	2102      	movs	r1, #2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f001 faff 	bl	8009ae8 <RCCEx_PLL3_Config>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084f4:	4b7a      	ldr	r3, [pc, #488]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008502:	4977      	ldr	r1, [pc, #476]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008504:	4313      	orrs	r3, r2
 8008506:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d034      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800851a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800851e:	d01d      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008524:	d817      	bhi.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800852a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852e:	d009      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008530:	e011      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3304      	adds	r3, #4
 8008536:	2100      	movs	r1, #0
 8008538:	4618      	mov	r0, r3
 800853a:	f001 fa23 	bl	8009984 <RCCEx_PLL2_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008542:	e00c      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3324      	adds	r3, #36	; 0x24
 8008548:	2102      	movs	r1, #2
 800854a:	4618      	mov	r0, r3
 800854c:	f001 facc 	bl	8009ae8 <RCCEx_PLL3_Config>
 8008550:	4603      	mov	r3, r0
 8008552:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008554:	e003      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	75fb      	strb	r3, [r7, #23]
      break;
 800855a:	e000      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800855c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008564:	4b5e      	ldr	r3, [pc, #376]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008572:	495b      	ldr	r1, [pc, #364]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008574:	4313      	orrs	r3, r2
 8008576:	658b      	str	r3, [r1, #88]	; 0x58
 8008578:	e001      	b.n	800857e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d033      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008590:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008594:	d01c      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008596:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800859a:	d816      	bhi.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800859c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085a0:	d003      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80085a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085a6:	d007      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80085a8:	e00f      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085aa:	4b4d      	ldr	r3, [pc, #308]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	4a4c      	ldr	r2, [pc, #304]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80085b6:	e00c      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3324      	adds	r3, #36	; 0x24
 80085bc:	2101      	movs	r1, #1
 80085be:	4618      	mov	r0, r3
 80085c0:	f001 fa92 	bl	8009ae8 <RCCEx_PLL3_Config>
 80085c4:	4603      	mov	r3, r0
 80085c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80085c8:	e003      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	75fb      	strb	r3, [r7, #23]
      break;
 80085ce:	e000      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80085d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10a      	bne.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085d8:	4b41      	ldr	r3, [pc, #260]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e6:	493e      	ldr	r1, [pc, #248]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	654b      	str	r3, [r1, #84]	; 0x54
 80085ec:	e001      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d029      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800860a:	d007      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800860c:	e00f      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800860e:	4b34      	ldr	r3, [pc, #208]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008612:	4a33      	ldr	r2, [pc, #204]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008618:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800861a:	e00b      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3304      	adds	r3, #4
 8008620:	2102      	movs	r1, #2
 8008622:	4618      	mov	r0, r3
 8008624:	f001 f9ae 	bl	8009984 <RCCEx_PLL2_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800862c:	e002      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	75fb      	strb	r3, [r7, #23]
      break;
 8008632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008634:	7dfb      	ldrb	r3, [r7, #23]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d109      	bne.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800863a:	4b29      	ldr	r3, [pc, #164]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800863c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800863e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008646:	4926      	ldr	r1, [pc, #152]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008648:	4313      	orrs	r3, r2
 800864a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800864c:	e001      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3324      	adds	r3, #36	; 0x24
 8008662:	2102      	movs	r1, #2
 8008664:	4618      	mov	r0, r3
 8008666:	f001 fa3f 	bl	8009ae8 <RCCEx_PLL3_Config>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d033      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008688:	d017      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800868a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800868e:	d811      	bhi.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008694:	d013      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800869a:	d80b      	bhi.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800869c:	2b00      	cmp	r3, #0
 800869e:	d010      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80086a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086a4:	d106      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086a6:	4b0e      	ldr	r3, [pc, #56]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086aa:	4a0d      	ldr	r2, [pc, #52]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80086b2:	e007      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	75fb      	strb	r3, [r7, #23]
      break;
 80086b8:	e004      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80086ba:	bf00      	nop
 80086bc:	e002      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80086be:	bf00      	nop
 80086c0:	e000      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80086c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10c      	bne.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80086ca:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d6:	4902      	ldr	r1, [pc, #8]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	654b      	str	r3, [r1, #84]	; 0x54
 80086dc:	e004      	b.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80086de:	bf00      	nop
 80086e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
 80086e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d008      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80086f4:	4b31      	ldr	r3, [pc, #196]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008700:	492e      	ldr	r1, [pc, #184]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008702:	4313      	orrs	r3, r2
 8008704:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d009      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008712:	4b2a      	ldr	r3, [pc, #168]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008720:	4926      	ldr	r1, [pc, #152]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008722:	4313      	orrs	r3, r2
 8008724:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d008      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008732:	4b22      	ldr	r3, [pc, #136]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008736:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800873e:	491f      	ldr	r1, [pc, #124]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008740:	4313      	orrs	r3, r2
 8008742:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00d      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008750:	4b1a      	ldr	r3, [pc, #104]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	4a19      	ldr	r2, [pc, #100]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008756:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800875a:	6113      	str	r3, [r2, #16]
 800875c:	4b17      	ldr	r3, [pc, #92]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008766:	4915      	ldr	r1, [pc, #84]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008768:	4313      	orrs	r3, r2
 800876a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	da08      	bge.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008774:	4b11      	ldr	r3, [pc, #68]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008778:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008780:	490e      	ldr	r1, [pc, #56]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008782:	4313      	orrs	r3, r2
 8008784:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d009      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008792:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008796:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a0:	4906      	ldr	r1, [pc, #24]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80087a6:	7dbb      	ldrb	r3, [r7, #22]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	e000      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	58024400 	.word	0x58024400

080087c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b090      	sub	sp, #64	; 0x40
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ce:	f040 8095 	bne.w	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80087d2:	4b97      	ldr	r3, [pc, #604]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80087dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087de:	2b04      	cmp	r3, #4
 80087e0:	f200 8088 	bhi.w	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80087e4:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	08008801 	.word	0x08008801
 80087f0:	08008829 	.word	0x08008829
 80087f4:	08008851 	.word	0x08008851
 80087f8:	080088ed 	.word	0x080088ed
 80087fc:	08008879 	.word	0x08008879
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008800:	4b8b      	ldr	r3, [pc, #556]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800880c:	d108      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800880e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008812:	4618      	mov	r0, r3
 8008814:	f000 ff64 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800881c:	f000 bc94 	b.w	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008824:	f000 bc90 	b.w	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008828:	4b81      	ldr	r3, [pc, #516]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008834:	d108      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008836:	f107 0318 	add.w	r3, r7, #24
 800883a:	4618      	mov	r0, r3
 800883c:	f000 fca8 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008844:	f000 bc80 	b.w	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800884c:	f000 bc7c 	b.w	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008850:	4b77      	ldr	r3, [pc, #476]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800885c:	d108      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800885e:	f107 030c 	add.w	r3, r7, #12
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fde8 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800886c:	f000 bc6c 	b.w	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008874:	f000 bc68 	b.w	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008878:	4b6d      	ldr	r3, [pc, #436]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800887a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800887c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008880:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008882:	4b6b      	ldr	r3, [pc, #428]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0304 	and.w	r3, r3, #4
 800888a:	2b04      	cmp	r3, #4
 800888c:	d10c      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008890:	2b00      	cmp	r3, #0
 8008892:	d109      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008894:	4b66      	ldr	r3, [pc, #408]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	08db      	lsrs	r3, r3, #3
 800889a:	f003 0303 	and.w	r3, r3, #3
 800889e:	4a65      	ldr	r2, [pc, #404]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80088a0:	fa22 f303 	lsr.w	r3, r2, r3
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a6:	e01f      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088a8:	4b61      	ldr	r3, [pc, #388]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088b4:	d106      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80088b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088bc:	d102      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80088be:	4b5e      	ldr	r3, [pc, #376]	; (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088c2:	e011      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088c4:	4b5a      	ldr	r3, [pc, #360]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088d0:	d106      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80088d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d8:	d102      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80088da:	4b58      	ldr	r3, [pc, #352]	; (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80088dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088de:	e003      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80088e4:	f000 bc30 	b.w	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80088e8:	f000 bc2e 	b.w	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80088ec:	4b54      	ldr	r3, [pc, #336]	; (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80088ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088f0:	f000 bc2a 	b.w	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088f8:	f000 bc26 	b.w	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008902:	f040 809f 	bne.w	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008906:	4b4a      	ldr	r3, [pc, #296]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800890e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008916:	d04d      	beq.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800891e:	f200 8084 	bhi.w	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	2bc0      	cmp	r3, #192	; 0xc0
 8008926:	d07d      	beq.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	2bc0      	cmp	r3, #192	; 0xc0
 800892c:	d87d      	bhi.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	2b80      	cmp	r3, #128	; 0x80
 8008932:	d02d      	beq.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008936:	2b80      	cmp	r3, #128	; 0x80
 8008938:	d877      	bhi.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	2b40      	cmp	r3, #64	; 0x40
 8008944:	d012      	beq.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008946:	e070      	b.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008948:	4b39      	ldr	r3, [pc, #228]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008954:	d107      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fec0 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008964:	e3f0      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800896a:	e3ed      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800896c:	4b30      	ldr	r3, [pc, #192]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008978:	d107      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800897a:	f107 0318 	add.w	r3, r7, #24
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fc06 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008988:	e3de      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800898a:	2300      	movs	r3, #0
 800898c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800898e:	e3db      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008990:	4b27      	ldr	r3, [pc, #156]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800899c:	d107      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800899e:	f107 030c 	add.w	r3, r7, #12
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fd48 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089ac:	e3cc      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80089ae:	2300      	movs	r3, #0
 80089b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089b2:	e3c9      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089b4:	4b1e      	ldr	r3, [pc, #120]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089be:	4b1c      	ldr	r3, [pc, #112]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0304 	and.w	r3, r3, #4
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d10c      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d109      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089d0:	4b17      	ldr	r3, [pc, #92]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	08db      	lsrs	r3, r3, #3
 80089d6:	f003 0303 	and.w	r3, r3, #3
 80089da:	4a16      	ldr	r2, [pc, #88]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80089dc:	fa22 f303 	lsr.w	r3, r2, r3
 80089e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e2:	e01e      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089e4:	4b12      	ldr	r3, [pc, #72]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f0:	d106      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80089f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089f8:	d102      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80089fa:	4b0f      	ldr	r3, [pc, #60]	; (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80089fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089fe:	e010      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a00:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a0c:	d106      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a14:	d102      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a16:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a1a:	e002      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a20:	e392      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008a22:	e391      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a24:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a28:	e38e      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a2e:	e38b      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008a30:	58024400 	.word	0x58024400
 8008a34:	03d09000 	.word	0x03d09000
 8008a38:	003d0900 	.word	0x003d0900
 8008a3c:	007a1200 	.word	0x007a1200
 8008a40:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a4a:	f040 809c 	bne.w	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008a4e:	4b9d      	ldr	r3, [pc, #628]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a52:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008a56:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a5e:	d054      	beq.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8008a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a66:	f200 808b 	bhi.w	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a70:	f000 8083 	beq.w	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a7a:	f200 8081 	bhi.w	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a84:	d02f      	beq.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a8c:	d878      	bhi.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d004      	beq.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a9a:	d012      	beq.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008a9c:	e070      	b.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a9e:	4b89      	ldr	r3, [pc, #548]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aaa:	d107      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fe15 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008aba:	e345      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ac0:	e342      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ac2:	4b80      	ldr	r3, [pc, #512]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ace:	d107      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ad0:	f107 0318 	add.w	r3, r7, #24
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 fb5b 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ade:	e333      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ae4:	e330      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ae6:	4b77      	ldr	r3, [pc, #476]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af2:	d107      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008af4:	f107 030c 	add.w	r3, r7, #12
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fc9d 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b02:	e321      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b08:	e31e      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b0a:	4b6e      	ldr	r3, [pc, #440]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b12:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b14:	4b6b      	ldr	r3, [pc, #428]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	d10c      	bne.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d109      	bne.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b26:	4b67      	ldr	r3, [pc, #412]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	08db      	lsrs	r3, r3, #3
 8008b2c:	f003 0303 	and.w	r3, r3, #3
 8008b30:	4a65      	ldr	r2, [pc, #404]	; (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008b32:	fa22 f303 	lsr.w	r3, r2, r3
 8008b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b38:	e01e      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b3a:	4b62      	ldr	r3, [pc, #392]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b46:	d106      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b4e:	d102      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008b50:	4b5e      	ldr	r3, [pc, #376]	; (8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b54:	e010      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b56:	4b5b      	ldr	r3, [pc, #364]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b62:	d106      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b6a:	d102      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008b6c:	4b58      	ldr	r3, [pc, #352]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b70:	e002      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b76:	e2e7      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008b78:	e2e6      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b7a:	4b56      	ldr	r3, [pc, #344]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b7e:	e2e3      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b84:	e2e0      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b8c:	f040 80a7 	bne.w	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008b90:	4b4c      	ldr	r3, [pc, #304]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b94:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008b98:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ba0:	d055      	beq.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ba8:	f200 8096 	bhi.w	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bb2:	f000 8084 	beq.w	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bbc:	f200 808c 	bhi.w	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bc6:	d030      	beq.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bce:	f200 8083 	bhi.w	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d004      	beq.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bde:	d012      	beq.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008be0:	e07a      	b.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008be2:	4b38      	ldr	r3, [pc, #224]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bee:	d107      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fd73 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bfe:	e2a3      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c04:	e2a0      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c06:	4b2f      	ldr	r3, [pc, #188]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c12:	d107      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c14:	f107 0318 	add.w	r3, r7, #24
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 fab9 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008c22:	e291      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c28:	e28e      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c2a:	4b26      	ldr	r3, [pc, #152]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c36:	d107      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c38:	f107 030c 	add.w	r3, r7, #12
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 fbfb 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c46:	e27f      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c4c:	e27c      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c4e:	4b1d      	ldr	r3, [pc, #116]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c56:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c58:	4b1a      	ldr	r3, [pc, #104]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d10c      	bne.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d109      	bne.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c6a:	4b16      	ldr	r3, [pc, #88]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	08db      	lsrs	r3, r3, #3
 8008c70:	f003 0303 	and.w	r3, r3, #3
 8008c74:	4a14      	ldr	r2, [pc, #80]	; (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008c76:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c7c:	e01e      	b.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c7e:	4b11      	ldr	r3, [pc, #68]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c8a:	d106      	bne.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c92:	d102      	bne.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008c94:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c98:	e010      	b.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c9a:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ca6:	d106      	bne.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cae:	d102      	bne.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008cb0:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb4:	e002      	b.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008cba:	e245      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008cbc:	e244      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008cbe:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc2:	e241      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008cc4:	58024400 	.word	0x58024400
 8008cc8:	03d09000 	.word	0x03d09000
 8008ccc:	003d0900 	.word	0x003d0900
 8008cd0:	007a1200 	.word	0x007a1200
 8008cd4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cdc:	e234      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce4:	f040 809c 	bne.w	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008ce8:	4b9b      	ldr	r3, [pc, #620]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008cf0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cf8:	d054      	beq.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d00:	f200 808b 	bhi.w	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d0a:	f000 8083 	beq.w	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d14:	f200 8081 	bhi.w	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d1e:	d02f      	beq.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8008d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d26:	d878      	bhi.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d004      	beq.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d34:	d012      	beq.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8008d36:	e070      	b.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d38:	4b87      	ldr	r3, [pc, #540]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d44:	d107      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fcc8 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d54:	e1f8      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d5a:	e1f5      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d5c:	4b7e      	ldr	r3, [pc, #504]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d68:	d107      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d6a:	f107 0318 	add.w	r3, r7, #24
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fa0e 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d78:	e1e6      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d7e:	e1e3      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d80:	4b75      	ldr	r3, [pc, #468]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d8c:	d107      	bne.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d8e:	f107 030c 	add.w	r3, r7, #12
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 fb50 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d9c:	e1d4      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008da2:	e1d1      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008da4:	4b6c      	ldr	r3, [pc, #432]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008da8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008dac:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dae:	4b6a      	ldr	r3, [pc, #424]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0304 	and.w	r3, r3, #4
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d10c      	bne.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d109      	bne.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008dc0:	4b65      	ldr	r3, [pc, #404]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	08db      	lsrs	r3, r3, #3
 8008dc6:	f003 0303 	and.w	r3, r3, #3
 8008dca:	4a64      	ldr	r2, [pc, #400]	; (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8008dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd2:	e01e      	b.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dd4:	4b60      	ldr	r3, [pc, #384]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008de0:	d106      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008de8:	d102      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008dea:	4b5d      	ldr	r3, [pc, #372]	; (8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dee:	e010      	b.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008df0:	4b59      	ldr	r3, [pc, #356]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dfc:	d106      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e04:	d102      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e06:	4b57      	ldr	r3, [pc, #348]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e0a:	e002      	b.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e10:	e19a      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008e12:	e199      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e14:	4b54      	ldr	r3, [pc, #336]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e18:	e196      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e1e:	e193      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e26:	d173      	bne.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008e28:	4b4b      	ldr	r3, [pc, #300]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e38:	d02f      	beq.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e40:	d863      	bhi.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8008e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e4e:	d012      	beq.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8008e50:	e05b      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e52:	4b41      	ldr	r3, [pc, #260]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e5e:	d107      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e60:	f107 0318 	add.w	r3, r7, #24
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 f993 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e6e:	e16b      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e74:	e168      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e76:	4b38      	ldr	r3, [pc, #224]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e82:	d107      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e84:	f107 030c 	add.w	r3, r7, #12
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fad5 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e92:	e159      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e98:	e156      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e9a:	4b2f      	ldr	r3, [pc, #188]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ea2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ea4:	4b2c      	ldr	r3, [pc, #176]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d10c      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8008eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008eb6:	4b28      	ldr	r3, [pc, #160]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	08db      	lsrs	r3, r3, #3
 8008ebc:	f003 0303 	and.w	r3, r3, #3
 8008ec0:	4a26      	ldr	r2, [pc, #152]	; (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8008ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec8:	e01e      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008eca:	4b23      	ldr	r3, [pc, #140]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed6:	d106      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ede:	d102      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ee0:	4b1f      	ldr	r3, [pc, #124]	; (8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee4:	e010      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ee6:	4b1c      	ldr	r3, [pc, #112]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ef2:	d106      	bne.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8008ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008efa:	d102      	bne.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008efc:	4b19      	ldr	r3, [pc, #100]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f00:	e002      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008f06:	e11f      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008f08:	e11e      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f0e:	e11b      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f16:	d13e      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008f18:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d004      	beq.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2e:	d01d      	beq.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008f30:	e02e      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f32:	4b09      	ldr	r3, [pc, #36]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f3e:	d107      	bne.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fbcb 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f4e:	e0fb      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f54:	e0f8      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008f56:	bf00      	nop
 8008f58:	58024400 	.word	0x58024400
 8008f5c:	03d09000 	.word	0x03d09000
 8008f60:	003d0900 	.word	0x003d0900
 8008f64:	007a1200 	.word	0x007a1200
 8008f68:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f6c:	4b79      	ldr	r3, [pc, #484]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f78:	d107      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f7a:	f107 0318 	add.w	r3, r7, #24
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 f906 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f88:	e0de      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f8e:	e0db      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f94:	e0d8      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f9c:	f040 8085 	bne.w	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008fa0:	4b6c      	ldr	r3, [pc, #432]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008fa8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fb0:	d06b      	beq.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fb8:	d874      	bhi.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc0:	d056      	beq.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc8:	d86c      	bhi.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fd0:	d03b      	beq.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fd8:	d864      	bhi.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe0:	d021      	beq.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe8:	d85c      	bhi.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d004      	beq.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ff6:	d004      	beq.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008ff8:	e054      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ffa:	f000 f8b3 	bl	8009164 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ffe:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009000:	e0a2      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009002:	4b54      	ldr	r3, [pc, #336]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800900a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800900e:	d107      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009010:	f107 0318 	add.w	r3, r7, #24
 8009014:	4618      	mov	r0, r3
 8009016:	f000 f8bb 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800901e:	e093      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009024:	e090      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009026:	4b4b      	ldr	r3, [pc, #300]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800902e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009032:	d107      	bne.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009034:	f107 030c 	add.w	r3, r7, #12
 8009038:	4618      	mov	r0, r3
 800903a:	f000 f9fd 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009042:	e081      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009048:	e07e      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800904a:	4b42      	ldr	r3, [pc, #264]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0304 	and.w	r3, r3, #4
 8009052:	2b04      	cmp	r3, #4
 8009054:	d109      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009056:	4b3f      	ldr	r3, [pc, #252]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	08db      	lsrs	r3, r3, #3
 800905c:	f003 0303 	and.w	r3, r3, #3
 8009060:	4a3d      	ldr	r2, [pc, #244]	; (8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009062:	fa22 f303 	lsr.w	r3, r2, r3
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009068:	e06e      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800906e:	e06b      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009070:	4b38      	ldr	r3, [pc, #224]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800907c:	d102      	bne.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800907e:	4b37      	ldr	r3, [pc, #220]	; (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009082:	e061      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009088:	e05e      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800908a:	4b32      	ldr	r3, [pc, #200]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009096:	d102      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8009098:	4b31      	ldr	r3, [pc, #196]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800909a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800909c:	e054      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090a2:	e051      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090a8:	e04e      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090b0:	d148      	bne.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80090b2:	4b28      	ldr	r3, [pc, #160]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c2:	d02a      	beq.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ca:	d838      	bhi.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d004      	beq.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80090d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090d8:	d00d      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80090da:	e030      	b.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80090dc:	4b1d      	ldr	r3, [pc, #116]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090e8:	d102      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80090ea:	4b1d      	ldr	r3, [pc, #116]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090ee:	e02b      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f4:	e028      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090f6:	4b17      	ldr	r3, [pc, #92]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009102:	d107      	bne.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fae9 	bl	80096e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009112:	e019      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009114:	2300      	movs	r3, #0
 8009116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009118:	e016      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800911a:	4b0e      	ldr	r3, [pc, #56]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009126:	d107      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009128:	f107 0318 	add.w	r3, r7, #24
 800912c:	4618      	mov	r0, r3
 800912e:	f000 f82f 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009136:	e007      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800913c:	e004      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009142:	e001      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800914a:	4618      	mov	r0, r3
 800914c:	3740      	adds	r7, #64	; 0x40
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	58024400 	.word	0x58024400
 8009158:	03d09000 	.word	0x03d09000
 800915c:	003d0900 	.word	0x003d0900
 8009160:	007a1200 	.word	0x007a1200

08009164 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009168:	f7fe fb46 	bl	80077f8 <HAL_RCC_GetHCLKFreq>
 800916c:	4602      	mov	r2, r0
 800916e:	4b06      	ldr	r3, [pc, #24]	; (8009188 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	091b      	lsrs	r3, r3, #4
 8009174:	f003 0307 	and.w	r3, r3, #7
 8009178:	4904      	ldr	r1, [pc, #16]	; (800918c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800917a:	5ccb      	ldrb	r3, [r1, r3]
 800917c:	f003 031f 	and.w	r3, r3, #31
 8009180:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009184:	4618      	mov	r0, r3
 8009186:	bd80      	pop	{r7, pc}
 8009188:	58024400 	.word	0x58024400
 800918c:	0800f924 	.word	0x0800f924

08009190 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009190:	b480      	push	{r7}
 8009192:	b089      	sub	sp, #36	; 0x24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009198:	4ba1      	ldr	r3, [pc, #644]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919c:	f003 0303 	and.w	r3, r3, #3
 80091a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80091a2:	4b9f      	ldr	r3, [pc, #636]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a6:	0b1b      	lsrs	r3, r3, #12
 80091a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80091ae:	4b9c      	ldr	r3, [pc, #624]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b2:	091b      	lsrs	r3, r3, #4
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80091ba:	4b99      	ldr	r3, [pc, #612]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091be:	08db      	lsrs	r3, r3, #3
 80091c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	fb02 f303 	mul.w	r3, r2, r3
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 8111 	beq.w	8009400 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	f000 8083 	beq.w	80092ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	f200 80a1 	bhi.w	8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d056      	beq.n	80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80091fa:	e099      	b.n	8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091fc:	4b88      	ldr	r3, [pc, #544]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0320 	and.w	r3, r3, #32
 8009204:	2b00      	cmp	r3, #0
 8009206:	d02d      	beq.n	8009264 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009208:	4b85      	ldr	r3, [pc, #532]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	08db      	lsrs	r3, r3, #3
 800920e:	f003 0303 	and.w	r3, r3, #3
 8009212:	4a84      	ldr	r2, [pc, #528]	; (8009424 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009214:	fa22 f303 	lsr.w	r3, r2, r3
 8009218:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	ee07 3a90 	vmov	s15, r3
 8009220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009232:	4b7b      	ldr	r3, [pc, #492]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009242:	ed97 6a03 	vldr	s12, [r7, #12]
 8009246:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800924a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800924e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009262:	e087      	b.n	8009374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800942c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009276:	4b6a      	ldr	r3, [pc, #424]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009286:	ed97 6a03 	vldr	s12, [r7, #12]
 800928a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800928e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800929a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092a6:	e065      	b.n	8009374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	ee07 3a90 	vmov	s15, r3
 80092ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80092b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ba:	4b59      	ldr	r3, [pc, #356]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092ea:	e043      	b.n	8009374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80092fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fe:	4b48      	ldr	r3, [pc, #288]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009306:	ee07 3a90 	vmov	s15, r3
 800930a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009312:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800931a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800931e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800932a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800932e:	e021      	b.n	8009374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800933e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009342:	4b37      	ldr	r3, [pc, #220]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009352:	ed97 6a03 	vldr	s12, [r7, #12]
 8009356:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800935a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800936a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009372:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009374:	4b2a      	ldr	r3, [pc, #168]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	0a5b      	lsrs	r3, r3, #9
 800937a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800937e:	ee07 3a90 	vmov	s15, r3
 8009382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800938a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800938e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800939a:	ee17 2a90 	vmov	r2, s15
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80093a2:	4b1f      	ldr	r3, [pc, #124]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	0c1b      	lsrs	r3, r3, #16
 80093a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ac:	ee07 3a90 	vmov	s15, r3
 80093b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80093c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093c8:	ee17 2a90 	vmov	r2, s15
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80093d0:	4b13      	ldr	r3, [pc, #76]	; (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	0e1b      	lsrs	r3, r3, #24
 80093d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093f6:	ee17 2a90 	vmov	r2, s15
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80093fe:	e008      	b.n	8009412 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	609a      	str	r2, [r3, #8]
}
 8009412:	bf00      	nop
 8009414:	3724      	adds	r7, #36	; 0x24
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	58024400 	.word	0x58024400
 8009424:	03d09000 	.word	0x03d09000
 8009428:	46000000 	.word	0x46000000
 800942c:	4c742400 	.word	0x4c742400
 8009430:	4a742400 	.word	0x4a742400
 8009434:	4af42400 	.word	0x4af42400

08009438 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009438:	b480      	push	{r7}
 800943a:	b089      	sub	sp, #36	; 0x24
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009440:	4ba1      	ldr	r3, [pc, #644]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800944a:	4b9f      	ldr	r3, [pc, #636]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800944c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944e:	0d1b      	lsrs	r3, r3, #20
 8009450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009454:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009456:	4b9c      	ldr	r3, [pc, #624]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945a:	0a1b      	lsrs	r3, r3, #8
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009462:	4b99      	ldr	r3, [pc, #612]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009466:	08db      	lsrs	r3, r3, #3
 8009468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 8111 	beq.w	80096a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	2b02      	cmp	r3, #2
 800948a:	f000 8083 	beq.w	8009594 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b02      	cmp	r3, #2
 8009492:	f200 80a1 	bhi.w	80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d056      	beq.n	8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80094a2:	e099      	b.n	80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094a4:	4b88      	ldr	r3, [pc, #544]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0320 	and.w	r3, r3, #32
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d02d      	beq.n	800950c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094b0:	4b85      	ldr	r3, [pc, #532]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	08db      	lsrs	r3, r3, #3
 80094b6:	f003 0303 	and.w	r3, r3, #3
 80094ba:	4a84      	ldr	r2, [pc, #528]	; (80096cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80094bc:	fa22 f303 	lsr.w	r3, r2, r3
 80094c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	ee07 3a90 	vmov	s15, r3
 80094c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094da:	4b7b      	ldr	r3, [pc, #492]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009506:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800950a:	e087      	b.n	800961c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009516:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80096d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800951a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800951e:	4b6a      	ldr	r3, [pc, #424]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009532:	eddf 5a67 	vldr	s11, [pc, #412]	; 80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800953a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800953e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800954a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800954e:	e065      	b.n	800961c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	ee07 3a90 	vmov	s15, r3
 8009556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800955e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009562:	4b59      	ldr	r3, [pc, #356]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009572:	ed97 6a03 	vldr	s12, [r7, #12]
 8009576:	eddf 5a56 	vldr	s11, [pc, #344]	; 80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800957a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800957e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800958a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800958e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009592:	e043      	b.n	800961c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80096dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80095a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a6:	4b48      	ldr	r3, [pc, #288]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ae:	ee07 3a90 	vmov	s15, r3
 80095b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095d6:	e021      	b.n	800961c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ea:	4b37      	ldr	r3, [pc, #220]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80095fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800960a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800960e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800961a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800961c:	4b2a      	ldr	r3, [pc, #168]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800961e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009620:	0a5b      	lsrs	r3, r3, #9
 8009622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009636:	edd7 6a07 	vldr	s13, [r7, #28]
 800963a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800963e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009642:	ee17 2a90 	vmov	r2, s15
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800964a:	4b1f      	ldr	r3, [pc, #124]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	0c1b      	lsrs	r3, r3, #16
 8009650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009654:	ee07 3a90 	vmov	s15, r3
 8009658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009660:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009664:	edd7 6a07 	vldr	s13, [r7, #28]
 8009668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800966c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009670:	ee17 2a90 	vmov	r2, s15
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009678:	4b13      	ldr	r3, [pc, #76]	; (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800967a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967c:	0e1b      	lsrs	r3, r3, #24
 800967e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800968e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009692:	edd7 6a07 	vldr	s13, [r7, #28]
 8009696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800969a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800969e:	ee17 2a90 	vmov	r2, s15
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80096a6:	e008      	b.n	80096ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	609a      	str	r2, [r3, #8]
}
 80096ba:	bf00      	nop
 80096bc:	3724      	adds	r7, #36	; 0x24
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	58024400 	.word	0x58024400
 80096cc:	03d09000 	.word	0x03d09000
 80096d0:	46000000 	.word	0x46000000
 80096d4:	4c742400 	.word	0x4c742400
 80096d8:	4a742400 	.word	0x4a742400
 80096dc:	4af42400 	.word	0x4af42400

080096e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b089      	sub	sp, #36	; 0x24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096e8:	4ba0      	ldr	r3, [pc, #640]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ec:	f003 0303 	and.w	r3, r3, #3
 80096f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80096f2:	4b9e      	ldr	r3, [pc, #632]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	091b      	lsrs	r3, r3, #4
 80096f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80096fe:	4b9b      	ldr	r3, [pc, #620]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009708:	4b98      	ldr	r3, [pc, #608]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800970a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800970c:	08db      	lsrs	r3, r3, #3
 800970e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	fb02 f303 	mul.w	r3, r2, r3
 8009718:	ee07 3a90 	vmov	s15, r3
 800971c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009720:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 8111 	beq.w	800994e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	2b02      	cmp	r3, #2
 8009730:	f000 8083 	beq.w	800983a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	2b02      	cmp	r3, #2
 8009738:	f200 80a1 	bhi.w	800987e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d056      	beq.n	80097f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009748:	e099      	b.n	800987e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800974a:	4b88      	ldr	r3, [pc, #544]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0320 	and.w	r3, r3, #32
 8009752:	2b00      	cmp	r3, #0
 8009754:	d02d      	beq.n	80097b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009756:	4b85      	ldr	r3, [pc, #532]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	08db      	lsrs	r3, r3, #3
 800975c:	f003 0303 	and.w	r3, r3, #3
 8009760:	4a83      	ldr	r2, [pc, #524]	; (8009970 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009762:	fa22 f303 	lsr.w	r3, r2, r3
 8009766:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	ee07 3a90 	vmov	s15, r3
 800976e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	ee07 3a90 	vmov	s15, r3
 8009778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009780:	4b7a      	ldr	r3, [pc, #488]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009788:	ee07 3a90 	vmov	s15, r3
 800978c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009790:	ed97 6a03 	vldr	s12, [r7, #12]
 8009794:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800979c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80097b0:	e087      	b.n	80098c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	ee07 3a90 	vmov	s15, r3
 80097b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009978 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80097c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097c4:	4b69      	ldr	r3, [pc, #420]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097cc:	ee07 3a90 	vmov	s15, r3
 80097d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80097d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097f4:	e065      	b.n	80098c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	ee07 3a90 	vmov	s15, r3
 80097fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009800:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800997c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009808:	4b58      	ldr	r3, [pc, #352]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009810:	ee07 3a90 	vmov	s15, r3
 8009814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009818:	ed97 6a03 	vldr	s12, [r7, #12]
 800981c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800982c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009834:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009838:	e043      	b.n	80098c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	ee07 3a90 	vmov	s15, r3
 8009840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009844:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009980 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800984c:	4b47      	ldr	r3, [pc, #284]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800984e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009854:	ee07 3a90 	vmov	s15, r3
 8009858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800985c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009860:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800986c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009878:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800987c:	e021      	b.n	80098c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	ee07 3a90 	vmov	s15, r3
 8009884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009888:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009978 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800988c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009890:	4b36      	ldr	r3, [pc, #216]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009898:	ee07 3a90 	vmov	s15, r3
 800989c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80098a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80098c2:	4b2a      	ldr	r3, [pc, #168]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c6:	0a5b      	lsrs	r3, r3, #9
 80098c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098cc:	ee07 3a90 	vmov	s15, r3
 80098d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80098e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098e8:	ee17 2a90 	vmov	r2, s15
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80098f0:	4b1e      	ldr	r3, [pc, #120]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f4:	0c1b      	lsrs	r3, r3, #16
 80098f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800990a:	edd7 6a07 	vldr	s13, [r7, #28]
 800990e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009916:	ee17 2a90 	vmov	r2, s15
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800991e:	4b13      	ldr	r3, [pc, #76]	; (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	0e1b      	lsrs	r3, r3, #24
 8009924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009928:	ee07 3a90 	vmov	s15, r3
 800992c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009934:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009938:	edd7 6a07 	vldr	s13, [r7, #28]
 800993c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009944:	ee17 2a90 	vmov	r2, s15
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800994c:	e008      	b.n	8009960 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	609a      	str	r2, [r3, #8]
}
 8009960:	bf00      	nop
 8009962:	3724      	adds	r7, #36	; 0x24
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	58024400 	.word	0x58024400
 8009970:	03d09000 	.word	0x03d09000
 8009974:	46000000 	.word	0x46000000
 8009978:	4c742400 	.word	0x4c742400
 800997c:	4a742400 	.word	0x4a742400
 8009980:	4af42400 	.word	0x4af42400

08009984 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009992:	4b53      	ldr	r3, [pc, #332]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	2b03      	cmp	r3, #3
 800999c:	d101      	bne.n	80099a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e099      	b.n	8009ad6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80099a2:	4b4f      	ldr	r3, [pc, #316]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a4e      	ldr	r2, [pc, #312]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 80099a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ae:	f7fa fd0b 	bl	80043c8 <HAL_GetTick>
 80099b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099b4:	e008      	b.n	80099c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80099b6:	f7fa fd07 	bl	80043c8 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d901      	bls.n	80099c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e086      	b.n	8009ad6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099c8:	4b45      	ldr	r3, [pc, #276]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1f0      	bne.n	80099b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80099d4:	4b42      	ldr	r3, [pc, #264]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 80099d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	031b      	lsls	r3, r3, #12
 80099e2:	493f      	ldr	r1, [pc, #252]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	628b      	str	r3, [r1, #40]	; 0x28
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	025b      	lsls	r3, r3, #9
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	041b      	lsls	r3, r3, #16
 8009a06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	061b      	lsls	r3, r3, #24
 8009a14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a18:	4931      	ldr	r1, [pc, #196]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a1e:	4b30      	ldr	r3, [pc, #192]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	492d      	ldr	r1, [pc, #180]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a30:	4b2b      	ldr	r3, [pc, #172]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	f023 0220 	bic.w	r2, r3, #32
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	4928      	ldr	r1, [pc, #160]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a42:	4b27      	ldr	r3, [pc, #156]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a46:	4a26      	ldr	r2, [pc, #152]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a48:	f023 0310 	bic.w	r3, r3, #16
 8009a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a4e:	4b24      	ldr	r3, [pc, #144]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a52:	4b24      	ldr	r3, [pc, #144]	; (8009ae4 <RCCEx_PLL2_Config+0x160>)
 8009a54:	4013      	ands	r3, r2
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	69d2      	ldr	r2, [r2, #28]
 8009a5a:	00d2      	lsls	r2, r2, #3
 8009a5c:	4920      	ldr	r1, [pc, #128]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a62:	4b1f      	ldr	r3, [pc, #124]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a66:	4a1e      	ldr	r2, [pc, #120]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a68:	f043 0310 	orr.w	r3, r3, #16
 8009a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d106      	bne.n	8009a82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a74:	4b1a      	ldr	r3, [pc, #104]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	4a19      	ldr	r2, [pc, #100]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a80:	e00f      	b.n	8009aa2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d106      	bne.n	8009a96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a88:	4b15      	ldr	r3, [pc, #84]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	4a14      	ldr	r2, [pc, #80]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a94:	e005      	b.n	8009aa2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a96:	4b12      	ldr	r3, [pc, #72]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	4a11      	ldr	r2, [pc, #68]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a0e      	ldr	r2, [pc, #56]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009aa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aae:	f7fa fc8b 	bl	80043c8 <HAL_GetTick>
 8009ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ab4:	e008      	b.n	8009ac8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ab6:	f7fa fc87 	bl	80043c8 <HAL_GetTick>
 8009aba:	4602      	mov	r2, r0
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d901      	bls.n	8009ac8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e006      	b.n	8009ad6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ac8:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <RCCEx_PLL2_Config+0x15c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d0f0      	beq.n	8009ab6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	58024400 	.word	0x58024400
 8009ae4:	ffff0007 	.word	0xffff0007

08009ae8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009af6:	4b53      	ldr	r3, [pc, #332]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afa:	f003 0303 	and.w	r3, r3, #3
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d101      	bne.n	8009b06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e099      	b.n	8009c3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b06:	4b4f      	ldr	r3, [pc, #316]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a4e      	ldr	r2, [pc, #312]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b12:	f7fa fc59 	bl	80043c8 <HAL_GetTick>
 8009b16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b18:	e008      	b.n	8009b2c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b1a:	f7fa fc55 	bl	80043c8 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d901      	bls.n	8009b2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e086      	b.n	8009c3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b2c:	4b45      	ldr	r3, [pc, #276]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1f0      	bne.n	8009b1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009b38:	4b42      	ldr	r3, [pc, #264]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	051b      	lsls	r3, r3, #20
 8009b46:	493f      	ldr	r1, [pc, #252]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	628b      	str	r3, [r1, #40]	; 0x28
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	025b      	lsls	r3, r3, #9
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	431a      	orrs	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	041b      	lsls	r3, r3, #16
 8009b6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b6e:	431a      	orrs	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	061b      	lsls	r3, r3, #24
 8009b78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b7c:	4931      	ldr	r1, [pc, #196]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b82:	4b30      	ldr	r3, [pc, #192]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	492d      	ldr	r1, [pc, #180]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b94:	4b2b      	ldr	r3, [pc, #172]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	4928      	ldr	r1, [pc, #160]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ba6:	4b27      	ldr	r3, [pc, #156]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009baa:	4a26      	ldr	r2, [pc, #152]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009bb2:	4b24      	ldr	r3, [pc, #144]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bb6:	4b24      	ldr	r3, [pc, #144]	; (8009c48 <RCCEx_PLL3_Config+0x160>)
 8009bb8:	4013      	ands	r3, r2
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	69d2      	ldr	r2, [r2, #28]
 8009bbe:	00d2      	lsls	r2, r2, #3
 8009bc0:	4920      	ldr	r1, [pc, #128]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009bc6:	4b1f      	ldr	r3, [pc, #124]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bca:	4a1e      	ldr	r2, [pc, #120]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d106      	bne.n	8009be6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009bd8:	4b1a      	ldr	r3, [pc, #104]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bdc:	4a19      	ldr	r2, [pc, #100]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009be2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009be4:	e00f      	b.n	8009c06 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d106      	bne.n	8009bfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009bec:	4b15      	ldr	r3, [pc, #84]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	4a14      	ldr	r2, [pc, #80]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bf8:	e005      	b.n	8009c06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009bfa:	4b12      	ldr	r3, [pc, #72]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfe:	4a11      	ldr	r2, [pc, #68]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009c00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a0e      	ldr	r2, [pc, #56]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c12:	f7fa fbd9 	bl	80043c8 <HAL_GetTick>
 8009c16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c18:	e008      	b.n	8009c2c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c1a:	f7fa fbd5 	bl	80043c8 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d901      	bls.n	8009c2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e006      	b.n	8009c3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c2c:	4b05      	ldr	r3, [pc, #20]	; (8009c44 <RCCEx_PLL3_Config+0x15c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0f0      	beq.n	8009c1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	58024400 	.word	0x58024400
 8009c48:	ffff0007 	.word	0xffff0007

08009c4c <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e0a8      	b.n	8009db0 <HAL_SMBUS_Init+0x164>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d106      	bne.n	8009c74 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7f6 fff2 	bl	8000c58 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2202      	movs	r2, #2
 8009c78:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f022 0201 	bic.w	r2, r2, #1
 8009c88:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685a      	ldr	r2, [r3, #4]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009c96:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	695a      	ldr	r2, [r3, #20]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ca6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	695a      	ldr	r2, [r3, #20]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009cb6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009cc0:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009cd0:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d012      	beq.n	8009d00 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d107      	bne.n	8009cf2 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cee:	609a      	str	r2, [r3, #8]
 8009cf0:	e006      	b.n	8009d00 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009cfe:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d104      	bne.n	8009d12 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6859      	ldr	r1, [r3, #4]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	4b26      	ldr	r3, [pc, #152]	; (8009db8 <HAL_SMBUS_Init+0x16c>)
 8009d1e:	430b      	orrs	r3, r1
 8009d20:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	695a      	ldr	r2, [r3, #20]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	430a      	orrs	r2, r1
 8009d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a1a      	ldr	r2, [r3, #32]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8009d4a:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8009d5c:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8009d5e:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d68:	d110      	bne.n	8009d8c <HAL_SMBUS_Init+0x140>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d004      	beq.n	8009d7c <HAL_SMBUS_Init+0x130>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8009d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d7a:	d107      	bne.n	8009d8c <HAL_SMBUS_Init+0x140>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009d8a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f042 0201 	orr.w	r2, r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	02008000 	.word	0x02008000

08009dbc <HAL_SMBUS_ConfigDigitalFilter>:
  *                the configuration information for the specified SMBUS.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d137      	bne.n	8009e3e <HAL_SMBUS_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <HAL_SMBUS_ConfigDigitalFilter+0x20>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e031      	b.n	8009e40 <HAL_SMBUS_ConfigDigitalFilter+0x84>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2202      	movs	r2, #2
 8009de8:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the selected SMBUS peripheral */
    __HAL_SMBUS_DISABLE(hsmbus);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f022 0201 	bic.w	r2, r2, #1
 8009df8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hsmbus->Instance->CR1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	60fb      	str	r3, [r7, #12]

    /* Reset I2C DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	021b      	lsls	r3, r3, #8
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hsmbus->Instance->CR1 = tmpreg;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	601a      	str	r2, [r3, #0]

    __HAL_SMBUS_ENABLE(hsmbus);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0201 	orr.w	r2, r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]

    hsmbus->State = HAL_SMBUS_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e000      	b.n	8009e40 <HAL_SMBUS_ConfigDigitalFilter+0x84>
  }
  else
  {
    return HAL_BUSY;
 8009e3e:	2302      	movs	r3, #2
  }
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e0f1      	b.n	800a042 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a78      	ldr	r2, [pc, #480]	; (800a04c <HAL_SPI_Init+0x200>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d00f      	beq.n	8009e8e <HAL_SPI_Init+0x42>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a77      	ldr	r2, [pc, #476]	; (800a050 <HAL_SPI_Init+0x204>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d00a      	beq.n	8009e8e <HAL_SPI_Init+0x42>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a75      	ldr	r2, [pc, #468]	; (800a054 <HAL_SPI_Init+0x208>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d005      	beq.n	8009e8e <HAL_SPI_Init+0x42>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	2b0f      	cmp	r3, #15
 8009e88:	d901      	bls.n	8009e8e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e0d9      	b.n	800a042 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fc9c 	bl	800a7cc <SPI_GetPacketSize>
 8009e94:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a6c      	ldr	r2, [pc, #432]	; (800a04c <HAL_SPI_Init+0x200>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d00c      	beq.n	8009eba <HAL_SPI_Init+0x6e>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a6a      	ldr	r2, [pc, #424]	; (800a050 <HAL_SPI_Init+0x204>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d007      	beq.n	8009eba <HAL_SPI_Init+0x6e>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a69      	ldr	r2, [pc, #420]	; (800a054 <HAL_SPI_Init+0x208>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d002      	beq.n	8009eba <HAL_SPI_Init+0x6e>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2b08      	cmp	r3, #8
 8009eb8:	d811      	bhi.n	8009ede <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ebe:	4a63      	ldr	r2, [pc, #396]	; (800a04c <HAL_SPI_Init+0x200>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d009      	beq.n	8009ed8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a61      	ldr	r2, [pc, #388]	; (800a050 <HAL_SPI_Init+0x204>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d004      	beq.n	8009ed8 <HAL_SPI_Init+0x8c>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a60      	ldr	r2, [pc, #384]	; (800a054 <HAL_SPI_Init+0x208>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d104      	bne.n	8009ee2 <HAL_SPI_Init+0x96>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b10      	cmp	r3, #16
 8009edc:	d901      	bls.n	8009ee2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e0af      	b.n	800a042 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d106      	bne.n	8009efc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7f9 fcc0 	bl	800387c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2202      	movs	r2, #2
 8009f00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f022 0201 	bic.w	r2, r2, #1
 8009f12:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009f1e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f28:	d119      	bne.n	8009f5e <HAL_SPI_Init+0x112>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f32:	d103      	bne.n	8009f3c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d008      	beq.n	8009f4e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10c      	bne.n	8009f5e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f4c:	d107      	bne.n	8009f5e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	69da      	ldr	r2, [r3, #28]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f66:	431a      	orrs	r2, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	431a      	orrs	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f70:	ea42 0103 	orr.w	r1, r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68da      	ldr	r2, [r3, #12]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	431a      	orrs	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	695b      	ldr	r3, [r3, #20]
 8009fa0:	431a      	orrs	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fbe:	ea42 0103 	orr.w	r1, r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	430a      	orrs	r2, r1
 8009fcc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d113      	bne.n	8009ffe <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fe8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ffc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f022 0201 	bic.w	r2, r2, #1
 800a00c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00a      	beq.n	800a030 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	430a      	orrs	r2, r1
 800a02e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	40013000 	.word	0x40013000
 800a050:	40003800 	.word	0x40003800
 800a054:	40003c00 	.word	0x40003c00

0800a058 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08e      	sub	sp, #56	; 0x38
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3320      	adds	r3, #32
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3330      	adds	r3, #48	; 0x30
 800a07a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a082:	2b01      	cmp	r3, #1
 800a084:	d101      	bne.n	800a08a <HAL_SPI_TransmitReceive+0x32>
 800a086:	2302      	movs	r3, #2
 800a088:	e2ce      	b.n	800a628 <HAL_SPI_TransmitReceive+0x5d0>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a092:	f7fa f999 	bl	80043c8 <HAL_GetTick>
 800a096:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800a098:	887b      	ldrh	r3, [r7, #2]
 800a09a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800a09c:	887b      	ldrh	r3, [r7, #2]
 800a09e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a0a6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a0ae:	7efb      	ldrb	r3, [r7, #27]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d014      	beq.n	800a0de <HAL_SPI_TransmitReceive+0x86>
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0ba:	d106      	bne.n	800a0ca <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d102      	bne.n	800a0ca <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a0c4:	7efb      	ldrb	r3, [r7, #27]
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	d009      	beq.n	800a0de <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a0d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0dc:	e2a4      	b.n	800a628 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d005      	beq.n	800a0f0 <HAL_SPI_TransmitReceive+0x98>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <HAL_SPI_TransmitReceive+0x98>
 800a0ea:	887b      	ldrh	r3, [r7, #2]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d109      	bne.n	800a104 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a0fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a102:	e291      	b.n	800a628 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b04      	cmp	r3, #4
 800a10e:	d003      	beq.n	800a118 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2205      	movs	r2, #5
 800a114:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	887a      	ldrh	r2, [r7, #2]
 800a12a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	887a      	ldrh	r2, [r7, #2]
 800a132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	887a      	ldrh	r2, [r7, #2]
 800a140:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	887a      	ldrh	r2, [r7, #2]
 800a148:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	4b81      	ldr	r3, [pc, #516]	; (800a364 <HAL_SPI_TransmitReceive+0x30c>)
 800a160:	4013      	ands	r3, r2
 800a162:	8879      	ldrh	r1, [r7, #2]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	6812      	ldr	r2, [r2, #0]
 800a168:	430b      	orrs	r3, r1
 800a16a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f042 0201 	orr.w	r2, r2, #1
 800a17a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a184:	d107      	bne.n	800a196 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a194:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	2b0f      	cmp	r3, #15
 800a19c:	d970      	bls.n	800a280 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a19e:	e068      	b.n	800a272 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	f003 0302 	and.w	r3, r3, #2
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d11a      	bne.n	800a1e4 <HAL_SPI_TransmitReceive+0x18c>
 800a1ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d017      	beq.n	800a1e4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6812      	ldr	r2, [r2, #0]
 800a1be:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1c4:	1d1a      	adds	r2, r3, #4
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	695a      	ldr	r2, [r3, #20]
 800a1ea:	f248 0308 	movw	r3, #32776	; 0x8008
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01a      	beq.n	800a22a <HAL_SPI_TransmitReceive+0x1d2>
 800a1f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d017      	beq.n	800a22a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a202:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a204:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a20a:	1d1a      	adds	r2, r3, #4
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a216:	b29b      	uxth	r3, r3
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a228:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a22a:	f7fa f8cd 	bl	80043c8 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a236:	429a      	cmp	r2, r3
 800a238:	d803      	bhi.n	800a242 <HAL_SPI_TransmitReceive+0x1ea>
 800a23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a240:	d102      	bne.n	800a248 <HAL_SPI_TransmitReceive+0x1f0>
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	2b00      	cmp	r3, #0
 800a246:	d114      	bne.n	800a272 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 f9f1 	bl	800a630 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a25c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e1da      	b.n	800a628 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a272:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a274:	2b00      	cmp	r3, #0
 800a276:	d193      	bne.n	800a1a0 <HAL_SPI_TransmitReceive+0x148>
 800a278:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d190      	bne.n	800a1a0 <HAL_SPI_TransmitReceive+0x148>
 800a27e:	e1ac      	b.n	800a5da <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	2b07      	cmp	r3, #7
 800a286:	f240 81a0 	bls.w	800a5ca <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a28a:	e0a9      	b.n	800a3e0 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	f003 0302 	and.w	r3, r3, #2
 800a296:	2b02      	cmp	r3, #2
 800a298:	d139      	bne.n	800a30e <HAL_SPI_TransmitReceive+0x2b6>
 800a29a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d036      	beq.n	800a30e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a2a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d91c      	bls.n	800a2e0 <HAL_SPI_TransmitReceive+0x288>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d018      	beq.n	800a2e0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6812      	ldr	r2, [r2, #0]
 800a2b8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2be:	1d1a      	adds	r2, r3, #4
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	3b02      	subs	r3, #2
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a2de:	e016      	b.n	800a30e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2e4:	881a      	ldrh	r2, [r3, #0]
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ee:	1c9a      	adds	r2, r3, #2
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a30c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d03d      	beq.n	800a398 <HAL_SPI_TransmitReceive+0x340>
 800a31c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d03a      	beq.n	800a398 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d01b      	beq.n	800a368 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a338:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a33a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a340:	1d1a      	adds	r2, r3, #4
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	3b02      	subs	r3, #2
 800a350:	b29a      	uxth	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a35e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a360:	e01a      	b.n	800a398 <HAL_SPI_TransmitReceive+0x340>
 800a362:	bf00      	nop
 800a364:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a36c:	6a3a      	ldr	r2, [r7, #32]
 800a36e:	8812      	ldrh	r2, [r2, #0]
 800a370:	b292      	uxth	r2, r2
 800a372:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a378:	1c9a      	adds	r2, r3, #2
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a384:	b29b      	uxth	r3, r3
 800a386:	3b01      	subs	r3, #1
 800a388:	b29a      	uxth	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a396:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a398:	f7fa f816 	bl	80043c8 <HAL_GetTick>
 800a39c:	4602      	mov	r2, r0
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d803      	bhi.n	800a3b0 <HAL_SPI_TransmitReceive+0x358>
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ae:	d102      	bne.n	800a3b6 <HAL_SPI_TransmitReceive+0x35e>
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d114      	bne.n	800a3e0 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f000 f93a 	bl	800a630 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e123      	b.n	800a628 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a3e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f47f af52 	bne.w	800a28c <HAL_SPI_TransmitReceive+0x234>
 800a3e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f47f af4e 	bne.w	800a28c <HAL_SPI_TransmitReceive+0x234>
 800a3f0:	e0f3      	b.n	800a5da <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d15a      	bne.n	800a4b6 <HAL_SPI_TransmitReceive+0x45e>
 800a400:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a402:	2b00      	cmp	r3, #0
 800a404:	d057      	beq.n	800a4b6 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a406:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a408:	2b03      	cmp	r3, #3
 800a40a:	d91c      	bls.n	800a446 <HAL_SPI_TransmitReceive+0x3ee>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a410:	2b40      	cmp	r3, #64	; 0x40
 800a412:	d918      	bls.n	800a446 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6812      	ldr	r2, [r2, #0]
 800a41e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a424:	1d1a      	adds	r2, r3, #4
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a430:	b29b      	uxth	r3, r3
 800a432:	3b04      	subs	r3, #4
 800a434:	b29a      	uxth	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a442:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a444:	e037      	b.n	800a4b6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a446:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d91b      	bls.n	800a484 <HAL_SPI_TransmitReceive+0x42c>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d017      	beq.n	800a484 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a458:	881a      	ldrh	r2, [r3, #0]
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a462:	1c9a      	adds	r2, r3, #2
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a46e:	b29b      	uxth	r3, r3
 800a470:	3b02      	subs	r3, #2
 800a472:	b29a      	uxth	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a480:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a482:	e018      	b.n	800a4b6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	3320      	adds	r3, #32
 800a48e:	7812      	ldrb	r2, [r2, #0]
 800a490:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a496:	1c5a      	adds	r2, r3, #1
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d05e      	beq.n	800a582 <HAL_SPI_TransmitReceive+0x52a>
 800a4c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d05b      	beq.n	800a582 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d018      	beq.n	800a50a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a4e2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4e8:	1d1a      	adds	r2, r3, #4
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b04      	subs	r3, #4
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a506:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a508:	e03b      	b.n	800a582 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a518:	d918      	bls.n	800a54c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a51e:	6a3a      	ldr	r2, [r7, #32]
 800a520:	8812      	ldrh	r2, [r2, #0]
 800a522:	b292      	uxth	r2, r2
 800a524:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a52a:	1c9a      	adds	r2, r3, #2
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a536:	b29b      	uxth	r3, r3
 800a538:	3b02      	subs	r3, #2
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a548:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a54a:	e01a      	b.n	800a582 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a558:	7812      	ldrb	r2, [r2, #0]
 800a55a:	b2d2      	uxtb	r2, r2
 800a55c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a56e:	b29b      	uxth	r3, r3
 800a570:	3b01      	subs	r3, #1
 800a572:	b29a      	uxth	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a580:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a582:	f7f9 ff21 	bl	80043c8 <HAL_GetTick>
 800a586:	4602      	mov	r2, r0
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a58e:	429a      	cmp	r2, r3
 800a590:	d803      	bhi.n	800a59a <HAL_SPI_TransmitReceive+0x542>
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a598:	d102      	bne.n	800a5a0 <HAL_SPI_TransmitReceive+0x548>
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d114      	bne.n	800a5ca <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 f845 	bl	800a630 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	e02e      	b.n	800a628 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a5ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f47f af10 	bne.w	800a3f2 <HAL_SPI_TransmitReceive+0x39a>
 800a5d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f47f af0c 	bne.w	800a3f2 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	2108      	movs	r1, #8
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f000 f8c3 	bl	800a770 <SPI_WaitOnFlagUntilTimeout>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d007      	beq.n	800a600 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5f6:	f043 0220 	orr.w	r2, r3, #32
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f000 f815 	bl	800a630 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d001      	beq.n	800a624 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	e001      	b.n	800a628 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800a624:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3730      	adds	r7, #48	; 0x30
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	699a      	ldr	r2, [r3, #24]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f042 0208 	orr.w	r2, r2, #8
 800a64e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	699a      	ldr	r2, [r3, #24]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f042 0210 	orr.w	r2, r2, #16
 800a65e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f022 0201 	bic.w	r2, r2, #1
 800a66e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6919      	ldr	r1, [r3, #16]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	4b3c      	ldr	r3, [pc, #240]	; (800a76c <SPI_CloseTransfer+0x13c>)
 800a67c:	400b      	ands	r3, r1
 800a67e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	689a      	ldr	r2, [r3, #8]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a68e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b04      	cmp	r3, #4
 800a69a:	d014      	beq.n	800a6c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f003 0320 	and.w	r3, r3, #32
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00f      	beq.n	800a6c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	699a      	ldr	r2, [r3, #24]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f042 0220 	orr.w	r2, r2, #32
 800a6c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d014      	beq.n	800a6fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00f      	beq.n	800a6fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6e2:	f043 0204 	orr.w	r2, r3, #4
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	699a      	ldr	r2, [r3, #24]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00f      	beq.n	800a726 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a70c:	f043 0201 	orr.w	r2, r3, #1
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	699a      	ldr	r2, [r3, #24]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a724:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00f      	beq.n	800a750 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a736:	f043 0208 	orr.w	r2, r3, #8
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	699a      	ldr	r2, [r3, #24]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a74e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a760:	bf00      	nop
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	fffffc90 	.word	0xfffffc90

0800a770 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	603b      	str	r3, [r7, #0]
 800a77c:	4613      	mov	r3, r2
 800a77e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a780:	e010      	b.n	800a7a4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a782:	f7f9 fe21 	bl	80043c8 <HAL_GetTick>
 800a786:	4602      	mov	r2, r0
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d803      	bhi.n	800a79a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a798:	d102      	bne.n	800a7a0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d101      	bne.n	800a7a4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e00f      	b.n	800a7c4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	695a      	ldr	r2, [r3, #20]
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	bf0c      	ite	eq
 800a7b4:	2301      	moveq	r3, #1
 800a7b6:	2300      	movne	r3, #0
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d0df      	beq.n	800a782 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d8:	095b      	lsrs	r3, r3, #5
 800a7da:	3301      	adds	r3, #1
 800a7dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	3307      	adds	r3, #7
 800a7ea:	08db      	lsrs	r3, r3, #3
 800a7ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	fb02 f303 	mul.w	r3, r2, r3
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e049      	b.n	800a8a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d106      	bne.n	800a82e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f841 	bl	800a8b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2202      	movs	r2, #2
 800a832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	3304      	adds	r3, #4
 800a83e:	4619      	mov	r1, r3
 800a840:	4610      	mov	r0, r2
 800a842:	f000 fd5b 	bl	800b2fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d001      	beq.n	800a8dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e054      	b.n	800a986 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f042 0201 	orr.w	r2, r2, #1
 800a8f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a26      	ldr	r2, [pc, #152]	; (800a994 <HAL_TIM_Base_Start_IT+0xd0>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d022      	beq.n	800a944 <HAL_TIM_Base_Start_IT+0x80>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a906:	d01d      	beq.n	800a944 <HAL_TIM_Base_Start_IT+0x80>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a22      	ldr	r2, [pc, #136]	; (800a998 <HAL_TIM_Base_Start_IT+0xd4>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d018      	beq.n	800a944 <HAL_TIM_Base_Start_IT+0x80>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a21      	ldr	r2, [pc, #132]	; (800a99c <HAL_TIM_Base_Start_IT+0xd8>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d013      	beq.n	800a944 <HAL_TIM_Base_Start_IT+0x80>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a1f      	ldr	r2, [pc, #124]	; (800a9a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d00e      	beq.n	800a944 <HAL_TIM_Base_Start_IT+0x80>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a1e      	ldr	r2, [pc, #120]	; (800a9a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d009      	beq.n	800a944 <HAL_TIM_Base_Start_IT+0x80>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a1c      	ldr	r2, [pc, #112]	; (800a9a8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d004      	beq.n	800a944 <HAL_TIM_Base_Start_IT+0x80>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a1b      	ldr	r2, [pc, #108]	; (800a9ac <HAL_TIM_Base_Start_IT+0xe8>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d115      	bne.n	800a970 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	689a      	ldr	r2, [r3, #8]
 800a94a:	4b19      	ldr	r3, [pc, #100]	; (800a9b0 <HAL_TIM_Base_Start_IT+0xec>)
 800a94c:	4013      	ands	r3, r2
 800a94e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b06      	cmp	r3, #6
 800a954:	d015      	beq.n	800a982 <HAL_TIM_Base_Start_IT+0xbe>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a95c:	d011      	beq.n	800a982 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f042 0201 	orr.w	r2, r2, #1
 800a96c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a96e:	e008      	b.n	800a982 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f042 0201 	orr.w	r2, r2, #1
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	e000      	b.n	800a984 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a982:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	40010000 	.word	0x40010000
 800a998:	40000400 	.word	0x40000400
 800a99c:	40000800 	.word	0x40000800
 800a9a0:	40000c00 	.word	0x40000c00
 800a9a4:	40010400 	.word	0x40010400
 800a9a8:	40001800 	.word	0x40001800
 800a9ac:	40014000 	.word	0x40014000
 800a9b0:	00010007 	.word	0x00010007

0800a9b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d101      	bne.n	800a9c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e049      	b.n	800aa5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d106      	bne.n	800a9e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7f9 f8f0 	bl	8003bc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3304      	adds	r3, #4
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	f000 fc82 	bl	800b2fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2200      	movs	r2, #0
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 ffb0 	bl	800b9dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a3e      	ldr	r2, [pc, #248]	; (800ab7c <HAL_TIM_PWM_Stop+0x118>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d013      	beq.n	800aaae <HAL_TIM_PWM_Stop+0x4a>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a3d      	ldr	r2, [pc, #244]	; (800ab80 <HAL_TIM_PWM_Stop+0x11c>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d00e      	beq.n	800aaae <HAL_TIM_PWM_Stop+0x4a>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a3b      	ldr	r2, [pc, #236]	; (800ab84 <HAL_TIM_PWM_Stop+0x120>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d009      	beq.n	800aaae <HAL_TIM_PWM_Stop+0x4a>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a3a      	ldr	r2, [pc, #232]	; (800ab88 <HAL_TIM_PWM_Stop+0x124>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d004      	beq.n	800aaae <HAL_TIM_PWM_Stop+0x4a>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a38      	ldr	r2, [pc, #224]	; (800ab8c <HAL_TIM_PWM_Stop+0x128>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d101      	bne.n	800aab2 <HAL_TIM_PWM_Stop+0x4e>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e000      	b.n	800aab4 <HAL_TIM_PWM_Stop+0x50>
 800aab2:	2300      	movs	r3, #0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d017      	beq.n	800aae8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6a1a      	ldr	r2, [r3, #32]
 800aabe:	f241 1311 	movw	r3, #4369	; 0x1111
 800aac2:	4013      	ands	r3, r2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10f      	bne.n	800aae8 <HAL_TIM_PWM_Stop+0x84>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	6a1a      	ldr	r2, [r3, #32]
 800aace:	f240 4344 	movw	r3, #1092	; 0x444
 800aad2:	4013      	ands	r3, r2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d107      	bne.n	800aae8 <HAL_TIM_PWM_Stop+0x84>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aae6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6a1a      	ldr	r2, [r3, #32]
 800aaee:	f241 1311 	movw	r3, #4369	; 0x1111
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10f      	bne.n	800ab18 <HAL_TIM_PWM_Stop+0xb4>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6a1a      	ldr	r2, [r3, #32]
 800aafe:	f240 4344 	movw	r3, #1092	; 0x444
 800ab02:	4013      	ands	r3, r2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d107      	bne.n	800ab18 <HAL_TIM_PWM_Stop+0xb4>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f022 0201 	bic.w	r2, r2, #1
 800ab16:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d104      	bne.n	800ab28 <HAL_TIM_PWM_Stop+0xc4>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab26:	e023      	b.n	800ab70 <HAL_TIM_PWM_Stop+0x10c>
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	2b04      	cmp	r3, #4
 800ab2c:	d104      	bne.n	800ab38 <HAL_TIM_PWM_Stop+0xd4>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab36:	e01b      	b.n	800ab70 <HAL_TIM_PWM_Stop+0x10c>
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2b08      	cmp	r3, #8
 800ab3c:	d104      	bne.n	800ab48 <HAL_TIM_PWM_Stop+0xe4>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab46:	e013      	b.n	800ab70 <HAL_TIM_PWM_Stop+0x10c>
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b0c      	cmp	r3, #12
 800ab4c:	d104      	bne.n	800ab58 <HAL_TIM_PWM_Stop+0xf4>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab56:	e00b      	b.n	800ab70 <HAL_TIM_PWM_Stop+0x10c>
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2b10      	cmp	r3, #16
 800ab5c:	d104      	bne.n	800ab68 <HAL_TIM_PWM_Stop+0x104>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab66:	e003      	b.n	800ab70 <HAL_TIM_PWM_Stop+0x10c>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	40010000 	.word	0x40010000
 800ab80:	40010400 	.word	0x40010400
 800ab84:	40014000 	.word	0x40014000
 800ab88:	40014400 	.word	0x40014400
 800ab8c:	40014800 	.word	0x40014800

0800ab90 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d109      	bne.n	800abb8 <HAL_TIM_PWM_Start_IT+0x28>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	2b01      	cmp	r3, #1
 800abae:	bf14      	ite	ne
 800abb0:	2301      	movne	r3, #1
 800abb2:	2300      	moveq	r3, #0
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	e03c      	b.n	800ac32 <HAL_TIM_PWM_Start_IT+0xa2>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	2b04      	cmp	r3, #4
 800abbc:	d109      	bne.n	800abd2 <HAL_TIM_PWM_Start_IT+0x42>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	bf14      	ite	ne
 800abca:	2301      	movne	r3, #1
 800abcc:	2300      	moveq	r3, #0
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	e02f      	b.n	800ac32 <HAL_TIM_PWM_Start_IT+0xa2>
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b08      	cmp	r3, #8
 800abd6:	d109      	bne.n	800abec <HAL_TIM_PWM_Start_IT+0x5c>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	bf14      	ite	ne
 800abe4:	2301      	movne	r3, #1
 800abe6:	2300      	moveq	r3, #0
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	e022      	b.n	800ac32 <HAL_TIM_PWM_Start_IT+0xa2>
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	2b0c      	cmp	r3, #12
 800abf0:	d109      	bne.n	800ac06 <HAL_TIM_PWM_Start_IT+0x76>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	bf14      	ite	ne
 800abfe:	2301      	movne	r3, #1
 800ac00:	2300      	moveq	r3, #0
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	e015      	b.n	800ac32 <HAL_TIM_PWM_Start_IT+0xa2>
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	2b10      	cmp	r3, #16
 800ac0a:	d109      	bne.n	800ac20 <HAL_TIM_PWM_Start_IT+0x90>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	bf14      	ite	ne
 800ac18:	2301      	movne	r3, #1
 800ac1a:	2300      	moveq	r3, #0
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	e008      	b.n	800ac32 <HAL_TIM_PWM_Start_IT+0xa2>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	bf14      	ite	ne
 800ac2c:	2301      	movne	r3, #1
 800ac2e:	2300      	moveq	r3, #0
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d001      	beq.n	800ac3a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e0ec      	b.n	800ae14 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d104      	bne.n	800ac4a <HAL_TIM_PWM_Start_IT+0xba>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac48:	e023      	b.n	800ac92 <HAL_TIM_PWM_Start_IT+0x102>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	d104      	bne.n	800ac5a <HAL_TIM_PWM_Start_IT+0xca>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2202      	movs	r2, #2
 800ac54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac58:	e01b      	b.n	800ac92 <HAL_TIM_PWM_Start_IT+0x102>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	d104      	bne.n	800ac6a <HAL_TIM_PWM_Start_IT+0xda>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2202      	movs	r2, #2
 800ac64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac68:	e013      	b.n	800ac92 <HAL_TIM_PWM_Start_IT+0x102>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b0c      	cmp	r3, #12
 800ac6e:	d104      	bne.n	800ac7a <HAL_TIM_PWM_Start_IT+0xea>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac78:	e00b      	b.n	800ac92 <HAL_TIM_PWM_Start_IT+0x102>
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b10      	cmp	r3, #16
 800ac7e:	d104      	bne.n	800ac8a <HAL_TIM_PWM_Start_IT+0xfa>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac88:	e003      	b.n	800ac92 <HAL_TIM_PWM_Start_IT+0x102>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b0c      	cmp	r3, #12
 800ac96:	d841      	bhi.n	800ad1c <HAL_TIM_PWM_Start_IT+0x18c>
 800ac98:	a201      	add	r2, pc, #4	; (adr r2, 800aca0 <HAL_TIM_PWM_Start_IT+0x110>)
 800ac9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9e:	bf00      	nop
 800aca0:	0800acd5 	.word	0x0800acd5
 800aca4:	0800ad1d 	.word	0x0800ad1d
 800aca8:	0800ad1d 	.word	0x0800ad1d
 800acac:	0800ad1d 	.word	0x0800ad1d
 800acb0:	0800ace7 	.word	0x0800ace7
 800acb4:	0800ad1d 	.word	0x0800ad1d
 800acb8:	0800ad1d 	.word	0x0800ad1d
 800acbc:	0800ad1d 	.word	0x0800ad1d
 800acc0:	0800acf9 	.word	0x0800acf9
 800acc4:	0800ad1d 	.word	0x0800ad1d
 800acc8:	0800ad1d 	.word	0x0800ad1d
 800accc:	0800ad1d 	.word	0x0800ad1d
 800acd0:	0800ad0b 	.word	0x0800ad0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68da      	ldr	r2, [r3, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f042 0202 	orr.w	r2, r2, #2
 800ace2:	60da      	str	r2, [r3, #12]
      break;
 800ace4:	e01d      	b.n	800ad22 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68da      	ldr	r2, [r3, #12]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f042 0204 	orr.w	r2, r2, #4
 800acf4:	60da      	str	r2, [r3, #12]
      break;
 800acf6:	e014      	b.n	800ad22 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68da      	ldr	r2, [r3, #12]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f042 0208 	orr.w	r2, r2, #8
 800ad06:	60da      	str	r2, [r3, #12]
      break;
 800ad08:	e00b      	b.n	800ad22 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68da      	ldr	r2, [r3, #12]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f042 0210 	orr.w	r2, r2, #16
 800ad18:	60da      	str	r2, [r3, #12]
      break;
 800ad1a:	e002      	b.n	800ad22 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad20:	bf00      	nop
  }

  if (status == HAL_OK)
 800ad22:	7bfb      	ldrb	r3, [r7, #15]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d174      	bne.n	800ae12 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 fe53 	bl	800b9dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a38      	ldr	r2, [pc, #224]	; (800ae1c <HAL_TIM_PWM_Start_IT+0x28c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d013      	beq.n	800ad68 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a36      	ldr	r2, [pc, #216]	; (800ae20 <HAL_TIM_PWM_Start_IT+0x290>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d00e      	beq.n	800ad68 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a35      	ldr	r2, [pc, #212]	; (800ae24 <HAL_TIM_PWM_Start_IT+0x294>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d009      	beq.n	800ad68 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a33      	ldr	r2, [pc, #204]	; (800ae28 <HAL_TIM_PWM_Start_IT+0x298>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d004      	beq.n	800ad68 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a32      	ldr	r2, [pc, #200]	; (800ae2c <HAL_TIM_PWM_Start_IT+0x29c>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d101      	bne.n	800ad6c <HAL_TIM_PWM_Start_IT+0x1dc>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e000      	b.n	800ad6e <HAL_TIM_PWM_Start_IT+0x1de>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d007      	beq.n	800ad82 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a25      	ldr	r2, [pc, #148]	; (800ae1c <HAL_TIM_PWM_Start_IT+0x28c>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d022      	beq.n	800add2 <HAL_TIM_PWM_Start_IT+0x242>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad94:	d01d      	beq.n	800add2 <HAL_TIM_PWM_Start_IT+0x242>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a25      	ldr	r2, [pc, #148]	; (800ae30 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d018      	beq.n	800add2 <HAL_TIM_PWM_Start_IT+0x242>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a23      	ldr	r2, [pc, #140]	; (800ae34 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d013      	beq.n	800add2 <HAL_TIM_PWM_Start_IT+0x242>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a22      	ldr	r2, [pc, #136]	; (800ae38 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d00e      	beq.n	800add2 <HAL_TIM_PWM_Start_IT+0x242>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a19      	ldr	r2, [pc, #100]	; (800ae20 <HAL_TIM_PWM_Start_IT+0x290>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d009      	beq.n	800add2 <HAL_TIM_PWM_Start_IT+0x242>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a1e      	ldr	r2, [pc, #120]	; (800ae3c <HAL_TIM_PWM_Start_IT+0x2ac>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d004      	beq.n	800add2 <HAL_TIM_PWM_Start_IT+0x242>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a15      	ldr	r2, [pc, #84]	; (800ae24 <HAL_TIM_PWM_Start_IT+0x294>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d115      	bne.n	800adfe <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	689a      	ldr	r2, [r3, #8]
 800add8:	4b19      	ldr	r3, [pc, #100]	; (800ae40 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800adda:	4013      	ands	r3, r2
 800addc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2b06      	cmp	r3, #6
 800ade2:	d015      	beq.n	800ae10 <HAL_TIM_PWM_Start_IT+0x280>
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adea:	d011      	beq.n	800ae10 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f042 0201 	orr.w	r2, r2, #1
 800adfa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adfc:	e008      	b.n	800ae10 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f042 0201 	orr.w	r2, r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	e000      	b.n	800ae12 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae10:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	40010000 	.word	0x40010000
 800ae20:	40010400 	.word	0x40010400
 800ae24:	40014000 	.word	0x40014000
 800ae28:	40014400 	.word	0x40014400
 800ae2c:	40014800 	.word	0x40014800
 800ae30:	40000400 	.word	0x40000400
 800ae34:	40000800 	.word	0x40000800
 800ae38:	40000c00 	.word	0x40000c00
 800ae3c:	40001800 	.word	0x40001800
 800ae40:	00010007 	.word	0x00010007

0800ae44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	f003 0302 	and.w	r3, r3, #2
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d122      	bne.n	800aea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	f003 0302 	and.w	r3, r3, #2
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d11b      	bne.n	800aea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f06f 0202 	mvn.w	r2, #2
 800ae70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2201      	movs	r2, #1
 800ae76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	f003 0303 	and.w	r3, r3, #3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fa1a 	bl	800b2c0 <HAL_TIM_IC_CaptureCallback>
 800ae8c:	e005      	b.n	800ae9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fa0c 	bl	800b2ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fa1d 	bl	800b2d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	f003 0304 	and.w	r3, r3, #4
 800aeaa:	2b04      	cmp	r3, #4
 800aeac:	d122      	bne.n	800aef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	f003 0304 	and.w	r3, r3, #4
 800aeb8:	2b04      	cmp	r3, #4
 800aeba:	d11b      	bne.n	800aef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f06f 0204 	mvn.w	r2, #4
 800aec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2202      	movs	r2, #2
 800aeca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f9f0 	bl	800b2c0 <HAL_TIM_IC_CaptureCallback>
 800aee0:	e005      	b.n	800aeee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f9e2 	bl	800b2ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f9f3 	bl	800b2d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	f003 0308 	and.w	r3, r3, #8
 800aefe:	2b08      	cmp	r3, #8
 800af00:	d122      	bne.n	800af48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	f003 0308 	and.w	r3, r3, #8
 800af0c:	2b08      	cmp	r3, #8
 800af0e:	d11b      	bne.n	800af48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f06f 0208 	mvn.w	r2, #8
 800af18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2204      	movs	r2, #4
 800af1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	f003 0303 	and.w	r3, r3, #3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f9c6 	bl	800b2c0 <HAL_TIM_IC_CaptureCallback>
 800af34:	e005      	b.n	800af42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f9b8 	bl	800b2ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f9c9 	bl	800b2d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	f003 0310 	and.w	r3, r3, #16
 800af52:	2b10      	cmp	r3, #16
 800af54:	d122      	bne.n	800af9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	f003 0310 	and.w	r3, r3, #16
 800af60:	2b10      	cmp	r3, #16
 800af62:	d11b      	bne.n	800af9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f06f 0210 	mvn.w	r2, #16
 800af6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2208      	movs	r2, #8
 800af72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	69db      	ldr	r3, [r3, #28]
 800af7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d003      	beq.n	800af8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 f99c 	bl	800b2c0 <HAL_TIM_IC_CaptureCallback>
 800af88:	e005      	b.n	800af96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f98e 	bl	800b2ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f99f 	bl	800b2d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d10e      	bne.n	800afc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d107      	bne.n	800afc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f06f 0201 	mvn.w	r2, #1
 800afc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7f8 fb1e 	bl	8003604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afd2:	2b80      	cmp	r3, #128	; 0x80
 800afd4:	d10e      	bne.n	800aff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afe0:	2b80      	cmp	r3, #128	; 0x80
 800afe2:	d107      	bne.n	800aff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800afec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fdb2 	bl	800bb58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800affe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b002:	d10e      	bne.n	800b022 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b00e:	2b80      	cmp	r3, #128	; 0x80
 800b010:	d107      	bne.n	800b022 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b01a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fda5 	bl	800bb6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b02c:	2b40      	cmp	r3, #64	; 0x40
 800b02e:	d10e      	bne.n	800b04e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b03a:	2b40      	cmp	r3, #64	; 0x40
 800b03c:	d107      	bne.n	800b04e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 f94d 	bl	800b2e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	f003 0320 	and.w	r3, r3, #32
 800b058:	2b20      	cmp	r3, #32
 800b05a:	d10e      	bne.n	800b07a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	f003 0320 	and.w	r3, r3, #32
 800b066:	2b20      	cmp	r3, #32
 800b068:	d107      	bne.n	800b07a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f06f 0220 	mvn.w	r2, #32
 800b072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fd65 	bl	800bb44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b07a:	bf00      	nop
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
	...

0800b084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d101      	bne.n	800b0a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b09e:	2302      	movs	r3, #2
 800b0a0:	e0ff      	b.n	800b2a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b14      	cmp	r3, #20
 800b0ae:	f200 80f0 	bhi.w	800b292 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b0b2:	a201      	add	r2, pc, #4	; (adr r2, 800b0b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b8:	0800b10d 	.word	0x0800b10d
 800b0bc:	0800b293 	.word	0x0800b293
 800b0c0:	0800b293 	.word	0x0800b293
 800b0c4:	0800b293 	.word	0x0800b293
 800b0c8:	0800b14d 	.word	0x0800b14d
 800b0cc:	0800b293 	.word	0x0800b293
 800b0d0:	0800b293 	.word	0x0800b293
 800b0d4:	0800b293 	.word	0x0800b293
 800b0d8:	0800b18f 	.word	0x0800b18f
 800b0dc:	0800b293 	.word	0x0800b293
 800b0e0:	0800b293 	.word	0x0800b293
 800b0e4:	0800b293 	.word	0x0800b293
 800b0e8:	0800b1cf 	.word	0x0800b1cf
 800b0ec:	0800b293 	.word	0x0800b293
 800b0f0:	0800b293 	.word	0x0800b293
 800b0f4:	0800b293 	.word	0x0800b293
 800b0f8:	0800b211 	.word	0x0800b211
 800b0fc:	0800b293 	.word	0x0800b293
 800b100:	0800b293 	.word	0x0800b293
 800b104:	0800b293 	.word	0x0800b293
 800b108:	0800b251 	.word	0x0800b251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68b9      	ldr	r1, [r7, #8]
 800b112:	4618      	mov	r0, r3
 800b114:	f000 f98c 	bl	800b430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	699a      	ldr	r2, [r3, #24]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f042 0208 	orr.w	r2, r2, #8
 800b126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	699a      	ldr	r2, [r3, #24]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f022 0204 	bic.w	r2, r2, #4
 800b136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6999      	ldr	r1, [r3, #24]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	691a      	ldr	r2, [r3, #16]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	430a      	orrs	r2, r1
 800b148:	619a      	str	r2, [r3, #24]
      break;
 800b14a:	e0a5      	b.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68b9      	ldr	r1, [r7, #8]
 800b152:	4618      	mov	r0, r3
 800b154:	f000 f9fc 	bl	800b550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	699a      	ldr	r2, [r3, #24]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	699a      	ldr	r2, [r3, #24]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6999      	ldr	r1, [r3, #24]
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	021a      	lsls	r2, r3, #8
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	430a      	orrs	r2, r1
 800b18a:	619a      	str	r2, [r3, #24]
      break;
 800b18c:	e084      	b.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68b9      	ldr	r1, [r7, #8]
 800b194:	4618      	mov	r0, r3
 800b196:	f000 fa65 	bl	800b664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	69da      	ldr	r2, [r3, #28]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f042 0208 	orr.w	r2, r2, #8
 800b1a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	69da      	ldr	r2, [r3, #28]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f022 0204 	bic.w	r2, r2, #4
 800b1b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	69d9      	ldr	r1, [r3, #28]
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	691a      	ldr	r2, [r3, #16]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	430a      	orrs	r2, r1
 800b1ca:	61da      	str	r2, [r3, #28]
      break;
 800b1cc:	e064      	b.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68b9      	ldr	r1, [r7, #8]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 facd 	bl	800b774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	69da      	ldr	r2, [r3, #28]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	69da      	ldr	r2, [r3, #28]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	69d9      	ldr	r1, [r3, #28]
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	021a      	lsls	r2, r3, #8
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	430a      	orrs	r2, r1
 800b20c:	61da      	str	r2, [r3, #28]
      break;
 800b20e:	e043      	b.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68b9      	ldr	r1, [r7, #8]
 800b216:	4618      	mov	r0, r3
 800b218:	f000 fb16 	bl	800b848 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f042 0208 	orr.w	r2, r2, #8
 800b22a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f022 0204 	bic.w	r2, r2, #4
 800b23a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	691a      	ldr	r2, [r3, #16]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b24e:	e023      	b.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68b9      	ldr	r1, [r7, #8]
 800b256:	4618      	mov	r0, r3
 800b258:	f000 fb5a 	bl	800b910 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b26a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b27a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	021a      	lsls	r2, r3, #8
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	430a      	orrs	r2, r1
 800b28e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b290:	e002      	b.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	75fb      	strb	r3, [r7, #23]
      break;
 800b296:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3718      	adds	r7, #24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop

0800b2ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2c8:	bf00      	nop
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a40      	ldr	r2, [pc, #256]	; (800b410 <TIM_Base_SetConfig+0x114>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d013      	beq.n	800b33c <TIM_Base_SetConfig+0x40>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b31a:	d00f      	beq.n	800b33c <TIM_Base_SetConfig+0x40>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a3d      	ldr	r2, [pc, #244]	; (800b414 <TIM_Base_SetConfig+0x118>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d00b      	beq.n	800b33c <TIM_Base_SetConfig+0x40>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a3c      	ldr	r2, [pc, #240]	; (800b418 <TIM_Base_SetConfig+0x11c>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d007      	beq.n	800b33c <TIM_Base_SetConfig+0x40>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a3b      	ldr	r2, [pc, #236]	; (800b41c <TIM_Base_SetConfig+0x120>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d003      	beq.n	800b33c <TIM_Base_SetConfig+0x40>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a3a      	ldr	r2, [pc, #232]	; (800b420 <TIM_Base_SetConfig+0x124>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d108      	bne.n	800b34e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a2f      	ldr	r2, [pc, #188]	; (800b410 <TIM_Base_SetConfig+0x114>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d01f      	beq.n	800b396 <TIM_Base_SetConfig+0x9a>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b35c:	d01b      	beq.n	800b396 <TIM_Base_SetConfig+0x9a>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a2c      	ldr	r2, [pc, #176]	; (800b414 <TIM_Base_SetConfig+0x118>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d017      	beq.n	800b396 <TIM_Base_SetConfig+0x9a>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a2b      	ldr	r2, [pc, #172]	; (800b418 <TIM_Base_SetConfig+0x11c>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d013      	beq.n	800b396 <TIM_Base_SetConfig+0x9a>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a2a      	ldr	r2, [pc, #168]	; (800b41c <TIM_Base_SetConfig+0x120>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d00f      	beq.n	800b396 <TIM_Base_SetConfig+0x9a>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a29      	ldr	r2, [pc, #164]	; (800b420 <TIM_Base_SetConfig+0x124>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d00b      	beq.n	800b396 <TIM_Base_SetConfig+0x9a>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a28      	ldr	r2, [pc, #160]	; (800b424 <TIM_Base_SetConfig+0x128>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d007      	beq.n	800b396 <TIM_Base_SetConfig+0x9a>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a27      	ldr	r2, [pc, #156]	; (800b428 <TIM_Base_SetConfig+0x12c>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d003      	beq.n	800b396 <TIM_Base_SetConfig+0x9a>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a26      	ldr	r2, [pc, #152]	; (800b42c <TIM_Base_SetConfig+0x130>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d108      	bne.n	800b3a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b39c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	689a      	ldr	r2, [r3, #8]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a10      	ldr	r2, [pc, #64]	; (800b410 <TIM_Base_SetConfig+0x114>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d00f      	beq.n	800b3f4 <TIM_Base_SetConfig+0xf8>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a12      	ldr	r2, [pc, #72]	; (800b420 <TIM_Base_SetConfig+0x124>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d00b      	beq.n	800b3f4 <TIM_Base_SetConfig+0xf8>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a11      	ldr	r2, [pc, #68]	; (800b424 <TIM_Base_SetConfig+0x128>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d007      	beq.n	800b3f4 <TIM_Base_SetConfig+0xf8>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a10      	ldr	r2, [pc, #64]	; (800b428 <TIM_Base_SetConfig+0x12c>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d003      	beq.n	800b3f4 <TIM_Base_SetConfig+0xf8>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a0f      	ldr	r2, [pc, #60]	; (800b42c <TIM_Base_SetConfig+0x130>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d103      	bne.n	800b3fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	691a      	ldr	r2, [r3, #16]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	615a      	str	r2, [r3, #20]
}
 800b402:	bf00      	nop
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	40010000 	.word	0x40010000
 800b414:	40000400 	.word	0x40000400
 800b418:	40000800 	.word	0x40000800
 800b41c:	40000c00 	.word	0x40000c00
 800b420:	40010400 	.word	0x40010400
 800b424:	40014000 	.word	0x40014000
 800b428:	40014400 	.word	0x40014400
 800b42c:	40014800 	.word	0x40014800

0800b430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b430:	b480      	push	{r7}
 800b432:	b087      	sub	sp, #28
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	f023 0201 	bic.w	r2, r3, #1
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	4b37      	ldr	r3, [pc, #220]	; (800b538 <TIM_OC1_SetConfig+0x108>)
 800b45c:	4013      	ands	r3, r2
 800b45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f023 0303 	bic.w	r3, r3, #3
 800b466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	4313      	orrs	r3, r2
 800b470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	f023 0302 	bic.w	r3, r3, #2
 800b478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	4313      	orrs	r3, r2
 800b482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a2d      	ldr	r2, [pc, #180]	; (800b53c <TIM_OC1_SetConfig+0x10c>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d00f      	beq.n	800b4ac <TIM_OC1_SetConfig+0x7c>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a2c      	ldr	r2, [pc, #176]	; (800b540 <TIM_OC1_SetConfig+0x110>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d00b      	beq.n	800b4ac <TIM_OC1_SetConfig+0x7c>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a2b      	ldr	r2, [pc, #172]	; (800b544 <TIM_OC1_SetConfig+0x114>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d007      	beq.n	800b4ac <TIM_OC1_SetConfig+0x7c>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a2a      	ldr	r2, [pc, #168]	; (800b548 <TIM_OC1_SetConfig+0x118>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d003      	beq.n	800b4ac <TIM_OC1_SetConfig+0x7c>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a29      	ldr	r2, [pc, #164]	; (800b54c <TIM_OC1_SetConfig+0x11c>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d10c      	bne.n	800b4c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	f023 0308 	bic.w	r3, r3, #8
 800b4b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	f023 0304 	bic.w	r3, r3, #4
 800b4c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a1c      	ldr	r2, [pc, #112]	; (800b53c <TIM_OC1_SetConfig+0x10c>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d00f      	beq.n	800b4ee <TIM_OC1_SetConfig+0xbe>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a1b      	ldr	r2, [pc, #108]	; (800b540 <TIM_OC1_SetConfig+0x110>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d00b      	beq.n	800b4ee <TIM_OC1_SetConfig+0xbe>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a1a      	ldr	r2, [pc, #104]	; (800b544 <TIM_OC1_SetConfig+0x114>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d007      	beq.n	800b4ee <TIM_OC1_SetConfig+0xbe>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a19      	ldr	r2, [pc, #100]	; (800b548 <TIM_OC1_SetConfig+0x118>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d003      	beq.n	800b4ee <TIM_OC1_SetConfig+0xbe>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a18      	ldr	r2, [pc, #96]	; (800b54c <TIM_OC1_SetConfig+0x11c>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d111      	bne.n	800b512 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	4313      	orrs	r3, r2
 800b506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	4313      	orrs	r3, r2
 800b510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	697a      	ldr	r2, [r7, #20]
 800b52a:	621a      	str	r2, [r3, #32]
}
 800b52c:	bf00      	nop
 800b52e:	371c      	adds	r7, #28
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	fffeff8f 	.word	0xfffeff8f
 800b53c:	40010000 	.word	0x40010000
 800b540:	40010400 	.word	0x40010400
 800b544:	40014000 	.word	0x40014000
 800b548:	40014400 	.word	0x40014400
 800b54c:	40014800 	.word	0x40014800

0800b550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b550:	b480      	push	{r7}
 800b552:	b087      	sub	sp, #28
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a1b      	ldr	r3, [r3, #32]
 800b55e:	f023 0210 	bic.w	r2, r3, #16
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a1b      	ldr	r3, [r3, #32]
 800b56a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	4b34      	ldr	r3, [pc, #208]	; (800b64c <TIM_OC2_SetConfig+0xfc>)
 800b57c:	4013      	ands	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	4313      	orrs	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	f023 0320 	bic.w	r3, r3, #32
 800b59a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	011b      	lsls	r3, r3, #4
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a29      	ldr	r2, [pc, #164]	; (800b650 <TIM_OC2_SetConfig+0x100>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d003      	beq.n	800b5b8 <TIM_OC2_SetConfig+0x68>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a28      	ldr	r2, [pc, #160]	; (800b654 <TIM_OC2_SetConfig+0x104>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d10d      	bne.n	800b5d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	011b      	lsls	r3, r3, #4
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a1e      	ldr	r2, [pc, #120]	; (800b650 <TIM_OC2_SetConfig+0x100>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d00f      	beq.n	800b5fc <TIM_OC2_SetConfig+0xac>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a1d      	ldr	r2, [pc, #116]	; (800b654 <TIM_OC2_SetConfig+0x104>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d00b      	beq.n	800b5fc <TIM_OC2_SetConfig+0xac>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a1c      	ldr	r2, [pc, #112]	; (800b658 <TIM_OC2_SetConfig+0x108>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d007      	beq.n	800b5fc <TIM_OC2_SetConfig+0xac>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a1b      	ldr	r2, [pc, #108]	; (800b65c <TIM_OC2_SetConfig+0x10c>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d003      	beq.n	800b5fc <TIM_OC2_SetConfig+0xac>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a1a      	ldr	r2, [pc, #104]	; (800b660 <TIM_OC2_SetConfig+0x110>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d113      	bne.n	800b624 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b60a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	695b      	ldr	r3, [r3, #20]
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	4313      	orrs	r3, r2
 800b616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	4313      	orrs	r3, r2
 800b622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	685a      	ldr	r2, [r3, #4]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	697a      	ldr	r2, [r7, #20]
 800b63c:	621a      	str	r2, [r3, #32]
}
 800b63e:	bf00      	nop
 800b640:	371c      	adds	r7, #28
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	feff8fff 	.word	0xfeff8fff
 800b650:	40010000 	.word	0x40010000
 800b654:	40010400 	.word	0x40010400
 800b658:	40014000 	.word	0x40014000
 800b65c:	40014400 	.word	0x40014400
 800b660:	40014800 	.word	0x40014800

0800b664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b664:	b480      	push	{r7}
 800b666:	b087      	sub	sp, #28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a1b      	ldr	r3, [r3, #32]
 800b672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a1b      	ldr	r3, [r3, #32]
 800b67e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	69db      	ldr	r3, [r3, #28]
 800b68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	4b33      	ldr	r3, [pc, #204]	; (800b75c <TIM_OC3_SetConfig+0xf8>)
 800b690:	4013      	ands	r3, r2
 800b692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 0303 	bic.w	r3, r3, #3
 800b69a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	021b      	lsls	r3, r3, #8
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a28      	ldr	r2, [pc, #160]	; (800b760 <TIM_OC3_SetConfig+0xfc>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d003      	beq.n	800b6ca <TIM_OC3_SetConfig+0x66>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a27      	ldr	r2, [pc, #156]	; (800b764 <TIM_OC3_SetConfig+0x100>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d10d      	bne.n	800b6e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	021b      	lsls	r3, r3, #8
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a1d      	ldr	r2, [pc, #116]	; (800b760 <TIM_OC3_SetConfig+0xfc>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d00f      	beq.n	800b70e <TIM_OC3_SetConfig+0xaa>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a1c      	ldr	r2, [pc, #112]	; (800b764 <TIM_OC3_SetConfig+0x100>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d00b      	beq.n	800b70e <TIM_OC3_SetConfig+0xaa>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a1b      	ldr	r2, [pc, #108]	; (800b768 <TIM_OC3_SetConfig+0x104>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d007      	beq.n	800b70e <TIM_OC3_SetConfig+0xaa>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a1a      	ldr	r2, [pc, #104]	; (800b76c <TIM_OC3_SetConfig+0x108>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d003      	beq.n	800b70e <TIM_OC3_SetConfig+0xaa>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a19      	ldr	r2, [pc, #100]	; (800b770 <TIM_OC3_SetConfig+0x10c>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d113      	bne.n	800b736 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b71c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	011b      	lsls	r3, r3, #4
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	4313      	orrs	r3, r2
 800b728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	011b      	lsls	r3, r3, #4
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	4313      	orrs	r3, r2
 800b734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	621a      	str	r2, [r3, #32]
}
 800b750:	bf00      	nop
 800b752:	371c      	adds	r7, #28
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	fffeff8f 	.word	0xfffeff8f
 800b760:	40010000 	.word	0x40010000
 800b764:	40010400 	.word	0x40010400
 800b768:	40014000 	.word	0x40014000
 800b76c:	40014400 	.word	0x40014400
 800b770:	40014800 	.word	0x40014800

0800b774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b774:	b480      	push	{r7}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	69db      	ldr	r3, [r3, #28]
 800b79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	4b24      	ldr	r3, [pc, #144]	; (800b830 <TIM_OC4_SetConfig+0xbc>)
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	021b      	lsls	r3, r3, #8
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	031b      	lsls	r3, r3, #12
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a19      	ldr	r2, [pc, #100]	; (800b834 <TIM_OC4_SetConfig+0xc0>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d00f      	beq.n	800b7f4 <TIM_OC4_SetConfig+0x80>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a18      	ldr	r2, [pc, #96]	; (800b838 <TIM_OC4_SetConfig+0xc4>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d00b      	beq.n	800b7f4 <TIM_OC4_SetConfig+0x80>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a17      	ldr	r2, [pc, #92]	; (800b83c <TIM_OC4_SetConfig+0xc8>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d007      	beq.n	800b7f4 <TIM_OC4_SetConfig+0x80>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a16      	ldr	r2, [pc, #88]	; (800b840 <TIM_OC4_SetConfig+0xcc>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d003      	beq.n	800b7f4 <TIM_OC4_SetConfig+0x80>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a15      	ldr	r2, [pc, #84]	; (800b844 <TIM_OC4_SetConfig+0xd0>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d109      	bne.n	800b808 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	019b      	lsls	r3, r3, #6
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	4313      	orrs	r3, r2
 800b806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	693a      	ldr	r2, [r7, #16]
 800b820:	621a      	str	r2, [r3, #32]
}
 800b822:	bf00      	nop
 800b824:	371c      	adds	r7, #28
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	feff8fff 	.word	0xfeff8fff
 800b834:	40010000 	.word	0x40010000
 800b838:	40010400 	.word	0x40010400
 800b83c:	40014000 	.word	0x40014000
 800b840:	40014400 	.word	0x40014400
 800b844:	40014800 	.word	0x40014800

0800b848 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	4b21      	ldr	r3, [pc, #132]	; (800b8f8 <TIM_OC5_SetConfig+0xb0>)
 800b874:	4013      	ands	r3, r2
 800b876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	4313      	orrs	r3, r2
 800b880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b888:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	041b      	lsls	r3, r3, #16
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	4313      	orrs	r3, r2
 800b894:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a18      	ldr	r2, [pc, #96]	; (800b8fc <TIM_OC5_SetConfig+0xb4>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d00f      	beq.n	800b8be <TIM_OC5_SetConfig+0x76>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a17      	ldr	r2, [pc, #92]	; (800b900 <TIM_OC5_SetConfig+0xb8>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d00b      	beq.n	800b8be <TIM_OC5_SetConfig+0x76>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a16      	ldr	r2, [pc, #88]	; (800b904 <TIM_OC5_SetConfig+0xbc>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d007      	beq.n	800b8be <TIM_OC5_SetConfig+0x76>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a15      	ldr	r2, [pc, #84]	; (800b908 <TIM_OC5_SetConfig+0xc0>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d003      	beq.n	800b8be <TIM_OC5_SetConfig+0x76>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4a14      	ldr	r2, [pc, #80]	; (800b90c <TIM_OC5_SetConfig+0xc4>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d109      	bne.n	800b8d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	021b      	lsls	r3, r3, #8
 800b8cc:	697a      	ldr	r2, [r7, #20]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	621a      	str	r2, [r3, #32]
}
 800b8ec:	bf00      	nop
 800b8ee:	371c      	adds	r7, #28
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	fffeff8f 	.word	0xfffeff8f
 800b8fc:	40010000 	.word	0x40010000
 800b900:	40010400 	.word	0x40010400
 800b904:	40014000 	.word	0x40014000
 800b908:	40014400 	.word	0x40014400
 800b90c:	40014800 	.word	0x40014800

0800b910 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b910:	b480      	push	{r7}
 800b912:	b087      	sub	sp, #28
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a1b      	ldr	r3, [r3, #32]
 800b92a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	4b22      	ldr	r3, [pc, #136]	; (800b9c4 <TIM_OC6_SetConfig+0xb4>)
 800b93c:	4013      	ands	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	021b      	lsls	r3, r3, #8
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	4313      	orrs	r3, r2
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	051b      	lsls	r3, r3, #20
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a19      	ldr	r2, [pc, #100]	; (800b9c8 <TIM_OC6_SetConfig+0xb8>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d00f      	beq.n	800b988 <TIM_OC6_SetConfig+0x78>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a18      	ldr	r2, [pc, #96]	; (800b9cc <TIM_OC6_SetConfig+0xbc>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d00b      	beq.n	800b988 <TIM_OC6_SetConfig+0x78>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a17      	ldr	r2, [pc, #92]	; (800b9d0 <TIM_OC6_SetConfig+0xc0>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d007      	beq.n	800b988 <TIM_OC6_SetConfig+0x78>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a16      	ldr	r2, [pc, #88]	; (800b9d4 <TIM_OC6_SetConfig+0xc4>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d003      	beq.n	800b988 <TIM_OC6_SetConfig+0x78>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a15      	ldr	r2, [pc, #84]	; (800b9d8 <TIM_OC6_SetConfig+0xc8>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d109      	bne.n	800b99c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b98e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	695b      	ldr	r3, [r3, #20]
 800b994:	029b      	lsls	r3, r3, #10
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	4313      	orrs	r3, r2
 800b99a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	693a      	ldr	r2, [r7, #16]
 800b9b4:	621a      	str	r2, [r3, #32]
}
 800b9b6:	bf00      	nop
 800b9b8:	371c      	adds	r7, #28
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	feff8fff 	.word	0xfeff8fff
 800b9c8:	40010000 	.word	0x40010000
 800b9cc:	40010400 	.word	0x40010400
 800b9d0:	40014000 	.word	0x40014000
 800b9d4:	40014400 	.word	0x40014400
 800b9d8:	40014800 	.word	0x40014800

0800b9dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f003 031f 	and.w	r3, r3, #31
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6a1a      	ldr	r2, [r3, #32]
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	43db      	mvns	r3, r3
 800b9fe:	401a      	ands	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6a1a      	ldr	r2, [r3, #32]
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	f003 031f 	and.w	r3, r3, #31
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	fa01 f303 	lsl.w	r3, r1, r3
 800ba14:	431a      	orrs	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	621a      	str	r2, [r3, #32]
}
 800ba1a:	bf00      	nop
 800ba1c:	371c      	adds	r7, #28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
	...

0800ba28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d101      	bne.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	e06d      	b.n	800bb1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a30      	ldr	r2, [pc, #192]	; (800bb28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d004      	beq.n	800ba74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a2f      	ldr	r2, [pc, #188]	; (800bb2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d108      	bne.n	800ba86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a20      	ldr	r2, [pc, #128]	; (800bb28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d022      	beq.n	800baf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bab2:	d01d      	beq.n	800baf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a1d      	ldr	r2, [pc, #116]	; (800bb30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d018      	beq.n	800baf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a1c      	ldr	r2, [pc, #112]	; (800bb34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d013      	beq.n	800baf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a1a      	ldr	r2, [pc, #104]	; (800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d00e      	beq.n	800baf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a15      	ldr	r2, [pc, #84]	; (800bb2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d009      	beq.n	800baf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a16      	ldr	r2, [pc, #88]	; (800bb3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d004      	beq.n	800baf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a15      	ldr	r2, [pc, #84]	; (800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d10c      	bne.n	800bb0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800baf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	40010000 	.word	0x40010000
 800bb2c:	40010400 	.word	0x40010400
 800bb30:	40000400 	.word	0x40000400
 800bb34:	40000800 	.word	0x40000800
 800bb38:	40000c00 	.word	0x40000c00
 800bb3c:	40001800 	.word	0x40001800
 800bb40:	40014000 	.word	0x40014000

0800bb44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e042      	b.n	800bc18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d106      	bne.n	800bbaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7f8 f877 	bl	8003c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2224      	movs	r2, #36	; 0x24
 800bbae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f022 0201 	bic.w	r2, r2, #1
 800bbc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f82c 	bl	800bc20 <UART_SetConfig>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d101      	bne.n	800bbd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e022      	b.n	800bc18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d002      	beq.n	800bbe0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fd88 	bl	800c6f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	685a      	ldr	r2, [r3, #4]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	689a      	ldr	r2, [r3, #8]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f042 0201 	orr.w	r2, r2, #1
 800bc0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 fe0f 	bl	800c834 <UART_CheckIdleState>
 800bc16:	4603      	mov	r3, r0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc24:	b092      	sub	sp, #72	; 0x48
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	689a      	ldr	r2, [r3, #8]
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	431a      	orrs	r2, r3
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	4bbe      	ldr	r3, [pc, #760]	; (800bf48 <UART_SetConfig+0x328>)
 800bc50:	4013      	ands	r3, r2
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	6812      	ldr	r2, [r2, #0]
 800bc56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc58:	430b      	orrs	r3, r1
 800bc5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	68da      	ldr	r2, [r3, #12]
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	430a      	orrs	r2, r1
 800bc70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4ab3      	ldr	r2, [pc, #716]	; (800bf4c <UART_SetConfig+0x32c>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d004      	beq.n	800bc8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	6a1b      	ldr	r3, [r3, #32]
 800bc86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	689a      	ldr	r2, [r3, #8]
 800bc92:	4baf      	ldr	r3, [pc, #700]	; (800bf50 <UART_SetConfig+0x330>)
 800bc94:	4013      	ands	r3, r2
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	6812      	ldr	r2, [r2, #0]
 800bc9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc9c:	430b      	orrs	r3, r1
 800bc9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	f023 010f 	bic.w	r1, r3, #15
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	430a      	orrs	r2, r1
 800bcb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4aa6      	ldr	r2, [pc, #664]	; (800bf54 <UART_SetConfig+0x334>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d177      	bne.n	800bdb0 <UART_SetConfig+0x190>
 800bcc0:	4ba5      	ldr	r3, [pc, #660]	; (800bf58 <UART_SetConfig+0x338>)
 800bcc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bcc8:	2b28      	cmp	r3, #40	; 0x28
 800bcca:	d86d      	bhi.n	800bda8 <UART_SetConfig+0x188>
 800bccc:	a201      	add	r2, pc, #4	; (adr r2, 800bcd4 <UART_SetConfig+0xb4>)
 800bcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd2:	bf00      	nop
 800bcd4:	0800bd79 	.word	0x0800bd79
 800bcd8:	0800bda9 	.word	0x0800bda9
 800bcdc:	0800bda9 	.word	0x0800bda9
 800bce0:	0800bda9 	.word	0x0800bda9
 800bce4:	0800bda9 	.word	0x0800bda9
 800bce8:	0800bda9 	.word	0x0800bda9
 800bcec:	0800bda9 	.word	0x0800bda9
 800bcf0:	0800bda9 	.word	0x0800bda9
 800bcf4:	0800bd81 	.word	0x0800bd81
 800bcf8:	0800bda9 	.word	0x0800bda9
 800bcfc:	0800bda9 	.word	0x0800bda9
 800bd00:	0800bda9 	.word	0x0800bda9
 800bd04:	0800bda9 	.word	0x0800bda9
 800bd08:	0800bda9 	.word	0x0800bda9
 800bd0c:	0800bda9 	.word	0x0800bda9
 800bd10:	0800bda9 	.word	0x0800bda9
 800bd14:	0800bd89 	.word	0x0800bd89
 800bd18:	0800bda9 	.word	0x0800bda9
 800bd1c:	0800bda9 	.word	0x0800bda9
 800bd20:	0800bda9 	.word	0x0800bda9
 800bd24:	0800bda9 	.word	0x0800bda9
 800bd28:	0800bda9 	.word	0x0800bda9
 800bd2c:	0800bda9 	.word	0x0800bda9
 800bd30:	0800bda9 	.word	0x0800bda9
 800bd34:	0800bd91 	.word	0x0800bd91
 800bd38:	0800bda9 	.word	0x0800bda9
 800bd3c:	0800bda9 	.word	0x0800bda9
 800bd40:	0800bda9 	.word	0x0800bda9
 800bd44:	0800bda9 	.word	0x0800bda9
 800bd48:	0800bda9 	.word	0x0800bda9
 800bd4c:	0800bda9 	.word	0x0800bda9
 800bd50:	0800bda9 	.word	0x0800bda9
 800bd54:	0800bd99 	.word	0x0800bd99
 800bd58:	0800bda9 	.word	0x0800bda9
 800bd5c:	0800bda9 	.word	0x0800bda9
 800bd60:	0800bda9 	.word	0x0800bda9
 800bd64:	0800bda9 	.word	0x0800bda9
 800bd68:	0800bda9 	.word	0x0800bda9
 800bd6c:	0800bda9 	.word	0x0800bda9
 800bd70:	0800bda9 	.word	0x0800bda9
 800bd74:	0800bda1 	.word	0x0800bda1
 800bd78:	2301      	movs	r3, #1
 800bd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd7e:	e222      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bd80:	2304      	movs	r3, #4
 800bd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd86:	e21e      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bd88:	2308      	movs	r3, #8
 800bd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd8e:	e21a      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bd90:	2310      	movs	r3, #16
 800bd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd96:	e216      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bd98:	2320      	movs	r3, #32
 800bd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd9e:	e212      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bda0:	2340      	movs	r3, #64	; 0x40
 800bda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bda6:	e20e      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bda8:	2380      	movs	r3, #128	; 0x80
 800bdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdae:	e20a      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a69      	ldr	r2, [pc, #420]	; (800bf5c <UART_SetConfig+0x33c>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d130      	bne.n	800be1c <UART_SetConfig+0x1fc>
 800bdba:	4b67      	ldr	r3, [pc, #412]	; (800bf58 <UART_SetConfig+0x338>)
 800bdbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdbe:	f003 0307 	and.w	r3, r3, #7
 800bdc2:	2b05      	cmp	r3, #5
 800bdc4:	d826      	bhi.n	800be14 <UART_SetConfig+0x1f4>
 800bdc6:	a201      	add	r2, pc, #4	; (adr r2, 800bdcc <UART_SetConfig+0x1ac>)
 800bdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdcc:	0800bde5 	.word	0x0800bde5
 800bdd0:	0800bded 	.word	0x0800bded
 800bdd4:	0800bdf5 	.word	0x0800bdf5
 800bdd8:	0800bdfd 	.word	0x0800bdfd
 800bddc:	0800be05 	.word	0x0800be05
 800bde0:	0800be0d 	.word	0x0800be0d
 800bde4:	2300      	movs	r3, #0
 800bde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdea:	e1ec      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bdec:	2304      	movs	r3, #4
 800bdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdf2:	e1e8      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bdf4:	2308      	movs	r3, #8
 800bdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdfa:	e1e4      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bdfc:	2310      	movs	r3, #16
 800bdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be02:	e1e0      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800be04:	2320      	movs	r3, #32
 800be06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be0a:	e1dc      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800be0c:	2340      	movs	r3, #64	; 0x40
 800be0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be12:	e1d8      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800be14:	2380      	movs	r3, #128	; 0x80
 800be16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be1a:	e1d4      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a4f      	ldr	r2, [pc, #316]	; (800bf60 <UART_SetConfig+0x340>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d130      	bne.n	800be88 <UART_SetConfig+0x268>
 800be26:	4b4c      	ldr	r3, [pc, #304]	; (800bf58 <UART_SetConfig+0x338>)
 800be28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2a:	f003 0307 	and.w	r3, r3, #7
 800be2e:	2b05      	cmp	r3, #5
 800be30:	d826      	bhi.n	800be80 <UART_SetConfig+0x260>
 800be32:	a201      	add	r2, pc, #4	; (adr r2, 800be38 <UART_SetConfig+0x218>)
 800be34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be38:	0800be51 	.word	0x0800be51
 800be3c:	0800be59 	.word	0x0800be59
 800be40:	0800be61 	.word	0x0800be61
 800be44:	0800be69 	.word	0x0800be69
 800be48:	0800be71 	.word	0x0800be71
 800be4c:	0800be79 	.word	0x0800be79
 800be50:	2300      	movs	r3, #0
 800be52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be56:	e1b6      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800be58:	2304      	movs	r3, #4
 800be5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be5e:	e1b2      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800be60:	2308      	movs	r3, #8
 800be62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be66:	e1ae      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800be68:	2310      	movs	r3, #16
 800be6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6e:	e1aa      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800be70:	2320      	movs	r3, #32
 800be72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be76:	e1a6      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800be78:	2340      	movs	r3, #64	; 0x40
 800be7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be7e:	e1a2      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800be80:	2380      	movs	r3, #128	; 0x80
 800be82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be86:	e19e      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a35      	ldr	r2, [pc, #212]	; (800bf64 <UART_SetConfig+0x344>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d130      	bne.n	800bef4 <UART_SetConfig+0x2d4>
 800be92:	4b31      	ldr	r3, [pc, #196]	; (800bf58 <UART_SetConfig+0x338>)
 800be94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be96:	f003 0307 	and.w	r3, r3, #7
 800be9a:	2b05      	cmp	r3, #5
 800be9c:	d826      	bhi.n	800beec <UART_SetConfig+0x2cc>
 800be9e:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <UART_SetConfig+0x284>)
 800bea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea4:	0800bebd 	.word	0x0800bebd
 800bea8:	0800bec5 	.word	0x0800bec5
 800beac:	0800becd 	.word	0x0800becd
 800beb0:	0800bed5 	.word	0x0800bed5
 800beb4:	0800bedd 	.word	0x0800bedd
 800beb8:	0800bee5 	.word	0x0800bee5
 800bebc:	2300      	movs	r3, #0
 800bebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bec2:	e180      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bec4:	2304      	movs	r3, #4
 800bec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beca:	e17c      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800becc:	2308      	movs	r3, #8
 800bece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bed2:	e178      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bed4:	2310      	movs	r3, #16
 800bed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beda:	e174      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bedc:	2320      	movs	r3, #32
 800bede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee2:	e170      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bee4:	2340      	movs	r3, #64	; 0x40
 800bee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beea:	e16c      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800beec:	2380      	movs	r3, #128	; 0x80
 800beee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bef2:	e168      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a1b      	ldr	r2, [pc, #108]	; (800bf68 <UART_SetConfig+0x348>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d142      	bne.n	800bf84 <UART_SetConfig+0x364>
 800befe:	4b16      	ldr	r3, [pc, #88]	; (800bf58 <UART_SetConfig+0x338>)
 800bf00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf02:	f003 0307 	and.w	r3, r3, #7
 800bf06:	2b05      	cmp	r3, #5
 800bf08:	d838      	bhi.n	800bf7c <UART_SetConfig+0x35c>
 800bf0a:	a201      	add	r2, pc, #4	; (adr r2, 800bf10 <UART_SetConfig+0x2f0>)
 800bf0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf10:	0800bf29 	.word	0x0800bf29
 800bf14:	0800bf31 	.word	0x0800bf31
 800bf18:	0800bf39 	.word	0x0800bf39
 800bf1c:	0800bf41 	.word	0x0800bf41
 800bf20:	0800bf6d 	.word	0x0800bf6d
 800bf24:	0800bf75 	.word	0x0800bf75
 800bf28:	2300      	movs	r3, #0
 800bf2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2e:	e14a      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bf30:	2304      	movs	r3, #4
 800bf32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf36:	e146      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bf38:	2308      	movs	r3, #8
 800bf3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf3e:	e142      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bf40:	2310      	movs	r3, #16
 800bf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf46:	e13e      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bf48:	cfff69f3 	.word	0xcfff69f3
 800bf4c:	58000c00 	.word	0x58000c00
 800bf50:	11fff4ff 	.word	0x11fff4ff
 800bf54:	40011000 	.word	0x40011000
 800bf58:	58024400 	.word	0x58024400
 800bf5c:	40004400 	.word	0x40004400
 800bf60:	40004800 	.word	0x40004800
 800bf64:	40004c00 	.word	0x40004c00
 800bf68:	40005000 	.word	0x40005000
 800bf6c:	2320      	movs	r3, #32
 800bf6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf72:	e128      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bf74:	2340      	movs	r3, #64	; 0x40
 800bf76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf7a:	e124      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bf7c:	2380      	movs	r3, #128	; 0x80
 800bf7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf82:	e120      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4acb      	ldr	r2, [pc, #812]	; (800c2b8 <UART_SetConfig+0x698>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d176      	bne.n	800c07c <UART_SetConfig+0x45c>
 800bf8e:	4bcb      	ldr	r3, [pc, #812]	; (800c2bc <UART_SetConfig+0x69c>)
 800bf90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf96:	2b28      	cmp	r3, #40	; 0x28
 800bf98:	d86c      	bhi.n	800c074 <UART_SetConfig+0x454>
 800bf9a:	a201      	add	r2, pc, #4	; (adr r2, 800bfa0 <UART_SetConfig+0x380>)
 800bf9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa0:	0800c045 	.word	0x0800c045
 800bfa4:	0800c075 	.word	0x0800c075
 800bfa8:	0800c075 	.word	0x0800c075
 800bfac:	0800c075 	.word	0x0800c075
 800bfb0:	0800c075 	.word	0x0800c075
 800bfb4:	0800c075 	.word	0x0800c075
 800bfb8:	0800c075 	.word	0x0800c075
 800bfbc:	0800c075 	.word	0x0800c075
 800bfc0:	0800c04d 	.word	0x0800c04d
 800bfc4:	0800c075 	.word	0x0800c075
 800bfc8:	0800c075 	.word	0x0800c075
 800bfcc:	0800c075 	.word	0x0800c075
 800bfd0:	0800c075 	.word	0x0800c075
 800bfd4:	0800c075 	.word	0x0800c075
 800bfd8:	0800c075 	.word	0x0800c075
 800bfdc:	0800c075 	.word	0x0800c075
 800bfe0:	0800c055 	.word	0x0800c055
 800bfe4:	0800c075 	.word	0x0800c075
 800bfe8:	0800c075 	.word	0x0800c075
 800bfec:	0800c075 	.word	0x0800c075
 800bff0:	0800c075 	.word	0x0800c075
 800bff4:	0800c075 	.word	0x0800c075
 800bff8:	0800c075 	.word	0x0800c075
 800bffc:	0800c075 	.word	0x0800c075
 800c000:	0800c05d 	.word	0x0800c05d
 800c004:	0800c075 	.word	0x0800c075
 800c008:	0800c075 	.word	0x0800c075
 800c00c:	0800c075 	.word	0x0800c075
 800c010:	0800c075 	.word	0x0800c075
 800c014:	0800c075 	.word	0x0800c075
 800c018:	0800c075 	.word	0x0800c075
 800c01c:	0800c075 	.word	0x0800c075
 800c020:	0800c065 	.word	0x0800c065
 800c024:	0800c075 	.word	0x0800c075
 800c028:	0800c075 	.word	0x0800c075
 800c02c:	0800c075 	.word	0x0800c075
 800c030:	0800c075 	.word	0x0800c075
 800c034:	0800c075 	.word	0x0800c075
 800c038:	0800c075 	.word	0x0800c075
 800c03c:	0800c075 	.word	0x0800c075
 800c040:	0800c06d 	.word	0x0800c06d
 800c044:	2301      	movs	r3, #1
 800c046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c04a:	e0bc      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c04c:	2304      	movs	r3, #4
 800c04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c052:	e0b8      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c054:	2308      	movs	r3, #8
 800c056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c05a:	e0b4      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c05c:	2310      	movs	r3, #16
 800c05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c062:	e0b0      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c064:	2320      	movs	r3, #32
 800c066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06a:	e0ac      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c06c:	2340      	movs	r3, #64	; 0x40
 800c06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c072:	e0a8      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c074:	2380      	movs	r3, #128	; 0x80
 800c076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c07a:	e0a4      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a8f      	ldr	r2, [pc, #572]	; (800c2c0 <UART_SetConfig+0x6a0>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d130      	bne.n	800c0e8 <UART_SetConfig+0x4c8>
 800c086:	4b8d      	ldr	r3, [pc, #564]	; (800c2bc <UART_SetConfig+0x69c>)
 800c088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c08a:	f003 0307 	and.w	r3, r3, #7
 800c08e:	2b05      	cmp	r3, #5
 800c090:	d826      	bhi.n	800c0e0 <UART_SetConfig+0x4c0>
 800c092:	a201      	add	r2, pc, #4	; (adr r2, 800c098 <UART_SetConfig+0x478>)
 800c094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c098:	0800c0b1 	.word	0x0800c0b1
 800c09c:	0800c0b9 	.word	0x0800c0b9
 800c0a0:	0800c0c1 	.word	0x0800c0c1
 800c0a4:	0800c0c9 	.word	0x0800c0c9
 800c0a8:	0800c0d1 	.word	0x0800c0d1
 800c0ac:	0800c0d9 	.word	0x0800c0d9
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0b6:	e086      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c0b8:	2304      	movs	r3, #4
 800c0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0be:	e082      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c0c0:	2308      	movs	r3, #8
 800c0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0c6:	e07e      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c0c8:	2310      	movs	r3, #16
 800c0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ce:	e07a      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c0d0:	2320      	movs	r3, #32
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0d6:	e076      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c0d8:	2340      	movs	r3, #64	; 0x40
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0de:	e072      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c0e0:	2380      	movs	r3, #128	; 0x80
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e6:	e06e      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a75      	ldr	r2, [pc, #468]	; (800c2c4 <UART_SetConfig+0x6a4>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d130      	bne.n	800c154 <UART_SetConfig+0x534>
 800c0f2:	4b72      	ldr	r3, [pc, #456]	; (800c2bc <UART_SetConfig+0x69c>)
 800c0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0f6:	f003 0307 	and.w	r3, r3, #7
 800c0fa:	2b05      	cmp	r3, #5
 800c0fc:	d826      	bhi.n	800c14c <UART_SetConfig+0x52c>
 800c0fe:	a201      	add	r2, pc, #4	; (adr r2, 800c104 <UART_SetConfig+0x4e4>)
 800c100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c104:	0800c11d 	.word	0x0800c11d
 800c108:	0800c125 	.word	0x0800c125
 800c10c:	0800c12d 	.word	0x0800c12d
 800c110:	0800c135 	.word	0x0800c135
 800c114:	0800c13d 	.word	0x0800c13d
 800c118:	0800c145 	.word	0x0800c145
 800c11c:	2300      	movs	r3, #0
 800c11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c122:	e050      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c124:	2304      	movs	r3, #4
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12a:	e04c      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c12c:	2308      	movs	r3, #8
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c132:	e048      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c134:	2310      	movs	r3, #16
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c13a:	e044      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c13c:	2320      	movs	r3, #32
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c142:	e040      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c144:	2340      	movs	r3, #64	; 0x40
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c14a:	e03c      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c14c:	2380      	movs	r3, #128	; 0x80
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c152:	e038      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a5b      	ldr	r2, [pc, #364]	; (800c2c8 <UART_SetConfig+0x6a8>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d130      	bne.n	800c1c0 <UART_SetConfig+0x5a0>
 800c15e:	4b57      	ldr	r3, [pc, #348]	; (800c2bc <UART_SetConfig+0x69c>)
 800c160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c162:	f003 0307 	and.w	r3, r3, #7
 800c166:	2b05      	cmp	r3, #5
 800c168:	d826      	bhi.n	800c1b8 <UART_SetConfig+0x598>
 800c16a:	a201      	add	r2, pc, #4	; (adr r2, 800c170 <UART_SetConfig+0x550>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c189 	.word	0x0800c189
 800c174:	0800c191 	.word	0x0800c191
 800c178:	0800c199 	.word	0x0800c199
 800c17c:	0800c1a1 	.word	0x0800c1a1
 800c180:	0800c1a9 	.word	0x0800c1a9
 800c184:	0800c1b1 	.word	0x0800c1b1
 800c188:	2302      	movs	r3, #2
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18e:	e01a      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c190:	2304      	movs	r3, #4
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c196:	e016      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c198:	2308      	movs	r3, #8
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19e:	e012      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c1a0:	2310      	movs	r3, #16
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a6:	e00e      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c1a8:	2320      	movs	r3, #32
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ae:	e00a      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c1b0:	2340      	movs	r3, #64	; 0x40
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1b6:	e006      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c1b8:	2380      	movs	r3, #128	; 0x80
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1be:	e002      	b.n	800c1c6 <UART_SetConfig+0x5a6>
 800c1c0:	2380      	movs	r3, #128	; 0x80
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a3f      	ldr	r2, [pc, #252]	; (800c2c8 <UART_SetConfig+0x6a8>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	f040 80f8 	bne.w	800c3c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c1d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c1d6:	2b20      	cmp	r3, #32
 800c1d8:	dc46      	bgt.n	800c268 <UART_SetConfig+0x648>
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	f2c0 8082 	blt.w	800c2e4 <UART_SetConfig+0x6c4>
 800c1e0:	3b02      	subs	r3, #2
 800c1e2:	2b1e      	cmp	r3, #30
 800c1e4:	d87e      	bhi.n	800c2e4 <UART_SetConfig+0x6c4>
 800c1e6:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <UART_SetConfig+0x5cc>)
 800c1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ec:	0800c26f 	.word	0x0800c26f
 800c1f0:	0800c2e5 	.word	0x0800c2e5
 800c1f4:	0800c277 	.word	0x0800c277
 800c1f8:	0800c2e5 	.word	0x0800c2e5
 800c1fc:	0800c2e5 	.word	0x0800c2e5
 800c200:	0800c2e5 	.word	0x0800c2e5
 800c204:	0800c287 	.word	0x0800c287
 800c208:	0800c2e5 	.word	0x0800c2e5
 800c20c:	0800c2e5 	.word	0x0800c2e5
 800c210:	0800c2e5 	.word	0x0800c2e5
 800c214:	0800c2e5 	.word	0x0800c2e5
 800c218:	0800c2e5 	.word	0x0800c2e5
 800c21c:	0800c2e5 	.word	0x0800c2e5
 800c220:	0800c2e5 	.word	0x0800c2e5
 800c224:	0800c297 	.word	0x0800c297
 800c228:	0800c2e5 	.word	0x0800c2e5
 800c22c:	0800c2e5 	.word	0x0800c2e5
 800c230:	0800c2e5 	.word	0x0800c2e5
 800c234:	0800c2e5 	.word	0x0800c2e5
 800c238:	0800c2e5 	.word	0x0800c2e5
 800c23c:	0800c2e5 	.word	0x0800c2e5
 800c240:	0800c2e5 	.word	0x0800c2e5
 800c244:	0800c2e5 	.word	0x0800c2e5
 800c248:	0800c2e5 	.word	0x0800c2e5
 800c24c:	0800c2e5 	.word	0x0800c2e5
 800c250:	0800c2e5 	.word	0x0800c2e5
 800c254:	0800c2e5 	.word	0x0800c2e5
 800c258:	0800c2e5 	.word	0x0800c2e5
 800c25c:	0800c2e5 	.word	0x0800c2e5
 800c260:	0800c2e5 	.word	0x0800c2e5
 800c264:	0800c2d7 	.word	0x0800c2d7
 800c268:	2b40      	cmp	r3, #64	; 0x40
 800c26a:	d037      	beq.n	800c2dc <UART_SetConfig+0x6bc>
 800c26c:	e03a      	b.n	800c2e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c26e:	f7fc ff79 	bl	8009164 <HAL_RCCEx_GetD3PCLK1Freq>
 800c272:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c274:	e03c      	b.n	800c2f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fc ff88 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c284:	e034      	b.n	800c2f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c286:	f107 0318 	add.w	r3, r7, #24
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fd f8d4 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c294:	e02c      	b.n	800c2f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c296:	4b09      	ldr	r3, [pc, #36]	; (800c2bc <UART_SetConfig+0x69c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 0320 	and.w	r3, r3, #32
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d016      	beq.n	800c2d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c2a2:	4b06      	ldr	r3, [pc, #24]	; (800c2bc <UART_SetConfig+0x69c>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	08db      	lsrs	r3, r3, #3
 800c2a8:	f003 0303 	and.w	r3, r3, #3
 800c2ac:	4a07      	ldr	r2, [pc, #28]	; (800c2cc <UART_SetConfig+0x6ac>)
 800c2ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c2b4:	e01c      	b.n	800c2f0 <UART_SetConfig+0x6d0>
 800c2b6:	bf00      	nop
 800c2b8:	40011400 	.word	0x40011400
 800c2bc:	58024400 	.word	0x58024400
 800c2c0:	40007800 	.word	0x40007800
 800c2c4:	40007c00 	.word	0x40007c00
 800c2c8:	58000c00 	.word	0x58000c00
 800c2cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c2d0:	4b9d      	ldr	r3, [pc, #628]	; (800c548 <UART_SetConfig+0x928>)
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d4:	e00c      	b.n	800c2f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2d6:	4b9d      	ldr	r3, [pc, #628]	; (800c54c <UART_SetConfig+0x92c>)
 800c2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2da:	e009      	b.n	800c2f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e2:	e005      	b.n	800c2f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c2ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f000 81de 	beq.w	800c6b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fc:	4a94      	ldr	r2, [pc, #592]	; (800c550 <UART_SetConfig+0x930>)
 800c2fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c302:	461a      	mov	r2, r3
 800c304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c306:	fbb3 f3f2 	udiv	r3, r3, r2
 800c30a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	685a      	ldr	r2, [r3, #4]
 800c310:	4613      	mov	r3, r2
 800c312:	005b      	lsls	r3, r3, #1
 800c314:	4413      	add	r3, r2
 800c316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c318:	429a      	cmp	r2, r3
 800c31a:	d305      	bcc.n	800c328 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c324:	429a      	cmp	r2, r3
 800c326:	d903      	bls.n	800c330 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c32e:	e1c1      	b.n	800c6b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c332:	2200      	movs	r2, #0
 800c334:	60bb      	str	r3, [r7, #8]
 800c336:	60fa      	str	r2, [r7, #12]
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33c:	4a84      	ldr	r2, [pc, #528]	; (800c550 <UART_SetConfig+0x930>)
 800c33e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c342:	b29b      	uxth	r3, r3
 800c344:	2200      	movs	r2, #0
 800c346:	603b      	str	r3, [r7, #0]
 800c348:	607a      	str	r2, [r7, #4]
 800c34a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c34e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c352:	f7f3 ffc5 	bl	80002e0 <__aeabi_uldivmod>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	4610      	mov	r0, r2
 800c35c:	4619      	mov	r1, r3
 800c35e:	f04f 0200 	mov.w	r2, #0
 800c362:	f04f 0300 	mov.w	r3, #0
 800c366:	020b      	lsls	r3, r1, #8
 800c368:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c36c:	0202      	lsls	r2, r0, #8
 800c36e:	6979      	ldr	r1, [r7, #20]
 800c370:	6849      	ldr	r1, [r1, #4]
 800c372:	0849      	lsrs	r1, r1, #1
 800c374:	2000      	movs	r0, #0
 800c376:	460c      	mov	r4, r1
 800c378:	4605      	mov	r5, r0
 800c37a:	eb12 0804 	adds.w	r8, r2, r4
 800c37e:	eb43 0905 	adc.w	r9, r3, r5
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	469a      	mov	sl, r3
 800c38a:	4693      	mov	fp, r2
 800c38c:	4652      	mov	r2, sl
 800c38e:	465b      	mov	r3, fp
 800c390:	4640      	mov	r0, r8
 800c392:	4649      	mov	r1, r9
 800c394:	f7f3 ffa4 	bl	80002e0 <__aeabi_uldivmod>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4613      	mov	r3, r2
 800c39e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3a6:	d308      	bcc.n	800c3ba <UART_SetConfig+0x79a>
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3ae:	d204      	bcs.n	800c3ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3b6:	60da      	str	r2, [r3, #12]
 800c3b8:	e17c      	b.n	800c6b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c3c0:	e178      	b.n	800c6b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	69db      	ldr	r3, [r3, #28]
 800c3c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3ca:	f040 80c5 	bne.w	800c558 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c3ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c3d2:	2b20      	cmp	r3, #32
 800c3d4:	dc48      	bgt.n	800c468 <UART_SetConfig+0x848>
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	db7b      	blt.n	800c4d2 <UART_SetConfig+0x8b2>
 800c3da:	2b20      	cmp	r3, #32
 800c3dc:	d879      	bhi.n	800c4d2 <UART_SetConfig+0x8b2>
 800c3de:	a201      	add	r2, pc, #4	; (adr r2, 800c3e4 <UART_SetConfig+0x7c4>)
 800c3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e4:	0800c46f 	.word	0x0800c46f
 800c3e8:	0800c477 	.word	0x0800c477
 800c3ec:	0800c4d3 	.word	0x0800c4d3
 800c3f0:	0800c4d3 	.word	0x0800c4d3
 800c3f4:	0800c47f 	.word	0x0800c47f
 800c3f8:	0800c4d3 	.word	0x0800c4d3
 800c3fc:	0800c4d3 	.word	0x0800c4d3
 800c400:	0800c4d3 	.word	0x0800c4d3
 800c404:	0800c48f 	.word	0x0800c48f
 800c408:	0800c4d3 	.word	0x0800c4d3
 800c40c:	0800c4d3 	.word	0x0800c4d3
 800c410:	0800c4d3 	.word	0x0800c4d3
 800c414:	0800c4d3 	.word	0x0800c4d3
 800c418:	0800c4d3 	.word	0x0800c4d3
 800c41c:	0800c4d3 	.word	0x0800c4d3
 800c420:	0800c4d3 	.word	0x0800c4d3
 800c424:	0800c49f 	.word	0x0800c49f
 800c428:	0800c4d3 	.word	0x0800c4d3
 800c42c:	0800c4d3 	.word	0x0800c4d3
 800c430:	0800c4d3 	.word	0x0800c4d3
 800c434:	0800c4d3 	.word	0x0800c4d3
 800c438:	0800c4d3 	.word	0x0800c4d3
 800c43c:	0800c4d3 	.word	0x0800c4d3
 800c440:	0800c4d3 	.word	0x0800c4d3
 800c444:	0800c4d3 	.word	0x0800c4d3
 800c448:	0800c4d3 	.word	0x0800c4d3
 800c44c:	0800c4d3 	.word	0x0800c4d3
 800c450:	0800c4d3 	.word	0x0800c4d3
 800c454:	0800c4d3 	.word	0x0800c4d3
 800c458:	0800c4d3 	.word	0x0800c4d3
 800c45c:	0800c4d3 	.word	0x0800c4d3
 800c460:	0800c4d3 	.word	0x0800c4d3
 800c464:	0800c4c5 	.word	0x0800c4c5
 800c468:	2b40      	cmp	r3, #64	; 0x40
 800c46a:	d02e      	beq.n	800c4ca <UART_SetConfig+0x8aa>
 800c46c:	e031      	b.n	800c4d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c46e:	f7fb f9f3 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 800c472:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c474:	e033      	b.n	800c4de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c476:	f7fb fa05 	bl	8007884 <HAL_RCC_GetPCLK2Freq>
 800c47a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c47c:	e02f      	b.n	800c4de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c47e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c482:	4618      	mov	r0, r3
 800c484:	f7fc fe84 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48c:	e027      	b.n	800c4de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c48e:	f107 0318 	add.w	r3, r7, #24
 800c492:	4618      	mov	r0, r3
 800c494:	f7fc ffd0 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c49c:	e01f      	b.n	800c4de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c49e:	4b2d      	ldr	r3, [pc, #180]	; (800c554 <UART_SetConfig+0x934>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f003 0320 	and.w	r3, r3, #32
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d009      	beq.n	800c4be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4aa:	4b2a      	ldr	r3, [pc, #168]	; (800c554 <UART_SetConfig+0x934>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	08db      	lsrs	r3, r3, #3
 800c4b0:	f003 0303 	and.w	r3, r3, #3
 800c4b4:	4a24      	ldr	r2, [pc, #144]	; (800c548 <UART_SetConfig+0x928>)
 800c4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4bc:	e00f      	b.n	800c4de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c4be:	4b22      	ldr	r3, [pc, #136]	; (800c548 <UART_SetConfig+0x928>)
 800c4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c2:	e00c      	b.n	800c4de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4c4:	4b21      	ldr	r3, [pc, #132]	; (800c54c <UART_SetConfig+0x92c>)
 800c4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c8:	e009      	b.n	800c4de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d0:	e005      	b.n	800c4de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c4dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 80e7 	beq.w	800c6b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ea:	4a19      	ldr	r2, [pc, #100]	; (800c550 <UART_SetConfig+0x930>)
 800c4ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4f8:	005a      	lsls	r2, r3, #1
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	085b      	lsrs	r3, r3, #1
 800c500:	441a      	add	r2, r3
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	fbb2 f3f3 	udiv	r3, r2, r3
 800c50a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	2b0f      	cmp	r3, #15
 800c510:	d916      	bls.n	800c540 <UART_SetConfig+0x920>
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c518:	d212      	bcs.n	800c540 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	f023 030f 	bic.w	r3, r3, #15
 800c522:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	085b      	lsrs	r3, r3, #1
 800c528:	b29b      	uxth	r3, r3
 800c52a:	f003 0307 	and.w	r3, r3, #7
 800c52e:	b29a      	uxth	r2, r3
 800c530:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c532:	4313      	orrs	r3, r2
 800c534:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c53c:	60da      	str	r2, [r3, #12]
 800c53e:	e0b9      	b.n	800c6b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c540:	2301      	movs	r3, #1
 800c542:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c546:	e0b5      	b.n	800c6b4 <UART_SetConfig+0xa94>
 800c548:	03d09000 	.word	0x03d09000
 800c54c:	003d0900 	.word	0x003d0900
 800c550:	0800f934 	.word	0x0800f934
 800c554:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c558:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c55c:	2b20      	cmp	r3, #32
 800c55e:	dc49      	bgt.n	800c5f4 <UART_SetConfig+0x9d4>
 800c560:	2b00      	cmp	r3, #0
 800c562:	db7c      	blt.n	800c65e <UART_SetConfig+0xa3e>
 800c564:	2b20      	cmp	r3, #32
 800c566:	d87a      	bhi.n	800c65e <UART_SetConfig+0xa3e>
 800c568:	a201      	add	r2, pc, #4	; (adr r2, 800c570 <UART_SetConfig+0x950>)
 800c56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c56e:	bf00      	nop
 800c570:	0800c5fb 	.word	0x0800c5fb
 800c574:	0800c603 	.word	0x0800c603
 800c578:	0800c65f 	.word	0x0800c65f
 800c57c:	0800c65f 	.word	0x0800c65f
 800c580:	0800c60b 	.word	0x0800c60b
 800c584:	0800c65f 	.word	0x0800c65f
 800c588:	0800c65f 	.word	0x0800c65f
 800c58c:	0800c65f 	.word	0x0800c65f
 800c590:	0800c61b 	.word	0x0800c61b
 800c594:	0800c65f 	.word	0x0800c65f
 800c598:	0800c65f 	.word	0x0800c65f
 800c59c:	0800c65f 	.word	0x0800c65f
 800c5a0:	0800c65f 	.word	0x0800c65f
 800c5a4:	0800c65f 	.word	0x0800c65f
 800c5a8:	0800c65f 	.word	0x0800c65f
 800c5ac:	0800c65f 	.word	0x0800c65f
 800c5b0:	0800c62b 	.word	0x0800c62b
 800c5b4:	0800c65f 	.word	0x0800c65f
 800c5b8:	0800c65f 	.word	0x0800c65f
 800c5bc:	0800c65f 	.word	0x0800c65f
 800c5c0:	0800c65f 	.word	0x0800c65f
 800c5c4:	0800c65f 	.word	0x0800c65f
 800c5c8:	0800c65f 	.word	0x0800c65f
 800c5cc:	0800c65f 	.word	0x0800c65f
 800c5d0:	0800c65f 	.word	0x0800c65f
 800c5d4:	0800c65f 	.word	0x0800c65f
 800c5d8:	0800c65f 	.word	0x0800c65f
 800c5dc:	0800c65f 	.word	0x0800c65f
 800c5e0:	0800c65f 	.word	0x0800c65f
 800c5e4:	0800c65f 	.word	0x0800c65f
 800c5e8:	0800c65f 	.word	0x0800c65f
 800c5ec:	0800c65f 	.word	0x0800c65f
 800c5f0:	0800c651 	.word	0x0800c651
 800c5f4:	2b40      	cmp	r3, #64	; 0x40
 800c5f6:	d02e      	beq.n	800c656 <UART_SetConfig+0xa36>
 800c5f8:	e031      	b.n	800c65e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5fa:	f7fb f92d 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 800c5fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c600:	e033      	b.n	800c66a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c602:	f7fb f93f 	bl	8007884 <HAL_RCC_GetPCLK2Freq>
 800c606:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c608:	e02f      	b.n	800c66a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c60a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fc fdbe 	bl	8009190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c618:	e027      	b.n	800c66a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c61a:	f107 0318 	add.w	r3, r7, #24
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fc ff0a 	bl	8009438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c628:	e01f      	b.n	800c66a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c62a:	4b2d      	ldr	r3, [pc, #180]	; (800c6e0 <UART_SetConfig+0xac0>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 0320 	and.w	r3, r3, #32
 800c632:	2b00      	cmp	r3, #0
 800c634:	d009      	beq.n	800c64a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c636:	4b2a      	ldr	r3, [pc, #168]	; (800c6e0 <UART_SetConfig+0xac0>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	08db      	lsrs	r3, r3, #3
 800c63c:	f003 0303 	and.w	r3, r3, #3
 800c640:	4a28      	ldr	r2, [pc, #160]	; (800c6e4 <UART_SetConfig+0xac4>)
 800c642:	fa22 f303 	lsr.w	r3, r2, r3
 800c646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c648:	e00f      	b.n	800c66a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c64a:	4b26      	ldr	r3, [pc, #152]	; (800c6e4 <UART_SetConfig+0xac4>)
 800c64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c64e:	e00c      	b.n	800c66a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c650:	4b25      	ldr	r3, [pc, #148]	; (800c6e8 <UART_SetConfig+0xac8>)
 800c652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c654:	e009      	b.n	800c66a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c65c:	e005      	b.n	800c66a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c65e:	2300      	movs	r3, #0
 800c660:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c662:	2301      	movs	r3, #1
 800c664:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c668:	bf00      	nop
    }

    if (pclk != 0U)
 800c66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d021      	beq.n	800c6b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c674:	4a1d      	ldr	r2, [pc, #116]	; (800c6ec <UART_SetConfig+0xacc>)
 800c676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c67a:	461a      	mov	r2, r3
 800c67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	085b      	lsrs	r3, r3, #1
 800c688:	441a      	add	r2, r3
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c692:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c696:	2b0f      	cmp	r3, #15
 800c698:	d909      	bls.n	800c6ae <UART_SetConfig+0xa8e>
 800c69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6a0:	d205      	bcs.n	800c6ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	60da      	str	r2, [r3, #12]
 800c6ac:	e002      	b.n	800c6b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c6d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3748      	adds	r7, #72	; 0x48
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c6de:	bf00      	nop
 800c6e0:	58024400 	.word	0x58024400
 800c6e4:	03d09000 	.word	0x03d09000
 800c6e8:	003d0900 	.word	0x003d0900
 800c6ec:	0800f934 	.word	0x0800f934

0800c6f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fc:	f003 0301 	and.w	r3, r3, #1
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00a      	beq.n	800c71a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	430a      	orrs	r2, r1
 800c718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71e:	f003 0302 	and.w	r3, r3, #2
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00a      	beq.n	800c73c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	430a      	orrs	r2, r1
 800c73a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c740:	f003 0304 	and.w	r3, r3, #4
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00a      	beq.n	800c75e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	430a      	orrs	r2, r1
 800c75c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c762:	f003 0308 	and.w	r3, r3, #8
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00a      	beq.n	800c780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	430a      	orrs	r2, r1
 800c77e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c784:	f003 0310 	and.w	r3, r3, #16
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00a      	beq.n	800c7a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	689b      	ldr	r3, [r3, #8]
 800c792:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	430a      	orrs	r2, r1
 800c7a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a6:	f003 0320 	and.w	r3, r3, #32
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00a      	beq.n	800c7c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	430a      	orrs	r2, r1
 800c7c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d01a      	beq.n	800c806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	430a      	orrs	r2, r1
 800c7e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7ee:	d10a      	bne.n	800c806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	430a      	orrs	r2, r1
 800c804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d00a      	beq.n	800c828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	430a      	orrs	r2, r1
 800c826:	605a      	str	r2, [r3, #4]
  }
}
 800c828:	bf00      	nop
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af02      	add	r7, sp, #8
 800c83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c844:	f7f7 fdc0 	bl	80043c8 <HAL_GetTick>
 800c848:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0308 	and.w	r3, r3, #8
 800c854:	2b08      	cmp	r3, #8
 800c856:	d10e      	bne.n	800c876 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c85c:	9300      	str	r3, [sp, #0]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2200      	movs	r2, #0
 800c862:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 f82f 	bl	800c8ca <UART_WaitOnFlagUntilTimeout>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c872:	2303      	movs	r3, #3
 800c874:	e025      	b.n	800c8c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b04      	cmp	r3, #4
 800c882:	d10e      	bne.n	800c8a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f819 	bl	800c8ca <UART_WaitOnFlagUntilTimeout>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d001      	beq.n	800c8a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	e00f      	b.n	800c8c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2220      	movs	r2, #32
 800c8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2220      	movs	r2, #32
 800c8ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8c0:	2300      	movs	r3, #0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b09c      	sub	sp, #112	; 0x70
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	60f8      	str	r0, [r7, #12]
 800c8d2:	60b9      	str	r1, [r7, #8]
 800c8d4:	603b      	str	r3, [r7, #0]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8da:	e0a9      	b.n	800ca30 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e2:	f000 80a5 	beq.w	800ca30 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8e6:	f7f7 fd6f 	bl	80043c8 <HAL_GetTick>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d302      	bcc.n	800c8fc <UART_WaitOnFlagUntilTimeout+0x32>
 800c8f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d140      	bne.n	800c97e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c904:	e853 3f00 	ldrex	r3, [r3]
 800c908:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c90a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c90c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c910:	667b      	str	r3, [r7, #100]	; 0x64
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	461a      	mov	r2, r3
 800c918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c91a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c91c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c920:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c922:	e841 2300 	strex	r3, r2, [r1]
 800c926:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1e6      	bne.n	800c8fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3308      	adds	r3, #8
 800c934:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c938:	e853 3f00 	ldrex	r3, [r3]
 800c93c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c940:	f023 0301 	bic.w	r3, r3, #1
 800c944:	663b      	str	r3, [r7, #96]	; 0x60
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	3308      	adds	r3, #8
 800c94c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c94e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c950:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c952:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c956:	e841 2300 	strex	r3, r2, [r1]
 800c95a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c95c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1e5      	bne.n	800c92e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2220      	movs	r2, #32
 800c966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2220      	movs	r2, #32
 800c96e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	e069      	b.n	800ca52 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 0304 	and.w	r3, r3, #4
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d051      	beq.n	800ca30 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	69db      	ldr	r3, [r3, #28]
 800c992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c99a:	d149      	bne.n	800ca30 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ae:	e853 3f00 	ldrex	r3, [r3]
 800c9b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c9c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9cc:	e841 2300 	strex	r3, r2, [r1]
 800c9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1e6      	bne.n	800c9a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	3308      	adds	r3, #8
 800c9de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	e853 3f00 	ldrex	r3, [r3]
 800c9e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	f023 0301 	bic.w	r3, r3, #1
 800c9ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c9f8:	623a      	str	r2, [r7, #32]
 800c9fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fc:	69f9      	ldr	r1, [r7, #28]
 800c9fe:	6a3a      	ldr	r2, [r7, #32]
 800ca00:	e841 2300 	strex	r3, r2, [r1]
 800ca04:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1e5      	bne.n	800c9d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2220      	movs	r2, #32
 800ca10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2220      	movs	r2, #32
 800ca18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2220      	movs	r2, #32
 800ca20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	e010      	b.n	800ca52 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	69da      	ldr	r2, [r3, #28]
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	4013      	ands	r3, r2
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	bf0c      	ite	eq
 800ca40:	2301      	moveq	r3, #1
 800ca42:	2300      	movne	r3, #0
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	461a      	mov	r2, r3
 800ca48:	79fb      	ldrb	r3, [r7, #7]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	f43f af46 	beq.w	800c8dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3770      	adds	r7, #112	; 0x70
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca5a:	b480      	push	{r7}
 800ca5c:	b085      	sub	sp, #20
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d101      	bne.n	800ca70 <HAL_UARTEx_DisableFifoMode+0x16>
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	e027      	b.n	800cac0 <HAL_UARTEx_DisableFifoMode+0x66>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2224      	movs	r2, #36	; 0x24
 800ca7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f022 0201 	bic.w	r2, r2, #1
 800ca96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ca9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2220      	movs	r2, #32
 800cab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d101      	bne.n	800cae4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cae0:	2302      	movs	r3, #2
 800cae2:	e02d      	b.n	800cb40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2224      	movs	r2, #36	; 0x24
 800caf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f022 0201 	bic.w	r2, r2, #1
 800cb0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	430a      	orrs	r2, r1
 800cb1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 f84f 	bl	800cbc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2220      	movs	r2, #32
 800cb32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3710      	adds	r7, #16
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d101      	bne.n	800cb60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb5c:	2302      	movs	r3, #2
 800cb5e:	e02d      	b.n	800cbbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2224      	movs	r2, #36	; 0x24
 800cb6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f022 0201 	bic.w	r2, r2, #1
 800cb86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	430a      	orrs	r2, r1
 800cb9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 f811 	bl	800cbc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2220      	movs	r2, #32
 800cbae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d108      	bne.n	800cbe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cbe4:	e031      	b.n	800cc4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cbe6:	2310      	movs	r3, #16
 800cbe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cbea:	2310      	movs	r3, #16
 800cbec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	0e5b      	lsrs	r3, r3, #25
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	f003 0307 	and.w	r3, r3, #7
 800cbfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	0f5b      	lsrs	r3, r3, #29
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	f003 0307 	and.w	r3, r3, #7
 800cc0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc0e:	7bbb      	ldrb	r3, [r7, #14]
 800cc10:	7b3a      	ldrb	r2, [r7, #12]
 800cc12:	4911      	ldr	r1, [pc, #68]	; (800cc58 <UARTEx_SetNbDataToProcess+0x94>)
 800cc14:	5c8a      	ldrb	r2, [r1, r2]
 800cc16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc1a:	7b3a      	ldrb	r2, [r7, #12]
 800cc1c:	490f      	ldr	r1, [pc, #60]	; (800cc5c <UARTEx_SetNbDataToProcess+0x98>)
 800cc1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc20:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	7b7a      	ldrb	r2, [r7, #13]
 800cc30:	4909      	ldr	r1, [pc, #36]	; (800cc58 <UARTEx_SetNbDataToProcess+0x94>)
 800cc32:	5c8a      	ldrb	r2, [r1, r2]
 800cc34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc38:	7b7a      	ldrb	r2, [r7, #13]
 800cc3a:	4908      	ldr	r1, [pc, #32]	; (800cc5c <UARTEx_SetNbDataToProcess+0x98>)
 800cc3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cc4a:	bf00      	nop
 800cc4c:	3714      	adds	r7, #20
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	0800f94c 	.word	0x0800f94c
 800cc5c:	0800f954 	.word	0x0800f954

0800cc60 <__NVIC_SetPriority>:
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	4603      	mov	r3, r0
 800cc68:	6039      	str	r1, [r7, #0]
 800cc6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cc6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	db0a      	blt.n	800cc8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	490c      	ldr	r1, [pc, #48]	; (800ccac <__NVIC_SetPriority+0x4c>)
 800cc7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc7e:	0112      	lsls	r2, r2, #4
 800cc80:	b2d2      	uxtb	r2, r2
 800cc82:	440b      	add	r3, r1
 800cc84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cc88:	e00a      	b.n	800cca0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	4908      	ldr	r1, [pc, #32]	; (800ccb0 <__NVIC_SetPriority+0x50>)
 800cc90:	88fb      	ldrh	r3, [r7, #6]
 800cc92:	f003 030f 	and.w	r3, r3, #15
 800cc96:	3b04      	subs	r3, #4
 800cc98:	0112      	lsls	r2, r2, #4
 800cc9a:	b2d2      	uxtb	r2, r2
 800cc9c:	440b      	add	r3, r1
 800cc9e:	761a      	strb	r2, [r3, #24]
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	e000e100 	.word	0xe000e100
 800ccb0:	e000ed00 	.word	0xe000ed00

0800ccb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ccb8:	4b05      	ldr	r3, [pc, #20]	; (800ccd0 <SysTick_Handler+0x1c>)
 800ccba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ccbc:	f001 fcfe 	bl	800e6bc <xTaskGetSchedulerState>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d001      	beq.n	800ccca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ccc6:	f002 fae7 	bl	800f298 <xPortSysTickHandler>
  }
}
 800ccca:	bf00      	nop
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	e000e010 	.word	0xe000e010

0800ccd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ccd8:	2100      	movs	r1, #0
 800ccda:	f06f 0004 	mvn.w	r0, #4
 800ccde:	f7ff ffbf 	bl	800cc60 <__NVIC_SetPriority>
#endif
}
 800cce2:	bf00      	nop
 800cce4:	bd80      	pop	{r7, pc}
	...

0800cce8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccee:	f3ef 8305 	mrs	r3, IPSR
 800ccf2:	603b      	str	r3, [r7, #0]
  return(result);
 800ccf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d003      	beq.n	800cd02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ccfa:	f06f 0305 	mvn.w	r3, #5
 800ccfe:	607b      	str	r3, [r7, #4]
 800cd00:	e00c      	b.n	800cd1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cd02:	4b0a      	ldr	r3, [pc, #40]	; (800cd2c <osKernelInitialize+0x44>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d105      	bne.n	800cd16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cd0a:	4b08      	ldr	r3, [pc, #32]	; (800cd2c <osKernelInitialize+0x44>)
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	607b      	str	r3, [r7, #4]
 800cd14:	e002      	b.n	800cd1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cd16:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cd1c:	687b      	ldr	r3, [r7, #4]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	370c      	adds	r7, #12
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop
 800cd2c:	20000700 	.word	0x20000700

0800cd30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd36:	f3ef 8305 	mrs	r3, IPSR
 800cd3a:	603b      	str	r3, [r7, #0]
  return(result);
 800cd3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d003      	beq.n	800cd4a <osKernelStart+0x1a>
    stat = osErrorISR;
 800cd42:	f06f 0305 	mvn.w	r3, #5
 800cd46:	607b      	str	r3, [r7, #4]
 800cd48:	e010      	b.n	800cd6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cd4a:	4b0b      	ldr	r3, [pc, #44]	; (800cd78 <osKernelStart+0x48>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d109      	bne.n	800cd66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cd52:	f7ff ffbf 	bl	800ccd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd56:	4b08      	ldr	r3, [pc, #32]	; (800cd78 <osKernelStart+0x48>)
 800cd58:	2202      	movs	r2, #2
 800cd5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd5c:	f001 f866 	bl	800de2c <vTaskStartScheduler>
      stat = osOK;
 800cd60:	2300      	movs	r3, #0
 800cd62:	607b      	str	r3, [r7, #4]
 800cd64:	e002      	b.n	800cd6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cd66:	f04f 33ff 	mov.w	r3, #4294967295
 800cd6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cd6c:	687b      	ldr	r3, [r7, #4]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3708      	adds	r7, #8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20000700 	.word	0x20000700

0800cd7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b08e      	sub	sp, #56	; 0x38
 800cd80:	af04      	add	r7, sp, #16
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd8c:	f3ef 8305 	mrs	r3, IPSR
 800cd90:	617b      	str	r3, [r7, #20]
  return(result);
 800cd92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d17e      	bne.n	800ce96 <osThreadNew+0x11a>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d07b      	beq.n	800ce96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cd9e:	2380      	movs	r3, #128	; 0x80
 800cda0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cda2:	2318      	movs	r3, #24
 800cda4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cda6:	2300      	movs	r3, #0
 800cda8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cdaa:	f04f 33ff 	mov.w	r3, #4294967295
 800cdae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d045      	beq.n	800ce42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d002      	beq.n	800cdc4 <osThreadNew+0x48>
        name = attr->name;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	699b      	ldr	r3, [r3, #24]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	699b      	ldr	r3, [r3, #24]
 800cdd0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d008      	beq.n	800cdea <osThreadNew+0x6e>
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	2b38      	cmp	r3, #56	; 0x38
 800cddc:	d805      	bhi.n	800cdea <osThreadNew+0x6e>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	f003 0301 	and.w	r3, r3, #1
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d001      	beq.n	800cdee <osThreadNew+0x72>
        return (NULL);
 800cdea:	2300      	movs	r3, #0
 800cdec:	e054      	b.n	800ce98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	695b      	ldr	r3, [r3, #20]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d003      	beq.n	800cdfe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	695b      	ldr	r3, [r3, #20]
 800cdfa:	089b      	lsrs	r3, r3, #2
 800cdfc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00e      	beq.n	800ce24 <osThreadNew+0xa8>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	2b5b      	cmp	r3, #91	; 0x5b
 800ce0c:	d90a      	bls.n	800ce24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d006      	beq.n	800ce24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	695b      	ldr	r3, [r3, #20]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d002      	beq.n	800ce24 <osThreadNew+0xa8>
        mem = 1;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	61bb      	str	r3, [r7, #24]
 800ce22:	e010      	b.n	800ce46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10c      	bne.n	800ce46 <osThreadNew+0xca>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d108      	bne.n	800ce46 <osThreadNew+0xca>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	691b      	ldr	r3, [r3, #16]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d104      	bne.n	800ce46 <osThreadNew+0xca>
          mem = 0;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	61bb      	str	r3, [r7, #24]
 800ce40:	e001      	b.n	800ce46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ce42:	2300      	movs	r3, #0
 800ce44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d110      	bne.n	800ce6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce54:	9202      	str	r2, [sp, #8]
 800ce56:	9301      	str	r3, [sp, #4]
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	9300      	str	r3, [sp, #0]
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	6a3a      	ldr	r2, [r7, #32]
 800ce60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f000 fe0c 	bl	800da80 <xTaskCreateStatic>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	613b      	str	r3, [r7, #16]
 800ce6c:	e013      	b.n	800ce96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d110      	bne.n	800ce96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ce74:	6a3b      	ldr	r3, [r7, #32]
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	f107 0310 	add.w	r3, r7, #16
 800ce7c:	9301      	str	r3, [sp, #4]
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f000 fe57 	bl	800db3a <xTaskCreate>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d001      	beq.n	800ce96 <osThreadNew+0x11a>
            hTask = NULL;
 800ce92:	2300      	movs	r3, #0
 800ce94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ce96:	693b      	ldr	r3, [r7, #16]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3728      	adds	r7, #40	; 0x28
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cea8:	f3ef 8305 	mrs	r3, IPSR
 800ceac:	60bb      	str	r3, [r7, #8]
  return(result);
 800ceae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d003      	beq.n	800cebc <osDelay+0x1c>
    stat = osErrorISR;
 800ceb4:	f06f 0305 	mvn.w	r3, #5
 800ceb8:	60fb      	str	r3, [r7, #12]
 800ceba:	e007      	b.n	800cecc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <osDelay+0x2c>
      vTaskDelay(ticks);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 ff7c 	bl	800ddc4 <vTaskDelay>
    }
  }

  return (stat);
 800cecc:	68fb      	ldr	r3, [r7, #12]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
	...

0800ced8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	4a07      	ldr	r2, [pc, #28]	; (800cf04 <vApplicationGetIdleTaskMemory+0x2c>)
 800cee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	4a06      	ldr	r2, [pc, #24]	; (800cf08 <vApplicationGetIdleTaskMemory+0x30>)
 800ceee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2280      	movs	r2, #128	; 0x80
 800cef4:	601a      	str	r2, [r3, #0]
}
 800cef6:	bf00      	nop
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	20000704 	.word	0x20000704
 800cf08:	20000760 	.word	0x20000760

0800cf0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	4a07      	ldr	r2, [pc, #28]	; (800cf38 <vApplicationGetTimerTaskMemory+0x2c>)
 800cf1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	4a06      	ldr	r2, [pc, #24]	; (800cf3c <vApplicationGetTimerTaskMemory+0x30>)
 800cf22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf2a:	601a      	str	r2, [r3, #0]
}
 800cf2c:	bf00      	nop
 800cf2e:	3714      	adds	r7, #20
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr
 800cf38:	20000960 	.word	0x20000960
 800cf3c:	200009bc 	.word	0x200009bc

0800cf40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f103 0208 	add.w	r2, r3, #8
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f04f 32ff 	mov.w	r2, #4294967295
 800cf58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f103 0208 	add.w	r2, r3, #8
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f103 0208 	add.w	r2, r3, #8
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cf74:	bf00      	nop
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cf8e:	bf00      	nop
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	b085      	sub	sp, #20
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	689a      	ldr	r2, [r3, #8]
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	683a      	ldr	r2, [r7, #0]
 800cfc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	1c5a      	adds	r2, r3, #1
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	601a      	str	r2, [r3, #0]
}
 800cfd6:	bf00      	nop
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b085      	sub	sp, #20
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
 800cfea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff8:	d103      	bne.n	800d002 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	691b      	ldr	r3, [r3, #16]
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	e00c      	b.n	800d01c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	3308      	adds	r3, #8
 800d006:	60fb      	str	r3, [r7, #12]
 800d008:	e002      	b.n	800d010 <vListInsert+0x2e>
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d2f6      	bcs.n	800d00a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	683a      	ldr	r2, [r7, #0]
 800d036:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	1c5a      	adds	r2, r3, #1
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	601a      	str	r2, [r3, #0]
}
 800d048:	bf00      	nop
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	691b      	ldr	r3, [r3, #16]
 800d060:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	6892      	ldr	r2, [r2, #8]
 800d06a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	6852      	ldr	r2, [r2, #4]
 800d074:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d103      	bne.n	800d088 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	1e5a      	subs	r2, r3, #1
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d0d2:	f002 f84f 	bl	800f174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0de:	68f9      	ldr	r1, [r7, #12]
 800d0e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0e2:	fb01 f303 	mul.w	r3, r1, r3
 800d0e6:	441a      	add	r2, r3
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d102:	3b01      	subs	r3, #1
 800d104:	68f9      	ldr	r1, [r7, #12]
 800d106:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d108:	fb01 f303 	mul.w	r3, r1, r3
 800d10c:	441a      	add	r2, r3
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	22ff      	movs	r2, #255	; 0xff
 800d116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	22ff      	movs	r2, #255	; 0xff
 800d11e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d114      	bne.n	800d152 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d01a      	beq.n	800d166 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	3310      	adds	r3, #16
 800d134:	4618      	mov	r0, r3
 800d136:	f001 f903 	bl	800e340 <xTaskRemoveFromEventList>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d012      	beq.n	800d166 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d140:	4b0c      	ldr	r3, [pc, #48]	; (800d174 <xQueueGenericReset+0xcc>)
 800d142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d146:	601a      	str	r2, [r3, #0]
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	e009      	b.n	800d166 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	3310      	adds	r3, #16
 800d156:	4618      	mov	r0, r3
 800d158:	f7ff fef2 	bl	800cf40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	3324      	adds	r3, #36	; 0x24
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff feed 	bl	800cf40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d166:	f002 f835 	bl	800f1d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d16a:	2301      	movs	r3, #1
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	e000ed04 	.word	0xe000ed04

0800d178 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b08e      	sub	sp, #56	; 0x38
 800d17c:	af02      	add	r7, sp, #8
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10a      	bne.n	800d1a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d19e:	bf00      	nop
 800d1a0:	e7fe      	b.n	800d1a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10a      	bne.n	800d1be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ac:	f383 8811 	msr	BASEPRI, r3
 800d1b0:	f3bf 8f6f 	isb	sy
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1ba:	bf00      	nop
 800d1bc:	e7fe      	b.n	800d1bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d002      	beq.n	800d1ca <xQueueGenericCreateStatic+0x52>
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d001      	beq.n	800d1ce <xQueueGenericCreateStatic+0x56>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e000      	b.n	800d1d0 <xQueueGenericCreateStatic+0x58>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10a      	bne.n	800d1ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d8:	f383 8811 	msr	BASEPRI, r3
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	623b      	str	r3, [r7, #32]
}
 800d1e6:	bf00      	nop
 800d1e8:	e7fe      	b.n	800d1e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d102      	bne.n	800d1f6 <xQueueGenericCreateStatic+0x7e>
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d101      	bne.n	800d1fa <xQueueGenericCreateStatic+0x82>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e000      	b.n	800d1fc <xQueueGenericCreateStatic+0x84>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10a      	bne.n	800d216 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	61fb      	str	r3, [r7, #28]
}
 800d212:	bf00      	nop
 800d214:	e7fe      	b.n	800d214 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d216:	2350      	movs	r3, #80	; 0x50
 800d218:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2b50      	cmp	r3, #80	; 0x50
 800d21e:	d00a      	beq.n	800d236 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	61bb      	str	r3, [r7, #24]
}
 800d232:	bf00      	nop
 800d234:	e7fe      	b.n	800d234 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d236:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00d      	beq.n	800d25e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d244:	2201      	movs	r2, #1
 800d246:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d24a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	4613      	mov	r3, r2
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	68b9      	ldr	r1, [r7, #8]
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f000 f805 	bl	800d268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d260:	4618      	mov	r0, r3
 800d262:	3730      	adds	r7, #48	; 0x30
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	607a      	str	r2, [r7, #4]
 800d274:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d103      	bne.n	800d284 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	69ba      	ldr	r2, [r7, #24]
 800d280:	601a      	str	r2, [r3, #0]
 800d282:	e002      	b.n	800d28a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d290:	69bb      	ldr	r3, [r7, #24]
 800d292:	68ba      	ldr	r2, [r7, #8]
 800d294:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d296:	2101      	movs	r1, #1
 800d298:	69b8      	ldr	r0, [r7, #24]
 800d29a:	f7ff ff05 	bl	800d0a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	78fa      	ldrb	r2, [r7, #3]
 800d2a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d2a6:	bf00      	nop
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
	...

0800d2b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b08e      	sub	sp, #56	; 0x38
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
 800d2bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10a      	bne.n	800d2e2 <xQueueGenericSend+0x32>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2de:	bf00      	nop
 800d2e0:	e7fe      	b.n	800d2e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d103      	bne.n	800d2f0 <xQueueGenericSend+0x40>
 800d2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <xQueueGenericSend+0x44>
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e000      	b.n	800d2f6 <xQueueGenericSend+0x46>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d10a      	bne.n	800d310 <xQueueGenericSend+0x60>
	__asm volatile
 800d2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fe:	f383 8811 	msr	BASEPRI, r3
 800d302:	f3bf 8f6f 	isb	sy
 800d306:	f3bf 8f4f 	dsb	sy
 800d30a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d30c:	bf00      	nop
 800d30e:	e7fe      	b.n	800d30e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	2b02      	cmp	r3, #2
 800d314:	d103      	bne.n	800d31e <xQueueGenericSend+0x6e>
 800d316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d101      	bne.n	800d322 <xQueueGenericSend+0x72>
 800d31e:	2301      	movs	r3, #1
 800d320:	e000      	b.n	800d324 <xQueueGenericSend+0x74>
 800d322:	2300      	movs	r3, #0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10a      	bne.n	800d33e <xQueueGenericSend+0x8e>
	__asm volatile
 800d328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32c:	f383 8811 	msr	BASEPRI, r3
 800d330:	f3bf 8f6f 	isb	sy
 800d334:	f3bf 8f4f 	dsb	sy
 800d338:	623b      	str	r3, [r7, #32]
}
 800d33a:	bf00      	nop
 800d33c:	e7fe      	b.n	800d33c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d33e:	f001 f9bd 	bl	800e6bc <xTaskGetSchedulerState>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d102      	bne.n	800d34e <xQueueGenericSend+0x9e>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d101      	bne.n	800d352 <xQueueGenericSend+0xa2>
 800d34e:	2301      	movs	r3, #1
 800d350:	e000      	b.n	800d354 <xQueueGenericSend+0xa4>
 800d352:	2300      	movs	r3, #0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10a      	bne.n	800d36e <xQueueGenericSend+0xbe>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	61fb      	str	r3, [r7, #28]
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d36e:	f001 ff01 	bl	800f174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d302      	bcc.n	800d384 <xQueueGenericSend+0xd4>
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b02      	cmp	r3, #2
 800d382:	d129      	bne.n	800d3d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d384:	683a      	ldr	r2, [r7, #0]
 800d386:	68b9      	ldr	r1, [r7, #8]
 800d388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d38a:	f000 fa0b 	bl	800d7a4 <prvCopyDataToQueue>
 800d38e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d394:	2b00      	cmp	r3, #0
 800d396:	d010      	beq.n	800d3ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	3324      	adds	r3, #36	; 0x24
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 ffcf 	bl	800e340 <xTaskRemoveFromEventList>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d013      	beq.n	800d3d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d3a8:	4b3f      	ldr	r3, [pc, #252]	; (800d4a8 <xQueueGenericSend+0x1f8>)
 800d3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ae:	601a      	str	r2, [r3, #0]
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	e00a      	b.n	800d3d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d007      	beq.n	800d3d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d3c0:	4b39      	ldr	r3, [pc, #228]	; (800d4a8 <xQueueGenericSend+0x1f8>)
 800d3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3c6:	601a      	str	r2, [r3, #0]
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d3d0:	f001 ff00 	bl	800f1d4 <vPortExitCritical>
				return pdPASS;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e063      	b.n	800d4a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d103      	bne.n	800d3e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3de:	f001 fef9 	bl	800f1d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	e05c      	b.n	800d4a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d106      	bne.n	800d3fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3ec:	f107 0314 	add.w	r3, r7, #20
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f001 f809 	bl	800e408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3fa:	f001 feeb 	bl	800f1d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3fe:	f000 fd7b 	bl	800def8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d402:	f001 feb7 	bl	800f174 <vPortEnterCritical>
 800d406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d40c:	b25b      	sxtb	r3, r3
 800d40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d412:	d103      	bne.n	800d41c <xQueueGenericSend+0x16c>
 800d414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d416:	2200      	movs	r2, #0
 800d418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d422:	b25b      	sxtb	r3, r3
 800d424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d428:	d103      	bne.n	800d432 <xQueueGenericSend+0x182>
 800d42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42c:	2200      	movs	r2, #0
 800d42e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d432:	f001 fecf 	bl	800f1d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d436:	1d3a      	adds	r2, r7, #4
 800d438:	f107 0314 	add.w	r3, r7, #20
 800d43c:	4611      	mov	r1, r2
 800d43e:	4618      	mov	r0, r3
 800d440:	f000 fff8 	bl	800e434 <xTaskCheckForTimeOut>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d124      	bne.n	800d494 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d44a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d44c:	f000 faa2 	bl	800d994 <prvIsQueueFull>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d018      	beq.n	800d488 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d458:	3310      	adds	r3, #16
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	4611      	mov	r1, r2
 800d45e:	4618      	mov	r0, r3
 800d460:	f000 ff1e 	bl	800e2a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d466:	f000 fa2d 	bl	800d8c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d46a:	f000 fd53 	bl	800df14 <xTaskResumeAll>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	f47f af7c 	bne.w	800d36e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d476:	4b0c      	ldr	r3, [pc, #48]	; (800d4a8 <xQueueGenericSend+0x1f8>)
 800d478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d47c:	601a      	str	r2, [r3, #0]
 800d47e:	f3bf 8f4f 	dsb	sy
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	e772      	b.n	800d36e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d48a:	f000 fa1b 	bl	800d8c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d48e:	f000 fd41 	bl	800df14 <xTaskResumeAll>
 800d492:	e76c      	b.n	800d36e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d496:	f000 fa15 	bl	800d8c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d49a:	f000 fd3b 	bl	800df14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d49e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3738      	adds	r7, #56	; 0x38
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	e000ed04 	.word	0xe000ed04

0800d4ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b090      	sub	sp, #64	; 0x40
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
 800d4b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10a      	bne.n	800d4da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d103      	bne.n	800d4e8 <xQueueGenericSendFromISR+0x3c>
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d101      	bne.n	800d4ec <xQueueGenericSendFromISR+0x40>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e000      	b.n	800d4ee <xQueueGenericSendFromISR+0x42>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10a      	bne.n	800d508 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d504:	bf00      	nop
 800d506:	e7fe      	b.n	800d506 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d103      	bne.n	800d516 <xQueueGenericSendFromISR+0x6a>
 800d50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d512:	2b01      	cmp	r3, #1
 800d514:	d101      	bne.n	800d51a <xQueueGenericSendFromISR+0x6e>
 800d516:	2301      	movs	r3, #1
 800d518:	e000      	b.n	800d51c <xQueueGenericSendFromISR+0x70>
 800d51a:	2300      	movs	r3, #0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10a      	bne.n	800d536 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d524:	f383 8811 	msr	BASEPRI, r3
 800d528:	f3bf 8f6f 	isb	sy
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	623b      	str	r3, [r7, #32]
}
 800d532:	bf00      	nop
 800d534:	e7fe      	b.n	800d534 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d536:	f001 feff 	bl	800f338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d53a:	f3ef 8211 	mrs	r2, BASEPRI
 800d53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	61fa      	str	r2, [r7, #28]
 800d550:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d552:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d554:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d55e:	429a      	cmp	r2, r3
 800d560:	d302      	bcc.n	800d568 <xQueueGenericSendFromISR+0xbc>
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	2b02      	cmp	r3, #2
 800d566:	d12f      	bne.n	800d5c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d576:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	68b9      	ldr	r1, [r7, #8]
 800d57c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d57e:	f000 f911 	bl	800d7a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d582:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58a:	d112      	bne.n	800d5b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d590:	2b00      	cmp	r3, #0
 800d592:	d016      	beq.n	800d5c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d596:	3324      	adds	r3, #36	; 0x24
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 fed1 	bl	800e340 <xTaskRemoveFromEventList>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00e      	beq.n	800d5c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00b      	beq.n	800d5c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	601a      	str	r2, [r3, #0]
 800d5b0:	e007      	b.n	800d5c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d5b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	b25a      	sxtb	r2, r3
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d5c6:	e001      	b.n	800d5cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d5d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3740      	adds	r7, #64	; 0x40
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
	...

0800d5e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b08c      	sub	sp, #48	; 0x30
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d10a      	bne.n	800d614 <xQueueReceive+0x30>
	__asm volatile
 800d5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d602:	f383 8811 	msr	BASEPRI, r3
 800d606:	f3bf 8f6f 	isb	sy
 800d60a:	f3bf 8f4f 	dsb	sy
 800d60e:	623b      	str	r3, [r7, #32]
}
 800d610:	bf00      	nop
 800d612:	e7fe      	b.n	800d612 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d103      	bne.n	800d622 <xQueueReceive+0x3e>
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d101      	bne.n	800d626 <xQueueReceive+0x42>
 800d622:	2301      	movs	r3, #1
 800d624:	e000      	b.n	800d628 <xQueueReceive+0x44>
 800d626:	2300      	movs	r3, #0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10a      	bne.n	800d642 <xQueueReceive+0x5e>
	__asm volatile
 800d62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d630:	f383 8811 	msr	BASEPRI, r3
 800d634:	f3bf 8f6f 	isb	sy
 800d638:	f3bf 8f4f 	dsb	sy
 800d63c:	61fb      	str	r3, [r7, #28]
}
 800d63e:	bf00      	nop
 800d640:	e7fe      	b.n	800d640 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d642:	f001 f83b 	bl	800e6bc <xTaskGetSchedulerState>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d102      	bne.n	800d652 <xQueueReceive+0x6e>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d101      	bne.n	800d656 <xQueueReceive+0x72>
 800d652:	2301      	movs	r3, #1
 800d654:	e000      	b.n	800d658 <xQueueReceive+0x74>
 800d656:	2300      	movs	r3, #0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10a      	bne.n	800d672 <xQueueReceive+0x8e>
	__asm volatile
 800d65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d660:	f383 8811 	msr	BASEPRI, r3
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	61bb      	str	r3, [r7, #24]
}
 800d66e:	bf00      	nop
 800d670:	e7fe      	b.n	800d670 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d672:	f001 fd7f 	bl	800f174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d01f      	beq.n	800d6c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d682:	68b9      	ldr	r1, [r7, #8]
 800d684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d686:	f000 f8f7 	bl	800d878 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68c:	1e5a      	subs	r2, r3, #1
 800d68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d690:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00f      	beq.n	800d6ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69c:	3310      	adds	r3, #16
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 fe4e 	bl	800e340 <xTaskRemoveFromEventList>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d007      	beq.n	800d6ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6aa:	4b3d      	ldr	r3, [pc, #244]	; (800d7a0 <xQueueReceive+0x1bc>)
 800d6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	f3bf 8f4f 	dsb	sy
 800d6b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d6ba:	f001 fd8b 	bl	800f1d4 <vPortExitCritical>
				return pdPASS;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e069      	b.n	800d796 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d103      	bne.n	800d6d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6c8:	f001 fd84 	bl	800f1d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	e062      	b.n	800d796 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d106      	bne.n	800d6e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6d6:	f107 0310 	add.w	r3, r7, #16
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f000 fe94 	bl	800e408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6e4:	f001 fd76 	bl	800f1d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6e8:	f000 fc06 	bl	800def8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6ec:	f001 fd42 	bl	800f174 <vPortEnterCritical>
 800d6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6f6:	b25b      	sxtb	r3, r3
 800d6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6fc:	d103      	bne.n	800d706 <xQueueReceive+0x122>
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	2200      	movs	r2, #0
 800d702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d70c:	b25b      	sxtb	r3, r3
 800d70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d712:	d103      	bne.n	800d71c <xQueueReceive+0x138>
 800d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d716:	2200      	movs	r2, #0
 800d718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d71c:	f001 fd5a 	bl	800f1d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d720:	1d3a      	adds	r2, r7, #4
 800d722:	f107 0310 	add.w	r3, r7, #16
 800d726:	4611      	mov	r1, r2
 800d728:	4618      	mov	r0, r3
 800d72a:	f000 fe83 	bl	800e434 <xTaskCheckForTimeOut>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d123      	bne.n	800d77c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d736:	f000 f917 	bl	800d968 <prvIsQueueEmpty>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d017      	beq.n	800d770 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d742:	3324      	adds	r3, #36	; 0x24
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	4611      	mov	r1, r2
 800d748:	4618      	mov	r0, r3
 800d74a:	f000 fda9 	bl	800e2a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d74e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d750:	f000 f8b8 	bl	800d8c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d754:	f000 fbde 	bl	800df14 <xTaskResumeAll>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d189      	bne.n	800d672 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d75e:	4b10      	ldr	r3, [pc, #64]	; (800d7a0 <xQueueReceive+0x1bc>)
 800d760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d764:	601a      	str	r2, [r3, #0]
 800d766:	f3bf 8f4f 	dsb	sy
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	e780      	b.n	800d672 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d772:	f000 f8a7 	bl	800d8c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d776:	f000 fbcd 	bl	800df14 <xTaskResumeAll>
 800d77a:	e77a      	b.n	800d672 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d77c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d77e:	f000 f8a1 	bl	800d8c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d782:	f000 fbc7 	bl	800df14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d788:	f000 f8ee 	bl	800d968 <prvIsQueueEmpty>
 800d78c:	4603      	mov	r3, r0
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f43f af6f 	beq.w	800d672 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d794:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d796:	4618      	mov	r0, r3
 800d798:	3730      	adds	r7, #48	; 0x30
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	e000ed04 	.word	0xe000ed04

0800d7a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10d      	bne.n	800d7de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d14d      	bne.n	800d866 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f000 ff92 	bl	800e6f8 <xTaskPriorityDisinherit>
 800d7d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	609a      	str	r2, [r3, #8]
 800d7dc:	e043      	b.n	800d866 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d119      	bne.n	800d818 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6858      	ldr	r0, [r3, #4]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	68b9      	ldr	r1, [r7, #8]
 800d7f0:	f001 fff8 	bl	800f7e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	685a      	ldr	r2, [r3, #4]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fc:	441a      	add	r2, r3
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	685a      	ldr	r2, [r3, #4]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d32b      	bcc.n	800d866 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	605a      	str	r2, [r3, #4]
 800d816:	e026      	b.n	800d866 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	68d8      	ldr	r0, [r3, #12]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d820:	461a      	mov	r2, r3
 800d822:	68b9      	ldr	r1, [r7, #8]
 800d824:	f001 ffde 	bl	800f7e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	68da      	ldr	r2, [r3, #12]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d830:	425b      	negs	r3, r3
 800d832:	441a      	add	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	68da      	ldr	r2, [r3, #12]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	429a      	cmp	r2, r3
 800d842:	d207      	bcs.n	800d854 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	689a      	ldr	r2, [r3, #8]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d84c:	425b      	negs	r3, r3
 800d84e:	441a      	add	r2, r3
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2b02      	cmp	r3, #2
 800d858:	d105      	bne.n	800d866 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d002      	beq.n	800d866 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	3b01      	subs	r3, #1
 800d864:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	1c5a      	adds	r2, r3, #1
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d86e:	697b      	ldr	r3, [r7, #20]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3718      	adds	r7, #24
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d886:	2b00      	cmp	r3, #0
 800d888:	d018      	beq.n	800d8bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	68da      	ldr	r2, [r3, #12]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d892:	441a      	add	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	68da      	ldr	r2, [r3, #12]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	689b      	ldr	r3, [r3, #8]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d303      	bcc.n	800d8ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	68d9      	ldr	r1, [r3, #12]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	6838      	ldr	r0, [r7, #0]
 800d8b8:	f001 ff94 	bl	800f7e4 <memcpy>
	}
}
 800d8bc:	bf00      	nop
 800d8be:	3708      	adds	r7, #8
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d8cc:	f001 fc52 	bl	800f174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8d8:	e011      	b.n	800d8fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d012      	beq.n	800d908 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	3324      	adds	r3, #36	; 0x24
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f000 fd2a 	bl	800e340 <xTaskRemoveFromEventList>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d8f2:	f000 fe01 	bl	800e4f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d8f6:	7bfb      	ldrb	r3, [r7, #15]
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d902:	2b00      	cmp	r3, #0
 800d904:	dce9      	bgt.n	800d8da <prvUnlockQueue+0x16>
 800d906:	e000      	b.n	800d90a <prvUnlockQueue+0x46>
					break;
 800d908:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	22ff      	movs	r2, #255	; 0xff
 800d90e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d912:	f001 fc5f 	bl	800f1d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d916:	f001 fc2d 	bl	800f174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d920:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d922:	e011      	b.n	800d948 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	691b      	ldr	r3, [r3, #16]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d012      	beq.n	800d952 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	3310      	adds	r3, #16
 800d930:	4618      	mov	r0, r3
 800d932:	f000 fd05 	bl	800e340 <xTaskRemoveFromEventList>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d93c:	f000 fddc 	bl	800e4f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d940:	7bbb      	ldrb	r3, [r7, #14]
 800d942:	3b01      	subs	r3, #1
 800d944:	b2db      	uxtb	r3, r3
 800d946:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	dce9      	bgt.n	800d924 <prvUnlockQueue+0x60>
 800d950:	e000      	b.n	800d954 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d952:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	22ff      	movs	r2, #255	; 0xff
 800d958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d95c:	f001 fc3a 	bl	800f1d4 <vPortExitCritical>
}
 800d960:	bf00      	nop
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d970:	f001 fc00 	bl	800f174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d102      	bne.n	800d982 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d97c:	2301      	movs	r3, #1
 800d97e:	60fb      	str	r3, [r7, #12]
 800d980:	e001      	b.n	800d986 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d982:	2300      	movs	r3, #0
 800d984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d986:	f001 fc25 	bl	800f1d4 <vPortExitCritical>

	return xReturn;
 800d98a:	68fb      	ldr	r3, [r7, #12]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3710      	adds	r7, #16
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d99c:	f001 fbea 	bl	800f174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d102      	bne.n	800d9b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	e001      	b.n	800d9b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d9b6:	f001 fc0d 	bl	800f1d4 <vPortExitCritical>

	return xReturn;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	60fb      	str	r3, [r7, #12]
 800d9d2:	e014      	b.n	800d9fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d9d4:	4a0f      	ldr	r2, [pc, #60]	; (800da14 <vQueueAddToRegistry+0x50>)
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d10b      	bne.n	800d9f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d9e0:	490c      	ldr	r1, [pc, #48]	; (800da14 <vQueueAddToRegistry+0x50>)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d9ea:	4a0a      	ldr	r2, [pc, #40]	; (800da14 <vQueueAddToRegistry+0x50>)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	4413      	add	r3, r2
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d9f6:	e006      	b.n	800da06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	60fb      	str	r3, [r7, #12]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2b07      	cmp	r3, #7
 800da02:	d9e7      	bls.n	800d9d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da04:	bf00      	nop
 800da06:	bf00      	nop
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	20000dbc 	.word	0x20000dbc

0800da18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b086      	sub	sp, #24
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800da28:	f001 fba4 	bl	800f174 <vPortEnterCritical>
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da32:	b25b      	sxtb	r3, r3
 800da34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da38:	d103      	bne.n	800da42 <vQueueWaitForMessageRestricted+0x2a>
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da48:	b25b      	sxtb	r3, r3
 800da4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4e:	d103      	bne.n	800da58 <vQueueWaitForMessageRestricted+0x40>
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	2200      	movs	r2, #0
 800da54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da58:	f001 fbbc 	bl	800f1d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da60:	2b00      	cmp	r3, #0
 800da62:	d106      	bne.n	800da72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	3324      	adds	r3, #36	; 0x24
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	68b9      	ldr	r1, [r7, #8]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 fc3b 	bl	800e2e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800da72:	6978      	ldr	r0, [r7, #20]
 800da74:	f7ff ff26 	bl	800d8c4 <prvUnlockQueue>
	}
 800da78:	bf00      	nop
 800da7a:	3718      	adds	r7, #24
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da80:	b580      	push	{r7, lr}
 800da82:	b08e      	sub	sp, #56	; 0x38
 800da84:	af04      	add	r7, sp, #16
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
 800da8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da90:	2b00      	cmp	r3, #0
 800da92:	d10a      	bne.n	800daaa <xTaskCreateStatic+0x2a>
	__asm volatile
 800da94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da98:	f383 8811 	msr	BASEPRI, r3
 800da9c:	f3bf 8f6f 	isb	sy
 800daa0:	f3bf 8f4f 	dsb	sy
 800daa4:	623b      	str	r3, [r7, #32]
}
 800daa6:	bf00      	nop
 800daa8:	e7fe      	b.n	800daa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800daaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10a      	bne.n	800dac6 <xTaskCreateStatic+0x46>
	__asm volatile
 800dab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	61fb      	str	r3, [r7, #28]
}
 800dac2:	bf00      	nop
 800dac4:	e7fe      	b.n	800dac4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dac6:	235c      	movs	r3, #92	; 0x5c
 800dac8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	2b5c      	cmp	r3, #92	; 0x5c
 800dace:	d00a      	beq.n	800dae6 <xTaskCreateStatic+0x66>
	__asm volatile
 800dad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad4:	f383 8811 	msr	BASEPRI, r3
 800dad8:	f3bf 8f6f 	isb	sy
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	61bb      	str	r3, [r7, #24]
}
 800dae2:	bf00      	nop
 800dae4:	e7fe      	b.n	800dae4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dae6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daea:	2b00      	cmp	r3, #0
 800daec:	d01e      	beq.n	800db2c <xTaskCreateStatic+0xac>
 800daee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d01b      	beq.n	800db2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800daf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800daf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dafc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db00:	2202      	movs	r2, #2
 800db02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800db06:	2300      	movs	r3, #0
 800db08:	9303      	str	r3, [sp, #12]
 800db0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0c:	9302      	str	r3, [sp, #8]
 800db0e:	f107 0314 	add.w	r3, r7, #20
 800db12:	9301      	str	r3, [sp, #4]
 800db14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	68b9      	ldr	r1, [r7, #8]
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f000 f850 	bl	800dbc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db26:	f000 f8dd 	bl	800dce4 <prvAddNewTaskToReadyList>
 800db2a:	e001      	b.n	800db30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800db2c:	2300      	movs	r3, #0
 800db2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db30:	697b      	ldr	r3, [r7, #20]
	}
 800db32:	4618      	mov	r0, r3
 800db34:	3728      	adds	r7, #40	; 0x28
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db3a:	b580      	push	{r7, lr}
 800db3c:	b08c      	sub	sp, #48	; 0x30
 800db3e:	af04      	add	r7, sp, #16
 800db40:	60f8      	str	r0, [r7, #12]
 800db42:	60b9      	str	r1, [r7, #8]
 800db44:	603b      	str	r3, [r7, #0]
 800db46:	4613      	mov	r3, r2
 800db48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db4a:	88fb      	ldrh	r3, [r7, #6]
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	4618      	mov	r0, r3
 800db50:	f001 fc32 	bl	800f3b8 <pvPortMalloc>
 800db54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d00e      	beq.n	800db7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db5c:	205c      	movs	r0, #92	; 0x5c
 800db5e:	f001 fc2b 	bl	800f3b8 <pvPortMalloc>
 800db62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d003      	beq.n	800db72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	697a      	ldr	r2, [r7, #20]
 800db6e:	631a      	str	r2, [r3, #48]	; 0x30
 800db70:	e005      	b.n	800db7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db72:	6978      	ldr	r0, [r7, #20]
 800db74:	f001 fcec 	bl	800f550 <vPortFree>
 800db78:	e001      	b.n	800db7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db7a:	2300      	movs	r3, #0
 800db7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d017      	beq.n	800dbb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	2200      	movs	r2, #0
 800db88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db8c:	88fa      	ldrh	r2, [r7, #6]
 800db8e:	2300      	movs	r3, #0
 800db90:	9303      	str	r3, [sp, #12]
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	9302      	str	r3, [sp, #8]
 800db96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db98:	9301      	str	r3, [sp, #4]
 800db9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9c:	9300      	str	r3, [sp, #0]
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	68b9      	ldr	r1, [r7, #8]
 800dba2:	68f8      	ldr	r0, [r7, #12]
 800dba4:	f000 f80e 	bl	800dbc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dba8:	69f8      	ldr	r0, [r7, #28]
 800dbaa:	f000 f89b 	bl	800dce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	61bb      	str	r3, [r7, #24]
 800dbb2:	e002      	b.n	800dbba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dbb4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dbba:	69bb      	ldr	r3, [r7, #24]
	}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3720      	adds	r7, #32
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b088      	sub	sp, #32
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
 800dbd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	461a      	mov	r2, r3
 800dbdc:	21a5      	movs	r1, #165	; 0xa5
 800dbde:	f001 fe0f 	bl	800f800 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbe6:	6879      	ldr	r1, [r7, #4]
 800dbe8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dbec:	440b      	add	r3, r1
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	f023 0307 	bic.w	r3, r3, #7
 800dbfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dbfc:	69bb      	ldr	r3, [r7, #24]
 800dbfe:	f003 0307 	and.w	r3, r3, #7
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00a      	beq.n	800dc1c <prvInitialiseNewTask+0x58>
	__asm volatile
 800dc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0a:	f383 8811 	msr	BASEPRI, r3
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	f3bf 8f4f 	dsb	sy
 800dc16:	617b      	str	r3, [r7, #20]
}
 800dc18:	bf00      	nop
 800dc1a:	e7fe      	b.n	800dc1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d01f      	beq.n	800dc62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc22:	2300      	movs	r3, #0
 800dc24:	61fb      	str	r3, [r7, #28]
 800dc26:	e012      	b.n	800dc4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	7819      	ldrb	r1, [r3, #0]
 800dc30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	4413      	add	r3, r2
 800dc36:	3334      	adds	r3, #52	; 0x34
 800dc38:	460a      	mov	r2, r1
 800dc3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc3c:	68ba      	ldr	r2, [r7, #8]
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	4413      	add	r3, r2
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d006      	beq.n	800dc56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	61fb      	str	r3, [r7, #28]
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	2b0f      	cmp	r3, #15
 800dc52:	d9e9      	bls.n	800dc28 <prvInitialiseNewTask+0x64>
 800dc54:	e000      	b.n	800dc58 <prvInitialiseNewTask+0x94>
			{
				break;
 800dc56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc60:	e003      	b.n	800dc6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc64:	2200      	movs	r2, #0
 800dc66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	2b37      	cmp	r3, #55	; 0x37
 800dc6e:	d901      	bls.n	800dc74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc70:	2337      	movs	r3, #55	; 0x37
 800dc72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc82:	2200      	movs	r2, #0
 800dc84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	3304      	adds	r3, #4
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7ff f978 	bl	800cf80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc92:	3318      	adds	r3, #24
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7ff f973 	bl	800cf80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcbe:	683a      	ldr	r2, [r7, #0]
 800dcc0:	68f9      	ldr	r1, [r7, #12]
 800dcc2:	69b8      	ldr	r0, [r7, #24]
 800dcc4:	f001 f928 	bl	800ef18 <pxPortInitialiseStack>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dccc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcda:	bf00      	nop
 800dcdc:	3720      	adds	r7, #32
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
	...

0800dce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dcec:	f001 fa42 	bl	800f174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dcf0:	4b2d      	ldr	r3, [pc, #180]	; (800dda8 <prvAddNewTaskToReadyList+0xc4>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	4a2c      	ldr	r2, [pc, #176]	; (800dda8 <prvAddNewTaskToReadyList+0xc4>)
 800dcf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dcfa:	4b2c      	ldr	r3, [pc, #176]	; (800ddac <prvAddNewTaskToReadyList+0xc8>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d109      	bne.n	800dd16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd02:	4a2a      	ldr	r2, [pc, #168]	; (800ddac <prvAddNewTaskToReadyList+0xc8>)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd08:	4b27      	ldr	r3, [pc, #156]	; (800dda8 <prvAddNewTaskToReadyList+0xc4>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d110      	bne.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd10:	f000 fc16 	bl	800e540 <prvInitialiseTaskLists>
 800dd14:	e00d      	b.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd16:	4b26      	ldr	r3, [pc, #152]	; (800ddb0 <prvAddNewTaskToReadyList+0xcc>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d109      	bne.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd1e:	4b23      	ldr	r3, [pc, #140]	; (800ddac <prvAddNewTaskToReadyList+0xc8>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d802      	bhi.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd2c:	4a1f      	ldr	r2, [pc, #124]	; (800ddac <prvAddNewTaskToReadyList+0xc8>)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd32:	4b20      	ldr	r3, [pc, #128]	; (800ddb4 <prvAddNewTaskToReadyList+0xd0>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	3301      	adds	r3, #1
 800dd38:	4a1e      	ldr	r2, [pc, #120]	; (800ddb4 <prvAddNewTaskToReadyList+0xd0>)
 800dd3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dd3c:	4b1d      	ldr	r3, [pc, #116]	; (800ddb4 <prvAddNewTaskToReadyList+0xd0>)
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd48:	4b1b      	ldr	r3, [pc, #108]	; (800ddb8 <prvAddNewTaskToReadyList+0xd4>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d903      	bls.n	800dd58 <prvAddNewTaskToReadyList+0x74>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd54:	4a18      	ldr	r2, [pc, #96]	; (800ddb8 <prvAddNewTaskToReadyList+0xd4>)
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	4413      	add	r3, r2
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	4a15      	ldr	r2, [pc, #84]	; (800ddbc <prvAddNewTaskToReadyList+0xd8>)
 800dd66:	441a      	add	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	3304      	adds	r3, #4
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	4610      	mov	r0, r2
 800dd70:	f7ff f913 	bl	800cf9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd74:	f001 fa2e 	bl	800f1d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd78:	4b0d      	ldr	r3, [pc, #52]	; (800ddb0 <prvAddNewTaskToReadyList+0xcc>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d00e      	beq.n	800dd9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd80:	4b0a      	ldr	r3, [pc, #40]	; (800ddac <prvAddNewTaskToReadyList+0xc8>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d207      	bcs.n	800dd9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd8e:	4b0c      	ldr	r3, [pc, #48]	; (800ddc0 <prvAddNewTaskToReadyList+0xdc>)
 800dd90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd94:	601a      	str	r2, [r3, #0]
 800dd96:	f3bf 8f4f 	dsb	sy
 800dd9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd9e:	bf00      	nop
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	200012d0 	.word	0x200012d0
 800ddac:	20000dfc 	.word	0x20000dfc
 800ddb0:	200012dc 	.word	0x200012dc
 800ddb4:	200012ec 	.word	0x200012ec
 800ddb8:	200012d8 	.word	0x200012d8
 800ddbc:	20000e00 	.word	0x20000e00
 800ddc0:	e000ed04 	.word	0xe000ed04

0800ddc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d017      	beq.n	800de06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ddd6:	4b13      	ldr	r3, [pc, #76]	; (800de24 <vTaskDelay+0x60>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d00a      	beq.n	800ddf4 <vTaskDelay+0x30>
	__asm volatile
 800ddde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde2:	f383 8811 	msr	BASEPRI, r3
 800dde6:	f3bf 8f6f 	isb	sy
 800ddea:	f3bf 8f4f 	dsb	sy
 800ddee:	60bb      	str	r3, [r7, #8]
}
 800ddf0:	bf00      	nop
 800ddf2:	e7fe      	b.n	800ddf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ddf4:	f000 f880 	bl	800def8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fcea 	bl	800e7d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de00:	f000 f888 	bl	800df14 <xTaskResumeAll>
 800de04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d107      	bne.n	800de1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800de0c:	4b06      	ldr	r3, [pc, #24]	; (800de28 <vTaskDelay+0x64>)
 800de0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de1c:	bf00      	nop
 800de1e:	3710      	adds	r7, #16
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	200012f8 	.word	0x200012f8
 800de28:	e000ed04 	.word	0xe000ed04

0800de2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b08a      	sub	sp, #40	; 0x28
 800de30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800de32:	2300      	movs	r3, #0
 800de34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800de36:	2300      	movs	r3, #0
 800de38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800de3a:	463a      	mov	r2, r7
 800de3c:	1d39      	adds	r1, r7, #4
 800de3e:	f107 0308 	add.w	r3, r7, #8
 800de42:	4618      	mov	r0, r3
 800de44:	f7ff f848 	bl	800ced8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	9202      	str	r2, [sp, #8]
 800de50:	9301      	str	r3, [sp, #4]
 800de52:	2300      	movs	r3, #0
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	2300      	movs	r3, #0
 800de58:	460a      	mov	r2, r1
 800de5a:	4921      	ldr	r1, [pc, #132]	; (800dee0 <vTaskStartScheduler+0xb4>)
 800de5c:	4821      	ldr	r0, [pc, #132]	; (800dee4 <vTaskStartScheduler+0xb8>)
 800de5e:	f7ff fe0f 	bl	800da80 <xTaskCreateStatic>
 800de62:	4603      	mov	r3, r0
 800de64:	4a20      	ldr	r2, [pc, #128]	; (800dee8 <vTaskStartScheduler+0xbc>)
 800de66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de68:	4b1f      	ldr	r3, [pc, #124]	; (800dee8 <vTaskStartScheduler+0xbc>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d002      	beq.n	800de76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de70:	2301      	movs	r3, #1
 800de72:	617b      	str	r3, [r7, #20]
 800de74:	e001      	b.n	800de7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de76:	2300      	movs	r3, #0
 800de78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d102      	bne.n	800de86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800de80:	f000 fcfc 	bl	800e87c <xTimerCreateTimerTask>
 800de84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d116      	bne.n	800deba <vTaskStartScheduler+0x8e>
	__asm volatile
 800de8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de90:	f383 8811 	msr	BASEPRI, r3
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	613b      	str	r3, [r7, #16]
}
 800de9e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dea0:	4b12      	ldr	r3, [pc, #72]	; (800deec <vTaskStartScheduler+0xc0>)
 800dea2:	f04f 32ff 	mov.w	r2, #4294967295
 800dea6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dea8:	4b11      	ldr	r3, [pc, #68]	; (800def0 <vTaskStartScheduler+0xc4>)
 800deaa:	2201      	movs	r2, #1
 800deac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800deae:	4b11      	ldr	r3, [pc, #68]	; (800def4 <vTaskStartScheduler+0xc8>)
 800deb0:	2200      	movs	r2, #0
 800deb2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800deb4:	f001 f8bc 	bl	800f030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800deb8:	e00e      	b.n	800ded8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec0:	d10a      	bne.n	800ded8 <vTaskStartScheduler+0xac>
	__asm volatile
 800dec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec6:	f383 8811 	msr	BASEPRI, r3
 800deca:	f3bf 8f6f 	isb	sy
 800dece:	f3bf 8f4f 	dsb	sy
 800ded2:	60fb      	str	r3, [r7, #12]
}
 800ded4:	bf00      	nop
 800ded6:	e7fe      	b.n	800ded6 <vTaskStartScheduler+0xaa>
}
 800ded8:	bf00      	nop
 800deda:	3718      	adds	r7, #24
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	0800f858 	.word	0x0800f858
 800dee4:	0800e511 	.word	0x0800e511
 800dee8:	200012f4 	.word	0x200012f4
 800deec:	200012f0 	.word	0x200012f0
 800def0:	200012dc 	.word	0x200012dc
 800def4:	200012d4 	.word	0x200012d4

0800def8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800def8:	b480      	push	{r7}
 800defa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800defc:	4b04      	ldr	r3, [pc, #16]	; (800df10 <vTaskSuspendAll+0x18>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	3301      	adds	r3, #1
 800df02:	4a03      	ldr	r2, [pc, #12]	; (800df10 <vTaskSuspendAll+0x18>)
 800df04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800df06:	bf00      	nop
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr
 800df10:	200012f8 	.word	0x200012f8

0800df14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800df1a:	2300      	movs	r3, #0
 800df1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800df1e:	2300      	movs	r3, #0
 800df20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800df22:	4b42      	ldr	r3, [pc, #264]	; (800e02c <xTaskResumeAll+0x118>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10a      	bne.n	800df40 <xTaskResumeAll+0x2c>
	__asm volatile
 800df2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2e:	f383 8811 	msr	BASEPRI, r3
 800df32:	f3bf 8f6f 	isb	sy
 800df36:	f3bf 8f4f 	dsb	sy
 800df3a:	603b      	str	r3, [r7, #0]
}
 800df3c:	bf00      	nop
 800df3e:	e7fe      	b.n	800df3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df40:	f001 f918 	bl	800f174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df44:	4b39      	ldr	r3, [pc, #228]	; (800e02c <xTaskResumeAll+0x118>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	3b01      	subs	r3, #1
 800df4a:	4a38      	ldr	r2, [pc, #224]	; (800e02c <xTaskResumeAll+0x118>)
 800df4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df4e:	4b37      	ldr	r3, [pc, #220]	; (800e02c <xTaskResumeAll+0x118>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d162      	bne.n	800e01c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df56:	4b36      	ldr	r3, [pc, #216]	; (800e030 <xTaskResumeAll+0x11c>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d05e      	beq.n	800e01c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df5e:	e02f      	b.n	800dfc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df60:	4b34      	ldr	r3, [pc, #208]	; (800e034 <xTaskResumeAll+0x120>)
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	3318      	adds	r3, #24
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7ff f871 	bl	800d054 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	3304      	adds	r3, #4
 800df76:	4618      	mov	r0, r3
 800df78:	f7ff f86c 	bl	800d054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df80:	4b2d      	ldr	r3, [pc, #180]	; (800e038 <xTaskResumeAll+0x124>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	429a      	cmp	r2, r3
 800df86:	d903      	bls.n	800df90 <xTaskResumeAll+0x7c>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df8c:	4a2a      	ldr	r2, [pc, #168]	; (800e038 <xTaskResumeAll+0x124>)
 800df8e:	6013      	str	r3, [r2, #0]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df94:	4613      	mov	r3, r2
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	4413      	add	r3, r2
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4a27      	ldr	r2, [pc, #156]	; (800e03c <xTaskResumeAll+0x128>)
 800df9e:	441a      	add	r2, r3
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	3304      	adds	r3, #4
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	f7fe fff7 	bl	800cf9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb0:	4b23      	ldr	r3, [pc, #140]	; (800e040 <xTaskResumeAll+0x12c>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d302      	bcc.n	800dfc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dfba:	4b22      	ldr	r3, [pc, #136]	; (800e044 <xTaskResumeAll+0x130>)
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dfc0:	4b1c      	ldr	r3, [pc, #112]	; (800e034 <xTaskResumeAll+0x120>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d1cb      	bne.n	800df60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dfce:	f000 fb55 	bl	800e67c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dfd2:	4b1d      	ldr	r3, [pc, #116]	; (800e048 <xTaskResumeAll+0x134>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d010      	beq.n	800e000 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dfde:	f000 f847 	bl	800e070 <xTaskIncrementTick>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dfe8:	4b16      	ldr	r3, [pc, #88]	; (800e044 <xTaskResumeAll+0x130>)
 800dfea:	2201      	movs	r2, #1
 800dfec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3b01      	subs	r3, #1
 800dff2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1f1      	bne.n	800dfde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dffa:	4b13      	ldr	r3, [pc, #76]	; (800e048 <xTaskResumeAll+0x134>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e000:	4b10      	ldr	r3, [pc, #64]	; (800e044 <xTaskResumeAll+0x130>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d009      	beq.n	800e01c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e008:	2301      	movs	r3, #1
 800e00a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e00c:	4b0f      	ldr	r3, [pc, #60]	; (800e04c <xTaskResumeAll+0x138>)
 800e00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e012:	601a      	str	r2, [r3, #0]
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e01c:	f001 f8da 	bl	800f1d4 <vPortExitCritical>

	return xAlreadyYielded;
 800e020:	68bb      	ldr	r3, [r7, #8]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	200012f8 	.word	0x200012f8
 800e030:	200012d0 	.word	0x200012d0
 800e034:	20001290 	.word	0x20001290
 800e038:	200012d8 	.word	0x200012d8
 800e03c:	20000e00 	.word	0x20000e00
 800e040:	20000dfc 	.word	0x20000dfc
 800e044:	200012e4 	.word	0x200012e4
 800e048:	200012e0 	.word	0x200012e0
 800e04c:	e000ed04 	.word	0xe000ed04

0800e050 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e056:	4b05      	ldr	r3, [pc, #20]	; (800e06c <xTaskGetTickCount+0x1c>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e05c:	687b      	ldr	r3, [r7, #4]
}
 800e05e:	4618      	mov	r0, r3
 800e060:	370c      	adds	r7, #12
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	200012d4 	.word	0x200012d4

0800e070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e076:	2300      	movs	r3, #0
 800e078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e07a:	4b4f      	ldr	r3, [pc, #316]	; (800e1b8 <xTaskIncrementTick+0x148>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	f040 808f 	bne.w	800e1a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e084:	4b4d      	ldr	r3, [pc, #308]	; (800e1bc <xTaskIncrementTick+0x14c>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	3301      	adds	r3, #1
 800e08a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e08c:	4a4b      	ldr	r2, [pc, #300]	; (800e1bc <xTaskIncrementTick+0x14c>)
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d120      	bne.n	800e0da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e098:	4b49      	ldr	r3, [pc, #292]	; (800e1c0 <xTaskIncrementTick+0x150>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d00a      	beq.n	800e0b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800e0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a6:	f383 8811 	msr	BASEPRI, r3
 800e0aa:	f3bf 8f6f 	isb	sy
 800e0ae:	f3bf 8f4f 	dsb	sy
 800e0b2:	603b      	str	r3, [r7, #0]
}
 800e0b4:	bf00      	nop
 800e0b6:	e7fe      	b.n	800e0b6 <xTaskIncrementTick+0x46>
 800e0b8:	4b41      	ldr	r3, [pc, #260]	; (800e1c0 <xTaskIncrementTick+0x150>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	60fb      	str	r3, [r7, #12]
 800e0be:	4b41      	ldr	r3, [pc, #260]	; (800e1c4 <xTaskIncrementTick+0x154>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4a3f      	ldr	r2, [pc, #252]	; (800e1c0 <xTaskIncrementTick+0x150>)
 800e0c4:	6013      	str	r3, [r2, #0]
 800e0c6:	4a3f      	ldr	r2, [pc, #252]	; (800e1c4 <xTaskIncrementTick+0x154>)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6013      	str	r3, [r2, #0]
 800e0cc:	4b3e      	ldr	r3, [pc, #248]	; (800e1c8 <xTaskIncrementTick+0x158>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	4a3d      	ldr	r2, [pc, #244]	; (800e1c8 <xTaskIncrementTick+0x158>)
 800e0d4:	6013      	str	r3, [r2, #0]
 800e0d6:	f000 fad1 	bl	800e67c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0da:	4b3c      	ldr	r3, [pc, #240]	; (800e1cc <xTaskIncrementTick+0x15c>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	693a      	ldr	r2, [r7, #16]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d349      	bcc.n	800e178 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0e4:	4b36      	ldr	r3, [pc, #216]	; (800e1c0 <xTaskIncrementTick+0x150>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d104      	bne.n	800e0f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0ee:	4b37      	ldr	r3, [pc, #220]	; (800e1cc <xTaskIncrementTick+0x15c>)
 800e0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f4:	601a      	str	r2, [r3, #0]
					break;
 800e0f6:	e03f      	b.n	800e178 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0f8:	4b31      	ldr	r3, [pc, #196]	; (800e1c0 <xTaskIncrementTick+0x150>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e108:	693a      	ldr	r2, [r7, #16]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d203      	bcs.n	800e118 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e110:	4a2e      	ldr	r2, [pc, #184]	; (800e1cc <xTaskIncrementTick+0x15c>)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e116:	e02f      	b.n	800e178 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	3304      	adds	r3, #4
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe ff99 	bl	800d054 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e126:	2b00      	cmp	r3, #0
 800e128:	d004      	beq.n	800e134 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	3318      	adds	r3, #24
 800e12e:	4618      	mov	r0, r3
 800e130:	f7fe ff90 	bl	800d054 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e138:	4b25      	ldr	r3, [pc, #148]	; (800e1d0 <xTaskIncrementTick+0x160>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d903      	bls.n	800e148 <xTaskIncrementTick+0xd8>
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e144:	4a22      	ldr	r2, [pc, #136]	; (800e1d0 <xTaskIncrementTick+0x160>)
 800e146:	6013      	str	r3, [r2, #0]
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e14c:	4613      	mov	r3, r2
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	4413      	add	r3, r2
 800e152:	009b      	lsls	r3, r3, #2
 800e154:	4a1f      	ldr	r2, [pc, #124]	; (800e1d4 <xTaskIncrementTick+0x164>)
 800e156:	441a      	add	r2, r3
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	3304      	adds	r3, #4
 800e15c:	4619      	mov	r1, r3
 800e15e:	4610      	mov	r0, r2
 800e160:	f7fe ff1b 	bl	800cf9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e168:	4b1b      	ldr	r3, [pc, #108]	; (800e1d8 <xTaskIncrementTick+0x168>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16e:	429a      	cmp	r2, r3
 800e170:	d3b8      	bcc.n	800e0e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e172:	2301      	movs	r3, #1
 800e174:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e176:	e7b5      	b.n	800e0e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e178:	4b17      	ldr	r3, [pc, #92]	; (800e1d8 <xTaskIncrementTick+0x168>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e17e:	4915      	ldr	r1, [pc, #84]	; (800e1d4 <xTaskIncrementTick+0x164>)
 800e180:	4613      	mov	r3, r2
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	4413      	add	r3, r2
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	440b      	add	r3, r1
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d901      	bls.n	800e194 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e190:	2301      	movs	r3, #1
 800e192:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e194:	4b11      	ldr	r3, [pc, #68]	; (800e1dc <xTaskIncrementTick+0x16c>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d007      	beq.n	800e1ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e19c:	2301      	movs	r3, #1
 800e19e:	617b      	str	r3, [r7, #20]
 800e1a0:	e004      	b.n	800e1ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e1a2:	4b0f      	ldr	r3, [pc, #60]	; (800e1e0 <xTaskIncrementTick+0x170>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	4a0d      	ldr	r2, [pc, #52]	; (800e1e0 <xTaskIncrementTick+0x170>)
 800e1aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e1ac:	697b      	ldr	r3, [r7, #20]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3718      	adds	r7, #24
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	200012f8 	.word	0x200012f8
 800e1bc:	200012d4 	.word	0x200012d4
 800e1c0:	20001288 	.word	0x20001288
 800e1c4:	2000128c 	.word	0x2000128c
 800e1c8:	200012e8 	.word	0x200012e8
 800e1cc:	200012f0 	.word	0x200012f0
 800e1d0:	200012d8 	.word	0x200012d8
 800e1d4:	20000e00 	.word	0x20000e00
 800e1d8:	20000dfc 	.word	0x20000dfc
 800e1dc:	200012e4 	.word	0x200012e4
 800e1e0:	200012e0 	.word	0x200012e0

0800e1e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1ea:	4b28      	ldr	r3, [pc, #160]	; (800e28c <vTaskSwitchContext+0xa8>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1f2:	4b27      	ldr	r3, [pc, #156]	; (800e290 <vTaskSwitchContext+0xac>)
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1f8:	e041      	b.n	800e27e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e1fa:	4b25      	ldr	r3, [pc, #148]	; (800e290 <vTaskSwitchContext+0xac>)
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e200:	4b24      	ldr	r3, [pc, #144]	; (800e294 <vTaskSwitchContext+0xb0>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	60fb      	str	r3, [r7, #12]
 800e206:	e010      	b.n	800e22a <vTaskSwitchContext+0x46>
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10a      	bne.n	800e224 <vTaskSwitchContext+0x40>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	607b      	str	r3, [r7, #4]
}
 800e220:	bf00      	nop
 800e222:	e7fe      	b.n	800e222 <vTaskSwitchContext+0x3e>
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	3b01      	subs	r3, #1
 800e228:	60fb      	str	r3, [r7, #12]
 800e22a:	491b      	ldr	r1, [pc, #108]	; (800e298 <vTaskSwitchContext+0xb4>)
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	4613      	mov	r3, r2
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	4413      	add	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	440b      	add	r3, r1
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d0e4      	beq.n	800e208 <vTaskSwitchContext+0x24>
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	4613      	mov	r3, r2
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	4413      	add	r3, r2
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	4a13      	ldr	r2, [pc, #76]	; (800e298 <vTaskSwitchContext+0xb4>)
 800e24a:	4413      	add	r3, r2
 800e24c:	60bb      	str	r3, [r7, #8]
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	685a      	ldr	r2, [r3, #4]
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	605a      	str	r2, [r3, #4]
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	685a      	ldr	r2, [r3, #4]
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	3308      	adds	r3, #8
 800e260:	429a      	cmp	r2, r3
 800e262:	d104      	bne.n	800e26e <vTaskSwitchContext+0x8a>
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	685a      	ldr	r2, [r3, #4]
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	605a      	str	r2, [r3, #4]
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	68db      	ldr	r3, [r3, #12]
 800e274:	4a09      	ldr	r2, [pc, #36]	; (800e29c <vTaskSwitchContext+0xb8>)
 800e276:	6013      	str	r3, [r2, #0]
 800e278:	4a06      	ldr	r2, [pc, #24]	; (800e294 <vTaskSwitchContext+0xb0>)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	6013      	str	r3, [r2, #0]
}
 800e27e:	bf00      	nop
 800e280:	3714      	adds	r7, #20
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	200012f8 	.word	0x200012f8
 800e290:	200012e4 	.word	0x200012e4
 800e294:	200012d8 	.word	0x200012d8
 800e298:	20000e00 	.word	0x20000e00
 800e29c:	20000dfc 	.word	0x20000dfc

0800e2a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10a      	bne.n	800e2c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b4:	f383 8811 	msr	BASEPRI, r3
 800e2b8:	f3bf 8f6f 	isb	sy
 800e2bc:	f3bf 8f4f 	dsb	sy
 800e2c0:	60fb      	str	r3, [r7, #12]
}
 800e2c2:	bf00      	nop
 800e2c4:	e7fe      	b.n	800e2c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2c6:	4b07      	ldr	r3, [pc, #28]	; (800e2e4 <vTaskPlaceOnEventList+0x44>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	3318      	adds	r3, #24
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f7fe fe87 	bl	800cfe2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2d4:	2101      	movs	r1, #1
 800e2d6:	6838      	ldr	r0, [r7, #0]
 800e2d8:	f000 fa7c 	bl	800e7d4 <prvAddCurrentTaskToDelayedList>
}
 800e2dc:	bf00      	nop
 800e2de:	3710      	adds	r7, #16
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	20000dfc 	.word	0x20000dfc

0800e2e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b086      	sub	sp, #24
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d10a      	bne.n	800e310 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fe:	f383 8811 	msr	BASEPRI, r3
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	617b      	str	r3, [r7, #20]
}
 800e30c:	bf00      	nop
 800e30e:	e7fe      	b.n	800e30e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e310:	4b0a      	ldr	r3, [pc, #40]	; (800e33c <vTaskPlaceOnEventListRestricted+0x54>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	3318      	adds	r3, #24
 800e316:	4619      	mov	r1, r3
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f7fe fe3e 	bl	800cf9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d002      	beq.n	800e32a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e324:	f04f 33ff 	mov.w	r3, #4294967295
 800e328:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e32a:	6879      	ldr	r1, [r7, #4]
 800e32c:	68b8      	ldr	r0, [r7, #8]
 800e32e:	f000 fa51 	bl	800e7d4 <prvAddCurrentTaskToDelayedList>
	}
 800e332:	bf00      	nop
 800e334:	3718      	adds	r7, #24
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	20000dfc 	.word	0x20000dfc

0800e340 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b086      	sub	sp, #24
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	68db      	ldr	r3, [r3, #12]
 800e34e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d10a      	bne.n	800e36c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35a:	f383 8811 	msr	BASEPRI, r3
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	f3bf 8f4f 	dsb	sy
 800e366:	60fb      	str	r3, [r7, #12]
}
 800e368:	bf00      	nop
 800e36a:	e7fe      	b.n	800e36a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	3318      	adds	r3, #24
 800e370:	4618      	mov	r0, r3
 800e372:	f7fe fe6f 	bl	800d054 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e376:	4b1e      	ldr	r3, [pc, #120]	; (800e3f0 <xTaskRemoveFromEventList+0xb0>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d11d      	bne.n	800e3ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	3304      	adds	r3, #4
 800e382:	4618      	mov	r0, r3
 800e384:	f7fe fe66 	bl	800d054 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e38c:	4b19      	ldr	r3, [pc, #100]	; (800e3f4 <xTaskRemoveFromEventList+0xb4>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	429a      	cmp	r2, r3
 800e392:	d903      	bls.n	800e39c <xTaskRemoveFromEventList+0x5c>
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e398:	4a16      	ldr	r2, [pc, #88]	; (800e3f4 <xTaskRemoveFromEventList+0xb4>)
 800e39a:	6013      	str	r3, [r2, #0]
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3a0:	4613      	mov	r3, r2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	4413      	add	r3, r2
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	4a13      	ldr	r2, [pc, #76]	; (800e3f8 <xTaskRemoveFromEventList+0xb8>)
 800e3aa:	441a      	add	r2, r3
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	f7fe fdf1 	bl	800cf9a <vListInsertEnd>
 800e3b8:	e005      	b.n	800e3c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	3318      	adds	r3, #24
 800e3be:	4619      	mov	r1, r3
 800e3c0:	480e      	ldr	r0, [pc, #56]	; (800e3fc <xTaskRemoveFromEventList+0xbc>)
 800e3c2:	f7fe fdea 	bl	800cf9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ca:	4b0d      	ldr	r3, [pc, #52]	; (800e400 <xTaskRemoveFromEventList+0xc0>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d905      	bls.n	800e3e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e3d8:	4b0a      	ldr	r3, [pc, #40]	; (800e404 <xTaskRemoveFromEventList+0xc4>)
 800e3da:	2201      	movs	r2, #1
 800e3dc:	601a      	str	r2, [r3, #0]
 800e3de:	e001      	b.n	800e3e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e3e4:	697b      	ldr	r3, [r7, #20]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3718      	adds	r7, #24
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	200012f8 	.word	0x200012f8
 800e3f4:	200012d8 	.word	0x200012d8
 800e3f8:	20000e00 	.word	0x20000e00
 800e3fc:	20001290 	.word	0x20001290
 800e400:	20000dfc 	.word	0x20000dfc
 800e404:	200012e4 	.word	0x200012e4

0800e408 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e408:	b480      	push	{r7}
 800e40a:	b083      	sub	sp, #12
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e410:	4b06      	ldr	r3, [pc, #24]	; (800e42c <vTaskInternalSetTimeOutState+0x24>)
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e418:	4b05      	ldr	r3, [pc, #20]	; (800e430 <vTaskInternalSetTimeOutState+0x28>)
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	605a      	str	r2, [r3, #4]
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	200012e8 	.word	0x200012e8
 800e430:	200012d4 	.word	0x200012d4

0800e434 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b088      	sub	sp, #32
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d10a      	bne.n	800e45a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	613b      	str	r3, [r7, #16]
}
 800e456:	bf00      	nop
 800e458:	e7fe      	b.n	800e458 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10a      	bne.n	800e476 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e464:	f383 8811 	msr	BASEPRI, r3
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	60fb      	str	r3, [r7, #12]
}
 800e472:	bf00      	nop
 800e474:	e7fe      	b.n	800e474 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e476:	f000 fe7d 	bl	800f174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e47a:	4b1d      	ldr	r3, [pc, #116]	; (800e4f0 <xTaskCheckForTimeOut+0xbc>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	69ba      	ldr	r2, [r7, #24]
 800e486:	1ad3      	subs	r3, r2, r3
 800e488:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e492:	d102      	bne.n	800e49a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e494:	2300      	movs	r3, #0
 800e496:	61fb      	str	r3, [r7, #28]
 800e498:	e023      	b.n	800e4e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	4b15      	ldr	r3, [pc, #84]	; (800e4f4 <xTaskCheckForTimeOut+0xc0>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d007      	beq.n	800e4b6 <xTaskCheckForTimeOut+0x82>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	69ba      	ldr	r2, [r7, #24]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d302      	bcc.n	800e4b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	61fb      	str	r3, [r7, #28]
 800e4b4:	e015      	b.n	800e4e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	697a      	ldr	r2, [r7, #20]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d20b      	bcs.n	800e4d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	1ad2      	subs	r2, r2, r3
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7ff ff9b 	bl	800e408 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	61fb      	str	r3, [r7, #28]
 800e4d6:	e004      	b.n	800e4e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e4de:	2301      	movs	r3, #1
 800e4e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e4e2:	f000 fe77 	bl	800f1d4 <vPortExitCritical>

	return xReturn;
 800e4e6:	69fb      	ldr	r3, [r7, #28]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3720      	adds	r7, #32
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	200012d4 	.word	0x200012d4
 800e4f4:	200012e8 	.word	0x200012e8

0800e4f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e4fc:	4b03      	ldr	r3, [pc, #12]	; (800e50c <vTaskMissedYield+0x14>)
 800e4fe:	2201      	movs	r2, #1
 800e500:	601a      	str	r2, [r3, #0]
}
 800e502:	bf00      	nop
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr
 800e50c:	200012e4 	.word	0x200012e4

0800e510 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e518:	f000 f852 	bl	800e5c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e51c:	4b06      	ldr	r3, [pc, #24]	; (800e538 <prvIdleTask+0x28>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d9f9      	bls.n	800e518 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e524:	4b05      	ldr	r3, [pc, #20]	; (800e53c <prvIdleTask+0x2c>)
 800e526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e52a:	601a      	str	r2, [r3, #0]
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e534:	e7f0      	b.n	800e518 <prvIdleTask+0x8>
 800e536:	bf00      	nop
 800e538:	20000e00 	.word	0x20000e00
 800e53c:	e000ed04 	.word	0xe000ed04

0800e540 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b082      	sub	sp, #8
 800e544:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e546:	2300      	movs	r3, #0
 800e548:	607b      	str	r3, [r7, #4]
 800e54a:	e00c      	b.n	800e566 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	4613      	mov	r3, r2
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	4413      	add	r3, r2
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	4a12      	ldr	r2, [pc, #72]	; (800e5a0 <prvInitialiseTaskLists+0x60>)
 800e558:	4413      	add	r3, r2
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fe fcf0 	bl	800cf40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	3301      	adds	r3, #1
 800e564:	607b      	str	r3, [r7, #4]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2b37      	cmp	r3, #55	; 0x37
 800e56a:	d9ef      	bls.n	800e54c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e56c:	480d      	ldr	r0, [pc, #52]	; (800e5a4 <prvInitialiseTaskLists+0x64>)
 800e56e:	f7fe fce7 	bl	800cf40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e572:	480d      	ldr	r0, [pc, #52]	; (800e5a8 <prvInitialiseTaskLists+0x68>)
 800e574:	f7fe fce4 	bl	800cf40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e578:	480c      	ldr	r0, [pc, #48]	; (800e5ac <prvInitialiseTaskLists+0x6c>)
 800e57a:	f7fe fce1 	bl	800cf40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e57e:	480c      	ldr	r0, [pc, #48]	; (800e5b0 <prvInitialiseTaskLists+0x70>)
 800e580:	f7fe fcde 	bl	800cf40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e584:	480b      	ldr	r0, [pc, #44]	; (800e5b4 <prvInitialiseTaskLists+0x74>)
 800e586:	f7fe fcdb 	bl	800cf40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e58a:	4b0b      	ldr	r3, [pc, #44]	; (800e5b8 <prvInitialiseTaskLists+0x78>)
 800e58c:	4a05      	ldr	r2, [pc, #20]	; (800e5a4 <prvInitialiseTaskLists+0x64>)
 800e58e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e590:	4b0a      	ldr	r3, [pc, #40]	; (800e5bc <prvInitialiseTaskLists+0x7c>)
 800e592:	4a05      	ldr	r2, [pc, #20]	; (800e5a8 <prvInitialiseTaskLists+0x68>)
 800e594:	601a      	str	r2, [r3, #0]
}
 800e596:	bf00      	nop
 800e598:	3708      	adds	r7, #8
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	20000e00 	.word	0x20000e00
 800e5a4:	20001260 	.word	0x20001260
 800e5a8:	20001274 	.word	0x20001274
 800e5ac:	20001290 	.word	0x20001290
 800e5b0:	200012a4 	.word	0x200012a4
 800e5b4:	200012bc 	.word	0x200012bc
 800e5b8:	20001288 	.word	0x20001288
 800e5bc:	2000128c 	.word	0x2000128c

0800e5c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5c6:	e019      	b.n	800e5fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e5c8:	f000 fdd4 	bl	800f174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5cc:	4b10      	ldr	r3, [pc, #64]	; (800e610 <prvCheckTasksWaitingTermination+0x50>)
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	68db      	ldr	r3, [r3, #12]
 800e5d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	3304      	adds	r3, #4
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7fe fd3b 	bl	800d054 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e5de:	4b0d      	ldr	r3, [pc, #52]	; (800e614 <prvCheckTasksWaitingTermination+0x54>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	4a0b      	ldr	r2, [pc, #44]	; (800e614 <prvCheckTasksWaitingTermination+0x54>)
 800e5e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e5e8:	4b0b      	ldr	r3, [pc, #44]	; (800e618 <prvCheckTasksWaitingTermination+0x58>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	4a0a      	ldr	r2, [pc, #40]	; (800e618 <prvCheckTasksWaitingTermination+0x58>)
 800e5f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e5f2:	f000 fdef 	bl	800f1d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 f810 	bl	800e61c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5fc:	4b06      	ldr	r3, [pc, #24]	; (800e618 <prvCheckTasksWaitingTermination+0x58>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d1e1      	bne.n	800e5c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e604:	bf00      	nop
 800e606:	bf00      	nop
 800e608:	3708      	adds	r7, #8
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	200012a4 	.word	0x200012a4
 800e614:	200012d0 	.word	0x200012d0
 800e618:	200012b8 	.word	0x200012b8

0800e61c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d108      	bne.n	800e640 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e632:	4618      	mov	r0, r3
 800e634:	f000 ff8c 	bl	800f550 <vPortFree>
				vPortFree( pxTCB );
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f000 ff89 	bl	800f550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e63e:	e018      	b.n	800e672 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e646:	2b01      	cmp	r3, #1
 800e648:	d103      	bne.n	800e652 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 ff80 	bl	800f550 <vPortFree>
	}
 800e650:	e00f      	b.n	800e672 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e658:	2b02      	cmp	r3, #2
 800e65a:	d00a      	beq.n	800e672 <prvDeleteTCB+0x56>
	__asm volatile
 800e65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e660:	f383 8811 	msr	BASEPRI, r3
 800e664:	f3bf 8f6f 	isb	sy
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	60fb      	str	r3, [r7, #12]
}
 800e66e:	bf00      	nop
 800e670:	e7fe      	b.n	800e670 <prvDeleteTCB+0x54>
	}
 800e672:	bf00      	nop
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
	...

0800e67c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e682:	4b0c      	ldr	r3, [pc, #48]	; (800e6b4 <prvResetNextTaskUnblockTime+0x38>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d104      	bne.n	800e696 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e68c:	4b0a      	ldr	r3, [pc, #40]	; (800e6b8 <prvResetNextTaskUnblockTime+0x3c>)
 800e68e:	f04f 32ff 	mov.w	r2, #4294967295
 800e692:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e694:	e008      	b.n	800e6a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e696:	4b07      	ldr	r3, [pc, #28]	; (800e6b4 <prvResetNextTaskUnblockTime+0x38>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	4a04      	ldr	r2, [pc, #16]	; (800e6b8 <prvResetNextTaskUnblockTime+0x3c>)
 800e6a6:	6013      	str	r3, [r2, #0]
}
 800e6a8:	bf00      	nop
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr
 800e6b4:	20001288 	.word	0x20001288
 800e6b8:	200012f0 	.word	0x200012f0

0800e6bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e6c2:	4b0b      	ldr	r3, [pc, #44]	; (800e6f0 <xTaskGetSchedulerState+0x34>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d102      	bne.n	800e6d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	607b      	str	r3, [r7, #4]
 800e6ce:	e008      	b.n	800e6e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6d0:	4b08      	ldr	r3, [pc, #32]	; (800e6f4 <xTaskGetSchedulerState+0x38>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d102      	bne.n	800e6de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e6d8:	2302      	movs	r3, #2
 800e6da:	607b      	str	r3, [r7, #4]
 800e6dc:	e001      	b.n	800e6e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e6e2:	687b      	ldr	r3, [r7, #4]
	}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr
 800e6f0:	200012dc 	.word	0x200012dc
 800e6f4:	200012f8 	.word	0x200012f8

0800e6f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b086      	sub	sp, #24
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e704:	2300      	movs	r3, #0
 800e706:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d056      	beq.n	800e7bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e70e:	4b2e      	ldr	r3, [pc, #184]	; (800e7c8 <xTaskPriorityDisinherit+0xd0>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	693a      	ldr	r2, [r7, #16]
 800e714:	429a      	cmp	r2, r3
 800e716:	d00a      	beq.n	800e72e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71c:	f383 8811 	msr	BASEPRI, r3
 800e720:	f3bf 8f6f 	isb	sy
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	60fb      	str	r3, [r7, #12]
}
 800e72a:	bf00      	nop
 800e72c:	e7fe      	b.n	800e72c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10a      	bne.n	800e74c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73a:	f383 8811 	msr	BASEPRI, r3
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f3bf 8f4f 	dsb	sy
 800e746:	60bb      	str	r3, [r7, #8]
}
 800e748:	bf00      	nop
 800e74a:	e7fe      	b.n	800e74a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e750:	1e5a      	subs	r2, r3, #1
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e75e:	429a      	cmp	r2, r3
 800e760:	d02c      	beq.n	800e7bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e766:	2b00      	cmp	r3, #0
 800e768:	d128      	bne.n	800e7bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	3304      	adds	r3, #4
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fc70 	bl	800d054 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e780:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e78c:	4b0f      	ldr	r3, [pc, #60]	; (800e7cc <xTaskPriorityDisinherit+0xd4>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	429a      	cmp	r2, r3
 800e792:	d903      	bls.n	800e79c <xTaskPriorityDisinherit+0xa4>
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e798:	4a0c      	ldr	r2, [pc, #48]	; (800e7cc <xTaskPriorityDisinherit+0xd4>)
 800e79a:	6013      	str	r3, [r2, #0]
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4413      	add	r3, r2
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	4a09      	ldr	r2, [pc, #36]	; (800e7d0 <xTaskPriorityDisinherit+0xd8>)
 800e7aa:	441a      	add	r2, r3
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	f7fe fbf1 	bl	800cf9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e7bc:	697b      	ldr	r3, [r7, #20]
	}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	20000dfc 	.word	0x20000dfc
 800e7cc:	200012d8 	.word	0x200012d8
 800e7d0:	20000e00 	.word	0x20000e00

0800e7d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e7de:	4b21      	ldr	r3, [pc, #132]	; (800e864 <prvAddCurrentTaskToDelayedList+0x90>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7e4:	4b20      	ldr	r3, [pc, #128]	; (800e868 <prvAddCurrentTaskToDelayedList+0x94>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	3304      	adds	r3, #4
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fe fc32 	bl	800d054 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f6:	d10a      	bne.n	800e80e <prvAddCurrentTaskToDelayedList+0x3a>
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d007      	beq.n	800e80e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7fe:	4b1a      	ldr	r3, [pc, #104]	; (800e868 <prvAddCurrentTaskToDelayedList+0x94>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	3304      	adds	r3, #4
 800e804:	4619      	mov	r1, r3
 800e806:	4819      	ldr	r0, [pc, #100]	; (800e86c <prvAddCurrentTaskToDelayedList+0x98>)
 800e808:	f7fe fbc7 	bl	800cf9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e80c:	e026      	b.n	800e85c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	4413      	add	r3, r2
 800e814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e816:	4b14      	ldr	r3, [pc, #80]	; (800e868 <prvAddCurrentTaskToDelayedList+0x94>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	429a      	cmp	r2, r3
 800e824:	d209      	bcs.n	800e83a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e826:	4b12      	ldr	r3, [pc, #72]	; (800e870 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	4b0f      	ldr	r3, [pc, #60]	; (800e868 <prvAddCurrentTaskToDelayedList+0x94>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	3304      	adds	r3, #4
 800e830:	4619      	mov	r1, r3
 800e832:	4610      	mov	r0, r2
 800e834:	f7fe fbd5 	bl	800cfe2 <vListInsert>
}
 800e838:	e010      	b.n	800e85c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e83a:	4b0e      	ldr	r3, [pc, #56]	; (800e874 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <prvAddCurrentTaskToDelayedList+0x94>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3304      	adds	r3, #4
 800e844:	4619      	mov	r1, r3
 800e846:	4610      	mov	r0, r2
 800e848:	f7fe fbcb 	bl	800cfe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e84c:	4b0a      	ldr	r3, [pc, #40]	; (800e878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	68ba      	ldr	r2, [r7, #8]
 800e852:	429a      	cmp	r2, r3
 800e854:	d202      	bcs.n	800e85c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e856:	4a08      	ldr	r2, [pc, #32]	; (800e878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	6013      	str	r3, [r2, #0]
}
 800e85c:	bf00      	nop
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}
 800e864:	200012d4 	.word	0x200012d4
 800e868:	20000dfc 	.word	0x20000dfc
 800e86c:	200012bc 	.word	0x200012bc
 800e870:	2000128c 	.word	0x2000128c
 800e874:	20001288 	.word	0x20001288
 800e878:	200012f0 	.word	0x200012f0

0800e87c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08a      	sub	sp, #40	; 0x28
 800e880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e882:	2300      	movs	r3, #0
 800e884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e886:	f000 fb07 	bl	800ee98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e88a:	4b1c      	ldr	r3, [pc, #112]	; (800e8fc <xTimerCreateTimerTask+0x80>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d021      	beq.n	800e8d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e892:	2300      	movs	r3, #0
 800e894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e896:	2300      	movs	r3, #0
 800e898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e89a:	1d3a      	adds	r2, r7, #4
 800e89c:	f107 0108 	add.w	r1, r7, #8
 800e8a0:	f107 030c 	add.w	r3, r7, #12
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fe fb31 	bl	800cf0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e8aa:	6879      	ldr	r1, [r7, #4]
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	9202      	str	r2, [sp, #8]
 800e8b2:	9301      	str	r3, [sp, #4]
 800e8b4:	2302      	movs	r3, #2
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	460a      	mov	r2, r1
 800e8bc:	4910      	ldr	r1, [pc, #64]	; (800e900 <xTimerCreateTimerTask+0x84>)
 800e8be:	4811      	ldr	r0, [pc, #68]	; (800e904 <xTimerCreateTimerTask+0x88>)
 800e8c0:	f7ff f8de 	bl	800da80 <xTaskCreateStatic>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	4a10      	ldr	r2, [pc, #64]	; (800e908 <xTimerCreateTimerTask+0x8c>)
 800e8c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e8ca:	4b0f      	ldr	r3, [pc, #60]	; (800e908 <xTimerCreateTimerTask+0x8c>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d001      	beq.n	800e8d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d10a      	bne.n	800e8f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e0:	f383 8811 	msr	BASEPRI, r3
 800e8e4:	f3bf 8f6f 	isb	sy
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	613b      	str	r3, [r7, #16]
}
 800e8ee:	bf00      	nop
 800e8f0:	e7fe      	b.n	800e8f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e8f2:	697b      	ldr	r3, [r7, #20]
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3718      	adds	r7, #24
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	2000132c 	.word	0x2000132c
 800e900:	0800f860 	.word	0x0800f860
 800e904:	0800ea41 	.word	0x0800ea41
 800e908:	20001330 	.word	0x20001330

0800e90c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b08a      	sub	sp, #40	; 0x28
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d10a      	bne.n	800e93a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e928:	f383 8811 	msr	BASEPRI, r3
 800e92c:	f3bf 8f6f 	isb	sy
 800e930:	f3bf 8f4f 	dsb	sy
 800e934:	623b      	str	r3, [r7, #32]
}
 800e936:	bf00      	nop
 800e938:	e7fe      	b.n	800e938 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e93a:	4b1a      	ldr	r3, [pc, #104]	; (800e9a4 <xTimerGenericCommand+0x98>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d02a      	beq.n	800e998 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	2b05      	cmp	r3, #5
 800e952:	dc18      	bgt.n	800e986 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e954:	f7ff feb2 	bl	800e6bc <xTaskGetSchedulerState>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b02      	cmp	r3, #2
 800e95c:	d109      	bne.n	800e972 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e95e:	4b11      	ldr	r3, [pc, #68]	; (800e9a4 <xTimerGenericCommand+0x98>)
 800e960:	6818      	ldr	r0, [r3, #0]
 800e962:	f107 0110 	add.w	r1, r7, #16
 800e966:	2300      	movs	r3, #0
 800e968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e96a:	f7fe fca1 	bl	800d2b0 <xQueueGenericSend>
 800e96e:	6278      	str	r0, [r7, #36]	; 0x24
 800e970:	e012      	b.n	800e998 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e972:	4b0c      	ldr	r3, [pc, #48]	; (800e9a4 <xTimerGenericCommand+0x98>)
 800e974:	6818      	ldr	r0, [r3, #0]
 800e976:	f107 0110 	add.w	r1, r7, #16
 800e97a:	2300      	movs	r3, #0
 800e97c:	2200      	movs	r2, #0
 800e97e:	f7fe fc97 	bl	800d2b0 <xQueueGenericSend>
 800e982:	6278      	str	r0, [r7, #36]	; 0x24
 800e984:	e008      	b.n	800e998 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e986:	4b07      	ldr	r3, [pc, #28]	; (800e9a4 <xTimerGenericCommand+0x98>)
 800e988:	6818      	ldr	r0, [r3, #0]
 800e98a:	f107 0110 	add.w	r1, r7, #16
 800e98e:	2300      	movs	r3, #0
 800e990:	683a      	ldr	r2, [r7, #0]
 800e992:	f7fe fd8b 	bl	800d4ac <xQueueGenericSendFromISR>
 800e996:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3728      	adds	r7, #40	; 0x28
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	2000132c 	.word	0x2000132c

0800e9a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b088      	sub	sp, #32
 800e9ac:	af02      	add	r7, sp, #8
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9b2:	4b22      	ldr	r3, [pc, #136]	; (800ea3c <prvProcessExpiredTimer+0x94>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	68db      	ldr	r3, [r3, #12]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	3304      	adds	r3, #4
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7fe fb47 	bl	800d054 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9cc:	f003 0304 	and.w	r3, r3, #4
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d022      	beq.n	800ea1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	699a      	ldr	r2, [r3, #24]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	18d1      	adds	r1, r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	6978      	ldr	r0, [r7, #20]
 800e9e2:	f000 f8d1 	bl	800eb88 <prvInsertTimerInActiveList>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d01f      	beq.n	800ea2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	6978      	ldr	r0, [r7, #20]
 800e9f8:	f7ff ff88 	bl	800e90c <xTimerGenericCommand>
 800e9fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d113      	bne.n	800ea2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ea04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea08:	f383 8811 	msr	BASEPRI, r3
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	60fb      	str	r3, [r7, #12]
}
 800ea16:	bf00      	nop
 800ea18:	e7fe      	b.n	800ea18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea20:	f023 0301 	bic.w	r3, r3, #1
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	6a1b      	ldr	r3, [r3, #32]
 800ea30:	6978      	ldr	r0, [r7, #20]
 800ea32:	4798      	blx	r3
}
 800ea34:	bf00      	nop
 800ea36:	3718      	adds	r7, #24
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	20001324 	.word	0x20001324

0800ea40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea48:	f107 0308 	add.w	r3, r7, #8
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f000 f857 	bl	800eb00 <prvGetNextExpireTime>
 800ea52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	4619      	mov	r1, r3
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f000 f803 	bl	800ea64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ea5e:	f000 f8d5 	bl	800ec0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea62:	e7f1      	b.n	800ea48 <prvTimerTask+0x8>

0800ea64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ea6e:	f7ff fa43 	bl	800def8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea72:	f107 0308 	add.w	r3, r7, #8
 800ea76:	4618      	mov	r0, r3
 800ea78:	f000 f866 	bl	800eb48 <prvSampleTimeNow>
 800ea7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d130      	bne.n	800eae6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10a      	bne.n	800eaa0 <prvProcessTimerOrBlockTask+0x3c>
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d806      	bhi.n	800eaa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ea92:	f7ff fa3f 	bl	800df14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ea96:	68f9      	ldr	r1, [r7, #12]
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f7ff ff85 	bl	800e9a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ea9e:	e024      	b.n	800eaea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d008      	beq.n	800eab8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eaa6:	4b13      	ldr	r3, [pc, #76]	; (800eaf4 <prvProcessTimerOrBlockTask+0x90>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <prvProcessTimerOrBlockTask+0x50>
 800eab0:	2301      	movs	r3, #1
 800eab2:	e000      	b.n	800eab6 <prvProcessTimerOrBlockTask+0x52>
 800eab4:	2300      	movs	r3, #0
 800eab6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eab8:	4b0f      	ldr	r3, [pc, #60]	; (800eaf8 <prvProcessTimerOrBlockTask+0x94>)
 800eaba:	6818      	ldr	r0, [r3, #0]
 800eabc:	687a      	ldr	r2, [r7, #4]
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	4619      	mov	r1, r3
 800eac6:	f7fe ffa7 	bl	800da18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eaca:	f7ff fa23 	bl	800df14 <xTaskResumeAll>
 800eace:	4603      	mov	r3, r0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d10a      	bne.n	800eaea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ead4:	4b09      	ldr	r3, [pc, #36]	; (800eafc <prvProcessTimerOrBlockTask+0x98>)
 800ead6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eada:	601a      	str	r2, [r3, #0]
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	f3bf 8f6f 	isb	sy
}
 800eae4:	e001      	b.n	800eaea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eae6:	f7ff fa15 	bl	800df14 <xTaskResumeAll>
}
 800eaea:	bf00      	nop
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	20001328 	.word	0x20001328
 800eaf8:	2000132c 	.word	0x2000132c
 800eafc:	e000ed04 	.word	0xe000ed04

0800eb00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb00:	b480      	push	{r7}
 800eb02:	b085      	sub	sp, #20
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb08:	4b0e      	ldr	r3, [pc, #56]	; (800eb44 <prvGetNextExpireTime+0x44>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d101      	bne.n	800eb16 <prvGetNextExpireTime+0x16>
 800eb12:	2201      	movs	r2, #1
 800eb14:	e000      	b.n	800eb18 <prvGetNextExpireTime+0x18>
 800eb16:	2200      	movs	r2, #0
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d105      	bne.n	800eb30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb24:	4b07      	ldr	r3, [pc, #28]	; (800eb44 <prvGetNextExpireTime+0x44>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	60fb      	str	r3, [r7, #12]
 800eb2e:	e001      	b.n	800eb34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eb30:	2300      	movs	r3, #0
 800eb32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eb34:	68fb      	ldr	r3, [r7, #12]
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3714      	adds	r7, #20
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr
 800eb42:	bf00      	nop
 800eb44:	20001324 	.word	0x20001324

0800eb48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eb50:	f7ff fa7e 	bl	800e050 <xTaskGetTickCount>
 800eb54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eb56:	4b0b      	ldr	r3, [pc, #44]	; (800eb84 <prvSampleTimeNow+0x3c>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d205      	bcs.n	800eb6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eb60:	f000 f936 	bl	800edd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2201      	movs	r2, #1
 800eb68:	601a      	str	r2, [r3, #0]
 800eb6a:	e002      	b.n	800eb72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eb72:	4a04      	ldr	r2, [pc, #16]	; (800eb84 <prvSampleTimeNow+0x3c>)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eb78:	68fb      	ldr	r3, [r7, #12]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	20001334 	.word	0x20001334

0800eb88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eb96:	2300      	movs	r3, #0
 800eb98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	68ba      	ldr	r2, [r7, #8]
 800eb9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	68fa      	ldr	r2, [r7, #12]
 800eba4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d812      	bhi.n	800ebd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	1ad2      	subs	r2, r2, r3
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	699b      	ldr	r3, [r3, #24]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d302      	bcc.n	800ebc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	617b      	str	r3, [r7, #20]
 800ebc0:	e01b      	b.n	800ebfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ebc2:	4b10      	ldr	r3, [pc, #64]	; (800ec04 <prvInsertTimerInActiveList+0x7c>)
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	3304      	adds	r3, #4
 800ebca:	4619      	mov	r1, r3
 800ebcc:	4610      	mov	r0, r2
 800ebce:	f7fe fa08 	bl	800cfe2 <vListInsert>
 800ebd2:	e012      	b.n	800ebfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d206      	bcs.n	800ebea <prvInsertTimerInActiveList+0x62>
 800ebdc:	68ba      	ldr	r2, [r7, #8]
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d302      	bcc.n	800ebea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	617b      	str	r3, [r7, #20]
 800ebe8:	e007      	b.n	800ebfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ebea:	4b07      	ldr	r3, [pc, #28]	; (800ec08 <prvInsertTimerInActiveList+0x80>)
 800ebec:	681a      	ldr	r2, [r3, #0]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	3304      	adds	r3, #4
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	4610      	mov	r0, r2
 800ebf6:	f7fe f9f4 	bl	800cfe2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ebfa:	697b      	ldr	r3, [r7, #20]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3718      	adds	r7, #24
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	20001328 	.word	0x20001328
 800ec08:	20001324 	.word	0x20001324

0800ec0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b08e      	sub	sp, #56	; 0x38
 800ec10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec12:	e0ca      	b.n	800edaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	da18      	bge.n	800ec4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ec1a:	1d3b      	adds	r3, r7, #4
 800ec1c:	3304      	adds	r3, #4
 800ec1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ec20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d10a      	bne.n	800ec3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ec26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2a:	f383 8811 	msr	BASEPRI, r3
 800ec2e:	f3bf 8f6f 	isb	sy
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	61fb      	str	r3, [r7, #28]
}
 800ec38:	bf00      	nop
 800ec3a:	e7fe      	b.n	800ec3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ec3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec42:	6850      	ldr	r0, [r2, #4]
 800ec44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec46:	6892      	ldr	r2, [r2, #8]
 800ec48:	4611      	mov	r1, r2
 800ec4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	f2c0 80aa 	blt.w	800eda8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ec58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5a:	695b      	ldr	r3, [r3, #20]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d004      	beq.n	800ec6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec62:	3304      	adds	r3, #4
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7fe f9f5 	bl	800d054 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec6a:	463b      	mov	r3, r7
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7ff ff6b 	bl	800eb48 <prvSampleTimeNow>
 800ec72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2b09      	cmp	r3, #9
 800ec78:	f200 8097 	bhi.w	800edaa <prvProcessReceivedCommands+0x19e>
 800ec7c:	a201      	add	r2, pc, #4	; (adr r2, 800ec84 <prvProcessReceivedCommands+0x78>)
 800ec7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec82:	bf00      	nop
 800ec84:	0800ecad 	.word	0x0800ecad
 800ec88:	0800ecad 	.word	0x0800ecad
 800ec8c:	0800ecad 	.word	0x0800ecad
 800ec90:	0800ed21 	.word	0x0800ed21
 800ec94:	0800ed35 	.word	0x0800ed35
 800ec98:	0800ed7f 	.word	0x0800ed7f
 800ec9c:	0800ecad 	.word	0x0800ecad
 800eca0:	0800ecad 	.word	0x0800ecad
 800eca4:	0800ed21 	.word	0x0800ed21
 800eca8:	0800ed35 	.word	0x0800ed35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ecac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecb2:	f043 0301 	orr.w	r3, r3, #1
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ecbe:	68ba      	ldr	r2, [r7, #8]
 800ecc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc2:	699b      	ldr	r3, [r3, #24]
 800ecc4:	18d1      	adds	r1, r2, r3
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eccc:	f7ff ff5c 	bl	800eb88 <prvInsertTimerInActiveList>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d069      	beq.n	800edaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ecd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd8:	6a1b      	ldr	r3, [r3, #32]
 800ecda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ecde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ece4:	f003 0304 	and.w	r3, r3, #4
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d05e      	beq.n	800edaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ecec:	68ba      	ldr	r2, [r7, #8]
 800ecee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf0:	699b      	ldr	r3, [r3, #24]
 800ecf2:	441a      	add	r2, r3
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecfe:	f7ff fe05 	bl	800e90c <xTimerGenericCommand>
 800ed02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed04:	6a3b      	ldr	r3, [r7, #32]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d14f      	bne.n	800edaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ed0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0e:	f383 8811 	msr	BASEPRI, r3
 800ed12:	f3bf 8f6f 	isb	sy
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	61bb      	str	r3, [r7, #24]
}
 800ed1c:	bf00      	nop
 800ed1e:	e7fe      	b.n	800ed1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed26:	f023 0301 	bic.w	r3, r3, #1
 800ed2a:	b2da      	uxtb	r2, r3
 800ed2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ed32:	e03a      	b.n	800edaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed3a:	f043 0301 	orr.w	r3, r3, #1
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ed46:	68ba      	ldr	r2, [r7, #8]
 800ed48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ed4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4e:	699b      	ldr	r3, [r3, #24]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d10a      	bne.n	800ed6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ed54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed58:	f383 8811 	msr	BASEPRI, r3
 800ed5c:	f3bf 8f6f 	isb	sy
 800ed60:	f3bf 8f4f 	dsb	sy
 800ed64:	617b      	str	r3, [r7, #20]
}
 800ed66:	bf00      	nop
 800ed68:	e7fe      	b.n	800ed68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ed6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6c:	699a      	ldr	r2, [r3, #24]
 800ed6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed70:	18d1      	adds	r1, r2, r3
 800ed72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed78:	f7ff ff06 	bl	800eb88 <prvInsertTimerInActiveList>
					break;
 800ed7c:	e015      	b.n	800edaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ed7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed84:	f003 0302 	and.w	r3, r3, #2
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d103      	bne.n	800ed94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ed8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed8e:	f000 fbdf 	bl	800f550 <vPortFree>
 800ed92:	e00a      	b.n	800edaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed9a:	f023 0301 	bic.w	r3, r3, #1
 800ed9e:	b2da      	uxtb	r2, r3
 800eda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eda6:	e000      	b.n	800edaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eda8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edaa:	4b08      	ldr	r3, [pc, #32]	; (800edcc <prvProcessReceivedCommands+0x1c0>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	1d39      	adds	r1, r7, #4
 800edb0:	2200      	movs	r2, #0
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fe fc16 	bl	800d5e4 <xQueueReceive>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	f47f af2a 	bne.w	800ec14 <prvProcessReceivedCommands+0x8>
	}
}
 800edc0:	bf00      	nop
 800edc2:	bf00      	nop
 800edc4:	3730      	adds	r7, #48	; 0x30
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	2000132c 	.word	0x2000132c

0800edd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b088      	sub	sp, #32
 800edd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edd6:	e048      	b.n	800ee6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edd8:	4b2d      	ldr	r3, [pc, #180]	; (800ee90 <prvSwitchTimerLists+0xc0>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ede2:	4b2b      	ldr	r3, [pc, #172]	; (800ee90 <prvSwitchTimerLists+0xc0>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	3304      	adds	r3, #4
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7fe f92f 	bl	800d054 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6a1b      	ldr	r3, [r3, #32]
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee04:	f003 0304 	and.w	r3, r3, #4
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d02e      	beq.n	800ee6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	699b      	ldr	r3, [r3, #24]
 800ee10:	693a      	ldr	r2, [r7, #16]
 800ee12:	4413      	add	r3, r2
 800ee14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ee16:	68ba      	ldr	r2, [r7, #8]
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d90e      	bls.n	800ee3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee2a:	4b19      	ldr	r3, [pc, #100]	; (800ee90 <prvSwitchTimerLists+0xc0>)
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	3304      	adds	r3, #4
 800ee32:	4619      	mov	r1, r3
 800ee34:	4610      	mov	r0, r2
 800ee36:	f7fe f8d4 	bl	800cfe2 <vListInsert>
 800ee3a:	e016      	b.n	800ee6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	9300      	str	r3, [sp, #0]
 800ee40:	2300      	movs	r3, #0
 800ee42:	693a      	ldr	r2, [r7, #16]
 800ee44:	2100      	movs	r1, #0
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f7ff fd60 	bl	800e90c <xTimerGenericCommand>
 800ee4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d10a      	bne.n	800ee6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ee54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee58:	f383 8811 	msr	BASEPRI, r3
 800ee5c:	f3bf 8f6f 	isb	sy
 800ee60:	f3bf 8f4f 	dsb	sy
 800ee64:	603b      	str	r3, [r7, #0]
}
 800ee66:	bf00      	nop
 800ee68:	e7fe      	b.n	800ee68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee6a:	4b09      	ldr	r3, [pc, #36]	; (800ee90 <prvSwitchTimerLists+0xc0>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d1b1      	bne.n	800edd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ee74:	4b06      	ldr	r3, [pc, #24]	; (800ee90 <prvSwitchTimerLists+0xc0>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ee7a:	4b06      	ldr	r3, [pc, #24]	; (800ee94 <prvSwitchTimerLists+0xc4>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a04      	ldr	r2, [pc, #16]	; (800ee90 <prvSwitchTimerLists+0xc0>)
 800ee80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ee82:	4a04      	ldr	r2, [pc, #16]	; (800ee94 <prvSwitchTimerLists+0xc4>)
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	6013      	str	r3, [r2, #0]
}
 800ee88:	bf00      	nop
 800ee8a:	3718      	adds	r7, #24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	20001324 	.word	0x20001324
 800ee94:	20001328 	.word	0x20001328

0800ee98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ee9e:	f000 f969 	bl	800f174 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eea2:	4b15      	ldr	r3, [pc, #84]	; (800eef8 <prvCheckForValidListAndQueue+0x60>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d120      	bne.n	800eeec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eeaa:	4814      	ldr	r0, [pc, #80]	; (800eefc <prvCheckForValidListAndQueue+0x64>)
 800eeac:	f7fe f848 	bl	800cf40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eeb0:	4813      	ldr	r0, [pc, #76]	; (800ef00 <prvCheckForValidListAndQueue+0x68>)
 800eeb2:	f7fe f845 	bl	800cf40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eeb6:	4b13      	ldr	r3, [pc, #76]	; (800ef04 <prvCheckForValidListAndQueue+0x6c>)
 800eeb8:	4a10      	ldr	r2, [pc, #64]	; (800eefc <prvCheckForValidListAndQueue+0x64>)
 800eeba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eebc:	4b12      	ldr	r3, [pc, #72]	; (800ef08 <prvCheckForValidListAndQueue+0x70>)
 800eebe:	4a10      	ldr	r2, [pc, #64]	; (800ef00 <prvCheckForValidListAndQueue+0x68>)
 800eec0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eec2:	2300      	movs	r3, #0
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	4b11      	ldr	r3, [pc, #68]	; (800ef0c <prvCheckForValidListAndQueue+0x74>)
 800eec8:	4a11      	ldr	r2, [pc, #68]	; (800ef10 <prvCheckForValidListAndQueue+0x78>)
 800eeca:	2110      	movs	r1, #16
 800eecc:	200a      	movs	r0, #10
 800eece:	f7fe f953 	bl	800d178 <xQueueGenericCreateStatic>
 800eed2:	4603      	mov	r3, r0
 800eed4:	4a08      	ldr	r2, [pc, #32]	; (800eef8 <prvCheckForValidListAndQueue+0x60>)
 800eed6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eed8:	4b07      	ldr	r3, [pc, #28]	; (800eef8 <prvCheckForValidListAndQueue+0x60>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d005      	beq.n	800eeec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eee0:	4b05      	ldr	r3, [pc, #20]	; (800eef8 <prvCheckForValidListAndQueue+0x60>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	490b      	ldr	r1, [pc, #44]	; (800ef14 <prvCheckForValidListAndQueue+0x7c>)
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fe fd6c 	bl	800d9c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eeec:	f000 f972 	bl	800f1d4 <vPortExitCritical>
}
 800eef0:	bf00      	nop
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	2000132c 	.word	0x2000132c
 800eefc:	200012fc 	.word	0x200012fc
 800ef00:	20001310 	.word	0x20001310
 800ef04:	20001324 	.word	0x20001324
 800ef08:	20001328 	.word	0x20001328
 800ef0c:	200013d8 	.word	0x200013d8
 800ef10:	20001338 	.word	0x20001338
 800ef14:	0800f868 	.word	0x0800f868

0800ef18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b085      	sub	sp, #20
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	3b04      	subs	r3, #4
 800ef28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ef30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	3b04      	subs	r3, #4
 800ef36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	f023 0201 	bic.w	r2, r3, #1
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	3b04      	subs	r3, #4
 800ef46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ef48:	4a0c      	ldr	r2, [pc, #48]	; (800ef7c <pxPortInitialiseStack+0x64>)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	3b14      	subs	r3, #20
 800ef52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	3b04      	subs	r3, #4
 800ef5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f06f 0202 	mvn.w	r2, #2
 800ef66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	3b20      	subs	r3, #32
 800ef6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3714      	adds	r7, #20
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr
 800ef7c:	0800ef81 	.word	0x0800ef81

0800ef80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ef80:	b480      	push	{r7}
 800ef82:	b085      	sub	sp, #20
 800ef84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ef8a:	4b12      	ldr	r3, [pc, #72]	; (800efd4 <prvTaskExitError+0x54>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef92:	d00a      	beq.n	800efaa <prvTaskExitError+0x2a>
	__asm volatile
 800ef94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef98:	f383 8811 	msr	BASEPRI, r3
 800ef9c:	f3bf 8f6f 	isb	sy
 800efa0:	f3bf 8f4f 	dsb	sy
 800efa4:	60fb      	str	r3, [r7, #12]
}
 800efa6:	bf00      	nop
 800efa8:	e7fe      	b.n	800efa8 <prvTaskExitError+0x28>
	__asm volatile
 800efaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efae:	f383 8811 	msr	BASEPRI, r3
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	60bb      	str	r3, [r7, #8]
}
 800efbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800efbe:	bf00      	nop
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d0fc      	beq.n	800efc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800efc6:	bf00      	nop
 800efc8:	bf00      	nop
 800efca:	3714      	adds	r7, #20
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	20000164 	.word	0x20000164
	...

0800efe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800efe0:	4b07      	ldr	r3, [pc, #28]	; (800f000 <pxCurrentTCBConst2>)
 800efe2:	6819      	ldr	r1, [r3, #0]
 800efe4:	6808      	ldr	r0, [r1, #0]
 800efe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efea:	f380 8809 	msr	PSP, r0
 800efee:	f3bf 8f6f 	isb	sy
 800eff2:	f04f 0000 	mov.w	r0, #0
 800eff6:	f380 8811 	msr	BASEPRI, r0
 800effa:	4770      	bx	lr
 800effc:	f3af 8000 	nop.w

0800f000 <pxCurrentTCBConst2>:
 800f000:	20000dfc 	.word	0x20000dfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f004:	bf00      	nop
 800f006:	bf00      	nop

0800f008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f008:	4808      	ldr	r0, [pc, #32]	; (800f02c <prvPortStartFirstTask+0x24>)
 800f00a:	6800      	ldr	r0, [r0, #0]
 800f00c:	6800      	ldr	r0, [r0, #0]
 800f00e:	f380 8808 	msr	MSP, r0
 800f012:	f04f 0000 	mov.w	r0, #0
 800f016:	f380 8814 	msr	CONTROL, r0
 800f01a:	b662      	cpsie	i
 800f01c:	b661      	cpsie	f
 800f01e:	f3bf 8f4f 	dsb	sy
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	df00      	svc	0
 800f028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f02a:	bf00      	nop
 800f02c:	e000ed08 	.word	0xe000ed08

0800f030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b086      	sub	sp, #24
 800f034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f036:	4b46      	ldr	r3, [pc, #280]	; (800f150 <xPortStartScheduler+0x120>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a46      	ldr	r2, [pc, #280]	; (800f154 <xPortStartScheduler+0x124>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d10a      	bne.n	800f056 <xPortStartScheduler+0x26>
	__asm volatile
 800f040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f044:	f383 8811 	msr	BASEPRI, r3
 800f048:	f3bf 8f6f 	isb	sy
 800f04c:	f3bf 8f4f 	dsb	sy
 800f050:	613b      	str	r3, [r7, #16]
}
 800f052:	bf00      	nop
 800f054:	e7fe      	b.n	800f054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f056:	4b3e      	ldr	r3, [pc, #248]	; (800f150 <xPortStartScheduler+0x120>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a3f      	ldr	r2, [pc, #252]	; (800f158 <xPortStartScheduler+0x128>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d10a      	bne.n	800f076 <xPortStartScheduler+0x46>
	__asm volatile
 800f060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f064:	f383 8811 	msr	BASEPRI, r3
 800f068:	f3bf 8f6f 	isb	sy
 800f06c:	f3bf 8f4f 	dsb	sy
 800f070:	60fb      	str	r3, [r7, #12]
}
 800f072:	bf00      	nop
 800f074:	e7fe      	b.n	800f074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f076:	4b39      	ldr	r3, [pc, #228]	; (800f15c <xPortStartScheduler+0x12c>)
 800f078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	22ff      	movs	r2, #255	; 0xff
 800f086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	b2db      	uxtb	r3, r3
 800f08e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f090:	78fb      	ldrb	r3, [r7, #3]
 800f092:	b2db      	uxtb	r3, r3
 800f094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f098:	b2da      	uxtb	r2, r3
 800f09a:	4b31      	ldr	r3, [pc, #196]	; (800f160 <xPortStartScheduler+0x130>)
 800f09c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f09e:	4b31      	ldr	r3, [pc, #196]	; (800f164 <xPortStartScheduler+0x134>)
 800f0a0:	2207      	movs	r2, #7
 800f0a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0a4:	e009      	b.n	800f0ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f0a6:	4b2f      	ldr	r3, [pc, #188]	; (800f164 <xPortStartScheduler+0x134>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	3b01      	subs	r3, #1
 800f0ac:	4a2d      	ldr	r2, [pc, #180]	; (800f164 <xPortStartScheduler+0x134>)
 800f0ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f0b0:	78fb      	ldrb	r3, [r7, #3]
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0ba:	78fb      	ldrb	r3, [r7, #3]
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0c2:	2b80      	cmp	r3, #128	; 0x80
 800f0c4:	d0ef      	beq.n	800f0a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f0c6:	4b27      	ldr	r3, [pc, #156]	; (800f164 <xPortStartScheduler+0x134>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f1c3 0307 	rsb	r3, r3, #7
 800f0ce:	2b04      	cmp	r3, #4
 800f0d0:	d00a      	beq.n	800f0e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d6:	f383 8811 	msr	BASEPRI, r3
 800f0da:	f3bf 8f6f 	isb	sy
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	60bb      	str	r3, [r7, #8]
}
 800f0e4:	bf00      	nop
 800f0e6:	e7fe      	b.n	800f0e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f0e8:	4b1e      	ldr	r3, [pc, #120]	; (800f164 <xPortStartScheduler+0x134>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	021b      	lsls	r3, r3, #8
 800f0ee:	4a1d      	ldr	r2, [pc, #116]	; (800f164 <xPortStartScheduler+0x134>)
 800f0f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f0f2:	4b1c      	ldr	r3, [pc, #112]	; (800f164 <xPortStartScheduler+0x134>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f0fa:	4a1a      	ldr	r2, [pc, #104]	; (800f164 <xPortStartScheduler+0x134>)
 800f0fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	b2da      	uxtb	r2, r3
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f106:	4b18      	ldr	r3, [pc, #96]	; (800f168 <xPortStartScheduler+0x138>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4a17      	ldr	r2, [pc, #92]	; (800f168 <xPortStartScheduler+0x138>)
 800f10c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f112:	4b15      	ldr	r3, [pc, #84]	; (800f168 <xPortStartScheduler+0x138>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4a14      	ldr	r2, [pc, #80]	; (800f168 <xPortStartScheduler+0x138>)
 800f118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f11c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f11e:	f000 f8dd 	bl	800f2dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f122:	4b12      	ldr	r3, [pc, #72]	; (800f16c <xPortStartScheduler+0x13c>)
 800f124:	2200      	movs	r2, #0
 800f126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f128:	f000 f8fc 	bl	800f324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f12c:	4b10      	ldr	r3, [pc, #64]	; (800f170 <xPortStartScheduler+0x140>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	4a0f      	ldr	r2, [pc, #60]	; (800f170 <xPortStartScheduler+0x140>)
 800f132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f138:	f7ff ff66 	bl	800f008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f13c:	f7ff f852 	bl	800e1e4 <vTaskSwitchContext>
	prvTaskExitError();
 800f140:	f7ff ff1e 	bl	800ef80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f144:	2300      	movs	r3, #0
}
 800f146:	4618      	mov	r0, r3
 800f148:	3718      	adds	r7, #24
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	e000ed00 	.word	0xe000ed00
 800f154:	410fc271 	.word	0x410fc271
 800f158:	410fc270 	.word	0x410fc270
 800f15c:	e000e400 	.word	0xe000e400
 800f160:	20001428 	.word	0x20001428
 800f164:	2000142c 	.word	0x2000142c
 800f168:	e000ed20 	.word	0xe000ed20
 800f16c:	20000164 	.word	0x20000164
 800f170:	e000ef34 	.word	0xe000ef34

0800f174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
	__asm volatile
 800f17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17e:	f383 8811 	msr	BASEPRI, r3
 800f182:	f3bf 8f6f 	isb	sy
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	607b      	str	r3, [r7, #4]
}
 800f18c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f18e:	4b0f      	ldr	r3, [pc, #60]	; (800f1cc <vPortEnterCritical+0x58>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	3301      	adds	r3, #1
 800f194:	4a0d      	ldr	r2, [pc, #52]	; (800f1cc <vPortEnterCritical+0x58>)
 800f196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f198:	4b0c      	ldr	r3, [pc, #48]	; (800f1cc <vPortEnterCritical+0x58>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d10f      	bne.n	800f1c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f1a0:	4b0b      	ldr	r3, [pc, #44]	; (800f1d0 <vPortEnterCritical+0x5c>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00a      	beq.n	800f1c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ae:	f383 8811 	msr	BASEPRI, r3
 800f1b2:	f3bf 8f6f 	isb	sy
 800f1b6:	f3bf 8f4f 	dsb	sy
 800f1ba:	603b      	str	r3, [r7, #0]
}
 800f1bc:	bf00      	nop
 800f1be:	e7fe      	b.n	800f1be <vPortEnterCritical+0x4a>
	}
}
 800f1c0:	bf00      	nop
 800f1c2:	370c      	adds	r7, #12
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ca:	4770      	bx	lr
 800f1cc:	20000164 	.word	0x20000164
 800f1d0:	e000ed04 	.word	0xe000ed04

0800f1d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f1da:	4b12      	ldr	r3, [pc, #72]	; (800f224 <vPortExitCritical+0x50>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d10a      	bne.n	800f1f8 <vPortExitCritical+0x24>
	__asm volatile
 800f1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e6:	f383 8811 	msr	BASEPRI, r3
 800f1ea:	f3bf 8f6f 	isb	sy
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	607b      	str	r3, [r7, #4]
}
 800f1f4:	bf00      	nop
 800f1f6:	e7fe      	b.n	800f1f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f1f8:	4b0a      	ldr	r3, [pc, #40]	; (800f224 <vPortExitCritical+0x50>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	3b01      	subs	r3, #1
 800f1fe:	4a09      	ldr	r2, [pc, #36]	; (800f224 <vPortExitCritical+0x50>)
 800f200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f202:	4b08      	ldr	r3, [pc, #32]	; (800f224 <vPortExitCritical+0x50>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d105      	bne.n	800f216 <vPortExitCritical+0x42>
 800f20a:	2300      	movs	r3, #0
 800f20c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	f383 8811 	msr	BASEPRI, r3
}
 800f214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f216:	bf00      	nop
 800f218:	370c      	adds	r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop
 800f224:	20000164 	.word	0x20000164
	...

0800f230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f230:	f3ef 8009 	mrs	r0, PSP
 800f234:	f3bf 8f6f 	isb	sy
 800f238:	4b15      	ldr	r3, [pc, #84]	; (800f290 <pxCurrentTCBConst>)
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	f01e 0f10 	tst.w	lr, #16
 800f240:	bf08      	it	eq
 800f242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f24a:	6010      	str	r0, [r2, #0]
 800f24c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f250:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f254:	f380 8811 	msr	BASEPRI, r0
 800f258:	f3bf 8f4f 	dsb	sy
 800f25c:	f3bf 8f6f 	isb	sy
 800f260:	f7fe ffc0 	bl	800e1e4 <vTaskSwitchContext>
 800f264:	f04f 0000 	mov.w	r0, #0
 800f268:	f380 8811 	msr	BASEPRI, r0
 800f26c:	bc09      	pop	{r0, r3}
 800f26e:	6819      	ldr	r1, [r3, #0]
 800f270:	6808      	ldr	r0, [r1, #0]
 800f272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f276:	f01e 0f10 	tst.w	lr, #16
 800f27a:	bf08      	it	eq
 800f27c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f280:	f380 8809 	msr	PSP, r0
 800f284:	f3bf 8f6f 	isb	sy
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	f3af 8000 	nop.w

0800f290 <pxCurrentTCBConst>:
 800f290:	20000dfc 	.word	0x20000dfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f294:	bf00      	nop
 800f296:	bf00      	nop

0800f298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
	__asm volatile
 800f29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a2:	f383 8811 	msr	BASEPRI, r3
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	607b      	str	r3, [r7, #4]
}
 800f2b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f2b2:	f7fe fedd 	bl	800e070 <xTaskIncrementTick>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d003      	beq.n	800f2c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f2bc:	4b06      	ldr	r3, [pc, #24]	; (800f2d8 <xPortSysTickHandler+0x40>)
 800f2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2c2:	601a      	str	r2, [r3, #0]
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	f383 8811 	msr	BASEPRI, r3
}
 800f2ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f2d0:	bf00      	nop
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	e000ed04 	.word	0xe000ed04

0800f2dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f2dc:	b480      	push	{r7}
 800f2de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f2e0:	4b0b      	ldr	r3, [pc, #44]	; (800f310 <vPortSetupTimerInterrupt+0x34>)
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f2e6:	4b0b      	ldr	r3, [pc, #44]	; (800f314 <vPortSetupTimerInterrupt+0x38>)
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f2ec:	4b0a      	ldr	r3, [pc, #40]	; (800f318 <vPortSetupTimerInterrupt+0x3c>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4a0a      	ldr	r2, [pc, #40]	; (800f31c <vPortSetupTimerInterrupt+0x40>)
 800f2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2f6:	099b      	lsrs	r3, r3, #6
 800f2f8:	4a09      	ldr	r2, [pc, #36]	; (800f320 <vPortSetupTimerInterrupt+0x44>)
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f2fe:	4b04      	ldr	r3, [pc, #16]	; (800f310 <vPortSetupTimerInterrupt+0x34>)
 800f300:	2207      	movs	r2, #7
 800f302:	601a      	str	r2, [r3, #0]
}
 800f304:	bf00      	nop
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	e000e010 	.word	0xe000e010
 800f314:	e000e018 	.word	0xe000e018
 800f318:	20000154 	.word	0x20000154
 800f31c:	10624dd3 	.word	0x10624dd3
 800f320:	e000e014 	.word	0xe000e014

0800f324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f334 <vPortEnableVFP+0x10>
 800f328:	6801      	ldr	r1, [r0, #0]
 800f32a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f32e:	6001      	str	r1, [r0, #0]
 800f330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f332:	bf00      	nop
 800f334:	e000ed88 	.word	0xe000ed88

0800f338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f338:	b480      	push	{r7}
 800f33a:	b085      	sub	sp, #20
 800f33c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f33e:	f3ef 8305 	mrs	r3, IPSR
 800f342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2b0f      	cmp	r3, #15
 800f348:	d914      	bls.n	800f374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f34a:	4a17      	ldr	r2, [pc, #92]	; (800f3a8 <vPortValidateInterruptPriority+0x70>)
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	4413      	add	r3, r2
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f354:	4b15      	ldr	r3, [pc, #84]	; (800f3ac <vPortValidateInterruptPriority+0x74>)
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	7afa      	ldrb	r2, [r7, #11]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d20a      	bcs.n	800f374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f362:	f383 8811 	msr	BASEPRI, r3
 800f366:	f3bf 8f6f 	isb	sy
 800f36a:	f3bf 8f4f 	dsb	sy
 800f36e:	607b      	str	r3, [r7, #4]
}
 800f370:	bf00      	nop
 800f372:	e7fe      	b.n	800f372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f374:	4b0e      	ldr	r3, [pc, #56]	; (800f3b0 <vPortValidateInterruptPriority+0x78>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f37c:	4b0d      	ldr	r3, [pc, #52]	; (800f3b4 <vPortValidateInterruptPriority+0x7c>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	429a      	cmp	r2, r3
 800f382:	d90a      	bls.n	800f39a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f388:	f383 8811 	msr	BASEPRI, r3
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f3bf 8f4f 	dsb	sy
 800f394:	603b      	str	r3, [r7, #0]
}
 800f396:	bf00      	nop
 800f398:	e7fe      	b.n	800f398 <vPortValidateInterruptPriority+0x60>
	}
 800f39a:	bf00      	nop
 800f39c:	3714      	adds	r7, #20
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop
 800f3a8:	e000e3f0 	.word	0xe000e3f0
 800f3ac:	20001428 	.word	0x20001428
 800f3b0:	e000ed0c 	.word	0xe000ed0c
 800f3b4:	2000142c 	.word	0x2000142c

0800f3b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b08a      	sub	sp, #40	; 0x28
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f3c4:	f7fe fd98 	bl	800def8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f3c8:	4b5b      	ldr	r3, [pc, #364]	; (800f538 <pvPortMalloc+0x180>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d101      	bne.n	800f3d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f3d0:	f000 f920 	bl	800f614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f3d4:	4b59      	ldr	r3, [pc, #356]	; (800f53c <pvPortMalloc+0x184>)
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4013      	ands	r3, r2
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f040 8093 	bne.w	800f508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d01d      	beq.n	800f424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f3e8:	2208      	movs	r2, #8
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f003 0307 	and.w	r3, r3, #7
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d014      	beq.n	800f424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f023 0307 	bic.w	r3, r3, #7
 800f400:	3308      	adds	r3, #8
 800f402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f003 0307 	and.w	r3, r3, #7
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00a      	beq.n	800f424 <pvPortMalloc+0x6c>
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	617b      	str	r3, [r7, #20]
}
 800f420:	bf00      	nop
 800f422:	e7fe      	b.n	800f422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d06e      	beq.n	800f508 <pvPortMalloc+0x150>
 800f42a:	4b45      	ldr	r3, [pc, #276]	; (800f540 <pvPortMalloc+0x188>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	429a      	cmp	r2, r3
 800f432:	d869      	bhi.n	800f508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f434:	4b43      	ldr	r3, [pc, #268]	; (800f544 <pvPortMalloc+0x18c>)
 800f436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f438:	4b42      	ldr	r3, [pc, #264]	; (800f544 <pvPortMalloc+0x18c>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f43e:	e004      	b.n	800f44a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	687a      	ldr	r2, [r7, #4]
 800f450:	429a      	cmp	r2, r3
 800f452:	d903      	bls.n	800f45c <pvPortMalloc+0xa4>
 800f454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d1f1      	bne.n	800f440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f45c:	4b36      	ldr	r3, [pc, #216]	; (800f538 <pvPortMalloc+0x180>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f462:	429a      	cmp	r2, r3
 800f464:	d050      	beq.n	800f508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f466:	6a3b      	ldr	r3, [r7, #32]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	2208      	movs	r2, #8
 800f46c:	4413      	add	r3, r2
 800f46e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	6a3b      	ldr	r3, [r7, #32]
 800f476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47a:	685a      	ldr	r2, [r3, #4]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	1ad2      	subs	r2, r2, r3
 800f480:	2308      	movs	r3, #8
 800f482:	005b      	lsls	r3, r3, #1
 800f484:	429a      	cmp	r2, r3
 800f486:	d91f      	bls.n	800f4c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4413      	add	r3, r2
 800f48e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	f003 0307 	and.w	r3, r3, #7
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00a      	beq.n	800f4b0 <pvPortMalloc+0xf8>
	__asm volatile
 800f49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49e:	f383 8811 	msr	BASEPRI, r3
 800f4a2:	f3bf 8f6f 	isb	sy
 800f4a6:	f3bf 8f4f 	dsb	sy
 800f4aa:	613b      	str	r3, [r7, #16]
}
 800f4ac:	bf00      	nop
 800f4ae:	e7fe      	b.n	800f4ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	685a      	ldr	r2, [r3, #4]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	1ad2      	subs	r2, r2, r3
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f4c2:	69b8      	ldr	r0, [r7, #24]
 800f4c4:	f000 f908 	bl	800f6d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f4c8:	4b1d      	ldr	r3, [pc, #116]	; (800f540 <pvPortMalloc+0x188>)
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	1ad3      	subs	r3, r2, r3
 800f4d2:	4a1b      	ldr	r2, [pc, #108]	; (800f540 <pvPortMalloc+0x188>)
 800f4d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f4d6:	4b1a      	ldr	r3, [pc, #104]	; (800f540 <pvPortMalloc+0x188>)
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	4b1b      	ldr	r3, [pc, #108]	; (800f548 <pvPortMalloc+0x190>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d203      	bcs.n	800f4ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f4e2:	4b17      	ldr	r3, [pc, #92]	; (800f540 <pvPortMalloc+0x188>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4a18      	ldr	r2, [pc, #96]	; (800f548 <pvPortMalloc+0x190>)
 800f4e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	4b13      	ldr	r3, [pc, #76]	; (800f53c <pvPortMalloc+0x184>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	431a      	orrs	r2, r3
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f4fe:	4b13      	ldr	r3, [pc, #76]	; (800f54c <pvPortMalloc+0x194>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	3301      	adds	r3, #1
 800f504:	4a11      	ldr	r2, [pc, #68]	; (800f54c <pvPortMalloc+0x194>)
 800f506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f508:	f7fe fd04 	bl	800df14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	f003 0307 	and.w	r3, r3, #7
 800f512:	2b00      	cmp	r3, #0
 800f514:	d00a      	beq.n	800f52c <pvPortMalloc+0x174>
	__asm volatile
 800f516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51a:	f383 8811 	msr	BASEPRI, r3
 800f51e:	f3bf 8f6f 	isb	sy
 800f522:	f3bf 8f4f 	dsb	sy
 800f526:	60fb      	str	r3, [r7, #12]
}
 800f528:	bf00      	nop
 800f52a:	e7fe      	b.n	800f52a <pvPortMalloc+0x172>
	return pvReturn;
 800f52c:	69fb      	ldr	r3, [r7, #28]
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3728      	adds	r7, #40	; 0x28
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	20005038 	.word	0x20005038
 800f53c:	2000504c 	.word	0x2000504c
 800f540:	2000503c 	.word	0x2000503c
 800f544:	20005030 	.word	0x20005030
 800f548:	20005040 	.word	0x20005040
 800f54c:	20005044 	.word	0x20005044

0800f550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d04d      	beq.n	800f5fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f562:	2308      	movs	r3, #8
 800f564:	425b      	negs	r3, r3
 800f566:	697a      	ldr	r2, [r7, #20]
 800f568:	4413      	add	r3, r2
 800f56a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	685a      	ldr	r2, [r3, #4]
 800f574:	4b24      	ldr	r3, [pc, #144]	; (800f608 <vPortFree+0xb8>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4013      	ands	r3, r2
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d10a      	bne.n	800f594 <vPortFree+0x44>
	__asm volatile
 800f57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	60fb      	str	r3, [r7, #12]
}
 800f590:	bf00      	nop
 800f592:	e7fe      	b.n	800f592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00a      	beq.n	800f5b2 <vPortFree+0x62>
	__asm volatile
 800f59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a0:	f383 8811 	msr	BASEPRI, r3
 800f5a4:	f3bf 8f6f 	isb	sy
 800f5a8:	f3bf 8f4f 	dsb	sy
 800f5ac:	60bb      	str	r3, [r7, #8]
}
 800f5ae:	bf00      	nop
 800f5b0:	e7fe      	b.n	800f5b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	4b14      	ldr	r3, [pc, #80]	; (800f608 <vPortFree+0xb8>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4013      	ands	r3, r2
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d01e      	beq.n	800f5fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d11a      	bne.n	800f5fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	685a      	ldr	r2, [r3, #4]
 800f5cc:	4b0e      	ldr	r3, [pc, #56]	; (800f608 <vPortFree+0xb8>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	43db      	mvns	r3, r3
 800f5d2:	401a      	ands	r2, r3
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f5d8:	f7fe fc8e 	bl	800def8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	685a      	ldr	r2, [r3, #4]
 800f5e0:	4b0a      	ldr	r3, [pc, #40]	; (800f60c <vPortFree+0xbc>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	4a09      	ldr	r2, [pc, #36]	; (800f60c <vPortFree+0xbc>)
 800f5e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f5ea:	6938      	ldr	r0, [r7, #16]
 800f5ec:	f000 f874 	bl	800f6d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f5f0:	4b07      	ldr	r3, [pc, #28]	; (800f610 <vPortFree+0xc0>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	4a06      	ldr	r2, [pc, #24]	; (800f610 <vPortFree+0xc0>)
 800f5f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f5fa:	f7fe fc8b 	bl	800df14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f5fe:	bf00      	nop
 800f600:	3718      	adds	r7, #24
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	2000504c 	.word	0x2000504c
 800f60c:	2000503c 	.word	0x2000503c
 800f610:	20005048 	.word	0x20005048

0800f614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f614:	b480      	push	{r7}
 800f616:	b085      	sub	sp, #20
 800f618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f61a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f61e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f620:	4b27      	ldr	r3, [pc, #156]	; (800f6c0 <prvHeapInit+0xac>)
 800f622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f003 0307 	and.w	r3, r3, #7
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00c      	beq.n	800f648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	3307      	adds	r3, #7
 800f632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f023 0307 	bic.w	r3, r3, #7
 800f63a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	4a1f      	ldr	r2, [pc, #124]	; (800f6c0 <prvHeapInit+0xac>)
 800f644:	4413      	add	r3, r2
 800f646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f64c:	4a1d      	ldr	r2, [pc, #116]	; (800f6c4 <prvHeapInit+0xb0>)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f652:	4b1c      	ldr	r3, [pc, #112]	; (800f6c4 <prvHeapInit+0xb0>)
 800f654:	2200      	movs	r2, #0
 800f656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	4413      	add	r3, r2
 800f65e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f660:	2208      	movs	r2, #8
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	1a9b      	subs	r3, r3, r2
 800f666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f023 0307 	bic.w	r3, r3, #7
 800f66e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	4a15      	ldr	r2, [pc, #84]	; (800f6c8 <prvHeapInit+0xb4>)
 800f674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f676:	4b14      	ldr	r3, [pc, #80]	; (800f6c8 <prvHeapInit+0xb4>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2200      	movs	r2, #0
 800f67c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f67e:	4b12      	ldr	r3, [pc, #72]	; (800f6c8 <prvHeapInit+0xb4>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2200      	movs	r2, #0
 800f684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	68fa      	ldr	r2, [r7, #12]
 800f68e:	1ad2      	subs	r2, r2, r3
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f694:	4b0c      	ldr	r3, [pc, #48]	; (800f6c8 <prvHeapInit+0xb4>)
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	4a0a      	ldr	r2, [pc, #40]	; (800f6cc <prvHeapInit+0xb8>)
 800f6a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	4a09      	ldr	r2, [pc, #36]	; (800f6d0 <prvHeapInit+0xbc>)
 800f6aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f6ac:	4b09      	ldr	r3, [pc, #36]	; (800f6d4 <prvHeapInit+0xc0>)
 800f6ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f6b2:	601a      	str	r2, [r3, #0]
}
 800f6b4:	bf00      	nop
 800f6b6:	3714      	adds	r7, #20
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr
 800f6c0:	20001430 	.word	0x20001430
 800f6c4:	20005030 	.word	0x20005030
 800f6c8:	20005038 	.word	0x20005038
 800f6cc:	20005040 	.word	0x20005040
 800f6d0:	2000503c 	.word	0x2000503c
 800f6d4:	2000504c 	.word	0x2000504c

0800f6d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b085      	sub	sp, #20
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f6e0:	4b28      	ldr	r3, [pc, #160]	; (800f784 <prvInsertBlockIntoFreeList+0xac>)
 800f6e2:	60fb      	str	r3, [r7, #12]
 800f6e4:	e002      	b.n	800f6ec <prvInsertBlockIntoFreeList+0x14>
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d8f7      	bhi.n	800f6e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	4413      	add	r3, r2
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	429a      	cmp	r2, r3
 800f706:	d108      	bne.n	800f71a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	685a      	ldr	r2, [r3, #4]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	441a      	add	r2, r3
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	68ba      	ldr	r2, [r7, #8]
 800f724:	441a      	add	r2, r3
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d118      	bne.n	800f760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681a      	ldr	r2, [r3, #0]
 800f732:	4b15      	ldr	r3, [pc, #84]	; (800f788 <prvInsertBlockIntoFreeList+0xb0>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	429a      	cmp	r2, r3
 800f738:	d00d      	beq.n	800f756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	685a      	ldr	r2, [r3, #4]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	441a      	add	r2, r3
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	601a      	str	r2, [r3, #0]
 800f754:	e008      	b.n	800f768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f756:	4b0c      	ldr	r3, [pc, #48]	; (800f788 <prvInsertBlockIntoFreeList+0xb0>)
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	601a      	str	r2, [r3, #0]
 800f75e:	e003      	b.n	800f768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f768:	68fa      	ldr	r2, [r7, #12]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d002      	beq.n	800f776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	687a      	ldr	r2, [r7, #4]
 800f774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f776:	bf00      	nop
 800f778:	3714      	adds	r7, #20
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	20005030 	.word	0x20005030
 800f788:	20005038 	.word	0x20005038

0800f78c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
 void MX_TouchGFX_Init(void)
{
 800f78c:	b480      	push	{r7}
 800f78e:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
	  void touchgfx_init(void); // waiting for excuting to verify
}
 800f790:	bf00      	nop
 800f792:	46bd      	mov	sp, r7
 800f794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f798:	4770      	bx	lr
	...

0800f79c <__libc_init_array>:
 800f79c:	b570      	push	{r4, r5, r6, lr}
 800f79e:	4d0d      	ldr	r5, [pc, #52]	; (800f7d4 <__libc_init_array+0x38>)
 800f7a0:	4c0d      	ldr	r4, [pc, #52]	; (800f7d8 <__libc_init_array+0x3c>)
 800f7a2:	1b64      	subs	r4, r4, r5
 800f7a4:	10a4      	asrs	r4, r4, #2
 800f7a6:	2600      	movs	r6, #0
 800f7a8:	42a6      	cmp	r6, r4
 800f7aa:	d109      	bne.n	800f7c0 <__libc_init_array+0x24>
 800f7ac:	4d0b      	ldr	r5, [pc, #44]	; (800f7dc <__libc_init_array+0x40>)
 800f7ae:	4c0c      	ldr	r4, [pc, #48]	; (800f7e0 <__libc_init_array+0x44>)
 800f7b0:	f000 f82e 	bl	800f810 <_init>
 800f7b4:	1b64      	subs	r4, r4, r5
 800f7b6:	10a4      	asrs	r4, r4, #2
 800f7b8:	2600      	movs	r6, #0
 800f7ba:	42a6      	cmp	r6, r4
 800f7bc:	d105      	bne.n	800f7ca <__libc_init_array+0x2e>
 800f7be:	bd70      	pop	{r4, r5, r6, pc}
 800f7c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7c4:	4798      	blx	r3
 800f7c6:	3601      	adds	r6, #1
 800f7c8:	e7ee      	b.n	800f7a8 <__libc_init_array+0xc>
 800f7ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7ce:	4798      	blx	r3
 800f7d0:	3601      	adds	r6, #1
 800f7d2:	e7f2      	b.n	800f7ba <__libc_init_array+0x1e>
 800f7d4:	0800f964 	.word	0x0800f964
 800f7d8:	0800f964 	.word	0x0800f964
 800f7dc:	0800f964 	.word	0x0800f964
 800f7e0:	0800f968 	.word	0x0800f968

0800f7e4 <memcpy>:
 800f7e4:	440a      	add	r2, r1
 800f7e6:	4291      	cmp	r1, r2
 800f7e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7ec:	d100      	bne.n	800f7f0 <memcpy+0xc>
 800f7ee:	4770      	bx	lr
 800f7f0:	b510      	push	{r4, lr}
 800f7f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7fa:	4291      	cmp	r1, r2
 800f7fc:	d1f9      	bne.n	800f7f2 <memcpy+0xe>
 800f7fe:	bd10      	pop	{r4, pc}

0800f800 <memset>:
 800f800:	4402      	add	r2, r0
 800f802:	4603      	mov	r3, r0
 800f804:	4293      	cmp	r3, r2
 800f806:	d100      	bne.n	800f80a <memset+0xa>
 800f808:	4770      	bx	lr
 800f80a:	f803 1b01 	strb.w	r1, [r3], #1
 800f80e:	e7f9      	b.n	800f804 <memset+0x4>

0800f810 <_init>:
 800f810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f812:	bf00      	nop
 800f814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f816:	bc08      	pop	{r3}
 800f818:	469e      	mov	lr, r3
 800f81a:	4770      	bx	lr

0800f81c <_fini>:
 800f81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f81e:	bf00      	nop
 800f820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f822:	bc08      	pop	{r3}
 800f824:	469e      	mov	lr, r3
 800f826:	4770      	bx	lr
