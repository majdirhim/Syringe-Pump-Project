
openh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029638  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f00  080298d8  080298d8  000398d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000026a  0802d7d8  0802d7d8  0003d7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000000c  0802da44  0802da44  0003da44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00016e40  0802da50  0802da50  0003da50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000014  08044890  08044890  00054890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  080448a4  080448a4  000548a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  080448ac  080448ac  000548ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  080448c0  080448c0  000548c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000254  20000000  080448c8  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005830  20000254  08044b1c  00060254  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005a84  08044b1c  00065a84  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00060254  2**0
                  CONTENTS, READONLY
 14 .debug_info   000afd01  00000000  00000000  00060282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001378f  00000000  00000000  0010ff83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000044e0  00000000  00000000  00123718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003ff8  00000000  00000000  00127bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00049d5c  00000000  00000000  0012bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004eaa6  00000000  00000000  0017594c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001aacf1  00000000  00000000  001c43f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000cf  00000000  00000000  0036f0e3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00012c68  00000000  00000000  0036f1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000254 	.word	0x20000254
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080298c0 	.word	0x080298c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000258 	.word	0x20000258
 80002dc:	080298c0 	.word	0x080298c0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08e      	sub	sp, #56	; 0x38
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
 800069a:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
 80006aa:	615a      	str	r2, [r3, #20]
 80006ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80006ae:	4b37      	ldr	r3, [pc, #220]	; (800078c <MX_ADC3_Init+0x108>)
 80006b0:	4a37      	ldr	r2, [pc, #220]	; (8000790 <MX_ADC3_Init+0x10c>)
 80006b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006b4:	4b35      	ldr	r3, [pc, #212]	; (800078c <MX_ADC3_Init+0x108>)
 80006b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006ba:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <MX_ADC3_Init+0x108>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c2:	4b32      	ldr	r3, [pc, #200]	; (800078c <MX_ADC3_Init+0x108>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <MX_ADC3_Init+0x108>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <MX_ADC3_Init+0x108>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	; (800078c <MX_ADC3_Init+0x108>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <MX_ADC3_Init+0x108>)
 80006dc:	2201      	movs	r2, #1
 80006de:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006e0:	4b2a      	ldr	r3, [pc, #168]	; (800078c <MX_ADC3_Init+0x108>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <MX_ADC3_Init+0x108>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <MX_ADC3_Init+0x108>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_ADC3_Init+0x108>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <MX_ADC3_Init+0x108>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_ADC3_Init+0x108>)
 8000700:	2200      	movs	r2, #0
 8000702:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC3_Init+0x108>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800070c:	481f      	ldr	r0, [pc, #124]	; (800078c <MX_ADC3_Init+0x108>)
 800070e:	f004 fb0d 	bl	8004d2c <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8000718:	f002 ffea 	bl	80036f0 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC3_Init+0x110>)
 800071e:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000720:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC3_Init+0x114>)
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 800072a:	2301      	movs	r3, #1
 800072c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 1374;
 8000730:	f240 535e 	movw	r3, #1374	; 0x55e
 8000734:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4619      	mov	r1, r3
 8000740:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_ADC3_Init+0x108>)
 8000742:	f005 fbff 	bl	8005f44 <HAL_ADC_AnalogWDGConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 800074c:	f002 ffd0 	bl	80036f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ADC3_Init+0x114>)
 8000752:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000754:	2306      	movs	r3, #6
 8000756:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000758:	2306      	movs	r3, #6
 800075a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800075c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000760:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000762:	2304      	movs	r3, #4
 8000764:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_ADC3_Init+0x108>)
 8000774:	f005 f896 	bl	80058a4 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 800077e:	f002 ffb7 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3738      	adds	r7, #56	; 0x38
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000270 	.word	0x20000270
 8000790:	58026000 	.word	0x58026000
 8000794:	7dc00000 	.word	0x7dc00000
 8000798:	cb840000 	.word	0xcb840000

0800079c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0b2      	sub	sp, #200	; 0xc8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	22bc      	movs	r2, #188	; 0xbc
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f028 f8f1 	bl	8028994 <memset>
  if(adcHandle->Instance==ADC3)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a1f      	ldr	r2, [pc, #124]	; (8000834 <HAL_ADC_MspInit+0x98>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d137      	bne.n	800082c <HAL_ADC_MspInit+0x90>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 80007c6:	2312      	movs	r3, #18
 80007c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007d6:	23c0      	movs	r3, #192	; 0xc0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007da:	2320      	movs	r3, #32
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80007de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4618      	mov	r0, r3
 80007f0:	f008 f904 	bl	80089fc <HAL_RCCEx_PeriphCLKConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_ADC_MspInit+0x62>
    {
      Error_Handler();
 80007fa:	f002 ff79 	bl	80036f0 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 8000806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2105      	movs	r1, #5
 8000820:	207f      	movs	r0, #127	; 0x7f
 8000822:	f006 f92f 	bl	8006a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000826:	207f      	movs	r0, #127	; 0x7f
 8000828:	f006 f946 	bl	8006ab8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800082c:	bf00      	nop
 800082e:	37c8      	adds	r7, #200	; 0xc8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	58026000 	.word	0x58026000
 8000838:	58024400 	.word	0x58024400

0800083c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_CRC_Init+0x3c>)
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <MX_CRC_Init+0x40>)
 8000844:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_CRC_Init+0x3c>)
 8000848:	2200      	movs	r2, #0
 800084a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_CRC_Init+0x3c>)
 800084e:	2200      	movs	r2, #0
 8000850:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_CRC_Init+0x3c>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_CRC_Init+0x3c>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_CRC_Init+0x3c>)
 8000860:	2201      	movs	r2, #1
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_CRC_Init+0x3c>)
 8000866:	f006 f935 	bl	8006ad4 <HAL_CRC_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000870:	f002 ff3e 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200002d4 	.word	0x200002d4
 800087c:	58024c00 	.word	0x58024c00

08000880 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <HAL_CRC_MspInit+0x3c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d10e      	bne.n	80008b0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_CRC_MspInit+0x40>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <HAL_CRC_MspInit+0x40>)
 800089a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <HAL_CRC_MspInit+0x40>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	58024c00 	.word	0x58024c00
 80008c0:	58024400 	.word	0x58024400

080008c4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008ca:	4a1a      	ldr	r2, [pc, #104]	; (8000934 <MX_DMA2D_Init+0x70>)
 80008cc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_DMA2D_Init+0x6c>)
 8000900:	2200      	movs	r2, #0
 8000902:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_DMA2D_Init+0x6c>)
 8000906:	2200      	movs	r2, #0
 8000908:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <MX_DMA2D_Init+0x6c>)
 800090c:	f006 f9cc 	bl	8006ca8 <HAL_DMA2D_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000916:	f002 feeb 	bl	80036f0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800091a:	2101      	movs	r1, #1
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_DMA2D_Init+0x6c>)
 800091e:	f006 fa27 	bl	8006d70 <HAL_DMA2D_ConfigLayer>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000928:	f002 fee2 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200002f8 	.word	0x200002f8
 8000934:	52001000 	.word	0x52001000

08000938 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <HAL_DMA2D_MspInit+0x3c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10e      	bne.n	8000968 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_DMA2D_MspInit+0x40>)
 800094c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000950:	4a09      	ldr	r2, [pc, #36]	; (8000978 <HAL_DMA2D_MspInit+0x40>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <HAL_DMA2D_MspInit+0x40>)
 800095c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	52001000 	.word	0x52001000
 8000978:	58024400 	.word	0x58024400

0800097c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <MX_FREERTOS_Init+0x58>)
 8000982:	2100      	movs	r1, #0
 8000984:	4814      	ldr	r0, [pc, #80]	; (80009d8 <MX_FREERTOS_Init+0x5c>)
 8000986:	f00d fa5d 	bl	800de44 <osThreadNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_FREERTOS_Init+0x60>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of Stepper */
  StepperHandle = osThreadNew(Stepper_motor, NULL, &Stepper_attributes);
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <MX_FREERTOS_Init+0x64>)
 8000992:	2100      	movs	r1, #0
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_FREERTOS_Init+0x68>)
 8000996:	f00d fa55 	bl	800de44 <osThreadNew>
 800099a:	4603      	mov	r3, r0
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_FREERTOS_Init+0x6c>)
 800099e:	6013      	str	r3, [r2, #0]

  /* creation of Connectivity */
  ConnectivityHandle = osThreadNew(Cloud_Connectivity, NULL, &Connectivity_attributes);
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_FREERTOS_Init+0x70>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_FREERTOS_Init+0x74>)
 80009a6:	f00d fa4d 	bl	800de44 <osThreadNew>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <MX_FREERTOS_Init+0x78>)
 80009ae:	6013      	str	r3, [r2, #0]

  /* creation of Sensors */
  SensorsHandle = osThreadNew(Sensors_measurements, NULL, &Sensors_attributes);
 80009b0:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <MX_FREERTOS_Init+0x7c>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_FREERTOS_Init+0x80>)
 80009b6:	f00d fa45 	bl	800de44 <osThreadNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <MX_FREERTOS_Init+0x84>)
 80009be:	6013      	str	r3, [r2, #0]

  /* creation of IHM */
  IHMHandle = osThreadNew(Interface, NULL, &IHM_attributes);
 80009c0:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <MX_FREERTOS_Init+0x88>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4810      	ldr	r0, [pc, #64]	; (8000a08 <MX_FREERTOS_Init+0x8c>)
 80009c6:	f00d fa3d 	bl	800de44 <osThreadNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_FREERTOS_Init+0x90>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	0802a3e4 	.word	0x0802a3e4
 80009d8:	08000a11 	.word	0x08000a11
 80009dc:	20000364 	.word	0x20000364
 80009e0:	0802a408 	.word	0x0802a408
 80009e4:	08000a21 	.word	0x08000a21
 80009e8:	20000368 	.word	0x20000368
 80009ec:	0802a42c 	.word	0x0802a42c
 80009f0:	08000a79 	.word	0x08000a79
 80009f4:	2000036c 	.word	0x2000036c
 80009f8:	0802a450 	.word	0x0802a450
 80009fc:	08000a89 	.word	0x08000a89
 8000a00:	20000370 	.word	0x20000370
 8000a04:	0802a474 	.word	0x0802a474
 8000a08:	08000af9 	.word	0x08000af9
 8000a0c:	20000374 	.word	0x20000374

08000a10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f00d faa5 	bl	800df68 <osDelay>
 8000a1e:	e7fb      	b.n	8000a18 <StartDefaultTask+0x8>

08000a20 <Stepper_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Stepper_motor */
void Stepper_motor(void *argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_motor */
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8000a28:	4812      	ldr	r0, [pc, #72]	; (8000a74 <Stepper_motor+0x54>)
 8000a2a:	f002 fe7f 	bl	800372c <BSP_MotorControl_AttachFlagInterrupt>
  /* Infinite loop */
  for(;;)
  {
	L6474_SetMaxSpeed(0, 100);
 8000a2e:	2164      	movs	r1, #100	; 0x64
 8000a30:	2000      	movs	r0, #0
 8000a32:	f001 fa63 	bl	8001efc <L6474_SetMaxSpeed>
	L6474_SetMinSpeed(0, 100);
 8000a36:	2164      	movs	r1, #100	; 0x64
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 faab 	bl	8001f94 <L6474_SetMinSpeed>
	L6474_Move(0, BACKWARD, 16000);
 8000a3e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000a42:	2100      	movs	r1, #0
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 ff3b 	bl	80018c0 <L6474_Move>
	L6474_WaitWhileActive(0);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f001 fb30 	bl	80020b0 <L6474_WaitWhileActive>
	osDelay(1000);
 8000a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a54:	f00d fa88 	bl	800df68 <osDelay>
	L6474_Move(0, FORWARD, 16000);
 8000a58:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 ff2e 	bl	80018c0 <L6474_Move>
	L6474_WaitWhileActive(0);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f001 fb23 	bl	80020b0 <L6474_WaitWhileActive>
	osDelay(1000);
 8000a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6e:	f00d fa7b 	bl	800df68 <osDelay>
	L6474_SetMaxSpeed(0, 100);
 8000a72:	e7dc      	b.n	8000a2e <Stepper_motor+0xe>
 8000a74:	080036a1 	.word	0x080036a1

08000a78 <Cloud_Connectivity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Cloud_Connectivity */
void Cloud_Connectivity(void *argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Cloud_Connectivity */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f00d fa71 	bl	800df68 <osDelay>
 8000a86:	e7fb      	b.n	8000a80 <Cloud_Connectivity+0x8>

08000a88 <Sensors_measurements>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensors_measurements */
void Sensors_measurements(void *argument)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensors_measurements */
	uint16_t readValue;
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc3); // temp
 8000a90:	4817      	ldr	r0, [pc, #92]	; (8000af0 <Sensors_measurements+0x68>)
 8000a92:	f004 faed 	bl	8005070 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, 10000);
 8000a96:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a9a:	4815      	ldr	r0, [pc, #84]	; (8000af0 <Sensors_measurements+0x68>)
 8000a9c:	f004 fbb2 	bl	8005204 <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc3);
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <Sensors_measurements+0x68>)
 8000aa2:	f004 fca3 	bl	80053ec <HAL_ADC_GetValue>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	81fb      	strh	r3, [r7, #14]
	  tCelsius = 357.558 - 0.187364 * readValue;
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ab4:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000ae0 <Sensors_measurements+0x58>
 8000ab8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000abc:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000ae8 <Sensors_measurements+0x60>
 8000ac0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ac4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ac8:	ee17 2a90 	vmov	r2, s15
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <Sensors_measurements+0x6c>)
 8000ace:	601a      	str	r2, [r3, #0]
	  osDelay(1000);
 8000ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad4:	f00d fa48 	bl	800df68 <osDelay>
	  HAL_ADC_Start(&hadc3); // temp
 8000ad8:	e7da      	b.n	8000a90 <Sensors_measurements+0x8>
 8000ada:	bf00      	nop
 8000adc:	f3af 8000 	nop.w
 8000ae0:	26394fad 	.word	0x26394fad
 8000ae4:	3fc7fb8b 	.word	0x3fc7fb8b
 8000ae8:	916872b0 	.word	0x916872b0
 8000aec:	407658ed 	.word	0x407658ed
 8000af0:	20000270 	.word	0x20000270
 8000af4:	20000360 	.word	0x20000360

08000af8 <Interface>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Interface */
void Interface(void *argument)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Interface */
  /* Infinite loop */
  for(;;)
 8000b00:	e7fe      	b.n	8000b00 <Interface+0x8>
	...

08000b04 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	4b5f      	ldr	r3, [pc, #380]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	4a5d      	ldr	r2, [pc, #372]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2a:	4b5b      	ldr	r3, [pc, #364]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	623b      	str	r3, [r7, #32]
 8000b36:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b38:	4b57      	ldr	r3, [pc, #348]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	4a56      	ldr	r2, [pc, #344]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b48:	4b53      	ldr	r3, [pc, #332]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b56:	4b50      	ldr	r3, [pc, #320]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	4a4e      	ldr	r2, [pc, #312]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b5e:	f043 0320 	orr.w	r3, r3, #32
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b4c      	ldr	r3, [pc, #304]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0320 	and.w	r3, r3, #32
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b74:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	4a47      	ldr	r2, [pc, #284]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b84:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a3f      	ldr	r2, [pc, #252]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b3d      	ldr	r3, [pc, #244]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a38      	ldr	r2, [pc, #224]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a30      	ldr	r2, [pc, #192]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a29      	ldr	r2, [pc, #164]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, STBY_RST_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000c2e:	481b      	ldr	r0, [pc, #108]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000c30:	f006 fafc 	bl	800722c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	21c0      	movs	r1, #192	; 0xc0
 8000c38:	4819      	ldr	r0, [pc, #100]	; (8000ca0 <MX_GPIO_Init+0x19c>)
 8000c3a:	f006 faf7 	bl	800722c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = STBY_RST_Pin|DIR1_Pin;
 8000c3e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4811      	ldr	r0, [pc, #68]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000c58:	f006 f938 	bl	8006ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLAG_Pin;
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FLAG_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_GPIO_Init+0x1a0>)
 8000c70:	f006 f92c 	bl	8006ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000c74:	23c0      	movs	r3, #192	; 0xc0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_GPIO_Init+0x19c>)
 8000c8c:	f006 f91e 	bl	8006ecc <HAL_GPIO_Init>

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58022000 	.word	0x58022000
 8000ca0:	58020400 	.word	0x58020400
 8000ca4:	58021c00 	.word	0x58021c00

08000ca8 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <MX_I2C1_SMBUS_Init+0x80>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10C0ECFF;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <MX_I2C1_SMBUS_Init+0x84>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000084C4;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cf6:	f248 42c4 	movw	r2, #33988	; 0x84c4
 8000cfa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cfe:	f00a f809 	bl	800ad14 <HAL_SMBUS_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000d08:	f002 fcf2 	bl	80036f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_SMBUS_ConfigDigitalFilter(&hsmbus1, 0) != HAL_OK)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000d10:	f00a f8b8 	bl	800ae84 <HAL_SMBUS_ConfigDigitalFilter>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C1_SMBUS_Init+0x76>
  {
    Error_Handler();
 8000d1a:	f002 fce9 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000378 	.word	0x20000378
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	10c0ecff 	.word	0x10c0ecff

08000d30 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0b8      	sub	sp, #224	; 0xe0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	22bc      	movs	r2, #188	; 0xbc
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f027 fe1f 	bl	8028994 <memset>
  if(smbusHandle->Instance==I2C1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a25      	ldr	r2, [pc, #148]	; (8000df0 <HAL_SMBUS_MspInit+0xc0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d142      	bne.n	8000de6 <HAL_SMBUS_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d60:	2308      	movs	r3, #8
 8000d62:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f007 fe44 	bl	80089fc <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 8000d7a:	f002 fcb9 	bl	80036f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da4:	2312      	movs	r3, #18
 8000da6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db6:	2304      	movs	r3, #4
 8000db8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <HAL_SMBUS_MspInit+0xc8>)
 8000dc4:	f006 f882 	bl	8006ecc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000de6:	bf00      	nop
 8000de8:	37e0      	adds	r7, #224	; 0xe0
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40005400 	.word	0x40005400
 8000df4:	58024400 	.word	0x58024400
 8000df8:	58020400 	.word	0x58020400

08000dfc <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <L6474_AttachErrorHandler+0x1c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200003cc 	.word	0x200003cc

08000e1c <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <L6474_AttachFlagInterrupt+0x1c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200003c8 	.word	0x200003c8

08000e3c <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	21a8      	movs	r1, #168	; 0xa8
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fa8c 	bl	8002368 <L6474_SendCommand>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	21b8      	movs	r1, #184	; 0xb8
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fa7e 	bl	8002368 <L6474_SendCommand>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000e84:	4b70      	ldr	r3, [pc, #448]	; (8001048 <L6474_CmdGetParam+0x1d4>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	3b01      	subs	r3, #1
 8000e92:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000e94:	2300      	movs	r3, #0
 8000e96:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000e98:	4b6c      	ldr	r3, [pc, #432]	; (800104c <L6474_CmdGetParam+0x1d8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000e9e:	7cbb      	ldrb	r3, [r7, #18]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <L6474_CmdGetParam+0x34>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      //L6474_Board_EnableIrq();
      //__enable_irq();
      itDisable = FALSE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e02b      	b.n	8000f06 <L6474_CmdGetParam+0x92>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000eae:	4a68      	ldr	r2, [pc, #416]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8000eb8:	4a65      	ldr	r2, [pc, #404]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3303      	adds	r3, #3
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8000ec4:	4a62      	ldr	r2, [pc, #392]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	4413      	add	r3, r2
 8000eca:	3306      	adds	r3, #6
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8000ed0:	4a5f      	ldr	r2, [pc, #380]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3309      	adds	r3, #9
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 8000edc:	4a5d      	ldr	r2, [pc, #372]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3303      	adds	r3, #3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 8000ee8:	4a5a      	ldr	r2, [pc, #360]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	4413      	add	r3, r2
 8000eee:	3306      	adds	r3, #6
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 8000ef4:	4a57      	ldr	r2, [pc, #348]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	3309      	adds	r3, #9
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	4b50      	ldr	r3, [pc, #320]	; (8001048 <L6474_CmdGetParam+0x1d4>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d3cc      	bcc.n	8000eae <L6474_CmdGetParam+0x3a>
    }
    switch (param)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	2b18      	cmp	r3, #24
 8000f1a:	d84d      	bhi.n	8000fb8 <L6474_CmdGetParam+0x144>
 8000f1c:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <L6474_CmdGetParam+0xb0>)
 8000f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f22:	bf00      	nop
 8000f24:	08000f89 	.word	0x08000f89
 8000f28:	08000f9f 	.word	0x08000f9f
 8000f2c:	08000f89 	.word	0x08000f89
 8000f30:	08000fb9 	.word	0x08000fb9
 8000f34:	08000fb9 	.word	0x08000fb9
 8000f38:	08000fb9 	.word	0x08000fb9
 8000f3c:	08000fb9 	.word	0x08000fb9
 8000f40:	08000fb9 	.word	0x08000fb9
 8000f44:	08000fb9 	.word	0x08000fb9
 8000f48:	08000fb9 	.word	0x08000fb9
 8000f4c:	08000fb9 	.word	0x08000fb9
 8000f50:	08000fb9 	.word	0x08000fb9
 8000f54:	08000fb9 	.word	0x08000fb9
 8000f58:	08000fb9 	.word	0x08000fb9
 8000f5c:	08000fb9 	.word	0x08000fb9
 8000f60:	08000fb9 	.word	0x08000fb9
 8000f64:	08000fb9 	.word	0x08000fb9
 8000f68:	08000fb9 	.word	0x08000fb9
 8000f6c:	08000fb9 	.word	0x08000fb9
 8000f70:	08000fb9 	.word	0x08000fb9
 8000f74:	08000fb9 	.word	0x08000fb9
 8000f78:	08000fb9 	.word	0x08000fb9
 8000f7c:	08000fb9 	.word	0x08000fb9
 8000f80:	08000f9f 	.word	0x08000f9f
 8000f84:	08000f9f 	.word	0x08000f9f
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	7c7b      	ldrb	r3, [r7, #17]
 8000f8e:	f042 0220 	orr.w	r2, r2, #32
 8000f92:	b2d1      	uxtb	r1, r2
 8000f94:	4a2e      	ldr	r2, [pc, #184]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000f96:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	74fb      	strb	r3, [r7, #19]
        break;
 8000f9c:	e018      	b.n	8000fd0 <L6474_CmdGetParam+0x15c>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	f042 0220 	orr.w	r2, r2, #32
 8000fa8:	b2d1      	uxtb	r1, r2
 8000faa:	4a29      	ldr	r2, [pc, #164]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000fac:	4413      	add	r3, r2
 8000fae:	460a      	mov	r2, r1
 8000fb0:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	74fb      	strb	r3, [r7, #19]
        break;
 8000fb6:	e00b      	b.n	8000fd0 <L6474_CmdGetParam+0x15c>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	7c7b      	ldrb	r3, [r7, #17]
 8000fbe:	f042 0220 	orr.w	r2, r2, #32
 8000fc2:	b2d1      	uxtb	r1, r2
 8000fc4:	4a22      	ldr	r2, [pc, #136]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000fc6:	4413      	add	r3, r2
 8000fc8:	460a      	mov	r2, r1
 8000fca:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8000fd0:	f003 f8c1 	bl	8004156 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <L6474_CmdGetParam+0x1d8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f47f af5a 	bne.w	8000e98 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000fe4:	7cfb      	ldrb	r3, [r7, #19]
 8000fe6:	f1c3 0303 	rsb	r3, r3, #3
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e011      	b.n	8001012 <L6474_CmdGetParam+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000ff8:	1898      	adds	r0, r3, r2
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8001004:	4413      	add	r3, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f002 f850 	bl	80030ac <L6474_WriteBytes>
       i++)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d9ea      	bls.n	8000fee <L6474_CmdGetParam+0x17a>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001018:	7c7b      	ldrb	r3, [r7, #17]
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 800101c:	4413      	add	r3, r2
 800101e:	78db      	ldrb	r3, [r3, #3]
 8001020:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 8001022:	7c7a      	ldrb	r2, [r7, #17]
 8001024:	490b      	ldr	r1, [pc, #44]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8001026:	440a      	add	r2, r1
 8001028:	7992      	ldrb	r2, [r2, #6]
 800102a:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800102c:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 800102e:	7c7a      	ldrb	r2, [r7, #17]
 8001030:	4908      	ldr	r1, [pc, #32]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8001032:	440a      	add	r2, r1
 8001034:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001036:	4313      	orrs	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800103a:	f003 f895 	bl	8004168 <L6474_Board_EnableIrq>
    
  return (spiRxData);
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200003d0 	.word	0x200003d0
 800104c:	200003ec 	.word	0x200003ec
 8001050:	200003d4 	.word	0x200003d4
 8001054:	200003e0 	.word	0x200003e0

08001058 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <L6474_CmdGetStatus+0xfc>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3b01      	subs	r3, #1
 8001070:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8001072:	2300      	movs	r3, #0
 8001074:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8001076:	4b38      	ldr	r3, [pc, #224]	; (8001158 <L6474_CmdGetStatus+0x100>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001082:	f003 f871 	bl	8004168 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001086:	2300      	movs	r3, #0
 8001088:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e01f      	b.n	80010d0 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 8001090:	4a32      	ldr	r2, [pc, #200]	; (800115c <L6474_CmdGetStatus+0x104>)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4413      	add	r3, r2
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 800109a:	4a30      	ldr	r2, [pc, #192]	; (800115c <L6474_CmdGetStatus+0x104>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	3303      	adds	r3, #3
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 80010a6:	4a2d      	ldr	r2, [pc, #180]	; (800115c <L6474_CmdGetStatus+0x104>)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	3306      	adds	r3, #6
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 80010b2:	4a2b      	ldr	r2, [pc, #172]	; (8001160 <L6474_CmdGetStatus+0x108>)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	3303      	adds	r3, #3
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 80010be:	4a28      	ldr	r2, [pc, #160]	; (8001160 <L6474_CmdGetStatus+0x108>)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	3306      	adds	r3, #6
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <L6474_CmdGetStatus+0xfc>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4293      	cmp	r3, r2
 80010dc:	d3d8      	bcc.n	8001090 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	4a1e      	ldr	r2, [pc, #120]	; (800115c <L6474_CmdGetStatus+0x104>)
 80010e2:	21d0      	movs	r1, #208	; 0xd0
 80010e4:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80010e6:	f003 f836 	bl	8004156 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80010ea:	2301      	movs	r3, #1
 80010ec:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <L6474_CmdGetStatus+0x100>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1be      	bne.n	8001076 <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	e011      	b.n	8001122 <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <L6474_CmdGetStatus+0x104>)
 8001108:	1898      	adds	r0, r3, r2
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	4a13      	ldr	r2, [pc, #76]	; (8001160 <L6474_CmdGetStatus+0x108>)
 8001114:	4413      	add	r3, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f001 ffc8 	bl	80030ac <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3301      	adds	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d9ea      	bls.n	80010fe <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <L6474_CmdGetStatus+0x108>)
 800112c:	4413      	add	r3, r2
 800112e:	78db      	ldrb	r3, [r3, #3]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7abb      	ldrb	r3, [r7, #10]
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <L6474_CmdGetStatus+0x108>)
 8001138:	440b      	add	r3, r1
 800113a:	799b      	ldrb	r3, [r3, #6]
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21b      	sxth	r3, r3
 8001142:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001144:	f003 f810 	bl	8004168 <L6474_Board_EnableIrq>
  
  return (status);
 8001148:	893b      	ldrh	r3, [r7, #8]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200003d0 	.word	0x200003d0
 8001158:	200003ec 	.word	0x200003ec
 800115c:	200003d4 	.word	0x200003d4
 8001160:	200003e0 	.word	0x200003e0

08001164 <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f001 f8f8 	bl	8002368 <L6474_SendCommand>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001192:	4b69      	ldr	r3, [pc, #420]	; (8001338 <L6474_CmdSetParam+0x1b8>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	3b01      	subs	r3, #1
 80011a0:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80011a2:	2300      	movs	r3, #0
 80011a4:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 80011a6:	4b65      	ldr	r3, [pc, #404]	; (800133c <L6474_CmdSetParam+0x1bc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80011ac:	7cbb      	ldrb	r3, [r7, #18]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80011b2:	f002 ffd9 	bl	8004168 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e019      	b.n	80011f4 <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80011c0:	4a5f      	ldr	r2, [pc, #380]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	4413      	add	r3, r2
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80011ca:	4a5d      	ldr	r2, [pc, #372]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	4413      	add	r3, r2
 80011d0:	3303      	adds	r3, #3
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80011d6:	4a5a      	ldr	r2, [pc, #360]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	4413      	add	r3, r2
 80011dc:	3306      	adds	r3, #6
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80011e2:	4a57      	ldr	r2, [pc, #348]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	4413      	add	r3, r2
 80011e8:	3309      	adds	r3, #9
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	4b50      	ldr	r3, [pc, #320]	; (8001338 <L6474_CmdSetParam+0x1b8>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4293      	cmp	r3, r2
 8001200:	d3de      	bcc.n	80011c0 <L6474_CmdSetParam+0x40>
    }
    switch (param)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3b01      	subs	r3, #1
 8001206:	2b17      	cmp	r3, #23
 8001208:	d85c      	bhi.n	80012c4 <L6474_CmdSetParam+0x144>
 800120a:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <L6474_CmdSetParam+0x90>)
 800120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001210:	08001271 	.word	0x08001271
 8001214:	080012a1 	.word	0x080012a1
 8001218:	08001271 	.word	0x08001271
 800121c:	080012c5 	.word	0x080012c5
 8001220:	080012c5 	.word	0x080012c5
 8001224:	080012c5 	.word	0x080012c5
 8001228:	080012c5 	.word	0x080012c5
 800122c:	080012c5 	.word	0x080012c5
 8001230:	080012c5 	.word	0x080012c5
 8001234:	080012c5 	.word	0x080012c5
 8001238:	080012c5 	.word	0x080012c5
 800123c:	080012c5 	.word	0x080012c5
 8001240:	080012c5 	.word	0x080012c5
 8001244:	080012c5 	.word	0x080012c5
 8001248:	080012c5 	.word	0x080012c5
 800124c:	080012c5 	.word	0x080012c5
 8001250:	080012c5 	.word	0x080012c5
 8001254:	080012c5 	.word	0x080012c5
 8001258:	080012c5 	.word	0x080012c5
 800125c:	080012c5 	.word	0x080012c5
 8001260:	080012c5 	.word	0x080012c5
 8001264:	080012c5 	.word	0x080012c5
 8001268:	080012c5 	.word	0x080012c5
 800126c:	080012a1 	.word	0x080012a1
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8001270:	7c7b      	ldrb	r3, [r7, #17]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	b2d1      	uxtb	r1, r2
 8001276:	4a32      	ldr	r2, [pc, #200]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 8001278:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0c1a      	lsrs	r2, r3, #16
 800127e:	7c7b      	ldrb	r3, [r7, #17]
 8001280:	b2d1      	uxtb	r1, r2
 8001282:	4a2f      	ldr	r2, [pc, #188]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 8001284:	4413      	add	r3, r2
 8001286:	460a      	mov	r2, r1
 8001288:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	0a1a      	lsrs	r2, r3, #8
 800128e:	7c7b      	ldrb	r3, [r7, #17]
 8001290:	b2d1      	uxtb	r1, r2
 8001292:	4a2b      	ldr	r2, [pc, #172]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 8001294:	4413      	add	r3, r2
 8001296:	460a      	mov	r2, r1
 8001298:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 800129a:	2303      	movs	r3, #3
 800129c:	74fb      	strb	r3, [r7, #19]
        break;
 800129e:	e01a      	b.n	80012d6 <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 80012a0:	7c7b      	ldrb	r3, [r7, #17]
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	b2d1      	uxtb	r1, r2
 80012a6:	4a26      	ldr	r2, [pc, #152]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80012a8:	4413      	add	r3, r2
 80012aa:	460a      	mov	r2, r1
 80012ac:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0a1a      	lsrs	r2, r3, #8
 80012b2:	7c7b      	ldrb	r3, [r7, #17]
 80012b4:	b2d1      	uxtb	r1, r2
 80012b6:	4a22      	ldr	r2, [pc, #136]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80012b8:	4413      	add	r3, r2
 80012ba:	460a      	mov	r2, r1
 80012bc:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	74fb      	strb	r3, [r7, #19]
        break;
 80012c2:	e008      	b.n	80012d6 <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 80012c4:	7c7b      	ldrb	r3, [r7, #17]
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	b2d1      	uxtb	r1, r2
 80012ca:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80012cc:	4413      	add	r3, r2
 80012ce:	460a      	mov	r2, r1
 80012d0:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80012d6:	7c7b      	ldrb	r3, [r7, #17]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	b2d1      	uxtb	r1, r2
 80012dc:	4a18      	ldr	r2, [pc, #96]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80012de:	4413      	add	r3, r2
 80012e0:	460a      	mov	r2, r1
 80012e2:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80012e4:	f002 ff37 	bl	8004156 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80012e8:	2301      	movs	r3, #1
 80012ea:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <L6474_CmdSetParam+0x1bc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f47f af57 	bne.w	80011a6 <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80012f8:	7cfb      	ldrb	r3, [r7, #19]
 80012fa:	f1c3 0303 	rsb	r3, r3, #3
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e011      	b.n	8001326 <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 800130c:	1898      	adds	r0, r3, r2
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <L6474_CmdSetParam+0x1c4>)
 8001318:	4413      	add	r3, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f001 fec6 	bl	80030ac <L6474_WriteBytes>
       i++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d9ea      	bls.n	8001302 <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800132c:	f002 ff1c 	bl	8004168 <L6474_Board_EnableIrq>
}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200003d0 	.word	0x200003d0
 800133c:	200003ec 	.word	0x200003ec
 8001340:	200003d4 	.word	0x200003d4
 8001344:	200003e0 	.word	0x200003e0

08001348 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <L6474_Init+0x94>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f002 ff10 	bl	800417c <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 800135c:	f003 f90c 	bl	8004578 <L6474_Board_SpiInit>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 8001366:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800136a:	f000 ffd1 	bl	8002310 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <L6474_Init+0x94>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f003 f82b 	bl	80043d0 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <L6474_Init+0x94>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f003 f8a5 	bl	80044d0 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 8001386:	2001      	movs	r0, #1
 8001388:	f002 feda 	bl	8004140 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d106      	bne.n	80013a0 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <L6474_Init+0x94>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f001 f8db 	bl	8002554 <L6474_SetDeviceParamsToPredefinedValues>
 800139e:	e006      	b.n	80013ae <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <L6474_Init+0x94>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 f82f 	bl	800240c <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <L6474_Init+0x94>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fd41 	bl	8000e3c <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <L6474_Init+0x94>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fe49 	bl	8001058 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <L6474_Init+0x94>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b03      	ldr	r3, [pc, #12]	; (80013dc <L6474_Init+0x94>)
 80013d0:	801a      	strh	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200003ee 	.word	0x200003ee

080013e0 <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <L6474_GetAcceleration+0x2c>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	3318      	adds	r3, #24
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b29b      	uxth	r3, r3
}            
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200003f0 	.word	0x200003f0

08001410 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <L6474_GetCurrentSpeed+0x2c>)
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	3320      	adds	r3, #32
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	200003f0 	.word	0x200003f0

08001440 <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 800144a:	79fa      	ldrb	r2, [r7, #7]
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <L6474_GetDeceleration+0x2c>)
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	331a      	adds	r3, #26
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
}          
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200003f0 	.word	0x200003f0

08001470 <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <L6474_GetDeviceState+0x2c>)
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	3324      	adds	r3, #36	; 0x24
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	200003f0 	.word	0x200003f0

080014a0 <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 80014aa:	79fa      	ldrb	r2, [r7, #7]
 80014ac:	4907      	ldr	r1, [pc, #28]	; (80014cc <L6474_GetDirection+0x2c>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3323      	adds	r3, #35	; 0x23
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200003f0 	.word	0x200003f0

080014d0 <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 80014d4:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <L6474_GetMotorHandle+0x10>)
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000004 	.word	0x20000004

080014f8 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2103      	movs	r1, #3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fcb4 	bl	8000e74 <L6474_CmdGetParam>
 800150c:	4603      	mov	r3, r0
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fede 	bl	80022d0 <L6474_ConvertPosition>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 800152a:	79fa      	ldrb	r2, [r7, #7]
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <L6474_GetMaxSpeed+0x2c>)
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	331c      	adds	r3, #28
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	200003f0 	.word	0x200003f0

08001550 <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <L6474_GetMinSpeed+0x2c>)
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	331e      	adds	r3, #30
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
}                                                     
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200003f0 	.word	0x200003f0

08001580 <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <L6474_GetNbDevices+0x14>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	200003d0 	.word	0x200003d0

08001598 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2101      	movs	r1, #1
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fc64 	bl	8000e74 <L6474_CmdGetParam>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fe8e 	bl	80022d0 <L6474_ConvertPosition>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2116      	movs	r1, #22
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fc50 	bl	8000e74 <L6474_CmdGetParam>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 80015e4:	7bbb      	ldrb	r3, [r7, #14]
 80015e6:	3b08      	subs	r3, #8
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d81c      	bhi.n	8001626 <L6474_GetStepMode+0x66>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <L6474_GetStepMode+0x34>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	08001609 	.word	0x08001609
 80015f8:	0800160f 	.word	0x0800160f
 80015fc:	08001615 	.word	0x08001615
 8001600:	0800161b 	.word	0x0800161b
 8001604:	08001621 	.word	0x08001621
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]
      break;
 800160c:	e00e      	b.n	800162c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 800160e:	2301      	movs	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
      break;    
 8001612:	e00b      	b.n	800162c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 8001614:	2302      	movs	r3, #2
 8001616:	73fb      	strb	r3, [r7, #15]
      break;        
 8001618:	e008      	b.n	800162c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 800161a:	2303      	movs	r3, #3
 800161c:	73fb      	strb	r3, [r7, #15]
      break;       
 800161e:	e005      	b.n	800162c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 8001620:	2304      	movs	r3, #4
 8001622:	73fb      	strb	r3, [r7, #15]
      break;
 8001624:	e002      	b.n	800162c <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 8001626:	23fe      	movs	r3, #254	; 0xfe
 8001628:	73fb      	strb	r3, [r7, #15]
      break;       
 800162a:	bf00      	nop
  }
  
  return stepMode;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop

08001638 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <L6474_GetStopMode+0x2c>)
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	3325      	adds	r3, #37	; 0x25
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200003f0 	.word	0x200003f0

08001668 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f81e 	bl	80016b8 <L6474_GoTo>
} 
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2103      	movs	r1, #3
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fbee 	bl	8000e74 <L6474_CmdGetParam>
 8001698:	4603      	mov	r3, r0
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fe18 	bl	80022d0 <L6474_ConvertPosition>
 80016a0:	4603      	mov	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f804 	bl	80016b8 <L6474_GoTo>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80016c4:	79fa      	ldrb	r2, [r7, #7]
 80016c6:	493a      	ldr	r1, [pc, #232]	; (80017b0 <L6474_GoTo+0xf8>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	3324      	adds	r3, #36	; 0x24
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d003      	beq.n	80016e4 <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f868 	bl	80017b4 <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2101      	movs	r1, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fbc3 	bl	8000e74 <L6474_CmdGetParam>
 80016ee:	4603      	mov	r3, r0
 80016f0:	79fc      	ldrb	r4, [r7, #7]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fdec 	bl	80022d0 <L6474_ConvertPosition>
 80016f8:	4602      	mov	r2, r0
 80016fa:	492d      	ldr	r1, [pc, #180]	; (80017b0 <L6474_GoTo+0xf8>)
 80016fc:	4623      	mov	r3, r4
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4423      	add	r3, r4
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3304      	adds	r3, #4
 8001708:	601a      	str	r2, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	4928      	ldr	r1, [pc, #160]	; (80017b0 <L6474_GoTo+0xf8>)
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	3304      	adds	r3, #4
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	60bb      	str	r3, [r7, #8]
  
  if (steps >= 0) 
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0c      	blt.n	8001742 <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 8001728:	79fa      	ldrb	r2, [r7, #7]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	4820      	ldr	r0, [pc, #128]	; (80017b0 <L6474_GoTo+0xf8>)
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4403      	add	r3, r0
 8001738:	3314      	adds	r3, #20
 800173a:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e00d      	b.n	800175e <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	425b      	negs	r3, r3
 8001746:	79fa      	ldrb	r2, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	4919      	ldr	r1, [pc, #100]	; (80017b0 <L6474_GoTo+0xf8>)
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	3314      	adds	r3, #20
 8001758:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d021      	beq.n	80017a8 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001764:	79fa      	ldrb	r2, [r7, #7]
 8001766:	4912      	ldr	r1, [pc, #72]	; (80017b0 <L6474_GoTo+0xf8>)
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	440b      	add	r3, r1
 8001772:	3322      	adds	r3, #34	; 0x22
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fb48 	bl	8001e14 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	490a      	ldr	r1, [pc, #40]	; (80017b0 <L6474_GoTo+0xf8>)
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3314      	adds	r3, #20
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fcda 	bl	8002154 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 f8ea 	bl	800297c <L6474_StartMovement>
  }  
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	200003f0 	.word	0x200003f0

080017b4 <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 80017be:	79fa      	ldrb	r2, [r7, #7]
 80017c0:	4920      	ldr	r1, [pc, #128]	; (8001844 <L6474_HardStop+0x90>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	3325      	adds	r3, #37	; 0x25
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d12d      	bne.n	8001832 <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fe4f 	bl	800447c <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	4918      	ldr	r1, [pc, #96]	; (8001844 <L6474_HardStop+0x90>)
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	3324      	adds	r3, #36	; 0x24
 80017ee:	2208      	movs	r2, #8
 80017f0:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 80017f2:	79fa      	ldrb	r2, [r7, #7]
 80017f4:	4913      	ldr	r1, [pc, #76]	; (8001844 <L6474_HardStop+0x90>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	3322      	adds	r3, #34	; 0x22
 8001802:	2203      	movs	r2, #3
 8001804:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001806:	79fa      	ldrb	r2, [r7, #7]
 8001808:	490e      	ldr	r1, [pc, #56]	; (8001844 <L6474_HardStop+0x90>)
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	3314      	adds	r3, #20
 8001816:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800181a:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 800181c:	79fa      	ldrb	r2, [r7, #7]
 800181e:	4909      	ldr	r1, [pc, #36]	; (8001844 <L6474_HardStop+0x90>)
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	3320      	adds	r3, #32
 800182c:	2200      	movs	r2, #0
 800182e:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8001830:	e003      	b.n	800183a <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f807 	bl	8001848 <L6474_HizStop>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200003f0 	.word	0x200003f0

08001848 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fe11 	bl	800447c <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff faed 	bl	8000e3c <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 8001862:	79fa      	ldrb	r2, [r7, #7]
 8001864:	4915      	ldr	r1, [pc, #84]	; (80018bc <L6474_HizStop+0x74>)
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	3324      	adds	r3, #36	; 0x24
 8001872:	2208      	movs	r2, #8
 8001874:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	4910      	ldr	r1, [pc, #64]	; (80018bc <L6474_HizStop+0x74>)
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3322      	adds	r3, #34	; 0x22
 8001886:	2203      	movs	r2, #3
 8001888:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 800188a:	79fa      	ldrb	r2, [r7, #7]
 800188c:	490b      	ldr	r1, [pc, #44]	; (80018bc <L6474_HizStop+0x74>)
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3314      	adds	r3, #20
 800189a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800189e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 80018a0:	79fa      	ldrb	r2, [r7, #7]
 80018a2:	4906      	ldr	r1, [pc, #24]	; (80018bc <L6474_HizStop+0x74>)
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3320      	adds	r3, #32
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200003f0 	.word	0x200003f0

080018c0 <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	603a      	str	r2, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	460b      	mov	r3, r1
 80018ce:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	4926      	ldr	r1, [pc, #152]	; (800196c <L6474_Move+0xac>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	3324      	adds	r3, #36	; 0x24
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d003      	beq.n	80018f0 <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff62 	bl	80017b4 <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d035      	beq.n	8001962 <L6474_Move+0xa2>
  {
    devicePrm[deviceId].stepsToTake = stepCount;
 80018f6:	79fa      	ldrb	r2, [r7, #7]
 80018f8:	491c      	ldr	r1, [pc, #112]	; (800196c <L6474_Move+0xac>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3314      	adds	r3, #20
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	4917      	ldr	r1, [pc, #92]	; (800196c <L6474_Move+0xac>)
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3322      	adds	r3, #34	; 0x22
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff faa6 	bl	8000e74 <L6474_CmdGetParam>
 8001928:	4603      	mov	r3, r0
 800192a:	79fc      	ldrb	r4, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fccf 	bl	80022d0 <L6474_ConvertPosition>
 8001932:	4602      	mov	r2, r0
 8001934:	490d      	ldr	r1, [pc, #52]	; (800196c <L6474_Move+0xac>)
 8001936:	4623      	mov	r3, r4
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4423      	add	r3, r4
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	3304      	adds	r3, #4
 8001942:	601a      	str	r2, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001944:	79ba      	ldrb	r2, [r7, #6]
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fa62 	bl	8001e14 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fbfd 	bl	8002154 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f001 f80d 	bl	800297c <L6474_StartMovement>
  }  
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	200003f0 	.word	0x200003f0

08001970 <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <L6474_ReadId+0x14>)
 8001976:	881b      	ldrh	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200003ee 	.word	0x200003ee

08001988 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2119      	movs	r1, #25
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fa6c 	bl	8000e74 <L6474_CmdGetParam>
 800199c:	4603      	mov	r3, r0
 800199e:	b29b      	uxth	r3, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fd8b 	bl	80044d0 <L6474_Board_ReleaseReset>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fd90 	bl	80044f4 <L6474_Board_Reset>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	e014      	b.n	8001a12 <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff2c 	bl	8001848 <L6474_HizStop>
    L6474_Reset(loop);
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ffe5 	bl	80019c2 <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 80019f8:	2001      	movs	r0, #1
 80019fa:	f002 fba1 	bl	8004140 <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fd65 	bl	80044d0 <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 8001a06:	2001      	movs	r0, #1
 8001a08:	f002 fb9a 	bl	8004140 <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <L6474_ResetAllDevices+0x4c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	79fa      	ldrb	r2, [r7, #7]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3e4      	bcc.n	80019e8 <L6474_ResetAllDevices+0xc>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200003d0 	.word	0x200003d0

08001a2c <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	460a      	mov	r2, r1
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001a3c:	79fa      	ldrb	r2, [r7, #7]
 8001a3e:	4913      	ldr	r1, [pc, #76]	; (8001a8c <L6474_Run+0x60>)
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3324      	adds	r3, #36	; 0x24
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d003      	beq.n	8001a5c <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff feac 	bl	80017b4 <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001a5c:	79ba      	ldrb	r2, [r7, #6]
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f9d6 	bl	8001e14 <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001a68:	79fa      	ldrb	r2, [r7, #7]
 8001a6a:	4908      	ldr	r1, [pc, #32]	; (8001a8c <L6474_Run+0x60>)
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	3322      	adds	r3, #34	; 0x22
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 ff7c 	bl	800297c <L6474_StartMovement>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200003f0 	.word	0x200003f0

08001a90 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	71fb      	strb	r3, [r7, #7]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d816      	bhi.n	8001ad4 <L6474_SelectStepMode+0x44>
 8001aa6:	a201      	add	r2, pc, #4	; (adr r2, 8001aac <L6474_SelectStepMode+0x1c>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001abd 	.word	0x08001abd
 8001ab0:	08001ac3 	.word	0x08001ac3
 8001ab4:	08001ac9 	.word	0x08001ac9
 8001ab8:	08001acf 	.word	0x08001acf
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001abc:	2308      	movs	r3, #8
 8001abe:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac0:	e00b      	b.n	8001ada <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001ac2:	2309      	movs	r3, #9
 8001ac4:	73fb      	strb	r3, [r7, #15]
      break;    
 8001ac6:	e008      	b.n	8001ada <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001ac8:	230a      	movs	r3, #10
 8001aca:	73fb      	strb	r3, [r7, #15]
      break;        
 8001acc:	e005      	b.n	8001ada <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001ace:	230b      	movs	r3, #11
 8001ad0:	73fb      	strb	r3, [r7, #15]
      break;       
 8001ad2:	e002      	b.n	8001ada <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	73fb      	strb	r3, [r7, #15]
      break;       
 8001ad8:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff feb3 	bl	8001848 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2116      	movs	r1, #22
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f9c4 	bl	8000e74 <L6474_CmdGetParam>
 8001aec:	4603      	mov	r3, r0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f023 0307 	bic.w	r3, r3, #7
 8001af4:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001af6:	7bba      	ldrb	r2, [r7, #14]
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	2116      	movs	r1, #22
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fb3b 	bl	8001180 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2101      	movs	r1, #1
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fb35 	bl	8001180 <L6474_CmdSetParam>
  
  return (1);
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	460a      	mov	r2, r1
 8001b2a:	71fb      	strb	r3, [r7, #7]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001b34:	88bb      	ldrh	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d023      	beq.n	8001b82 <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001b3a:	79fa      	ldrb	r2, [r7, #7]
 8001b3c:	4914      	ldr	r1, [pc, #80]	; (8001b90 <L6474_SetAcceleration+0x70>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3324      	adds	r3, #36	; 0x24
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d00b      	beq.n	8001b6a <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	490e      	ldr	r1, [pc, #56]	; (8001b90 <L6474_SetAcceleration+0x70>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	3322      	adds	r3, #34	; 0x22
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10b      	bne.n	8001b82 <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	4908      	ldr	r1, [pc, #32]	; (8001b90 <L6474_SetAcceleration+0x70>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	3318      	adds	r3, #24
 8001b7a:	88ba      	ldrh	r2, [r7, #4]
 8001b7c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	200003f0 	.word	0x200003f0

08001b94 <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001ba8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	d508      	bpl.n	8001bc8 <L6474_SetAnalogValue+0x34>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d005      	beq.n	8001bc8 <L6474_SetAnalogValue+0x34>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d002      	beq.n	8001bc8 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	74fb      	strb	r3, [r7, #19]
 8001bc6:	e0d9      	b.n	8001d7c <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	2b12      	cmp	r3, #18
 8001bce:	f200 80ca 	bhi.w	8001d66 <L6474_SetAnalogValue+0x1d2>
 8001bd2:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <L6474_SetAnalogValue+0x44>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001c8b 	.word	0x08001c8b
 8001bdc:	08001c25 	.word	0x08001c25
 8001be0:	08001c8b 	.word	0x08001c8b
 8001be4:	08001d67 	.word	0x08001d67
 8001be8:	08001d67 	.word	0x08001d67
 8001bec:	08001d67 	.word	0x08001d67
 8001bf0:	08001d67 	.word	0x08001d67
 8001bf4:	08001d67 	.word	0x08001d67
 8001bf8:	08001cf5 	.word	0x08001cf5
 8001bfc:	08001d67 	.word	0x08001d67
 8001c00:	08001d67 	.word	0x08001d67
 8001c04:	08001d67 	.word	0x08001d67
 8001c08:	08001d67 	.word	0x08001d67
 8001c0c:	08001d67 	.word	0x08001d67
 8001c10:	08001d41 	.word	0x08001d41
 8001c14:	08001d41 	.word	0x08001d41
 8001c18:	08001d67 	.word	0x08001d67
 8001c1c:	08001d67 	.word	0x08001d67
 8001c20:	08001d1b 	.word	0x08001d1b
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001c24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	d021      	beq.n	8001c76 <L6474_SetAnalogValue+0xe2>
 8001c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c36:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001d88 <L6474_SetAnalogValue+0x1f4>
 8001c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	dc15      	bgt.n	8001c70 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001c44:	2116      	movs	r1, #22
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff f914 	bl	8000e74 <L6474_CmdGetParam>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	2201      	movs	r2, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001c62:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	d502      	bpl.n	8001c76 <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001c74:	e079      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001c76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7e:	ee17 3a90 	vmov	r3, s15
 8001c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c86:	617b      	str	r3, [r7, #20]
        break;
 8001c88:	e06f      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c8e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001d8c <L6474_SetAnalogValue+0x1f8>
 8001c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	db27      	blt.n	8001cec <L6474_SetAnalogValue+0x158>
 8001c9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001d90 <L6474_SetAnalogValue+0x1fc>
 8001ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cac:	d81e      	bhi.n	8001cec <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001cae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	db09      	blt.n	8001cd0 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001cbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc4:	ee17 3a90 	vmov	r3, s15
 8001cc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ccc:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001cce:	e010      	b.n	8001cf2 <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001cd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd4:	eef1 7a67 	vneg.f32	s15, s15
 8001cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cdc:	ee17 3a90 	vmov	r3, s15
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001cea:	e002      	b.n	8001cf2 <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001cf0:	e03b      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
 8001cf2:	e03a      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001d94 <L6474_SetAnalogValue+0x200>
 8001cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	dd02      	ble.n	8001d0c <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001d0a:	e02e      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001d0c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d10:	f001 f98a 	bl	8003028 <L6474_Tval_Current_to_Par>
 8001d14:	4603      	mov	r3, r0
 8001d16:	617b      	str	r3, [r7, #20]
        break;
 8001d18:	e027      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001d1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d1e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001d98 <L6474_SetAnalogValue+0x204>
 8001d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	dd02      	ble.n	8001d32 <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001d30:	e01b      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001d32:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d36:	f001 f953 	bl	8002fe0 <L6474_Ocd_Th_to_Par>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	617b      	str	r3, [r7, #20]
        break;
 8001d3e:	e014      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001d40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d44:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d9c <L6474_SetAnalogValue+0x208>
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	dd02      	ble.n	8001d58 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001d56:	e008      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001d58:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d5c:	f001 f988 	bl	8003070 <L6474_Tmin_Time_to_Par>
 8001d60:	4603      	mov	r3, r0
 8001d62:	617b      	str	r3, [r7, #20]
        break;    
 8001d64:	e001      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001d6a:	7cfb      	ldrb	r3, [r7, #19]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fa02 	bl	8001180 <L6474_CmdSetParam>
    }
  }
  return result;
 8001d7c:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	43ff8000 	.word	0x43ff8000
 8001d8c:	ca000000 	.word	0xca000000
 8001d90:	49fffff8 	.word	0x49fffff8
 8001d94:	457a0000 	.word	0x457a0000
 8001d98:	45bb8000 	.word	0x45bb8000
 8001d9c:	42800000 	.word	0x42800000

08001da0 <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	460a      	mov	r2, r1
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	4613      	mov	r3, r2
 8001dae:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 8001db4:	88bb      	ldrh	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d023      	beq.n	8001e02 <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	4914      	ldr	r1, [pc, #80]	; (8001e10 <L6474_SetDeceleration+0x70>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3324      	adds	r3, #36	; 0x24
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d00b      	beq.n	8001dea <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001dd2:	79fa      	ldrb	r2, [r7, #7]
 8001dd4:	490e      	ldr	r1, [pc, #56]	; (8001e10 <L6474_SetDeceleration+0x70>)
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	3322      	adds	r3, #34	; 0x22
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10b      	bne.n	8001e02 <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 8001dea:	79fa      	ldrb	r2, [r7, #7]
 8001dec:	4908      	ldr	r1, [pc, #32]	; (8001e10 <L6474_SetDeceleration+0x70>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	331a      	adds	r3, #26
 8001dfa:	88ba      	ldrh	r2, [r7, #4]
 8001dfc:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}        
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	200003f0 	.word	0x200003f0

08001e14 <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460a      	mov	r2, r1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8001e24:	79fa      	ldrb	r2, [r7, #7]
 8001e26:	490f      	ldr	r1, [pc, #60]	; (8001e64 <L6474_SetDirection+0x50>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	3324      	adds	r3, #36	; 0x24
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d10f      	bne.n	8001e5c <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8001e3c:	79fa      	ldrb	r2, [r7, #7]
 8001e3e:	4909      	ldr	r1, [pc, #36]	; (8001e64 <L6474_SetDirection+0x50>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	3323      	adds	r3, #35	; 0x23
 8001e4c:	79ba      	ldrb	r2, [r7, #6]
 8001e4e:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8001e50:	79ba      	ldrb	r2, [r7, #6]
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 fb5e 	bl	8004518 <L6474_Board_SetDirectionGpio>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200003f0 	.word	0x200003f0

08001e68 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	2101      	movs	r1, #1
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fffb 	bl	8000e74 <L6474_CmdGetParam>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fa25 	bl	80022d0 <L6474_ConvertPosition>
 8001e86:	4602      	mov	r2, r0
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db04      	blt.n	8001e9e <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e005      	b.n	8001eaa <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff f965 	bl	8001180 <L6474_CmdSetParam>
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	6039      	str	r1, [r7, #0]
 8001ec8:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db04      	blt.n	8001eda <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e005      	b.n	8001ee6 <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	2103      	movs	r1, #3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f947 	bl	8001180 <L6474_CmdSetParam>
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	460a      	mov	r2, r1
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001f10:	88bb      	ldrh	r3, [r7, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d935      	bls.n	8001f82 <L6474_SetMaxSpeed+0x86>
 8001f16:	88bb      	ldrh	r3, [r7, #4]
 8001f18:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d830      	bhi.n	8001f82 <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001f20:	79fa      	ldrb	r2, [r7, #7]
 8001f22:	491b      	ldr	r1, [pc, #108]	; (8001f90 <L6474_SetMaxSpeed+0x94>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	331e      	adds	r3, #30
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8001f34:	88ba      	ldrh	r2, [r7, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d323      	bcc.n	8001f82 <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f3a:	79fa      	ldrb	r2, [r7, #7]
 8001f3c:	4914      	ldr	r1, [pc, #80]	; (8001f90 <L6474_SetMaxSpeed+0x94>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	3324      	adds	r3, #36	; 0x24
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d00b      	beq.n	8001f6a <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001f52:	79fa      	ldrb	r2, [r7, #7]
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <L6474_SetMaxSpeed+0x94>)
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	3322      	adds	r3, #34	; 0x22
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10b      	bne.n	8001f82 <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 8001f6a:	79fa      	ldrb	r2, [r7, #7]
 8001f6c:	4908      	ldr	r1, [pc, #32]	; (8001f90 <L6474_SetMaxSpeed+0x94>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	331c      	adds	r3, #28
 8001f7a:	88ba      	ldrh	r2, [r7, #4]
 8001f7c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	200003f0 	.word	0x200003f0

08001f94 <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460a      	mov	r2, r1
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001fa8:	88bb      	ldrh	r3, [r7, #4]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d935      	bls.n	800201a <L6474_SetMinSpeed+0x86>
 8001fae:	88bb      	ldrh	r3, [r7, #4]
 8001fb0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d830      	bhi.n	800201a <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001fb8:	79fa      	ldrb	r2, [r7, #7]
 8001fba:	491b      	ldr	r1, [pc, #108]	; (8002028 <L6474_SetMinSpeed+0x94>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	331c      	adds	r3, #28
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8001fcc:	88ba      	ldrh	r2, [r7, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d823      	bhi.n	800201a <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001fd2:	79fa      	ldrb	r2, [r7, #7]
 8001fd4:	4914      	ldr	r1, [pc, #80]	; (8002028 <L6474_SetMinSpeed+0x94>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	3324      	adds	r3, #36	; 0x24
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d00b      	beq.n	8002002 <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001fea:	79fa      	ldrb	r2, [r7, #7]
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <L6474_SetMinSpeed+0x94>)
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3322      	adds	r3, #34	; 0x22
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10b      	bne.n	800201a <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 8002002:	79fa      	ldrb	r2, [r7, #7]
 8002004:	4908      	ldr	r1, [pc, #32]	; (8002028 <L6474_SetMinSpeed+0x94>)
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	331e      	adds	r3, #30
 8002012:	88ba      	ldrh	r2, [r7, #4]
 8002014:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8002016:	2301      	movs	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
}                 
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	200003f0 	.word	0x200003f0

0800202c <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	460a      	mov	r2, r1
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	4613      	mov	r3, r2
 800203a:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 800203c:	79fa      	ldrb	r2, [r7, #7]
 800203e:	4907      	ldr	r1, [pc, #28]	; (800205c <L6474_SetStopMode+0x30>)
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	3325      	adds	r3, #37	; 0x25
 800204c:	79ba      	ldrb	r2, [r7, #6]
 800204e:	701a      	strb	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	200003f0 	.word	0x200003f0

08002060 <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	490e      	ldr	r1, [pc, #56]	; (80020ac <L6474_SoftStop+0x4c>)
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	3324      	adds	r3, #36	; 0x24
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b08      	cmp	r3, #8
 8002084:	d00b      	beq.n	800209e <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 8002086:	79fa      	ldrb	r2, [r7, #7]
 8002088:	4908      	ldr	r1, [pc, #32]	; (80020ac <L6474_SoftStop+0x4c>)
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	3322      	adds	r3, #34	; 0x22
 8002096:	2202      	movs	r2, #2
 8002098:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	200003f0 	.word	0x200003f0

080020b0 <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 80020ba:	bf00      	nop
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff f9d6 	bl	8001470 <L6474_GetDeviceState>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d1f8      	bne.n	80020bc <L6474_WaitWhileActive+0xc>
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	460a      	mov	r2, r1
 80020de:	71fb      	strb	r3, [r7, #7]
 80020e0:	4613      	mov	r3, r2
 80020e2:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 80020e4:	88bb      	ldrh	r3, [r7, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d801      	bhi.n	80020ee <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 80020ea:	2302      	movs	r3, #2
 80020ec:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 80020ee:	88bb      	ldrh	r3, [r7, #4]
 80020f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d902      	bls.n	80020fe <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 80020f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80020fc:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 80020fe:	79fa      	ldrb	r2, [r7, #7]
 8002100:	4913      	ldr	r1, [pc, #76]	; (8002150 <L6474_ApplySpeed+0x7c>)
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3320      	adds	r3, #32
 800210e:	88ba      	ldrh	r2, [r7, #4]
 8002110:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d010      	beq.n	800213a <L6474_ApplySpeed+0x66>
 8002118:	2b02      	cmp	r3, #2
 800211a:	dc13      	bgt.n	8002144 <L6474_ApplySpeed+0x70>
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <L6474_ApplySpeed+0x52>
 8002120:	2b01      	cmp	r3, #1
 8002122:	d005      	beq.n	8002130 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 8002124:	e00e      	b.n	8002144 <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f002 f8df 	bl	80042ec <L6474_Board_Pwm1SetFreq>
      break;
 800212e:	e00a      	b.n	8002146 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8002130:	88bb      	ldrh	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f002 f900 	bl	8004338 <L6474_Board_Pwm2SetFreq>
      break;
 8002138:	e005      	b.n	8002146 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 800213a:	88bb      	ldrh	r3, [r7, #4]
 800213c:	4618      	mov	r0, r3
 800213e:	f002 f921 	bl	8004384 <L6474_Board_Pwm3SetFreq>
      break;
 8002142:	e000      	b.n	8002146 <L6474_ApplySpeed+0x72>
      break; //ignore error
 8002144:	bf00      	nop
  }
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200003f0 	.word	0x200003f0

08002154 <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
  uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 8002160:	79fa      	ldrb	r2, [r7, #7]
 8002162:	495a      	ldr	r1, [pc, #360]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	331e      	adds	r3, #30
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 8002174:	79fa      	ldrb	r2, [r7, #7]
 8002176:	4955      	ldr	r1, [pc, #340]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	331c      	adds	r3, #28
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	8b7b      	ldrh	r3, [r7, #26]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 8002190:	79fa      	ldrb	r2, [r7, #7]
 8002192:	494e      	ldr	r1, [pc, #312]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	331c      	adds	r3, #28
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	8b7b      	ldrh	r3, [r7, #26]
 80021a8:	4413      	add	r3, r2
 80021aa:	461a      	mov	r2, r3
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 80021b8:	79fa      	ldrb	r2, [r7, #7]
 80021ba:	4944      	ldr	r1, [pc, #272]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	3318      	adds	r3, #24
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80021d4:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 80021dc:	79fa      	ldrb	r2, [r7, #7]
 80021de:	493b      	ldr	r1, [pc, #236]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	331a      	adds	r3, #26
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4413      	add	r3, r2
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d242      	bcs.n	8002292 <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 800220c:	79fa      	ldrb	r2, [r7, #7]
 800220e:	492f      	ldr	r1, [pc, #188]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	331a      	adds	r3, #26
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 8002222:	79fa      	ldrb	r2, [r7, #7]
 8002224:	4929      	ldr	r1, [pc, #164]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	3318      	adds	r3, #24
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	fb03 f202 	mul.w	r2, r3, r2
 8002240:	68f9      	ldr	r1, [r7, #12]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	440b      	add	r3, r1
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d908      	bls.n	8002264 <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3b01      	subs	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d104      	bne.n	8002268 <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 800225e:	2301      	movs	r3, #1
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e001      	b.n	8002268 <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8002268:	79fa      	ldrb	r2, [r7, #7]
 800226a:	4918      	ldr	r1, [pc, #96]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3308      	adds	r3, #8
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 800227c:	79fa      	ldrb	r2, [r7, #7]
 800227e:	4913      	ldr	r1, [pc, #76]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	3310      	adds	r3, #16
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 8002290:	e016      	b.n	80022c0 <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8002292:	79fa      	ldrb	r2, [r7, #7]
 8002294:	490d      	ldr	r1, [pc, #52]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	3308      	adds	r3, #8
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	79fa      	ldrb	r2, [r7, #7]
 80022ae:	1e59      	subs	r1, r3, #1
 80022b0:	4806      	ldr	r0, [pc, #24]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4403      	add	r3, r0
 80022bc:	3310      	adds	r3, #16
 80022be:	6019      	str	r1, [r3, #0]
}
 80022c0:	bf00      	nop
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	200003f0 	.word	0x200003f0

080022d0 <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00d      	beq.n	80022fe <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3301      	adds	r3, #1
 80022ec:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80022f4:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	425b      	negs	r3, r3
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e001      	b.n	8002302 <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <L6474_ErrorHandler+0x28>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <L6474_ErrorHandler+0x28>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	4610      	mov	r0, r2
 800232a:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 800232c:	e000      	b.n	8002330 <L6474_ErrorHandler+0x20>
    while(1)
 800232e:	e7fe      	b.n	800232e <L6474_ErrorHandler+0x1e>
}
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200003cc 	.word	0x200003cc

0800233c <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <L6474_FlagInterruptHandler+0x24>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <L6474_FlagInterruptHandler+0x28>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <L6474_FlagInterruptHandler+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <L6474_FlagInterruptHandler+0x28>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
  }
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200003c8 	.word	0x200003c8
 8002364:	200003ed 	.word	0x200003ed

08002368 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	460a      	mov	r2, r1
 8002372:	71fb      	strb	r3, [r7, #7]
 8002374:	4613      	mov	r3, r2
 8002376:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <L6474_SendCommand+0x90>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8002388:	2300      	movs	r3, #0
 800238a:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <L6474_SendCommand+0x94>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8002398:	f001 fee6 	bl	8004168 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 800239c:	2300      	movs	r3, #0
 800239e:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	e008      	b.n	80023b8 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <L6474_SendCommand+0x98>)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	3309      	adds	r3, #9
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3301      	adds	r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <L6474_SendCommand+0x90>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d3ef      	bcc.n	80023a6 <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 80023c6:	7abb      	ldrb	r3, [r7, #10]
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <L6474_SendCommand+0x98>)
 80023ca:	4413      	add	r3, r2
 80023cc:	79ba      	ldrb	r2, [r7, #6]
 80023ce:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80023d0:	f001 fec1 	bl	8004156 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80023d4:	2301      	movs	r3, #1
 80023d6:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <L6474_SendCommand+0x94>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1d4      	bne.n	800238c <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 80023e2:	4908      	ldr	r1, [pc, #32]	; (8002404 <L6474_SendCommand+0x9c>)
 80023e4:	4808      	ldr	r0, [pc, #32]	; (8002408 <L6474_SendCommand+0xa0>)
 80023e6:	f000 fe61 	bl	80030ac <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 80023ea:	f001 febd 	bl	8004168 <L6474_Board_EnableIrq>
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200003d0 	.word	0x200003d0
 80023fc:	200003ec 	.word	0x200003ec
 8002400:	200003d4 	.word	0x200003d4
 8002404:	200003e9 	.word	0x200003e9
 8002408:	200003dd 	.word	0x200003dd

0800240c <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8002418:	79fa      	ldrb	r2, [r7, #7]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	8818      	ldrh	r0, [r3, #0]
 800241e:	494c      	ldr	r1, [pc, #304]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	3318      	adds	r3, #24
 800242c:	4602      	mov	r2, r0
 800242e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 8002430:	79fa      	ldrb	r2, [r7, #7]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	8858      	ldrh	r0, [r3, #2]
 8002436:	4946      	ldr	r1, [pc, #280]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	331a      	adds	r3, #26
 8002444:	4602      	mov	r2, r0
 8002446:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	8898      	ldrh	r0, [r3, #4]
 800244e:	4940      	ldr	r1, [pc, #256]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	440b      	add	r3, r1
 800245a:	331c      	adds	r3, #28
 800245c:	4602      	mov	r2, r0
 800245e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 8002460:	79fa      	ldrb	r2, [r7, #7]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	88d8      	ldrh	r0, [r3, #6]
 8002466:	493a      	ldr	r1, [pc, #232]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	331e      	adds	r3, #30
 8002474:	4602      	mov	r2, r0
 8002476:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8002478:	79fa      	ldrb	r2, [r7, #7]
 800247a:	4935      	ldr	r1, [pc, #212]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 800248a:	79fa      	ldrb	r2, [r7, #7]
 800248c:	4930      	ldr	r1, [pc, #192]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	3304      	adds	r3, #4
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 800249e:	79fa      	ldrb	r2, [r7, #7]
 80024a0:	492b      	ldr	r1, [pc, #172]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	3308      	adds	r3, #8
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80024b2:	79fa      	ldrb	r2, [r7, #7]
 80024b4:	4926      	ldr	r1, [pc, #152]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	440b      	add	r3, r1
 80024c0:	330c      	adds	r3, #12
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 80024c6:	79fa      	ldrb	r2, [r7, #7]
 80024c8:	4921      	ldr	r1, [pc, #132]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	3310      	adds	r3, #16
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 80024da:	79fa      	ldrb	r2, [r7, #7]
 80024dc:	491c      	ldr	r1, [pc, #112]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	3314      	adds	r3, #20
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 80024ee:	79fa      	ldrb	r2, [r7, #7]
 80024f0:	4917      	ldr	r1, [pc, #92]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	3320      	adds	r3, #32
 80024fe:	2200      	movs	r2, #0
 8002500:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002502:	79fa      	ldrb	r2, [r7, #7]
 8002504:	4912      	ldr	r1, [pc, #72]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	3322      	adds	r3, #34	; 0x22
 8002512:	2203      	movs	r2, #3
 8002514:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002516:	79fa      	ldrb	r2, [r7, #7]
 8002518:	490d      	ldr	r1, [pc, #52]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	3323      	adds	r3, #35	; 0x23
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 800252a:	79fa      	ldrb	r2, [r7, #7]
 800252c:	4908      	ldr	r1, [pc, #32]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	3324      	adds	r3, #36	; 0x24
 800253a:	2208      	movs	r2, #8
 800253c:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	6839      	ldr	r1, [r7, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f8a2 	bl	800268c <L6474_SetRegisterToGivenValues>
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200003f0 	.word	0x200003f0

08002554 <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 800255e:	79fa      	ldrb	r2, [r7, #7]
 8002560:	4949      	ldr	r1, [pc, #292]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	3318      	adds	r3, #24
 800256e:	22a0      	movs	r2, #160	; 0xa0
 8002570:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 8002572:	79fa      	ldrb	r2, [r7, #7]
 8002574:	4944      	ldr	r1, [pc, #272]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	440b      	add	r3, r1
 8002580:	331a      	adds	r3, #26
 8002582:	22a0      	movs	r2, #160	; 0xa0
 8002584:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 8002586:	79fa      	ldrb	r2, [r7, #7]
 8002588:	493f      	ldr	r1, [pc, #252]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	331c      	adds	r3, #28
 8002596:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800259a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 800259c:	79fa      	ldrb	r2, [r7, #7]
 800259e:	493a      	ldr	r1, [pc, #232]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	331e      	adds	r3, #30
 80025ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 80025b0:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80025b2:	79fa      	ldrb	r2, [r7, #7]
 80025b4:	4934      	ldr	r1, [pc, #208]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80025c4:	79fa      	ldrb	r2, [r7, #7]
 80025c6:	4930      	ldr	r1, [pc, #192]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	3304      	adds	r3, #4
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80025d8:	79fa      	ldrb	r2, [r7, #7]
 80025da:	492b      	ldr	r1, [pc, #172]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	440b      	add	r3, r1
 80025e6:	3308      	adds	r3, #8
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80025ec:	79fa      	ldrb	r2, [r7, #7]
 80025ee:	4926      	ldr	r1, [pc, #152]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	330c      	adds	r3, #12
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	4921      	ldr	r1, [pc, #132]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	3310      	adds	r3, #16
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002614:	79fa      	ldrb	r2, [r7, #7]
 8002616:	491c      	ldr	r1, [pc, #112]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	440b      	add	r3, r1
 8002622:	3314      	adds	r3, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	4917      	ldr	r1, [pc, #92]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	3320      	adds	r3, #32
 8002638:	2200      	movs	r2, #0
 800263a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 800263c:	79fa      	ldrb	r2, [r7, #7]
 800263e:	4912      	ldr	r1, [pc, #72]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	3322      	adds	r3, #34	; 0x22
 800264c:	2203      	movs	r2, #3
 800264e:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002650:	79fa      	ldrb	r2, [r7, #7]
 8002652:	490d      	ldr	r1, [pc, #52]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	440b      	add	r3, r1
 800265e:	3323      	adds	r3, #35	; 0x23
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 8002664:	79fa      	ldrb	r2, [r7, #7]
 8002666:	4908      	ldr	r1, [pc, #32]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	3324      	adds	r3, #36	; 0x24
 8002674:	2208      	movs	r2, #8
 8002676:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f882 	bl	8002784 <L6474_SetRegisterToPredefinedValues>

}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200003f0 	.word	0x200003f0

0800268c <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	2200      	movs	r2, #0
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fd6e 	bl	8001180 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	2200      	movs	r2, #0
 80026a8:	2102      	movs	r1, #2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fd68 	bl	8001180 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2200      	movs	r2, #0
 80026b4:	2103      	movs	r1, #3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fd62 	bl	8001180 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	edd3 7a02 	vldr	s15, [r3, #8]
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	eeb0 0a67 	vmov.f32	s0, s15
 80026c8:	2109      	movs	r1, #9
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fa62 	bl	8001b94 <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 80026d8:	4313      	orrs	r3, r2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	210e      	movs	r1, #14
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fd4c 	bl	8001180 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	eeb0 0a67 	vmov.f32	s0, s15
 80026f4:	210f      	movs	r1, #15
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fa4c 	bl	8001b94 <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	eeb0 0a67 	vmov.f32	s0, s15
 8002708:	2110      	movs	r1, #16
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fa42 	bl	8001b94 <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	edd3 7a03 	vldr	s15, [r3, #12]
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	eeb0 0a67 	vmov.f32	s0, s15
 800271c:	2113      	movs	r1, #19
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fa38 	bl	8001b94 <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 800272c:	4313      	orrs	r3, r2
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	2116      	movs	r1, #22
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fd22 	bl	8001180 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	2117      	movs	r1, #23
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fd1b 	bl	8001180 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	7c5b      	ldrb	r3, [r3, #17]
 8002754:	4313      	orrs	r3, r2
 8002756:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 800275c:	4313      	orrs	r3, r2
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002766:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 800276c:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 800276e:	461a      	mov	r2, r3
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	2118      	movs	r1, #24
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fd03 	bl	8001180 <L6474_CmdSetParam>
  
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	2200      	movs	r2, #0
 8002792:	2101      	movs	r1, #1
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fcf3 	bl	8001180 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2200      	movs	r2, #0
 800279e:	2102      	movs	r1, #2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fced 	bl	8001180 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2103      	movs	r1, #3
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe fce7 	bl	8001180 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	f000 8094 	beq.w	80028e2 <L6474_SetRegisterToPredefinedValues+0x15e>
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f300 80d7 	bgt.w	800296e <L6474_SetRegisterToPredefinedValues+0x1ea>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <L6474_SetRegisterToPredefinedValues+0x46>
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d046      	beq.n	8002856 <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 80027c8:	e0d1      	b.n	800296e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 80027ca:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002978 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80027ce:	f000 fc2b 	bl	8003028 <L6474_Tval_Current_to_Par>
 80027d2:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80027d4:	461a      	mov	r2, r3
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	2109      	movs	r1, #9
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fcd0 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	2235      	movs	r2, #53	; 0x35
 80027e4:	210e      	movs	r1, #14
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fcca 	bl	8001180 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 80027ec:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80027f0:	f000 fc3e 	bl	8003070 <L6474_Tmin_Time_to_Par>
 80027f4:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80027f6:	461a      	mov	r2, r3
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	210f      	movs	r1, #15
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fcbf 	bl	8001180 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 8002802:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002806:	f000 fc33 	bl	8003070 <L6474_Tmin_Time_to_Par>
 800280a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800280c:	461a      	mov	r2, r3
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	2110      	movs	r1, #16
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fcb4 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	2201      	movs	r2, #1
 800281c:	2113      	movs	r1, #19
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fcae 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	228c      	movs	r2, #140	; 0x8c
 8002828:	2116      	movs	r1, #22
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fca8 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	22cf      	movs	r2, #207	; 0xcf
 8002834:	2117      	movs	r1, #23
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fca2 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002842:	2118      	movs	r1, #24
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fc9b 	bl	8001180 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fbec 	bl	800202c <L6474_SetStopMode>
      break;
 8002854:	e08b      	b.n	800296e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 8002856:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002978 <L6474_SetRegisterToPredefinedValues+0x1f4>
 800285a:	f000 fbe5 	bl	8003028 <L6474_Tval_Current_to_Par>
 800285e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002860:	461a      	mov	r2, r3
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	2109      	movs	r1, #9
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fc8a 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	2235      	movs	r2, #53	; 0x35
 8002870:	210e      	movs	r1, #14
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fc84 	bl	8001180 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 8002878:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800287c:	f000 fbf8 	bl	8003070 <L6474_Tmin_Time_to_Par>
 8002880:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002882:	461a      	mov	r2, r3
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	210f      	movs	r1, #15
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fc79 	bl	8001180 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 800288e:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002892:	f000 fbed 	bl	8003070 <L6474_Tmin_Time_to_Par>
 8002896:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002898:	461a      	mov	r2, r3
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2110      	movs	r1, #16
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fc6e 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	2201      	movs	r2, #1
 80028a8:	2113      	movs	r1, #19
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fc68 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	228c      	movs	r2, #140	; 0x8c
 80028b4:	2116      	movs	r1, #22
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fc62 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	22cf      	movs	r2, #207	; 0xcf
 80028c0:	2117      	movs	r1, #23
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fc5c 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 80028ce:	2118      	movs	r1, #24
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fc55 	bl	8001180 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fba6 	bl	800202c <L6474_SetStopMode>
      break;
 80028e0:	e045      	b.n	800296e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 80028e2:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002978 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80028e6:	f000 fb9f 	bl	8003028 <L6474_Tval_Current_to_Par>
 80028ea:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80028ec:	461a      	mov	r2, r3
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2109      	movs	r1, #9
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fc44 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	2235      	movs	r2, #53	; 0x35
 80028fc:	210e      	movs	r1, #14
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fc3e 	bl	8001180 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 8002904:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002908:	f000 fbb2 	bl	8003070 <L6474_Tmin_Time_to_Par>
 800290c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800290e:	461a      	mov	r2, r3
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	210f      	movs	r1, #15
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fc33 	bl	8001180 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 800291a:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800291e:	f000 fba7 	bl	8003070 <L6474_Tmin_Time_to_Par>
 8002922:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002924:	461a      	mov	r2, r3
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2110      	movs	r1, #16
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fc28 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	2201      	movs	r2, #1
 8002934:	2113      	movs	r1, #19
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fc22 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	228c      	movs	r2, #140	; 0x8c
 8002940:	2116      	movs	r1, #22
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fc1c 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	22cf      	movs	r2, #207	; 0xcf
 800294c:	2117      	movs	r1, #23
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fc16 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800295a:	2118      	movs	r1, #24
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fc0f 	bl	8001180 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fb60 	bl	800202c <L6474_SetStopMode>
      break;
 800296c:	bf00      	nop
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	437a0000 	.word	0x437a0000

0800297c <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fa65 	bl	8000e58 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 800298e:	79fa      	ldrb	r2, [r7, #7]
 8002990:	4922      	ldr	r1, [pc, #136]	; (8002a1c <L6474_StartMovement+0xa0>)
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	3308      	adds	r3, #8
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 80029a4:	79fa      	ldrb	r2, [r7, #7]
 80029a6:	491d      	ldr	r1, [pc, #116]	; (8002a1c <L6474_StartMovement+0xa0>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	3324      	adds	r3, #36	; 0x24
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e009      	b.n	80029ce <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 80029ba:	79fa      	ldrb	r2, [r7, #7]
 80029bc:	4917      	ldr	r1, [pc, #92]	; (8002a1c <L6474_StartMovement+0xa0>)
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	3324      	adds	r3, #36	; 0x24
 80029ca:	2202      	movs	r2, #2
 80029cc:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 80029ce:	79fa      	ldrb	r2, [r7, #7]
 80029d0:	4912      	ldr	r1, [pc, #72]	; (8002a1c <L6474_StartMovement+0xa0>)
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80029e0:	79fa      	ldrb	r2, [r7, #7]
 80029e2:	490e      	ldr	r1, [pc, #56]	; (8002a1c <L6474_StartMovement+0xa0>)
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	330c      	adds	r3, #12
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 80029f4:	79fa      	ldrb	r2, [r7, #7]
 80029f6:	4909      	ldr	r1, [pc, #36]	; (8002a1c <L6474_StartMovement+0xa0>)
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	331e      	adds	r3, #30
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fb61 	bl	80020d4 <L6474_ApplySpeed>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200003f0 	.word	0x200003f0

08002a20 <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08c      	sub	sp, #48	; 0x30
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 8002a2a:	4b96      	ldr	r3, [pc, #600]	; (8002c84 <L6474_StepClockHandler+0x264>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 8002a30:	79fa      	ldrb	r2, [r7, #7]
 8002a32:	4995      	ldr	r1, [pc, #596]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	330c      	adds	r3, #12
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	1c59      	adds	r1, r3, #1
 8002a44:	4890      	ldr	r0, [pc, #576]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4403      	add	r3, r0
 8002a50:	330c      	adds	r3, #12
 8002a52:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 8002a54:	79fa      	ldrb	r2, [r7, #7]
 8002a56:	498c      	ldr	r1, [pc, #560]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	3324      	adds	r3, #36	; 0x24
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	f000 810f 	beq.w	8002c8c <L6474_StepClockHandler+0x26c>
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	f300 82a4 	bgt.w	8002fbc <L6474_StepClockHandler+0x59c>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <L6474_StepClockHandler+0x60>
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	f000 819b 	beq.w	8002db4 <L6474_StepClockHandler+0x394>
      }
      break;
    }
    default: 
    {
      break;
 8002a7e:	e29d      	b.n	8002fbc <L6474_StepClockHandler+0x59c>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 8002a80:	79fa      	ldrb	r2, [r7, #7]
 8002a82:	4981      	ldr	r1, [pc, #516]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	330c      	adds	r3, #12
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 8002a94:	79fa      	ldrb	r2, [r7, #7]
 8002a96:	497c      	ldr	r1, [pc, #496]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 8002aa8:	79fa      	ldrb	r2, [r7, #7]
 8002aaa:	4977      	ldr	r1, [pc, #476]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3320      	adds	r3, #32
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 8002abc:	79fa      	ldrb	r2, [r7, #7]
 8002abe:	4972      	ldr	r1, [pc, #456]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	3318      	adds	r3, #24
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002ad4:	79fa      	ldrb	r2, [r7, #7]
 8002ad6:	496c      	ldr	r1, [pc, #432]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3322      	adds	r3, #34	; 0x22
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d017      	beq.n	8002b1c <L6474_StepClockHandler+0xfc>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002aec:	79fa      	ldrb	r2, [r7, #7]
 8002aee:	4966      	ldr	r1, [pc, #408]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	3322      	adds	r3, #34	; 0x22
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01f      	beq.n	8002b44 <L6474_StepClockHandler+0x124>
             (relPos == devicePrm[deviceId].startDecPos)))
 8002b04:	79fa      	ldrb	r2, [r7, #7]
 8002b06:	4960      	ldr	r1, [pc, #384]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	3310      	adds	r3, #16
 8002b14:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d113      	bne.n	8002b44 <L6474_StepClockHandler+0x124>
          devicePrm[deviceId].motionState = DECELERATING;
 8002b1c:	79fa      	ldrb	r2, [r7, #7]
 8002b1e:	495a      	ldr	r1, [pc, #360]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	3324      	adds	r3, #36	; 0x24
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 8002b30:	79fa      	ldrb	r2, [r7, #7]
 8002b32:	4955      	ldr	r1, [pc, #340]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e09e      	b.n	8002c82 <L6474_StepClockHandler+0x262>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	4950      	ldr	r1, [pc, #320]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	331c      	adds	r3, #28
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d20f      	bcs.n	8002b7e <L6474_StepClockHandler+0x15e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002b5e:	79fa      	ldrb	r2, [r7, #7]
 8002b60:	4949      	ldr	r1, [pc, #292]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3322      	adds	r3, #34	; 0x22
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00e      	beq.n	8002b94 <L6474_StepClockHandler+0x174>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d10a      	bne.n	8002b94 <L6474_StepClockHandler+0x174>
          devicePrm[deviceId].motionState = STEADY;
 8002b7e:	79fa      	ldrb	r2, [r7, #7]
 8002b80:	4941      	ldr	r1, [pc, #260]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3324      	adds	r3, #36	; 0x24
 8002b8e:	2203      	movs	r2, #3
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e076      	b.n	8002c82 <L6474_StepClockHandler+0x262>
          bool speedUpdated = FALSE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 8002b9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <L6474_StepClockHandler+0x184>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002ba4:	79fa      	ldrb	r2, [r7, #7]
 8002ba6:	4938      	ldr	r1, [pc, #224]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	6819      	ldr	r1, [r3, #0]
 8002bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	79fa      	ldrb	r2, [r7, #7]
 8002bbe:	4419      	add	r1, r3
 8002bc0:	4831      	ldr	r0, [pc, #196]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4403      	add	r3, r0
 8002bcc:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002bce:	e017      	b.n	8002c00 <L6474_StepClockHandler+0x1e0>
            devicePrm[deviceId].accu -= (0X10000L);
 8002bd0:	79fa      	ldrb	r2, [r7, #7]
 8002bd2:	492d      	ldr	r1, [pc, #180]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	440b      	add	r3, r1
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	79fa      	ldrb	r2, [r7, #7]
 8002be2:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002be6:	4828      	ldr	r0, [pc, #160]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4403      	add	r3, r0
 8002bf2:	6019      	str	r1, [r3, #0]
            speed +=1;
 8002bf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002c00:	79fa      	ldrb	r2, [r7, #7]
 8002c02:	4921      	ldr	r1, [pc, #132]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d2dc      	bcs.n	8002bd0 <L6474_StepClockHandler+0x1b0>
          if (speedUpdated)
 8002c16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 81d0 	beq.w	8002fc0 <L6474_StepClockHandler+0x5a0>
            if (speed > devicePrm[deviceId].maxSpeed)
 8002c20:	79fa      	ldrb	r2, [r7, #7]
 8002c22:	4919      	ldr	r1, [pc, #100]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	331c      	adds	r3, #28
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d909      	bls.n	8002c4e <L6474_StepClockHandler+0x22e>
              speed = devicePrm[deviceId].maxSpeed;
 8002c3a:	79fa      	ldrb	r2, [r7, #7]
 8002c3c:	4912      	ldr	r1, [pc, #72]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	331c      	adds	r3, #28
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8002c4e:	79fa      	ldrb	r2, [r7, #7]
 8002c50:	490d      	ldr	r1, [pc, #52]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3320      	adds	r3, #32
 8002c5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c60:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002c62:	79fa      	ldrb	r2, [r7, #7]
 8002c64:	4908      	ldr	r1, [pc, #32]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	3320      	adds	r3, #32
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fa2a 	bl	80020d4 <L6474_ApplySpeed>
        break;
 8002c80:	e19e      	b.n	8002fc0 <L6474_StepClockHandler+0x5a0>
 8002c82:	e19d      	b.n	8002fc0 <L6474_StepClockHandler+0x5a0>
 8002c84:	200003ed 	.word	0x200003ed
 8002c88:	200003f0 	.word	0x200003f0
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002c8c:	79fa      	ldrb	r2, [r7, #7]
 8002c8e:	499c      	ldr	r1, [pc, #624]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	440b      	add	r3, r1
 8002c9a:	331c      	adds	r3, #28
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002ca0:	79fa      	ldrb	r2, [r7, #7]
 8002ca2:	4997      	ldr	r1, [pc, #604]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	330c      	adds	r3, #12
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002cb4:	79fa      	ldrb	r2, [r7, #7]
 8002cb6:	4992      	ldr	r1, [pc, #584]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3322      	adds	r3, #34	; 0x22
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d030      	beq.n	8002d2e <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002ccc:	79fa      	ldrb	r2, [r7, #7]
 8002cce:	498c      	ldr	r1, [pc, #560]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3322      	adds	r3, #34	; 0x22
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <L6474_StepClockHandler+0x2dc>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	4986      	ldr	r1, [pc, #536]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3310      	adds	r3, #16
 8002cf4:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002cf6:	6a3a      	ldr	r2, [r7, #32]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d218      	bcs.n	8002d2e <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002cfc:	79fa      	ldrb	r2, [r7, #7]
 8002cfe:	4980      	ldr	r1, [pc, #512]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	3322      	adds	r3, #34	; 0x22
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d120      	bne.n	8002d56 <L6474_StepClockHandler+0x336>
            (devicePrm[deviceId].speed > maxSpeed)))
 8002d14:	79fa      	ldrb	r2, [r7, #7]
 8002d16:	497a      	ldr	r1, [pc, #488]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	3320      	adds	r3, #32
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d213      	bcs.n	8002d56 <L6474_StepClockHandler+0x336>
        devicePrm[deviceId].motionState = DECELERATING;
 8002d2e:	79fa      	ldrb	r2, [r7, #7]
 8002d30:	4973      	ldr	r1, [pc, #460]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3324      	adds	r3, #36	; 0x24
 8002d3e:	2202      	movs	r2, #2
 8002d40:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002d42:	79fa      	ldrb	r2, [r7, #7]
 8002d44:	496e      	ldr	r1, [pc, #440]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
      break;
 8002d54:	e136      	b.n	8002fc4 <L6474_StepClockHandler+0x5a4>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d56:	79fa      	ldrb	r2, [r7, #7]
 8002d58:	4969      	ldr	r1, [pc, #420]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	3322      	adds	r3, #34	; 0x22
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 812a 	bne.w	8002fc4 <L6474_StepClockHandler+0x5a4>
               (devicePrm[deviceId].speed < maxSpeed))
 8002d70:	79fa      	ldrb	r2, [r7, #7]
 8002d72:	4963      	ldr	r1, [pc, #396]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3320      	adds	r3, #32
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d86:	429a      	cmp	r2, r3
 8002d88:	f240 811c 	bls.w	8002fc4 <L6474_StepClockHandler+0x5a4>
        devicePrm[deviceId].motionState = ACCELERATING;
 8002d8c:	79fa      	ldrb	r2, [r7, #7]
 8002d8e:	495c      	ldr	r1, [pc, #368]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	3324      	adds	r3, #36	; 0x24
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002da0:	79fa      	ldrb	r2, [r7, #7]
 8002da2:	4957      	ldr	r1, [pc, #348]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
      break;
 8002db2:	e107      	b.n	8002fc4 <L6474_StepClockHandler+0x5a4>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002db4:	79fa      	ldrb	r2, [r7, #7]
 8002db6:	4952      	ldr	r1, [pc, #328]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 8002dc8:	79fa      	ldrb	r2, [r7, #7]
 8002dca:	494d      	ldr	r1, [pc, #308]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3320      	adds	r3, #32
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 8002ddc:	79fa      	ldrb	r2, [r7, #7]
 8002dde:	4948      	ldr	r1, [pc, #288]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	331a      	adds	r3, #26
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	041b      	lsls	r3, r3, #16
 8002df2:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002df4:	79fa      	ldrb	r2, [r7, #7]
 8002df6:	4942      	ldr	r1, [pc, #264]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	3322      	adds	r3, #34	; 0x22
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d10c      	bne.n	8002e26 <L6474_StepClockHandler+0x406>
 8002e0c:	79fa      	ldrb	r2, [r7, #7]
 8002e0e:	493c      	ldr	r1, [pc, #240]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	331e      	adds	r3, #30
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d917      	bls.n	8002e56 <L6474_StepClockHandler+0x436>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002e26:	79fa      	ldrb	r2, [r7, #7]
 8002e28:	4935      	ldr	r1, [pc, #212]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	3322      	adds	r3, #34	; 0x22
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <L6474_StepClockHandler+0x440>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	492f      	ldr	r1, [pc, #188]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d304      	bcc.n	8002e60 <L6474_StepClockHandler+0x440>
        L6474_HardStop(deviceId);
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fcab 	bl	80017b4 <L6474_HardStop>
 8002e5e:	e0ac      	b.n	8002fba <L6474_StepClockHandler+0x59a>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002e60:	79fa      	ldrb	r2, [r7, #7]
 8002e62:	4927      	ldr	r1, [pc, #156]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3322      	adds	r3, #34	; 0x22
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d117      	bne.n	8002ea8 <L6474_StepClockHandler+0x488>
               (speed <= devicePrm[deviceId].maxSpeed))
 8002e78:	79fa      	ldrb	r2, [r7, #7]
 8002e7a:	4921      	ldr	r1, [pc, #132]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	331c      	adds	r3, #28
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002e8c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d80a      	bhi.n	8002ea8 <L6474_StepClockHandler+0x488>
        devicePrm[deviceId].motionState = STEADY;
 8002e92:	79fa      	ldrb	r2, [r7, #7]
 8002e94:	491a      	ldr	r1, [pc, #104]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3324      	adds	r3, #36	; 0x24
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e088      	b.n	8002fba <L6474_StepClockHandler+0x59a>
        if (speed > devicePrm[deviceId].minSpeed)
 8002ea8:	79fa      	ldrb	r2, [r7, #7]
 8002eaa:	4915      	ldr	r1, [pc, #84]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	331e      	adds	r3, #30
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	f240 8082 	bls.w	8002fc8 <L6474_StepClockHandler+0x5a8>
          bool speedUpdated = FALSE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 8002eca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <L6474_StepClockHandler+0x4b4>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 8002ed4:	79fa      	ldrb	r2, [r7, #7]
 8002ed6:	490a      	ldr	r1, [pc, #40]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	6819      	ldr	r1, [r3, #0]
 8002ee4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	79fa      	ldrb	r2, [r7, #7]
 8002eee:	4419      	add	r1, r3
 8002ef0:	4803      	ldr	r0, [pc, #12]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4403      	add	r3, r0
 8002efc:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002efe:	e01c      	b.n	8002f3a <L6474_StepClockHandler+0x51a>
 8002f00:	200003f0 	.word	0x200003f0
            devicePrm[deviceId].accu -= (0X10000L);
 8002f04:	79fa      	ldrb	r2, [r7, #7]
 8002f06:	4934      	ldr	r1, [pc, #208]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	440b      	add	r3, r1
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	79fa      	ldrb	r2, [r7, #7]
 8002f16:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002f1a:	482f      	ldr	r0, [pc, #188]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4403      	add	r3, r0
 8002f26:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 8002f28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d902      	bls.n	8002f34 <L6474_StepClockHandler+0x514>
              speed -=1;
 8002f2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f30:	3b01      	subs	r3, #1
 8002f32:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002f3a:	79fa      	ldrb	r2, [r7, #7]
 8002f3c:	4926      	ldr	r1, [pc, #152]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4e:	d2d9      	bcs.n	8002f04 <L6474_StepClockHandler+0x4e4>
          if (speedUpdated)
 8002f50:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d037      	beq.n	8002fc8 <L6474_StepClockHandler+0x5a8>
            if (speed < devicePrm[deviceId].minSpeed)
 8002f58:	79fa      	ldrb	r2, [r7, #7]
 8002f5a:	491f      	ldr	r1, [pc, #124]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	440b      	add	r3, r1
 8002f66:	331e      	adds	r3, #30
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d209      	bcs.n	8002f86 <L6474_StepClockHandler+0x566>
              speed = devicePrm[deviceId].minSpeed;
 8002f72:	79fa      	ldrb	r2, [r7, #7]
 8002f74:	4918      	ldr	r1, [pc, #96]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	440b      	add	r3, r1
 8002f80:	331e      	adds	r3, #30
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 8002f86:	79fa      	ldrb	r2, [r7, #7]
 8002f88:	4913      	ldr	r1, [pc, #76]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	3320      	adds	r3, #32
 8002f96:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002f98:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	490e      	ldr	r1, [pc, #56]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3320      	adds	r3, #32
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f88e 	bl	80020d4 <L6474_ApplySpeed>
      break;
 8002fb8:	e006      	b.n	8002fc8 <L6474_StepClockHandler+0x5a8>
 8002fba:	e005      	b.n	8002fc8 <L6474_StepClockHandler+0x5a8>
      break;
 8002fbc:	bf00      	nop
 8002fbe:	e004      	b.n	8002fca <L6474_StepClockHandler+0x5aa>
        break;
 8002fc0:	bf00      	nop
 8002fc2:	e002      	b.n	8002fca <L6474_StepClockHandler+0x5aa>
      break;
 8002fc4:	bf00      	nop
 8002fc6:	e000      	b.n	8002fca <L6474_StepClockHandler+0x5aa>
      break;
 8002fc8:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <L6474_StepClockHandler+0x5bc>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	3730      	adds	r7, #48	; 0x30
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200003f0 	.word	0x200003f0
 8002fdc:	200003ed 	.word	0x200003ed

08002fe0 <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 8002fea:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fee:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003020 <L6474_Ocd_Th_to_Par+0x40>
 8002ff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ff6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003024 <L6474_Ocd_Th_to_Par+0x44>
 8002ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800300a:	edc7 7a00 	vstr	s15, [r7]
 800300e:	783b      	ldrb	r3, [r7, #0]
 8003010:	b2db      	uxtb	r3, r3
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	43bb8000 	.word	0x43bb8000
 8003024:	3b2eb80f 	.word	0x3b2eb80f

08003028 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 8003032:	edd7 7a01 	vldr	s15, [r7, #4]
 8003036:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003068 <L6474_Tval_Current_to_Par+0x40>
 800303a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800303e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800306c <L6474_Tval_Current_to_Par+0x44>
 8003042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003046:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800304a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800304e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003052:	edc7 7a00 	vstr	s15, [r7]
 8003056:	783b      	ldrb	r3, [r7, #0]
 8003058:	b2db      	uxtb	r3, r3
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	41fa0000 	.word	0x41fa0000
 800306c:	3d03126f 	.word	0x3d03126f

08003070 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 800307a:	edd7 7a01 	vldr	s15, [r7, #4]
 800307e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003086:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800308a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800308e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003096:	edc7 7a00 	vstr	s15, [r7]
 800309a:	783b      	ldrb	r3, [r7, #0]
 800309c:	b2db      	uxtb	r3, r3
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 80030b6:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <L6474_WriteBytes+0x40>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	6839      	ldr	r1, [r7, #0]
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f001 fa93 	bl	80045ec <L6474_Board_SpiWriteBytes>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 80030cc:	f248 0001 	movw	r0, #32769	; 0x8001
 80030d0:	f7ff f91e 	bl	8002310 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <L6474_WriteBytes+0x44>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <L6474_WriteBytes+0x48>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
  }
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	200003d0 	.word	0x200003d0
 80030f0:	200003ed 	.word	0x200003ed
 80030f4:	200003ec 	.word	0x200003ec

080030f8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08e      	sub	sp, #56	; 0x38
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	2234      	movs	r2, #52	; 0x34
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f025 fc45 	bl	8028994 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800310a:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800310c:	4a3a      	ldr	r2, [pc, #232]	; (80031f8 <MX_LTDC_Init+0x100>)
 800310e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003110:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003112:	2200      	movs	r2, #0
 8003114:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003116:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800311c:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003122:	4b34      	ldr	r3, [pc, #208]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 39;
 8003128:	4b32      	ldr	r3, [pc, #200]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800312a:	2227      	movs	r2, #39	; 0x27
 800312c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 800312e:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003130:	2208      	movs	r2, #8
 8003132:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003136:	222a      	movs	r2, #42	; 0x2a
 8003138:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800313a:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800313c:	220b      	movs	r2, #11
 800313e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8003140:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003142:	f240 220a 	movw	r2, #522	; 0x20a
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800314a:	f240 121b 	movw	r2, #283	; 0x11b
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 528;
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003152:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003158:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800315a:	f240 121d 	movw	r2, #285	; 0x11d
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003170:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003178:	481e      	ldr	r0, [pc, #120]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800317a:	f004 f871 	bl	8007260 <HAL_LTDC_Init>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003184:	f000 fab4 	bl	80036f0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800318c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003190:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8003196:	f44f 7388 	mov.w	r3, #272	; 0x110
 800319a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800319c:	2302      	movs	r3, #2
 800319e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80031a0:	23ff      	movs	r3, #255	; 0xff
 80031a2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80031a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ac:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80031ae:	2305      	movs	r3, #5
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80031b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80031bc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	2200      	movs	r2, #0
 80031d8:	4619      	mov	r1, r3
 80031da:	4806      	ldr	r0, [pc, #24]	; (80031f4 <MX_LTDC_Init+0xfc>)
 80031dc:	f004 f9c8 	bl	8007570 <HAL_LTDC_ConfigLayer>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 80031e6:	f000 fa83 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80031ea:	bf00      	nop
 80031ec:	3738      	adds	r7, #56	; 0x38
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000468 	.word	0x20000468
 80031f8:	50001000 	.word	0x50001000

080031fc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b0c0      	sub	sp, #256	; 0x100
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003214:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003218:	22bc      	movs	r2, #188	; 0xbc
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f025 fbb9 	bl	8028994 <memset>
  if(ltdcHandle->Instance==LTDC)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4abd      	ldr	r2, [pc, #756]	; (800351c <HAL_LTDC_MspInit+0x320>)
 8003228:	4293      	cmp	r3, r2
 800322a:	f040 8171 	bne.w	8003510 <HAL_LTDC_MspInit+0x314>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800322e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8003234:	2301      	movs	r3, #1
 8003236:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8003238:	2312      	movs	r3, #18
 800323a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800323c:	2302      	movs	r3, #2
 800323e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003240:	2302      	movs	r3, #2
 8003242:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3R = 1;
 8003244:	2301      	movs	r3, #1
 8003246:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003248:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800324c:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800324e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003252:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8003254:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003258:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800325a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800325e:	4618      	mov	r0, r3
 8003260:	f005 fbcc 	bl	80089fc <HAL_RCCEx_PeriphCLKConfig>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 800326a:	f000 fa41 	bl	80036f0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800326e:	4bac      	ldr	r3, [pc, #688]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003270:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003274:	4aaa      	ldr	r2, [pc, #680]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003276:	f043 0308 	orr.w	r3, r3, #8
 800327a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800327e:	4ba8      	ldr	r3, [pc, #672]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003280:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800328c:	4ba4      	ldr	r3, [pc, #656]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 800328e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003292:	4aa3      	ldr	r2, [pc, #652]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003294:	f043 0310 	orr.w	r3, r3, #16
 8003298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800329c:	4ba0      	ldr	r3, [pc, #640]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 800329e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80032aa:	4b9d      	ldr	r3, [pc, #628]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b0:	4a9b      	ldr	r2, [pc, #620]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ba:	4b99      	ldr	r3, [pc, #612]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032c8:	4b95      	ldr	r3, [pc, #596]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ce:	4a94      	ldr	r2, [pc, #592]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032d0:	f043 0320 	orr.w	r3, r3, #32
 80032d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032d8:	4b91      	ldr	r3, [pc, #580]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	623b      	str	r3, [r7, #32]
 80032e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e6:	4b8e      	ldr	r3, [pc, #568]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ec:	4a8c      	ldr	r2, [pc, #560]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032ee:	f043 0304 	orr.w	r3, r3, #4
 80032f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032f6:	4b8a      	ldr	r3, [pc, #552]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003304:	4b86      	ldr	r3, [pc, #536]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800330a:	4a85      	ldr	r2, [pc, #532]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003314:	4b82      	ldr	r3, [pc, #520]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	61bb      	str	r3, [r7, #24]
 8003320:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003322:	4b7f      	ldr	r3, [pc, #508]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003328:	4a7d      	ldr	r2, [pc, #500]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003332:	4b7b      	ldr	r3, [pc, #492]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003340:	4b77      	ldr	r3, [pc, #476]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003346:	4a76      	ldr	r2, [pc, #472]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003350:	4b73      	ldr	r3, [pc, #460]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800335e:	4b70      	ldr	r3, [pc, #448]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003364:	4a6e      	ldr	r2, [pc, #440]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800336e:	4b6c      	ldr	r3, [pc, #432]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800337c:	2370      	movs	r3, #112	; 0x70
 800337e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003394:	230e      	movs	r3, #14
 8003396:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800339a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800339e:	4619      	mov	r1, r3
 80033a0:	4860      	ldr	r0, [pc, #384]	; (8003524 <HAL_LTDC_MspInit+0x328>)
 80033a2:	f003 fd93 	bl	8006ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80033a6:	f240 63f7 	movw	r3, #1783	; 0x6f7
 80033aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033c0:	230e      	movs	r3, #14
 80033c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033ca:	4619      	mov	r1, r3
 80033cc:	4856      	ldr	r0, [pc, #344]	; (8003528 <HAL_LTDC_MspInit+0x32c>)
 80033ce:	f003 fd7d 	bl	8006ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033ec:	230e      	movs	r3, #14
 80033ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033f6:	4619      	mov	r1, r3
 80033f8:	484c      	ldr	r0, [pc, #304]	; (800352c <HAL_LTDC_MspInit+0x330>)
 80033fa:	f003 fd67 	bl	8006ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033fe:	2301      	movs	r3, #1
 8003400:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003416:	230e      	movs	r3, #14
 8003418:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800341c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003420:	4619      	mov	r1, r3
 8003422:	4843      	ldr	r0, [pc, #268]	; (8003530 <HAL_LTDC_MspInit+0x334>)
 8003424:	f003 fd52 	bl	8006ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003428:	2320      	movs	r3, #32
 800342a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003440:	230e      	movs	r3, #14
 8003442:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003446:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800344a:	4619      	mov	r1, r3
 800344c:	4839      	ldr	r0, [pc, #228]	; (8003534 <HAL_LTDC_MspInit+0x338>)
 800344e:	f003 fd3d 	bl	8006ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003452:	2302      	movs	r3, #2
 8003454:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800346a:	2309      	movs	r3, #9
 800346c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003470:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003474:	4619      	mov	r1, r3
 8003476:	4830      	ldr	r0, [pc, #192]	; (8003538 <HAL_LTDC_MspInit+0x33c>)
 8003478:	f003 fd28 	bl	8006ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_15;
 800347c:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8003480:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2300      	movs	r3, #0
 8003492:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003496:	230e      	movs	r3, #14
 8003498:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800349c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034a0:	4619      	mov	r1, r3
 80034a2:	4826      	ldr	r0, [pc, #152]	; (800353c <HAL_LTDC_MspInit+0x340>)
 80034a4:	f003 fd12 	bl	8006ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80034a8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80034ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034c2:	230e      	movs	r3, #14
 80034c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034cc:	4619      	mov	r1, r3
 80034ce:	481c      	ldr	r0, [pc, #112]	; (8003540 <HAL_LTDC_MspInit+0x344>)
 80034d0:	f003 fcfc 	bl	8006ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034ee:	2309      	movs	r3, #9
 80034f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034f8:	4619      	mov	r1, r3
 80034fa:	4811      	ldr	r0, [pc, #68]	; (8003540 <HAL_LTDC_MspInit+0x344>)
 80034fc:	f003 fce6 	bl	8006ecc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	2105      	movs	r1, #5
 8003504:	2058      	movs	r0, #88	; 0x58
 8003506:	f003 fabd 	bl	8006a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800350a:	2058      	movs	r0, #88	; 0x58
 800350c:	f003 fad4 	bl	8006ab8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003510:	bf00      	nop
 8003512:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	50001000 	.word	0x50001000
 8003520:	58024400 	.word	0x58024400
 8003524:	58021000 	.word	0x58021000
 8003528:	58022000 	.word	0x58022000
 800352c:	58021400 	.word	0x58021400
 8003530:	58020800 	.word	0x58020800
 8003534:	58020000 	.word	0x58020000
 8003538:	58020400 	.word	0x58020400
 800353c:	58021c00 	.word	0x58021c00
 8003540:	58021800 	.word	0x58021800

08003544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003548:	f001 f8b6 	bl	80046b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800354c:	f000 f824 	bl	8003598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003550:	f7fd fad8 	bl	8000b04 <MX_GPIO_Init>
  MX_SPI2_Init();
 8003554:	f000 f9a0 	bl	8003898 <MX_SPI2_Init>
  MX_ADC3_Init();
 8003558:	f7fd f894 	bl	8000684 <MX_ADC3_Init>
  MX_UART5_Init();
 800355c:	f000 fd18 	bl	8003f90 <MX_UART5_Init>
  MX_I2C1_SMBUS_Init();
 8003560:	f7fd fba2 	bl	8000ca8 <MX_I2C1_SMBUS_Init>
  MX_DMA2D_Init();
 8003564:	f7fd f9ae 	bl	80008c4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8003568:	f7ff fdc6 	bl	80030f8 <MX_LTDC_Init>
  MX_CRC_Init();
 800356c:	f7fd f966 	bl	800083c <MX_CRC_Init>
  MX_TIM2_Init();
 8003570:	f000 fc5a 	bl	8003e28 <MX_TIM2_Init>
  MX_TouchGFX_Init();
 8003574:	f00e f80a 	bl	801158c <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474,&gL6474InitParams);
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <main+0x50>)
 800357a:	b2db      	uxtb	r3, r3
 800357c:	4619      	mov	r1, r3
 800357e:	f641 104a 	movw	r0, #6474	; 0x194a
 8003582:	f000 f90f 	bl	80037a4 <BSP_MotorControl_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003586:	f00a fc13 	bl	800ddb0 <osKernelInitialize>
  MX_FREERTOS_Init();
 800358a:	f7fd f9f7 	bl	800097c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800358e:	f00a fc33 	bl	800ddf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003592:	e7fe      	b.n	8003592 <main+0x4e>
 8003594:	2000012c 	.word	0x2000012c

08003598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b09c      	sub	sp, #112	; 0x70
 800359c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800359e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a2:	224c      	movs	r2, #76	; 0x4c
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f025 f9f4 	bl	8028994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	2220      	movs	r2, #32
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f025 f9ee 	bl	8028994 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80035b8:	2002      	movs	r0, #2
 80035ba:	f004 f9e9 	bl	8007990 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035be:	2300      	movs	r3, #0
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4b34      	ldr	r3, [pc, #208]	; (8003694 <SystemClock_Config+0xfc>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4a33      	ldr	r2, [pc, #204]	; (8003694 <SystemClock_Config+0xfc>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035ce:	4b31      	ldr	r3, [pc, #196]	; (8003694 <SystemClock_Config+0xfc>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <SystemClock_Config+0x100>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4a2e      	ldr	r2, [pc, #184]	; (8003698 <SystemClock_Config+0x100>)
 80035de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e2:	6193      	str	r3, [r2, #24]
 80035e4:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <SystemClock_Config+0x100>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80035f0:	bf00      	nop
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <SystemClock_Config+0x100>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fe:	d1f8      	bne.n	80035f2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003600:	4b26      	ldr	r3, [pc, #152]	; (800369c <SystemClock_Config+0x104>)
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	f023 0303 	bic.w	r3, r3, #3
 8003608:	4a24      	ldr	r2, [pc, #144]	; (800369c <SystemClock_Config+0x104>)
 800360a:	f043 0302 	orr.w	r3, r3, #2
 800360e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003610:	2301      	movs	r3, #1
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800361a:	2302      	movs	r3, #2
 800361c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800361e:	2302      	movs	r3, #2
 8003620:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003622:	2301      	movs	r3, #1
 8003624:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003626:	2364      	movs	r3, #100	; 0x64
 8003628:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800362a:	2302      	movs	r3, #2
 800362c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800362e:	2304      	movs	r3, #4
 8003630:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003632:	2302      	movs	r3, #2
 8003634:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003636:	230c      	movs	r3, #12
 8003638:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800363a:	2300      	movs	r3, #0
 800363c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003646:	4618      	mov	r0, r3
 8003648:	f004 f9dc 	bl	8007a04 <HAL_RCC_OscConfig>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003652:	f000 f84d 	bl	80036f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003656:	233f      	movs	r3, #63	; 0x3f
 8003658:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800365a:	2303      	movs	r3, #3
 800365c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003662:	2308      	movs	r3, #8
 8003664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003666:	2340      	movs	r3, #64	; 0x40
 8003668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800366a:	2340      	movs	r3, #64	; 0x40
 800366c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800366e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003672:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003674:	2340      	movs	r3, #64	; 0x40
 8003676:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	2102      	movs	r1, #2
 800367c:	4618      	mov	r0, r3
 800367e:	f004 fdef 	bl	8008260 <HAL_RCC_ClockConfig>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003688:	f000 f832 	bl	80036f0 <Error_Handler>
  }
}
 800368c:	bf00      	nop
 800368e:	3770      	adds	r7, #112	; 0x70
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	58000400 	.word	0x58000400
 8003698:	58024800 	.word	0x58024800
 800369c:	58024400 	.word	0x58024400

080036a0 <MyFlagInterruptHandler>:

/* USER CODE BEGIN 4 */
//stepper driver interrupt
void MyFlagInterruptHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 80036a6:	2000      	movs	r0, #0
 80036a8:	f000 f8d0 	bl	800384c <BSP_MotorControl_CmdGetStatus>
 80036ac:	4603      	mov	r3, r0
 80036ae:	80fb      	strh	r3, [r7, #6]
  {
    //overcurrent detection
    // Action to be customized
  }

}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_ADC_LevelOutOfWindowCallback>:
// cpu temp interrupt
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc){
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	// do something in case of analog watchdog interrupts
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a04      	ldr	r2, [pc, #16]	; (80036ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036de:	f001 f827 	bl	8004730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40000400 	.word	0x40000400

080036f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036f4:	b672      	cpsid	i
}
 80036f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036f8:	e7fe      	b.n	80036f8 <Error_Handler+0x8>

080036fa <Powerstep01_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	2300      	movs	r3, #0
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800370a:	b480      	push	{r7}
 800370c:	af00      	add	r7, sp, #0
 800370e:	2300      	movs	r3, #0
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0
 800371e:	2300      	movs	r3, #0
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <BSP_MotorControl_AttachFlagInterrupt+0x26>
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e004      	b.n	800375c <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8003752:	f640 0002 	movw	r0, #2050	; 0x802
 8003756:	f000 f807 	bl	8003768 <BSP_MotorControl_ErrorHandler>
  }  
}
 800375a:	bf00      	nop
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000510 	.word	0x20000510

08003768 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <BSP_MotorControl_ErrorHandler+0x38>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <BSP_MotorControl_ErrorHandler+0x2e>
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <BSP_MotorControl_ErrorHandler+0x38>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <BSP_MotorControl_ErrorHandler+0x38>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	4610      	mov	r0, r2
 8003792:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8003794:	e000      	b.n	8003798 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8003796:	e7fe      	b.n	8003796 <BSP_MotorControl_ErrorHandler+0x2e>
}
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000510 	.word	0x20000510

080037a4 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] nbDevices Number of motor devices to use (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, uint8_t nbDevices)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	460a      	mov	r2, r1
 80037ae:	80fb      	strh	r3, [r7, #6]
 80037b0:	4613      	mov	r3, r2
 80037b2:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <BSP_MotorControl_Init+0xa0>)
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	8013      	strh	r3, [r2, #0]
  
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	f641 124a 	movw	r2, #6474	; 0x194a
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d105      	bne.n	80037d0 <BSP_MotorControl_Init+0x2c>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80037c4:	f7fd fe8e 	bl	80014e4 <L6474_GetMotorHandle>
 80037c8:	4603      	mov	r3, r0
 80037ca:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <BSP_MotorControl_Init+0xa4>)
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e020      	b.n	8003812 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d105      	bne.n	80037e2 <BSP_MotorControl_Init+0x3e>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 80037d6:	f7ff ff90 	bl	80036fa <Powerstep01_GetMotorHandle>
 80037da:	4603      	mov	r3, r0
 80037dc:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <BSP_MotorControl_Init+0xa4>)
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e017      	b.n	8003812 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	f641 023e 	movw	r2, #6206	; 0x183e
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d105      	bne.n	80037f8 <BSP_MotorControl_Init+0x54>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 80037ec:	f7ff ff8d 	bl	800370a <L6206_GetMotorHandle>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4a15      	ldr	r2, [pc, #84]	; (8003848 <BSP_MotorControl_Init+0xa4>)
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e00c      	b.n	8003812 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 80037fe:	d105      	bne.n	800380c <BSP_MotorControl_Init+0x68>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 8003800:	f7ff ff8b 	bl	800371a <L6208_GetMotorHandle>
 8003804:	4603      	mov	r3, r0
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <BSP_MotorControl_Init+0xa4>)
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e002      	b.n	8003812 <BSP_MotorControl_Init+0x6e>
  }
  else
  {
    motorDrvHandle = 0;
 800380c:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <BSP_MotorControl_Init+0xa4>)
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
  }

  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8003812:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <BSP_MotorControl_Init+0xa4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <BSP_MotorControl_Init+0x8e>
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <BSP_MotorControl_Init+0xa4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d006      	beq.n	8003832 <BSP_MotorControl_Init+0x8e>
  {
    motorDrvHandle->Init(nbDevices);
 8003824:	4b08      	ldr	r3, [pc, #32]	; (8003848 <BSP_MotorControl_Init+0xa4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	797a      	ldrb	r2, [r7, #5]
 800382c:	4610      	mov	r0, r2
 800382e:	4798      	blx	r3
 8003830:	e004      	b.n	800383c <BSP_MotorControl_Init+0x98>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 8003832:	f640 0004 	movw	r0, #2052	; 0x804
 8003836:	f7ff ff97 	bl	8003768 <BSP_MotorControl_ErrorHandler>
  }  
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000514 	.word	0x20000514
 8003848:	20000510 	.word	0x20000510

0800384c <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 800385a:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <BSP_MotorControl_CmdGetStatus+0x48>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00f      	beq.n	8003882 <BSP_MotorControl_CmdGetStatus+0x36>
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	79fa      	ldrb	r2, [r7, #7]
 8003878:	4610      	mov	r0, r2
 800387a:	4798      	blx	r3
 800387c:	4603      	mov	r3, r0
 800387e:	81fb      	strh	r3, [r7, #14]
 8003880:	e003      	b.n	800388a <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8003882:	f640 0022 	movw	r0, #2082	; 0x822
 8003886:	f7ff ff6f 	bl	8003768 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 800388a:	89fb      	ldrh	r3, [r7, #14]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000510 	.word	0x20000510

08003898 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800389c:	4b27      	ldr	r3, [pc, #156]	; (800393c <MX_SPI2_Init+0xa4>)
 800389e:	4a28      	ldr	r2, [pc, #160]	; (8003940 <MX_SPI2_Init+0xa8>)
 80038a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038a2:	4b26      	ldr	r3, [pc, #152]	; (800393c <MX_SPI2_Init+0xa4>)
 80038a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80038a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038aa:	4b24      	ldr	r3, [pc, #144]	; (800393c <MX_SPI2_Init+0xa4>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_32BIT;
 80038b0:	4b22      	ldr	r3, [pc, #136]	; (800393c <MX_SPI2_Init+0xa4>)
 80038b2:	221f      	movs	r2, #31
 80038b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b6:	4b21      	ldr	r3, [pc, #132]	; (800393c <MX_SPI2_Init+0xa4>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038bc:	4b1f      	ldr	r3, [pc, #124]	; (800393c <MX_SPI2_Init+0xa4>)
 80038be:	2200      	movs	r2, #0
 80038c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038c2:	4b1e      	ldr	r3, [pc, #120]	; (800393c <MX_SPI2_Init+0xa4>)
 80038c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80038ca:	4b1c      	ldr	r3, [pc, #112]	; (800393c <MX_SPI2_Init+0xa4>)
 80038cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <MX_SPI2_Init+0xa4>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038d8:	4b18      	ldr	r3, [pc, #96]	; (800393c <MX_SPI2_Init+0xa4>)
 80038da:	2200      	movs	r2, #0
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038de:	4b17      	ldr	r3, [pc, #92]	; (800393c <MX_SPI2_Init+0xa4>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80038e4:	4b15      	ldr	r3, [pc, #84]	; (800393c <MX_SPI2_Init+0xa4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038ea:	4b14      	ldr	r3, [pc, #80]	; (800393c <MX_SPI2_Init+0xa4>)
 80038ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80038f2:	4b12      	ldr	r3, [pc, #72]	; (800393c <MX_SPI2_Init+0xa4>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <MX_SPI2_Init+0xa4>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <MX_SPI2_Init+0xa4>)
 8003900:	2200      	movs	r2, #0
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003904:	4b0d      	ldr	r3, [pc, #52]	; (800393c <MX_SPI2_Init+0xa4>)
 8003906:	2200      	movs	r2, #0
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <MX_SPI2_Init+0xa4>)
 800390c:	2200      	movs	r2, #0
 800390e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <MX_SPI2_Init+0xa4>)
 8003912:	2200      	movs	r2, #0
 8003914:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <MX_SPI2_Init+0xa4>)
 8003918:	2200      	movs	r2, #0
 800391a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800391c:	4b07      	ldr	r3, [pc, #28]	; (800393c <MX_SPI2_Init+0xa4>)
 800391e:	2200      	movs	r2, #0
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <MX_SPI2_Init+0xa4>)
 8003924:	2200      	movs	r2, #0
 8003926:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003928:	4804      	ldr	r0, [pc, #16]	; (800393c <MX_SPI2_Init+0xa4>)
 800392a:	f007 faf3 	bl	800af14 <HAL_SPI_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003934:	f7ff fedc 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000518 	.word	0x20000518
 8003940:	40003800 	.word	0x40003800

08003944 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b0b8      	sub	sp, #224	; 0xe0
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800395c:	f107 0310 	add.w	r3, r7, #16
 8003960:	22bc      	movs	r2, #188	; 0xbc
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f025 f815 	bl	8028994 <memset>
  if(spiHandle->Instance==SPI2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <HAL_SPI_MspInit+0xc0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d142      	bne.n	80039fa <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003978:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800397a:	2300      	movs	r3, #0
 800397c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800397e:	f107 0310 	add.w	r3, r7, #16
 8003982:	4618      	mov	r0, r3
 8003984:	f005 f83a 	bl	80089fc <HAL_RCCEx_PeriphCLKConfig>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800398e:	f7ff feaf 	bl	80036f0 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_SPI_MspInit+0xc4>)
 8003994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003998:	4a1b      	ldr	r2, [pc, #108]	; (8003a08 <HAL_SPI_MspInit+0xc4>)
 800399a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800399e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039a2:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <HAL_SPI_MspInit+0xc4>)
 80039a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <HAL_SPI_MspInit+0xc4>)
 80039b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b6:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <HAL_SPI_MspInit+0xc4>)
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_SPI_MspInit+0xc4>)
 80039c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80039ce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80039d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039e8:	2305      	movs	r3, #5
 80039ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039f2:	4619      	mov	r1, r3
 80039f4:	4805      	ldr	r0, [pc, #20]	; (8003a0c <HAL_SPI_MspInit+0xc8>)
 80039f6:	f003 fa69 	bl	8006ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80039fa:	bf00      	nop
 80039fc:	37e0      	adds	r7, #224	; 0xe0
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40003800 	.word	0x40003800
 8003a08:	58024400 	.word	0x58024400
 8003a0c:	58020400 	.word	0x58020400

08003a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_MspInit+0x38>)
 8003a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a1c:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <HAL_MspInit+0x38>)
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_MspInit+0x38>)
 8003a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	210f      	movs	r1, #15
 8003a38:	f06f 0001 	mvn.w	r0, #1
 8003a3c:	f003 f822 	bl	8006a84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	58024400 	.word	0x58024400

08003a4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b090      	sub	sp, #64	; 0x40
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b0f      	cmp	r3, #15
 8003a58:	d827      	bhi.n	8003aaa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	201d      	movs	r0, #29
 8003a60:	f003 f810 	bl	8006a84 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a64:	201d      	movs	r0, #29
 8003a66:	f003 f827 	bl	8006ab8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003a6a:	4a29      	ldr	r2, [pc, #164]	; (8003b10 <HAL_InitTick+0xc4>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003a70:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <HAL_InitTick+0xc8>)
 8003a72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a76:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <HAL_InitTick+0xc8>)
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a80:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <HAL_InitTick+0xc8>)
 8003a82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a8e:	f107 0210 	add.w	r2, r7, #16
 8003a92:	f107 0314 	add.w	r3, r7, #20
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 ff6d 	bl	8008978 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_InitTick+0x6a>
 8003aa8:	e001      	b.n	8003aae <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e02b      	b.n	8003b06 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003aae:	f004 ff37 	bl	8008920 <HAL_RCC_GetPCLK1Freq>
 8003ab2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003ab4:	e004      	b.n	8003ac0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003ab6:	f004 ff33 	bl	8008920 <HAL_RCC_GetPCLK1Freq>
 8003aba:	4603      	mov	r3, r0
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac2:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <HAL_InitTick+0xcc>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	0c9b      	lsrs	r3, r3, #18
 8003aca:	3b01      	subs	r3, #1
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <HAL_InitTick+0xd0>)
 8003ad0:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <HAL_InitTick+0xd4>)
 8003ad2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <HAL_InitTick+0xd0>)
 8003ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ada:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003adc:	4a0f      	ldr	r2, [pc, #60]	; (8003b1c <HAL_InitTick+0xd0>)
 8003ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae0:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <HAL_InitTick+0xd0>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <HAL_InitTick+0xd0>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8003aee:	480b      	ldr	r0, [pc, #44]	; (8003b1c <HAL_InitTick+0xd0>)
 8003af0:	f007 feeb 	bl	800b8ca <HAL_TIM_Base_Init>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d104      	bne.n	8003b04 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8003afa:	4808      	ldr	r0, [pc, #32]	; (8003b1c <HAL_InitTick+0xd0>)
 8003afc:	f007 ff46 	bl	800b98c <HAL_TIM_Base_Start_IT>
 8003b00:	4603      	mov	r3, r0
 8003b02:	e000      	b.n	8003b06 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3740      	adds	r7, #64	; 0x40
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000160 	.word	0x20000160
 8003b14:	58024400 	.word	0x58024400
 8003b18:	431bde83 	.word	0x431bde83
 8003b1c:	200005a0 	.word	0x200005a0
 8003b20:	40000400 	.word	0x40000400

08003b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b28:	e7fe      	b.n	8003b28 <NMI_Handler+0x4>

08003b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2e:	e7fe      	b.n	8003b2e <HardFault_Handler+0x4>

08003b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b34:	e7fe      	b.n	8003b34 <MemManage_Handler+0x4>

08003b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b3a:	e7fe      	b.n	8003b3a <BusFault_Handler+0x4>

08003b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b40:	e7fe      	b.n	8003b40 <UsageFault_Handler+0x4>

08003b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <TIM3_IRQHandler+0x10>)
 8003b56:	f008 f9d9 	bl	800bf0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200005a0 	.word	0x200005a0

08003b64 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <LTDC_IRQHandler+0x10>)
 8003b6a:	f003 fc49 	bl	8007400 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000468 	.word	0x20000468

08003b78 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <ADC3_IRQHandler+0x10>)
 8003b7e:	f001 fc43 	bl	8005408 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000270 	.word	0x20000270

08003b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
	return 1;
 8003b90:	2301      	movs	r3, #1
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <_kill>:

int _kill(int pid, int sig)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ba6:	f024 fda1 	bl	80286ec <__errno>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2216      	movs	r2, #22
 8003bae:	601a      	str	r2, [r3, #0]
	return -1;
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <_exit>:

void _exit (int status)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ffe7 	bl	8003b9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003bce:	e7fe      	b.n	8003bce <_exit+0x12>

08003bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e00a      	b.n	8003bf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003be2:	f3af 8000 	nop.w
 8003be6:	4601      	mov	r1, r0
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	60ba      	str	r2, [r7, #8]
 8003bee:	b2ca      	uxtb	r2, r1
 8003bf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	dbf0      	blt.n	8003be2 <_read+0x12>
	}

return len;
 8003c00:	687b      	ldr	r3, [r7, #4]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e009      	b.n	8003c30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	60ba      	str	r2, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	dbf1      	blt.n	8003c1c <_write+0x12>
	}
	return len;
 8003c38:	687b      	ldr	r3, [r7, #4]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <_close>:

int _close(int file)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
	return -1;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c6a:	605a      	str	r2, [r3, #4]
	return 0;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <_isatty>:

int _isatty(int file)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
	return 1;
 8003c82:	2301      	movs	r3, #1
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
	return 0;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb4:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <_sbrk+0x5c>)
 8003cb6:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <_sbrk+0x60>)
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cc0:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <_sbrk+0x64>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <_sbrk+0x64>)
 8003cca:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <_sbrk+0x68>)
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <_sbrk+0x64>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d207      	bcs.n	8003cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cdc:	f024 fd06 	bl	80286ec <__errno>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	220c      	movs	r2, #12
 8003ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	e009      	b.n	8003d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cec:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <_sbrk+0x64>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <_sbrk+0x64>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	4a05      	ldr	r2, [pc, #20]	; (8003d10 <_sbrk+0x64>)
 8003cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20020000 	.word	0x20020000
 8003d0c:	00000400 	.word	0x00000400
 8003d10:	200005ec 	.word	0x200005ec
 8003d14:	20005a88 	.word	0x20005a88

08003d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d1c:	4b37      	ldr	r3, [pc, #220]	; (8003dfc <SystemInit+0xe4>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	4a36      	ldr	r2, [pc, #216]	; (8003dfc <SystemInit+0xe4>)
 8003d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d2c:	4b34      	ldr	r3, [pc, #208]	; (8003e00 <SystemInit+0xe8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	2b06      	cmp	r3, #6
 8003d36:	d807      	bhi.n	8003d48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d38:	4b31      	ldr	r3, [pc, #196]	; (8003e00 <SystemInit+0xe8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 030f 	bic.w	r3, r3, #15
 8003d40:	4a2f      	ldr	r2, [pc, #188]	; (8003e00 <SystemInit+0xe8>)
 8003d42:	f043 0307 	orr.w	r3, r3, #7
 8003d46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d48:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <SystemInit+0xec>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2d      	ldr	r2, [pc, #180]	; (8003e04 <SystemInit+0xec>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d54:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <SystemInit+0xec>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d5a:	4b2a      	ldr	r3, [pc, #168]	; (8003e04 <SystemInit+0xec>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4929      	ldr	r1, [pc, #164]	; (8003e04 <SystemInit+0xec>)
 8003d60:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <SystemInit+0xf0>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <SystemInit+0xe8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d72:	4b23      	ldr	r3, [pc, #140]	; (8003e00 <SystemInit+0xe8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 030f 	bic.w	r3, r3, #15
 8003d7a:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <SystemInit+0xe8>)
 8003d7c:	f043 0307 	orr.w	r3, r3, #7
 8003d80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d82:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <SystemInit+0xec>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d88:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <SystemInit+0xec>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <SystemInit+0xec>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003d94:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <SystemInit+0xec>)
 8003d96:	4a1d      	ldr	r2, [pc, #116]	; (8003e0c <SystemInit+0xf4>)
 8003d98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <SystemInit+0xec>)
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <SystemInit+0xf8>)
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003da0:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <SystemInit+0xec>)
 8003da2:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <SystemInit+0xfc>)
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003da6:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <SystemInit+0xec>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003dac:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <SystemInit+0xec>)
 8003dae:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <SystemInit+0xfc>)
 8003db0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <SystemInit+0xec>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003db8:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <SystemInit+0xec>)
 8003dba:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <SystemInit+0xfc>)
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003dbe:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <SystemInit+0xec>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <SystemInit+0xec>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a0e      	ldr	r2, [pc, #56]	; (8003e04 <SystemInit+0xec>)
 8003dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <SystemInit+0xec>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <SystemInit+0x100>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <SystemInit+0x104>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de2:	d202      	bcs.n	8003dea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003de4:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <SystemInit+0x108>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003dea:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <SystemInit+0x10c>)
 8003dec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003df0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000ed00 	.word	0xe000ed00
 8003e00:	52002000 	.word	0x52002000
 8003e04:	58024400 	.word	0x58024400
 8003e08:	eaf6ed7f 	.word	0xeaf6ed7f
 8003e0c:	02020200 	.word	0x02020200
 8003e10:	01ff0000 	.word	0x01ff0000
 8003e14:	01010280 	.word	0x01010280
 8003e18:	5c001000 	.word	0x5c001000
 8003e1c:	ffff0000 	.word	0xffff0000
 8003e20:	51008108 	.word	0x51008108
 8003e24:	52004000 	.word	0x52004000

08003e28 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	; 0x28
 8003e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e2e:	f107 031c 	add.w	r3, r7, #28
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e3a:	463b      	mov	r3, r7
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	611a      	str	r2, [r3, #16]
 8003e48:	615a      	str	r2, [r3, #20]
 8003e4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e4c:	4b22      	ldr	r3, [pc, #136]	; (8003ed8 <MX_TIM2_Init+0xb0>)
 8003e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <MX_TIM2_Init+0xb0>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ed8 <MX_TIM2_Init+0xb0>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003e60:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <MX_TIM2_Init+0xb0>)
 8003e62:	f04f 32ff 	mov.w	r2, #4294967295
 8003e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e68:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <MX_TIM2_Init+0xb0>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <MX_TIM2_Init+0xb0>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e74:	4818      	ldr	r0, [pc, #96]	; (8003ed8 <MX_TIM2_Init+0xb0>)
 8003e76:	f007 fe01 	bl	800ba7c <HAL_TIM_PWM_Init>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003e80:	f7ff fc36 	bl	80036f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e8c:	f107 031c 	add.w	r3, r7, #28
 8003e90:	4619      	mov	r1, r3
 8003e92:	4811      	ldr	r0, [pc, #68]	; (8003ed8 <MX_TIM2_Init+0xb0>)
 8003e94:	f008 fe2c 	bl	800caf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003e9e:	f7ff fc27 	bl	80036f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ea2:	2360      	movs	r3, #96	; 0x60
 8003ea4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4807      	ldr	r0, [pc, #28]	; (8003ed8 <MX_TIM2_Init+0xb0>)
 8003eba:	f008 f947 	bl	800c14c <HAL_TIM_PWM_ConfigChannel>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003ec4:	f7ff fc14 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003ec8:	4803      	ldr	r0, [pc, #12]	; (8003ed8 <MX_TIM2_Init+0xb0>)
 8003eca:	f000 f827 	bl	8003f1c <HAL_TIM_MspPostInit>

}
 8003ece:	bf00      	nop
 8003ed0:	3728      	adds	r7, #40	; 0x28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200005f0 	.word	0x200005f0

08003edc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d10e      	bne.n	8003f0c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <HAL_TIM_PWM_MspInit+0x3c>)
 8003ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ef4:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <HAL_TIM_PWM_MspInit+0x3c>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_TIM_PWM_MspInit+0x3c>)
 8003f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	58024400 	.word	0x58024400

08003f1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 030c 	add.w	r3, r7, #12
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d11f      	bne.n	8003f7e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_TIM_MspPostInit+0x6c>)
 8003f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f44:	4a10      	ldr	r2, [pc, #64]	; (8003f88 <HAL_TIM_MspPostInit+0x6c>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <HAL_TIM_MspPostInit+0x6c>)
 8003f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f62:	2302      	movs	r3, #2
 8003f64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f72:	f107 030c 	add.w	r3, r7, #12
 8003f76:	4619      	mov	r1, r3
 8003f78:	4804      	ldr	r0, [pc, #16]	; (8003f8c <HAL_TIM_MspPostInit+0x70>)
 8003f7a:	f002 ffa7 	bl	8006ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003f7e:	bf00      	nop
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	58024400 	.word	0x58024400
 8003f8c:	58020000 	.word	0x58020000

08003f90 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003f94:	4b22      	ldr	r3, [pc, #136]	; (8004020 <MX_UART5_Init+0x90>)
 8003f96:	4a23      	ldr	r2, [pc, #140]	; (8004024 <MX_UART5_Init+0x94>)
 8003f98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003f9a:	4b21      	ldr	r3, [pc, #132]	; (8004020 <MX_UART5_Init+0x90>)
 8003f9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003fa0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003fa2:	4b1f      	ldr	r3, [pc, #124]	; (8004020 <MX_UART5_Init+0x90>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	; (8004020 <MX_UART5_Init+0x90>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003fae:	4b1c      	ldr	r3, [pc, #112]	; (8004020 <MX_UART5_Init+0x90>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <MX_UART5_Init+0x90>)
 8003fb6:	220c      	movs	r2, #12
 8003fb8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fba:	4b19      	ldr	r3, [pc, #100]	; (8004020 <MX_UART5_Init+0x90>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fc0:	4b17      	ldr	r3, [pc, #92]	; (8004020 <MX_UART5_Init+0x90>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fc6:	4b16      	ldr	r3, [pc, #88]	; (8004020 <MX_UART5_Init+0x90>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fcc:	4b14      	ldr	r3, [pc, #80]	; (8004020 <MX_UART5_Init+0x90>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <MX_UART5_Init+0x90>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003fd8:	4811      	ldr	r0, [pc, #68]	; (8004020 <MX_UART5_Init+0x90>)
 8003fda:	f008 fe35 	bl	800cc48 <HAL_UART_Init>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003fe4:	f7ff fb84 	bl	80036f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fe8:	2100      	movs	r1, #0
 8003fea:	480d      	ldr	r0, [pc, #52]	; (8004020 <MX_UART5_Init+0x90>)
 8003fec:	f009 fdd2 	bl	800db94 <HAL_UARTEx_SetTxFifoThreshold>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003ff6:	f7ff fb7b 	bl	80036f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4808      	ldr	r0, [pc, #32]	; (8004020 <MX_UART5_Init+0x90>)
 8003ffe:	f009 fe07 	bl	800dc10 <HAL_UARTEx_SetRxFifoThreshold>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8004008:	f7ff fb72 	bl	80036f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800400c:	4804      	ldr	r0, [pc, #16]	; (8004020 <MX_UART5_Init+0x90>)
 800400e:	f009 fd88 	bl	800db22 <HAL_UARTEx_DisableFifoMode>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8004018:	f7ff fb6a 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800401c:	bf00      	nop
 800401e:	bd80      	pop	{r7, pc}
 8004020:	2000063c 	.word	0x2000063c
 8004024:	40005000 	.word	0x40005000

08004028 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b0ba      	sub	sp, #232	; 0xe8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004040:	f107 0318 	add.w	r3, r7, #24
 8004044:	22bc      	movs	r2, #188	; 0xbc
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f024 fca3 	bl	8028994 <memset>
  if(uartHandle->Instance==UART5)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a37      	ldr	r2, [pc, #220]	; (8004130 <HAL_UART_MspInit+0x108>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d166      	bne.n	8004126 <HAL_UART_MspInit+0xfe>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004058:	2302      	movs	r3, #2
 800405a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800405c:	2300      	movs	r3, #0
 800405e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004062:	f107 0318 	add.w	r3, r7, #24
 8004066:	4618      	mov	r0, r3
 8004068:	f004 fcc8 	bl	80089fc <HAL_RCCEx_PeriphCLKConfig>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004072:	f7ff fb3d 	bl	80036f0 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004076:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <HAL_UART_MspInit+0x10c>)
 8004078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800407c:	4a2d      	ldr	r2, [pc, #180]	; (8004134 <HAL_UART_MspInit+0x10c>)
 800407e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004082:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_UART_MspInit+0x10c>)
 8004088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800408c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004094:	4b27      	ldr	r3, [pc, #156]	; (8004134 <HAL_UART_MspInit+0x10c>)
 8004096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800409a:	4a26      	ldr	r2, [pc, #152]	; (8004134 <HAL_UART_MspInit+0x10c>)
 800409c:	f043 0304 	orr.w	r3, r3, #4
 80040a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040a4:	4b23      	ldr	r3, [pc, #140]	; (8004134 <HAL_UART_MspInit+0x10c>)
 80040a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_UART_MspInit+0x10c>)
 80040b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040b8:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <HAL_UART_MspInit+0x10c>)
 80040ba:	f043 0308 	orr.w	r3, r3, #8
 80040be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <HAL_UART_MspInit+0x10c>)
 80040c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80040d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d8:	2302      	movs	r3, #2
 80040da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80040ea:	2308      	movs	r3, #8
 80040ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4810      	ldr	r0, [pc, #64]	; (8004138 <HAL_UART_MspInit+0x110>)
 80040f8:	f002 fee8 	bl	8006ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040fc:	2304      	movs	r3, #4
 80040fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004102:	2302      	movs	r3, #2
 8004104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004114:	2308      	movs	r3, #8
 8004116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800411a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800411e:	4619      	mov	r1, r3
 8004120:	4806      	ldr	r0, [pc, #24]	; (800413c <HAL_UART_MspInit+0x114>)
 8004122:	f002 fed3 	bl	8006ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8004126:	bf00      	nop
 8004128:	37e8      	adds	r7, #232	; 0xe8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40005000 	.word	0x40005000
 8004134:	58024400 	.word	0x58024400
 8004138:	58020800 	.word	0x58020800
 800413c:	58020c00 	.word	0x58020c00

08004140 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fb11 	bl	8004770 <HAL_Delay>
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800415a:	b672      	cpsid	i
}
 800415c:	bf00      	nop
  __disable_irq();
}
 800415e:	bf00      	nop
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800416c:	b662      	cpsie	i
}
 800416e:	bf00      	nop
  __enable_irq();
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d16a      	bne.n	8004262 <L6474_Board_GpioInit+0xe6>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <L6474_Board_GpioInit+0x160>)
 800418e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004192:	4a52      	ldr	r2, [pc, #328]	; (80042dc <L6474_Board_GpioInit+0x160>)
 8004194:	f043 0304 	orr.w	r3, r3, #4
 8004198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800419c:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <L6474_Board_GpioInit+0x160>)
 800419e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 80041aa:	4b4c      	ldr	r3, [pc, #304]	; (80042dc <L6474_Board_GpioInit+0x160>)
 80041ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041b0:	4a4a      	ldr	r2, [pc, #296]	; (80042dc <L6474_Board_GpioInit+0x160>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041ba:	4b48      	ldr	r3, [pc, #288]	; (80042dc <L6474_Board_GpioInit+0x160>)
 80041bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 80041c8:	4b44      	ldr	r3, [pc, #272]	; (80042dc <L6474_Board_GpioInit+0x160>)
 80041ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ce:	4a43      	ldr	r2, [pc, #268]	; (80042dc <L6474_Board_GpioInit+0x160>)
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d8:	4b40      	ldr	r3, [pc, #256]	; (80042dc <L6474_Board_GpioInit+0x160>)
 80041da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 80041e6:	2310      	movs	r3, #16
 80041e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80041ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041f0:	2301      	movs	r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80041f4:	2301      	movs	r3, #1
 80041f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	4619      	mov	r1, r3
 80041fe:	4838      	ldr	r0, [pc, #224]	; (80042e0 <L6474_Board_GpioInit+0x164>)
 8004200:	f002 fe64 	bl	8006ecc <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 8004204:	2200      	movs	r2, #0
 8004206:	2105      	movs	r1, #5
 8004208:	2028      	movs	r0, #40	; 0x28
 800420a:	f002 fc3b 	bl	8006a84 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 800420e:	2028      	movs	r0, #40	; 0x28
 8004210:	f002 fc52 	bl	8006ab8 <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8004214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800421a:	2301      	movs	r3, #1
 800421c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004222:	2301      	movs	r3, #1
 8004224:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8004226:	f107 0314 	add.w	r3, r7, #20
 800422a:	4619      	mov	r1, r3
 800422c:	482d      	ldr	r0, [pc, #180]	; (80042e4 <L6474_Board_GpioInit+0x168>)
 800422e:	f002 fe4d 	bl	8006ecc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8004232:	2201      	movs	r2, #1
 8004234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004238:	482a      	ldr	r0, [pc, #168]	; (80042e4 <L6474_Board_GpioInit+0x168>)
 800423a:	f002 fff7 	bl	800722c <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 800423e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004244:	2301      	movs	r3, #1
 8004246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800424c:	2301      	movs	r3, #1
 800424e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	4619      	mov	r1, r3
 8004256:	4824      	ldr	r0, [pc, #144]	; (80042e8 <L6474_Board_GpioInit+0x16c>)
 8004258:	f002 fe38 	bl	8006ecc <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 800425c:	2000      	movs	r0, #0
 800425e:	f000 f949 	bl	80044f4 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d025      	beq.n	80042b4 <L6474_Board_GpioInit+0x138>
 8004268:	2b02      	cmp	r3, #2
 800426a:	dc32      	bgt.n	80042d2 <L6474_Board_GpioInit+0x156>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <L6474_Board_GpioInit+0xfa>
 8004270:	2b01      	cmp	r3, #1
 8004272:	d010      	beq.n	8004296 <L6474_Board_GpioInit+0x11a>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 8004274:	e02d      	b.n	80042d2 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 8004276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800427a:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800427c:	2301      	movs	r3, #1
 800427e:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004284:	2301      	movs	r3, #1
 8004286:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	4619      	mov	r1, r3
 800428e:	4816      	ldr	r0, [pc, #88]	; (80042e8 <L6474_Board_GpioInit+0x16c>)
 8004290:	f002 fe1c 	bl	8006ecc <HAL_GPIO_Init>
      break;
 8004294:	e01d      	b.n	80042d2 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8004296:	2320      	movs	r3, #32
 8004298:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800429a:	2301      	movs	r3, #1
 800429c:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80042a2:	2301      	movs	r3, #1
 80042a4:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 80042a6:	f107 0314 	add.w	r3, r7, #20
 80042aa:	4619      	mov	r1, r3
 80042ac:	480d      	ldr	r0, [pc, #52]	; (80042e4 <L6474_Board_GpioInit+0x168>)
 80042ae:	f002 fe0d 	bl	8006ecc <HAL_GPIO_Init>
      break;
 80042b2:	e00e      	b.n	80042d2 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 80042b4:	2310      	movs	r3, #16
 80042b6:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042b8:	2301      	movs	r3, #1
 80042ba:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80042c0:	2301      	movs	r3, #1
 80042c2:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	4619      	mov	r1, r3
 80042ca:	4806      	ldr	r0, [pc, #24]	; (80042e4 <L6474_Board_GpioInit+0x168>)
 80042cc:	f002 fdfe 	bl	8006ecc <HAL_GPIO_Init>
        break;
 80042d0:	bf00      	nop
}
 80042d2:	bf00      	nop
 80042d4:	3728      	adds	r7, #40	; 0x28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	58024400 	.word	0x58024400
 80042e0:	58021c00 	.word	0x58021c00
 80042e4:	58020400 	.word	0x58020400
 80042e8:	58022000 	.word	0x58022000

080042ec <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80042f6:	f004 f969 	bl	80085cc <HAL_RCC_GetSysClockFreq>
 80042fa:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	029b      	lsls	r3, r3, #10
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <L6474_Board_Pwm1SetFreq+0x48>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	62da      	str	r2, [r3, #44]	; 0x2c
 8004312:	4a08      	ldr	r2, [pc, #32]	; (8004334 <L6474_Board_Pwm1SetFreq+0x48>)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <L6474_Board_Pwm1SetFreq+0x48>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	0852      	lsrs	r2, r2, #1
 8004320:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 8004322:	2100      	movs	r1, #0
 8004324:	4803      	ldr	r0, [pc, #12]	; (8004334 <L6474_Board_Pwm1SetFreq+0x48>)
 8004326:	f007 fc97 	bl	800bc58 <HAL_TIM_PWM_Start_IT>
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000754 	.word	0x20000754

08004338 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8004342:	f004 f943 	bl	80085cc <HAL_RCC_GetSysClockFreq>
 8004346:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	029b      	lsls	r3, r3, #10
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <L6474_Board_Pwm2SetFreq+0x48>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	62da      	str	r2, [r3, #44]	; 0x2c
 800435e:	4a08      	ldr	r2, [pc, #32]	; (8004380 <L6474_Board_Pwm2SetFreq+0x48>)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <L6474_Board_Pwm2SetFreq+0x48>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	0852      	lsrs	r2, r2, #1
 800436c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 800436e:	2104      	movs	r1, #4
 8004370:	4803      	ldr	r0, [pc, #12]	; (8004380 <L6474_Board_Pwm2SetFreq+0x48>)
 8004372:	f007 fc71 	bl	800bc58 <HAL_TIM_PWM_Start_IT>
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	200007a0 	.word	0x200007a0

08004384 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800438e:	f004 f91d 	bl	80085cc <HAL_RCC_GetSysClockFreq>
 8004392:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	02db      	lsls	r3, r3, #11
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 80043a2:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <L6474_Board_Pwm3SetFreq+0x48>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80043aa:	4a08      	ldr	r2, [pc, #32]	; (80043cc <L6474_Board_Pwm3SetFreq+0x48>)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <L6474_Board_Pwm3SetFreq+0x48>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	0852      	lsrs	r2, r2, #1
 80043b8:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 80043ba:	2108      	movs	r1, #8
 80043bc:	4803      	ldr	r0, [pc, #12]	; (80043cc <L6474_Board_Pwm3SetFreq+0x48>)
 80043be:	f007 fc4b 	bl	800bc58 <HAL_TIM_PWM_Start_IT>
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	200007ec 	.word	0x200007ec

080043d0 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08e      	sub	sp, #56	; 0x38
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d00a      	beq.n	80043f6 <L6474_Board_PwmInit+0x26>
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d011      	beq.n	8004408 <L6474_Board_PwmInit+0x38>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 80043e4:	4b21      	ldr	r3, [pc, #132]	; (800446c <L6474_Board_PwmInit+0x9c>)
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043ee:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 80043f0:	2300      	movs	r3, #0
 80043f2:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 80043f4:	e010      	b.n	8004418 <L6474_Board_PwmInit+0x48>
    case  1:
      pHTim = &hTimPwm2;
 80043f6:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <L6474_Board_PwmInit+0xa0>)
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004400:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 8004402:	2304      	movs	r3, #4
 8004404:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004406:	e007      	b.n	8004418 <L6474_Board_PwmInit+0x48>


    case 2:
      pHTim = &hTimPwm3;
 8004408:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <L6474_Board_PwmInit+0xa4>)
 800440a:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 800440c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440e:	4a1a      	ldr	r2, [pc, #104]	; (8004478 <L6474_Board_PwmInit+0xa8>)
 8004410:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 8004412:	2308      	movs	r3, #8
 8004414:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004416:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800441e:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 8004420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004422:	2200      	movs	r2, #0
 8004424:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	2200      	movs	r2, #0
 800442a:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 800442c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800442e:	f007 fb25 	bl	800ba7c <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004432:	2360      	movs	r3, #96	; 0x60
 8004434:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8004442:	f107 0314 	add.w	r3, r7, #20
 8004446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004448:	4619      	mov	r1, r3
 800444a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800444c:	f007 fe7e 	bl	800c14c <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004450:	2300      	movs	r3, #0
 8004452:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8004458:	f107 0308 	add.w	r3, r7, #8
 800445c:	4619      	mov	r1, r3
 800445e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004460:	f008 fb46 	bl	800caf0 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004464:	bf00      	nop
 8004466:	3738      	adds	r7, #56	; 0x38
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000754 	.word	0x20000754
 8004470:	200007a0 	.word	0x200007a0
 8004474:	200007ec 	.word	0x200007ec
 8004478:	40000800 	.word	0x40000800

0800447c <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d010      	beq.n	80044ae <L6474_Board_PwmStop+0x32>
 800448c:	2b02      	cmp	r3, #2
 800448e:	dc13      	bgt.n	80044b8 <L6474_Board_PwmStop+0x3c>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <L6474_Board_PwmStop+0x1e>
 8004494:	2b01      	cmp	r3, #1
 8004496:	d005      	beq.n	80044a4 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8004498:	e00e      	b.n	80044b8 <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 800449a:	2100      	movs	r1, #0
 800449c:	4809      	ldr	r0, [pc, #36]	; (80044c4 <L6474_Board_PwmStop+0x48>)
 800449e:	f007 fb45 	bl	800bb2c <HAL_TIM_PWM_Stop>
      break;
 80044a2:	e00a      	b.n	80044ba <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 80044a4:	2104      	movs	r1, #4
 80044a6:	4808      	ldr	r0, [pc, #32]	; (80044c8 <L6474_Board_PwmStop+0x4c>)
 80044a8:	f007 fb40 	bl	800bb2c <HAL_TIM_PWM_Stop>
      break;
 80044ac:	e005      	b.n	80044ba <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 80044ae:	2108      	movs	r1, #8
 80044b0:	4806      	ldr	r0, [pc, #24]	; (80044cc <L6474_Board_PwmStop+0x50>)
 80044b2:	f007 fb3b 	bl	800bb2c <HAL_TIM_PWM_Stop>
      break;
 80044b6:	e000      	b.n	80044ba <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 80044b8:	bf00      	nop
  }
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000754 	.word	0x20000754
 80044c8:	200007a0 	.word	0x200007a0
 80044cc:	200007ec 	.word	0x200007ec

080044d0 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 80044da:	2201      	movs	r2, #1
 80044dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044e0:	4803      	ldr	r0, [pc, #12]	; (80044f0 <L6474_Board_ReleaseReset+0x20>)
 80044e2:	f002 fea3 	bl	800722c <HAL_GPIO_WritePin>
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	58022000 	.word	0x58022000

080044f4 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 80044fe:	2200      	movs	r2, #0
 8004500:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004504:	4803      	ldr	r0, [pc, #12]	; (8004514 <L6474_Board_Reset+0x20>)
 8004506:	f002 fe91 	bl	800722c <HAL_GPIO_WritePin>
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	58022000 	.word	0x58022000

08004518 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	460a      	mov	r2, r1
 8004522:	71fb      	strb	r3, [r7, #7]
 8004524:	4613      	mov	r3, r2
 8004526:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d006      	beq.n	800453c <L6474_Board_SetDirectionGpio+0x24>
 800452e:	2b02      	cmp	r3, #2
 8004530:	dc1a      	bgt.n	8004568 <L6474_Board_SetDirectionGpio+0x50>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d010      	beq.n	8004558 <L6474_Board_SetDirectionGpio+0x40>
 8004536:	2b01      	cmp	r3, #1
 8004538:	d007      	beq.n	800454a <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 800453a:	e015      	b.n	8004568 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 800453c:	79bb      	ldrb	r3, [r7, #6]
 800453e:	461a      	mov	r2, r3
 8004540:	2110      	movs	r1, #16
 8004542:	480b      	ldr	r0, [pc, #44]	; (8004570 <L6474_Board_SetDirectionGpio+0x58>)
 8004544:	f002 fe72 	bl	800722c <HAL_GPIO_WritePin>
      break;
 8004548:	e00e      	b.n	8004568 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 800454a:	79bb      	ldrb	r3, [r7, #6]
 800454c:	461a      	mov	r2, r3
 800454e:	2120      	movs	r1, #32
 8004550:	4807      	ldr	r0, [pc, #28]	; (8004570 <L6474_Board_SetDirectionGpio+0x58>)
 8004552:	f002 fe6b 	bl	800722c <HAL_GPIO_WritePin>
      break;
 8004556:	e007      	b.n	8004568 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 8004558:	79bb      	ldrb	r3, [r7, #6]
 800455a:	461a      	mov	r2, r3
 800455c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004560:	4804      	ldr	r0, [pc, #16]	; (8004574 <L6474_Board_SetDirectionGpio+0x5c>)
 8004562:	f002 fe63 	bl	800722c <HAL_GPIO_WritePin>
      break;
 8004566:	bf00      	nop
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	58020400 	.word	0x58020400
 8004574:	58022000 	.word	0x58022000

08004578 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 800457e:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 8004580:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <L6474_Board_SpiInit+0x70>)
 8004582:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8004584:	4b17      	ldr	r3, [pc, #92]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 8004586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800458a:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800458c:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8004592:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 8004594:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004598:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 800459c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045a0:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 80045a8:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 80045aa:	2207      	movs	r2, #7
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 80045b0:	2207      	movs	r2, #7
 80045b2:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80045ba:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 80045bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045c0:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 80045ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80045ce:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 80045d0:	4804      	ldr	r0, [pc, #16]	; (80045e4 <L6474_Board_SpiInit+0x6c>)
 80045d2:	f006 fc9f 	bl	800af14 <HAL_SPI_Init>
 80045d6:	4603      	mov	r3, r0
 80045d8:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 80045da:	79fb      	ldrb	r3, [r7, #7]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	200006cc 	.word	0x200006cc
 80045e8:	40003800 	.word	0x40003800

080045ec <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 80045fa:	2200      	movs	r2, #0
 80045fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004600:	4816      	ldr	r0, [pc, #88]	; (800465c <L6474_Board_SpiWriteBytes+0x70>)
 8004602:	f002 fe13 	bl	800722c <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	e016      	b.n	800463a <L6474_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 800460c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	2301      	movs	r3, #1
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	68f9      	ldr	r1, [r7, #12]
 8004618:	4811      	ldr	r0, [pc, #68]	; (8004660 <L6474_Board_SpiWriteBytes+0x74>)
 800461a:	f006 fd81 	bl	800b120 <HAL_SPI_TransmitReceive>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10d      	bne.n	8004644 <L6474_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3301      	adds	r3, #1
 800462c:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3301      	adds	r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	3301      	adds	r3, #1
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	429a      	cmp	r2, r3
 8004640:	d3e4      	bcc.n	800460c <L6474_Board_SpiWriteBytes+0x20>
 8004642:	e000      	b.n	8004646 <L6474_Board_SpiWriteBytes+0x5a>
      break;
 8004644:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8004646:	2201      	movs	r2, #1
 8004648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800464c:	4803      	ldr	r0, [pc, #12]	; (800465c <L6474_Board_SpiWriteBytes+0x70>)
 800464e:	f002 fded 	bl	800722c <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8004652:	7dfb      	ldrb	r3, [r7, #23]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	58020400 	.word	0x58020400
 8004660:	200006cc 	.word	0x200006cc

08004664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800469c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004668:	f7ff fb56 	bl	8003d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800466c:	480c      	ldr	r0, [pc, #48]	; (80046a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800466e:	490d      	ldr	r1, [pc, #52]	; (80046a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004670:	4a0d      	ldr	r2, [pc, #52]	; (80046a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004674:	e002      	b.n	800467c <LoopCopyDataInit>

08004676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800467a:	3304      	adds	r3, #4

0800467c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800467c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800467e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004680:	d3f9      	bcc.n	8004676 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004682:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004684:	4c0a      	ldr	r4, [pc, #40]	; (80046b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004688:	e001      	b.n	800468e <LoopFillZerobss>

0800468a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800468a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800468c:	3204      	adds	r2, #4

0800468e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800468e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004690:	d3fb      	bcc.n	800468a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004692:	f024 f939 	bl	8028908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004696:	f7fe ff55 	bl	8003544 <main>
  bx  lr
 800469a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800469c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046a4:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80046a8:	080448c8 	.word	0x080448c8
  ldr r2, =_sbss
 80046ac:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 80046b0:	20005a84 	.word	0x20005a84

080046b4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046b4:	e7fe      	b.n	80046b4 <ADC_IRQHandler>
	...

080046b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046be:	2003      	movs	r0, #3
 80046c0:	f002 f9d5 	bl	8006a6e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046c4:	f003 ff82 	bl	80085cc <HAL_RCC_GetSysClockFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <HAL_Init+0x68>)
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	0a1b      	lsrs	r3, r3, #8
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	4913      	ldr	r1, [pc, #76]	; (8004724 <HAL_Init+0x6c>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
 80046e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046e2:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <HAL_Init+0x68>)
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <HAL_Init+0x6c>)
 80046ec:	5cd3      	ldrb	r3, [r2, r3]
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
 80046f8:	4a0b      	ldr	r2, [pc, #44]	; (8004728 <HAL_Init+0x70>)
 80046fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046fc:	4a0b      	ldr	r2, [pc, #44]	; (800472c <HAL_Init+0x74>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004702:	2000      	movs	r0, #0
 8004704:	f7ff f9a2 	bl	8003a4c <HAL_InitTick>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e002      	b.n	8004718 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004712:	f7ff f97d 	bl	8003a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	58024400 	.word	0x58024400
 8004724:	0802a498 	.word	0x0802a498
 8004728:	2000015c 	.word	0x2000015c
 800472c:	20000158 	.word	0x20000158

08004730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_IncTick+0x20>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_IncTick+0x24>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4413      	add	r3, r2
 8004740:	4a04      	ldr	r2, [pc, #16]	; (8004754 <HAL_IncTick+0x24>)
 8004742:	6013      	str	r3, [r2, #0]
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	20000164 	.word	0x20000164
 8004754:	20000838 	.word	0x20000838

08004758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return uwTick;
 800475c:	4b03      	ldr	r3, [pc, #12]	; (800476c <HAL_GetTick+0x14>)
 800475e:	681b      	ldr	r3, [r3, #0]
}
 8004760:	4618      	mov	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000838 	.word	0x20000838

08004770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004778:	f7ff ffee 	bl	8004758 <HAL_GetTick>
 800477c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d005      	beq.n	8004796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <HAL_Delay+0x44>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004796:	bf00      	nop
 8004798:	f7ff ffde 	bl	8004758 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d8f7      	bhi.n	8004798 <HAL_Delay+0x28>
  {
  }
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000164 	.word	0x20000164

080047b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80047bc:	4b03      	ldr	r3, [pc, #12]	; (80047cc <HAL_GetREVID+0x14>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	0c1b      	lsrs	r3, r3, #16
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	5c001000 	.word	0x5c001000

080047d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	609a      	str	r2, [r3, #8]
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3360      	adds	r3, #96	; 0x60
 800484a:	461a      	mov	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	430b      	orrs	r3, r1
 8004866:	431a      	orrs	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	fa01 f303 	lsl.w	r3, r1, r3
 8004898:	431a      	orrs	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	611a      	str	r2, [r3, #16]
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b087      	sub	sp, #28
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3360      	adds	r3, #96	; 0x60
 80048ba:	461a      	mov	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	601a      	str	r2, [r3, #0]
  }
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004906:	b480      	push	{r7}
 8004908:	b087      	sub	sp, #28
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3330      	adds	r3, #48	; 0x30
 8004916:	461a      	mov	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	4413      	add	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	211f      	movs	r1, #31
 8004932:	fa01 f303 	lsl.w	r3, r1, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	401a      	ands	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0e9b      	lsrs	r3, r3, #26
 800493e:	f003 011f 	and.w	r1, r3, #31
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	431a      	orrs	r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3314      	adds	r3, #20
 8004994:	461a      	mov	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	0e5b      	lsrs	r3, r3, #25
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	4413      	add	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	0d1b      	lsrs	r3, r3, #20
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	2107      	movs	r1, #7
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	401a      	ands	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	0d1b      	lsrs	r3, r3, #20
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	431a      	orrs	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049f4:	43db      	mvns	r3, r3
 80049f6:	401a      	ands	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f003 0318 	and.w	r3, r3, #24
 80049fe:	4908      	ldr	r1, [pc, #32]	; (8004a20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a00:	40d9      	lsrs	r1, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	400b      	ands	r3, r1
 8004a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	000fffff 	.word	0x000fffff

08004a24 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	330c      	adds	r3, #12
 8004a34:	4618      	mov	r0, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	0d1b      	lsrs	r3, r3, #20
 8004a3a:	f003 0103 	and.w	r1, r3, #3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f003 0201 	and.w	r2, r3, #1
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4403      	add	r3, r0
 8004a52:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8004a5c:	400b      	ands	r3, r1
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	401a      	ands	r2, r3
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	400b      	ands	r3, r1
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	7dcfffff 	.word	0x7dcfffff

08004a80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 031f 	and.w	r3, r3, #31
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6093      	str	r3, [r2, #8]
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	5fffffc0 	.word	0x5fffffc0

08004adc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af0:	d101      	bne.n	8004af6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <LL_ADC_EnableInternalRegulator+0x24>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	6fffffc0 	.word	0x6fffffc0

08004b2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b40:	d101      	bne.n	8004b46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <LL_ADC_Enable+0x24>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	f043 0201 	orr.w	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	7fffffc0 	.word	0x7fffffc0

08004b7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <LL_ADC_IsEnabled+0x18>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <LL_ADC_IsEnabled+0x1a>
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <LL_ADC_REG_StartConversion+0x24>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	f043 0204 	orr.w	r2, r3, #4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	7fffffc0 	.word	0x7fffffc0

08004bcc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d101      	bne.n	8004be4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d101      	bne.n	8004c0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c40:	601a      	str	r2, [r3, #0]
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5c:	601a      	str	r2, [r3, #0]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	605a      	str	r2, [r3, #4]
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	605a      	str	r2, [r3, #4]
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	605a      	str	r2, [r3, #4]
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	605a      	str	r2, [r3, #4]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	605a      	str	r2, [r3, #4]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	605a      	str	r2, [r3, #4]
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b089      	sub	sp, #36	; 0x24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e18f      	b.n	8005066 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d109      	bne.n	8004d68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fb fd21 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff feb5 	bl	8004adc <LL_ADC_IsDeepPowerDownEnabled>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d004      	beq.n	8004d82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fe9b 	bl	8004ab8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff fed0 	bl	8004b2c <LL_ADC_IsInternalRegulatorEnabled>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d114      	bne.n	8004dbc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff feb4 	bl	8004b04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d9c:	4b87      	ldr	r3, [pc, #540]	; (8004fbc <HAL_ADC_Init+0x290>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	099b      	lsrs	r3, r3, #6
 8004da2:	4a87      	ldr	r2, [pc, #540]	; (8004fc0 <HAL_ADC_Init+0x294>)
 8004da4:	fba2 2303 	umull	r2, r3, r2, r3
 8004da8:	099b      	lsrs	r3, r3, #6
 8004daa:	3301      	adds	r3, #1
 8004dac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004dae:	e002      	b.n	8004db6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f9      	bne.n	8004db0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff feb3 	bl	8004b2c <LL_ADC_IsInternalRegulatorEnabled>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10d      	bne.n	8004de8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd0:	f043 0210 	orr.w	r2, r3, #16
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ddc:	f043 0201 	orr.w	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff feed 	bl	8004bcc <LL_ADC_REG_IsConversionOngoing>
 8004df2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 8129 	bne.w	8005054 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f040 8125 	bne.w	8005054 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004e12:	f043 0202 	orr.w	r2, r3, #2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff feac 	bl	8004b7c <LL_ADC_IsEnabled>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d136      	bne.n	8004e98 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a65      	ldr	r2, [pc, #404]	; (8004fc4 <HAL_ADC_Init+0x298>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_ADC_Init+0x112>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a63      	ldr	r2, [pc, #396]	; (8004fc8 <HAL_ADC_Init+0x29c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d10e      	bne.n	8004e5c <HAL_ADC_Init+0x130>
 8004e3e:	4861      	ldr	r0, [pc, #388]	; (8004fc4 <HAL_ADC_Init+0x298>)
 8004e40:	f7ff fe9c 	bl	8004b7c <LL_ADC_IsEnabled>
 8004e44:	4604      	mov	r4, r0
 8004e46:	4860      	ldr	r0, [pc, #384]	; (8004fc8 <HAL_ADC_Init+0x29c>)
 8004e48:	f7ff fe98 	bl	8004b7c <LL_ADC_IsEnabled>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	4323      	orrs	r3, r4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e008      	b.n	8004e6e <HAL_ADC_Init+0x142>
 8004e5c:	485b      	ldr	r0, [pc, #364]	; (8004fcc <HAL_ADC_Init+0x2a0>)
 8004e5e:	f7ff fe8d 	bl	8004b7c <LL_ADC_IsEnabled>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf0c      	ite	eq
 8004e68:	2301      	moveq	r3, #1
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d012      	beq.n	8004e98 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a53      	ldr	r2, [pc, #332]	; (8004fc4 <HAL_ADC_Init+0x298>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_ADC_Init+0x15a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a51      	ldr	r2, [pc, #324]	; (8004fc8 <HAL_ADC_Init+0x29c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d101      	bne.n	8004e8a <HAL_ADC_Init+0x15e>
 8004e86:	4a52      	ldr	r2, [pc, #328]	; (8004fd0 <HAL_ADC_Init+0x2a4>)
 8004e88:	e000      	b.n	8004e8c <HAL_ADC_Init+0x160>
 8004e8a:	4a52      	ldr	r2, [pc, #328]	; (8004fd4 <HAL_ADC_Init+0x2a8>)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f7ff fc9c 	bl	80047d0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004e98:	f7ff fc8e 	bl	80047b8 <HAL_GetREVID>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d914      	bls.n	8004ed0 <HAL_ADC_Init+0x1a4>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d110      	bne.n	8004ed0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	7d5b      	ldrb	r3, [r3, #21]
 8004eb2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004eb8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004ebe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	7f1b      	ldrb	r3, [r3, #28]
 8004ec4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004ec6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ec8:	f043 030c 	orr.w	r3, r3, #12
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	e00d      	b.n	8004eec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	7d5b      	ldrb	r3, [r3, #21]
 8004ed4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004eda:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004ee0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7f1b      	ldrb	r3, [r3, #28]
 8004ee6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	7f1b      	ldrb	r3, [r3, #28]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d106      	bne.n	8004f02 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	045b      	lsls	r3, r3, #17
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	4b2c      	ldr	r3, [pc, #176]	; (8004fd8 <HAL_ADC_Init+0x2ac>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	69b9      	ldr	r1, [r7, #24]
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff fe48 	bl	8004bcc <LL_ADC_REG_IsConversionOngoing>
 8004f3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fe55 	bl	8004bf2 <LL_ADC_INJ_IsConversionOngoing>
 8004f48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d15f      	bne.n	8005010 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d15c      	bne.n	8005010 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	7d1b      	ldrb	r3, [r3, #20]
 8004f5a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	4b1c      	ldr	r3, [pc, #112]	; (8004fdc <HAL_ADC_Init+0x2b0>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	69b9      	ldr	r1, [r7, #24]
 8004f74:	430b      	orrs	r3, r1
 8004f76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d130      	bne.n	8004fe4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	4b14      	ldr	r3, [pc, #80]	; (8004fe0 <HAL_ADC_Init+0x2b4>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f96:	3a01      	subs	r2, #1
 8004f98:	0411      	lsls	r1, r2, #16
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f9e:	4311      	orrs	r1, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004faa:	430a      	orrs	r2, r1
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	611a      	str	r2, [r3, #16]
 8004fb8:	e01c      	b.n	8004ff4 <HAL_ADC_Init+0x2c8>
 8004fba:	bf00      	nop
 8004fbc:	20000158 	.word	0x20000158
 8004fc0:	053e2d63 	.word	0x053e2d63
 8004fc4:	40022000 	.word	0x40022000
 8004fc8:	40022100 	.word	0x40022100
 8004fcc:	58026000 	.word	0x58026000
 8004fd0:	40022300 	.word	0x40022300
 8004fd4:	58026300 	.word	0x58026300
 8004fd8:	fff0c003 	.word	0xfff0c003
 8004fdc:	ffffbffc 	.word	0xffffbffc
 8004fe0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 fb46 	bl	800669c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d10c      	bne.n	8005032 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	f023 010f 	bic.w	r1, r3, #15
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	1e5a      	subs	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
 8005030:	e007      	b.n	8005042 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 020f 	bic.w	r2, r2, #15
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	f043 0201 	orr.w	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	655a      	str	r2, [r3, #84]	; 0x54
 8005052:	e007      	b.n	8005064 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005058:	f043 0210 	orr.w	r2, r3, #16
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005064:	7ffb      	ldrb	r3, [r7, #31]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3724      	adds	r7, #36	; 0x24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd90      	pop	{r4, r7, pc}
 800506e:	bf00      	nop

08005070 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a5c      	ldr	r2, [pc, #368]	; (80051f0 <HAL_ADC_Start+0x180>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_ADC_Start+0x1c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a5b      	ldr	r2, [pc, #364]	; (80051f4 <HAL_ADC_Start+0x184>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d101      	bne.n	8005090 <HAL_ADC_Start+0x20>
 800508c:	4b5a      	ldr	r3, [pc, #360]	; (80051f8 <HAL_ADC_Start+0x188>)
 800508e:	e000      	b.n	8005092 <HAL_ADC_Start+0x22>
 8005090:	4b5a      	ldr	r3, [pc, #360]	; (80051fc <HAL_ADC_Start+0x18c>)
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fcf4 	bl	8004a80 <LL_ADC_GetMultimode>
 8005098:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fd94 	bl	8004bcc <LL_ADC_REG_IsConversionOngoing>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f040 809a 	bne.w	80051e0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_ADC_Start+0x4a>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e095      	b.n	80051e6 <HAL_ADC_Start+0x176>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f001 fa60 	bl	8006588 <ADC_Enable>
 80050c8:	4603      	mov	r3, r0
 80050ca:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f040 8081 	bne.w	80051d6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050d8:	4b49      	ldr	r3, [pc, #292]	; (8005200 <HAL_ADC_Start+0x190>)
 80050da:	4013      	ands	r3, r2
 80050dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a42      	ldr	r2, [pc, #264]	; (80051f4 <HAL_ADC_Start+0x184>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d002      	beq.n	80050f4 <HAL_ADC_Start+0x84>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	e000      	b.n	80050f6 <HAL_ADC_Start+0x86>
 80050f4:	4b3e      	ldr	r3, [pc, #248]	; (80051f0 <HAL_ADC_Start+0x180>)
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d002      	beq.n	8005104 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d105      	bne.n	8005110 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511c:	d106      	bne.n	800512c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	f023 0206 	bic.w	r2, r3, #6
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	659a      	str	r2, [r3, #88]	; 0x58
 800512a:	e002      	b.n	8005132 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	221c      	movs	r2, #28
 8005138:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a2b      	ldr	r2, [pc, #172]	; (80051f4 <HAL_ADC_Start+0x184>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d002      	beq.n	8005152 <HAL_ADC_Start+0xe2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	e000      	b.n	8005154 <HAL_ADC_Start+0xe4>
 8005152:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <HAL_ADC_Start+0x180>)
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	4293      	cmp	r3, r2
 800515a:	d008      	beq.n	800516e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b05      	cmp	r3, #5
 8005166:	d002      	beq.n	800516e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b09      	cmp	r3, #9
 800516c:	d114      	bne.n	8005198 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005184:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fd07 	bl	8004ba4 <LL_ADC_REG_StartConversion>
 8005196:	e025      	b.n	80051e4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <HAL_ADC_Start+0x184>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d002      	beq.n	80051b4 <HAL_ADC_Start+0x144>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	e000      	b.n	80051b6 <HAL_ADC_Start+0x146>
 80051b4:	4b0e      	ldr	r3, [pc, #56]	; (80051f0 <HAL_ADC_Start+0x180>)
 80051b6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00f      	beq.n	80051e4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
 80051d4:	e006      	b.n	80051e4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80051de:	e001      	b.n	80051e4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80051e0:	2302      	movs	r3, #2
 80051e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40022000 	.word	0x40022000
 80051f4:	40022100 	.word	0x40022100
 80051f8:	40022300 	.word	0x40022300
 80051fc:	58026300 	.word	0x58026300
 8005200:	fffff0fe 	.word	0xfffff0fe

08005204 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a72      	ldr	r2, [pc, #456]	; (80053dc <HAL_ADC_PollForConversion+0x1d8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d004      	beq.n	8005222 <HAL_ADC_PollForConversion+0x1e>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a70      	ldr	r2, [pc, #448]	; (80053e0 <HAL_ADC_PollForConversion+0x1dc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <HAL_ADC_PollForConversion+0x22>
 8005222:	4b70      	ldr	r3, [pc, #448]	; (80053e4 <HAL_ADC_PollForConversion+0x1e0>)
 8005224:	e000      	b.n	8005228 <HAL_ADC_PollForConversion+0x24>
 8005226:	4b70      	ldr	r3, [pc, #448]	; (80053e8 <HAL_ADC_PollForConversion+0x1e4>)
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff fc29 	bl	8004a80 <LL_ADC_GetMultimode>
 800522e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d102      	bne.n	800523e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005238:	2308      	movs	r3, #8
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	e037      	b.n	80052ae <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b05      	cmp	r3, #5
 8005248:	d002      	beq.n	8005250 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b09      	cmp	r3, #9
 800524e:	d111      	bne.n	8005274 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005262:	f043 0220 	orr.w	r2, r3, #32
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e0b1      	b.n	80053d2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800526e:	2304      	movs	r3, #4
 8005270:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8005272:	e01c      	b.n	80052ae <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a58      	ldr	r2, [pc, #352]	; (80053dc <HAL_ADC_PollForConversion+0x1d8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <HAL_ADC_PollForConversion+0x84>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a57      	ldr	r2, [pc, #348]	; (80053e0 <HAL_ADC_PollForConversion+0x1dc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d101      	bne.n	800528c <HAL_ADC_PollForConversion+0x88>
 8005288:	4b56      	ldr	r3, [pc, #344]	; (80053e4 <HAL_ADC_PollForConversion+0x1e0>)
 800528a:	e000      	b.n	800528e <HAL_ADC_PollForConversion+0x8a>
 800528c:	4b56      	ldr	r3, [pc, #344]	; (80053e8 <HAL_ADC_PollForConversion+0x1e4>)
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fc04 	bl	8004a9c <LL_ADC_GetMultiDMATransfer>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	f043 0220 	orr.w	r2, r3, #32
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e093      	b.n	80053d2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80052aa:	2304      	movs	r3, #4
 80052ac:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80052ae:	f7ff fa53 	bl	8004758 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80052b4:	e021      	b.n	80052fa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d01d      	beq.n	80052fa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80052be:	f7ff fa4b 	bl	8004758 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <HAL_ADC_PollForConversion+0xd0>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d112      	bne.n	80052fa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4013      	ands	r3, r2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	f043 0204 	orr.w	r2, r3, #4
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e06b      	b.n	80053d2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0d6      	beq.n	80052b6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fae1 	bl	80048e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01c      	beq.n	800535e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	7d5b      	ldrb	r3, [r3, #21]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d118      	bne.n	800535e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b08      	cmp	r3, #8
 8005338:	d111      	bne.n	800535e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d105      	bne.n	800535e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	f043 0201 	orr.w	r2, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <HAL_ADC_PollForConversion+0x1dc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d002      	beq.n	800536e <HAL_ADC_PollForConversion+0x16a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	e000      	b.n	8005370 <HAL_ADC_PollForConversion+0x16c>
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <HAL_ADC_PollForConversion+0x1d8>)
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	4293      	cmp	r3, r2
 8005376:	d008      	beq.n	800538a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b05      	cmp	r3, #5
 8005382:	d002      	beq.n	800538a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b09      	cmp	r3, #9
 8005388:	d104      	bne.n	8005394 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	e00c      	b.n	80053ae <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a11      	ldr	r2, [pc, #68]	; (80053e0 <HAL_ADC_PollForConversion+0x1dc>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d002      	beq.n	80053a4 <HAL_ADC_PollForConversion+0x1a0>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	e000      	b.n	80053a6 <HAL_ADC_PollForConversion+0x1a2>
 80053a4:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <HAL_ADC_PollForConversion+0x1d8>)
 80053a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d104      	bne.n	80053be <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2208      	movs	r2, #8
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e008      	b.n	80053d0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	220c      	movs	r2, #12
 80053ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40022000 	.word	0x40022000
 80053e0:	40022100 	.word	0x40022100
 80053e4:	40022300 	.word	0x40022300
 80053e8:	58026300 	.word	0x58026300

080053ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005410:	2300      	movs	r3, #0
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a87      	ldr	r2, [pc, #540]	; (8005648 <HAL_ADC_IRQHandler+0x240>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_ADC_IRQHandler+0x30>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a86      	ldr	r2, [pc, #536]	; (800564c <HAL_ADC_IRQHandler+0x244>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d101      	bne.n	800543c <HAL_ADC_IRQHandler+0x34>
 8005438:	4b85      	ldr	r3, [pc, #532]	; (8005650 <HAL_ADC_IRQHandler+0x248>)
 800543a:	e000      	b.n	800543e <HAL_ADC_IRQHandler+0x36>
 800543c:	4b85      	ldr	r3, [pc, #532]	; (8005654 <HAL_ADC_IRQHandler+0x24c>)
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fb1e 	bl	8004a80 <LL_ADC_GetMultimode>
 8005444:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d017      	beq.n	8005480 <HAL_ADC_IRQHandler+0x78>
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d012      	beq.n	8005480 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f001 fa44 	bl	8006900 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2202      	movs	r2, #2
 800547e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <HAL_ADC_IRQHandler+0x8c>
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 8083 	beq.w	80055a6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d07d      	beq.n	80055a6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d105      	bne.n	80054c2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff fa0a 	bl	80048e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d062      	beq.n	8005598 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a5d      	ldr	r2, [pc, #372]	; (800564c <HAL_ADC_IRQHandler+0x244>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d002      	beq.n	80054e2 <HAL_ADC_IRQHandler+0xda>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	e000      	b.n	80054e4 <HAL_ADC_IRQHandler+0xdc>
 80054e2:	4b59      	ldr	r3, [pc, #356]	; (8005648 <HAL_ADC_IRQHandler+0x240>)
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d008      	beq.n	80054fe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b05      	cmp	r3, #5
 80054f6:	d002      	beq.n	80054fe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b09      	cmp	r3, #9
 80054fc:	d104      	bne.n	8005508 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	623b      	str	r3, [r7, #32]
 8005506:	e00c      	b.n	8005522 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a4f      	ldr	r2, [pc, #316]	; (800564c <HAL_ADC_IRQHandler+0x244>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d002      	beq.n	8005518 <HAL_ADC_IRQHandler+0x110>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	e000      	b.n	800551a <HAL_ADC_IRQHandler+0x112>
 8005518:	4b4b      	ldr	r3, [pc, #300]	; (8005648 <HAL_ADC_IRQHandler+0x240>)
 800551a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d135      	bne.n	8005598 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b08      	cmp	r3, #8
 8005538:	d12e      	bne.n	8005598 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fb44 	bl	8004bcc <LL_ADC_REG_IsConversionOngoing>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d11a      	bne.n	8005580 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 020c 	bic.w	r2, r2, #12
 8005558:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d112      	bne.n	8005598 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005576:	f043 0201 	orr.w	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	655a      	str	r2, [r3, #84]	; 0x54
 800557e:	e00b      	b.n	8005598 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	f043 0210 	orr.w	r2, r3, #16
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005590:	f043 0201 	orr.w	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f96f 	bl	800587c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	220c      	movs	r2, #12
 80055a4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <HAL_ADC_IRQHandler+0x1b2>
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10b      	bne.n	80055d2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80a0 	beq.w	8005706 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 809a 	beq.w	8005706 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d105      	bne.n	80055ea <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff f9b5 	bl	800495e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80055f4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff f970 	bl	80048e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005600:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a11      	ldr	r2, [pc, #68]	; (800564c <HAL_ADC_IRQHandler+0x244>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d002      	beq.n	8005612 <HAL_ADC_IRQHandler+0x20a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	e000      	b.n	8005614 <HAL_ADC_IRQHandler+0x20c>
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <HAL_ADC_IRQHandler+0x240>)
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	4293      	cmp	r3, r2
 800561a:	d008      	beq.n	800562e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b06      	cmp	r3, #6
 8005626:	d002      	beq.n	800562e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b07      	cmp	r3, #7
 800562c:	d104      	bne.n	8005638 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	623b      	str	r3, [r7, #32]
 8005636:	e014      	b.n	8005662 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a03      	ldr	r2, [pc, #12]	; (800564c <HAL_ADC_IRQHandler+0x244>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00a      	beq.n	8005658 <HAL_ADC_IRQHandler+0x250>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	e008      	b.n	800565a <HAL_ADC_IRQHandler+0x252>
 8005648:	40022000 	.word	0x40022000
 800564c:	40022100 	.word	0x40022100
 8005650:	40022300 	.word	0x40022300
 8005654:	58026300 	.word	0x58026300
 8005658:	4b84      	ldr	r3, [pc, #528]	; (800586c <HAL_ADC_IRQHandler+0x464>)
 800565a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d047      	beq.n	80056f8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <HAL_ADC_IRQHandler+0x27a>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d03f      	beq.n	80056f8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800567e:	2b00      	cmp	r3, #0
 8005680:	d13a      	bne.n	80056f8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d133      	bne.n	80056f8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d12e      	bne.n	80056f8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff faa7 	bl	8004bf2 <LL_ADC_INJ_IsConversionOngoing>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d11a      	bne.n	80056e0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056b8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d112      	bne.n	80056f8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d6:	f043 0201 	orr.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	655a      	str	r2, [r3, #84]	; 0x54
 80056de:	e00b      	b.n	80056f8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e4:	f043 0210 	orr.w	r2, r3, #16
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f0:	f043 0201 	orr.w	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 f8d9 	bl	80068b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2260      	movs	r2, #96	; 0x60
 8005704:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570c:	2b00      	cmp	r3, #0
 800570e:	d011      	beq.n	8005734 <HAL_ADC_IRQHandler+0x32c>
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00c      	beq.n	8005734 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fd ffc6 	bl	80036b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2280      	movs	r2, #128	; 0x80
 8005732:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d012      	beq.n	8005764 <HAL_ADC_IRQHandler+0x35c>
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00d      	beq.n	8005764 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 f8bf 	bl	80068d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005762:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800576a:	2b00      	cmp	r3, #0
 800576c:	d012      	beq.n	8005794 <HAL_ADC_IRQHandler+0x38c>
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00d      	beq.n	8005794 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f001 f8b1 	bl	80068ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005792:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f003 0310 	and.w	r3, r3, #16
 800579a:	2b00      	cmp	r3, #0
 800579c:	d043      	beq.n	8005826 <HAL_ADC_IRQHandler+0x41e>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f003 0310 	and.w	r3, r3, #16
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d03e      	beq.n	8005826 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80057b0:	2301      	movs	r3, #1
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
 80057b4:	e021      	b.n	80057fa <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d015      	beq.n	80057e8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2a      	ldr	r2, [pc, #168]	; (800586c <HAL_ADC_IRQHandler+0x464>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_ADC_IRQHandler+0x3c8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a29      	ldr	r2, [pc, #164]	; (8005870 <HAL_ADC_IRQHandler+0x468>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d101      	bne.n	80057d4 <HAL_ADC_IRQHandler+0x3cc>
 80057d0:	4b28      	ldr	r3, [pc, #160]	; (8005874 <HAL_ADC_IRQHandler+0x46c>)
 80057d2:	e000      	b.n	80057d6 <HAL_ADC_IRQHandler+0x3ce>
 80057d4:	4b28      	ldr	r3, [pc, #160]	; (8005878 <HAL_ADC_IRQHandler+0x470>)
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff f960 	bl	8004a9c <LL_ADC_GetMultiDMATransfer>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80057e2:	2301      	movs	r3, #1
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
 80057e6:	e008      	b.n	80057fa <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80057f6:	2301      	movs	r3, #1
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d10e      	bne.n	800581e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005804:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005810:	f043 0202 	orr.w	r2, r3, #2
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f839 	bl	8005890 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2210      	movs	r2, #16
 8005824:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d018      	beq.n	8005862 <HAL_ADC_IRQHandler+0x45a>
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005836:	2b00      	cmp	r3, #0
 8005838:	d013      	beq.n	8005862 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584a:	f043 0208 	orr.w	r2, r3, #8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800585a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 f831 	bl	80068c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005862:	bf00      	nop
 8005864:	3728      	adds	r7, #40	; 0x28
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40022000 	.word	0x40022000
 8005870:	40022100 	.word	0x40022100
 8005874:	40022300 	.word	0x40022300
 8005878:	58026300 	.word	0x58026300

0800587c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058a4:	b590      	push	{r4, r7, lr}
 80058a6:	b0a1      	sub	sp, #132	; 0x84
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a9d      	ldr	r2, [pc, #628]	; (8005b34 <HAL_ADC_ConfigChannel+0x290>)
 80058be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_ADC_ConfigChannel+0x2a>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e321      	b.n	8005f12 <HAL_ADC_ConfigChannel+0x66e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff f976 	bl	8004bcc <LL_ADC_REG_IsConversionOngoing>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f040 8306 	bne.w	8005ef4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d108      	bne.n	8005906 <HAL_ADC_ConfigChannel+0x62>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0e9b      	lsrs	r3, r3, #26
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	2201      	movs	r2, #1
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	e016      	b.n	8005934 <HAL_ADC_ConfigChannel+0x90>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800590e:	fa93 f3a3 	rbit	r3, r3
 8005912:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005916:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800591e:	2320      	movs	r3, #32
 8005920:	e003      	b.n	800592a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005924:	fab3 f383 	clz	r3, r3
 8005928:	b2db      	uxtb	r3, r3
 800592a:	f003 031f 	and.w	r3, r3, #31
 800592e:	2201      	movs	r2, #1
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6812      	ldr	r2, [r2, #0]
 8005938:	69d1      	ldr	r1, [r2, #28]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	430b      	orrs	r3, r1
 8005940:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	f7fe ffd9 	bl	8004906 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff f937 	bl	8004bcc <LL_ADC_REG_IsConversionOngoing>
 800595e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff f944 	bl	8004bf2 <LL_ADC_INJ_IsConversionOngoing>
 800596a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800596c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800596e:	2b00      	cmp	r3, #0
 8005970:	f040 80b3 	bne.w	8005ada <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 80af 	bne.w	8005ada <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	461a      	mov	r2, r3
 800598a:	f7fe fffb 	bl	8004984 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800598e:	4b6a      	ldr	r3, [pc, #424]	; (8005b38 <HAL_ADC_ConfigChannel+0x294>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800599a:	d10b      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x110>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	089b      	lsrs	r3, r3, #2
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	e01d      	b.n	80059f0 <HAL_ADC_ConfigChannel+0x14c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10b      	bne.n	80059da <HAL_ADC_ConfigChannel+0x136>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	089b      	lsrs	r3, r3, #2
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	e00a      	b.n	80059f0 <HAL_ADC_ConfigChannel+0x14c>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	695a      	ldr	r2, [r3, #20]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	089b      	lsrs	r3, r3, #2
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d027      	beq.n	8005a4a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6919      	ldr	r1, [r3, #16]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a08:	f7fe ff16 	bl	8004838 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	6919      	ldr	r1, [r3, #16]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	7e5b      	ldrb	r3, [r3, #25]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d102      	bne.n	8005a22 <HAL_ADC_ConfigChannel+0x17e>
 8005a1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a20:	e000      	b.n	8005a24 <HAL_ADC_ConfigChannel+0x180>
 8005a22:	2300      	movs	r3, #0
 8005a24:	461a      	mov	r2, r3
 8005a26:	f7fe ff40 	bl	80048aa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6919      	ldr	r1, [r3, #16]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	7e1b      	ldrb	r3, [r3, #24]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d102      	bne.n	8005a40 <HAL_ADC_ConfigChannel+0x19c>
 8005a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a3e:	e000      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x19e>
 8005a40:	2300      	movs	r3, #0
 8005a42:	461a      	mov	r2, r3
 8005a44:	f7fe ff18 	bl	8004878 <LL_ADC_SetDataRightShift>
 8005a48:	e047      	b.n	8005ada <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	069b      	lsls	r3, r3, #26
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d107      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a6c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	069b      	lsls	r3, r3, #26
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d107      	bne.n	8005a92 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a90:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	069b      	lsls	r3, r3, #26
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d107      	bne.n	8005ab6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ab4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005abc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	069b      	lsls	r3, r3, #26
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d107      	bne.n	8005ada <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ad8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff f84c 	bl	8004b7c <LL_ADC_IsEnabled>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f040 820d 	bne.w	8005f06 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	461a      	mov	r2, r3
 8005afa:	f7fe ff6f 	bl	80049dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <HAL_ADC_ConfigChannel+0x290>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	f040 8133 	bne.w	8005d70 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d110      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0x298>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	0e9b      	lsrs	r3, r3, #26
 8005b20:	3301      	adds	r3, #1
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2b09      	cmp	r3, #9
 8005b28:	bf94      	ite	ls
 8005b2a:	2301      	movls	r3, #1
 8005b2c:	2300      	movhi	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	e01e      	b.n	8005b70 <HAL_ADC_ConfigChannel+0x2cc>
 8005b32:	bf00      	nop
 8005b34:	47ff0000 	.word	0x47ff0000
 8005b38:	5c001000 	.word	0x5c001000
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b44:	fa93 f3a3 	rbit	r3, r3
 8005b48:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005b54:	2320      	movs	r3, #32
 8005b56:	e003      	b.n	8005b60 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b5a:	fab3 f383 	clz	r3, r3
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	3301      	adds	r3, #1
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2b09      	cmp	r3, #9
 8005b68:	bf94      	ite	ls
 8005b6a:	2301      	movls	r3, #1
 8005b6c:	2300      	movhi	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d079      	beq.n	8005c68 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d107      	bne.n	8005b90 <HAL_ADC_ConfigChannel+0x2ec>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	0e9b      	lsrs	r3, r3, #26
 8005b86:	3301      	adds	r3, #1
 8005b88:	069b      	lsls	r3, r3, #26
 8005b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b8e:	e015      	b.n	8005bbc <HAL_ADC_ConfigChannel+0x318>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b98:	fa93 f3a3 	rbit	r3, r3
 8005b9c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005ba8:	2320      	movs	r3, #32
 8005baa:	e003      	b.n	8005bb4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bae:	fab3 f383 	clz	r3, r3
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	069b      	lsls	r3, r3, #26
 8005bb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <HAL_ADC_ConfigChannel+0x338>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	0e9b      	lsrs	r3, r3, #26
 8005bce:	3301      	adds	r3, #1
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bda:	e017      	b.n	8005c0c <HAL_ADC_ConfigChannel+0x368>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be4:	fa93 f3a3 	rbit	r3, r3
 8005be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bec:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005bf4:	2320      	movs	r3, #32
 8005bf6:	e003      	b.n	8005c00 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bfa:	fab3 f383 	clz	r3, r3
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	3301      	adds	r3, #1
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	2101      	movs	r1, #1
 8005c08:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0c:	ea42 0103 	orr.w	r1, r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <HAL_ADC_ConfigChannel+0x38e>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	0e9b      	lsrs	r3, r3, #26
 8005c22:	3301      	adds	r3, #1
 8005c24:	f003 021f 	and.w	r2, r3, #31
 8005c28:	4613      	mov	r3, r2
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	4413      	add	r3, r2
 8005c2e:	051b      	lsls	r3, r3, #20
 8005c30:	e018      	b.n	8005c64 <HAL_ADC_ConfigChannel+0x3c0>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3a:	fa93 f3a3 	rbit	r3, r3
 8005c3e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005c4a:	2320      	movs	r3, #32
 8005c4c:	e003      	b.n	8005c56 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	fab3 f383 	clz	r3, r3
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	3301      	adds	r3, #1
 8005c58:	f003 021f 	and.w	r2, r3, #31
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c64:	430b      	orrs	r3, r1
 8005c66:	e07e      	b.n	8005d66 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d107      	bne.n	8005c84 <HAL_ADC_ConfigChannel+0x3e0>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	0e9b      	lsrs	r3, r3, #26
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	069b      	lsls	r3, r3, #26
 8005c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c82:	e015      	b.n	8005cb0 <HAL_ADC_ConfigChannel+0x40c>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	fa93 f3a3 	rbit	r3, r3
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005c9c:	2320      	movs	r3, #32
 8005c9e:	e003      	b.n	8005ca8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	fab3 f383 	clz	r3, r3
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	3301      	adds	r3, #1
 8005caa:	069b      	lsls	r3, r3, #26
 8005cac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <HAL_ADC_ConfigChannel+0x42c>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	0e9b      	lsrs	r3, r3, #26
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	f003 031f 	and.w	r3, r3, #31
 8005cc8:	2101      	movs	r1, #1
 8005cca:	fa01 f303 	lsl.w	r3, r1, r3
 8005cce:	e017      	b.n	8005d00 <HAL_ADC_ConfigChannel+0x45c>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	fa93 f3a3 	rbit	r3, r3
 8005cdc:	61bb      	str	r3, [r7, #24]
  return result;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005ce8:	2320      	movs	r3, #32
 8005cea:	e003      	b.n	8005cf4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	fab3 f383 	clz	r3, r3
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005d00:	ea42 0103 	orr.w	r1, r2, r3
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10d      	bne.n	8005d2c <HAL_ADC_ConfigChannel+0x488>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	0e9b      	lsrs	r3, r3, #26
 8005d16:	3301      	adds	r3, #1
 8005d18:	f003 021f 	and.w	r2, r3, #31
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	3b1e      	subs	r3, #30
 8005d24:	051b      	lsls	r3, r3, #20
 8005d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d2a:	e01b      	b.n	8005d64 <HAL_ADC_ConfigChannel+0x4c0>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	fa93 f3a3 	rbit	r3, r3
 8005d38:	60fb      	str	r3, [r7, #12]
  return result;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005d44:	2320      	movs	r3, #32
 8005d46:	e003      	b.n	8005d50 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	fab3 f383 	clz	r3, r3
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	3301      	adds	r3, #1
 8005d52:	f003 021f 	and.w	r2, r3, #31
 8005d56:	4613      	mov	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3b1e      	subs	r3, #30
 8005d5e:	051b      	lsls	r3, r3, #20
 8005d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d64:	430b      	orrs	r3, r1
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	6892      	ldr	r2, [r2, #8]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	f7fe fe0a 	bl	8004984 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f280 80c6 	bge.w	8005f06 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a67      	ldr	r2, [pc, #412]	; (8005f1c <HAL_ADC_ConfigChannel+0x678>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d004      	beq.n	8005d8e <HAL_ADC_ConfigChannel+0x4ea>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a65      	ldr	r2, [pc, #404]	; (8005f20 <HAL_ADC_ConfigChannel+0x67c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d101      	bne.n	8005d92 <HAL_ADC_ConfigChannel+0x4ee>
 8005d8e:	4b65      	ldr	r3, [pc, #404]	; (8005f24 <HAL_ADC_ConfigChannel+0x680>)
 8005d90:	e000      	b.n	8005d94 <HAL_ADC_ConfigChannel+0x4f0>
 8005d92:	4b65      	ldr	r3, [pc, #404]	; (8005f28 <HAL_ADC_ConfigChannel+0x684>)
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe fd41 	bl	800481c <LL_ADC_GetCommonPathInternalCh>
 8005d9a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a5e      	ldr	r2, [pc, #376]	; (8005f1c <HAL_ADC_ConfigChannel+0x678>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_ADC_ConfigChannel+0x50c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a5d      	ldr	r2, [pc, #372]	; (8005f20 <HAL_ADC_ConfigChannel+0x67c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10e      	bne.n	8005dce <HAL_ADC_ConfigChannel+0x52a>
 8005db0:	485a      	ldr	r0, [pc, #360]	; (8005f1c <HAL_ADC_ConfigChannel+0x678>)
 8005db2:	f7fe fee3 	bl	8004b7c <LL_ADC_IsEnabled>
 8005db6:	4604      	mov	r4, r0
 8005db8:	4859      	ldr	r0, [pc, #356]	; (8005f20 <HAL_ADC_ConfigChannel+0x67c>)
 8005dba:	f7fe fedf 	bl	8004b7c <LL_ADC_IsEnabled>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4323      	orrs	r3, r4
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bf0c      	ite	eq
 8005dc6:	2301      	moveq	r3, #1
 8005dc8:	2300      	movne	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	e008      	b.n	8005de0 <HAL_ADC_ConfigChannel+0x53c>
 8005dce:	4857      	ldr	r0, [pc, #348]	; (8005f2c <HAL_ADC_ConfigChannel+0x688>)
 8005dd0:	f7fe fed4 	bl	8004b7c <LL_ADC_IsEnabled>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	bf0c      	ite	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	2300      	movne	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d07d      	beq.n	8005ee0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a51      	ldr	r2, [pc, #324]	; (8005f30 <HAL_ADC_ConfigChannel+0x68c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d130      	bne.n	8005e50 <HAL_ADC_ConfigChannel+0x5ac>
 8005dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d12b      	bne.n	8005e50 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a4b      	ldr	r2, [pc, #300]	; (8005f2c <HAL_ADC_ConfigChannel+0x688>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	f040 8081 	bne.w	8005f06 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a44      	ldr	r2, [pc, #272]	; (8005f1c <HAL_ADC_ConfigChannel+0x678>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_ADC_ConfigChannel+0x574>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a43      	ldr	r2, [pc, #268]	; (8005f20 <HAL_ADC_ConfigChannel+0x67c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d101      	bne.n	8005e1c <HAL_ADC_ConfigChannel+0x578>
 8005e18:	4a42      	ldr	r2, [pc, #264]	; (8005f24 <HAL_ADC_ConfigChannel+0x680>)
 8005e1a:	e000      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x57a>
 8005e1c:	4a42      	ldr	r2, [pc, #264]	; (8005f28 <HAL_ADC_ConfigChannel+0x684>)
 8005e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f7fe fce5 	bl	80047f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e2c:	4b41      	ldr	r3, [pc, #260]	; (8005f34 <HAL_ADC_ConfigChannel+0x690>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	099b      	lsrs	r3, r3, #6
 8005e32:	4a41      	ldr	r2, [pc, #260]	; (8005f38 <HAL_ADC_ConfigChannel+0x694>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	099b      	lsrs	r3, r3, #6
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005e40:	e002      	b.n	8005e48 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f9      	bne.n	8005e42 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e4e:	e05a      	b.n	8005f06 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a39      	ldr	r2, [pc, #228]	; (8005f3c <HAL_ADC_ConfigChannel+0x698>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d11e      	bne.n	8005e98 <HAL_ADC_ConfigChannel+0x5f4>
 8005e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d119      	bne.n	8005e98 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a30      	ldr	r2, [pc, #192]	; (8005f2c <HAL_ADC_ConfigChannel+0x688>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d14b      	bne.n	8005f06 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a2a      	ldr	r2, [pc, #168]	; (8005f1c <HAL_ADC_ConfigChannel+0x678>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <HAL_ADC_ConfigChannel+0x5de>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a28      	ldr	r2, [pc, #160]	; (8005f20 <HAL_ADC_ConfigChannel+0x67c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d101      	bne.n	8005e86 <HAL_ADC_ConfigChannel+0x5e2>
 8005e82:	4a28      	ldr	r2, [pc, #160]	; (8005f24 <HAL_ADC_ConfigChannel+0x680>)
 8005e84:	e000      	b.n	8005e88 <HAL_ADC_ConfigChannel+0x5e4>
 8005e86:	4a28      	ldr	r2, [pc, #160]	; (8005f28 <HAL_ADC_ConfigChannel+0x684>)
 8005e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4610      	mov	r0, r2
 8005e92:	f7fe fcb0 	bl	80047f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e96:	e036      	b.n	8005f06 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a28      	ldr	r2, [pc, #160]	; (8005f40 <HAL_ADC_ConfigChannel+0x69c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d131      	bne.n	8005f06 <HAL_ADC_ConfigChannel+0x662>
 8005ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d12c      	bne.n	8005f06 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <HAL_ADC_ConfigChannel+0x688>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d127      	bne.n	8005f06 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <HAL_ADC_ConfigChannel+0x678>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d004      	beq.n	8005eca <HAL_ADC_ConfigChannel+0x626>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <HAL_ADC_ConfigChannel+0x67c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d101      	bne.n	8005ece <HAL_ADC_ConfigChannel+0x62a>
 8005eca:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <HAL_ADC_ConfigChannel+0x680>)
 8005ecc:	e000      	b.n	8005ed0 <HAL_ADC_ConfigChannel+0x62c>
 8005ece:	4a16      	ldr	r2, [pc, #88]	; (8005f28 <HAL_ADC_ConfigChannel+0x684>)
 8005ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4610      	mov	r0, r2
 8005eda:	f7fe fc8c 	bl	80047f6 <LL_ADC_SetCommonPathInternalCh>
 8005ede:	e012      	b.n	8005f06 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee4:	f043 0220 	orr.w	r2, r3, #32
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005ef2:	e008      	b.n	8005f06 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005f0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3784      	adds	r7, #132	; 0x84
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd90      	pop	{r4, r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40022000 	.word	0x40022000
 8005f20:	40022100 	.word	0x40022100
 8005f24:	40022300 	.word	0x40022300
 8005f28:	58026300 	.word	0x58026300
 8005f2c:	58026000 	.word	0x58026000
 8005f30:	cb840000 	.word	0xcb840000
 8005f34:	20000158 	.word	0x20000158
 8005f38:	053e2d63 	.word	0x053e2d63
 8005f3c:	c7520000 	.word	0xc7520000
 8005f40:	cfb80000 	.word	0xcfb80000

08005f44 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b094      	sub	sp, #80	; 0x50
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f5c:	d003      	beq.n	8005f66 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f62:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_ADC_AnalogWDGConfig+0x30>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e304      	b.n	800657e <HAL_ADC_AnalogWDGConfig+0x63a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe fe23 	bl	8004bcc <LL_ADC_REG_IsConversionOngoing>
 8005f86:	64b8      	str	r0, [r7, #72]	; 0x48
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe fe30 	bl	8004bf2 <LL_ADC_INJ_IsConversionOngoing>
 8005f92:	6478      	str	r0, [r7, #68]	; 0x44
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 82e2 	bne.w	8006560 <HAL_ADC_AnalogWDGConfig+0x61c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f040 82de 	bne.w	8006560 <HAL_ADC_AnalogWDGConfig+0x61c>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a9b      	ldr	r2, [pc, #620]	; (8006218 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	f040 80fa 	bne.w	80061a4 <HAL_ADC_AnalogWDGConfig+0x260>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005fb8:	d034      	beq.n	8006024 <HAL_ADC_AnalogWDGConfig+0xe0>
 8005fba:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005fbe:	d856      	bhi.n	800606e <HAL_ADC_AnalogWDGConfig+0x12a>
 8005fc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fc4:	d04b      	beq.n	800605e <HAL_ADC_AnalogWDGConfig+0x11a>
 8005fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fca:	d850      	bhi.n	800606e <HAL_ADC_AnalogWDGConfig+0x12a>
 8005fcc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005fd0:	d01b      	beq.n	800600a <HAL_ADC_AnalogWDGConfig+0xc6>
 8005fd2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005fd6:	d84a      	bhi.n	800606e <HAL_ADC_AnalogWDGConfig+0x12a>
 8005fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fdc:	d037      	beq.n	800604e <HAL_ADC_AnalogWDGConfig+0x10a>
 8005fde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fe2:	d844      	bhi.n	800606e <HAL_ADC_AnalogWDGConfig+0x12a>
 8005fe4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fe8:	d029      	beq.n	800603e <HAL_ADC_AnalogWDGConfig+0xfa>
 8005fea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fee:	d13e      	bne.n	800606e <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005ffc:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8006000:	461a      	mov	r2, r3
 8006002:	4985      	ldr	r1, [pc, #532]	; (8006218 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006004:	f7fe fd0e 	bl	8004a24 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8006008:	e039      	b.n	800607e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006016:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 800601a:	461a      	mov	r2, r3
 800601c:	497e      	ldr	r1, [pc, #504]	; (8006218 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800601e:	f7fe fd01 	bl	8004a24 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8006022:	e02c      	b.n	800607e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006030:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8006034:	461a      	mov	r2, r3
 8006036:	4978      	ldr	r1, [pc, #480]	; (8006218 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006038:	f7fe fcf4 	bl	8004a24 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 800603c:	e01f      	b.n	800607e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a76      	ldr	r2, [pc, #472]	; (800621c <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8006044:	4974      	ldr	r1, [pc, #464]	; (8006218 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe fcec 	bl	8004a24 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800604c:	e017      	b.n	800607e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a73      	ldr	r2, [pc, #460]	; (8006220 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8006054:	4970      	ldr	r1, [pc, #448]	; (8006218 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fce4 	bl	8004a24 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800605c:	e00f      	b.n	800607e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a70      	ldr	r2, [pc, #448]	; (8006224 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8006064:	496c      	ldr	r1, [pc, #432]	; (8006218 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe fcdc 	bl	8004a24 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800606c:	e007      	b.n	800607e <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	4968      	ldr	r1, [pc, #416]	; (8006218 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe fcd4 	bl	8004a24 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800607c:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800607e:	4b6a      	ldr	r3, [pc, #424]	; (8006228 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800608a:	d10b      	bne.n	80060a4 <HAL_ADC_AnalogWDGConfig+0x160>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	e01d      	b.n	80060e0 <HAL_ADC_AnalogWDGConfig+0x19c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <HAL_ADC_AnalogWDGConfig+0x186>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	089b      	lsrs	r3, r3, #2
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	e00a      	b.n	80060e0 <HAL_ADC_AnalogWDGConfig+0x19c>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	089b      	lsrs	r3, r3, #2
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80060e2:	4b51      	ldr	r3, [pc, #324]	; (8006228 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80060ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ee:	d10b      	bne.n	8006108 <HAL_ADC_AnalogWDGConfig+0x1c4>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	695a      	ldr	r2, [r3, #20]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	089b      	lsrs	r3, r3, #2
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	e01d      	b.n	8006144 <HAL_ADC_AnalogWDGConfig+0x200>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10b      	bne.n	800612e <HAL_ADC_AnalogWDGConfig+0x1ea>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	089b      	lsrs	r3, r3, #2
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	e00a      	b.n	8006144 <HAL_ADC_AnalogWDGConfig+0x200>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	089b      	lsrs	r3, r3, #2
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	63fb      	str	r3, [r7, #60]	; 0x3c

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }
#else
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006156:	430a      	orrs	r2, r1
 8006158:	621a      	str	r2, [r3, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800616a:	430a      	orrs	r2, r1
 800616c:	625a      	str	r2, [r3, #36]	; 0x24
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006172:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fd4a 	bl	8004c18 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	7b1b      	ldrb	r3, [r3, #12]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d105      	bne.n	8006198 <HAL_ADC_AnalogWDGConfig+0x254>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe fd6a 	bl	8004c6a <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006196:	e1ec      	b.n	8006572 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f7fe fd94 	bl	8004cca <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80061a2:	e1e6      	b.n	8006572 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80061ac:	d020      	beq.n	80061f0 <HAL_ADC_AnalogWDGConfig+0x2ac>
 80061ae:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80061b2:	f200 80f3 	bhi.w	800639c <HAL_ADC_AnalogWDGConfig+0x458>
 80061b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061ba:	f000 808a 	beq.w	80062d2 <HAL_ADC_AnalogWDGConfig+0x38e>
 80061be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061c2:	f200 80eb 	bhi.w	800639c <HAL_ADC_AnalogWDGConfig+0x458>
 80061c6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80061ca:	d011      	beq.n	80061f0 <HAL_ADC_AnalogWDGConfig+0x2ac>
 80061cc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80061d0:	f200 80e4 	bhi.w	800639c <HAL_ADC_AnalogWDGConfig+0x458>
 80061d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061d8:	d07b      	beq.n	80062d2 <HAL_ADC_AnalogWDGConfig+0x38e>
 80061da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061de:	f200 80dd 	bhi.w	800639c <HAL_ADC_AnalogWDGConfig+0x458>
 80061e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061e6:	d074      	beq.n	80062d2 <HAL_ADC_AnalogWDGConfig+0x38e>
 80061e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061ec:	f040 80d6 	bne.w	800639c <HAL_ADC_AnalogWDGConfig+0x458>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a0d      	ldr	r2, [pc, #52]	; (800622c <HAL_ADC_AnalogWDGConfig+0x2e8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d13b      	bne.n	8006272 <HAL_ADC_AnalogWDGConfig+0x32e>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006202:	2b00      	cmp	r3, #0
 8006204:	d114      	bne.n	8006230 <HAL_ADC_AnalogWDGConfig+0x2ec>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	0e9b      	lsrs	r3, r3, #26
 800620c:	f003 031f 	and.w	r3, r3, #31
 8006210:	2201      	movs	r2, #1
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	e022      	b.n	800625e <HAL_ADC_AnalogWDGConfig+0x31a>
 8006218:	7dc00000 	.word	0x7dc00000
 800621c:	008fffff 	.word	0x008fffff
 8006220:	010fffff 	.word	0x010fffff
 8006224:	018fffff 	.word	0x018fffff
 8006228:	5c001000 	.word	0x5c001000
 800622c:	001fffff 	.word	0x001fffff
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006238:	fa93 f3a3 	rbit	r3, r3
 800623c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_ADC_AnalogWDGConfig+0x308>
    return 32U;
 8006248:	2320      	movs	r3, #32
 800624a:	e003      	b.n	8006254 <HAL_ADC_AnalogWDGConfig+0x310>
  return __builtin_clz(value);
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	fab3 f383 	clz	r3, r3
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2201      	movs	r2, #1
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	430b      	orrs	r3, r1
 800626c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006270:	e09d      	b.n	80063ae <HAL_ADC_AnalogWDGConfig+0x46a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800627a:	2b00      	cmp	r3, #0
 800627c:	d108      	bne.n	8006290 <HAL_ADC_AnalogWDGConfig+0x34c>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	0e9b      	lsrs	r3, r3, #26
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	2201      	movs	r2, #1
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	e016      	b.n	80062be <HAL_ADC_AnalogWDGConfig+0x37a>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	fa93 f3a3 	rbit	r3, r3
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_ADC_AnalogWDGConfig+0x368>
    return 32U;
 80062a8:	2320      	movs	r3, #32
 80062aa:	e003      	b.n	80062b4 <HAL_ADC_AnalogWDGConfig+0x370>
  return __builtin_clz(value);
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	fab3 f383 	clz	r3, r3
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	2201      	movs	r2, #1
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	430b      	orrs	r3, r1
 80062cc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80062d0:	e06d      	b.n	80063ae <HAL_ADC_AnalogWDGConfig+0x46a>
          else
          {
#endif  /*ADC_VER_V5_V90*/
            /* Update AWD by bitfield to keep the possibility to monitor        */
            /* several channels by successive calls of this function.           */
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4aa0      	ldr	r2, [pc, #640]	; (8006558 <HAL_ADC_AnalogWDGConfig+0x614>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d12f      	bne.n	800633c <HAL_ADC_AnalogWDGConfig+0x3f8>
            {
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d108      	bne.n	80062fa <HAL_ADC_AnalogWDGConfig+0x3b6>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	0e9b      	lsrs	r3, r3, #26
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	2201      	movs	r2, #1
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	e016      	b.n	8006328 <HAL_ADC_AnalogWDGConfig+0x3e4>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	fa93 f3a3 	rbit	r3, r3
 8006306:	61bb      	str	r3, [r7, #24]
  return result;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_ADC_AnalogWDGConfig+0x3d2>
    return 32U;
 8006312:	2320      	movs	r3, #32
 8006314:	e003      	b.n	800631e <HAL_ADC_AnalogWDGConfig+0x3da>
  return __builtin_clz(value);
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	fab3 f383 	clz	r3, r3
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2201      	movs	r2, #1
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	430b      	orrs	r3, r1
 8006336:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 800633a:	e038      	b.n	80063ae <HAL_ADC_AnalogWDGConfig+0x46a>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006344:	2b00      	cmp	r3, #0
 8006346:	d108      	bne.n	800635a <HAL_ADC_AnalogWDGConfig+0x416>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	0e9b      	lsrs	r3, r3, #26
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	2201      	movs	r2, #1
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	e016      	b.n	8006388 <HAL_ADC_AnalogWDGConfig+0x444>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	fa93 f3a3 	rbit	r3, r3
 8006366:	60fb      	str	r3, [r7, #12]
  return result;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_ADC_AnalogWDGConfig+0x432>
    return 32U;
 8006372:	2320      	movs	r3, #32
 8006374:	e003      	b.n	800637e <HAL_ADC_AnalogWDGConfig+0x43a>
  return __builtin_clz(value);
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	fab3 f383 	clz	r3, r3
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2201      	movs	r2, #1
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6812      	ldr	r2, [r2, #0]
 800638c:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	430b      	orrs	r3, r1
 8006396:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 800639a:	e008      	b.n	80063ae <HAL_ADC_AnalogWDGConfig+0x46a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2200      	movs	r2, #0
 80063a6:	4619      	mov	r1, r3
 80063a8:	f7fe fb3c 	bl	8004a24 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80063ac:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80063ae:	4b6b      	ldr	r3, [pc, #428]	; (800655c <HAL_ADC_AnalogWDGConfig+0x618>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80063b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ba:	d10b      	bne.n	80063d4 <HAL_ADC_AnalogWDGConfig+0x490>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	089b      	lsrs	r3, r3, #2
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	e01d      	b.n	8006410 <HAL_ADC_AnalogWDGConfig+0x4cc>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f003 0310 	and.w	r3, r3, #16
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10b      	bne.n	80063fa <HAL_ADC_AnalogWDGConfig+0x4b6>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	691a      	ldr	r2, [r3, #16]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	089b      	lsrs	r3, r3, #2
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	e00a      	b.n	8006410 <HAL_ADC_AnalogWDGConfig+0x4cc>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	089b      	lsrs	r3, r3, #2
 8006406:	f003 0304 	and.w	r3, r3, #4
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006412:	4b52      	ldr	r3, [pc, #328]	; (800655c <HAL_ADC_AnalogWDGConfig+0x618>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800641a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800641e:	d10b      	bne.n	8006438 <HAL_ADC_AnalogWDGConfig+0x4f4>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	695a      	ldr	r2, [r3, #20]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	089b      	lsrs	r3, r3, #2
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	fa02 f303 	lsl.w	r3, r2, r3
 8006436:	e01d      	b.n	8006474 <HAL_ADC_AnalogWDGConfig+0x530>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10b      	bne.n	800645e <HAL_ADC_AnalogWDGConfig+0x51a>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	089b      	lsrs	r3, r3, #2
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	e00a      	b.n	8006474 <HAL_ADC_AnalogWDGConfig+0x530>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	695a      	ldr	r2, [r3, #20]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	089b      	lsrs	r3, r3, #2
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	fa02 f303 	lsl.w	r3, r2, r3
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
        }
      }
#else
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a37      	ldr	r2, [pc, #220]	; (8006558 <HAL_ADC_AnalogWDGConfig+0x614>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d118      	bne.n	80064b2 <HAL_ADC_AnalogWDGConfig+0x56e>
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006488:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006492:	430a      	orrs	r2, r1
 8006494:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064a0:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064aa:	430a      	orrs	r2, r1
 80064ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80064b0:	e017      	b.n	80064e2 <HAL_ADC_AnalogWDGConfig+0x59e>
      }
      else
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80064ba:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064c4:	430a      	orrs	r2, r1
 80064c6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80064d2:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064dc:	430a      	orrs	r2, r1
 80064de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1c      	ldr	r2, [pc, #112]	; (8006558 <HAL_ADC_AnalogWDGConfig+0x614>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d11a      	bne.n	8006522 <HAL_ADC_AnalogWDGConfig+0x5de>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fb98 	bl	8004c32 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	7b1b      	ldrb	r3, [r3, #12]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d105      	bne.n	8006516 <HAL_ADC_AnalogWDGConfig+0x5d2>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe fbbb 	bl	8004c8a <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006514:	e02d      	b.n	8006572 <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fbe5 	bl	8004cea <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006520:	e027      	b.n	8006572 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006526:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe fb8b 	bl	8004c4e <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	7b1b      	ldrb	r3, [r3, #12]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d105      	bne.n	800654c <HAL_ADC_AnalogWDGConfig+0x608>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe fbb0 	bl	8004caa <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800654a:	e012      	b.n	8006572 <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe fbda 	bl	8004d0a <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006556:	e00c      	b.n	8006572 <HAL_ADC_AnalogWDGConfig+0x62e>
 8006558:	001fffff 	.word	0x001fffff
 800655c:	5c001000 	.word	0x5c001000
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006564:	f043 0220 	orr.w	r2, r3, #32
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800657a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800657e:	4618      	mov	r0, r3
 8006580:	3750      	adds	r7, #80	; 0x50
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop

08006588 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4618      	mov	r0, r3
 8006596:	f7fe faf1 	bl	8004b7c <LL_ADC_IsEnabled>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d16e      	bne.n	800667e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	4b38      	ldr	r3, [pc, #224]	; (8006688 <ADC_Enable+0x100>)
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00d      	beq.n	80065ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b2:	f043 0210 	orr.w	r2, r3, #16
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065be:	f043 0201 	orr.w	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e05a      	b.n	8006680 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fac0 	bl	8004b54 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80065d4:	f7fe f8c0 	bl	8004758 <HAL_GetTick>
 80065d8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a2b      	ldr	r2, [pc, #172]	; (800668c <ADC_Enable+0x104>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <ADC_Enable+0x66>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a29      	ldr	r2, [pc, #164]	; (8006690 <ADC_Enable+0x108>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d101      	bne.n	80065f2 <ADC_Enable+0x6a>
 80065ee:	4b29      	ldr	r3, [pc, #164]	; (8006694 <ADC_Enable+0x10c>)
 80065f0:	e000      	b.n	80065f4 <ADC_Enable+0x6c>
 80065f2:	4b29      	ldr	r3, [pc, #164]	; (8006698 <ADC_Enable+0x110>)
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe fa43 	bl	8004a80 <LL_ADC_GetMultimode>
 80065fa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a23      	ldr	r2, [pc, #140]	; (8006690 <ADC_Enable+0x108>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d002      	beq.n	800660c <ADC_Enable+0x84>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	e000      	b.n	800660e <ADC_Enable+0x86>
 800660c:	4b1f      	ldr	r3, [pc, #124]	; (800668c <ADC_Enable+0x104>)
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	4293      	cmp	r3, r2
 8006614:	d02c      	beq.n	8006670 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d130      	bne.n	800667e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800661c:	e028      	b.n	8006670 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe faaa 	bl	8004b7c <LL_ADC_IsEnabled>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe fa8e 	bl	8004b54 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006638:	f7fe f88e 	bl	8004758 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d914      	bls.n	8006670 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b01      	cmp	r3, #1
 8006652:	d00d      	beq.n	8006670 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006658:	f043 0210 	orr.w	r2, r3, #16
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006664:	f043 0201 	orr.w	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e007      	b.n	8006680 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d1cf      	bne.n	800661e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	8000003f 	.word	0x8000003f
 800668c:	40022000 	.word	0x40022000
 8006690:	40022100 	.word	0x40022100
 8006694:	40022300 	.word	0x40022300
 8006698:	58026300 	.word	0x58026300

0800669c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a79      	ldr	r2, [pc, #484]	; (8006890 <ADC_ConfigureBoostMode+0x1f4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <ADC_ConfigureBoostMode+0x1c>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a78      	ldr	r2, [pc, #480]	; (8006894 <ADC_ConfigureBoostMode+0x1f8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d109      	bne.n	80066cc <ADC_ConfigureBoostMode+0x30>
 80066b8:	4b77      	ldr	r3, [pc, #476]	; (8006898 <ADC_ConfigureBoostMode+0x1fc>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	bf14      	ite	ne
 80066c4:	2301      	movne	r3, #1
 80066c6:	2300      	moveq	r3, #0
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	e008      	b.n	80066de <ADC_ConfigureBoostMode+0x42>
 80066cc:	4b73      	ldr	r3, [pc, #460]	; (800689c <ADC_ConfigureBoostMode+0x200>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01c      	beq.n	800671c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80066e2:	f002 f8ed 	bl	80088c0 <HAL_RCC_GetHCLKFreq>
 80066e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066f0:	d010      	beq.n	8006714 <ADC_ConfigureBoostMode+0x78>
 80066f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066f6:	d871      	bhi.n	80067dc <ADC_ConfigureBoostMode+0x140>
 80066f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fc:	d002      	beq.n	8006704 <ADC_ConfigureBoostMode+0x68>
 80066fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006702:	d16b      	bne.n	80067dc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006710:	60fb      	str	r3, [r7, #12]
        break;
 8006712:	e066      	b.n	80067e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	089b      	lsrs	r3, r3, #2
 8006718:	60fb      	str	r3, [r7, #12]
        break;
 800671a:	e062      	b.n	80067e2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800671c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006720:	f003 f8b2 	bl	8009888 <HAL_RCCEx_GetPeriphCLKFreq>
 8006724:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800672e:	d051      	beq.n	80067d4 <ADC_ConfigureBoostMode+0x138>
 8006730:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006734:	d854      	bhi.n	80067e0 <ADC_ConfigureBoostMode+0x144>
 8006736:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800673a:	d047      	beq.n	80067cc <ADC_ConfigureBoostMode+0x130>
 800673c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006740:	d84e      	bhi.n	80067e0 <ADC_ConfigureBoostMode+0x144>
 8006742:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006746:	d03d      	beq.n	80067c4 <ADC_ConfigureBoostMode+0x128>
 8006748:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800674c:	d848      	bhi.n	80067e0 <ADC_ConfigureBoostMode+0x144>
 800674e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006752:	d033      	beq.n	80067bc <ADC_ConfigureBoostMode+0x120>
 8006754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006758:	d842      	bhi.n	80067e0 <ADC_ConfigureBoostMode+0x144>
 800675a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800675e:	d029      	beq.n	80067b4 <ADC_ConfigureBoostMode+0x118>
 8006760:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006764:	d83c      	bhi.n	80067e0 <ADC_ConfigureBoostMode+0x144>
 8006766:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800676a:	d01a      	beq.n	80067a2 <ADC_ConfigureBoostMode+0x106>
 800676c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006770:	d836      	bhi.n	80067e0 <ADC_ConfigureBoostMode+0x144>
 8006772:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006776:	d014      	beq.n	80067a2 <ADC_ConfigureBoostMode+0x106>
 8006778:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800677c:	d830      	bhi.n	80067e0 <ADC_ConfigureBoostMode+0x144>
 800677e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006782:	d00e      	beq.n	80067a2 <ADC_ConfigureBoostMode+0x106>
 8006784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006788:	d82a      	bhi.n	80067e0 <ADC_ConfigureBoostMode+0x144>
 800678a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800678e:	d008      	beq.n	80067a2 <ADC_ConfigureBoostMode+0x106>
 8006790:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006794:	d824      	bhi.n	80067e0 <ADC_ConfigureBoostMode+0x144>
 8006796:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800679a:	d002      	beq.n	80067a2 <ADC_ConfigureBoostMode+0x106>
 800679c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067a0:	d11e      	bne.n	80067e0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	0c9b      	lsrs	r3, r3, #18
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	60fb      	str	r3, [r7, #12]
        break;
 80067b2:	e016      	b.n	80067e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	091b      	lsrs	r3, r3, #4
 80067b8:	60fb      	str	r3, [r7, #12]
        break;
 80067ba:	e012      	b.n	80067e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	60fb      	str	r3, [r7, #12]
        break;
 80067c2:	e00e      	b.n	80067e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	099b      	lsrs	r3, r3, #6
 80067c8:	60fb      	str	r3, [r7, #12]
        break;
 80067ca:	e00a      	b.n	80067e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	09db      	lsrs	r3, r3, #7
 80067d0:	60fb      	str	r3, [r7, #12]
        break;
 80067d2:	e006      	b.n	80067e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	0a1b      	lsrs	r3, r3, #8
 80067d8:	60fb      	str	r3, [r7, #12]
        break;
 80067da:	e002      	b.n	80067e2 <ADC_ConfigureBoostMode+0x146>
        break;
 80067dc:	bf00      	nop
 80067de:	e000      	b.n	80067e2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80067e0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80067e2:	f7fd ffe9 	bl	80047b8 <HAL_GetREVID>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d815      	bhi.n	800681c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a2b      	ldr	r2, [pc, #172]	; (80068a0 <ADC_ConfigureBoostMode+0x204>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d908      	bls.n	800680a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006806:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006808:	e03e      	b.n	8006888 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006818:	609a      	str	r2, [r3, #8]
}
 800681a:	e035      	b.n	8006888 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4a1f      	ldr	r2, [pc, #124]	; (80068a4 <ADC_ConfigureBoostMode+0x208>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d808      	bhi.n	800683c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006838:	609a      	str	r2, [r3, #8]
}
 800683a:	e025      	b.n	8006888 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4a1a      	ldr	r2, [pc, #104]	; (80068a8 <ADC_ConfigureBoostMode+0x20c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d80a      	bhi.n	800685a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006856:	609a      	str	r2, [r3, #8]
}
 8006858:	e016      	b.n	8006888 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4a13      	ldr	r2, [pc, #76]	; (80068ac <ADC_ConfigureBoostMode+0x210>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d80a      	bhi.n	8006878 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006874:	609a      	str	r2, [r3, #8]
}
 8006876:	e007      	b.n	8006888 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006886:	609a      	str	r2, [r3, #8]
}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40022000 	.word	0x40022000
 8006894:	40022100 	.word	0x40022100
 8006898:	40022300 	.word	0x40022300
 800689c:	58026300 	.word	0x58026300
 80068a0:	01312d00 	.word	0x01312d00
 80068a4:	005f5e10 	.word	0x005f5e10
 80068a8:	00bebc20 	.word	0x00bebc20
 80068ac:	017d7840 	.word	0x017d7840

080068b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006924:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <__NVIC_SetPriorityGrouping+0x40>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006930:	4013      	ands	r3, r2
 8006932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <__NVIC_SetPriorityGrouping+0x44>)
 800693e:	4313      	orrs	r3, r2
 8006940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006942:	4a04      	ldr	r2, [pc, #16]	; (8006954 <__NVIC_SetPriorityGrouping+0x40>)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	60d3      	str	r3, [r2, #12]
}
 8006948:	bf00      	nop
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	e000ed00 	.word	0xe000ed00
 8006958:	05fa0000 	.word	0x05fa0000

0800695c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <__NVIC_GetPriorityGrouping+0x18>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	0a1b      	lsrs	r3, r3, #8
 8006966:	f003 0307 	and.w	r3, r3, #7
}
 800696a:	4618      	mov	r0, r3
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	e000ed00 	.word	0xe000ed00

08006978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006986:	2b00      	cmp	r3, #0
 8006988:	db0b      	blt.n	80069a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800698a:	88fb      	ldrh	r3, [r7, #6]
 800698c:	f003 021f 	and.w	r2, r3, #31
 8006990:	4907      	ldr	r1, [pc, #28]	; (80069b0 <__NVIC_EnableIRQ+0x38>)
 8006992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	2001      	movs	r0, #1
 800699a:	fa00 f202 	lsl.w	r2, r0, r2
 800699e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e000e100 	.word	0xe000e100

080069b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	6039      	str	r1, [r7, #0]
 80069be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80069c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	db0a      	blt.n	80069de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	490c      	ldr	r1, [pc, #48]	; (8006a00 <__NVIC_SetPriority+0x4c>)
 80069ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069d2:	0112      	lsls	r2, r2, #4
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	440b      	add	r3, r1
 80069d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069dc:	e00a      	b.n	80069f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	4908      	ldr	r1, [pc, #32]	; (8006a04 <__NVIC_SetPriority+0x50>)
 80069e4:	88fb      	ldrh	r3, [r7, #6]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	3b04      	subs	r3, #4
 80069ec:	0112      	lsls	r2, r2, #4
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	440b      	add	r3, r1
 80069f2:	761a      	strb	r2, [r3, #24]
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	e000e100 	.word	0xe000e100
 8006a04:	e000ed00 	.word	0xe000ed00

08006a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b089      	sub	sp, #36	; 0x24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	f1c3 0307 	rsb	r3, r3, #7
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	bf28      	it	cs
 8006a26:	2304      	movcs	r3, #4
 8006a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	2b06      	cmp	r3, #6
 8006a30:	d902      	bls.n	8006a38 <NVIC_EncodePriority+0x30>
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	3b03      	subs	r3, #3
 8006a36:	e000      	b.n	8006a3a <NVIC_EncodePriority+0x32>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	43da      	mvns	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a50:	f04f 31ff 	mov.w	r1, #4294967295
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5a:	43d9      	mvns	r1, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a60:	4313      	orrs	r3, r2
         );
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3724      	adds	r7, #36	; 0x24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b082      	sub	sp, #8
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff ff4c 	bl	8006914 <__NVIC_SetPriorityGrouping>
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006a92:	f7ff ff63 	bl	800695c <__NVIC_GetPriorityGrouping>
 8006a96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	6978      	ldr	r0, [r7, #20]
 8006a9e:	f7ff ffb3 	bl	8006a08 <NVIC_EncodePriority>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff ff82 	bl	80069b4 <__NVIC_SetPriority>
}
 8006ab0:	bf00      	nop
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff ff56 	bl	8006978 <__NVIC_EnableIRQ>
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e054      	b.n	8006b90 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	7f5b      	ldrb	r3, [r3, #29]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d105      	bne.n	8006afc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7f9 fec2 	bl	8000880 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	791b      	ldrb	r3, [r3, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10c      	bne.n	8006b24 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a22      	ldr	r2, [pc, #136]	; (8006b98 <HAL_CRC_Init+0xc4>)
 8006b10:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0218 	bic.w	r2, r2, #24
 8006b20:	609a      	str	r2, [r3, #8]
 8006b22:	e00c      	b.n	8006b3e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6899      	ldr	r1, [r3, #8]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f834 	bl	8006b9c <HAL_CRCEx_Polynomial_Set>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e028      	b.n	8006b90 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	795b      	ldrb	r3, [r3, #5]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d105      	bne.n	8006b52 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4e:	611a      	str	r2, [r3, #16]
 8006b50:	e004      	b.n	8006b5c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6912      	ldr	r2, [r2, #16]
 8006b5a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699a      	ldr	r2, [r3, #24]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	04c11db7 	.word	0x04c11db7

08006b9c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006bac:	231f      	movs	r3, #31
 8006bae:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006bb0:	bf00      	nop
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1e5a      	subs	r2, r3, #1
 8006bb6:	613a      	str	r2, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <HAL_CRCEx_Polynomial_Set+0x34>
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0f0      	beq.n	8006bb2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b18      	cmp	r3, #24
 8006bd4:	d846      	bhi.n	8006c64 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <HAL_CRCEx_Polynomial_Set+0x40>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c6b 	.word	0x08006c6b
 8006be0:	08006c65 	.word	0x08006c65
 8006be4:	08006c65 	.word	0x08006c65
 8006be8:	08006c65 	.word	0x08006c65
 8006bec:	08006c65 	.word	0x08006c65
 8006bf0:	08006c65 	.word	0x08006c65
 8006bf4:	08006c65 	.word	0x08006c65
 8006bf8:	08006c65 	.word	0x08006c65
 8006bfc:	08006c59 	.word	0x08006c59
 8006c00:	08006c65 	.word	0x08006c65
 8006c04:	08006c65 	.word	0x08006c65
 8006c08:	08006c65 	.word	0x08006c65
 8006c0c:	08006c65 	.word	0x08006c65
 8006c10:	08006c65 	.word	0x08006c65
 8006c14:	08006c65 	.word	0x08006c65
 8006c18:	08006c65 	.word	0x08006c65
 8006c1c:	08006c4d 	.word	0x08006c4d
 8006c20:	08006c65 	.word	0x08006c65
 8006c24:	08006c65 	.word	0x08006c65
 8006c28:	08006c65 	.word	0x08006c65
 8006c2c:	08006c65 	.word	0x08006c65
 8006c30:	08006c65 	.word	0x08006c65
 8006c34:	08006c65 	.word	0x08006c65
 8006c38:	08006c65 	.word	0x08006c65
 8006c3c:	08006c41 	.word	0x08006c41
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2b06      	cmp	r3, #6
 8006c44:	d913      	bls.n	8006c6e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c4a:	e010      	b.n	8006c6e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b07      	cmp	r3, #7
 8006c50:	d90f      	bls.n	8006c72 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c56:	e00c      	b.n	8006c72 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b0f      	cmp	r3, #15
 8006c5c:	d90b      	bls.n	8006c76 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c62:	e008      	b.n	8006c76 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	75fb      	strb	r3, [r7, #23]
      break;
 8006c68:	e006      	b.n	8006c78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c6a:	bf00      	nop
 8006c6c:	e004      	b.n	8006c78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c6e:	bf00      	nop
 8006c70:	e002      	b.n	8006c78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c72:	bf00      	nop
 8006c74:	e000      	b.n	8006c78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c76:	bf00      	nop
  }
  if (status == HAL_OK)
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10d      	bne.n	8006c9a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f023 0118 	bic.w	r1, r3, #24
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e04f      	b.n	8006d5a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7f9 fe32 	bl	8000938 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4b20      	ldr	r3, [pc, #128]	; (8006d64 <HAL_DMA2D_Init+0xbc>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6851      	ldr	r1, [r2, #4]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	69d2      	ldr	r2, [r2, #28]
 8006cee:	4311      	orrs	r1, r2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6812      	ldr	r2, [r2, #0]
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cfe:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <HAL_DMA2D_Init+0xc0>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6891      	ldr	r1, [r2, #8]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6992      	ldr	r2, [r2, #24]
 8006d0a:	4311      	orrs	r1, r2
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	430b      	orrs	r3, r1
 8006d12:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d1a:	4b14      	ldr	r3, [pc, #80]	; (8006d6c <HAL_DMA2D_Init+0xc4>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	68d1      	ldr	r1, [r2, #12]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	430b      	orrs	r3, r1
 8006d28:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d30:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	051a      	lsls	r2, r3, #20
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	055b      	lsls	r3, r3, #21
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	fff8ffbf 	.word	0xfff8ffbf
 8006d68:	fffffef8 	.word	0xfffffef8
 8006d6c:	ffff0000 	.word	0xffff0000

08006d70 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_DMA2D_ConfigLayer+0x24>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e092      	b.n	8006eba <HAL_DMA2D_ConfigLayer+0x14a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	4613      	mov	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	3328      	adds	r3, #40	; 0x28
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	4413      	add	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006dc8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006dd4:	4b3c      	ldr	r3, [pc, #240]	; (8006ec8 <HAL_DMA2D_ConfigLayer+0x158>)
 8006dd6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b0a      	cmp	r3, #10
 8006dde:	d003      	beq.n	8006de8 <HAL_DMA2D_ConfigLayer+0x78>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b09      	cmp	r3, #9
 8006de6:	d107      	bne.n	8006df8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	e005      	b.n	8006e04 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	061b      	lsls	r3, r3, #24
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d120      	bne.n	8006e4c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	43db      	mvns	r3, r3
 8006e14:	ea02 0103 	and.w	r1, r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b0a      	cmp	r3, #10
 8006e32:	d003      	beq.n	8006e3c <HAL_DMA2D_ConfigLayer+0xcc>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b09      	cmp	r3, #9
 8006e3a:	d135      	bne.n	8006ea8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006e48:	629a      	str	r2, [r3, #40]	; 0x28
 8006e4a:	e02d      	b.n	8006ea8 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2b0b      	cmp	r3, #11
 8006e52:	d109      	bne.n	8006e68 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	049b      	lsls	r3, r3, #18
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8006e66:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69da      	ldr	r2, [r3, #28]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	43db      	mvns	r3, r3
 8006e72:	ea02 0103 	and.w	r1, r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b0a      	cmp	r3, #10
 8006e90:	d003      	beq.n	8006e9a <HAL_DMA2D_ConfigLayer+0x12a>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b09      	cmp	r3, #9
 8006e98:	d106      	bne.n	8006ea8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006ea6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	ff33000f 	.word	0xff33000f

08006ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b089      	sub	sp, #36	; 0x24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006eda:	4b89      	ldr	r3, [pc, #548]	; (8007100 <HAL_GPIO_Init+0x234>)
 8006edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ede:	e194      	b.n	800720a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eec:	4013      	ands	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 8186 	beq.w	8007204 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f003 0303 	and.w	r3, r3, #3
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d005      	beq.n	8006f10 <HAL_GPIO_Init+0x44>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f003 0303 	and.w	r3, r3, #3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d130      	bne.n	8006f72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f20:	43db      	mvns	r3, r3
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	4013      	ands	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f46:	2201      	movs	r2, #1
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4e:	43db      	mvns	r3, r3
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	4013      	ands	r3, r2
 8006f54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	091b      	lsrs	r3, r3, #4
 8006f5c:	f003 0201 	and.w	r2, r3, #1
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d017      	beq.n	8006fae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	2203      	movs	r2, #3
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	43db      	mvns	r3, r3
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	4013      	ands	r3, r2
 8006f94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d123      	bne.n	8007002 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	08da      	lsrs	r2, r3, #3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3208      	adds	r2, #8
 8006fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	220f      	movs	r2, #15
 8006fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd6:	43db      	mvns	r3, r3
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	691a      	ldr	r2, [r3, #16]
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f003 0307 	and.w	r3, r3, #7
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	fa02 f303 	lsl.w	r3, r2, r3
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	08da      	lsrs	r2, r3, #3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3208      	adds	r2, #8
 8006ffc:	69b9      	ldr	r1, [r7, #24]
 8006ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	2203      	movs	r2, #3
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	43db      	mvns	r3, r3
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	4013      	ands	r3, r2
 8007018:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f003 0203 	and.w	r2, r3, #3
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	fa02 f303 	lsl.w	r3, r2, r3
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	4313      	orrs	r3, r2
 800702e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 80e0 	beq.w	8007204 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007044:	4b2f      	ldr	r3, [pc, #188]	; (8007104 <HAL_GPIO_Init+0x238>)
 8007046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800704a:	4a2e      	ldr	r2, [pc, #184]	; (8007104 <HAL_GPIO_Init+0x238>)
 800704c:	f043 0302 	orr.w	r3, r3, #2
 8007050:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007054:	4b2b      	ldr	r3, [pc, #172]	; (8007104 <HAL_GPIO_Init+0x238>)
 8007056:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007062:	4a29      	ldr	r2, [pc, #164]	; (8007108 <HAL_GPIO_Init+0x23c>)
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	089b      	lsrs	r3, r3, #2
 8007068:	3302      	adds	r3, #2
 800706a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800706e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	220f      	movs	r2, #15
 800707a:	fa02 f303 	lsl.w	r3, r2, r3
 800707e:	43db      	mvns	r3, r3
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	4013      	ands	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a20      	ldr	r2, [pc, #128]	; (800710c <HAL_GPIO_Init+0x240>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d052      	beq.n	8007134 <HAL_GPIO_Init+0x268>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <HAL_GPIO_Init+0x244>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d031      	beq.n	80070fa <HAL_GPIO_Init+0x22e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a1e      	ldr	r2, [pc, #120]	; (8007114 <HAL_GPIO_Init+0x248>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d02b      	beq.n	80070f6 <HAL_GPIO_Init+0x22a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a1d      	ldr	r2, [pc, #116]	; (8007118 <HAL_GPIO_Init+0x24c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d025      	beq.n	80070f2 <HAL_GPIO_Init+0x226>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a1c      	ldr	r2, [pc, #112]	; (800711c <HAL_GPIO_Init+0x250>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d01f      	beq.n	80070ee <HAL_GPIO_Init+0x222>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a1b      	ldr	r2, [pc, #108]	; (8007120 <HAL_GPIO_Init+0x254>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d019      	beq.n	80070ea <HAL_GPIO_Init+0x21e>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <HAL_GPIO_Init+0x258>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <HAL_GPIO_Init+0x21a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a19      	ldr	r2, [pc, #100]	; (8007128 <HAL_GPIO_Init+0x25c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00d      	beq.n	80070e2 <HAL_GPIO_Init+0x216>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a18      	ldr	r2, [pc, #96]	; (800712c <HAL_GPIO_Init+0x260>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d007      	beq.n	80070de <HAL_GPIO_Init+0x212>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a17      	ldr	r2, [pc, #92]	; (8007130 <HAL_GPIO_Init+0x264>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d101      	bne.n	80070da <HAL_GPIO_Init+0x20e>
 80070d6:	2309      	movs	r3, #9
 80070d8:	e02d      	b.n	8007136 <HAL_GPIO_Init+0x26a>
 80070da:	230a      	movs	r3, #10
 80070dc:	e02b      	b.n	8007136 <HAL_GPIO_Init+0x26a>
 80070de:	2308      	movs	r3, #8
 80070e0:	e029      	b.n	8007136 <HAL_GPIO_Init+0x26a>
 80070e2:	2307      	movs	r3, #7
 80070e4:	e027      	b.n	8007136 <HAL_GPIO_Init+0x26a>
 80070e6:	2306      	movs	r3, #6
 80070e8:	e025      	b.n	8007136 <HAL_GPIO_Init+0x26a>
 80070ea:	2305      	movs	r3, #5
 80070ec:	e023      	b.n	8007136 <HAL_GPIO_Init+0x26a>
 80070ee:	2304      	movs	r3, #4
 80070f0:	e021      	b.n	8007136 <HAL_GPIO_Init+0x26a>
 80070f2:	2303      	movs	r3, #3
 80070f4:	e01f      	b.n	8007136 <HAL_GPIO_Init+0x26a>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e01d      	b.n	8007136 <HAL_GPIO_Init+0x26a>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e01b      	b.n	8007136 <HAL_GPIO_Init+0x26a>
 80070fe:	bf00      	nop
 8007100:	58000080 	.word	0x58000080
 8007104:	58024400 	.word	0x58024400
 8007108:	58000400 	.word	0x58000400
 800710c:	58020000 	.word	0x58020000
 8007110:	58020400 	.word	0x58020400
 8007114:	58020800 	.word	0x58020800
 8007118:	58020c00 	.word	0x58020c00
 800711c:	58021000 	.word	0x58021000
 8007120:	58021400 	.word	0x58021400
 8007124:	58021800 	.word	0x58021800
 8007128:	58021c00 	.word	0x58021c00
 800712c:	58022000 	.word	0x58022000
 8007130:	58022400 	.word	0x58022400
 8007134:	2300      	movs	r3, #0
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	f002 0203 	and.w	r2, r2, #3
 800713c:	0092      	lsls	r2, r2, #2
 800713e:	4093      	lsls	r3, r2
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	4313      	orrs	r3, r2
 8007144:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007146:	4938      	ldr	r1, [pc, #224]	; (8007228 <HAL_GPIO_Init+0x35c>)
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	089b      	lsrs	r3, r3, #2
 800714c:	3302      	adds	r3, #2
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	43db      	mvns	r3, r3
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	4013      	ands	r3, r2
 8007164:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800717a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	43db      	mvns	r3, r3
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	4013      	ands	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80071a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	43db      	mvns	r3, r3
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	4013      	ands	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	43db      	mvns	r3, r3
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	4013      	ands	r3, r2
 80071e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	3301      	adds	r3, #1
 8007208:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	f47f ae63 	bne.w	8006ee0 <HAL_GPIO_Init+0x14>
  }
}
 800721a:	bf00      	nop
 800721c:	bf00      	nop
 800721e:	3724      	adds	r7, #36	; 0x24
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	58000400 	.word	0x58000400

0800722c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	807b      	strh	r3, [r7, #2]
 8007238:	4613      	mov	r3, r2
 800723a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800723c:	787b      	ldrb	r3, [r7, #1]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007242:	887a      	ldrh	r2, [r7, #2]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007248:	e003      	b.n	8007252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800724a:	887b      	ldrh	r3, [r7, #2]
 800724c:	041a      	lsls	r2, r3, #16
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	619a      	str	r2, [r3, #24]
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e0bf      	b.n	80073f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d106      	bne.n	800728c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7fb ffb8 	bl	80031fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80072a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6999      	ldr	r1, [r3, #24]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6899      	ldr	r1, [r3, #8]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4b4a      	ldr	r3, [pc, #296]	; (80073fc <HAL_LTDC_Init+0x19c>)
 80072d4:	400b      	ands	r3, r1
 80072d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	041b      	lsls	r3, r3, #16
 80072de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6899      	ldr	r1, [r3, #8]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68d9      	ldr	r1, [r3, #12]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	4b3e      	ldr	r3, [pc, #248]	; (80073fc <HAL_LTDC_Init+0x19c>)
 8007302:	400b      	ands	r3, r1
 8007304:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	041b      	lsls	r3, r3, #16
 800730c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68d9      	ldr	r1, [r3, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a1a      	ldr	r2, [r3, #32]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6919      	ldr	r1, [r3, #16]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	4b33      	ldr	r3, [pc, #204]	; (80073fc <HAL_LTDC_Init+0x19c>)
 8007330:	400b      	ands	r3, r1
 8007332:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	041b      	lsls	r3, r3, #16
 800733a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6919      	ldr	r1, [r3, #16]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6959      	ldr	r1, [r3, #20]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	4b27      	ldr	r3, [pc, #156]	; (80073fc <HAL_LTDC_Init+0x19c>)
 800735e:	400b      	ands	r3, r1
 8007360:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	041b      	lsls	r3, r3, #16
 8007368:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6959      	ldr	r1, [r3, #20]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007390:	041b      	lsls	r3, r3, #16
 8007392:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80073a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0206 	orr.w	r2, r2, #6
 80073ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	f000f800 	.word	0xf000f800

08007400 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007416:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d023      	beq.n	800746a <HAL_LTDC_IRQHandler+0x6a>
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01e      	beq.n	800746a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0204 	bic.w	r2, r2, #4
 800743a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2204      	movs	r2, #4
 8007442:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800744a:	f043 0201 	orr.w	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2204      	movs	r2, #4
 8007458:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f86f 	bl	8007548 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d023      	beq.n	80074bc <HAL_LTDC_IRQHandler+0xbc>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d01e      	beq.n	80074bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0202 	bic.w	r2, r2, #2
 800748c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2202      	movs	r2, #2
 8007494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800749c:	f043 0202 	orr.w	r2, r3, #2
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2204      	movs	r2, #4
 80074aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f846 	bl	8007548 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d01b      	beq.n	80074fe <HAL_LTDC_IRQHandler+0xfe>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d016      	beq.n	80074fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0201 	bic.w	r2, r2, #1
 80074de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2201      	movs	r2, #1
 80074e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f00e fd0f 	bl	8015f1c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d01b      	beq.n	8007540 <HAL_LTDC_IRQHandler+0x140>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f003 0308 	and.w	r3, r3, #8
 800750e:	2b00      	cmp	r3, #0
 8007510:	d016      	beq.n	8007540 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0208 	bic.w	r2, r2, #8
 8007520:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2208      	movs	r2, #8
 8007528:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f80e 	bl	800755c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007540:	bf00      	nop
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007570:	b5b0      	push	{r4, r5, r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007582:	2b01      	cmp	r3, #1
 8007584:	d101      	bne.n	800758a <HAL_LTDC_ConfigLayer+0x1a>
 8007586:	2302      	movs	r3, #2
 8007588:	e02c      	b.n	80075e4 <HAL_LTDC_ConfigLayer+0x74>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2202      	movs	r2, #2
 8007596:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2134      	movs	r1, #52	; 0x34
 80075a0:	fb01 f303 	mul.w	r3, r1, r3
 80075a4:	4413      	add	r3, r2
 80075a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4614      	mov	r4, r2
 80075ae:	461d      	mov	r5, r3
 80075b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	68b9      	ldr	r1, [r7, #8]
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 f849 	bl	800765c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2201      	movs	r2, #1
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bdb0      	pop	{r4, r5, r7, pc}

080075ec <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_LTDC_ProgramLineEvent+0x18>
 8007600:	2302      	movs	r3, #2
 8007602:	e023      	b.n	800764c <HAL_LTDC_ProgramLineEvent+0x60>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0201 	bic.w	r2, r2, #1
 8007622:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007624:	4a0c      	ldr	r2, [pc, #48]	; (8007658 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0201 	orr.w	r2, r2, #1
 8007638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	50001000 	.word	0x50001000

0800765c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800765c:	b480      	push	{r7}
 800765e:	b089      	sub	sp, #36	; 0x24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	0c1b      	lsrs	r3, r3, #16
 8007674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007678:	4413      	add	r3, r2
 800767a:	041b      	lsls	r3, r3, #16
 800767c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	01db      	lsls	r3, r3, #7
 8007688:	4413      	add	r3, r2
 800768a:	3384      	adds	r3, #132	; 0x84
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	4611      	mov	r1, r2
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	01d2      	lsls	r2, r2, #7
 8007698:	440a      	add	r2, r1
 800769a:	3284      	adds	r2, #132	; 0x84
 800769c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80076a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	0c1b      	lsrs	r3, r3, #16
 80076ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076b2:	4413      	add	r3, r2
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4619      	mov	r1, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	01db      	lsls	r3, r3, #7
 80076c0:	440b      	add	r3, r1
 80076c2:	3384      	adds	r3, #132	; 0x84
 80076c4:	4619      	mov	r1, r3
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076da:	4413      	add	r3, r2
 80076dc:	041b      	lsls	r3, r3, #16
 80076de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	01db      	lsls	r3, r3, #7
 80076ea:	4413      	add	r3, r2
 80076ec:	3384      	adds	r3, #132	; 0x84
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	6812      	ldr	r2, [r2, #0]
 80076f4:	4611      	mov	r1, r2
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	01d2      	lsls	r2, r2, #7
 80076fa:	440a      	add	r2, r1
 80076fc:	3284      	adds	r2, #132	; 0x84
 80076fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007702:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007712:	4413      	add	r3, r2
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4619      	mov	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	01db      	lsls	r3, r3, #7
 8007720:	440b      	add	r3, r1
 8007722:	3384      	adds	r3, #132	; 0x84
 8007724:	4619      	mov	r1, r3
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4313      	orrs	r3, r2
 800772a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	01db      	lsls	r3, r3, #7
 8007736:	4413      	add	r3, r2
 8007738:	3384      	adds	r3, #132	; 0x84
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	6812      	ldr	r2, [r2, #0]
 8007740:	4611      	mov	r1, r2
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	01d2      	lsls	r2, r2, #7
 8007746:	440a      	add	r2, r1
 8007748:	3284      	adds	r2, #132	; 0x84
 800774a:	f023 0307 	bic.w	r3, r3, #7
 800774e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	01db      	lsls	r3, r3, #7
 800775a:	4413      	add	r3, r2
 800775c:	3384      	adds	r3, #132	; 0x84
 800775e:	461a      	mov	r2, r3
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007776:	041b      	lsls	r3, r3, #16
 8007778:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	061b      	lsls	r3, r3, #24
 8007780:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	01db      	lsls	r3, r3, #7
 800778c:	4413      	add	r3, r2
 800778e:	3384      	adds	r3, #132	; 0x84
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	01db      	lsls	r3, r3, #7
 800779c:	4413      	add	r3, r2
 800779e:	3384      	adds	r3, #132	; 0x84
 80077a0:	461a      	mov	r2, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077ac:	461a      	mov	r2, r3
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	431a      	orrs	r2, r3
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	431a      	orrs	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4619      	mov	r1, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	01db      	lsls	r3, r3, #7
 80077c0:	440b      	add	r3, r1
 80077c2:	3384      	adds	r3, #132	; 0x84
 80077c4:	4619      	mov	r1, r3
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	01db      	lsls	r3, r3, #7
 80077d6:	4413      	add	r3, r2
 80077d8:	3384      	adds	r3, #132	; 0x84
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	4611      	mov	r1, r2
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	01d2      	lsls	r2, r2, #7
 80077e6:	440a      	add	r2, r1
 80077e8:	3284      	adds	r2, #132	; 0x84
 80077ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80077ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	01db      	lsls	r3, r3, #7
 80077fa:	4413      	add	r3, r2
 80077fc:	3384      	adds	r3, #132	; 0x84
 80077fe:	461a      	mov	r2, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	01db      	lsls	r3, r3, #7
 8007810:	4413      	add	r3, r2
 8007812:	3384      	adds	r3, #132	; 0x84
 8007814:	69da      	ldr	r2, [r3, #28]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4619      	mov	r1, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	01db      	lsls	r3, r3, #7
 8007820:	440b      	add	r3, r1
 8007822:	3384      	adds	r3, #132	; 0x84
 8007824:	4619      	mov	r1, r3
 8007826:	4b58      	ldr	r3, [pc, #352]	; (8007988 <LTDC_SetConfig+0x32c>)
 8007828:	4013      	ands	r3, r2
 800782a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	69da      	ldr	r2, [r3, #28]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	6809      	ldr	r1, [r1, #0]
 8007838:	4608      	mov	r0, r1
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	01c9      	lsls	r1, r1, #7
 800783e:	4401      	add	r1, r0
 8007840:	3184      	adds	r1, #132	; 0x84
 8007842:	4313      	orrs	r3, r2
 8007844:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	01db      	lsls	r3, r3, #7
 8007850:	4413      	add	r3, r2
 8007852:	3384      	adds	r3, #132	; 0x84
 8007854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	461a      	mov	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	01db      	lsls	r3, r3, #7
 8007860:	4413      	add	r3, r2
 8007862:	3384      	adds	r3, #132	; 0x84
 8007864:	461a      	mov	r2, r3
 8007866:	2300      	movs	r3, #0
 8007868:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	01db      	lsls	r3, r3, #7
 8007874:	4413      	add	r3, r2
 8007876:	3384      	adds	r3, #132	; 0x84
 8007878:	461a      	mov	r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007888:	2304      	movs	r3, #4
 800788a:	61fb      	str	r3, [r7, #28]
 800788c:	e01b      	b.n	80078c6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d102      	bne.n	800789c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007896:	2303      	movs	r3, #3
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	e014      	b.n	80078c6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d00b      	beq.n	80078bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d007      	beq.n	80078bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d003      	beq.n	80078bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078b8:	2b07      	cmp	r3, #7
 80078ba:	d102      	bne.n	80078c2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80078bc:	2302      	movs	r3, #2
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	e001      	b.n	80078c6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80078c2:	2301      	movs	r3, #1
 80078c4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	01db      	lsls	r3, r3, #7
 80078d0:	4413      	add	r3, r2
 80078d2:	3384      	adds	r3, #132	; 0x84
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	4611      	mov	r1, r2
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	01d2      	lsls	r2, r2, #7
 80078e0:	440a      	add	r2, r1
 80078e2:	3284      	adds	r2, #132	; 0x84
 80078e4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80078e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	fb02 f303 	mul.w	r3, r2, r3
 80078f4:	041a      	lsls	r2, r3, #16
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	6859      	ldr	r1, [r3, #4]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	1acb      	subs	r3, r1, r3
 8007900:	69f9      	ldr	r1, [r7, #28]
 8007902:	fb01 f303 	mul.w	r3, r1, r3
 8007906:	3307      	adds	r3, #7
 8007908:	68f9      	ldr	r1, [r7, #12]
 800790a:	6809      	ldr	r1, [r1, #0]
 800790c:	4608      	mov	r0, r1
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	01c9      	lsls	r1, r1, #7
 8007912:	4401      	add	r1, r0
 8007914:	3184      	adds	r1, #132	; 0x84
 8007916:	4313      	orrs	r3, r2
 8007918:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	01db      	lsls	r3, r3, #7
 8007924:	4413      	add	r3, r2
 8007926:	3384      	adds	r3, #132	; 0x84
 8007928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4619      	mov	r1, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	01db      	lsls	r3, r3, #7
 8007934:	440b      	add	r3, r1
 8007936:	3384      	adds	r3, #132	; 0x84
 8007938:	4619      	mov	r1, r3
 800793a:	4b14      	ldr	r3, [pc, #80]	; (800798c <LTDC_SetConfig+0x330>)
 800793c:	4013      	ands	r3, r2
 800793e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	461a      	mov	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	01db      	lsls	r3, r3, #7
 800794a:	4413      	add	r3, r2
 800794c:	3384      	adds	r3, #132	; 0x84
 800794e:	461a      	mov	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	01db      	lsls	r3, r3, #7
 8007960:	4413      	add	r3, r2
 8007962:	3384      	adds	r3, #132	; 0x84
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	6812      	ldr	r2, [r2, #0]
 800796a:	4611      	mov	r1, r2
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	01d2      	lsls	r2, r2, #7
 8007970:	440a      	add	r2, r1
 8007972:	3284      	adds	r2, #132	; 0x84
 8007974:	f043 0301 	orr.w	r3, r3, #1
 8007978:	6013      	str	r3, [r2, #0]
}
 800797a:	bf00      	nop
 800797c:	3724      	adds	r7, #36	; 0x24
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	fffff8f8 	.word	0xfffff8f8
 800798c:	fffff800 	.word	0xfffff800

08007990 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007998:	4b19      	ldr	r3, [pc, #100]	; (8007a00 <HAL_PWREx_ConfigSupply+0x70>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d00a      	beq.n	80079ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80079a4:	4b16      	ldr	r3, [pc, #88]	; (8007a00 <HAL_PWREx_ConfigSupply+0x70>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d001      	beq.n	80079b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e01f      	b.n	80079f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e01d      	b.n	80079f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80079ba:	4b11      	ldr	r3, [pc, #68]	; (8007a00 <HAL_PWREx_ConfigSupply+0x70>)
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f023 0207 	bic.w	r2, r3, #7
 80079c2:	490f      	ldr	r1, [pc, #60]	; (8007a00 <HAL_PWREx_ConfigSupply+0x70>)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80079ca:	f7fc fec5 	bl	8004758 <HAL_GetTick>
 80079ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079d0:	e009      	b.n	80079e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80079d2:	f7fc fec1 	bl	8004758 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079e0:	d901      	bls.n	80079e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e007      	b.n	80079f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079e6:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <HAL_PWREx_ConfigSupply+0x70>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f2:	d1ee      	bne.n	80079d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	58024800 	.word	0x58024800

08007a04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08c      	sub	sp, #48	; 0x30
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d102      	bne.n	8007a18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f000 bc1d 	b.w	8008252 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8087 	beq.w	8007b34 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a26:	4b99      	ldr	r3, [pc, #612]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a30:	4b96      	ldr	r3, [pc, #600]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	2b10      	cmp	r3, #16
 8007a3a:	d007      	beq.n	8007a4c <HAL_RCC_OscConfig+0x48>
 8007a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3e:	2b18      	cmp	r3, #24
 8007a40:	d110      	bne.n	8007a64 <HAL_RCC_OscConfig+0x60>
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	f003 0303 	and.w	r3, r3, #3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d10b      	bne.n	8007a64 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a4c:	4b8f      	ldr	r3, [pc, #572]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d06c      	beq.n	8007b32 <HAL_RCC_OscConfig+0x12e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d168      	bne.n	8007b32 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e3f6      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a6c:	d106      	bne.n	8007a7c <HAL_RCC_OscConfig+0x78>
 8007a6e:	4b87      	ldr	r3, [pc, #540]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a86      	ldr	r2, [pc, #536]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	e02e      	b.n	8007ada <HAL_RCC_OscConfig+0xd6>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10c      	bne.n	8007a9e <HAL_RCC_OscConfig+0x9a>
 8007a84:	4b81      	ldr	r3, [pc, #516]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a80      	ldr	r2, [pc, #512]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	4b7e      	ldr	r3, [pc, #504]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a7d      	ldr	r2, [pc, #500]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	e01d      	b.n	8007ada <HAL_RCC_OscConfig+0xd6>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007aa6:	d10c      	bne.n	8007ac2 <HAL_RCC_OscConfig+0xbe>
 8007aa8:	4b78      	ldr	r3, [pc, #480]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a77      	ldr	r2, [pc, #476]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	4b75      	ldr	r3, [pc, #468]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a74      	ldr	r2, [pc, #464]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	e00b      	b.n	8007ada <HAL_RCC_OscConfig+0xd6>
 8007ac2:	4b72      	ldr	r3, [pc, #456]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a71      	ldr	r2, [pc, #452]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	4b6f      	ldr	r3, [pc, #444]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a6e      	ldr	r2, [pc, #440]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ad8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d013      	beq.n	8007b0a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae2:	f7fc fe39 	bl	8004758 <HAL_GetTick>
 8007ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ae8:	e008      	b.n	8007afc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aea:	f7fc fe35 	bl	8004758 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b64      	cmp	r3, #100	; 0x64
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e3aa      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007afc:	4b63      	ldr	r3, [pc, #396]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0f0      	beq.n	8007aea <HAL_RCC_OscConfig+0xe6>
 8007b08:	e014      	b.n	8007b34 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0a:	f7fc fe25 	bl	8004758 <HAL_GetTick>
 8007b0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b10:	e008      	b.n	8007b24 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b12:	f7fc fe21 	bl	8004758 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b64      	cmp	r3, #100	; 0x64
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e396      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b24:	4b59      	ldr	r3, [pc, #356]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1f0      	bne.n	8007b12 <HAL_RCC_OscConfig+0x10e>
 8007b30:	e000      	b.n	8007b34 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0302 	and.w	r3, r3, #2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 80cb 	beq.w	8007cd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b42:	4b52      	ldr	r3, [pc, #328]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b4a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b4c:	4b4f      	ldr	r3, [pc, #316]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b50:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <HAL_RCC_OscConfig+0x164>
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	2b18      	cmp	r3, #24
 8007b5c:	d156      	bne.n	8007c0c <HAL_RCC_OscConfig+0x208>
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d151      	bne.n	8007c0c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b68:	4b48      	ldr	r3, [pc, #288]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <HAL_RCC_OscConfig+0x17c>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e368      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b80:	4b42      	ldr	r3, [pc, #264]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f023 0219 	bic.w	r2, r3, #25
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	493f      	ldr	r1, [pc, #252]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b92:	f7fc fde1 	bl	8004758 <HAL_GetTick>
 8007b96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b98:	e008      	b.n	8007bac <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b9a:	f7fc fddd 	bl	8004758 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e352      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bac:	4b37      	ldr	r3, [pc, #220]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0f0      	beq.n	8007b9a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb8:	f7fc fdfe 	bl	80047b8 <HAL_GetREVID>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d817      	bhi.n	8007bf6 <HAL_RCC_OscConfig+0x1f2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	2b40      	cmp	r3, #64	; 0x40
 8007bcc:	d108      	bne.n	8007be0 <HAL_RCC_OscConfig+0x1dc>
 8007bce:	4b2f      	ldr	r3, [pc, #188]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007bd6:	4a2d      	ldr	r2, [pc, #180]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bdc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bde:	e07b      	b.n	8007cd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007be0:	4b2a      	ldr	r3, [pc, #168]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	031b      	lsls	r3, r3, #12
 8007bee:	4927      	ldr	r1, [pc, #156]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bf4:	e070      	b.n	8007cd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bf6:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	061b      	lsls	r3, r3, #24
 8007c04:	4921      	ldr	r1, [pc, #132]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c0a:	e065      	b.n	8007cd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d048      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c14:	4b1d      	ldr	r3, [pc, #116]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f023 0219 	bic.w	r2, r3, #25
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	491a      	ldr	r1, [pc, #104]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c26:	f7fc fd97 	bl	8004758 <HAL_GetTick>
 8007c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c2c:	e008      	b.n	8007c40 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c2e:	f7fc fd93 	bl	8004758 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d901      	bls.n	8007c40 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e308      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c40:	4b12      	ldr	r3, [pc, #72]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0f0      	beq.n	8007c2e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c4c:	f7fc fdb4 	bl	80047b8 <HAL_GetREVID>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d81a      	bhi.n	8007c90 <HAL_RCC_OscConfig+0x28c>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d108      	bne.n	8007c74 <HAL_RCC_OscConfig+0x270>
 8007c62:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c6a:	4a08      	ldr	r2, [pc, #32]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c70:	6053      	str	r3, [r2, #4]
 8007c72:	e031      	b.n	8007cd8 <HAL_RCC_OscConfig+0x2d4>
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	031b      	lsls	r3, r3, #12
 8007c82:	4902      	ldr	r1, [pc, #8]	; (8007c8c <HAL_RCC_OscConfig+0x288>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	604b      	str	r3, [r1, #4]
 8007c88:	e026      	b.n	8007cd8 <HAL_RCC_OscConfig+0x2d4>
 8007c8a:	bf00      	nop
 8007c8c:	58024400 	.word	0x58024400
 8007c90:	4b9a      	ldr	r3, [pc, #616]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	061b      	lsls	r3, r3, #24
 8007c9e:	4997      	ldr	r1, [pc, #604]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	604b      	str	r3, [r1, #4]
 8007ca4:	e018      	b.n	8007cd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ca6:	4b95      	ldr	r3, [pc, #596]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a94      	ldr	r2, [pc, #592]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007cac:	f023 0301 	bic.w	r3, r3, #1
 8007cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb2:	f7fc fd51 	bl	8004758 <HAL_GetTick>
 8007cb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cb8:	e008      	b.n	8007ccc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cba:	f7fc fd4d 	bl	8004758 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e2c2      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ccc:	4b8b      	ldr	r3, [pc, #556]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1f0      	bne.n	8007cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80a9 	beq.w	8007e38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ce6:	4b85      	ldr	r3, [pc, #532]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cf0:	4b82      	ldr	r3, [pc, #520]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d007      	beq.n	8007d0c <HAL_RCC_OscConfig+0x308>
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	2b18      	cmp	r3, #24
 8007d00:	d13a      	bne.n	8007d78 <HAL_RCC_OscConfig+0x374>
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d135      	bne.n	8007d78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d0c:	4b7b      	ldr	r3, [pc, #492]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <HAL_RCC_OscConfig+0x320>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	2b80      	cmp	r3, #128	; 0x80
 8007d1e:	d001      	beq.n	8007d24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e296      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d24:	f7fc fd48 	bl	80047b8 <HAL_GetREVID>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d817      	bhi.n	8007d62 <HAL_RCC_OscConfig+0x35e>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	d108      	bne.n	8007d4c <HAL_RCC_OscConfig+0x348>
 8007d3a:	4b70      	ldr	r3, [pc, #448]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007d42:	4a6e      	ldr	r2, [pc, #440]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d48:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d4a:	e075      	b.n	8007e38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d4c:	4b6b      	ldr	r3, [pc, #428]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	069b      	lsls	r3, r3, #26
 8007d5a:	4968      	ldr	r1, [pc, #416]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d60:	e06a      	b.n	8007e38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d62:	4b66      	ldr	r3, [pc, #408]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	061b      	lsls	r3, r3, #24
 8007d70:	4962      	ldr	r1, [pc, #392]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d76:	e05f      	b.n	8007e38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d042      	beq.n	8007e06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007d80:	4b5e      	ldr	r3, [pc, #376]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a5d      	ldr	r2, [pc, #372]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8c:	f7fc fce4 	bl	8004758 <HAL_GetTick>
 8007d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007d94:	f7fc fce0 	bl	8004758 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e255      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007da6:	4b55      	ldr	r3, [pc, #340]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0f0      	beq.n	8007d94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007db2:	f7fc fd01 	bl	80047b8 <HAL_GetREVID>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f241 0203 	movw	r2, #4099	; 0x1003
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d817      	bhi.n	8007df0 <HAL_RCC_OscConfig+0x3ec>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	2b20      	cmp	r3, #32
 8007dc6:	d108      	bne.n	8007dda <HAL_RCC_OscConfig+0x3d6>
 8007dc8:	4b4c      	ldr	r3, [pc, #304]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007dd0:	4a4a      	ldr	r2, [pc, #296]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dd6:	6053      	str	r3, [r2, #4]
 8007dd8:	e02e      	b.n	8007e38 <HAL_RCC_OscConfig+0x434>
 8007dda:	4b48      	ldr	r3, [pc, #288]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	069b      	lsls	r3, r3, #26
 8007de8:	4944      	ldr	r1, [pc, #272]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	604b      	str	r3, [r1, #4]
 8007dee:	e023      	b.n	8007e38 <HAL_RCC_OscConfig+0x434>
 8007df0:	4b42      	ldr	r3, [pc, #264]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	061b      	lsls	r3, r3, #24
 8007dfe:	493f      	ldr	r1, [pc, #252]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	60cb      	str	r3, [r1, #12]
 8007e04:	e018      	b.n	8007e38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e06:	4b3d      	ldr	r3, [pc, #244]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a3c      	ldr	r2, [pc, #240]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e12:	f7fc fca1 	bl	8004758 <HAL_GetTick>
 8007e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e18:	e008      	b.n	8007e2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e1a:	f7fc fc9d 	bl	8004758 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d901      	bls.n	8007e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e212      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e2c:	4b33      	ldr	r3, [pc, #204]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1f0      	bne.n	8007e1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d036      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d019      	beq.n	8007e80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e4c:	4b2b      	ldr	r3, [pc, #172]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e50:	4a2a      	ldr	r2, [pc, #168]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007e52:	f043 0301 	orr.w	r3, r3, #1
 8007e56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e58:	f7fc fc7e 	bl	8004758 <HAL_GetTick>
 8007e5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e5e:	e008      	b.n	8007e72 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e60:	f7fc fc7a 	bl	8004758 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d901      	bls.n	8007e72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e1ef      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e72:	4b22      	ldr	r3, [pc, #136]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0f0      	beq.n	8007e60 <HAL_RCC_OscConfig+0x45c>
 8007e7e:	e018      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e80:	4b1e      	ldr	r3, [pc, #120]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e84:	4a1d      	ldr	r2, [pc, #116]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e8c:	f7fc fc64 	bl	8004758 <HAL_GetTick>
 8007e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e94:	f7fc fc60 	bl	8004758 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e1d5      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ea6:	4b15      	ldr	r3, [pc, #84]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1f0      	bne.n	8007e94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0320 	and.w	r3, r3, #32
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d039      	beq.n	8007f32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d01c      	beq.n	8007f00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a0c      	ldr	r2, [pc, #48]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007ecc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ed0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ed2:	f7fc fc41 	bl	8004758 <HAL_GetTick>
 8007ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ed8:	e008      	b.n	8007eec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007eda:	f7fc fc3d 	bl	8004758 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e1b2      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007eec:	4b03      	ldr	r3, [pc, #12]	; (8007efc <HAL_RCC_OscConfig+0x4f8>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0f0      	beq.n	8007eda <HAL_RCC_OscConfig+0x4d6>
 8007ef8:	e01b      	b.n	8007f32 <HAL_RCC_OscConfig+0x52e>
 8007efa:	bf00      	nop
 8007efc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f00:	4b9b      	ldr	r3, [pc, #620]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a9a      	ldr	r2, [pc, #616]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f0c:	f7fc fc24 	bl	8004758 <HAL_GetTick>
 8007f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f12:	e008      	b.n	8007f26 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f14:	f7fc fc20 	bl	8004758 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e195      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f26:	4b92      	ldr	r3, [pc, #584]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f0      	bne.n	8007f14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 8081 	beq.w	8008042 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f40:	4b8c      	ldr	r3, [pc, #560]	; (8008174 <HAL_RCC_OscConfig+0x770>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a8b      	ldr	r2, [pc, #556]	; (8008174 <HAL_RCC_OscConfig+0x770>)
 8007f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f4c:	f7fc fc04 	bl	8004758 <HAL_GetTick>
 8007f50:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f52:	e008      	b.n	8007f66 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f54:	f7fc fc00 	bl	8004758 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	2b64      	cmp	r3, #100	; 0x64
 8007f60:	d901      	bls.n	8007f66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e175      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f66:	4b83      	ldr	r3, [pc, #524]	; (8008174 <HAL_RCC_OscConfig+0x770>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0f0      	beq.n	8007f54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d106      	bne.n	8007f88 <HAL_RCC_OscConfig+0x584>
 8007f7a:	4b7d      	ldr	r3, [pc, #500]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7e:	4a7c      	ldr	r2, [pc, #496]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007f80:	f043 0301 	orr.w	r3, r3, #1
 8007f84:	6713      	str	r3, [r2, #112]	; 0x70
 8007f86:	e02d      	b.n	8007fe4 <HAL_RCC_OscConfig+0x5e0>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10c      	bne.n	8007faa <HAL_RCC_OscConfig+0x5a6>
 8007f90:	4b77      	ldr	r3, [pc, #476]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f94:	4a76      	ldr	r2, [pc, #472]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007f96:	f023 0301 	bic.w	r3, r3, #1
 8007f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f9c:	4b74      	ldr	r3, [pc, #464]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa0:	4a73      	ldr	r2, [pc, #460]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007fa2:	f023 0304 	bic.w	r3, r3, #4
 8007fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa8:	e01c      	b.n	8007fe4 <HAL_RCC_OscConfig+0x5e0>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	2b05      	cmp	r3, #5
 8007fb0:	d10c      	bne.n	8007fcc <HAL_RCC_OscConfig+0x5c8>
 8007fb2:	4b6f      	ldr	r3, [pc, #444]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb6:	4a6e      	ldr	r2, [pc, #440]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007fb8:	f043 0304 	orr.w	r3, r3, #4
 8007fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8007fbe:	4b6c      	ldr	r3, [pc, #432]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	4a6b      	ldr	r2, [pc, #428]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007fc4:	f043 0301 	orr.w	r3, r3, #1
 8007fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8007fca:	e00b      	b.n	8007fe4 <HAL_RCC_OscConfig+0x5e0>
 8007fcc:	4b68      	ldr	r3, [pc, #416]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd0:	4a67      	ldr	r2, [pc, #412]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
 8007fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fd8:	4b65      	ldr	r3, [pc, #404]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fdc:	4a64      	ldr	r2, [pc, #400]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8007fde:	f023 0304 	bic.w	r3, r3, #4
 8007fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d015      	beq.n	8008018 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fec:	f7fc fbb4 	bl	8004758 <HAL_GetTick>
 8007ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ff2:	e00a      	b.n	800800a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ff4:	f7fc fbb0 	bl	8004758 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008002:	4293      	cmp	r3, r2
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e123      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800800a:	4b59      	ldr	r3, [pc, #356]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0ee      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x5f0>
 8008016:	e014      	b.n	8008042 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008018:	f7fc fb9e 	bl	8004758 <HAL_GetTick>
 800801c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800801e:	e00a      	b.n	8008036 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008020:	f7fc fb9a 	bl	8004758 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	f241 3288 	movw	r2, #5000	; 0x1388
 800802e:	4293      	cmp	r3, r2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e10d      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008036:	4b4e      	ldr	r3, [pc, #312]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1ee      	bne.n	8008020 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 8102 	beq.w	8008250 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800804c:	4b48      	ldr	r3, [pc, #288]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008054:	2b18      	cmp	r3, #24
 8008056:	f000 80bd 	beq.w	80081d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	2b02      	cmp	r3, #2
 8008060:	f040 809e 	bne.w	80081a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008064:	4b42      	ldr	r3, [pc, #264]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a41      	ldr	r2, [pc, #260]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 800806a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800806e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fc fb72 	bl	8004758 <HAL_GetTick>
 8008074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008078:	f7fc fb6e 	bl	8004758 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e0e3      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800808a:	4b39      	ldr	r3, [pc, #228]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008096:	4b36      	ldr	r3, [pc, #216]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800809a:	4b37      	ldr	r3, [pc, #220]	; (8008178 <HAL_RCC_OscConfig+0x774>)
 800809c:	4013      	ands	r3, r2
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80080a6:	0112      	lsls	r2, r2, #4
 80080a8:	430a      	orrs	r2, r1
 80080aa:	4931      	ldr	r1, [pc, #196]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	628b      	str	r3, [r1, #40]	; 0x28
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b4:	3b01      	subs	r3, #1
 80080b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080be:	3b01      	subs	r3, #1
 80080c0:	025b      	lsls	r3, r3, #9
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	431a      	orrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	3b01      	subs	r3, #1
 80080cc:	041b      	lsls	r3, r3, #16
 80080ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d8:	3b01      	subs	r3, #1
 80080da:	061b      	lsls	r3, r3, #24
 80080dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080e0:	4923      	ldr	r1, [pc, #140]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80080e6:	4b22      	ldr	r3, [pc, #136]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 80080e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ea:	4a21      	ldr	r2, [pc, #132]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 80080ec:	f023 0301 	bic.w	r3, r3, #1
 80080f0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80080f2:	4b1f      	ldr	r3, [pc, #124]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 80080f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f6:	4b21      	ldr	r3, [pc, #132]	; (800817c <HAL_RCC_OscConfig+0x778>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80080fe:	00d2      	lsls	r2, r2, #3
 8008100:	491b      	ldr	r1, [pc, #108]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008102:	4313      	orrs	r3, r2
 8008104:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008106:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	f023 020c 	bic.w	r2, r3, #12
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	4917      	ldr	r1, [pc, #92]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008114:	4313      	orrs	r3, r2
 8008116:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008118:	4b15      	ldr	r3, [pc, #84]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	f023 0202 	bic.w	r2, r3, #2
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008124:	4912      	ldr	r1, [pc, #72]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008126:	4313      	orrs	r3, r2
 8008128:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800812a:	4b11      	ldr	r3, [pc, #68]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	4a10      	ldr	r2, [pc, #64]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008134:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008136:	4b0e      	ldr	r3, [pc, #56]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813a:	4a0d      	ldr	r2, [pc, #52]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 800813c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008140:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008142:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008146:	4a0a      	ldr	r2, [pc, #40]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800814c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800814e:	4b08      	ldr	r3, [pc, #32]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	4a07      	ldr	r2, [pc, #28]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008154:	f043 0301 	orr.w	r3, r3, #1
 8008158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a04      	ldr	r2, [pc, #16]	; (8008170 <HAL_RCC_OscConfig+0x76c>)
 8008160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008166:	f7fc faf7 	bl	8004758 <HAL_GetTick>
 800816a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800816c:	e011      	b.n	8008192 <HAL_RCC_OscConfig+0x78e>
 800816e:	bf00      	nop
 8008170:	58024400 	.word	0x58024400
 8008174:	58024800 	.word	0x58024800
 8008178:	fffffc0c 	.word	0xfffffc0c
 800817c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008180:	f7fc faea 	bl	8004758 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b02      	cmp	r3, #2
 800818c:	d901      	bls.n	8008192 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e05f      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008192:	4b32      	ldr	r3, [pc, #200]	; (800825c <HAL_RCC_OscConfig+0x858>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0f0      	beq.n	8008180 <HAL_RCC_OscConfig+0x77c>
 800819e:	e057      	b.n	8008250 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081a0:	4b2e      	ldr	r3, [pc, #184]	; (800825c <HAL_RCC_OscConfig+0x858>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a2d      	ldr	r2, [pc, #180]	; (800825c <HAL_RCC_OscConfig+0x858>)
 80081a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ac:	f7fc fad4 	bl	8004758 <HAL_GetTick>
 80081b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081b4:	f7fc fad0 	bl	8004758 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e045      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081c6:	4b25      	ldr	r3, [pc, #148]	; (800825c <HAL_RCC_OscConfig+0x858>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f0      	bne.n	80081b4 <HAL_RCC_OscConfig+0x7b0>
 80081d2:	e03d      	b.n	8008250 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80081d4:	4b21      	ldr	r3, [pc, #132]	; (800825c <HAL_RCC_OscConfig+0x858>)
 80081d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80081da:	4b20      	ldr	r3, [pc, #128]	; (800825c <HAL_RCC_OscConfig+0x858>)
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d031      	beq.n	800824c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f003 0203 	and.w	r2, r3, #3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d12a      	bne.n	800824c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	091b      	lsrs	r3, r3, #4
 80081fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008202:	429a      	cmp	r2, r3
 8008204:	d122      	bne.n	800824c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008212:	429a      	cmp	r2, r3
 8008214:	d11a      	bne.n	800824c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	0a5b      	lsrs	r3, r3, #9
 800821a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008222:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008224:	429a      	cmp	r2, r3
 8008226:	d111      	bne.n	800824c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	0c1b      	lsrs	r3, r3, #16
 800822c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008236:	429a      	cmp	r2, r3
 8008238:	d108      	bne.n	800824c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	0e1b      	lsrs	r3, r3, #24
 800823e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008246:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008248:	429a      	cmp	r2, r3
 800824a:	d001      	beq.n	8008250 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e000      	b.n	8008252 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3730      	adds	r7, #48	; 0x30
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	58024400 	.word	0x58024400

08008260 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e19c      	b.n	80085ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008274:	4b8a      	ldr	r3, [pc, #552]	; (80084a0 <HAL_RCC_ClockConfig+0x240>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 030f 	and.w	r3, r3, #15
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	429a      	cmp	r2, r3
 8008280:	d910      	bls.n	80082a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008282:	4b87      	ldr	r3, [pc, #540]	; (80084a0 <HAL_RCC_ClockConfig+0x240>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f023 020f 	bic.w	r2, r3, #15
 800828a:	4985      	ldr	r1, [pc, #532]	; (80084a0 <HAL_RCC_ClockConfig+0x240>)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	4313      	orrs	r3, r2
 8008290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008292:	4b83      	ldr	r3, [pc, #524]	; (80084a0 <HAL_RCC_ClockConfig+0x240>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 030f 	and.w	r3, r3, #15
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	429a      	cmp	r2, r3
 800829e:	d001      	beq.n	80082a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e184      	b.n	80085ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d010      	beq.n	80082d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691a      	ldr	r2, [r3, #16]
 80082b4:	4b7b      	ldr	r3, [pc, #492]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082bc:	429a      	cmp	r2, r3
 80082be:	d908      	bls.n	80082d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082c0:	4b78      	ldr	r3, [pc, #480]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	4975      	ldr	r1, [pc, #468]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0308 	and.w	r3, r3, #8
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d010      	beq.n	8008300 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	695a      	ldr	r2, [r3, #20]
 80082e2:	4b70      	ldr	r3, [pc, #448]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d908      	bls.n	8008300 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082ee:	4b6d      	ldr	r3, [pc, #436]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	496a      	ldr	r1, [pc, #424]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0310 	and.w	r3, r3, #16
 8008308:	2b00      	cmp	r3, #0
 800830a:	d010      	beq.n	800832e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	699a      	ldr	r2, [r3, #24]
 8008310:	4b64      	ldr	r3, [pc, #400]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008318:	429a      	cmp	r2, r3
 800831a:	d908      	bls.n	800832e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800831c:	4b61      	ldr	r3, [pc, #388]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	495e      	ldr	r1, [pc, #376]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 800832a:	4313      	orrs	r3, r2
 800832c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b00      	cmp	r3, #0
 8008338:	d010      	beq.n	800835c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	69da      	ldr	r2, [r3, #28]
 800833e:	4b59      	ldr	r3, [pc, #356]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008346:	429a      	cmp	r2, r3
 8008348:	d908      	bls.n	800835c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800834a:	4b56      	ldr	r3, [pc, #344]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	4953      	ldr	r1, [pc, #332]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 8008358:	4313      	orrs	r3, r2
 800835a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0302 	and.w	r3, r3, #2
 8008364:	2b00      	cmp	r3, #0
 8008366:	d010      	beq.n	800838a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	4b4d      	ldr	r3, [pc, #308]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	f003 030f 	and.w	r3, r3, #15
 8008374:	429a      	cmp	r2, r3
 8008376:	d908      	bls.n	800838a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008378:	4b4a      	ldr	r3, [pc, #296]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	f023 020f 	bic.w	r2, r3, #15
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	4947      	ldr	r1, [pc, #284]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 8008386:	4313      	orrs	r3, r2
 8008388:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d055      	beq.n	8008442 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008396:	4b43      	ldr	r3, [pc, #268]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	4940      	ldr	r1, [pc, #256]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d107      	bne.n	80083c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083b0:	4b3c      	ldr	r3, [pc, #240]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d121      	bne.n	8008400 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e0f6      	b.n	80085ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d107      	bne.n	80083d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083c8:	4b36      	ldr	r3, [pc, #216]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d115      	bne.n	8008400 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e0ea      	b.n	80085ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d107      	bne.n	80083f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083e0:	4b30      	ldr	r3, [pc, #192]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d109      	bne.n	8008400 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e0de      	b.n	80085ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083f0:	4b2c      	ldr	r3, [pc, #176]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e0d6      	b.n	80085ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008400:	4b28      	ldr	r3, [pc, #160]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	f023 0207 	bic.w	r2, r3, #7
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	4925      	ldr	r1, [pc, #148]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 800840e:	4313      	orrs	r3, r2
 8008410:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008412:	f7fc f9a1 	bl	8004758 <HAL_GetTick>
 8008416:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008418:	e00a      	b.n	8008430 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800841a:	f7fc f99d 	bl	8004758 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	f241 3288 	movw	r2, #5000	; 0x1388
 8008428:	4293      	cmp	r3, r2
 800842a:	d901      	bls.n	8008430 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e0be      	b.n	80085ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008430:	4b1c      	ldr	r3, [pc, #112]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	429a      	cmp	r2, r3
 8008440:	d1eb      	bne.n	800841a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d010      	beq.n	8008470 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	4b14      	ldr	r3, [pc, #80]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	429a      	cmp	r2, r3
 800845c:	d208      	bcs.n	8008470 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800845e:	4b11      	ldr	r3, [pc, #68]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	f023 020f 	bic.w	r2, r3, #15
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	490e      	ldr	r1, [pc, #56]	; (80084a4 <HAL_RCC_ClockConfig+0x244>)
 800846c:	4313      	orrs	r3, r2
 800846e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008470:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <HAL_RCC_ClockConfig+0x240>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 030f 	and.w	r3, r3, #15
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	429a      	cmp	r2, r3
 800847c:	d214      	bcs.n	80084a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800847e:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <HAL_RCC_ClockConfig+0x240>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f023 020f 	bic.w	r2, r3, #15
 8008486:	4906      	ldr	r1, [pc, #24]	; (80084a0 <HAL_RCC_ClockConfig+0x240>)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	4313      	orrs	r3, r2
 800848c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800848e:	4b04      	ldr	r3, [pc, #16]	; (80084a0 <HAL_RCC_ClockConfig+0x240>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 030f 	and.w	r3, r3, #15
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d005      	beq.n	80084a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e086      	b.n	80085ae <HAL_RCC_ClockConfig+0x34e>
 80084a0:	52002000 	.word	0x52002000
 80084a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d010      	beq.n	80084d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691a      	ldr	r2, [r3, #16]
 80084b8:	4b3f      	ldr	r3, [pc, #252]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d208      	bcs.n	80084d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084c4:	4b3c      	ldr	r3, [pc, #240]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	4939      	ldr	r1, [pc, #228]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d010      	beq.n	8008504 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695a      	ldr	r2, [r3, #20]
 80084e6:	4b34      	ldr	r3, [pc, #208]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d208      	bcs.n	8008504 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80084f2:	4b31      	ldr	r3, [pc, #196]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	492e      	ldr	r1, [pc, #184]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 8008500:	4313      	orrs	r3, r2
 8008502:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0310 	and.w	r3, r3, #16
 800850c:	2b00      	cmp	r3, #0
 800850e:	d010      	beq.n	8008532 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699a      	ldr	r2, [r3, #24]
 8008514:	4b28      	ldr	r3, [pc, #160]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800851c:	429a      	cmp	r2, r3
 800851e:	d208      	bcs.n	8008532 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008520:	4b25      	ldr	r3, [pc, #148]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	4922      	ldr	r1, [pc, #136]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 800852e:	4313      	orrs	r3, r2
 8008530:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b00      	cmp	r3, #0
 800853c:	d010      	beq.n	8008560 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69da      	ldr	r2, [r3, #28]
 8008542:	4b1d      	ldr	r3, [pc, #116]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800854a:	429a      	cmp	r2, r3
 800854c:	d208      	bcs.n	8008560 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800854e:	4b1a      	ldr	r3, [pc, #104]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	4917      	ldr	r1, [pc, #92]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 800855c:	4313      	orrs	r3, r2
 800855e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008560:	f000 f834 	bl	80085cc <HAL_RCC_GetSysClockFreq>
 8008564:	4602      	mov	r2, r0
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	0a1b      	lsrs	r3, r3, #8
 800856c:	f003 030f 	and.w	r3, r3, #15
 8008570:	4912      	ldr	r1, [pc, #72]	; (80085bc <HAL_RCC_ClockConfig+0x35c>)
 8008572:	5ccb      	ldrb	r3, [r1, r3]
 8008574:	f003 031f 	and.w	r3, r3, #31
 8008578:	fa22 f303 	lsr.w	r3, r2, r3
 800857c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800857e:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <HAL_RCC_ClockConfig+0x358>)
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	f003 030f 	and.w	r3, r3, #15
 8008586:	4a0d      	ldr	r2, [pc, #52]	; (80085bc <HAL_RCC_ClockConfig+0x35c>)
 8008588:	5cd3      	ldrb	r3, [r2, r3]
 800858a:	f003 031f 	and.w	r3, r3, #31
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	fa22 f303 	lsr.w	r3, r2, r3
 8008594:	4a0a      	ldr	r2, [pc, #40]	; (80085c0 <HAL_RCC_ClockConfig+0x360>)
 8008596:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008598:	4a0a      	ldr	r2, [pc, #40]	; (80085c4 <HAL_RCC_ClockConfig+0x364>)
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800859e:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <HAL_RCC_ClockConfig+0x368>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fb fa52 	bl	8003a4c <HAL_InitTick>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	58024400 	.word	0x58024400
 80085bc:	0802a498 	.word	0x0802a498
 80085c0:	2000015c 	.word	0x2000015c
 80085c4:	20000158 	.word	0x20000158
 80085c8:	20000160 	.word	0x20000160

080085cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b089      	sub	sp, #36	; 0x24
 80085d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085d2:	4bb3      	ldr	r3, [pc, #716]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085da:	2b18      	cmp	r3, #24
 80085dc:	f200 8155 	bhi.w	800888a <HAL_RCC_GetSysClockFreq+0x2be>
 80085e0:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80085e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	0800864d 	.word	0x0800864d
 80085ec:	0800888b 	.word	0x0800888b
 80085f0:	0800888b 	.word	0x0800888b
 80085f4:	0800888b 	.word	0x0800888b
 80085f8:	0800888b 	.word	0x0800888b
 80085fc:	0800888b 	.word	0x0800888b
 8008600:	0800888b 	.word	0x0800888b
 8008604:	0800888b 	.word	0x0800888b
 8008608:	08008673 	.word	0x08008673
 800860c:	0800888b 	.word	0x0800888b
 8008610:	0800888b 	.word	0x0800888b
 8008614:	0800888b 	.word	0x0800888b
 8008618:	0800888b 	.word	0x0800888b
 800861c:	0800888b 	.word	0x0800888b
 8008620:	0800888b 	.word	0x0800888b
 8008624:	0800888b 	.word	0x0800888b
 8008628:	08008679 	.word	0x08008679
 800862c:	0800888b 	.word	0x0800888b
 8008630:	0800888b 	.word	0x0800888b
 8008634:	0800888b 	.word	0x0800888b
 8008638:	0800888b 	.word	0x0800888b
 800863c:	0800888b 	.word	0x0800888b
 8008640:	0800888b 	.word	0x0800888b
 8008644:	0800888b 	.word	0x0800888b
 8008648:	0800867f 	.word	0x0800867f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800864c:	4b94      	ldr	r3, [pc, #592]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0320 	and.w	r3, r3, #32
 8008654:	2b00      	cmp	r3, #0
 8008656:	d009      	beq.n	800866c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008658:	4b91      	ldr	r3, [pc, #580]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	08db      	lsrs	r3, r3, #3
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	4a90      	ldr	r2, [pc, #576]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008664:	fa22 f303 	lsr.w	r3, r2, r3
 8008668:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800866a:	e111      	b.n	8008890 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800866c:	4b8d      	ldr	r3, [pc, #564]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800866e:	61bb      	str	r3, [r7, #24]
    break;
 8008670:	e10e      	b.n	8008890 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008672:	4b8d      	ldr	r3, [pc, #564]	; (80088a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008674:	61bb      	str	r3, [r7, #24]
    break;
 8008676:	e10b      	b.n	8008890 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008678:	4b8c      	ldr	r3, [pc, #560]	; (80088ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800867a:	61bb      	str	r3, [r7, #24]
    break;
 800867c:	e108      	b.n	8008890 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800867e:	4b88      	ldr	r3, [pc, #544]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008688:	4b85      	ldr	r3, [pc, #532]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868c:	091b      	lsrs	r3, r3, #4
 800868e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008692:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008694:	4b82      	ldr	r3, [pc, #520]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800869e:	4b80      	ldr	r3, [pc, #512]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a2:	08db      	lsrs	r3, r3, #3
 80086a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	fb02 f303 	mul.w	r3, r2, r3
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 80e1 	beq.w	8008884 <HAL_RCC_GetSysClockFreq+0x2b8>
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	f000 8083 	beq.w	80087d0 <HAL_RCC_GetSysClockFreq+0x204>
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	f200 80a1 	bhi.w	8008814 <HAL_RCC_GetSysClockFreq+0x248>
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <HAL_RCC_GetSysClockFreq+0x114>
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d056      	beq.n	800878c <HAL_RCC_GetSysClockFreq+0x1c0>
 80086de:	e099      	b.n	8008814 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086e0:	4b6f      	ldr	r3, [pc, #444]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d02d      	beq.n	8008748 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086ec:	4b6c      	ldr	r3, [pc, #432]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	08db      	lsrs	r3, r3, #3
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	4a6b      	ldr	r2, [pc, #428]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086f8:	fa22 f303 	lsr.w	r3, r2, r3
 80086fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	ee07 3a90 	vmov	s15, r3
 8008704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008716:	4b62      	ldr	r3, [pc, #392]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008726:	ed97 6a02 	vldr	s12, [r7, #8]
 800872a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80088b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800872e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800873a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008742:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008746:	e087      	b.n	8008858 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	ee07 3a90 	vmov	s15, r3
 800874e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008752:	eddf 6a58 	vldr	s13, [pc, #352]	; 80088b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875a:	4b51      	ldr	r3, [pc, #324]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876a:	ed97 6a02 	vldr	s12, [r7, #8]
 800876e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80088b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800877e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800878a:	e065      	b.n	8008858 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008796:	eddf 6a48 	vldr	s13, [pc, #288]	; 80088b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800879a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879e:	4b40      	ldr	r3, [pc, #256]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80087b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80088b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ce:	e043      	b.n	8008858 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	ee07 3a90 	vmov	s15, r3
 80087d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80088bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80087de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e2:	4b2f      	ldr	r3, [pc, #188]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80087f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80088b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008812:	e021      	b.n	8008858 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80088b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008826:	4b1e      	ldr	r3, [pc, #120]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008836:	ed97 6a02 	vldr	s12, [r7, #8]
 800883a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80088b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800883e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008856:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008858:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885c:	0a5b      	lsrs	r3, r3, #9
 800885e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008862:	3301      	adds	r3, #1
 8008864:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	ee07 3a90 	vmov	s15, r3
 800886c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008870:	edd7 6a07 	vldr	s13, [r7, #28]
 8008874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800887c:	ee17 3a90 	vmov	r3, s15
 8008880:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008882:	e005      	b.n	8008890 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	61bb      	str	r3, [r7, #24]
    break;
 8008888:	e002      	b.n	8008890 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800888a:	4b07      	ldr	r3, [pc, #28]	; (80088a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800888c:	61bb      	str	r3, [r7, #24]
    break;
 800888e:	bf00      	nop
  }

  return sysclockfreq;
 8008890:	69bb      	ldr	r3, [r7, #24]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3724      	adds	r7, #36	; 0x24
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	58024400 	.word	0x58024400
 80088a4:	03d09000 	.word	0x03d09000
 80088a8:	003d0900 	.word	0x003d0900
 80088ac:	007a1200 	.word	0x007a1200
 80088b0:	46000000 	.word	0x46000000
 80088b4:	4c742400 	.word	0x4c742400
 80088b8:	4a742400 	.word	0x4a742400
 80088bc:	4af42400 	.word	0x4af42400

080088c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088c6:	f7ff fe81 	bl	80085cc <HAL_RCC_GetSysClockFreq>
 80088ca:	4602      	mov	r2, r0
 80088cc:	4b10      	ldr	r3, [pc, #64]	; (8008910 <HAL_RCC_GetHCLKFreq+0x50>)
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	0a1b      	lsrs	r3, r3, #8
 80088d2:	f003 030f 	and.w	r3, r3, #15
 80088d6:	490f      	ldr	r1, [pc, #60]	; (8008914 <HAL_RCC_GetHCLKFreq+0x54>)
 80088d8:	5ccb      	ldrb	r3, [r1, r3]
 80088da:	f003 031f 	and.w	r3, r3, #31
 80088de:	fa22 f303 	lsr.w	r3, r2, r3
 80088e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088e4:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <HAL_RCC_GetHCLKFreq+0x50>)
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	4a09      	ldr	r2, [pc, #36]	; (8008914 <HAL_RCC_GetHCLKFreq+0x54>)
 80088ee:	5cd3      	ldrb	r3, [r2, r3]
 80088f0:	f003 031f 	and.w	r3, r3, #31
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	fa22 f303 	lsr.w	r3, r2, r3
 80088fa:	4a07      	ldr	r2, [pc, #28]	; (8008918 <HAL_RCC_GetHCLKFreq+0x58>)
 80088fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088fe:	4a07      	ldr	r2, [pc, #28]	; (800891c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008904:	4b04      	ldr	r3, [pc, #16]	; (8008918 <HAL_RCC_GetHCLKFreq+0x58>)
 8008906:	681b      	ldr	r3, [r3, #0]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	58024400 	.word	0x58024400
 8008914:	0802a498 	.word	0x0802a498
 8008918:	2000015c 	.word	0x2000015c
 800891c:	20000158 	.word	0x20000158

08008920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008924:	f7ff ffcc 	bl	80088c0 <HAL_RCC_GetHCLKFreq>
 8008928:	4602      	mov	r2, r0
 800892a:	4b06      	ldr	r3, [pc, #24]	; (8008944 <HAL_RCC_GetPCLK1Freq+0x24>)
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	091b      	lsrs	r3, r3, #4
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	4904      	ldr	r1, [pc, #16]	; (8008948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008936:	5ccb      	ldrb	r3, [r1, r3]
 8008938:	f003 031f 	and.w	r3, r3, #31
 800893c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008940:	4618      	mov	r0, r3
 8008942:	bd80      	pop	{r7, pc}
 8008944:	58024400 	.word	0x58024400
 8008948:	0802a498 	.word	0x0802a498

0800894c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008950:	f7ff ffb6 	bl	80088c0 <HAL_RCC_GetHCLKFreq>
 8008954:	4602      	mov	r2, r0
 8008956:	4b06      	ldr	r3, [pc, #24]	; (8008970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	0a1b      	lsrs	r3, r3, #8
 800895c:	f003 0307 	and.w	r3, r3, #7
 8008960:	4904      	ldr	r1, [pc, #16]	; (8008974 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008962:	5ccb      	ldrb	r3, [r1, r3]
 8008964:	f003 031f 	and.w	r3, r3, #31
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800896c:	4618      	mov	r0, r3
 800896e:	bd80      	pop	{r7, pc}
 8008970:	58024400 	.word	0x58024400
 8008974:	0802a498 	.word	0x0802a498

08008978 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	223f      	movs	r2, #63	; 0x3f
 8008986:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008988:	4b1a      	ldr	r3, [pc, #104]	; (80089f4 <HAL_RCC_GetClockConfig+0x7c>)
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	f003 0207 	and.w	r2, r3, #7
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008994:	4b17      	ldr	r3, [pc, #92]	; (80089f4 <HAL_RCC_GetClockConfig+0x7c>)
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80089a0:	4b14      	ldr	r3, [pc, #80]	; (80089f4 <HAL_RCC_GetClockConfig+0x7c>)
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	f003 020f 	and.w	r2, r3, #15
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80089ac:	4b11      	ldr	r3, [pc, #68]	; (80089f4 <HAL_RCC_GetClockConfig+0x7c>)
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80089b8:	4b0e      	ldr	r3, [pc, #56]	; (80089f4 <HAL_RCC_GetClockConfig+0x7c>)
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80089c4:	4b0b      	ldr	r3, [pc, #44]	; (80089f4 <HAL_RCC_GetClockConfig+0x7c>)
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80089d0:	4b08      	ldr	r3, [pc, #32]	; (80089f4 <HAL_RCC_GetClockConfig+0x7c>)
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80089dc:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <HAL_RCC_GetClockConfig+0x80>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 020f 	and.w	r2, r3, #15
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	601a      	str	r2, [r3, #0]
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	58024400 	.word	0x58024400
 80089f8:	52002000 	.word	0x52002000

080089fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a04:	2300      	movs	r3, #0
 8008a06:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a08:	2300      	movs	r3, #0
 8008a0a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d03f      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a20:	d02a      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008a22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a26:	d824      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a2c:	d018      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a32:	d81e      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d003      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a3c:	d007      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008a3e:	e018      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a40:	4ba3      	ldr	r3, [pc, #652]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	4aa2      	ldr	r2, [pc, #648]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a4c:	e015      	b.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3304      	adds	r3, #4
 8008a52:	2102      	movs	r1, #2
 8008a54:	4618      	mov	r0, r3
 8008a56:	f001 fff9 	bl	800aa4c <RCCEx_PLL2_Config>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a5e:	e00c      	b.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3324      	adds	r3, #36	; 0x24
 8008a64:	2102      	movs	r1, #2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f002 f8a2 	bl	800abb0 <RCCEx_PLL3_Config>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a70:	e003      	b.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	75fb      	strb	r3, [r7, #23]
      break;
 8008a76:	e000      	b.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d109      	bne.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008a80:	4b93      	ldr	r3, [pc, #588]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a8c:	4990      	ldr	r1, [pc, #576]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	650b      	str	r3, [r1, #80]	; 0x50
 8008a92:	e001      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
 8008a96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d03d      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d826      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008aac:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab2:	bf00      	nop
 8008ab4:	08008ac9 	.word	0x08008ac9
 8008ab8:	08008ad7 	.word	0x08008ad7
 8008abc:	08008ae9 	.word	0x08008ae9
 8008ac0:	08008b01 	.word	0x08008b01
 8008ac4:	08008b01 	.word	0x08008b01
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac8:	4b81      	ldr	r3, [pc, #516]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4a80      	ldr	r2, [pc, #512]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ad4:	e015      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	2100      	movs	r1, #0
 8008adc:	4618      	mov	r0, r3
 8008ade:	f001 ffb5 	bl	800aa4c <RCCEx_PLL2_Config>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ae6:	e00c      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3324      	adds	r3, #36	; 0x24
 8008aec:	2100      	movs	r1, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f002 f85e 	bl	800abb0 <RCCEx_PLL3_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008af8:	e003      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	75fb      	strb	r3, [r7, #23]
      break;
 8008afe:	e000      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d109      	bne.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b08:	4b71      	ldr	r3, [pc, #452]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0c:	f023 0207 	bic.w	r2, r3, #7
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b14:	496e      	ldr	r1, [pc, #440]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	650b      	str	r3, [r1, #80]	; 0x50
 8008b1a:	e001      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d042      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b34:	d02b      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b3a:	d825      	bhi.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b3c:	2bc0      	cmp	r3, #192	; 0xc0
 8008b3e:	d028      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008b40:	2bc0      	cmp	r3, #192	; 0xc0
 8008b42:	d821      	bhi.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b44:	2b80      	cmp	r3, #128	; 0x80
 8008b46:	d016      	beq.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008b48:	2b80      	cmp	r3, #128	; 0x80
 8008b4a:	d81d      	bhi.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008b50:	2b40      	cmp	r3, #64	; 0x40
 8008b52:	d007      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008b54:	e018      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b56:	4b5e      	ldr	r3, [pc, #376]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	4a5d      	ldr	r2, [pc, #372]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008b62:	e017      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3304      	adds	r3, #4
 8008b68:	2100      	movs	r1, #0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f001 ff6e 	bl	800aa4c <RCCEx_PLL2_Config>
 8008b70:	4603      	mov	r3, r0
 8008b72:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008b74:	e00e      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3324      	adds	r3, #36	; 0x24
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f002 f817 	bl	800abb0 <RCCEx_PLL3_Config>
 8008b82:	4603      	mov	r3, r0
 8008b84:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008b86:	e005      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b8c:	e002      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008b8e:	bf00      	nop
 8008b90:	e000      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d109      	bne.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008b9a:	4b4d      	ldr	r3, [pc, #308]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b9e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba6:	494a      	ldr	r1, [pc, #296]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	650b      	str	r3, [r1, #80]	; 0x50
 8008bac:	e001      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d049      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008bc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bc8:	d030      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bce:	d82a      	bhi.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008bd0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bd4:	d02c      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008bd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bda:	d824      	bhi.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008be0:	d018      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008be6:	d81e      	bhi.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d003      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bf0:	d007      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008bf2:	e018      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bf4:	4b36      	ldr	r3, [pc, #216]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf8:	4a35      	ldr	r2, [pc, #212]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c00:	e017      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3304      	adds	r3, #4
 8008c06:	2100      	movs	r1, #0
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 ff1f 	bl	800aa4c <RCCEx_PLL2_Config>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008c12:	e00e      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3324      	adds	r3, #36	; 0x24
 8008c18:	2100      	movs	r1, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f001 ffc8 	bl	800abb0 <RCCEx_PLL3_Config>
 8008c20:	4603      	mov	r3, r0
 8008c22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c24:	e005      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]
      break;
 8008c2a:	e002      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008c2c:	bf00      	nop
 8008c2e:	e000      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c38:	4b25      	ldr	r3, [pc, #148]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c3c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c46:	4922      	ldr	r1, [pc, #136]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	658b      	str	r3, [r1, #88]	; 0x58
 8008c4c:	e001      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d04b      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c68:	d030      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008c6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c6e:	d82a      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008c70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c74:	d02e      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008c76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c7a:	d824      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c80:	d018      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008c82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c86:	d81e      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c90:	d007      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008c92:	e018      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c94:	4b0e      	ldr	r3, [pc, #56]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c98:	4a0d      	ldr	r2, [pc, #52]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ca0:	e019      	b.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 fecf 	bl	800aa4c <RCCEx_PLL2_Config>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008cb2:	e010      	b.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3324      	adds	r3, #36	; 0x24
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 ff78 	bl	800abb0 <RCCEx_PLL3_Config>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cc4:	e007      	b.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cca:	e004      	b.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008ccc:	bf00      	nop
 8008cce:	e002      	b.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008cd0:	58024400 	.word	0x58024400
      break;
 8008cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10a      	bne.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008cdc:	4b99      	ldr	r3, [pc, #612]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008cea:	4996      	ldr	r1, [pc, #600]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	658b      	str	r3, [r1, #88]	; 0x58
 8008cf0:	e001      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d032      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d06:	2b30      	cmp	r3, #48	; 0x30
 8008d08:	d01c      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008d0a:	2b30      	cmp	r3, #48	; 0x30
 8008d0c:	d817      	bhi.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d00c      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008d12:	2b20      	cmp	r3, #32
 8008d14:	d813      	bhi.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d016      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008d1a:	2b10      	cmp	r3, #16
 8008d1c:	d10f      	bne.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d1e:	4b89      	ldr	r3, [pc, #548]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	4a88      	ldr	r2, [pc, #544]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008d2a:	e00e      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3304      	adds	r3, #4
 8008d30:	2102      	movs	r1, #2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 fe8a 	bl	800aa4c <RCCEx_PLL2_Config>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008d3c:	e005      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	75fb      	strb	r3, [r7, #23]
      break;
 8008d42:	e002      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008d44:	bf00      	nop
 8008d46:	e000      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d50:	4b7c      	ldr	r3, [pc, #496]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d5c:	4979      	ldr	r1, [pc, #484]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d62:	e001      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d047      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d7c:	d030      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d82:	d82a      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d88:	d02c      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008d8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d8e:	d824      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d94:	d018      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d9a:	d81e      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da4:	d007      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008da6:	e018      	b.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da8:	4b66      	ldr	r3, [pc, #408]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	4a65      	ldr	r2, [pc, #404]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008db4:	e017      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3304      	adds	r3, #4
 8008dba:	2100      	movs	r1, #0
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f001 fe45 	bl	800aa4c <RCCEx_PLL2_Config>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008dc6:	e00e      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3324      	adds	r3, #36	; 0x24
 8008dcc:	2100      	movs	r1, #0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 feee 	bl	800abb0 <RCCEx_PLL3_Config>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008dd8:	e005      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8008dde:	e002      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008de0:	bf00      	nop
 8008de2:	e000      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d109      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008dec:	4b55      	ldr	r3, [pc, #340]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df8:	4952      	ldr	r1, [pc, #328]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	650b      	str	r3, [r1, #80]	; 0x50
 8008dfe:	e001      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
 8008e02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d049      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e18:	d02e      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008e1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e1e:	d828      	bhi.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e24:	d02a      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e2a:	d822      	bhi.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e30:	d026      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008e32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e36:	d81c      	bhi.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e3c:	d010      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008e3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e42:	d816      	bhi.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01d      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e4c:	d111      	bne.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3304      	adds	r3, #4
 8008e52:	2101      	movs	r1, #1
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 fdf9 	bl	800aa4c <RCCEx_PLL2_Config>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e5e:	e012      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3324      	adds	r3, #36	; 0x24
 8008e64:	2101      	movs	r1, #1
 8008e66:	4618      	mov	r0, r3
 8008e68:	f001 fea2 	bl	800abb0 <RCCEx_PLL3_Config>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e70:	e009      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	75fb      	strb	r3, [r7, #23]
      break;
 8008e76:	e006      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e78:	bf00      	nop
 8008e7a:	e004      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e7c:	bf00      	nop
 8008e7e:	e002      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e80:	bf00      	nop
 8008e82:	e000      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d109      	bne.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e8c:	4b2d      	ldr	r3, [pc, #180]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e90:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e98:	492a      	ldr	r1, [pc, #168]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	650b      	str	r3, [r1, #80]	; 0x50
 8008e9e:	e001      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d04d      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eba:	d02e      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ec0:	d828      	bhi.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec6:	d02a      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ecc:	d822      	bhi.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008ece:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ed2:	d026      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008ed4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ed8:	d81c      	bhi.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ede:	d010      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee4:	d816      	bhi.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d01d      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eee:	d111      	bne.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f001 fda8 	bl	800aa4c <RCCEx_PLL2_Config>
 8008efc:	4603      	mov	r3, r0
 8008efe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f00:	e012      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3324      	adds	r3, #36	; 0x24
 8008f06:	2101      	movs	r1, #1
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f001 fe51 	bl	800abb0 <RCCEx_PLL3_Config>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f12:	e009      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	75fb      	strb	r3, [r7, #23]
      break;
 8008f18:	e006      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f1a:	bf00      	nop
 8008f1c:	e004      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f1e:	bf00      	nop
 8008f20:	e002      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f22:	bf00      	nop
 8008f24:	e000      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10c      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f32:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f3c:	4901      	ldr	r1, [pc, #4]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	658b      	str	r3, [r1, #88]	; 0x58
 8008f42:	e003      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008f44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d02f      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f60:	d00e      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f66:	d814      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d015      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f70:	d10f      	bne.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f72:	4baf      	ldr	r3, [pc, #700]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	4aae      	ldr	r2, [pc, #696]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f7e:	e00c      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3304      	adds	r3, #4
 8008f84:	2101      	movs	r1, #1
 8008f86:	4618      	mov	r0, r3
 8008f88:	f001 fd60 	bl	800aa4c <RCCEx_PLL2_Config>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f90:	e003      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	75fb      	strb	r3, [r7, #23]
      break;
 8008f96:	e000      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d109      	bne.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008fa0:	4ba3      	ldr	r3, [pc, #652]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fac:	49a0      	ldr	r1, [pc, #640]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	650b      	str	r3, [r1, #80]	; 0x50
 8008fb2:	e001      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
 8008fb6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d032      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d81b      	bhi.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008fcc:	a201      	add	r2, pc, #4	; (adr r2, 8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd2:	bf00      	nop
 8008fd4:	0800900b 	.word	0x0800900b
 8008fd8:	08008fe5 	.word	0x08008fe5
 8008fdc:	08008ff3 	.word	0x08008ff3
 8008fe0:	0800900b 	.word	0x0800900b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe4:	4b92      	ldr	r3, [pc, #584]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	4a91      	ldr	r2, [pc, #580]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ff0:	e00c      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	2102      	movs	r1, #2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 fd27 	bl	800aa4c <RCCEx_PLL2_Config>
 8008ffe:	4603      	mov	r3, r0
 8009000:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009002:	e003      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	75fb      	strb	r3, [r7, #23]
      break;
 8009008:	e000      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800900a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d109      	bne.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009012:	4b87      	ldr	r3, [pc, #540]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009016:	f023 0203 	bic.w	r2, r3, #3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901e:	4984      	ldr	r1, [pc, #528]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009020:	4313      	orrs	r3, r2
 8009022:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009024:	e001      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 8086 	beq.w	8009144 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009038:	4b7e      	ldr	r3, [pc, #504]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a7d      	ldr	r2, [pc, #500]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800903e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009042:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009044:	f7fb fb88 	bl	8004758 <HAL_GetTick>
 8009048:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800904a:	e009      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800904c:	f7fb fb84 	bl	8004758 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	2b64      	cmp	r3, #100	; 0x64
 8009058:	d902      	bls.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	75fb      	strb	r3, [r7, #23]
        break;
 800905e:	e005      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009060:	4b74      	ldr	r3, [pc, #464]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0ef      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d166      	bne.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009072:	4b6f      	ldr	r3, [pc, #444]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009074:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800907c:	4053      	eors	r3, r2
 800907e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009082:	2b00      	cmp	r3, #0
 8009084:	d013      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009086:	4b6a      	ldr	r3, [pc, #424]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800908e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009090:	4b67      	ldr	r3, [pc, #412]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009094:	4a66      	ldr	r2, [pc, #408]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800909a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800909c:	4b64      	ldr	r3, [pc, #400]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800909e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a0:	4a63      	ldr	r2, [pc, #396]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090a8:	4a61      	ldr	r2, [pc, #388]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090b8:	d115      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ba:	f7fb fb4d 	bl	8004758 <HAL_GetTick>
 80090be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090c0:	e00b      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090c2:	f7fb fb49 	bl	8004758 <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d902      	bls.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	75fb      	strb	r3, [r7, #23]
            break;
 80090d8:	e005      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090da:	4b55      	ldr	r3, [pc, #340]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0ed      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d126      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090fa:	d10d      	bne.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80090fc:	4b4c      	ldr	r3, [pc, #304]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800910a:	0919      	lsrs	r1, r3, #4
 800910c:	4b4a      	ldr	r3, [pc, #296]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800910e:	400b      	ands	r3, r1
 8009110:	4947      	ldr	r1, [pc, #284]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009112:	4313      	orrs	r3, r2
 8009114:	610b      	str	r3, [r1, #16]
 8009116:	e005      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009118:	4b45      	ldr	r3, [pc, #276]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	4a44      	ldr	r2, [pc, #272]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800911e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009122:	6113      	str	r3, [r2, #16]
 8009124:	4b42      	ldr	r3, [pc, #264]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800912e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009132:	493f      	ldr	r1, [pc, #252]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009134:	4313      	orrs	r3, r2
 8009136:	670b      	str	r3, [r1, #112]	; 0x70
 8009138:	e004      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	75bb      	strb	r3, [r7, #22]
 800913e:	e001      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009140:	7dfb      	ldrb	r3, [r7, #23]
 8009142:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 8085 	beq.w	800925c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009156:	2b28      	cmp	r3, #40	; 0x28
 8009158:	d866      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800915a:	a201      	add	r2, pc, #4	; (adr r2, 8009160 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	0800923d 	.word	0x0800923d
 8009164:	08009229 	.word	0x08009229
 8009168:	08009229 	.word	0x08009229
 800916c:	08009229 	.word	0x08009229
 8009170:	08009229 	.word	0x08009229
 8009174:	08009229 	.word	0x08009229
 8009178:	08009229 	.word	0x08009229
 800917c:	08009229 	.word	0x08009229
 8009180:	08009205 	.word	0x08009205
 8009184:	08009229 	.word	0x08009229
 8009188:	08009229 	.word	0x08009229
 800918c:	08009229 	.word	0x08009229
 8009190:	08009229 	.word	0x08009229
 8009194:	08009229 	.word	0x08009229
 8009198:	08009229 	.word	0x08009229
 800919c:	08009229 	.word	0x08009229
 80091a0:	08009217 	.word	0x08009217
 80091a4:	08009229 	.word	0x08009229
 80091a8:	08009229 	.word	0x08009229
 80091ac:	08009229 	.word	0x08009229
 80091b0:	08009229 	.word	0x08009229
 80091b4:	08009229 	.word	0x08009229
 80091b8:	08009229 	.word	0x08009229
 80091bc:	08009229 	.word	0x08009229
 80091c0:	0800923d 	.word	0x0800923d
 80091c4:	08009229 	.word	0x08009229
 80091c8:	08009229 	.word	0x08009229
 80091cc:	08009229 	.word	0x08009229
 80091d0:	08009229 	.word	0x08009229
 80091d4:	08009229 	.word	0x08009229
 80091d8:	08009229 	.word	0x08009229
 80091dc:	08009229 	.word	0x08009229
 80091e0:	0800923d 	.word	0x0800923d
 80091e4:	08009229 	.word	0x08009229
 80091e8:	08009229 	.word	0x08009229
 80091ec:	08009229 	.word	0x08009229
 80091f0:	08009229 	.word	0x08009229
 80091f4:	08009229 	.word	0x08009229
 80091f8:	08009229 	.word	0x08009229
 80091fc:	08009229 	.word	0x08009229
 8009200:	0800923d 	.word	0x0800923d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3304      	adds	r3, #4
 8009208:	2101      	movs	r1, #1
 800920a:	4618      	mov	r0, r3
 800920c:	f001 fc1e 	bl	800aa4c <RCCEx_PLL2_Config>
 8009210:	4603      	mov	r3, r0
 8009212:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009214:	e013      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3324      	adds	r3, #36	; 0x24
 800921a:	2101      	movs	r1, #1
 800921c:	4618      	mov	r0, r3
 800921e:	f001 fcc7 	bl	800abb0 <RCCEx_PLL3_Config>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009226:	e00a      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	75fb      	strb	r3, [r7, #23]
      break;
 800922c:	e007      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800922e:	bf00      	nop
 8009230:	58024400 	.word	0x58024400
 8009234:	58024800 	.word	0x58024800
 8009238:	00ffffcf 	.word	0x00ffffcf
      break;
 800923c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800923e:	7dfb      	ldrb	r3, [r7, #23]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009244:	4b96      	ldr	r3, [pc, #600]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009248:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009250:	4993      	ldr	r1, [pc, #588]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009252:	4313      	orrs	r3, r2
 8009254:	654b      	str	r3, [r1, #84]	; 0x54
 8009256:	e001      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d038      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800926c:	2b05      	cmp	r3, #5
 800926e:	d821      	bhi.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009270:	a201      	add	r2, pc, #4	; (adr r2, 8009278 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	080092bb 	.word	0x080092bb
 800927c:	08009291 	.word	0x08009291
 8009280:	080092a3 	.word	0x080092a3
 8009284:	080092bb 	.word	0x080092bb
 8009288:	080092bb 	.word	0x080092bb
 800928c:	080092bb 	.word	0x080092bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3304      	adds	r3, #4
 8009294:	2101      	movs	r1, #1
 8009296:	4618      	mov	r0, r3
 8009298:	f001 fbd8 	bl	800aa4c <RCCEx_PLL2_Config>
 800929c:	4603      	mov	r3, r0
 800929e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092a0:	e00c      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3324      	adds	r3, #36	; 0x24
 80092a6:	2101      	movs	r1, #1
 80092a8:	4618      	mov	r0, r3
 80092aa:	f001 fc81 	bl	800abb0 <RCCEx_PLL3_Config>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092b2:	e003      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	75fb      	strb	r3, [r7, #23]
      break;
 80092b8:	e000      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80092ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d109      	bne.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092c2:	4b77      	ldr	r3, [pc, #476]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c6:	f023 0207 	bic.w	r2, r3, #7
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ce:	4974      	ldr	r1, [pc, #464]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	654b      	str	r3, [r1, #84]	; 0x54
 80092d4:	e001      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0304 	and.w	r3, r3, #4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d03a      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ec:	2b05      	cmp	r3, #5
 80092ee:	d821      	bhi.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80092f0:	a201      	add	r2, pc, #4	; (adr r2, 80092f8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80092f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f6:	bf00      	nop
 80092f8:	0800933b 	.word	0x0800933b
 80092fc:	08009311 	.word	0x08009311
 8009300:	08009323 	.word	0x08009323
 8009304:	0800933b 	.word	0x0800933b
 8009308:	0800933b 	.word	0x0800933b
 800930c:	0800933b 	.word	0x0800933b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3304      	adds	r3, #4
 8009314:	2101      	movs	r1, #1
 8009316:	4618      	mov	r0, r3
 8009318:	f001 fb98 	bl	800aa4c <RCCEx_PLL2_Config>
 800931c:	4603      	mov	r3, r0
 800931e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009320:	e00c      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	3324      	adds	r3, #36	; 0x24
 8009326:	2101      	movs	r1, #1
 8009328:	4618      	mov	r0, r3
 800932a:	f001 fc41 	bl	800abb0 <RCCEx_PLL3_Config>
 800932e:	4603      	mov	r3, r0
 8009330:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009332:	e003      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	75fb      	strb	r3, [r7, #23]
      break;
 8009338:	e000      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800933a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800933c:	7dfb      	ldrb	r3, [r7, #23]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10a      	bne.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009342:	4b57      	ldr	r3, [pc, #348]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009346:	f023 0207 	bic.w	r2, r3, #7
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009350:	4953      	ldr	r1, [pc, #332]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009352:	4313      	orrs	r3, r2
 8009354:	658b      	str	r3, [r1, #88]	; 0x58
 8009356:	e001      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0320 	and.w	r3, r3, #32
 8009364:	2b00      	cmp	r3, #0
 8009366:	d04b      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800936e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009372:	d02e      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009378:	d828      	bhi.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800937a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800937e:	d02a      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009384:	d822      	bhi.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009386:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800938a:	d026      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800938c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009390:	d81c      	bhi.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009396:	d010      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800939c:	d816      	bhi.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d01d      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80093a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093a6:	d111      	bne.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	3304      	adds	r3, #4
 80093ac:	2100      	movs	r1, #0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f001 fb4c 	bl	800aa4c <RCCEx_PLL2_Config>
 80093b4:	4603      	mov	r3, r0
 80093b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093b8:	e012      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	3324      	adds	r3, #36	; 0x24
 80093be:	2102      	movs	r1, #2
 80093c0:	4618      	mov	r0, r3
 80093c2:	f001 fbf5 	bl	800abb0 <RCCEx_PLL3_Config>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093ca:	e009      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	75fb      	strb	r3, [r7, #23]
      break;
 80093d0:	e006      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093d2:	bf00      	nop
 80093d4:	e004      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093d6:	bf00      	nop
 80093d8:	e002      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093da:	bf00      	nop
 80093dc:	e000      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10a      	bne.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093e6:	4b2e      	ldr	r3, [pc, #184]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80093e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093f4:	492a      	ldr	r1, [pc, #168]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	654b      	str	r3, [r1, #84]	; 0x54
 80093fa:	e001      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009408:	2b00      	cmp	r3, #0
 800940a:	d04d      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009412:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009416:	d02e      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009418:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800941c:	d828      	bhi.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800941e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009422:	d02a      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009428:	d822      	bhi.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800942a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800942e:	d026      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009434:	d81c      	bhi.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800943a:	d010      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800943c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009440:	d816      	bhi.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01d      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800944a:	d111      	bne.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3304      	adds	r3, #4
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f001 fafa 	bl	800aa4c <RCCEx_PLL2_Config>
 8009458:	4603      	mov	r3, r0
 800945a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800945c:	e012      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3324      	adds	r3, #36	; 0x24
 8009462:	2102      	movs	r1, #2
 8009464:	4618      	mov	r0, r3
 8009466:	f001 fba3 	bl	800abb0 <RCCEx_PLL3_Config>
 800946a:	4603      	mov	r3, r0
 800946c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800946e:	e009      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	75fb      	strb	r3, [r7, #23]
      break;
 8009474:	e006      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009476:	bf00      	nop
 8009478:	e004      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800947a:	bf00      	nop
 800947c:	e002      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800947e:	bf00      	nop
 8009480:	e000      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009482:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10c      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800948a:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800948c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009498:	4901      	ldr	r1, [pc, #4]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800949a:	4313      	orrs	r3, r2
 800949c:	658b      	str	r3, [r1, #88]	; 0x58
 800949e:	e003      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80094a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d04b      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094be:	d02e      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80094c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094c4:	d828      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80094c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ca:	d02a      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80094cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094d0:	d822      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80094d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094d6:	d026      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80094d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094dc:	d81c      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80094de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094e2:	d010      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80094e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094e8:	d816      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d01d      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80094ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f2:	d111      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3304      	adds	r3, #4
 80094f8:	2100      	movs	r1, #0
 80094fa:	4618      	mov	r0, r3
 80094fc:	f001 faa6 	bl	800aa4c <RCCEx_PLL2_Config>
 8009500:	4603      	mov	r3, r0
 8009502:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009504:	e012      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3324      	adds	r3, #36	; 0x24
 800950a:	2102      	movs	r1, #2
 800950c:	4618      	mov	r0, r3
 800950e:	f001 fb4f 	bl	800abb0 <RCCEx_PLL3_Config>
 8009512:	4603      	mov	r3, r0
 8009514:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009516:	e009      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	75fb      	strb	r3, [r7, #23]
      break;
 800951c:	e006      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800951e:	bf00      	nop
 8009520:	e004      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009522:	bf00      	nop
 8009524:	e002      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800952a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10a      	bne.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009532:	4b9d      	ldr	r3, [pc, #628]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009540:	4999      	ldr	r1, [pc, #612]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009542:	4313      	orrs	r3, r2
 8009544:	658b      	str	r3, [r1, #88]	; 0x58
 8009546:	e001      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0308 	and.w	r3, r3, #8
 8009554:	2b00      	cmp	r3, #0
 8009556:	d01a      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800955e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009562:	d10a      	bne.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3324      	adds	r3, #36	; 0x24
 8009568:	2102      	movs	r1, #2
 800956a:	4618      	mov	r0, r3
 800956c:	f001 fb20 	bl	800abb0 <RCCEx_PLL3_Config>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800957a:	4b8b      	ldr	r3, [pc, #556]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800957c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009588:	4987      	ldr	r1, [pc, #540]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800958a:	4313      	orrs	r3, r2
 800958c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0310 	and.w	r3, r3, #16
 8009596:	2b00      	cmp	r3, #0
 8009598:	d01a      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095a4:	d10a      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	3324      	adds	r3, #36	; 0x24
 80095aa:	2102      	movs	r1, #2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f001 faff 	bl	800abb0 <RCCEx_PLL3_Config>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095bc:	4b7a      	ldr	r3, [pc, #488]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095ca:	4977      	ldr	r1, [pc, #476]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095cc:	4313      	orrs	r3, r2
 80095ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d034      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095e6:	d01d      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80095e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095ec:	d817      	bhi.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80095f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095f6:	d009      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80095f8:	e011      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3304      	adds	r3, #4
 80095fe:	2100      	movs	r1, #0
 8009600:	4618      	mov	r0, r3
 8009602:	f001 fa23 	bl	800aa4c <RCCEx_PLL2_Config>
 8009606:	4603      	mov	r3, r0
 8009608:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800960a:	e00c      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3324      	adds	r3, #36	; 0x24
 8009610:	2102      	movs	r1, #2
 8009612:	4618      	mov	r0, r3
 8009614:	f001 facc 	bl	800abb0 <RCCEx_PLL3_Config>
 8009618:	4603      	mov	r3, r0
 800961a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800961c:	e003      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	75fb      	strb	r3, [r7, #23]
      break;
 8009622:	e000      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009626:	7dfb      	ldrb	r3, [r7, #23]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800962c:	4b5e      	ldr	r3, [pc, #376]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800962e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009630:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800963a:	495b      	ldr	r1, [pc, #364]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800963c:	4313      	orrs	r3, r2
 800963e:	658b      	str	r3, [r1, #88]	; 0x58
 8009640:	e001      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d033      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009658:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800965c:	d01c      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800965e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009662:	d816      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009668:	d003      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800966a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800966e:	d007      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009670:	e00f      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009672:	4b4d      	ldr	r3, [pc, #308]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009676:	4a4c      	ldr	r2, [pc, #304]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800967c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800967e:	e00c      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3324      	adds	r3, #36	; 0x24
 8009684:	2101      	movs	r1, #1
 8009686:	4618      	mov	r0, r3
 8009688:	f001 fa92 	bl	800abb0 <RCCEx_PLL3_Config>
 800968c:	4603      	mov	r3, r0
 800968e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009690:	e003      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	75fb      	strb	r3, [r7, #23]
      break;
 8009696:	e000      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800969a:	7dfb      	ldrb	r3, [r7, #23]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10a      	bne.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096a0:	4b41      	ldr	r3, [pc, #260]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ae:	493e      	ldr	r1, [pc, #248]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096b0:	4313      	orrs	r3, r2
 80096b2:	654b      	str	r3, [r1, #84]	; 0x54
 80096b4:	e001      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d029      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80096ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d2:	d007      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80096d4:	e00f      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d6:	4b34      	ldr	r3, [pc, #208]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096da:	4a33      	ldr	r2, [pc, #204]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80096e2:	e00b      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3304      	adds	r3, #4
 80096e8:	2102      	movs	r1, #2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 f9ae 	bl	800aa4c <RCCEx_PLL2_Config>
 80096f0:	4603      	mov	r3, r0
 80096f2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80096f4:	e002      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	75fb      	strb	r3, [r7, #23]
      break;
 80096fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096fc:	7dfb      	ldrb	r3, [r7, #23]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d109      	bne.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009702:	4b29      	ldr	r3, [pc, #164]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009706:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800970e:	4926      	ldr	r1, [pc, #152]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009710:	4313      	orrs	r3, r2
 8009712:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009714:	e001      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	3324      	adds	r3, #36	; 0x24
 800972a:	2102      	movs	r1, #2
 800972c:	4618      	mov	r0, r3
 800972e:	f001 fa3f 	bl	800abb0 <RCCEx_PLL3_Config>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d033      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800974c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009750:	d017      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009756:	d811      	bhi.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800975c:	d013      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800975e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009762:	d80b      	bhi.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009764:	2b00      	cmp	r3, #0
 8009766:	d010      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800976c:	d106      	bne.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800976e:	4b0e      	ldr	r3, [pc, #56]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009772:	4a0d      	ldr	r2, [pc, #52]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009778:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800977a:	e007      	b.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	75fb      	strb	r3, [r7, #23]
      break;
 8009780:	e004      	b.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009782:	bf00      	nop
 8009784:	e002      	b.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009786:	bf00      	nop
 8009788:	e000      	b.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800978a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10c      	bne.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009792:	4b05      	ldr	r3, [pc, #20]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800979e:	4902      	ldr	r1, [pc, #8]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097a0:	4313      	orrs	r3, r2
 80097a2:	654b      	str	r3, [r1, #84]	; 0x54
 80097a4:	e004      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80097a6:	bf00      	nop
 80097a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
 80097ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d008      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097bc:	4b31      	ldr	r3, [pc, #196]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c8:	492e      	ldr	r1, [pc, #184]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d009      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80097da:	4b2a      	ldr	r3, [pc, #168]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80097e8:	4926      	ldr	r1, [pc, #152]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d008      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80097fa:	4b22      	ldr	r3, [pc, #136]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009806:	491f      	ldr	r1, [pc, #124]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009808:	4313      	orrs	r3, r2
 800980a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00d      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009818:	4b1a      	ldr	r3, [pc, #104]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	4a19      	ldr	r2, [pc, #100]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800981e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009822:	6113      	str	r3, [r2, #16]
 8009824:	4b17      	ldr	r3, [pc, #92]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009826:	691a      	ldr	r2, [r3, #16]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800982e:	4915      	ldr	r1, [pc, #84]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009830:	4313      	orrs	r3, r2
 8009832:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	da08      	bge.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800983c:	4b11      	ldr	r3, [pc, #68]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800983e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009840:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009848:	490e      	ldr	r1, [pc, #56]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800984a:	4313      	orrs	r3, r2
 800984c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d009      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800985a:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800985c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800985e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009868:	4906      	ldr	r1, [pc, #24]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800986a:	4313      	orrs	r3, r2
 800986c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800986e:	7dbb      	ldrb	r3, [r7, #22]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	e000      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	58024400 	.word	0x58024400

08009888 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b090      	sub	sp, #64	; 0x40
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009896:	f040 8095 	bne.w	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800989a:	4b97      	ldr	r3, [pc, #604]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800989c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80098a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a6:	2b04      	cmp	r3, #4
 80098a8:	f200 8088 	bhi.w	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80098ac:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80098ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b2:	bf00      	nop
 80098b4:	080098c9 	.word	0x080098c9
 80098b8:	080098f1 	.word	0x080098f1
 80098bc:	08009919 	.word	0x08009919
 80098c0:	080099b5 	.word	0x080099b5
 80098c4:	08009941 	.word	0x08009941
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098c8:	4b8b      	ldr	r3, [pc, #556]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098d4:	d108      	bne.n	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 ff64 	bl	800a7a8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098e4:	f000 bc94 	b.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098ec:	f000 bc90 	b.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098f0:	4b81      	ldr	r3, [pc, #516]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098fc:	d108      	bne.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098fe:	f107 0318 	add.w	r3, r7, #24
 8009902:	4618      	mov	r0, r3
 8009904:	f000 fca8 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800990c:	f000 bc80 	b.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009914:	f000 bc7c 	b.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009918:	4b77      	ldr	r3, [pc, #476]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009924:	d108      	bne.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009926:	f107 030c 	add.w	r3, r7, #12
 800992a:	4618      	mov	r0, r3
 800992c:	f000 fde8 	bl	800a500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009934:	f000 bc6c 	b.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800993c:	f000 bc68 	b.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009940:	4b6d      	ldr	r3, [pc, #436]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009948:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800994a:	4b6b      	ldr	r3, [pc, #428]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0304 	and.w	r3, r3, #4
 8009952:	2b04      	cmp	r3, #4
 8009954:	d10c      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009958:	2b00      	cmp	r3, #0
 800995a:	d109      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800995c:	4b66      	ldr	r3, [pc, #408]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	08db      	lsrs	r3, r3, #3
 8009962:	f003 0303 	and.w	r3, r3, #3
 8009966:	4a65      	ldr	r2, [pc, #404]	; (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009968:	fa22 f303 	lsr.w	r3, r2, r3
 800996c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800996e:	e01f      	b.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009970:	4b61      	ldr	r3, [pc, #388]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800997c:	d106      	bne.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009980:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009984:	d102      	bne.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009986:	4b5e      	ldr	r3, [pc, #376]	; (8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800998a:	e011      	b.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800998c:	4b5a      	ldr	r3, [pc, #360]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009998:	d106      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800999a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099a0:	d102      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80099a2:	4b58      	ldr	r3, [pc, #352]	; (8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80099a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099a6:	e003      	b.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80099ac:	f000 bc30 	b.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80099b0:	f000 bc2e 	b.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80099b4:	4b54      	ldr	r3, [pc, #336]	; (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80099b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099b8:	f000 bc2a 	b.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099c0:	f000 bc26 	b.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ca:	f040 809f 	bne.w	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80099ce:	4b4a      	ldr	r3, [pc, #296]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80099d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80099d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099de:	d04d      	beq.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e6:	f200 8084 	bhi.w	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80099ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ec:	2bc0      	cmp	r3, #192	; 0xc0
 80099ee:	d07d      	beq.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	2bc0      	cmp	r3, #192	; 0xc0
 80099f4:	d87d      	bhi.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	2b80      	cmp	r3, #128	; 0x80
 80099fa:	d02d      	beq.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	2b80      	cmp	r3, #128	; 0x80
 8009a00:	d877      	bhi.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	2b40      	cmp	r3, #64	; 0x40
 8009a0c:	d012      	beq.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009a0e:	e070      	b.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a10:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a1c:	d107      	bne.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fec0 	bl	800a7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a2c:	e3f0      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a32:	e3ed      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a34:	4b30      	ldr	r3, [pc, #192]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a40:	d107      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a42:	f107 0318 	add.w	r3, r7, #24
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fc06 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a50:	e3de      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a56:	e3db      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a58:	4b27      	ldr	r3, [pc, #156]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a64:	d107      	bne.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a66:	f107 030c 	add.w	r3, r7, #12
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 fd48 	bl	800a500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a74:	e3cc      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a7a:	e3c9      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a7c:	4b1e      	ldr	r3, [pc, #120]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a84:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a86:	4b1c      	ldr	r3, [pc, #112]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0304 	and.w	r3, r3, #4
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	d10c      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d109      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a98:	4b17      	ldr	r3, [pc, #92]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	08db      	lsrs	r3, r3, #3
 8009a9e:	f003 0303 	and.w	r3, r3, #3
 8009aa2:	4a16      	ldr	r2, [pc, #88]	; (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aaa:	e01e      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009aac:	4b12      	ldr	r3, [pc, #72]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ab8:	d106      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ac0:	d102      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ac6:	e010      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ac8:	4b0b      	ldr	r3, [pc, #44]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ad4:	d106      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009adc:	d102      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009ade:	4b09      	ldr	r3, [pc, #36]	; (8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ae2:	e002      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009ae8:	e392      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009aea:	e391      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009aec:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009af0:	e38e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009af6:	e38b      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009af8:	58024400 	.word	0x58024400
 8009afc:	03d09000 	.word	0x03d09000
 8009b00:	003d0900 	.word	0x003d0900
 8009b04:	007a1200 	.word	0x007a1200
 8009b08:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b12:	f040 809c 	bne.w	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009b16:	4b9d      	ldr	r3, [pc, #628]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009b1e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b26:	d054      	beq.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b2e:	f200 808b 	bhi.w	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b38:	f000 8083 	beq.w	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b42:	f200 8081 	bhi.w	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b4c:	d02f      	beq.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b54:	d878      	bhi.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d004      	beq.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b62:	d012      	beq.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8009b64:	e070      	b.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b66:	4b89      	ldr	r3, [pc, #548]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b72:	d107      	bne.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fe15 	bl	800a7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b82:	e345      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009b84:	2300      	movs	r3, #0
 8009b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b88:	e342      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b8a:	4b80      	ldr	r3, [pc, #512]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b96:	d107      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b98:	f107 0318 	add.w	r3, r7, #24
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 fb5b 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ba6:	e333      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bac:	e330      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bae:	4b77      	ldr	r3, [pc, #476]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bba:	d107      	bne.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bbc:	f107 030c 	add.w	r3, r7, #12
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fc9d 	bl	800a500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009bca:	e321      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bd0:	e31e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009bd2:	4b6e      	ldr	r3, [pc, #440]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bda:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bdc:	4b6b      	ldr	r3, [pc, #428]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d10c      	bne.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8009be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d109      	bne.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bee:	4b67      	ldr	r3, [pc, #412]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	08db      	lsrs	r3, r3, #3
 8009bf4:	f003 0303 	and.w	r3, r3, #3
 8009bf8:	4a65      	ldr	r2, [pc, #404]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c00:	e01e      	b.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c02:	4b62      	ldr	r3, [pc, #392]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c0e:	d106      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c16:	d102      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009c18:	4b5e      	ldr	r3, [pc, #376]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c1c:	e010      	b.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c1e:	4b5b      	ldr	r3, [pc, #364]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c2a:	d106      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c32:	d102      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009c34:	4b58      	ldr	r3, [pc, #352]	; (8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c38:	e002      	b.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009c3e:	e2e7      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009c40:	e2e6      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c42:	4b56      	ldr	r3, [pc, #344]	; (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c46:	e2e3      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c4c:	e2e0      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c54:	f040 80a7 	bne.w	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009c58:	4b4c      	ldr	r3, [pc, #304]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c5c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009c60:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c68:	d055      	beq.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c70:	f200 8096 	bhi.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c7a:	f000 8084 	beq.w	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c84:	f200 808c 	bhi.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c8e:	d030      	beq.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c96:	f200 8083 	bhi.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d004      	beq.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ca6:	d012      	beq.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009ca8:	e07a      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009caa:	4b38      	ldr	r3, [pc, #224]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cb6:	d107      	bne.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 fd73 	bl	800a7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009cc6:	e2a3      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ccc:	e2a0      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cce:	4b2f      	ldr	r3, [pc, #188]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cda:	d107      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cdc:	f107 0318 	add.w	r3, r7, #24
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 fab9 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009cea:	e291      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cf0:	e28e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cf2:	4b26      	ldr	r3, [pc, #152]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cfe:	d107      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d00:	f107 030c 	add.w	r3, r7, #12
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 fbfb 	bl	800a500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d0e:	e27f      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d14:	e27c      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d16:	4b1d      	ldr	r3, [pc, #116]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d1e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d20:	4b1a      	ldr	r3, [pc, #104]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d10c      	bne.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d109      	bne.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d32:	4b16      	ldr	r3, [pc, #88]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	08db      	lsrs	r3, r3, #3
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	4a14      	ldr	r2, [pc, #80]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d44:	e01e      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d46:	4b11      	ldr	r3, [pc, #68]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d52:	d106      	bne.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d5a:	d102      	bne.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d60:	e010      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d62:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d6e:	d106      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d76:	d102      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009d78:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d7c:	e002      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009d82:	e245      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009d84:	e244      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d86:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d8a:	e241      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009d8c:	58024400 	.word	0x58024400
 8009d90:	03d09000 	.word	0x03d09000
 8009d94:	003d0900 	.word	0x003d0900
 8009d98:	007a1200 	.word	0x007a1200
 8009d9c:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009da4:	e234      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dac:	f040 809c 	bne.w	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009db0:	4b9b      	ldr	r3, [pc, #620]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009db8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dc0:	d054      	beq.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8009dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dc8:	f200 808b 	bhi.w	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009dd2:	f000 8083 	beq.w	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8009dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ddc:	f200 8081 	bhi.w	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009de6:	d02f      	beq.n	8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8009de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dee:	d878      	bhi.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d004      	beq.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dfc:	d012      	beq.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8009dfe:	e070      	b.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e00:	4b87      	ldr	r3, [pc, #540]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e0c:	d107      	bne.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fcc8 	bl	800a7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e1c:	e1f8      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e22:	e1f5      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e24:	4b7e      	ldr	r3, [pc, #504]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e30:	d107      	bne.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e32:	f107 0318 	add.w	r3, r7, #24
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 fa0e 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e40:	e1e6      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009e42:	2300      	movs	r3, #0
 8009e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e46:	e1e3      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e48:	4b75      	ldr	r3, [pc, #468]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e54:	d107      	bne.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e56:	f107 030c 	add.w	r3, r7, #12
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fb50 	bl	800a500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e64:	e1d4      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e6a:	e1d1      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e6c:	4b6c      	ldr	r3, [pc, #432]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e74:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e76:	4b6a      	ldr	r3, [pc, #424]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0304 	and.w	r3, r3, #4
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	d10c      	bne.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d109      	bne.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e88:	4b65      	ldr	r3, [pc, #404]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	08db      	lsrs	r3, r3, #3
 8009e8e:	f003 0303 	and.w	r3, r3, #3
 8009e92:	4a64      	ldr	r2, [pc, #400]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009e94:	fa22 f303 	lsr.w	r3, r2, r3
 8009e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e9a:	e01e      	b.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e9c:	4b60      	ldr	r3, [pc, #384]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ea8:	d106      	bne.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8009eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009eb0:	d102      	bne.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009eb2:	4b5d      	ldr	r3, [pc, #372]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eb6:	e010      	b.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009eb8:	4b59      	ldr	r3, [pc, #356]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ec4:	d106      	bne.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ecc:	d102      	bne.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009ece:	4b57      	ldr	r3, [pc, #348]	; (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ed2:	e002      	b.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009ed8:	e19a      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009eda:	e199      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009edc:	4b54      	ldr	r3, [pc, #336]	; (800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ee0:	e196      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ee6:	e193      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009eee:	d173      	bne.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009ef0:	4b4b      	ldr	r3, [pc, #300]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009ef8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f00:	d02f      	beq.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f08:	d863      	bhi.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d004      	beq.n	8009f1a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8009f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f16:	d012      	beq.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8009f18:	e05b      	b.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f1a:	4b41      	ldr	r3, [pc, #260]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f26:	d107      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f28:	f107 0318 	add.w	r3, r7, #24
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 f993 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f36:	e16b      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f3c:	e168      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f3e:	4b38      	ldr	r3, [pc, #224]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f4a:	d107      	bne.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f4c:	f107 030c 	add.w	r3, r7, #12
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 fad5 	bl	800a500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f5a:	e159      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f60:	e156      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f62:	4b2f      	ldr	r3, [pc, #188]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f6a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f6c:	4b2c      	ldr	r3, [pc, #176]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	2b04      	cmp	r3, #4
 8009f76:	d10c      	bne.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8009f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d109      	bne.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f7e:	4b28      	ldr	r3, [pc, #160]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	08db      	lsrs	r3, r3, #3
 8009f84:	f003 0303 	and.w	r3, r3, #3
 8009f88:	4a26      	ldr	r2, [pc, #152]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f90:	e01e      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f92:	4b23      	ldr	r3, [pc, #140]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f9e:	d106      	bne.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8009fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fa6:	d102      	bne.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009fa8:	4b1f      	ldr	r3, [pc, #124]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fac:	e010      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fae:	4b1c      	ldr	r3, [pc, #112]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fba:	d106      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8009fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fc2:	d102      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009fc4:	4b19      	ldr	r3, [pc, #100]	; (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc8:	e002      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009fce:	e11f      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009fd0:	e11e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fd6:	e11b      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fde:	d13e      	bne.n	800a05e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009fe0:	4b0f      	ldr	r3, [pc, #60]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fe8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d004      	beq.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ff6:	d01d      	beq.n	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009ff8:	e02e      	b.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ffa:	4b09      	ldr	r3, [pc, #36]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a006:	d107      	bne.n	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 fbcb 	bl	800a7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a016:	e0fb      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a018:	2300      	movs	r3, #0
 800a01a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a01c:	e0f8      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a01e:	bf00      	nop
 800a020:	58024400 	.word	0x58024400
 800a024:	03d09000 	.word	0x03d09000
 800a028:	003d0900 	.word	0x003d0900
 800a02c:	007a1200 	.word	0x007a1200
 800a030:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a034:	4b79      	ldr	r3, [pc, #484]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a03c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a040:	d107      	bne.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a042:	f107 0318 	add.w	r3, r7, #24
 800a046:	4618      	mov	r0, r3
 800a048:	f000 f906 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a050:	e0de      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a056:	e0db      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a05c:	e0d8      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a064:	f040 8085 	bne.w	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a068:	4b6c      	ldr	r3, [pc, #432]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a06a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a06c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a070:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a078:	d06b      	beq.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a080:	d874      	bhi.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a088:	d056      	beq.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a090:	d86c      	bhi.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a098:	d03b      	beq.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0a0:	d864      	bhi.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0a8:	d021      	beq.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0b0:	d85c      	bhi.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d004      	beq.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0be:	d004      	beq.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a0c0:	e054      	b.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a0c2:	f000 f8b3 	bl	800a22c <HAL_RCCEx_GetD3PCLK1Freq>
 800a0c6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a0c8:	e0a2      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0ca:	4b54      	ldr	r3, [pc, #336]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0d6:	d107      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0d8:	f107 0318 	add.w	r3, r7, #24
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 f8bb 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a0e6:	e093      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0ec:	e090      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0ee:	4b4b      	ldr	r3, [pc, #300]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0fa:	d107      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0fc:	f107 030c 	add.w	r3, r7, #12
 800a100:	4618      	mov	r0, r3
 800a102:	f000 f9fd 	bl	800a500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a10a:	e081      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a10c:	2300      	movs	r3, #0
 800a10e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a110:	e07e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a112:	4b42      	ldr	r3, [pc, #264]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b04      	cmp	r3, #4
 800a11c:	d109      	bne.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a11e:	4b3f      	ldr	r3, [pc, #252]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	08db      	lsrs	r3, r3, #3
 800a124:	f003 0303 	and.w	r3, r3, #3
 800a128:	4a3d      	ldr	r2, [pc, #244]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a12a:	fa22 f303 	lsr.w	r3, r2, r3
 800a12e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a130:	e06e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a132:	2300      	movs	r3, #0
 800a134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a136:	e06b      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a138:	4b38      	ldr	r3, [pc, #224]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a144:	d102      	bne.n	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800a146:	4b37      	ldr	r3, [pc, #220]	; (800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a148:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a14a:	e061      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a150:	e05e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a152:	4b32      	ldr	r3, [pc, #200]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a15a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a15e:	d102      	bne.n	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800a160:	4b31      	ldr	r3, [pc, #196]	; (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a162:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a164:	e054      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a16a:	e051      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a170:	e04e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a178:	d148      	bne.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a17a:	4b28      	ldr	r3, [pc, #160]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a17e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a182:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a18a:	d02a      	beq.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a192:	d838      	bhi.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	2b00      	cmp	r3, #0
 800a198:	d004      	beq.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800a19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1a0:	d00d      	beq.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800a1a2:	e030      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1a4:	4b1d      	ldr	r3, [pc, #116]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1b0:	d102      	bne.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800a1b2:	4b1d      	ldr	r3, [pc, #116]	; (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a1b6:	e02b      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1bc:	e028      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1be:	4b17      	ldr	r3, [pc, #92]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1ca:	d107      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 fae9 	bl	800a7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a1da:	e019      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1e0:	e016      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1e2:	4b0e      	ldr	r3, [pc, #56]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1ee:	d107      	bne.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1f0:	f107 0318 	add.w	r3, r7, #24
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 f82f 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a1fe:	e007      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a204:	e004      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a20a:	e001      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800a20c:	2300      	movs	r3, #0
 800a20e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a212:	4618      	mov	r0, r3
 800a214:	3740      	adds	r7, #64	; 0x40
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	58024400 	.word	0x58024400
 800a220:	03d09000 	.word	0x03d09000
 800a224:	003d0900 	.word	0x003d0900
 800a228:	007a1200 	.word	0x007a1200

0800a22c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a230:	f7fe fb46 	bl	80088c0 <HAL_RCC_GetHCLKFreq>
 800a234:	4602      	mov	r2, r0
 800a236:	4b06      	ldr	r3, [pc, #24]	; (800a250 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	091b      	lsrs	r3, r3, #4
 800a23c:	f003 0307 	and.w	r3, r3, #7
 800a240:	4904      	ldr	r1, [pc, #16]	; (800a254 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a242:	5ccb      	ldrb	r3, [r1, r3]
 800a244:	f003 031f 	and.w	r3, r3, #31
 800a248:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	58024400 	.word	0x58024400
 800a254:	0802a498 	.word	0x0802a498

0800a258 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a258:	b480      	push	{r7}
 800a25a:	b089      	sub	sp, #36	; 0x24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a260:	4ba1      	ldr	r3, [pc, #644]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a264:	f003 0303 	and.w	r3, r3, #3
 800a268:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a26a:	4b9f      	ldr	r3, [pc, #636]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26e:	0b1b      	lsrs	r3, r3, #12
 800a270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a274:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a276:	4b9c      	ldr	r3, [pc, #624]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27a:	091b      	lsrs	r3, r3, #4
 800a27c:	f003 0301 	and.w	r3, r3, #1
 800a280:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a282:	4b99      	ldr	r3, [pc, #612]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a286:	08db      	lsrs	r3, r3, #3
 800a288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	fb02 f303 	mul.w	r3, r2, r3
 800a292:	ee07 3a90 	vmov	s15, r3
 800a296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 8111 	beq.w	800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	f000 8083 	beq.w	800a3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	f200 80a1 	bhi.w	800a3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d056      	beq.n	800a370 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a2c2:	e099      	b.n	800a3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2c4:	4b88      	ldr	r3, [pc, #544]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0320 	and.w	r3, r3, #32
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d02d      	beq.n	800a32c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2d0:	4b85      	ldr	r3, [pc, #532]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	08db      	lsrs	r3, r3, #3
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	4a84      	ldr	r2, [pc, #528]	; (800a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	ee07 3a90 	vmov	s15, r3
 800a2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2fa:	4b7b      	ldr	r3, [pc, #492]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a302:	ee07 3a90 	vmov	s15, r3
 800a306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a30a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a30e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a31a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a31e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a322:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a326:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a32a:	e087      	b.n	800a43c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	ee07 3a90 	vmov	s15, r3
 800a332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a336:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a33e:	4b6a      	ldr	r3, [pc, #424]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a346:	ee07 3a90 	vmov	s15, r3
 800a34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a34e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a352:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a35e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a36a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a36e:	e065      	b.n	800a43c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	ee07 3a90 	vmov	s15, r3
 800a376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a382:	4b59      	ldr	r3, [pc, #356]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a392:	ed97 6a03 	vldr	s12, [r7, #12]
 800a396:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3b2:	e043      	b.n	800a43c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a4fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c6:	4b48      	ldr	r3, [pc, #288]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3f6:	e021      	b.n	800a43c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a402:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a40a:	4b37      	ldr	r3, [pc, #220]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a41a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a41e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a43a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a43c:	4b2a      	ldr	r3, [pc, #168]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a440:	0a5b      	lsrs	r3, r3, #9
 800a442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a446:	ee07 3a90 	vmov	s15, r3
 800a44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a44e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a452:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a456:	edd7 6a07 	vldr	s13, [r7, #28]
 800a45a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a45e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a462:	ee17 2a90 	vmov	r2, s15
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a46a:	4b1f      	ldr	r3, [pc, #124]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46e:	0c1b      	lsrs	r3, r3, #16
 800a470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a474:	ee07 3a90 	vmov	s15, r3
 800a478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a480:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a484:	edd7 6a07 	vldr	s13, [r7, #28]
 800a488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a48c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a490:	ee17 2a90 	vmov	r2, s15
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a498:	4b13      	ldr	r3, [pc, #76]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49c:	0e1b      	lsrs	r3, r3, #24
 800a49e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4a2:	ee07 3a90 	vmov	s15, r3
 800a4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4be:	ee17 2a90 	vmov	r2, s15
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a4c6:	e008      	b.n	800a4da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	609a      	str	r2, [r3, #8]
}
 800a4da:	bf00      	nop
 800a4dc:	3724      	adds	r7, #36	; 0x24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	58024400 	.word	0x58024400
 800a4ec:	03d09000 	.word	0x03d09000
 800a4f0:	46000000 	.word	0x46000000
 800a4f4:	4c742400 	.word	0x4c742400
 800a4f8:	4a742400 	.word	0x4a742400
 800a4fc:	4af42400 	.word	0x4af42400

0800a500 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a500:	b480      	push	{r7}
 800a502:	b089      	sub	sp, #36	; 0x24
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a508:	4ba1      	ldr	r3, [pc, #644]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50c:	f003 0303 	and.w	r3, r3, #3
 800a510:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a512:	4b9f      	ldr	r3, [pc, #636]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a516:	0d1b      	lsrs	r3, r3, #20
 800a518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a51c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a51e:	4b9c      	ldr	r3, [pc, #624]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a522:	0a1b      	lsrs	r3, r3, #8
 800a524:	f003 0301 	and.w	r3, r3, #1
 800a528:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a52a:	4b99      	ldr	r3, [pc, #612]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a52e:	08db      	lsrs	r3, r3, #3
 800a530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	fb02 f303 	mul.w	r3, r2, r3
 800a53a:	ee07 3a90 	vmov	s15, r3
 800a53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a542:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 8111 	beq.w	800a770 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	2b02      	cmp	r3, #2
 800a552:	f000 8083 	beq.w	800a65c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	2b02      	cmp	r3, #2
 800a55a:	f200 80a1 	bhi.w	800a6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d003      	beq.n	800a56c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d056      	beq.n	800a618 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a56a:	e099      	b.n	800a6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a56c:	4b88      	ldr	r3, [pc, #544]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0320 	and.w	r3, r3, #32
 800a574:	2b00      	cmp	r3, #0
 800a576:	d02d      	beq.n	800a5d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a578:	4b85      	ldr	r3, [pc, #532]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	08db      	lsrs	r3, r3, #3
 800a57e:	f003 0303 	and.w	r3, r3, #3
 800a582:	4a84      	ldr	r2, [pc, #528]	; (800a794 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a584:	fa22 f303 	lsr.w	r3, r2, r3
 800a588:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	ee07 3a90 	vmov	s15, r3
 800a590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	ee07 3a90 	vmov	s15, r3
 800a59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5a2:	4b7b      	ldr	r3, [pc, #492]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5aa:	ee07 3a90 	vmov	s15, r3
 800a5ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a5d2:	e087      	b.n	800a6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a5e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5e6:	4b6a      	ldr	r3, [pc, #424]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ee:	ee07 3a90 	vmov	s15, r3
 800a5f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a60a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a60e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a616:	e065      	b.n	800a6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	ee07 3a90 	vmov	s15, r3
 800a61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a622:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a62a:	4b59      	ldr	r3, [pc, #356]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a632:	ee07 3a90 	vmov	s15, r3
 800a636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a63a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a63e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a64a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a64e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a652:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a65a:	e043      	b.n	800a6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	ee07 3a90 	vmov	s15, r3
 800a662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a666:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a66a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a66e:	4b48      	ldr	r3, [pc, #288]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a67e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a682:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a68a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a68e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a69a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a69e:	e021      	b.n	800a6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a6ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6b2:	4b37      	ldr	r3, [pc, #220]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a6e4:	4b2a      	ldr	r3, [pc, #168]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e8:	0a5b      	lsrs	r3, r3, #9
 800a6ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800a702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a70a:	ee17 2a90 	vmov	r2, s15
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a712:	4b1f      	ldr	r3, [pc, #124]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a716:	0c1b      	lsrs	r3, r3, #16
 800a718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a71c:	ee07 3a90 	vmov	s15, r3
 800a720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a728:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a72c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a738:	ee17 2a90 	vmov	r2, s15
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a740:	4b13      	ldr	r3, [pc, #76]	; (800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a744:	0e1b      	lsrs	r3, r3, #24
 800a746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a74a:	ee07 3a90 	vmov	s15, r3
 800a74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a75a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a75e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a766:	ee17 2a90 	vmov	r2, s15
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a76e:	e008      	b.n	800a782 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	609a      	str	r2, [r3, #8]
}
 800a782:	bf00      	nop
 800a784:	3724      	adds	r7, #36	; 0x24
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	58024400 	.word	0x58024400
 800a794:	03d09000 	.word	0x03d09000
 800a798:	46000000 	.word	0x46000000
 800a79c:	4c742400 	.word	0x4c742400
 800a7a0:	4a742400 	.word	0x4a742400
 800a7a4:	4af42400 	.word	0x4af42400

0800a7a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b089      	sub	sp, #36	; 0x24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7b0:	4ba0      	ldr	r3, [pc, #640]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b4:	f003 0303 	and.w	r3, r3, #3
 800a7b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a7ba:	4b9e      	ldr	r3, [pc, #632]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7be:	091b      	lsrs	r3, r3, #4
 800a7c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a7c6:	4b9b      	ldr	r3, [pc, #620]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a7d0:	4b98      	ldr	r3, [pc, #608]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d4:	08db      	lsrs	r3, r3, #3
 800a7d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	fb02 f303 	mul.w	r3, r2, r3
 800a7e0:	ee07 3a90 	vmov	s15, r3
 800a7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 8111 	beq.w	800aa16 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	f000 8083 	beq.w	800a902 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	f200 80a1 	bhi.w	800a946 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d056      	beq.n	800a8be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a810:	e099      	b.n	800a946 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a812:	4b88      	ldr	r3, [pc, #544]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0320 	and.w	r3, r3, #32
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d02d      	beq.n	800a87a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a81e:	4b85      	ldr	r3, [pc, #532]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	08db      	lsrs	r3, r3, #3
 800a824:	f003 0303 	and.w	r3, r3, #3
 800a828:	4a83      	ldr	r2, [pc, #524]	; (800aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a82a:	fa22 f303 	lsr.w	r3, r2, r3
 800a82e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	ee07 3a90 	vmov	s15, r3
 800a840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a848:	4b7a      	ldr	r3, [pc, #488]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a850:	ee07 3a90 	vmov	s15, r3
 800a854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a858:	ed97 6a03 	vldr	s12, [r7, #12]
 800a85c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800aa3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a860:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a86c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a870:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a874:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a878:	e087      	b.n	800a98a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	ee07 3a90 	vmov	s15, r3
 800a880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a884:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800aa40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a88c:	4b69      	ldr	r3, [pc, #420]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a894:	ee07 3a90 	vmov	s15, r3
 800a898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a89c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800aa3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8bc:	e065      	b.n	800a98a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	ee07 3a90 	vmov	s15, r3
 800a8c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aa44 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a8cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8d0:	4b58      	ldr	r3, [pc, #352]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800aa3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a900:	e043      	b.n	800a98a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	ee07 3a90 	vmov	s15, r3
 800a908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800aa48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a914:	4b47      	ldr	r3, [pc, #284]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a91c:	ee07 3a90 	vmov	s15, r3
 800a920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a924:	ed97 6a03 	vldr	s12, [r7, #12]
 800a928:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aa3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a92c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a93c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a940:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a944:	e021      	b.n	800a98a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	ee07 3a90 	vmov	s15, r3
 800a94c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a950:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800aa40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a958:	4b36      	ldr	r3, [pc, #216]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a960:	ee07 3a90 	vmov	s15, r3
 800a964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a968:	ed97 6a03 	vldr	s12, [r7, #12]
 800a96c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aa3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a97c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a980:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a984:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a988:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a98a:	4b2a      	ldr	r3, [pc, #168]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98e:	0a5b      	lsrs	r3, r3, #9
 800a990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a994:	ee07 3a90 	vmov	s15, r3
 800a998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9b0:	ee17 2a90 	vmov	r2, s15
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a9b8:	4b1e      	ldr	r3, [pc, #120]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9bc:	0c1b      	lsrs	r3, r3, #16
 800a9be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9de:	ee17 2a90 	vmov	r2, s15
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a9e6:	4b13      	ldr	r3, [pc, #76]	; (800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ea:	0e1b      	lsrs	r3, r3, #24
 800a9ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f0:	ee07 3a90 	vmov	s15, r3
 800a9f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa00:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa0c:	ee17 2a90 	vmov	r2, s15
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aa14:	e008      	b.n	800aa28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	609a      	str	r2, [r3, #8]
}
 800aa28:	bf00      	nop
 800aa2a:	3724      	adds	r7, #36	; 0x24
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	58024400 	.word	0x58024400
 800aa38:	03d09000 	.word	0x03d09000
 800aa3c:	46000000 	.word	0x46000000
 800aa40:	4c742400 	.word	0x4c742400
 800aa44:	4a742400 	.word	0x4a742400
 800aa48:	4af42400 	.word	0x4af42400

0800aa4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa5a:	4b53      	ldr	r3, [pc, #332]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d101      	bne.n	800aa6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e099      	b.n	800ab9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aa6a:	4b4f      	ldr	r3, [pc, #316]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a4e      	ldr	r2, [pc, #312]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aa70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aa74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa76:	f7f9 fe6f 	bl	8004758 <HAL_GetTick>
 800aa7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa7c:	e008      	b.n	800aa90 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aa7e:	f7f9 fe6b 	bl	8004758 <HAL_GetTick>
 800aa82:	4602      	mov	r2, r0
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d901      	bls.n	800aa90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e086      	b.n	800ab9e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa90:	4b45      	ldr	r3, [pc, #276]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1f0      	bne.n	800aa7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aa9c:	4b42      	ldr	r3, [pc, #264]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aa9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	031b      	lsls	r3, r3, #12
 800aaaa:	493f      	ldr	r1, [pc, #252]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aaac:	4313      	orrs	r3, r2
 800aaae:	628b      	str	r3, [r1, #40]	; 0x28
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	3b01      	subs	r3, #1
 800aab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	3b01      	subs	r3, #1
 800aac0:	025b      	lsls	r3, r3, #9
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	431a      	orrs	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	041b      	lsls	r3, r3, #16
 800aace:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aad2:	431a      	orrs	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	3b01      	subs	r3, #1
 800aada:	061b      	lsls	r3, r3, #24
 800aadc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aae0:	4931      	ldr	r1, [pc, #196]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aae2:	4313      	orrs	r3, r2
 800aae4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aae6:	4b30      	ldr	r3, [pc, #192]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	492d      	ldr	r1, [pc, #180]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aaf8:	4b2b      	ldr	r3, [pc, #172]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	f023 0220 	bic.w	r2, r3, #32
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	4928      	ldr	r1, [pc, #160]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab06:	4313      	orrs	r3, r2
 800ab08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ab0a:	4b27      	ldr	r3, [pc, #156]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0e:	4a26      	ldr	r2, [pc, #152]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab10:	f023 0310 	bic.w	r3, r3, #16
 800ab14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ab16:	4b24      	ldr	r3, [pc, #144]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab1a:	4b24      	ldr	r3, [pc, #144]	; (800abac <RCCEx_PLL2_Config+0x160>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	69d2      	ldr	r2, [r2, #28]
 800ab22:	00d2      	lsls	r2, r2, #3
 800ab24:	4920      	ldr	r1, [pc, #128]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ab2a:	4b1f      	ldr	r3, [pc, #124]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2e:	4a1e      	ldr	r2, [pc, #120]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab30:	f043 0310 	orr.w	r3, r3, #16
 800ab34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d106      	bne.n	800ab4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ab3c:	4b1a      	ldr	r3, [pc, #104]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	4a19      	ldr	r2, [pc, #100]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab48:	e00f      	b.n	800ab6a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d106      	bne.n	800ab5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ab50:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab54:	4a14      	ldr	r2, [pc, #80]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab5c:	e005      	b.n	800ab6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ab5e:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab62:	4a11      	ldr	r2, [pc, #68]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ab6a:	4b0f      	ldr	r3, [pc, #60]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a0e      	ldr	r2, [pc, #56]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab76:	f7f9 fdef 	bl	8004758 <HAL_GetTick>
 800ab7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab7c:	e008      	b.n	800ab90 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ab7e:	f7f9 fdeb 	bl	8004758 <HAL_GetTick>
 800ab82:	4602      	mov	r2, r0
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d901      	bls.n	800ab90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e006      	b.n	800ab9e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab90:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0f0      	beq.n	800ab7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	58024400 	.word	0x58024400
 800abac:	ffff0007 	.word	0xffff0007

0800abb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800abbe:	4b53      	ldr	r3, [pc, #332]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800abc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc2:	f003 0303 	and.w	r3, r3, #3
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	d101      	bne.n	800abce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e099      	b.n	800ad02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800abce:	4b4f      	ldr	r3, [pc, #316]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a4e      	ldr	r2, [pc, #312]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800abd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abda:	f7f9 fdbd 	bl	8004758 <HAL_GetTick>
 800abde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800abe0:	e008      	b.n	800abf4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800abe2:	f7f9 fdb9 	bl	8004758 <HAL_GetTick>
 800abe6:	4602      	mov	r2, r0
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	2b02      	cmp	r3, #2
 800abee:	d901      	bls.n	800abf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e086      	b.n	800ad02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800abf4:	4b45      	ldr	r3, [pc, #276]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1f0      	bne.n	800abe2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ac00:	4b42      	ldr	r3, [pc, #264]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	051b      	lsls	r3, r3, #20
 800ac0e:	493f      	ldr	r1, [pc, #252]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac10:	4313      	orrs	r3, r2
 800ac12:	628b      	str	r3, [r1, #40]	; 0x28
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	3b01      	subs	r3, #1
 800ac24:	025b      	lsls	r3, r3, #9
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	041b      	lsls	r3, r3, #16
 800ac32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ac36:	431a      	orrs	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	061b      	lsls	r3, r3, #24
 800ac40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac44:	4931      	ldr	r1, [pc, #196]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac46:	4313      	orrs	r3, r2
 800ac48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ac4a:	4b30      	ldr	r3, [pc, #192]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	492d      	ldr	r1, [pc, #180]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ac5c:	4b2b      	ldr	r3, [pc, #172]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	4928      	ldr	r1, [pc, #160]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ac6e:	4b27      	ldr	r3, [pc, #156]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac72:	4a26      	ldr	r2, [pc, #152]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ac7a:	4b24      	ldr	r3, [pc, #144]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac7e:	4b24      	ldr	r3, [pc, #144]	; (800ad10 <RCCEx_PLL3_Config+0x160>)
 800ac80:	4013      	ands	r3, r2
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	69d2      	ldr	r2, [r2, #28]
 800ac86:	00d2      	lsls	r2, r2, #3
 800ac88:	4920      	ldr	r1, [pc, #128]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ac8e:	4b1f      	ldr	r3, [pc, #124]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac92:	4a1e      	ldr	r2, [pc, #120]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d106      	bne.n	800acae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aca0:	4b1a      	ldr	r3, [pc, #104]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800aca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca4:	4a19      	ldr	r2, [pc, #100]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800aca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800acaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800acac:	e00f      	b.n	800acce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d106      	bne.n	800acc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800acb4:	4b15      	ldr	r3, [pc, #84]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	4a14      	ldr	r2, [pc, #80]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800acbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800acc0:	e005      	b.n	800acce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800acc2:	4b12      	ldr	r3, [pc, #72]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc6:	4a11      	ldr	r2, [pc, #68]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800accc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800acce:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a0e      	ldr	r2, [pc, #56]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acda:	f7f9 fd3d 	bl	8004758 <HAL_GetTick>
 800acde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ace0:	e008      	b.n	800acf4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ace2:	f7f9 fd39 	bl	8004758 <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	2b02      	cmp	r3, #2
 800acee:	d901      	bls.n	800acf4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e006      	b.n	800ad02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0f0      	beq.n	800ace2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	58024400 	.word	0x58024400
 800ad10:	ffff0007 	.word	0xffff0007

0800ad14 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e0a8      	b.n	800ae78 <HAL_SMBUS_Init+0x164>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d106      	bne.n	800ad3c <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7f5 fffa 	bl	8000d30 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2202      	movs	r2, #2
 800ad40:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0201 	bic.w	r2, r2, #1
 800ad50:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	685a      	ldr	r2, [r3, #4]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ad5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	695a      	ldr	r2, [r3, #20]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad6e:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	695a      	ldr	r2, [r3, #20]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ad7e:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ad88:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	689a      	ldr	r2, [r3, #8]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad98:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d012      	beq.n	800adc8 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d107      	bne.n	800adba <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68da      	ldr	r2, [r3, #12]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adb6:	609a      	str	r2, [r3, #8]
 800adb8:	e006      	b.n	800adc8 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68da      	ldr	r2, [r3, #12]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800adc6:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d104      	bne.n	800adda <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800add8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6859      	ldr	r1, [r3, #4]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	4b26      	ldr	r3, [pc, #152]	; (800ae80 <HAL_SMBUS_Init+0x16c>)
 800ade6:	430b      	orrs	r3, r1
 800ade8:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	695a      	ldr	r2, [r3, #20]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	69db      	ldr	r3, [r3, #28]
 800adfa:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	430a      	orrs	r2, r1
 800ae02:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a1a      	ldr	r2, [r3, #32]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0c:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae12:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800ae24:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae26:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae30:	d110      	bne.n	800ae54 <HAL_SMBUS_Init+0x140>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d004      	beq.n	800ae44 <HAL_SMBUS_Init+0x130>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800ae3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae42:	d107      	bne.n	800ae54 <HAL_SMBUS_Init+0x140>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ae52:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f042 0201 	orr.w	r2, r2, #1
 800ae62:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	02008000 	.word	0x02008000

0800ae84 <HAL_SMBUS_ConfigDigitalFilter>:
  *                the configuration information for the specified SMBUS.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d137      	bne.n	800af06 <HAL_SMBUS_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d101      	bne.n	800aea4 <HAL_SMBUS_ConfigDigitalFilter+0x20>
 800aea0:	2302      	movs	r3, #2
 800aea2:	e031      	b.n	800af08 <HAL_SMBUS_ConfigDigitalFilter+0x84>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2202      	movs	r2, #2
 800aeb0:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the selected SMBUS peripheral */
    __HAL_SMBUS_DISABLE(hsmbus);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f022 0201 	bic.w	r2, r2, #1
 800aec0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hsmbus->Instance->CR1;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	60fb      	str	r3, [r7, #12]

    /* Reset I2C DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800aed0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	021b      	lsls	r3, r3, #8
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hsmbus->Instance->CR1 = tmpreg;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	601a      	str	r2, [r3, #0]

    __HAL_SMBUS_ENABLE(hsmbus);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f042 0201 	orr.w	r2, r2, #1
 800aef2:	601a      	str	r2, [r3, #0]

    hsmbus->State = HAL_SMBUS_STATE_READY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return HAL_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	e000      	b.n	800af08 <HAL_SMBUS_ConfigDigitalFilter+0x84>
  }
  else
  {
    return HAL_BUSY;
 800af06:	2302      	movs	r3, #2
  }
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3714      	adds	r7, #20
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e0f1      	b.n	800b10a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a78      	ldr	r2, [pc, #480]	; (800b114 <HAL_SPI_Init+0x200>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d00f      	beq.n	800af56 <HAL_SPI_Init+0x42>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a77      	ldr	r2, [pc, #476]	; (800b118 <HAL_SPI_Init+0x204>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d00a      	beq.n	800af56 <HAL_SPI_Init+0x42>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a75      	ldr	r2, [pc, #468]	; (800b11c <HAL_SPI_Init+0x208>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d005      	beq.n	800af56 <HAL_SPI_Init+0x42>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	2b0f      	cmp	r3, #15
 800af50:	d901      	bls.n	800af56 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e0d9      	b.n	800b10a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fc9c 	bl	800b894 <SPI_GetPacketSize>
 800af5c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a6c      	ldr	r2, [pc, #432]	; (800b114 <HAL_SPI_Init+0x200>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d00c      	beq.n	800af82 <HAL_SPI_Init+0x6e>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a6a      	ldr	r2, [pc, #424]	; (800b118 <HAL_SPI_Init+0x204>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d007      	beq.n	800af82 <HAL_SPI_Init+0x6e>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a69      	ldr	r2, [pc, #420]	; (800b11c <HAL_SPI_Init+0x208>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d002      	beq.n	800af82 <HAL_SPI_Init+0x6e>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b08      	cmp	r3, #8
 800af80:	d811      	bhi.n	800afa6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800af86:	4a63      	ldr	r2, [pc, #396]	; (800b114 <HAL_SPI_Init+0x200>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d009      	beq.n	800afa0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a61      	ldr	r2, [pc, #388]	; (800b118 <HAL_SPI_Init+0x204>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d004      	beq.n	800afa0 <HAL_SPI_Init+0x8c>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a60      	ldr	r2, [pc, #384]	; (800b11c <HAL_SPI_Init+0x208>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d104      	bne.n	800afaa <HAL_SPI_Init+0x96>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2b10      	cmp	r3, #16
 800afa4:	d901      	bls.n	800afaa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e0af      	b.n	800b10a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d106      	bne.n	800afc4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7f8 fcc0 	bl	8003944 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 0201 	bic.w	r2, r2, #1
 800afda:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800afe6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	699b      	ldr	r3, [r3, #24]
 800afec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aff0:	d119      	bne.n	800b026 <HAL_SPI_Init+0x112>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800affa:	d103      	bne.n	800b004 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b000:	2b00      	cmp	r3, #0
 800b002:	d008      	beq.n	800b016 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10c      	bne.n	800b026 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b014:	d107      	bne.n	800b026 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b024:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	69da      	ldr	r2, [r3, #28]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b02e:	431a      	orrs	r2, r3
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	431a      	orrs	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b038:	ea42 0103 	orr.w	r1, r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	68da      	ldr	r2, [r3, #12]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	430a      	orrs	r2, r1
 800b046:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b050:	431a      	orrs	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b056:	431a      	orrs	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	431a      	orrs	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	431a      	orrs	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	431a      	orrs	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	431a      	orrs	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	431a      	orrs	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b07a:	431a      	orrs	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	431a      	orrs	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b086:	ea42 0103 	orr.w	r1, r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d113      	bne.n	800b0c6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b0c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f022 0201 	bic.w	r2, r2, #1
 800b0d4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	40013000 	.word	0x40013000
 800b118:	40003800 	.word	0x40003800
 800b11c:	40003c00 	.word	0x40003c00

0800b120 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08e      	sub	sp, #56	; 0x38
 800b124:	af02      	add	r7, sp, #8
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	3320      	adds	r3, #32
 800b13a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3330      	adds	r3, #48	; 0x30
 800b142:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d101      	bne.n	800b152 <HAL_SPI_TransmitReceive+0x32>
 800b14e:	2302      	movs	r3, #2
 800b150:	e2ce      	b.n	800b6f0 <HAL_SPI_TransmitReceive+0x5d0>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b15a:	f7f9 fafd 	bl	8004758 <HAL_GetTick>
 800b15e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800b160:	887b      	ldrh	r3, [r7, #2]
 800b162:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800b164:	887b      	ldrh	r3, [r7, #2]
 800b166:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b16e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b176:	7efb      	ldrb	r3, [r7, #27]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d014      	beq.n	800b1a6 <HAL_SPI_TransmitReceive+0x86>
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b182:	d106      	bne.n	800b192 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d102      	bne.n	800b192 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b18c:	7efb      	ldrb	r3, [r7, #27]
 800b18e:	2b04      	cmp	r3, #4
 800b190:	d009      	beq.n	800b1a6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b192:	2302      	movs	r3, #2
 800b194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b1a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1a4:	e2a4      	b.n	800b6f0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d005      	beq.n	800b1b8 <HAL_SPI_TransmitReceive+0x98>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d002      	beq.n	800b1b8 <HAL_SPI_TransmitReceive+0x98>
 800b1b2:	887b      	ldrh	r3, [r7, #2]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d109      	bne.n	800b1cc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b1c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1ca:	e291      	b.n	800b6f0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b04      	cmp	r3, #4
 800b1d6:	d003      	beq.n	800b1e0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2205      	movs	r2, #5
 800b1dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	887a      	ldrh	r2, [r7, #2]
 800b1f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	887a      	ldrh	r2, [r7, #2]
 800b1fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	887a      	ldrh	r2, [r7, #2]
 800b208:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	887a      	ldrh	r2, [r7, #2]
 800b210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	4b81      	ldr	r3, [pc, #516]	; (800b42c <HAL_SPI_TransmitReceive+0x30c>)
 800b228:	4013      	ands	r3, r2
 800b22a:	8879      	ldrh	r1, [r7, #2]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	6812      	ldr	r2, [r2, #0]
 800b230:	430b      	orrs	r3, r1
 800b232:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f042 0201 	orr.w	r2, r2, #1
 800b242:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b24c:	d107      	bne.n	800b25e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b25c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	2b0f      	cmp	r3, #15
 800b264:	d970      	bls.n	800b348 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b266:	e068      	b.n	800b33a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	695b      	ldr	r3, [r3, #20]
 800b26e:	f003 0302 	and.w	r3, r3, #2
 800b272:	2b02      	cmp	r3, #2
 800b274:	d11a      	bne.n	800b2ac <HAL_SPI_TransmitReceive+0x18c>
 800b276:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d017      	beq.n	800b2ac <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6812      	ldr	r2, [r2, #0]
 800b286:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b28c:	1d1a      	adds	r2, r3, #4
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b298:	b29b      	uxth	r3, r3
 800b29a:	3b01      	subs	r3, #1
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	695a      	ldr	r2, [r3, #20]
 800b2b2:	f248 0308 	movw	r3, #32776	; 0x8008
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01a      	beq.n	800b2f2 <HAL_SPI_TransmitReceive+0x1d2>
 800b2bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d017      	beq.n	800b2f2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b2cc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2d2:	1d1a      	adds	r2, r3, #4
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b2f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2f2:	f7f9 fa31 	bl	8004758 <HAL_GetTick>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d803      	bhi.n	800b30a <HAL_SPI_TransmitReceive+0x1ea>
 800b302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b308:	d102      	bne.n	800b310 <HAL_SPI_TransmitReceive+0x1f0>
 800b30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d114      	bne.n	800b33a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f9f1 	bl	800b6f8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b324:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2201      	movs	r2, #1
 800b332:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b336:	2303      	movs	r3, #3
 800b338:	e1da      	b.n	800b6f0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b33a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d193      	bne.n	800b268 <HAL_SPI_TransmitReceive+0x148>
 800b340:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b342:	2b00      	cmp	r3, #0
 800b344:	d190      	bne.n	800b268 <HAL_SPI_TransmitReceive+0x148>
 800b346:	e1ac      	b.n	800b6a2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	2b07      	cmp	r3, #7
 800b34e:	f240 81a0 	bls.w	800b692 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b352:	e0a9      	b.n	800b4a8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	f003 0302 	and.w	r3, r3, #2
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d139      	bne.n	800b3d6 <HAL_SPI_TransmitReceive+0x2b6>
 800b362:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b364:	2b00      	cmp	r3, #0
 800b366:	d036      	beq.n	800b3d6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b368:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d91c      	bls.n	800b3a8 <HAL_SPI_TransmitReceive+0x288>
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b372:	2b00      	cmp	r3, #0
 800b374:	d018      	beq.n	800b3a8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	6812      	ldr	r2, [r2, #0]
 800b380:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b392:	b29b      	uxth	r3, r3
 800b394:	3b02      	subs	r3, #2
 800b396:	b29a      	uxth	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b3a6:	e016      	b.n	800b3d6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ac:	881a      	ldrh	r2, [r3, #0]
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3b6:	1c9a      	adds	r2, r3, #2
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d03d      	beq.n	800b460 <HAL_SPI_TransmitReceive+0x340>
 800b3e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d03a      	beq.n	800b460 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d01b      	beq.n	800b430 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b400:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b402:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b408:	1d1a      	adds	r2, r3, #4
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b414:	b29b      	uxth	r3, r3
 800b416:	3b02      	subs	r3, #2
 800b418:	b29a      	uxth	r2, r3
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b426:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b428:	e01a      	b.n	800b460 <HAL_SPI_TransmitReceive+0x340>
 800b42a:	bf00      	nop
 800b42c:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b434:	6a3a      	ldr	r2, [r7, #32]
 800b436:	8812      	ldrh	r2, [r2, #0]
 800b438:	b292      	uxth	r2, r2
 800b43a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b440:	1c9a      	adds	r2, r3, #2
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	3b01      	subs	r3, #1
 800b450:	b29a      	uxth	r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b45e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b460:	f7f9 f97a 	bl	8004758 <HAL_GetTick>
 800b464:	4602      	mov	r2, r0
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d803      	bhi.n	800b478 <HAL_SPI_TransmitReceive+0x358>
 800b470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b476:	d102      	bne.n	800b47e <HAL_SPI_TransmitReceive+0x35e>
 800b478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d114      	bne.n	800b4a8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 f93a 	bl	800b6f8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b492:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	e123      	b.n	800b6f0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b4a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f47f af52 	bne.w	800b354 <HAL_SPI_TransmitReceive+0x234>
 800b4b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f47f af4e 	bne.w	800b354 <HAL_SPI_TransmitReceive+0x234>
 800b4b8:	e0f3      	b.n	800b6a2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	695b      	ldr	r3, [r3, #20]
 800b4c0:	f003 0302 	and.w	r3, r3, #2
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d15a      	bne.n	800b57e <HAL_SPI_TransmitReceive+0x45e>
 800b4c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d057      	beq.n	800b57e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b4ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4d0:	2b03      	cmp	r3, #3
 800b4d2:	d91c      	bls.n	800b50e <HAL_SPI_TransmitReceive+0x3ee>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4d8:	2b40      	cmp	r3, #64	; 0x40
 800b4da:	d918      	bls.n	800b50e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6812      	ldr	r2, [r2, #0]
 800b4e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4ec:	1d1a      	adds	r2, r3, #4
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	3b04      	subs	r3, #4
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b50a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b50c:	e037      	b.n	800b57e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b50e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b510:	2b01      	cmp	r3, #1
 800b512:	d91b      	bls.n	800b54c <HAL_SPI_TransmitReceive+0x42c>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d017      	beq.n	800b54c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b520:	881a      	ldrh	r2, [r3, #0]
 800b522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b524:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b52a:	1c9a      	adds	r2, r3, #2
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b536:	b29b      	uxth	r3, r3
 800b538:	3b02      	subs	r3, #2
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b548:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b54a:	e018      	b.n	800b57e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3320      	adds	r3, #32
 800b556:	7812      	ldrb	r2, [r2, #0]
 800b558:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b55e:	1c5a      	adds	r2, r3, #1
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	3b01      	subs	r3, #1
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b57c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d05e      	beq.n	800b64a <HAL_SPI_TransmitReceive+0x52a>
 800b58c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d05b      	beq.n	800b64a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d018      	beq.n	800b5d2 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b5aa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5b0:	1d1a      	adds	r2, r3, #4
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	3b04      	subs	r3, #4
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b5d0:	e03b      	b.n	800b64a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b5dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5e0:	d918      	bls.n	800b614 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5e6:	6a3a      	ldr	r2, [r7, #32]
 800b5e8:	8812      	ldrh	r2, [r2, #0]
 800b5ea:	b292      	uxth	r2, r2
 800b5ec:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5f2:	1c9a      	adds	r2, r3, #2
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	3b02      	subs	r3, #2
 800b602:	b29a      	uxth	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b610:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b612:	e01a      	b.n	800b64a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b620:	7812      	ldrb	r2, [r2, #0]
 800b622:	b2d2      	uxtb	r2, r2
 800b624:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b636:	b29b      	uxth	r3, r3
 800b638:	3b01      	subs	r3, #1
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b648:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b64a:	f7f9 f885 	bl	8004758 <HAL_GetTick>
 800b64e:	4602      	mov	r2, r0
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b656:	429a      	cmp	r2, r3
 800b658:	d803      	bhi.n	800b662 <HAL_SPI_TransmitReceive+0x542>
 800b65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b660:	d102      	bne.n	800b668 <HAL_SPI_TransmitReceive+0x548>
 800b662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b664:	2b00      	cmp	r3, #0
 800b666:	d114      	bne.n	800b692 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 f845 	bl	800b6f8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b67c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2201      	movs	r2, #1
 800b68a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	e02e      	b.n	800b6f0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b692:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b694:	2b00      	cmp	r3, #0
 800b696:	f47f af10 	bne.w	800b4ba <HAL_SPI_TransmitReceive+0x39a>
 800b69a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f47f af0c 	bne.w	800b4ba <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2108      	movs	r1, #8
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 f8c3 	bl	800b838 <SPI_WaitOnFlagUntilTimeout>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d007      	beq.n	800b6c8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6be:	f043 0220 	orr.w	r2, r3, #32
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 f815 	bl	800b6f8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d001      	beq.n	800b6ec <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e001      	b.n	800b6f0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800b6ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3730      	adds	r7, #48	; 0x30
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	699a      	ldr	r2, [r3, #24]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f042 0208 	orr.w	r2, r2, #8
 800b716:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	699a      	ldr	r2, [r3, #24]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f042 0210 	orr.w	r2, r2, #16
 800b726:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f022 0201 	bic.w	r2, r2, #1
 800b736:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6919      	ldr	r1, [r3, #16]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	4b3c      	ldr	r3, [pc, #240]	; (800b834 <SPI_CloseTransfer+0x13c>)
 800b744:	400b      	ands	r3, r1
 800b746:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	689a      	ldr	r2, [r3, #8]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b756:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b04      	cmp	r3, #4
 800b762:	d014      	beq.n	800b78e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f003 0320 	and.w	r3, r3, #32
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00f      	beq.n	800b78e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b774:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	699a      	ldr	r2, [r3, #24]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f042 0220 	orr.w	r2, r2, #32
 800b78c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b03      	cmp	r3, #3
 800b798:	d014      	beq.n	800b7c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00f      	beq.n	800b7c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7aa:	f043 0204 	orr.w	r2, r3, #4
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	699a      	ldr	r2, [r3, #24]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00f      	beq.n	800b7ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7d4:	f043 0201 	orr.w	r2, r3, #1
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	699a      	ldr	r2, [r3, #24]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00f      	beq.n	800b818 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7fe:	f043 0208 	orr.w	r2, r3, #8
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	699a      	ldr	r2, [r3, #24]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b816:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b828:	bf00      	nop
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	fffffc90 	.word	0xfffffc90

0800b838 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	603b      	str	r3, [r7, #0]
 800b844:	4613      	mov	r3, r2
 800b846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b848:	e010      	b.n	800b86c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b84a:	f7f8 ff85 	bl	8004758 <HAL_GetTick>
 800b84e:	4602      	mov	r2, r0
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	69ba      	ldr	r2, [r7, #24]
 800b856:	429a      	cmp	r2, r3
 800b858:	d803      	bhi.n	800b862 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b860:	d102      	bne.n	800b868 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b868:	2303      	movs	r3, #3
 800b86a:	e00f      	b.n	800b88c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	695a      	ldr	r2, [r3, #20]
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	4013      	ands	r3, r2
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	429a      	cmp	r2, r3
 800b87a:	bf0c      	ite	eq
 800b87c:	2301      	moveq	r3, #1
 800b87e:	2300      	movne	r3, #0
 800b880:	b2db      	uxtb	r3, r3
 800b882:	461a      	mov	r2, r3
 800b884:	79fb      	ldrb	r3, [r7, #7]
 800b886:	429a      	cmp	r2, r3
 800b888:	d0df      	beq.n	800b84a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a0:	095b      	lsrs	r3, r3, #5
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	3307      	adds	r3, #7
 800b8b2:	08db      	lsrs	r3, r3, #3
 800b8b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3714      	adds	r7, #20
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e049      	b.n	800b970 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d106      	bne.n	800b8f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f841 	bl	800b978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2202      	movs	r2, #2
 800b8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3304      	adds	r3, #4
 800b906:	4619      	mov	r1, r3
 800b908:	4610      	mov	r0, r2
 800b90a:	f000 fd5b 	bl	800c3c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d001      	beq.n	800b9a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e054      	b.n	800ba4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68da      	ldr	r2, [r3, #12]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f042 0201 	orr.w	r2, r2, #1
 800b9ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a26      	ldr	r2, [pc, #152]	; (800ba5c <HAL_TIM_Base_Start_IT+0xd0>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d022      	beq.n	800ba0c <HAL_TIM_Base_Start_IT+0x80>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ce:	d01d      	beq.n	800ba0c <HAL_TIM_Base_Start_IT+0x80>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a22      	ldr	r2, [pc, #136]	; (800ba60 <HAL_TIM_Base_Start_IT+0xd4>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d018      	beq.n	800ba0c <HAL_TIM_Base_Start_IT+0x80>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a21      	ldr	r2, [pc, #132]	; (800ba64 <HAL_TIM_Base_Start_IT+0xd8>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d013      	beq.n	800ba0c <HAL_TIM_Base_Start_IT+0x80>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a1f      	ldr	r2, [pc, #124]	; (800ba68 <HAL_TIM_Base_Start_IT+0xdc>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d00e      	beq.n	800ba0c <HAL_TIM_Base_Start_IT+0x80>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a1e      	ldr	r2, [pc, #120]	; (800ba6c <HAL_TIM_Base_Start_IT+0xe0>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d009      	beq.n	800ba0c <HAL_TIM_Base_Start_IT+0x80>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a1c      	ldr	r2, [pc, #112]	; (800ba70 <HAL_TIM_Base_Start_IT+0xe4>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d004      	beq.n	800ba0c <HAL_TIM_Base_Start_IT+0x80>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a1b      	ldr	r2, [pc, #108]	; (800ba74 <HAL_TIM_Base_Start_IT+0xe8>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d115      	bne.n	800ba38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	689a      	ldr	r2, [r3, #8]
 800ba12:	4b19      	ldr	r3, [pc, #100]	; (800ba78 <HAL_TIM_Base_Start_IT+0xec>)
 800ba14:	4013      	ands	r3, r2
 800ba16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b06      	cmp	r3, #6
 800ba1c:	d015      	beq.n	800ba4a <HAL_TIM_Base_Start_IT+0xbe>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba24:	d011      	beq.n	800ba4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f042 0201 	orr.w	r2, r2, #1
 800ba34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba36:	e008      	b.n	800ba4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f042 0201 	orr.w	r2, r2, #1
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	e000      	b.n	800ba4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	40010000 	.word	0x40010000
 800ba60:	40000400 	.word	0x40000400
 800ba64:	40000800 	.word	0x40000800
 800ba68:	40000c00 	.word	0x40000c00
 800ba6c:	40010400 	.word	0x40010400
 800ba70:	40001800 	.word	0x40001800
 800ba74:	40014000 	.word	0x40014000
 800ba78:	00010007 	.word	0x00010007

0800ba7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d101      	bne.n	800ba8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e049      	b.n	800bb22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d106      	bne.n	800baa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7f8 fa1a 	bl	8003edc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2202      	movs	r2, #2
 800baac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	3304      	adds	r3, #4
 800bab8:	4619      	mov	r1, r3
 800baba:	4610      	mov	r0, r2
 800babc:	f000 fc82 	bl	800c3c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2201      	movs	r2, #1
 800bae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
	...

0800bb2c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	6839      	ldr	r1, [r7, #0]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f000 ffb0 	bl	800caa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a3e      	ldr	r2, [pc, #248]	; (800bc44 <HAL_TIM_PWM_Stop+0x118>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d013      	beq.n	800bb76 <HAL_TIM_PWM_Stop+0x4a>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a3d      	ldr	r2, [pc, #244]	; (800bc48 <HAL_TIM_PWM_Stop+0x11c>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d00e      	beq.n	800bb76 <HAL_TIM_PWM_Stop+0x4a>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a3b      	ldr	r2, [pc, #236]	; (800bc4c <HAL_TIM_PWM_Stop+0x120>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d009      	beq.n	800bb76 <HAL_TIM_PWM_Stop+0x4a>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a3a      	ldr	r2, [pc, #232]	; (800bc50 <HAL_TIM_PWM_Stop+0x124>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d004      	beq.n	800bb76 <HAL_TIM_PWM_Stop+0x4a>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a38      	ldr	r2, [pc, #224]	; (800bc54 <HAL_TIM_PWM_Stop+0x128>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d101      	bne.n	800bb7a <HAL_TIM_PWM_Stop+0x4e>
 800bb76:	2301      	movs	r3, #1
 800bb78:	e000      	b.n	800bb7c <HAL_TIM_PWM_Stop+0x50>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d017      	beq.n	800bbb0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6a1a      	ldr	r2, [r3, #32]
 800bb86:	f241 1311 	movw	r3, #4369	; 0x1111
 800bb8a:	4013      	ands	r3, r2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10f      	bne.n	800bbb0 <HAL_TIM_PWM_Stop+0x84>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6a1a      	ldr	r2, [r3, #32]
 800bb96:	f240 4344 	movw	r3, #1092	; 0x444
 800bb9a:	4013      	ands	r3, r2
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d107      	bne.n	800bbb0 <HAL_TIM_PWM_Stop+0x84>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bbae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6a1a      	ldr	r2, [r3, #32]
 800bbb6:	f241 1311 	movw	r3, #4369	; 0x1111
 800bbba:	4013      	ands	r3, r2
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10f      	bne.n	800bbe0 <HAL_TIM_PWM_Stop+0xb4>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6a1a      	ldr	r2, [r3, #32]
 800bbc6:	f240 4344 	movw	r3, #1092	; 0x444
 800bbca:	4013      	ands	r3, r2
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d107      	bne.n	800bbe0 <HAL_TIM_PWM_Stop+0xb4>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f022 0201 	bic.w	r2, r2, #1
 800bbde:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d104      	bne.n	800bbf0 <HAL_TIM_PWM_Stop+0xc4>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbee:	e023      	b.n	800bc38 <HAL_TIM_PWM_Stop+0x10c>
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	2b04      	cmp	r3, #4
 800bbf4:	d104      	bne.n	800bc00 <HAL_TIM_PWM_Stop+0xd4>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbfe:	e01b      	b.n	800bc38 <HAL_TIM_PWM_Stop+0x10c>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b08      	cmp	r3, #8
 800bc04:	d104      	bne.n	800bc10 <HAL_TIM_PWM_Stop+0xe4>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc0e:	e013      	b.n	800bc38 <HAL_TIM_PWM_Stop+0x10c>
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	2b0c      	cmp	r3, #12
 800bc14:	d104      	bne.n	800bc20 <HAL_TIM_PWM_Stop+0xf4>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc1e:	e00b      	b.n	800bc38 <HAL_TIM_PWM_Stop+0x10c>
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2b10      	cmp	r3, #16
 800bc24:	d104      	bne.n	800bc30 <HAL_TIM_PWM_Stop+0x104>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc2e:	e003      	b.n	800bc38 <HAL_TIM_PWM_Stop+0x10c>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	40010000 	.word	0x40010000
 800bc48:	40010400 	.word	0x40010400
 800bc4c:	40014000 	.word	0x40014000
 800bc50:	40014400 	.word	0x40014400
 800bc54:	40014800 	.word	0x40014800

0800bc58 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d109      	bne.n	800bc80 <HAL_TIM_PWM_Start_IT+0x28>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	bf14      	ite	ne
 800bc78:	2301      	movne	r3, #1
 800bc7a:	2300      	moveq	r3, #0
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	e03c      	b.n	800bcfa <HAL_TIM_PWM_Start_IT+0xa2>
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2b04      	cmp	r3, #4
 800bc84:	d109      	bne.n	800bc9a <HAL_TIM_PWM_Start_IT+0x42>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	bf14      	ite	ne
 800bc92:	2301      	movne	r3, #1
 800bc94:	2300      	moveq	r3, #0
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	e02f      	b.n	800bcfa <HAL_TIM_PWM_Start_IT+0xa2>
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2b08      	cmp	r3, #8
 800bc9e:	d109      	bne.n	800bcb4 <HAL_TIM_PWM_Start_IT+0x5c>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	bf14      	ite	ne
 800bcac:	2301      	movne	r3, #1
 800bcae:	2300      	moveq	r3, #0
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	e022      	b.n	800bcfa <HAL_TIM_PWM_Start_IT+0xa2>
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	2b0c      	cmp	r3, #12
 800bcb8:	d109      	bne.n	800bcce <HAL_TIM_PWM_Start_IT+0x76>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	bf14      	ite	ne
 800bcc6:	2301      	movne	r3, #1
 800bcc8:	2300      	moveq	r3, #0
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	e015      	b.n	800bcfa <HAL_TIM_PWM_Start_IT+0xa2>
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	2b10      	cmp	r3, #16
 800bcd2:	d109      	bne.n	800bce8 <HAL_TIM_PWM_Start_IT+0x90>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	bf14      	ite	ne
 800bce0:	2301      	movne	r3, #1
 800bce2:	2300      	moveq	r3, #0
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	e008      	b.n	800bcfa <HAL_TIM_PWM_Start_IT+0xa2>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	bf14      	ite	ne
 800bcf4:	2301      	movne	r3, #1
 800bcf6:	2300      	moveq	r3, #0
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e0ec      	b.n	800bedc <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d104      	bne.n	800bd12 <HAL_TIM_PWM_Start_IT+0xba>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2202      	movs	r2, #2
 800bd0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd10:	e023      	b.n	800bd5a <HAL_TIM_PWM_Start_IT+0x102>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2b04      	cmp	r3, #4
 800bd16:	d104      	bne.n	800bd22 <HAL_TIM_PWM_Start_IT+0xca>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2202      	movs	r2, #2
 800bd1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd20:	e01b      	b.n	800bd5a <HAL_TIM_PWM_Start_IT+0x102>
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	2b08      	cmp	r3, #8
 800bd26:	d104      	bne.n	800bd32 <HAL_TIM_PWM_Start_IT+0xda>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd30:	e013      	b.n	800bd5a <HAL_TIM_PWM_Start_IT+0x102>
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2b0c      	cmp	r3, #12
 800bd36:	d104      	bne.n	800bd42 <HAL_TIM_PWM_Start_IT+0xea>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2202      	movs	r2, #2
 800bd3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd40:	e00b      	b.n	800bd5a <HAL_TIM_PWM_Start_IT+0x102>
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b10      	cmp	r3, #16
 800bd46:	d104      	bne.n	800bd52 <HAL_TIM_PWM_Start_IT+0xfa>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd50:	e003      	b.n	800bd5a <HAL_TIM_PWM_Start_IT+0x102>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2202      	movs	r2, #2
 800bd56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	2b0c      	cmp	r3, #12
 800bd5e:	d841      	bhi.n	800bde4 <HAL_TIM_PWM_Start_IT+0x18c>
 800bd60:	a201      	add	r2, pc, #4	; (adr r2, 800bd68 <HAL_TIM_PWM_Start_IT+0x110>)
 800bd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd66:	bf00      	nop
 800bd68:	0800bd9d 	.word	0x0800bd9d
 800bd6c:	0800bde5 	.word	0x0800bde5
 800bd70:	0800bde5 	.word	0x0800bde5
 800bd74:	0800bde5 	.word	0x0800bde5
 800bd78:	0800bdaf 	.word	0x0800bdaf
 800bd7c:	0800bde5 	.word	0x0800bde5
 800bd80:	0800bde5 	.word	0x0800bde5
 800bd84:	0800bde5 	.word	0x0800bde5
 800bd88:	0800bdc1 	.word	0x0800bdc1
 800bd8c:	0800bde5 	.word	0x0800bde5
 800bd90:	0800bde5 	.word	0x0800bde5
 800bd94:	0800bde5 	.word	0x0800bde5
 800bd98:	0800bdd3 	.word	0x0800bdd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68da      	ldr	r2, [r3, #12]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f042 0202 	orr.w	r2, r2, #2
 800bdaa:	60da      	str	r2, [r3, #12]
      break;
 800bdac:	e01d      	b.n	800bdea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	68da      	ldr	r2, [r3, #12]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f042 0204 	orr.w	r2, r2, #4
 800bdbc:	60da      	str	r2, [r3, #12]
      break;
 800bdbe:	e014      	b.n	800bdea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68da      	ldr	r2, [r3, #12]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f042 0208 	orr.w	r2, r2, #8
 800bdce:	60da      	str	r2, [r3, #12]
      break;
 800bdd0:	e00b      	b.n	800bdea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	68da      	ldr	r2, [r3, #12]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f042 0210 	orr.w	r2, r2, #16
 800bde0:	60da      	str	r2, [r3, #12]
      break;
 800bde2:	e002      	b.n	800bdea <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	73fb      	strb	r3, [r7, #15]
      break;
 800bde8:	bf00      	nop
  }

  if (status == HAL_OK)
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d174      	bne.n	800beda <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	6839      	ldr	r1, [r7, #0]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f000 fe53 	bl	800caa4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a38      	ldr	r2, [pc, #224]	; (800bee4 <HAL_TIM_PWM_Start_IT+0x28c>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d013      	beq.n	800be30 <HAL_TIM_PWM_Start_IT+0x1d8>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a36      	ldr	r2, [pc, #216]	; (800bee8 <HAL_TIM_PWM_Start_IT+0x290>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d00e      	beq.n	800be30 <HAL_TIM_PWM_Start_IT+0x1d8>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a35      	ldr	r2, [pc, #212]	; (800beec <HAL_TIM_PWM_Start_IT+0x294>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d009      	beq.n	800be30 <HAL_TIM_PWM_Start_IT+0x1d8>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a33      	ldr	r2, [pc, #204]	; (800bef0 <HAL_TIM_PWM_Start_IT+0x298>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d004      	beq.n	800be30 <HAL_TIM_PWM_Start_IT+0x1d8>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a32      	ldr	r2, [pc, #200]	; (800bef4 <HAL_TIM_PWM_Start_IT+0x29c>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d101      	bne.n	800be34 <HAL_TIM_PWM_Start_IT+0x1dc>
 800be30:	2301      	movs	r3, #1
 800be32:	e000      	b.n	800be36 <HAL_TIM_PWM_Start_IT+0x1de>
 800be34:	2300      	movs	r3, #0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d007      	beq.n	800be4a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a25      	ldr	r2, [pc, #148]	; (800bee4 <HAL_TIM_PWM_Start_IT+0x28c>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d022      	beq.n	800be9a <HAL_TIM_PWM_Start_IT+0x242>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be5c:	d01d      	beq.n	800be9a <HAL_TIM_PWM_Start_IT+0x242>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a25      	ldr	r2, [pc, #148]	; (800bef8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d018      	beq.n	800be9a <HAL_TIM_PWM_Start_IT+0x242>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a23      	ldr	r2, [pc, #140]	; (800befc <HAL_TIM_PWM_Start_IT+0x2a4>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d013      	beq.n	800be9a <HAL_TIM_PWM_Start_IT+0x242>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a22      	ldr	r2, [pc, #136]	; (800bf00 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d00e      	beq.n	800be9a <HAL_TIM_PWM_Start_IT+0x242>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a19      	ldr	r2, [pc, #100]	; (800bee8 <HAL_TIM_PWM_Start_IT+0x290>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d009      	beq.n	800be9a <HAL_TIM_PWM_Start_IT+0x242>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a1e      	ldr	r2, [pc, #120]	; (800bf04 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d004      	beq.n	800be9a <HAL_TIM_PWM_Start_IT+0x242>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a15      	ldr	r2, [pc, #84]	; (800beec <HAL_TIM_PWM_Start_IT+0x294>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d115      	bne.n	800bec6 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	689a      	ldr	r2, [r3, #8]
 800bea0:	4b19      	ldr	r3, [pc, #100]	; (800bf08 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800bea2:	4013      	ands	r3, r2
 800bea4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2b06      	cmp	r3, #6
 800beaa:	d015      	beq.n	800bed8 <HAL_TIM_PWM_Start_IT+0x280>
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beb2:	d011      	beq.n	800bed8 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f042 0201 	orr.w	r2, r2, #1
 800bec2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bec4:	e008      	b.n	800bed8 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f042 0201 	orr.w	r2, r2, #1
 800bed4:	601a      	str	r2, [r3, #0]
 800bed6:	e000      	b.n	800beda <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bed8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800beda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	40010000 	.word	0x40010000
 800bee8:	40010400 	.word	0x40010400
 800beec:	40014000 	.word	0x40014000
 800bef0:	40014400 	.word	0x40014400
 800bef4:	40014800 	.word	0x40014800
 800bef8:	40000400 	.word	0x40000400
 800befc:	40000800 	.word	0x40000800
 800bf00:	40000c00 	.word	0x40000c00
 800bf04:	40001800 	.word	0x40001800
 800bf08:	00010007 	.word	0x00010007

0800bf0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	f003 0302 	and.w	r3, r3, #2
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d122      	bne.n	800bf68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d11b      	bne.n	800bf68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f06f 0202 	mvn.w	r2, #2
 800bf38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	f003 0303 	and.w	r3, r3, #3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d003      	beq.n	800bf56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fa1a 	bl	800c388 <HAL_TIM_IC_CaptureCallback>
 800bf54:	e005      	b.n	800bf62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fa0c 	bl	800c374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fa1d 	bl	800c39c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	f003 0304 	and.w	r3, r3, #4
 800bf72:	2b04      	cmp	r3, #4
 800bf74:	d122      	bne.n	800bfbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	f003 0304 	and.w	r3, r3, #4
 800bf80:	2b04      	cmp	r3, #4
 800bf82:	d11b      	bne.n	800bfbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f06f 0204 	mvn.w	r2, #4
 800bf8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2202      	movs	r2, #2
 800bf92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d003      	beq.n	800bfaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f9f0 	bl	800c388 <HAL_TIM_IC_CaptureCallback>
 800bfa8:	e005      	b.n	800bfb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f9e2 	bl	800c374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 f9f3 	bl	800c39c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	f003 0308 	and.w	r3, r3, #8
 800bfc6:	2b08      	cmp	r3, #8
 800bfc8:	d122      	bne.n	800c010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f003 0308 	and.w	r3, r3, #8
 800bfd4:	2b08      	cmp	r3, #8
 800bfd6:	d11b      	bne.n	800c010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f06f 0208 	mvn.w	r2, #8
 800bfe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2204      	movs	r2, #4
 800bfe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	f003 0303 	and.w	r3, r3, #3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f9c6 	bl	800c388 <HAL_TIM_IC_CaptureCallback>
 800bffc:	e005      	b.n	800c00a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f9b8 	bl	800c374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f9c9 	bl	800c39c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	f003 0310 	and.w	r3, r3, #16
 800c01a:	2b10      	cmp	r3, #16
 800c01c:	d122      	bne.n	800c064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	f003 0310 	and.w	r3, r3, #16
 800c028:	2b10      	cmp	r3, #16
 800c02a:	d11b      	bne.n	800c064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f06f 0210 	mvn.w	r2, #16
 800c034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2208      	movs	r2, #8
 800c03a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	69db      	ldr	r3, [r3, #28]
 800c042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c046:	2b00      	cmp	r3, #0
 800c048:	d003      	beq.n	800c052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f99c 	bl	800c388 <HAL_TIM_IC_CaptureCallback>
 800c050:	e005      	b.n	800c05e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f98e 	bl	800c374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f99f 	bl	800c39c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d10e      	bne.n	800c090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d107      	bne.n	800c090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f06f 0201 	mvn.w	r2, #1
 800c088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7f7 fb1e 	bl	80036cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c09a:	2b80      	cmp	r3, #128	; 0x80
 800c09c:	d10e      	bne.n	800c0bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0a8:	2b80      	cmp	r3, #128	; 0x80
 800c0aa:	d107      	bne.n	800c0bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c0b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fdb2 	bl	800cc20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0ca:	d10e      	bne.n	800c0ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0d6:	2b80      	cmp	r3, #128	; 0x80
 800c0d8:	d107      	bne.n	800c0ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c0e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fda5 	bl	800cc34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f4:	2b40      	cmp	r3, #64	; 0x40
 800c0f6:	d10e      	bne.n	800c116 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c102:	2b40      	cmp	r3, #64	; 0x40
 800c104:	d107      	bne.n	800c116 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c10e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f94d 	bl	800c3b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	f003 0320 	and.w	r3, r3, #32
 800c120:	2b20      	cmp	r3, #32
 800c122:	d10e      	bne.n	800c142 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	f003 0320 	and.w	r3, r3, #32
 800c12e:	2b20      	cmp	r3, #32
 800c130:	d107      	bne.n	800c142 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f06f 0220 	mvn.w	r2, #32
 800c13a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fd65 	bl	800cc0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c142:	bf00      	nop
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
	...

0800c14c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c162:	2b01      	cmp	r3, #1
 800c164:	d101      	bne.n	800c16a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c166:	2302      	movs	r3, #2
 800c168:	e0ff      	b.n	800c36a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b14      	cmp	r3, #20
 800c176:	f200 80f0 	bhi.w	800c35a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c17a:	a201      	add	r2, pc, #4	; (adr r2, 800c180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c1d5 	.word	0x0800c1d5
 800c184:	0800c35b 	.word	0x0800c35b
 800c188:	0800c35b 	.word	0x0800c35b
 800c18c:	0800c35b 	.word	0x0800c35b
 800c190:	0800c215 	.word	0x0800c215
 800c194:	0800c35b 	.word	0x0800c35b
 800c198:	0800c35b 	.word	0x0800c35b
 800c19c:	0800c35b 	.word	0x0800c35b
 800c1a0:	0800c257 	.word	0x0800c257
 800c1a4:	0800c35b 	.word	0x0800c35b
 800c1a8:	0800c35b 	.word	0x0800c35b
 800c1ac:	0800c35b 	.word	0x0800c35b
 800c1b0:	0800c297 	.word	0x0800c297
 800c1b4:	0800c35b 	.word	0x0800c35b
 800c1b8:	0800c35b 	.word	0x0800c35b
 800c1bc:	0800c35b 	.word	0x0800c35b
 800c1c0:	0800c2d9 	.word	0x0800c2d9
 800c1c4:	0800c35b 	.word	0x0800c35b
 800c1c8:	0800c35b 	.word	0x0800c35b
 800c1cc:	0800c35b 	.word	0x0800c35b
 800c1d0:	0800c319 	.word	0x0800c319
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	68b9      	ldr	r1, [r7, #8]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 f98c 	bl	800c4f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	699a      	ldr	r2, [r3, #24]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f042 0208 	orr.w	r2, r2, #8
 800c1ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	699a      	ldr	r2, [r3, #24]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f022 0204 	bic.w	r2, r2, #4
 800c1fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6999      	ldr	r1, [r3, #24]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	691a      	ldr	r2, [r3, #16]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	430a      	orrs	r2, r1
 800c210:	619a      	str	r2, [r3, #24]
      break;
 800c212:	e0a5      	b.n	800c360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68b9      	ldr	r1, [r7, #8]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 f9fc 	bl	800c618 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	699a      	ldr	r2, [r3, #24]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c22e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	699a      	ldr	r2, [r3, #24]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c23e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6999      	ldr	r1, [r3, #24]
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	021a      	lsls	r2, r3, #8
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	430a      	orrs	r2, r1
 800c252:	619a      	str	r2, [r3, #24]
      break;
 800c254:	e084      	b.n	800c360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68b9      	ldr	r1, [r7, #8]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 fa65 	bl	800c72c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	69da      	ldr	r2, [r3, #28]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f042 0208 	orr.w	r2, r2, #8
 800c270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	69da      	ldr	r2, [r3, #28]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f022 0204 	bic.w	r2, r2, #4
 800c280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	69d9      	ldr	r1, [r3, #28]
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	691a      	ldr	r2, [r3, #16]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	430a      	orrs	r2, r1
 800c292:	61da      	str	r2, [r3, #28]
      break;
 800c294:	e064      	b.n	800c360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68b9      	ldr	r1, [r7, #8]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 facd 	bl	800c83c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	69da      	ldr	r2, [r3, #28]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	69da      	ldr	r2, [r3, #28]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	69d9      	ldr	r1, [r3, #28]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	021a      	lsls	r2, r3, #8
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	430a      	orrs	r2, r1
 800c2d4:	61da      	str	r2, [r3, #28]
      break;
 800c2d6:	e043      	b.n	800c360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68b9      	ldr	r1, [r7, #8]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 fb16 	bl	800c910 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f042 0208 	orr.w	r2, r2, #8
 800c2f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f022 0204 	bic.w	r2, r2, #4
 800c302:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	691a      	ldr	r2, [r3, #16]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	430a      	orrs	r2, r1
 800c314:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c316:	e023      	b.n	800c360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68b9      	ldr	r1, [r7, #8]
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 fb5a 	bl	800c9d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c332:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c342:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	021a      	lsls	r2, r3, #8
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	430a      	orrs	r2, r1
 800c356:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c358:	e002      	b.n	800c360 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	75fb      	strb	r3, [r7, #23]
      break;
 800c35e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c368:	7dfb      	ldrb	r3, [r7, #23]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3718      	adds	r7, #24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop

0800c374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3a4:	bf00      	nop
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3b8:	bf00      	nop
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a40      	ldr	r2, [pc, #256]	; (800c4d8 <TIM_Base_SetConfig+0x114>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d013      	beq.n	800c404 <TIM_Base_SetConfig+0x40>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3e2:	d00f      	beq.n	800c404 <TIM_Base_SetConfig+0x40>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a3d      	ldr	r2, [pc, #244]	; (800c4dc <TIM_Base_SetConfig+0x118>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d00b      	beq.n	800c404 <TIM_Base_SetConfig+0x40>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a3c      	ldr	r2, [pc, #240]	; (800c4e0 <TIM_Base_SetConfig+0x11c>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d007      	beq.n	800c404 <TIM_Base_SetConfig+0x40>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a3b      	ldr	r2, [pc, #236]	; (800c4e4 <TIM_Base_SetConfig+0x120>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d003      	beq.n	800c404 <TIM_Base_SetConfig+0x40>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4a3a      	ldr	r2, [pc, #232]	; (800c4e8 <TIM_Base_SetConfig+0x124>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d108      	bne.n	800c416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c40a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	4313      	orrs	r3, r2
 800c414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4a2f      	ldr	r2, [pc, #188]	; (800c4d8 <TIM_Base_SetConfig+0x114>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d01f      	beq.n	800c45e <TIM_Base_SetConfig+0x9a>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c424:	d01b      	beq.n	800c45e <TIM_Base_SetConfig+0x9a>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4a2c      	ldr	r2, [pc, #176]	; (800c4dc <TIM_Base_SetConfig+0x118>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d017      	beq.n	800c45e <TIM_Base_SetConfig+0x9a>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a2b      	ldr	r2, [pc, #172]	; (800c4e0 <TIM_Base_SetConfig+0x11c>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d013      	beq.n	800c45e <TIM_Base_SetConfig+0x9a>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a2a      	ldr	r2, [pc, #168]	; (800c4e4 <TIM_Base_SetConfig+0x120>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d00f      	beq.n	800c45e <TIM_Base_SetConfig+0x9a>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4a29      	ldr	r2, [pc, #164]	; (800c4e8 <TIM_Base_SetConfig+0x124>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d00b      	beq.n	800c45e <TIM_Base_SetConfig+0x9a>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4a28      	ldr	r2, [pc, #160]	; (800c4ec <TIM_Base_SetConfig+0x128>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d007      	beq.n	800c45e <TIM_Base_SetConfig+0x9a>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a27      	ldr	r2, [pc, #156]	; (800c4f0 <TIM_Base_SetConfig+0x12c>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d003      	beq.n	800c45e <TIM_Base_SetConfig+0x9a>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a26      	ldr	r2, [pc, #152]	; (800c4f4 <TIM_Base_SetConfig+0x130>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d108      	bne.n	800c470 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	689a      	ldr	r2, [r3, #8]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a10      	ldr	r2, [pc, #64]	; (800c4d8 <TIM_Base_SetConfig+0x114>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d00f      	beq.n	800c4bc <TIM_Base_SetConfig+0xf8>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a12      	ldr	r2, [pc, #72]	; (800c4e8 <TIM_Base_SetConfig+0x124>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d00b      	beq.n	800c4bc <TIM_Base_SetConfig+0xf8>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a11      	ldr	r2, [pc, #68]	; (800c4ec <TIM_Base_SetConfig+0x128>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d007      	beq.n	800c4bc <TIM_Base_SetConfig+0xf8>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a10      	ldr	r2, [pc, #64]	; (800c4f0 <TIM_Base_SetConfig+0x12c>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d003      	beq.n	800c4bc <TIM_Base_SetConfig+0xf8>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a0f      	ldr	r2, [pc, #60]	; (800c4f4 <TIM_Base_SetConfig+0x130>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d103      	bne.n	800c4c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	691a      	ldr	r2, [r3, #16]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	615a      	str	r2, [r3, #20]
}
 800c4ca:	bf00      	nop
 800c4cc:	3714      	adds	r7, #20
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	40010000 	.word	0x40010000
 800c4dc:	40000400 	.word	0x40000400
 800c4e0:	40000800 	.word	0x40000800
 800c4e4:	40000c00 	.word	0x40000c00
 800c4e8:	40010400 	.word	0x40010400
 800c4ec:	40014000 	.word	0x40014000
 800c4f0:	40014400 	.word	0x40014400
 800c4f4:	40014800 	.word	0x40014800

0800c4f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b087      	sub	sp, #28
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a1b      	ldr	r3, [r3, #32]
 800c506:	f023 0201 	bic.w	r2, r3, #1
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	699b      	ldr	r3, [r3, #24]
 800c51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	4b37      	ldr	r3, [pc, #220]	; (800c600 <TIM_OC1_SetConfig+0x108>)
 800c524:	4013      	ands	r3, r2
 800c526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f023 0303 	bic.w	r3, r3, #3
 800c52e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	4313      	orrs	r3, r2
 800c538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	f023 0302 	bic.w	r3, r3, #2
 800c540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	4313      	orrs	r3, r2
 800c54a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a2d      	ldr	r2, [pc, #180]	; (800c604 <TIM_OC1_SetConfig+0x10c>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d00f      	beq.n	800c574 <TIM_OC1_SetConfig+0x7c>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a2c      	ldr	r2, [pc, #176]	; (800c608 <TIM_OC1_SetConfig+0x110>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d00b      	beq.n	800c574 <TIM_OC1_SetConfig+0x7c>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4a2b      	ldr	r2, [pc, #172]	; (800c60c <TIM_OC1_SetConfig+0x114>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d007      	beq.n	800c574 <TIM_OC1_SetConfig+0x7c>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a2a      	ldr	r2, [pc, #168]	; (800c610 <TIM_OC1_SetConfig+0x118>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d003      	beq.n	800c574 <TIM_OC1_SetConfig+0x7c>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a29      	ldr	r2, [pc, #164]	; (800c614 <TIM_OC1_SetConfig+0x11c>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d10c      	bne.n	800c58e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f023 0308 	bic.w	r3, r3, #8
 800c57a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	4313      	orrs	r3, r2
 800c584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	f023 0304 	bic.w	r3, r3, #4
 800c58c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a1c      	ldr	r2, [pc, #112]	; (800c604 <TIM_OC1_SetConfig+0x10c>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d00f      	beq.n	800c5b6 <TIM_OC1_SetConfig+0xbe>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a1b      	ldr	r2, [pc, #108]	; (800c608 <TIM_OC1_SetConfig+0x110>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d00b      	beq.n	800c5b6 <TIM_OC1_SetConfig+0xbe>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4a1a      	ldr	r2, [pc, #104]	; (800c60c <TIM_OC1_SetConfig+0x114>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d007      	beq.n	800c5b6 <TIM_OC1_SetConfig+0xbe>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a19      	ldr	r2, [pc, #100]	; (800c610 <TIM_OC1_SetConfig+0x118>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d003      	beq.n	800c5b6 <TIM_OC1_SetConfig+0xbe>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4a18      	ldr	r2, [pc, #96]	; (800c614 <TIM_OC1_SetConfig+0x11c>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d111      	bne.n	800c5da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	695b      	ldr	r3, [r3, #20]
 800c5ca:	693a      	ldr	r2, [r7, #16]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	699b      	ldr	r3, [r3, #24]
 800c5d4:	693a      	ldr	r2, [r7, #16]
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	697a      	ldr	r2, [r7, #20]
 800c5f2:	621a      	str	r2, [r3, #32]
}
 800c5f4:	bf00      	nop
 800c5f6:	371c      	adds	r7, #28
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	fffeff8f 	.word	0xfffeff8f
 800c604:	40010000 	.word	0x40010000
 800c608:	40010400 	.word	0x40010400
 800c60c:	40014000 	.word	0x40014000
 800c610:	40014400 	.word	0x40014400
 800c614:	40014800 	.word	0x40014800

0800c618 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c618:	b480      	push	{r7}
 800c61a:	b087      	sub	sp, #28
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a1b      	ldr	r3, [r3, #32]
 800c626:	f023 0210 	bic.w	r2, r3, #16
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	4b34      	ldr	r3, [pc, #208]	; (800c714 <TIM_OC2_SetConfig+0xfc>)
 800c644:	4013      	ands	r3, r2
 800c646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c64e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	021b      	lsls	r3, r3, #8
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	4313      	orrs	r3, r2
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	f023 0320 	bic.w	r3, r3, #32
 800c662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	011b      	lsls	r3, r3, #4
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a29      	ldr	r2, [pc, #164]	; (800c718 <TIM_OC2_SetConfig+0x100>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d003      	beq.n	800c680 <TIM_OC2_SetConfig+0x68>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a28      	ldr	r2, [pc, #160]	; (800c71c <TIM_OC2_SetConfig+0x104>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d10d      	bne.n	800c69c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	011b      	lsls	r3, r3, #4
 800c68e:	697a      	ldr	r2, [r7, #20]
 800c690:	4313      	orrs	r3, r2
 800c692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c69a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a1e      	ldr	r2, [pc, #120]	; (800c718 <TIM_OC2_SetConfig+0x100>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d00f      	beq.n	800c6c4 <TIM_OC2_SetConfig+0xac>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a1d      	ldr	r2, [pc, #116]	; (800c71c <TIM_OC2_SetConfig+0x104>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d00b      	beq.n	800c6c4 <TIM_OC2_SetConfig+0xac>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a1c      	ldr	r2, [pc, #112]	; (800c720 <TIM_OC2_SetConfig+0x108>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d007      	beq.n	800c6c4 <TIM_OC2_SetConfig+0xac>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a1b      	ldr	r2, [pc, #108]	; (800c724 <TIM_OC2_SetConfig+0x10c>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d003      	beq.n	800c6c4 <TIM_OC2_SetConfig+0xac>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a1a      	ldr	r2, [pc, #104]	; (800c728 <TIM_OC2_SetConfig+0x110>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d113      	bne.n	800c6ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	695b      	ldr	r3, [r3, #20]
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	699b      	ldr	r3, [r3, #24]
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	697a      	ldr	r2, [r7, #20]
 800c704:	621a      	str	r2, [r3, #32]
}
 800c706:	bf00      	nop
 800c708:	371c      	adds	r7, #28
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	feff8fff 	.word	0xfeff8fff
 800c718:	40010000 	.word	0x40010000
 800c71c:	40010400 	.word	0x40010400
 800c720:	40014000 	.word	0x40014000
 800c724:	40014400 	.word	0x40014400
 800c728:	40014800 	.word	0x40014800

0800c72c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b087      	sub	sp, #28
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a1b      	ldr	r3, [r3, #32]
 800c73a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	69db      	ldr	r3, [r3, #28]
 800c752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c754:	68fa      	ldr	r2, [r7, #12]
 800c756:	4b33      	ldr	r3, [pc, #204]	; (800c824 <TIM_OC3_SetConfig+0xf8>)
 800c758:	4013      	ands	r3, r2
 800c75a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f023 0303 	bic.w	r3, r3, #3
 800c762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	021b      	lsls	r3, r3, #8
 800c77c:	697a      	ldr	r2, [r7, #20]
 800c77e:	4313      	orrs	r3, r2
 800c780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4a28      	ldr	r2, [pc, #160]	; (800c828 <TIM_OC3_SetConfig+0xfc>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d003      	beq.n	800c792 <TIM_OC3_SetConfig+0x66>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4a27      	ldr	r2, [pc, #156]	; (800c82c <TIM_OC3_SetConfig+0x100>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d10d      	bne.n	800c7ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	021b      	lsls	r3, r3, #8
 800c7a0:	697a      	ldr	r2, [r7, #20]
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a1d      	ldr	r2, [pc, #116]	; (800c828 <TIM_OC3_SetConfig+0xfc>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d00f      	beq.n	800c7d6 <TIM_OC3_SetConfig+0xaa>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	4a1c      	ldr	r2, [pc, #112]	; (800c82c <TIM_OC3_SetConfig+0x100>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d00b      	beq.n	800c7d6 <TIM_OC3_SetConfig+0xaa>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4a1b      	ldr	r2, [pc, #108]	; (800c830 <TIM_OC3_SetConfig+0x104>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d007      	beq.n	800c7d6 <TIM_OC3_SetConfig+0xaa>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a1a      	ldr	r2, [pc, #104]	; (800c834 <TIM_OC3_SetConfig+0x108>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d003      	beq.n	800c7d6 <TIM_OC3_SetConfig+0xaa>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a19      	ldr	r2, [pc, #100]	; (800c838 <TIM_OC3_SetConfig+0x10c>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d113      	bne.n	800c7fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	695b      	ldr	r3, [r3, #20]
 800c7ea:	011b      	lsls	r3, r3, #4
 800c7ec:	693a      	ldr	r2, [r7, #16]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	699b      	ldr	r3, [r3, #24]
 800c7f6:	011b      	lsls	r3, r3, #4
 800c7f8:	693a      	ldr	r2, [r7, #16]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	693a      	ldr	r2, [r7, #16]
 800c802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	685a      	ldr	r2, [r3, #4]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	621a      	str	r2, [r3, #32]
}
 800c818:	bf00      	nop
 800c81a:	371c      	adds	r7, #28
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	fffeff8f 	.word	0xfffeff8f
 800c828:	40010000 	.word	0x40010000
 800c82c:	40010400 	.word	0x40010400
 800c830:	40014000 	.word	0x40014000
 800c834:	40014400 	.word	0x40014400
 800c838:	40014800 	.word	0x40014800

0800c83c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a1b      	ldr	r3, [r3, #32]
 800c84a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	69db      	ldr	r3, [r3, #28]
 800c862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	4b24      	ldr	r3, [pc, #144]	; (800c8f8 <TIM_OC4_SetConfig+0xbc>)
 800c868:	4013      	ands	r3, r2
 800c86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	021b      	lsls	r3, r3, #8
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	4313      	orrs	r3, r2
 800c87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	031b      	lsls	r3, r3, #12
 800c88e:	693a      	ldr	r2, [r7, #16]
 800c890:	4313      	orrs	r3, r2
 800c892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a19      	ldr	r2, [pc, #100]	; (800c8fc <TIM_OC4_SetConfig+0xc0>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d00f      	beq.n	800c8bc <TIM_OC4_SetConfig+0x80>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	4a18      	ldr	r2, [pc, #96]	; (800c900 <TIM_OC4_SetConfig+0xc4>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d00b      	beq.n	800c8bc <TIM_OC4_SetConfig+0x80>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a17      	ldr	r2, [pc, #92]	; (800c904 <TIM_OC4_SetConfig+0xc8>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d007      	beq.n	800c8bc <TIM_OC4_SetConfig+0x80>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4a16      	ldr	r2, [pc, #88]	; (800c908 <TIM_OC4_SetConfig+0xcc>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d003      	beq.n	800c8bc <TIM_OC4_SetConfig+0x80>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a15      	ldr	r2, [pc, #84]	; (800c90c <TIM_OC4_SetConfig+0xd0>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d109      	bne.n	800c8d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	695b      	ldr	r3, [r3, #20]
 800c8c8:	019b      	lsls	r3, r3, #6
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	697a      	ldr	r2, [r7, #20]
 800c8d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	685a      	ldr	r2, [r3, #4]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	693a      	ldr	r2, [r7, #16]
 800c8e8:	621a      	str	r2, [r3, #32]
}
 800c8ea:	bf00      	nop
 800c8ec:	371c      	adds	r7, #28
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	feff8fff 	.word	0xfeff8fff
 800c8fc:	40010000 	.word	0x40010000
 800c900:	40010400 	.word	0x40010400
 800c904:	40014000 	.word	0x40014000
 800c908:	40014400 	.word	0x40014400
 800c90c:	40014800 	.word	0x40014800

0800c910 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c910:	b480      	push	{r7}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a1b      	ldr	r3, [r3, #32]
 800c92a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	4b21      	ldr	r3, [pc, #132]	; (800c9c0 <TIM_OC5_SetConfig+0xb0>)
 800c93c:	4013      	ands	r3, r2
 800c93e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	4313      	orrs	r3, r2
 800c948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c950:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	041b      	lsls	r3, r3, #16
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	4313      	orrs	r3, r2
 800c95c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a18      	ldr	r2, [pc, #96]	; (800c9c4 <TIM_OC5_SetConfig+0xb4>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d00f      	beq.n	800c986 <TIM_OC5_SetConfig+0x76>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a17      	ldr	r2, [pc, #92]	; (800c9c8 <TIM_OC5_SetConfig+0xb8>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d00b      	beq.n	800c986 <TIM_OC5_SetConfig+0x76>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4a16      	ldr	r2, [pc, #88]	; (800c9cc <TIM_OC5_SetConfig+0xbc>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d007      	beq.n	800c986 <TIM_OC5_SetConfig+0x76>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a15      	ldr	r2, [pc, #84]	; (800c9d0 <TIM_OC5_SetConfig+0xc0>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d003      	beq.n	800c986 <TIM_OC5_SetConfig+0x76>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a14      	ldr	r2, [pc, #80]	; (800c9d4 <TIM_OC5_SetConfig+0xc4>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d109      	bne.n	800c99a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c98c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	695b      	ldr	r3, [r3, #20]
 800c992:	021b      	lsls	r3, r3, #8
 800c994:	697a      	ldr	r2, [r7, #20]
 800c996:	4313      	orrs	r3, r2
 800c998:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	697a      	ldr	r2, [r7, #20]
 800c99e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	685a      	ldr	r2, [r3, #4]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	693a      	ldr	r2, [r7, #16]
 800c9b2:	621a      	str	r2, [r3, #32]
}
 800c9b4:	bf00      	nop
 800c9b6:	371c      	adds	r7, #28
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	fffeff8f 	.word	0xfffeff8f
 800c9c4:	40010000 	.word	0x40010000
 800c9c8:	40010400 	.word	0x40010400
 800c9cc:	40014000 	.word	0x40014000
 800c9d0:	40014400 	.word	0x40014400
 800c9d4:	40014800 	.word	0x40014800

0800c9d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b087      	sub	sp, #28
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	4b22      	ldr	r3, [pc, #136]	; (800ca8c <TIM_OC6_SetConfig+0xb4>)
 800ca04:	4013      	ands	r3, r2
 800ca06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	021b      	lsls	r3, r3, #8
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	4313      	orrs	r3, r2
 800ca12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	051b      	lsls	r3, r3, #20
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a19      	ldr	r2, [pc, #100]	; (800ca90 <TIM_OC6_SetConfig+0xb8>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d00f      	beq.n	800ca50 <TIM_OC6_SetConfig+0x78>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4a18      	ldr	r2, [pc, #96]	; (800ca94 <TIM_OC6_SetConfig+0xbc>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d00b      	beq.n	800ca50 <TIM_OC6_SetConfig+0x78>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4a17      	ldr	r2, [pc, #92]	; (800ca98 <TIM_OC6_SetConfig+0xc0>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d007      	beq.n	800ca50 <TIM_OC6_SetConfig+0x78>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4a16      	ldr	r2, [pc, #88]	; (800ca9c <TIM_OC6_SetConfig+0xc4>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d003      	beq.n	800ca50 <TIM_OC6_SetConfig+0x78>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4a15      	ldr	r2, [pc, #84]	; (800caa0 <TIM_OC6_SetConfig+0xc8>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d109      	bne.n	800ca64 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	029b      	lsls	r3, r3, #10
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	4313      	orrs	r3, r2
 800ca62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	693a      	ldr	r2, [r7, #16]
 800ca7c:	621a      	str	r2, [r3, #32]
}
 800ca7e:	bf00      	nop
 800ca80:	371c      	adds	r7, #28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	feff8fff 	.word	0xfeff8fff
 800ca90:	40010000 	.word	0x40010000
 800ca94:	40010400 	.word	0x40010400
 800ca98:	40014000 	.word	0x40014000
 800ca9c:	40014400 	.word	0x40014400
 800caa0:	40014800 	.word	0x40014800

0800caa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	f003 031f 	and.w	r3, r3, #31
 800cab6:	2201      	movs	r2, #1
 800cab8:	fa02 f303 	lsl.w	r3, r2, r3
 800cabc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6a1a      	ldr	r2, [r3, #32]
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	43db      	mvns	r3, r3
 800cac6:	401a      	ands	r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6a1a      	ldr	r2, [r3, #32]
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	f003 031f 	and.w	r3, r3, #31
 800cad6:	6879      	ldr	r1, [r7, #4]
 800cad8:	fa01 f303 	lsl.w	r3, r1, r3
 800cadc:	431a      	orrs	r2, r3
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	621a      	str	r2, [r3, #32]
}
 800cae2:	bf00      	nop
 800cae4:	371c      	adds	r7, #28
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
	...

0800caf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d101      	bne.n	800cb08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb04:	2302      	movs	r3, #2
 800cb06:	e06d      	b.n	800cbe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2202      	movs	r2, #2
 800cb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a30      	ldr	r2, [pc, #192]	; (800cbf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d004      	beq.n	800cb3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a2f      	ldr	r2, [pc, #188]	; (800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d108      	bne.n	800cb4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cb42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a20      	ldr	r2, [pc, #128]	; (800cbf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d022      	beq.n	800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb7a:	d01d      	beq.n	800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a1d      	ldr	r2, [pc, #116]	; (800cbf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d018      	beq.n	800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a1c      	ldr	r2, [pc, #112]	; (800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d013      	beq.n	800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a1a      	ldr	r2, [pc, #104]	; (800cc00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d00e      	beq.n	800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a15      	ldr	r2, [pc, #84]	; (800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d009      	beq.n	800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a16      	ldr	r2, [pc, #88]	; (800cc04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d004      	beq.n	800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a15      	ldr	r2, [pc, #84]	; (800cc08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d10c      	bne.n	800cbd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3714      	adds	r7, #20
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	40010000 	.word	0x40010000
 800cbf4:	40010400 	.word	0x40010400
 800cbf8:	40000400 	.word	0x40000400
 800cbfc:	40000800 	.word	0x40000800
 800cc00:	40000c00 	.word	0x40000c00
 800cc04:	40001800 	.word	0x40001800
 800cc08:	40014000 	.word	0x40014000

0800cc0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc14:	bf00      	nop
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc28:	bf00      	nop
 800cc2a:	370c      	adds	r7, #12
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc3c:	bf00      	nop
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d101      	bne.n	800cc5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	e042      	b.n	800cce0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d106      	bne.n	800cc72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7f7 f9db 	bl	8004028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2224      	movs	r2, #36	; 0x24
 800cc76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f022 0201 	bic.w	r2, r2, #1
 800cc88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f82c 	bl	800cce8 <UART_SetConfig>
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d101      	bne.n	800cc9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cc96:	2301      	movs	r3, #1
 800cc98:	e022      	b.n	800cce0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d002      	beq.n	800cca8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fd88 	bl	800d7b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	685a      	ldr	r2, [r3, #4]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ccb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	689a      	ldr	r2, [r3, #8]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ccc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f042 0201 	orr.w	r2, r2, #1
 800ccd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 fe0f 	bl	800d8fc <UART_CheckIdleState>
 800ccde:	4603      	mov	r3, r0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ccec:	b092      	sub	sp, #72	; 0x48
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	689a      	ldr	r2, [r3, #8]
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	431a      	orrs	r2, r3
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	695b      	ldr	r3, [r3, #20]
 800cd06:	431a      	orrs	r2, r3
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	69db      	ldr	r3, [r3, #28]
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	4bbe      	ldr	r3, [pc, #760]	; (800d010 <UART_SetConfig+0x328>)
 800cd18:	4013      	ands	r3, r2
 800cd1a:	697a      	ldr	r2, [r7, #20]
 800cd1c:	6812      	ldr	r2, [r2, #0]
 800cd1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd20:	430b      	orrs	r3, r1
 800cd22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	68da      	ldr	r2, [r3, #12]
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	430a      	orrs	r2, r1
 800cd38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	699b      	ldr	r3, [r3, #24]
 800cd3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4ab3      	ldr	r2, [pc, #716]	; (800d014 <UART_SetConfig+0x32c>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d004      	beq.n	800cd54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd50:	4313      	orrs	r3, r2
 800cd52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689a      	ldr	r2, [r3, #8]
 800cd5a:	4baf      	ldr	r3, [pc, #700]	; (800d018 <UART_SetConfig+0x330>)
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	6812      	ldr	r2, [r2, #0]
 800cd62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd64:	430b      	orrs	r3, r1
 800cd66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6e:	f023 010f 	bic.w	r1, r3, #15
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	430a      	orrs	r2, r1
 800cd7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4aa6      	ldr	r2, [pc, #664]	; (800d01c <UART_SetConfig+0x334>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d177      	bne.n	800ce78 <UART_SetConfig+0x190>
 800cd88:	4ba5      	ldr	r3, [pc, #660]	; (800d020 <UART_SetConfig+0x338>)
 800cd8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd90:	2b28      	cmp	r3, #40	; 0x28
 800cd92:	d86d      	bhi.n	800ce70 <UART_SetConfig+0x188>
 800cd94:	a201      	add	r2, pc, #4	; (adr r2, 800cd9c <UART_SetConfig+0xb4>)
 800cd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd9a:	bf00      	nop
 800cd9c:	0800ce41 	.word	0x0800ce41
 800cda0:	0800ce71 	.word	0x0800ce71
 800cda4:	0800ce71 	.word	0x0800ce71
 800cda8:	0800ce71 	.word	0x0800ce71
 800cdac:	0800ce71 	.word	0x0800ce71
 800cdb0:	0800ce71 	.word	0x0800ce71
 800cdb4:	0800ce71 	.word	0x0800ce71
 800cdb8:	0800ce71 	.word	0x0800ce71
 800cdbc:	0800ce49 	.word	0x0800ce49
 800cdc0:	0800ce71 	.word	0x0800ce71
 800cdc4:	0800ce71 	.word	0x0800ce71
 800cdc8:	0800ce71 	.word	0x0800ce71
 800cdcc:	0800ce71 	.word	0x0800ce71
 800cdd0:	0800ce71 	.word	0x0800ce71
 800cdd4:	0800ce71 	.word	0x0800ce71
 800cdd8:	0800ce71 	.word	0x0800ce71
 800cddc:	0800ce51 	.word	0x0800ce51
 800cde0:	0800ce71 	.word	0x0800ce71
 800cde4:	0800ce71 	.word	0x0800ce71
 800cde8:	0800ce71 	.word	0x0800ce71
 800cdec:	0800ce71 	.word	0x0800ce71
 800cdf0:	0800ce71 	.word	0x0800ce71
 800cdf4:	0800ce71 	.word	0x0800ce71
 800cdf8:	0800ce71 	.word	0x0800ce71
 800cdfc:	0800ce59 	.word	0x0800ce59
 800ce00:	0800ce71 	.word	0x0800ce71
 800ce04:	0800ce71 	.word	0x0800ce71
 800ce08:	0800ce71 	.word	0x0800ce71
 800ce0c:	0800ce71 	.word	0x0800ce71
 800ce10:	0800ce71 	.word	0x0800ce71
 800ce14:	0800ce71 	.word	0x0800ce71
 800ce18:	0800ce71 	.word	0x0800ce71
 800ce1c:	0800ce61 	.word	0x0800ce61
 800ce20:	0800ce71 	.word	0x0800ce71
 800ce24:	0800ce71 	.word	0x0800ce71
 800ce28:	0800ce71 	.word	0x0800ce71
 800ce2c:	0800ce71 	.word	0x0800ce71
 800ce30:	0800ce71 	.word	0x0800ce71
 800ce34:	0800ce71 	.word	0x0800ce71
 800ce38:	0800ce71 	.word	0x0800ce71
 800ce3c:	0800ce69 	.word	0x0800ce69
 800ce40:	2301      	movs	r3, #1
 800ce42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce46:	e222      	b.n	800d28e <UART_SetConfig+0x5a6>
 800ce48:	2304      	movs	r3, #4
 800ce4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce4e:	e21e      	b.n	800d28e <UART_SetConfig+0x5a6>
 800ce50:	2308      	movs	r3, #8
 800ce52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce56:	e21a      	b.n	800d28e <UART_SetConfig+0x5a6>
 800ce58:	2310      	movs	r3, #16
 800ce5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce5e:	e216      	b.n	800d28e <UART_SetConfig+0x5a6>
 800ce60:	2320      	movs	r3, #32
 800ce62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce66:	e212      	b.n	800d28e <UART_SetConfig+0x5a6>
 800ce68:	2340      	movs	r3, #64	; 0x40
 800ce6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce6e:	e20e      	b.n	800d28e <UART_SetConfig+0x5a6>
 800ce70:	2380      	movs	r3, #128	; 0x80
 800ce72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce76:	e20a      	b.n	800d28e <UART_SetConfig+0x5a6>
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a69      	ldr	r2, [pc, #420]	; (800d024 <UART_SetConfig+0x33c>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d130      	bne.n	800cee4 <UART_SetConfig+0x1fc>
 800ce82:	4b67      	ldr	r3, [pc, #412]	; (800d020 <UART_SetConfig+0x338>)
 800ce84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce86:	f003 0307 	and.w	r3, r3, #7
 800ce8a:	2b05      	cmp	r3, #5
 800ce8c:	d826      	bhi.n	800cedc <UART_SetConfig+0x1f4>
 800ce8e:	a201      	add	r2, pc, #4	; (adr r2, 800ce94 <UART_SetConfig+0x1ac>)
 800ce90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce94:	0800cead 	.word	0x0800cead
 800ce98:	0800ceb5 	.word	0x0800ceb5
 800ce9c:	0800cebd 	.word	0x0800cebd
 800cea0:	0800cec5 	.word	0x0800cec5
 800cea4:	0800cecd 	.word	0x0800cecd
 800cea8:	0800ced5 	.word	0x0800ced5
 800ceac:	2300      	movs	r3, #0
 800ceae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceb2:	e1ec      	b.n	800d28e <UART_SetConfig+0x5a6>
 800ceb4:	2304      	movs	r3, #4
 800ceb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceba:	e1e8      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cebc:	2308      	movs	r3, #8
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cec2:	e1e4      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cec4:	2310      	movs	r3, #16
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceca:	e1e0      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cecc:	2320      	movs	r3, #32
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ced2:	e1dc      	b.n	800d28e <UART_SetConfig+0x5a6>
 800ced4:	2340      	movs	r3, #64	; 0x40
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceda:	e1d8      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cedc:	2380      	movs	r3, #128	; 0x80
 800cede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cee2:	e1d4      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a4f      	ldr	r2, [pc, #316]	; (800d028 <UART_SetConfig+0x340>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d130      	bne.n	800cf50 <UART_SetConfig+0x268>
 800ceee:	4b4c      	ldr	r3, [pc, #304]	; (800d020 <UART_SetConfig+0x338>)
 800cef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cef2:	f003 0307 	and.w	r3, r3, #7
 800cef6:	2b05      	cmp	r3, #5
 800cef8:	d826      	bhi.n	800cf48 <UART_SetConfig+0x260>
 800cefa:	a201      	add	r2, pc, #4	; (adr r2, 800cf00 <UART_SetConfig+0x218>)
 800cefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf00:	0800cf19 	.word	0x0800cf19
 800cf04:	0800cf21 	.word	0x0800cf21
 800cf08:	0800cf29 	.word	0x0800cf29
 800cf0c:	0800cf31 	.word	0x0800cf31
 800cf10:	0800cf39 	.word	0x0800cf39
 800cf14:	0800cf41 	.word	0x0800cf41
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf1e:	e1b6      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cf20:	2304      	movs	r3, #4
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf26:	e1b2      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cf28:	2308      	movs	r3, #8
 800cf2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf2e:	e1ae      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cf30:	2310      	movs	r3, #16
 800cf32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf36:	e1aa      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cf38:	2320      	movs	r3, #32
 800cf3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf3e:	e1a6      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cf40:	2340      	movs	r3, #64	; 0x40
 800cf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf46:	e1a2      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cf48:	2380      	movs	r3, #128	; 0x80
 800cf4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf4e:	e19e      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a35      	ldr	r2, [pc, #212]	; (800d02c <UART_SetConfig+0x344>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d130      	bne.n	800cfbc <UART_SetConfig+0x2d4>
 800cf5a:	4b31      	ldr	r3, [pc, #196]	; (800d020 <UART_SetConfig+0x338>)
 800cf5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf5e:	f003 0307 	and.w	r3, r3, #7
 800cf62:	2b05      	cmp	r3, #5
 800cf64:	d826      	bhi.n	800cfb4 <UART_SetConfig+0x2cc>
 800cf66:	a201      	add	r2, pc, #4	; (adr r2, 800cf6c <UART_SetConfig+0x284>)
 800cf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6c:	0800cf85 	.word	0x0800cf85
 800cf70:	0800cf8d 	.word	0x0800cf8d
 800cf74:	0800cf95 	.word	0x0800cf95
 800cf78:	0800cf9d 	.word	0x0800cf9d
 800cf7c:	0800cfa5 	.word	0x0800cfa5
 800cf80:	0800cfad 	.word	0x0800cfad
 800cf84:	2300      	movs	r3, #0
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf8a:	e180      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cf8c:	2304      	movs	r3, #4
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf92:	e17c      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cf94:	2308      	movs	r3, #8
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf9a:	e178      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cf9c:	2310      	movs	r3, #16
 800cf9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfa2:	e174      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cfa4:	2320      	movs	r3, #32
 800cfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfaa:	e170      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cfac:	2340      	movs	r3, #64	; 0x40
 800cfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfb2:	e16c      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cfb4:	2380      	movs	r3, #128	; 0x80
 800cfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfba:	e168      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a1b      	ldr	r2, [pc, #108]	; (800d030 <UART_SetConfig+0x348>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d142      	bne.n	800d04c <UART_SetConfig+0x364>
 800cfc6:	4b16      	ldr	r3, [pc, #88]	; (800d020 <UART_SetConfig+0x338>)
 800cfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfca:	f003 0307 	and.w	r3, r3, #7
 800cfce:	2b05      	cmp	r3, #5
 800cfd0:	d838      	bhi.n	800d044 <UART_SetConfig+0x35c>
 800cfd2:	a201      	add	r2, pc, #4	; (adr r2, 800cfd8 <UART_SetConfig+0x2f0>)
 800cfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd8:	0800cff1 	.word	0x0800cff1
 800cfdc:	0800cff9 	.word	0x0800cff9
 800cfe0:	0800d001 	.word	0x0800d001
 800cfe4:	0800d009 	.word	0x0800d009
 800cfe8:	0800d035 	.word	0x0800d035
 800cfec:	0800d03d 	.word	0x0800d03d
 800cff0:	2300      	movs	r3, #0
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cff6:	e14a      	b.n	800d28e <UART_SetConfig+0x5a6>
 800cff8:	2304      	movs	r3, #4
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cffe:	e146      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d000:	2308      	movs	r3, #8
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d006:	e142      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d008:	2310      	movs	r3, #16
 800d00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d00e:	e13e      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d010:	cfff69f3 	.word	0xcfff69f3
 800d014:	58000c00 	.word	0x58000c00
 800d018:	11fff4ff 	.word	0x11fff4ff
 800d01c:	40011000 	.word	0x40011000
 800d020:	58024400 	.word	0x58024400
 800d024:	40004400 	.word	0x40004400
 800d028:	40004800 	.word	0x40004800
 800d02c:	40004c00 	.word	0x40004c00
 800d030:	40005000 	.word	0x40005000
 800d034:	2320      	movs	r3, #32
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03a:	e128      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d03c:	2340      	movs	r3, #64	; 0x40
 800d03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d042:	e124      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d044:	2380      	movs	r3, #128	; 0x80
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04a:	e120      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4acb      	ldr	r2, [pc, #812]	; (800d380 <UART_SetConfig+0x698>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d176      	bne.n	800d144 <UART_SetConfig+0x45c>
 800d056:	4bcb      	ldr	r3, [pc, #812]	; (800d384 <UART_SetConfig+0x69c>)
 800d058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d05a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d05e:	2b28      	cmp	r3, #40	; 0x28
 800d060:	d86c      	bhi.n	800d13c <UART_SetConfig+0x454>
 800d062:	a201      	add	r2, pc, #4	; (adr r2, 800d068 <UART_SetConfig+0x380>)
 800d064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d068:	0800d10d 	.word	0x0800d10d
 800d06c:	0800d13d 	.word	0x0800d13d
 800d070:	0800d13d 	.word	0x0800d13d
 800d074:	0800d13d 	.word	0x0800d13d
 800d078:	0800d13d 	.word	0x0800d13d
 800d07c:	0800d13d 	.word	0x0800d13d
 800d080:	0800d13d 	.word	0x0800d13d
 800d084:	0800d13d 	.word	0x0800d13d
 800d088:	0800d115 	.word	0x0800d115
 800d08c:	0800d13d 	.word	0x0800d13d
 800d090:	0800d13d 	.word	0x0800d13d
 800d094:	0800d13d 	.word	0x0800d13d
 800d098:	0800d13d 	.word	0x0800d13d
 800d09c:	0800d13d 	.word	0x0800d13d
 800d0a0:	0800d13d 	.word	0x0800d13d
 800d0a4:	0800d13d 	.word	0x0800d13d
 800d0a8:	0800d11d 	.word	0x0800d11d
 800d0ac:	0800d13d 	.word	0x0800d13d
 800d0b0:	0800d13d 	.word	0x0800d13d
 800d0b4:	0800d13d 	.word	0x0800d13d
 800d0b8:	0800d13d 	.word	0x0800d13d
 800d0bc:	0800d13d 	.word	0x0800d13d
 800d0c0:	0800d13d 	.word	0x0800d13d
 800d0c4:	0800d13d 	.word	0x0800d13d
 800d0c8:	0800d125 	.word	0x0800d125
 800d0cc:	0800d13d 	.word	0x0800d13d
 800d0d0:	0800d13d 	.word	0x0800d13d
 800d0d4:	0800d13d 	.word	0x0800d13d
 800d0d8:	0800d13d 	.word	0x0800d13d
 800d0dc:	0800d13d 	.word	0x0800d13d
 800d0e0:	0800d13d 	.word	0x0800d13d
 800d0e4:	0800d13d 	.word	0x0800d13d
 800d0e8:	0800d12d 	.word	0x0800d12d
 800d0ec:	0800d13d 	.word	0x0800d13d
 800d0f0:	0800d13d 	.word	0x0800d13d
 800d0f4:	0800d13d 	.word	0x0800d13d
 800d0f8:	0800d13d 	.word	0x0800d13d
 800d0fc:	0800d13d 	.word	0x0800d13d
 800d100:	0800d13d 	.word	0x0800d13d
 800d104:	0800d13d 	.word	0x0800d13d
 800d108:	0800d135 	.word	0x0800d135
 800d10c:	2301      	movs	r3, #1
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d112:	e0bc      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d114:	2304      	movs	r3, #4
 800d116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d11a:	e0b8      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d11c:	2308      	movs	r3, #8
 800d11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d122:	e0b4      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d124:	2310      	movs	r3, #16
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12a:	e0b0      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d12c:	2320      	movs	r3, #32
 800d12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d132:	e0ac      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d134:	2340      	movs	r3, #64	; 0x40
 800d136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13a:	e0a8      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d13c:	2380      	movs	r3, #128	; 0x80
 800d13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d142:	e0a4      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a8f      	ldr	r2, [pc, #572]	; (800d388 <UART_SetConfig+0x6a0>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d130      	bne.n	800d1b0 <UART_SetConfig+0x4c8>
 800d14e:	4b8d      	ldr	r3, [pc, #564]	; (800d384 <UART_SetConfig+0x69c>)
 800d150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d152:	f003 0307 	and.w	r3, r3, #7
 800d156:	2b05      	cmp	r3, #5
 800d158:	d826      	bhi.n	800d1a8 <UART_SetConfig+0x4c0>
 800d15a:	a201      	add	r2, pc, #4	; (adr r2, 800d160 <UART_SetConfig+0x478>)
 800d15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d160:	0800d179 	.word	0x0800d179
 800d164:	0800d181 	.word	0x0800d181
 800d168:	0800d189 	.word	0x0800d189
 800d16c:	0800d191 	.word	0x0800d191
 800d170:	0800d199 	.word	0x0800d199
 800d174:	0800d1a1 	.word	0x0800d1a1
 800d178:	2300      	movs	r3, #0
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d17e:	e086      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d180:	2304      	movs	r3, #4
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d186:	e082      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d188:	2308      	movs	r3, #8
 800d18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d18e:	e07e      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d190:	2310      	movs	r3, #16
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d196:	e07a      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d198:	2320      	movs	r3, #32
 800d19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d19e:	e076      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d1a0:	2340      	movs	r3, #64	; 0x40
 800d1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1a6:	e072      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d1a8:	2380      	movs	r3, #128	; 0x80
 800d1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ae:	e06e      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a75      	ldr	r2, [pc, #468]	; (800d38c <UART_SetConfig+0x6a4>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d130      	bne.n	800d21c <UART_SetConfig+0x534>
 800d1ba:	4b72      	ldr	r3, [pc, #456]	; (800d384 <UART_SetConfig+0x69c>)
 800d1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1be:	f003 0307 	and.w	r3, r3, #7
 800d1c2:	2b05      	cmp	r3, #5
 800d1c4:	d826      	bhi.n	800d214 <UART_SetConfig+0x52c>
 800d1c6:	a201      	add	r2, pc, #4	; (adr r2, 800d1cc <UART_SetConfig+0x4e4>)
 800d1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1cc:	0800d1e5 	.word	0x0800d1e5
 800d1d0:	0800d1ed 	.word	0x0800d1ed
 800d1d4:	0800d1f5 	.word	0x0800d1f5
 800d1d8:	0800d1fd 	.word	0x0800d1fd
 800d1dc:	0800d205 	.word	0x0800d205
 800d1e0:	0800d20d 	.word	0x0800d20d
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ea:	e050      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d1ec:	2304      	movs	r3, #4
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f2:	e04c      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d1f4:	2308      	movs	r3, #8
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fa:	e048      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d1fc:	2310      	movs	r3, #16
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d202:	e044      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d204:	2320      	movs	r3, #32
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d20a:	e040      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d20c:	2340      	movs	r3, #64	; 0x40
 800d20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d212:	e03c      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d214:	2380      	movs	r3, #128	; 0x80
 800d216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d21a:	e038      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a5b      	ldr	r2, [pc, #364]	; (800d390 <UART_SetConfig+0x6a8>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d130      	bne.n	800d288 <UART_SetConfig+0x5a0>
 800d226:	4b57      	ldr	r3, [pc, #348]	; (800d384 <UART_SetConfig+0x69c>)
 800d228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d22a:	f003 0307 	and.w	r3, r3, #7
 800d22e:	2b05      	cmp	r3, #5
 800d230:	d826      	bhi.n	800d280 <UART_SetConfig+0x598>
 800d232:	a201      	add	r2, pc, #4	; (adr r2, 800d238 <UART_SetConfig+0x550>)
 800d234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d238:	0800d251 	.word	0x0800d251
 800d23c:	0800d259 	.word	0x0800d259
 800d240:	0800d261 	.word	0x0800d261
 800d244:	0800d269 	.word	0x0800d269
 800d248:	0800d271 	.word	0x0800d271
 800d24c:	0800d279 	.word	0x0800d279
 800d250:	2302      	movs	r3, #2
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d256:	e01a      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d258:	2304      	movs	r3, #4
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25e:	e016      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d260:	2308      	movs	r3, #8
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d266:	e012      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d268:	2310      	movs	r3, #16
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26e:	e00e      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d270:	2320      	movs	r3, #32
 800d272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d276:	e00a      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d278:	2340      	movs	r3, #64	; 0x40
 800d27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d27e:	e006      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d280:	2380      	movs	r3, #128	; 0x80
 800d282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d286:	e002      	b.n	800d28e <UART_SetConfig+0x5a6>
 800d288:	2380      	movs	r3, #128	; 0x80
 800d28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a3f      	ldr	r2, [pc, #252]	; (800d390 <UART_SetConfig+0x6a8>)
 800d294:	4293      	cmp	r3, r2
 800d296:	f040 80f8 	bne.w	800d48a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d29a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d29e:	2b20      	cmp	r3, #32
 800d2a0:	dc46      	bgt.n	800d330 <UART_SetConfig+0x648>
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	f2c0 8082 	blt.w	800d3ac <UART_SetConfig+0x6c4>
 800d2a8:	3b02      	subs	r3, #2
 800d2aa:	2b1e      	cmp	r3, #30
 800d2ac:	d87e      	bhi.n	800d3ac <UART_SetConfig+0x6c4>
 800d2ae:	a201      	add	r2, pc, #4	; (adr r2, 800d2b4 <UART_SetConfig+0x5cc>)
 800d2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b4:	0800d337 	.word	0x0800d337
 800d2b8:	0800d3ad 	.word	0x0800d3ad
 800d2bc:	0800d33f 	.word	0x0800d33f
 800d2c0:	0800d3ad 	.word	0x0800d3ad
 800d2c4:	0800d3ad 	.word	0x0800d3ad
 800d2c8:	0800d3ad 	.word	0x0800d3ad
 800d2cc:	0800d34f 	.word	0x0800d34f
 800d2d0:	0800d3ad 	.word	0x0800d3ad
 800d2d4:	0800d3ad 	.word	0x0800d3ad
 800d2d8:	0800d3ad 	.word	0x0800d3ad
 800d2dc:	0800d3ad 	.word	0x0800d3ad
 800d2e0:	0800d3ad 	.word	0x0800d3ad
 800d2e4:	0800d3ad 	.word	0x0800d3ad
 800d2e8:	0800d3ad 	.word	0x0800d3ad
 800d2ec:	0800d35f 	.word	0x0800d35f
 800d2f0:	0800d3ad 	.word	0x0800d3ad
 800d2f4:	0800d3ad 	.word	0x0800d3ad
 800d2f8:	0800d3ad 	.word	0x0800d3ad
 800d2fc:	0800d3ad 	.word	0x0800d3ad
 800d300:	0800d3ad 	.word	0x0800d3ad
 800d304:	0800d3ad 	.word	0x0800d3ad
 800d308:	0800d3ad 	.word	0x0800d3ad
 800d30c:	0800d3ad 	.word	0x0800d3ad
 800d310:	0800d3ad 	.word	0x0800d3ad
 800d314:	0800d3ad 	.word	0x0800d3ad
 800d318:	0800d3ad 	.word	0x0800d3ad
 800d31c:	0800d3ad 	.word	0x0800d3ad
 800d320:	0800d3ad 	.word	0x0800d3ad
 800d324:	0800d3ad 	.word	0x0800d3ad
 800d328:	0800d3ad 	.word	0x0800d3ad
 800d32c:	0800d39f 	.word	0x0800d39f
 800d330:	2b40      	cmp	r3, #64	; 0x40
 800d332:	d037      	beq.n	800d3a4 <UART_SetConfig+0x6bc>
 800d334:	e03a      	b.n	800d3ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d336:	f7fc ff79 	bl	800a22c <HAL_RCCEx_GetD3PCLK1Freq>
 800d33a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d33c:	e03c      	b.n	800d3b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d33e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d342:	4618      	mov	r0, r3
 800d344:	f7fc ff88 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d34c:	e034      	b.n	800d3b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d34e:	f107 0318 	add.w	r3, r7, #24
 800d352:	4618      	mov	r0, r3
 800d354:	f7fd f8d4 	bl	800a500 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d35c:	e02c      	b.n	800d3b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d35e:	4b09      	ldr	r3, [pc, #36]	; (800d384 <UART_SetConfig+0x69c>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f003 0320 	and.w	r3, r3, #32
 800d366:	2b00      	cmp	r3, #0
 800d368:	d016      	beq.n	800d398 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d36a:	4b06      	ldr	r3, [pc, #24]	; (800d384 <UART_SetConfig+0x69c>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	08db      	lsrs	r3, r3, #3
 800d370:	f003 0303 	and.w	r3, r3, #3
 800d374:	4a07      	ldr	r2, [pc, #28]	; (800d394 <UART_SetConfig+0x6ac>)
 800d376:	fa22 f303 	lsr.w	r3, r2, r3
 800d37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d37c:	e01c      	b.n	800d3b8 <UART_SetConfig+0x6d0>
 800d37e:	bf00      	nop
 800d380:	40011400 	.word	0x40011400
 800d384:	58024400 	.word	0x58024400
 800d388:	40007800 	.word	0x40007800
 800d38c:	40007c00 	.word	0x40007c00
 800d390:	58000c00 	.word	0x58000c00
 800d394:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d398:	4b9d      	ldr	r3, [pc, #628]	; (800d610 <UART_SetConfig+0x928>)
 800d39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d39c:	e00c      	b.n	800d3b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d39e:	4b9d      	ldr	r3, [pc, #628]	; (800d614 <UART_SetConfig+0x92c>)
 800d3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3a2:	e009      	b.n	800d3b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3aa:	e005      	b.n	800d3b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d3b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f000 81de 	beq.w	800d77c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c4:	4a94      	ldr	r2, [pc, #592]	; (800d618 <UART_SetConfig+0x930>)
 800d3c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	685a      	ldr	r2, [r3, #4]
 800d3d8:	4613      	mov	r3, r2
 800d3da:	005b      	lsls	r3, r3, #1
 800d3dc:	4413      	add	r3, r2
 800d3de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d305      	bcc.n	800d3f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d903      	bls.n	800d3f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d3f6:	e1c1      	b.n	800d77c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	60bb      	str	r3, [r7, #8]
 800d3fe:	60fa      	str	r2, [r7, #12]
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d404:	4a84      	ldr	r2, [pc, #528]	; (800d618 <UART_SetConfig+0x930>)
 800d406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	2200      	movs	r2, #0
 800d40e:	603b      	str	r3, [r7, #0]
 800d410:	607a      	str	r2, [r7, #4]
 800d412:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d41a:	f7f2 ffb1 	bl	8000380 <__aeabi_uldivmod>
 800d41e:	4602      	mov	r2, r0
 800d420:	460b      	mov	r3, r1
 800d422:	4610      	mov	r0, r2
 800d424:	4619      	mov	r1, r3
 800d426:	f04f 0200 	mov.w	r2, #0
 800d42a:	f04f 0300 	mov.w	r3, #0
 800d42e:	020b      	lsls	r3, r1, #8
 800d430:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d434:	0202      	lsls	r2, r0, #8
 800d436:	6979      	ldr	r1, [r7, #20]
 800d438:	6849      	ldr	r1, [r1, #4]
 800d43a:	0849      	lsrs	r1, r1, #1
 800d43c:	2000      	movs	r0, #0
 800d43e:	460c      	mov	r4, r1
 800d440:	4605      	mov	r5, r0
 800d442:	eb12 0804 	adds.w	r8, r2, r4
 800d446:	eb43 0905 	adc.w	r9, r3, r5
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	469a      	mov	sl, r3
 800d452:	4693      	mov	fp, r2
 800d454:	4652      	mov	r2, sl
 800d456:	465b      	mov	r3, fp
 800d458:	4640      	mov	r0, r8
 800d45a:	4649      	mov	r1, r9
 800d45c:	f7f2 ff90 	bl	8000380 <__aeabi_uldivmod>
 800d460:	4602      	mov	r2, r0
 800d462:	460b      	mov	r3, r1
 800d464:	4613      	mov	r3, r2
 800d466:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d46e:	d308      	bcc.n	800d482 <UART_SetConfig+0x79a>
 800d470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d476:	d204      	bcs.n	800d482 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d47e:	60da      	str	r2, [r3, #12]
 800d480:	e17c      	b.n	800d77c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d488:	e178      	b.n	800d77c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	69db      	ldr	r3, [r3, #28]
 800d48e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d492:	f040 80c5 	bne.w	800d620 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d496:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d49a:	2b20      	cmp	r3, #32
 800d49c:	dc48      	bgt.n	800d530 <UART_SetConfig+0x848>
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	db7b      	blt.n	800d59a <UART_SetConfig+0x8b2>
 800d4a2:	2b20      	cmp	r3, #32
 800d4a4:	d879      	bhi.n	800d59a <UART_SetConfig+0x8b2>
 800d4a6:	a201      	add	r2, pc, #4	; (adr r2, 800d4ac <UART_SetConfig+0x7c4>)
 800d4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ac:	0800d537 	.word	0x0800d537
 800d4b0:	0800d53f 	.word	0x0800d53f
 800d4b4:	0800d59b 	.word	0x0800d59b
 800d4b8:	0800d59b 	.word	0x0800d59b
 800d4bc:	0800d547 	.word	0x0800d547
 800d4c0:	0800d59b 	.word	0x0800d59b
 800d4c4:	0800d59b 	.word	0x0800d59b
 800d4c8:	0800d59b 	.word	0x0800d59b
 800d4cc:	0800d557 	.word	0x0800d557
 800d4d0:	0800d59b 	.word	0x0800d59b
 800d4d4:	0800d59b 	.word	0x0800d59b
 800d4d8:	0800d59b 	.word	0x0800d59b
 800d4dc:	0800d59b 	.word	0x0800d59b
 800d4e0:	0800d59b 	.word	0x0800d59b
 800d4e4:	0800d59b 	.word	0x0800d59b
 800d4e8:	0800d59b 	.word	0x0800d59b
 800d4ec:	0800d567 	.word	0x0800d567
 800d4f0:	0800d59b 	.word	0x0800d59b
 800d4f4:	0800d59b 	.word	0x0800d59b
 800d4f8:	0800d59b 	.word	0x0800d59b
 800d4fc:	0800d59b 	.word	0x0800d59b
 800d500:	0800d59b 	.word	0x0800d59b
 800d504:	0800d59b 	.word	0x0800d59b
 800d508:	0800d59b 	.word	0x0800d59b
 800d50c:	0800d59b 	.word	0x0800d59b
 800d510:	0800d59b 	.word	0x0800d59b
 800d514:	0800d59b 	.word	0x0800d59b
 800d518:	0800d59b 	.word	0x0800d59b
 800d51c:	0800d59b 	.word	0x0800d59b
 800d520:	0800d59b 	.word	0x0800d59b
 800d524:	0800d59b 	.word	0x0800d59b
 800d528:	0800d59b 	.word	0x0800d59b
 800d52c:	0800d58d 	.word	0x0800d58d
 800d530:	2b40      	cmp	r3, #64	; 0x40
 800d532:	d02e      	beq.n	800d592 <UART_SetConfig+0x8aa>
 800d534:	e031      	b.n	800d59a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d536:	f7fb f9f3 	bl	8008920 <HAL_RCC_GetPCLK1Freq>
 800d53a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d53c:	e033      	b.n	800d5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d53e:	f7fb fa05 	bl	800894c <HAL_RCC_GetPCLK2Freq>
 800d542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d544:	e02f      	b.n	800d5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fc fe84 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d554:	e027      	b.n	800d5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d556:	f107 0318 	add.w	r3, r7, #24
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fc ffd0 	bl	800a500 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d564:	e01f      	b.n	800d5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d566:	4b2d      	ldr	r3, [pc, #180]	; (800d61c <UART_SetConfig+0x934>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f003 0320 	and.w	r3, r3, #32
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d009      	beq.n	800d586 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d572:	4b2a      	ldr	r3, [pc, #168]	; (800d61c <UART_SetConfig+0x934>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	08db      	lsrs	r3, r3, #3
 800d578:	f003 0303 	and.w	r3, r3, #3
 800d57c:	4a24      	ldr	r2, [pc, #144]	; (800d610 <UART_SetConfig+0x928>)
 800d57e:	fa22 f303 	lsr.w	r3, r2, r3
 800d582:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d584:	e00f      	b.n	800d5a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d586:	4b22      	ldr	r3, [pc, #136]	; (800d610 <UART_SetConfig+0x928>)
 800d588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d58a:	e00c      	b.n	800d5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d58c:	4b21      	ldr	r3, [pc, #132]	; (800d614 <UART_SetConfig+0x92c>)
 800d58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d590:	e009      	b.n	800d5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d598:	e005      	b.n	800d5a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d59a:	2300      	movs	r3, #0
 800d59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d5a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 80e7 	beq.w	800d77c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b2:	4a19      	ldr	r2, [pc, #100]	; (800d618 <UART_SetConfig+0x930>)
 800d5b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5c0:	005a      	lsls	r2, r3, #1
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	085b      	lsrs	r3, r3, #1
 800d5c8:	441a      	add	r2, r3
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d6:	2b0f      	cmp	r3, #15
 800d5d8:	d916      	bls.n	800d608 <UART_SetConfig+0x920>
 800d5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5e0:	d212      	bcs.n	800d608 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	f023 030f 	bic.w	r3, r3, #15
 800d5ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ee:	085b      	lsrs	r3, r3, #1
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	f003 0307 	and.w	r3, r3, #7
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d604:	60da      	str	r2, [r3, #12]
 800d606:	e0b9      	b.n	800d77c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d608:	2301      	movs	r3, #1
 800d60a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d60e:	e0b5      	b.n	800d77c <UART_SetConfig+0xa94>
 800d610:	03d09000 	.word	0x03d09000
 800d614:	003d0900 	.word	0x003d0900
 800d618:	0802a4a8 	.word	0x0802a4a8
 800d61c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d620:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d624:	2b20      	cmp	r3, #32
 800d626:	dc49      	bgt.n	800d6bc <UART_SetConfig+0x9d4>
 800d628:	2b00      	cmp	r3, #0
 800d62a:	db7c      	blt.n	800d726 <UART_SetConfig+0xa3e>
 800d62c:	2b20      	cmp	r3, #32
 800d62e:	d87a      	bhi.n	800d726 <UART_SetConfig+0xa3e>
 800d630:	a201      	add	r2, pc, #4	; (adr r2, 800d638 <UART_SetConfig+0x950>)
 800d632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d636:	bf00      	nop
 800d638:	0800d6c3 	.word	0x0800d6c3
 800d63c:	0800d6cb 	.word	0x0800d6cb
 800d640:	0800d727 	.word	0x0800d727
 800d644:	0800d727 	.word	0x0800d727
 800d648:	0800d6d3 	.word	0x0800d6d3
 800d64c:	0800d727 	.word	0x0800d727
 800d650:	0800d727 	.word	0x0800d727
 800d654:	0800d727 	.word	0x0800d727
 800d658:	0800d6e3 	.word	0x0800d6e3
 800d65c:	0800d727 	.word	0x0800d727
 800d660:	0800d727 	.word	0x0800d727
 800d664:	0800d727 	.word	0x0800d727
 800d668:	0800d727 	.word	0x0800d727
 800d66c:	0800d727 	.word	0x0800d727
 800d670:	0800d727 	.word	0x0800d727
 800d674:	0800d727 	.word	0x0800d727
 800d678:	0800d6f3 	.word	0x0800d6f3
 800d67c:	0800d727 	.word	0x0800d727
 800d680:	0800d727 	.word	0x0800d727
 800d684:	0800d727 	.word	0x0800d727
 800d688:	0800d727 	.word	0x0800d727
 800d68c:	0800d727 	.word	0x0800d727
 800d690:	0800d727 	.word	0x0800d727
 800d694:	0800d727 	.word	0x0800d727
 800d698:	0800d727 	.word	0x0800d727
 800d69c:	0800d727 	.word	0x0800d727
 800d6a0:	0800d727 	.word	0x0800d727
 800d6a4:	0800d727 	.word	0x0800d727
 800d6a8:	0800d727 	.word	0x0800d727
 800d6ac:	0800d727 	.word	0x0800d727
 800d6b0:	0800d727 	.word	0x0800d727
 800d6b4:	0800d727 	.word	0x0800d727
 800d6b8:	0800d719 	.word	0x0800d719
 800d6bc:	2b40      	cmp	r3, #64	; 0x40
 800d6be:	d02e      	beq.n	800d71e <UART_SetConfig+0xa36>
 800d6c0:	e031      	b.n	800d726 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6c2:	f7fb f92d 	bl	8008920 <HAL_RCC_GetPCLK1Freq>
 800d6c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d6c8:	e033      	b.n	800d732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6ca:	f7fb f93f 	bl	800894c <HAL_RCC_GetPCLK2Freq>
 800d6ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d6d0:	e02f      	b.n	800d732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fc fdbe 	bl	800a258 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6e0:	e027      	b.n	800d732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6e2:	f107 0318 	add.w	r3, r7, #24
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fc ff0a 	bl	800a500 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6f0:	e01f      	b.n	800d732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6f2:	4b2d      	ldr	r3, [pc, #180]	; (800d7a8 <UART_SetConfig+0xac0>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f003 0320 	and.w	r3, r3, #32
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d009      	beq.n	800d712 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d6fe:	4b2a      	ldr	r3, [pc, #168]	; (800d7a8 <UART_SetConfig+0xac0>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	08db      	lsrs	r3, r3, #3
 800d704:	f003 0303 	and.w	r3, r3, #3
 800d708:	4a28      	ldr	r2, [pc, #160]	; (800d7ac <UART_SetConfig+0xac4>)
 800d70a:	fa22 f303 	lsr.w	r3, r2, r3
 800d70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d710:	e00f      	b.n	800d732 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d712:	4b26      	ldr	r3, [pc, #152]	; (800d7ac <UART_SetConfig+0xac4>)
 800d714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d716:	e00c      	b.n	800d732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d718:	4b25      	ldr	r3, [pc, #148]	; (800d7b0 <UART_SetConfig+0xac8>)
 800d71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d71c:	e009      	b.n	800d732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d71e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d724:	e005      	b.n	800d732 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d726:	2300      	movs	r3, #0
 800d728:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d730:	bf00      	nop
    }

    if (pclk != 0U)
 800d732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d734:	2b00      	cmp	r3, #0
 800d736:	d021      	beq.n	800d77c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73c:	4a1d      	ldr	r2, [pc, #116]	; (800d7b4 <UART_SetConfig+0xacc>)
 800d73e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d742:	461a      	mov	r2, r3
 800d744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d746:	fbb3 f2f2 	udiv	r2, r3, r2
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	085b      	lsrs	r3, r3, #1
 800d750:	441a      	add	r2, r3
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	fbb2 f3f3 	udiv	r3, r2, r3
 800d75a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75e:	2b0f      	cmp	r3, #15
 800d760:	d909      	bls.n	800d776 <UART_SetConfig+0xa8e>
 800d762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d768:	d205      	bcs.n	800d776 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	60da      	str	r2, [r3, #12]
 800d774:	e002      	b.n	800d77c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d776:	2301      	movs	r3, #1
 800d778:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	2201      	movs	r2, #1
 800d780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2201      	movs	r2, #1
 800d788:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	2200      	movs	r2, #0
 800d790:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	2200      	movs	r2, #0
 800d796:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d798:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3748      	adds	r7, #72	; 0x48
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7a6:	bf00      	nop
 800d7a8:	58024400 	.word	0x58024400
 800d7ac:	03d09000 	.word	0x03d09000
 800d7b0:	003d0900 	.word	0x003d0900
 800d7b4:	0802a4a8 	.word	0x0802a4a8

0800d7b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00a      	beq.n	800d7e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	430a      	orrs	r2, r1
 800d7e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7e6:	f003 0302 	and.w	r3, r3, #2
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00a      	beq.n	800d804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	430a      	orrs	r2, r1
 800d802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d808:	f003 0304 	and.w	r3, r3, #4
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00a      	beq.n	800d826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	430a      	orrs	r2, r1
 800d824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d82a:	f003 0308 	and.w	r3, r3, #8
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00a      	beq.n	800d848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	430a      	orrs	r2, r1
 800d846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d84c:	f003 0310 	and.w	r3, r3, #16
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00a      	beq.n	800d86a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	430a      	orrs	r2, r1
 800d868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d86e:	f003 0320 	and.w	r3, r3, #32
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00a      	beq.n	800d88c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	430a      	orrs	r2, r1
 800d88a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d894:	2b00      	cmp	r3, #0
 800d896:	d01a      	beq.n	800d8ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	430a      	orrs	r2, r1
 800d8ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8b6:	d10a      	bne.n	800d8ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	430a      	orrs	r2, r1
 800d8cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00a      	beq.n	800d8f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	430a      	orrs	r2, r1
 800d8ee:	605a      	str	r2, [r3, #4]
  }
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af02      	add	r7, sp, #8
 800d902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d90c:	f7f6 ff24 	bl	8004758 <HAL_GetTick>
 800d910:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f003 0308 	and.w	r3, r3, #8
 800d91c:	2b08      	cmp	r3, #8
 800d91e:	d10e      	bne.n	800d93e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2200      	movs	r2, #0
 800d92a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 f82f 	bl	800d992 <UART_WaitOnFlagUntilTimeout>
 800d934:	4603      	mov	r3, r0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d93a:	2303      	movs	r3, #3
 800d93c:	e025      	b.n	800d98a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f003 0304 	and.w	r3, r3, #4
 800d948:	2b04      	cmp	r3, #4
 800d94a:	d10e      	bne.n	800d96a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d94c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d950:	9300      	str	r3, [sp, #0]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2200      	movs	r2, #0
 800d956:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 f819 	bl	800d992 <UART_WaitOnFlagUntilTimeout>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d001      	beq.n	800d96a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d966:	2303      	movs	r3, #3
 800d968:	e00f      	b.n	800d98a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2220      	movs	r2, #32
 800d96e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2220      	movs	r2, #32
 800d976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d992:	b580      	push	{r7, lr}
 800d994:	b09c      	sub	sp, #112	; 0x70
 800d996:	af00      	add	r7, sp, #0
 800d998:	60f8      	str	r0, [r7, #12]
 800d99a:	60b9      	str	r1, [r7, #8]
 800d99c:	603b      	str	r3, [r7, #0]
 800d99e:	4613      	mov	r3, r2
 800d9a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9a2:	e0a9      	b.n	800daf8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9aa:	f000 80a5 	beq.w	800daf8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9ae:	f7f6 fed3 	bl	8004758 <HAL_GetTick>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	1ad3      	subs	r3, r2, r3
 800d9b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d302      	bcc.n	800d9c4 <UART_WaitOnFlagUntilTimeout+0x32>
 800d9be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d140      	bne.n	800da46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9cc:	e853 3f00 	ldrex	r3, [r3]
 800d9d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d9d8:	667b      	str	r3, [r7, #100]	; 0x64
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	461a      	mov	r2, r3
 800d9e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d9e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d9ea:	e841 2300 	strex	r3, r2, [r1]
 800d9ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d9f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1e6      	bne.n	800d9c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	3308      	adds	r3, #8
 800d9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da00:	e853 3f00 	ldrex	r3, [r3]
 800da04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da08:	f023 0301 	bic.w	r3, r3, #1
 800da0c:	663b      	str	r3, [r7, #96]	; 0x60
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	3308      	adds	r3, #8
 800da14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da16:	64ba      	str	r2, [r7, #72]	; 0x48
 800da18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da1e:	e841 2300 	strex	r3, r2, [r1]
 800da22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800da24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1e5      	bne.n	800d9f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2220      	movs	r2, #32
 800da2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2220      	movs	r2, #32
 800da36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800da42:	2303      	movs	r3, #3
 800da44:	e069      	b.n	800db1a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f003 0304 	and.w	r3, r3, #4
 800da50:	2b00      	cmp	r3, #0
 800da52:	d051      	beq.n	800daf8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da62:	d149      	bne.n	800daf8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da76:	e853 3f00 	ldrex	r3, [r3]
 800da7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800da82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	461a      	mov	r2, r3
 800da8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da8c:	637b      	str	r3, [r7, #52]	; 0x34
 800da8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da94:	e841 2300 	strex	r3, r2, [r1]
 800da98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800da9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1e6      	bne.n	800da6e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	3308      	adds	r3, #8
 800daa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	e853 3f00 	ldrex	r3, [r3]
 800daae:	613b      	str	r3, [r7, #16]
   return(result);
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	f023 0301 	bic.w	r3, r3, #1
 800dab6:	66bb      	str	r3, [r7, #104]	; 0x68
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	3308      	adds	r3, #8
 800dabe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dac0:	623a      	str	r2, [r7, #32]
 800dac2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac4:	69f9      	ldr	r1, [r7, #28]
 800dac6:	6a3a      	ldr	r2, [r7, #32]
 800dac8:	e841 2300 	strex	r3, r2, [r1]
 800dacc:	61bb      	str	r3, [r7, #24]
   return(result);
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1e5      	bne.n	800daa0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2220      	movs	r2, #32
 800dad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2220      	movs	r2, #32
 800dae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2220      	movs	r2, #32
 800dae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2200      	movs	r2, #0
 800daf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800daf4:	2303      	movs	r3, #3
 800daf6:	e010      	b.n	800db1a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	69da      	ldr	r2, [r3, #28]
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	4013      	ands	r3, r2
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	429a      	cmp	r2, r3
 800db06:	bf0c      	ite	eq
 800db08:	2301      	moveq	r3, #1
 800db0a:	2300      	movne	r3, #0
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	461a      	mov	r2, r3
 800db10:	79fb      	ldrb	r3, [r7, #7]
 800db12:	429a      	cmp	r2, r3
 800db14:	f43f af46 	beq.w	800d9a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3770      	adds	r7, #112	; 0x70
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db22:	b480      	push	{r7}
 800db24:	b085      	sub	sp, #20
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db30:	2b01      	cmp	r3, #1
 800db32:	d101      	bne.n	800db38 <HAL_UARTEx_DisableFifoMode+0x16>
 800db34:	2302      	movs	r3, #2
 800db36:	e027      	b.n	800db88 <HAL_UARTEx_DisableFifoMode+0x66>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2224      	movs	r2, #36	; 0x24
 800db44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f022 0201 	bic.w	r2, r2, #1
 800db5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800db66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2220      	movs	r2, #32
 800db7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d101      	bne.n	800dbac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dba8:	2302      	movs	r3, #2
 800dbaa:	e02d      	b.n	800dc08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2224      	movs	r2, #36	; 0x24
 800dbb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f022 0201 	bic.w	r2, r2, #1
 800dbd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	430a      	orrs	r2, r1
 800dbe6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 f84f 	bl	800dc8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	68fa      	ldr	r2, [r7, #12]
 800dbf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2220      	movs	r2, #32
 800dbfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d101      	bne.n	800dc28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc24:	2302      	movs	r3, #2
 800dc26:	e02d      	b.n	800dc84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2224      	movs	r2, #36	; 0x24
 800dc34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f022 0201 	bic.w	r2, r2, #1
 800dc4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	683a      	ldr	r2, [r7, #0]
 800dc60:	430a      	orrs	r2, r1
 800dc62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f000 f811 	bl	800dc8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	68fa      	ldr	r2, [r7, #12]
 800dc70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2220      	movs	r2, #32
 800dc76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b085      	sub	sp, #20
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d108      	bne.n	800dcae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2201      	movs	r2, #1
 800dca8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dcac:	e031      	b.n	800dd12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcae:	2310      	movs	r3, #16
 800dcb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcb2:	2310      	movs	r3, #16
 800dcb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	0e5b      	lsrs	r3, r3, #25
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	f003 0307 	and.w	r3, r3, #7
 800dcc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	689b      	ldr	r3, [r3, #8]
 800dccc:	0f5b      	lsrs	r3, r3, #29
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	f003 0307 	and.w	r3, r3, #7
 800dcd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dcd6:	7bbb      	ldrb	r3, [r7, #14]
 800dcd8:	7b3a      	ldrb	r2, [r7, #12]
 800dcda:	4911      	ldr	r1, [pc, #68]	; (800dd20 <UARTEx_SetNbDataToProcess+0x94>)
 800dcdc:	5c8a      	ldrb	r2, [r1, r2]
 800dcde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dce2:	7b3a      	ldrb	r2, [r7, #12]
 800dce4:	490f      	ldr	r1, [pc, #60]	; (800dd24 <UARTEx_SetNbDataToProcess+0x98>)
 800dce6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dce8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dcf4:	7bfb      	ldrb	r3, [r7, #15]
 800dcf6:	7b7a      	ldrb	r2, [r7, #13]
 800dcf8:	4909      	ldr	r1, [pc, #36]	; (800dd20 <UARTEx_SetNbDataToProcess+0x94>)
 800dcfa:	5c8a      	ldrb	r2, [r1, r2]
 800dcfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd00:	7b7a      	ldrb	r2, [r7, #13]
 800dd02:	4908      	ldr	r1, [pc, #32]	; (800dd24 <UARTEx_SetNbDataToProcess+0x98>)
 800dd04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd06:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd12:	bf00      	nop
 800dd14:	3714      	adds	r7, #20
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop
 800dd20:	0802a4c0 	.word	0x0802a4c0
 800dd24:	0802a4c8 	.word	0x0802a4c8

0800dd28 <__NVIC_SetPriority>:
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	6039      	str	r1, [r7, #0]
 800dd32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800dd34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	db0a      	blt.n	800dd52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	490c      	ldr	r1, [pc, #48]	; (800dd74 <__NVIC_SetPriority+0x4c>)
 800dd42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd46:	0112      	lsls	r2, r2, #4
 800dd48:	b2d2      	uxtb	r2, r2
 800dd4a:	440b      	add	r3, r1
 800dd4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dd50:	e00a      	b.n	800dd68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	4908      	ldr	r1, [pc, #32]	; (800dd78 <__NVIC_SetPriority+0x50>)
 800dd58:	88fb      	ldrh	r3, [r7, #6]
 800dd5a:	f003 030f 	and.w	r3, r3, #15
 800dd5e:	3b04      	subs	r3, #4
 800dd60:	0112      	lsls	r2, r2, #4
 800dd62:	b2d2      	uxtb	r2, r2
 800dd64:	440b      	add	r3, r1
 800dd66:	761a      	strb	r2, [r3, #24]
}
 800dd68:	bf00      	nop
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr
 800dd74:	e000e100 	.word	0xe000e100
 800dd78:	e000ed00 	.word	0xe000ed00

0800dd7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dd80:	4b05      	ldr	r3, [pc, #20]	; (800dd98 <SysTick_Handler+0x1c>)
 800dd82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dd84:	f002 fa9a 	bl	80102bc <xTaskGetSchedulerState>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d001      	beq.n	800dd92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dd8e:	f003 f983 	bl	8011098 <xPortSysTickHandler>
  }
}
 800dd92:	bf00      	nop
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	e000e010 	.word	0xe000e010

0800dd9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dda0:	2100      	movs	r1, #0
 800dda2:	f06f 0004 	mvn.w	r0, #4
 800dda6:	f7ff ffbf 	bl	800dd28 <__NVIC_SetPriority>
#endif
}
 800ddaa:	bf00      	nop
 800ddac:	bd80      	pop	{r7, pc}
	...

0800ddb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddb6:	f3ef 8305 	mrs	r3, IPSR
 800ddba:	603b      	str	r3, [r7, #0]
  return(result);
 800ddbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d003      	beq.n	800ddca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ddc2:	f06f 0305 	mvn.w	r3, #5
 800ddc6:	607b      	str	r3, [r7, #4]
 800ddc8:	e00c      	b.n	800dde4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ddca:	4b0a      	ldr	r3, [pc, #40]	; (800ddf4 <osKernelInitialize+0x44>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d105      	bne.n	800ddde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ddd2:	4b08      	ldr	r3, [pc, #32]	; (800ddf4 <osKernelInitialize+0x44>)
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	607b      	str	r3, [r7, #4]
 800dddc:	e002      	b.n	800dde4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ddde:	f04f 33ff 	mov.w	r3, #4294967295
 800dde2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dde4:	687b      	ldr	r3, [r7, #4]
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	2000083c 	.word	0x2000083c

0800ddf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddfe:	f3ef 8305 	mrs	r3, IPSR
 800de02:	603b      	str	r3, [r7, #0]
  return(result);
 800de04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de06:	2b00      	cmp	r3, #0
 800de08:	d003      	beq.n	800de12 <osKernelStart+0x1a>
    stat = osErrorISR;
 800de0a:	f06f 0305 	mvn.w	r3, #5
 800de0e:	607b      	str	r3, [r7, #4]
 800de10:	e010      	b.n	800de34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800de12:	4b0b      	ldr	r3, [pc, #44]	; (800de40 <osKernelStart+0x48>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2b01      	cmp	r3, #1
 800de18:	d109      	bne.n	800de2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800de1a:	f7ff ffbf 	bl	800dd9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800de1e:	4b08      	ldr	r3, [pc, #32]	; (800de40 <osKernelStart+0x48>)
 800de20:	2202      	movs	r2, #2
 800de22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800de24:	f001 fdee 	bl	800fa04 <vTaskStartScheduler>
      stat = osOK;
 800de28:	2300      	movs	r3, #0
 800de2a:	607b      	str	r3, [r7, #4]
 800de2c:	e002      	b.n	800de34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800de2e:	f04f 33ff 	mov.w	r3, #4294967295
 800de32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800de34:	687b      	ldr	r3, [r7, #4]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	2000083c 	.word	0x2000083c

0800de44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800de44:	b580      	push	{r7, lr}
 800de46:	b08e      	sub	sp, #56	; 0x38
 800de48:	af04      	add	r7, sp, #16
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800de50:	2300      	movs	r3, #0
 800de52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de54:	f3ef 8305 	mrs	r3, IPSR
 800de58:	617b      	str	r3, [r7, #20]
  return(result);
 800de5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d17e      	bne.n	800df5e <osThreadNew+0x11a>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d07b      	beq.n	800df5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800de66:	2380      	movs	r3, #128	; 0x80
 800de68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800de6a:	2318      	movs	r3, #24
 800de6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800de6e:	2300      	movs	r3, #0
 800de70:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800de72:	f04f 33ff 	mov.w	r3, #4294967295
 800de76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d045      	beq.n	800df0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d002      	beq.n	800de8c <osThreadNew+0x48>
        name = attr->name;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	699b      	ldr	r3, [r3, #24]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d002      	beq.n	800de9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	699b      	ldr	r3, [r3, #24]
 800de98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d008      	beq.n	800deb2 <osThreadNew+0x6e>
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	2b38      	cmp	r3, #56	; 0x38
 800dea4:	d805      	bhi.n	800deb2 <osThreadNew+0x6e>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	f003 0301 	and.w	r3, r3, #1
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d001      	beq.n	800deb6 <osThreadNew+0x72>
        return (NULL);
 800deb2:	2300      	movs	r3, #0
 800deb4:	e054      	b.n	800df60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	695b      	ldr	r3, [r3, #20]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	089b      	lsrs	r3, r3, #2
 800dec4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	689b      	ldr	r3, [r3, #8]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00e      	beq.n	800deec <osThreadNew+0xa8>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	2bbb      	cmp	r3, #187	; 0xbb
 800ded4:	d90a      	bls.n	800deec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d006      	beq.n	800deec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	695b      	ldr	r3, [r3, #20]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d002      	beq.n	800deec <osThreadNew+0xa8>
        mem = 1;
 800dee6:	2301      	movs	r3, #1
 800dee8:	61bb      	str	r3, [r7, #24]
 800deea:	e010      	b.n	800df0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	689b      	ldr	r3, [r3, #8]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10c      	bne.n	800df0e <osThreadNew+0xca>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d108      	bne.n	800df0e <osThreadNew+0xca>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d104      	bne.n	800df0e <osThreadNew+0xca>
          mem = 0;
 800df04:	2300      	movs	r3, #0
 800df06:	61bb      	str	r3, [r7, #24]
 800df08:	e001      	b.n	800df0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800df0a:	2300      	movs	r3, #0
 800df0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d110      	bne.n	800df36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df1c:	9202      	str	r2, [sp, #8]
 800df1e:	9301      	str	r3, [sp, #4]
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	6a3a      	ldr	r2, [r7, #32]
 800df28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f001 fb7e 	bl	800f62c <xTaskCreateStatic>
 800df30:	4603      	mov	r3, r0
 800df32:	613b      	str	r3, [r7, #16]
 800df34:	e013      	b.n	800df5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d110      	bne.n	800df5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	b29a      	uxth	r2, r3
 800df40:	f107 0310 	add.w	r3, r7, #16
 800df44:	9301      	str	r3, [sp, #4]
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f001 fbc9 	bl	800f6e6 <xTaskCreate>
 800df54:	4603      	mov	r3, r0
 800df56:	2b01      	cmp	r3, #1
 800df58:	d001      	beq.n	800df5e <osThreadNew+0x11a>
            hTask = NULL;
 800df5a:	2300      	movs	r3, #0
 800df5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800df5e:	693b      	ldr	r3, [r7, #16]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3728      	adds	r7, #40	; 0x28
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df70:	f3ef 8305 	mrs	r3, IPSR
 800df74:	60bb      	str	r3, [r7, #8]
  return(result);
 800df76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d003      	beq.n	800df84 <osDelay+0x1c>
    stat = osErrorISR;
 800df7c:	f06f 0305 	mvn.w	r3, #5
 800df80:	60fb      	str	r3, [r7, #12]
 800df82:	e007      	b.n	800df94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800df84:	2300      	movs	r3, #0
 800df86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d002      	beq.n	800df94 <osDelay+0x2c>
      vTaskDelay(ticks);
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f001 fd04 	bl	800f99c <vTaskDelay>
    }
  }

  return (stat);
 800df94:	68fb      	ldr	r3, [r7, #12]
}
 800df96:	4618      	mov	r0, r3
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800df9e:	b580      	push	{r7, lr}
 800dfa0:	b08a      	sub	sp, #40	; 0x28
 800dfa2:	af02      	add	r7, sp, #8
 800dfa4:	60f8      	str	r0, [r7, #12]
 800dfa6:	60b9      	str	r1, [r7, #8]
 800dfa8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfae:	f3ef 8305 	mrs	r3, IPSR
 800dfb2:	613b      	str	r3, [r7, #16]
  return(result);
 800dfb4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d175      	bne.n	800e0a6 <osSemaphoreNew+0x108>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d072      	beq.n	800e0a6 <osSemaphoreNew+0x108>
 800dfc0:	68ba      	ldr	r2, [r7, #8]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d86e      	bhi.n	800e0a6 <osSemaphoreNew+0x108>
    mem = -1;
 800dfc8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfcc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d015      	beq.n	800e000 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d006      	beq.n	800dfea <osSemaphoreNew+0x4c>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	2b4f      	cmp	r3, #79	; 0x4f
 800dfe2:	d902      	bls.n	800dfea <osSemaphoreNew+0x4c>
        mem = 1;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	61bb      	str	r3, [r7, #24]
 800dfe8:	e00c      	b.n	800e004 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d108      	bne.n	800e004 <osSemaphoreNew+0x66>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d104      	bne.n	800e004 <osSemaphoreNew+0x66>
          mem = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	61bb      	str	r3, [r7, #24]
 800dffe:	e001      	b.n	800e004 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e000:	2300      	movs	r3, #0
 800e002:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e00a:	d04c      	beq.n	800e0a6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d128      	bne.n	800e064 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	2b01      	cmp	r3, #1
 800e016:	d10a      	bne.n	800e02e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	2203      	movs	r2, #3
 800e01e:	9200      	str	r2, [sp, #0]
 800e020:	2200      	movs	r2, #0
 800e022:	2100      	movs	r1, #0
 800e024:	2001      	movs	r0, #1
 800e026:	f000 fb5b 	bl	800e6e0 <xQueueGenericCreateStatic>
 800e02a:	61f8      	str	r0, [r7, #28]
 800e02c:	e005      	b.n	800e03a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e02e:	2203      	movs	r2, #3
 800e030:	2100      	movs	r1, #0
 800e032:	2001      	movs	r0, #1
 800e034:	f000 fbcc 	bl	800e7d0 <xQueueGenericCreate>
 800e038:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d022      	beq.n	800e086 <osSemaphoreNew+0xe8>
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d01f      	beq.n	800e086 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e046:	2300      	movs	r3, #0
 800e048:	2200      	movs	r2, #0
 800e04a:	2100      	movs	r1, #0
 800e04c:	69f8      	ldr	r0, [r7, #28]
 800e04e:	f000 fc87 	bl	800e960 <xQueueGenericSend>
 800e052:	4603      	mov	r3, r0
 800e054:	2b01      	cmp	r3, #1
 800e056:	d016      	beq.n	800e086 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e058:	69f8      	ldr	r0, [r7, #28]
 800e05a:	f001 f913 	bl	800f284 <vQueueDelete>
            hSemaphore = NULL;
 800e05e:	2300      	movs	r3, #0
 800e060:	61fb      	str	r3, [r7, #28]
 800e062:	e010      	b.n	800e086 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	2b01      	cmp	r3, #1
 800e068:	d108      	bne.n	800e07c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	461a      	mov	r2, r3
 800e070:	68b9      	ldr	r1, [r7, #8]
 800e072:	68f8      	ldr	r0, [r7, #12]
 800e074:	f000 fc09 	bl	800e88a <xQueueCreateCountingSemaphoreStatic>
 800e078:	61f8      	str	r0, [r7, #28]
 800e07a:	e004      	b.n	800e086 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e07c:	68b9      	ldr	r1, [r7, #8]
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f000 fc3a 	bl	800e8f8 <xQueueCreateCountingSemaphore>
 800e084:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00c      	beq.n	800e0a6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <osSemaphoreNew+0xfc>
          name = attr->name;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	617b      	str	r3, [r7, #20]
 800e098:	e001      	b.n	800e09e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e09a:	2300      	movs	r3, #0
 800e09c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e09e:	6979      	ldr	r1, [r7, #20]
 800e0a0:	69f8      	ldr	r0, [r7, #28]
 800e0a2:	f001 fa3b 	bl	800f51c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e0a6:	69fb      	ldr	r3, [r7, #28]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3720      	adds	r7, #32
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d103      	bne.n	800e0d0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e0c8:	f06f 0303 	mvn.w	r3, #3
 800e0cc:	617b      	str	r3, [r7, #20]
 800e0ce:	e039      	b.n	800e144 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0d0:	f3ef 8305 	mrs	r3, IPSR
 800e0d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d022      	beq.n	800e122 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d003      	beq.n	800e0ea <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e0e2:	f06f 0303 	mvn.w	r3, #3
 800e0e6:	617b      	str	r3, [r7, #20]
 800e0e8:	e02c      	b.n	800e144 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e0ee:	f107 0308 	add.w	r3, r7, #8
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	2100      	movs	r1, #0
 800e0f6:	6938      	ldr	r0, [r7, #16]
 800e0f8:	f001 f844 	bl	800f184 <xQueueReceiveFromISR>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d003      	beq.n	800e10a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e102:	f06f 0302 	mvn.w	r3, #2
 800e106:	617b      	str	r3, [r7, #20]
 800e108:	e01c      	b.n	800e144 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d019      	beq.n	800e144 <osSemaphoreAcquire+0x94>
 800e110:	4b0f      	ldr	r3, [pc, #60]	; (800e150 <osSemaphoreAcquire+0xa0>)
 800e112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e116:	601a      	str	r2, [r3, #0]
 800e118:	f3bf 8f4f 	dsb	sy
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	e010      	b.n	800e144 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e122:	6839      	ldr	r1, [r7, #0]
 800e124:	6938      	ldr	r0, [r7, #16]
 800e126:	f000 ff21 	bl	800ef6c <xQueueSemaphoreTake>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d009      	beq.n	800e144 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d003      	beq.n	800e13e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e136:	f06f 0301 	mvn.w	r3, #1
 800e13a:	617b      	str	r3, [r7, #20]
 800e13c:	e002      	b.n	800e144 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e13e:	f06f 0302 	mvn.w	r3, #2
 800e142:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e144:	697b      	ldr	r3, [r7, #20]
}
 800e146:	4618      	mov	r0, r3
 800e148:	3718      	adds	r7, #24
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	e000ed04 	.word	0xe000ed04

0800e154 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e154:	b580      	push	{r7, lr}
 800e156:	b086      	sub	sp, #24
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e160:	2300      	movs	r3, #0
 800e162:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d103      	bne.n	800e172 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e16a:	f06f 0303 	mvn.w	r3, #3
 800e16e:	617b      	str	r3, [r7, #20]
 800e170:	e02c      	b.n	800e1cc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e172:	f3ef 8305 	mrs	r3, IPSR
 800e176:	60fb      	str	r3, [r7, #12]
  return(result);
 800e178:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d01a      	beq.n	800e1b4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e17e:	2300      	movs	r3, #0
 800e180:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e182:	f107 0308 	add.w	r3, r7, #8
 800e186:	4619      	mov	r1, r3
 800e188:	6938      	ldr	r0, [r7, #16]
 800e18a:	f000 fd82 	bl	800ec92 <xQueueGiveFromISR>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b01      	cmp	r3, #1
 800e192:	d003      	beq.n	800e19c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e194:	f06f 0302 	mvn.w	r3, #2
 800e198:	617b      	str	r3, [r7, #20]
 800e19a:	e017      	b.n	800e1cc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d014      	beq.n	800e1cc <osSemaphoreRelease+0x78>
 800e1a2:	4b0d      	ldr	r3, [pc, #52]	; (800e1d8 <osSemaphoreRelease+0x84>)
 800e1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1a8:	601a      	str	r2, [r3, #0]
 800e1aa:	f3bf 8f4f 	dsb	sy
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	e00b      	b.n	800e1cc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	6938      	ldr	r0, [r7, #16]
 800e1bc:	f000 fbd0 	bl	800e960 <xQueueGenericSend>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d002      	beq.n	800e1cc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e1c6:	f06f 0302 	mvn.w	r3, #2
 800e1ca:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e1cc:	697b      	ldr	r3, [r7, #20]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3718      	adds	r7, #24
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	e000ed04 	.word	0xe000ed04

0800e1dc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b08a      	sub	sp, #40	; 0x28
 800e1e0:	af02      	add	r7, sp, #8
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1ec:	f3ef 8305 	mrs	r3, IPSR
 800e1f0:	613b      	str	r3, [r7, #16]
  return(result);
 800e1f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d15f      	bne.n	800e2b8 <osMessageQueueNew+0xdc>
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d05c      	beq.n	800e2b8 <osMessageQueueNew+0xdc>
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d059      	beq.n	800e2b8 <osMessageQueueNew+0xdc>
    mem = -1;
 800e204:	f04f 33ff 	mov.w	r3, #4294967295
 800e208:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d029      	beq.n	800e264 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d012      	beq.n	800e23e <osMessageQueueNew+0x62>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	2b4f      	cmp	r3, #79	; 0x4f
 800e21e:	d90e      	bls.n	800e23e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e224:	2b00      	cmp	r3, #0
 800e226:	d00a      	beq.n	800e23e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	695a      	ldr	r2, [r3, #20]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	68b9      	ldr	r1, [r7, #8]
 800e230:	fb01 f303 	mul.w	r3, r1, r3
 800e234:	429a      	cmp	r2, r3
 800e236:	d302      	bcc.n	800e23e <osMessageQueueNew+0x62>
        mem = 1;
 800e238:	2301      	movs	r3, #1
 800e23a:	61bb      	str	r3, [r7, #24]
 800e23c:	e014      	b.n	800e268 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	689b      	ldr	r3, [r3, #8]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d110      	bne.n	800e268 <osMessageQueueNew+0x8c>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	68db      	ldr	r3, [r3, #12]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d10c      	bne.n	800e268 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e252:	2b00      	cmp	r3, #0
 800e254:	d108      	bne.n	800e268 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	695b      	ldr	r3, [r3, #20]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d104      	bne.n	800e268 <osMessageQueueNew+0x8c>
          mem = 0;
 800e25e:	2300      	movs	r3, #0
 800e260:	61bb      	str	r3, [r7, #24]
 800e262:	e001      	b.n	800e268 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e264:	2300      	movs	r3, #0
 800e266:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	d10b      	bne.n	800e286 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	691a      	ldr	r2, [r3, #16]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	2100      	movs	r1, #0
 800e278:	9100      	str	r1, [sp, #0]
 800e27a:	68b9      	ldr	r1, [r7, #8]
 800e27c:	68f8      	ldr	r0, [r7, #12]
 800e27e:	f000 fa2f 	bl	800e6e0 <xQueueGenericCreateStatic>
 800e282:	61f8      	str	r0, [r7, #28]
 800e284:	e008      	b.n	800e298 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d105      	bne.n	800e298 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e28c:	2200      	movs	r2, #0
 800e28e:	68b9      	ldr	r1, [r7, #8]
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f000 fa9d 	bl	800e7d0 <xQueueGenericCreate>
 800e296:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00c      	beq.n	800e2b8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d003      	beq.n	800e2ac <osMessageQueueNew+0xd0>
        name = attr->name;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	617b      	str	r3, [r7, #20]
 800e2aa:	e001      	b.n	800e2b0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e2b0:	6979      	ldr	r1, [r7, #20]
 800e2b2:	69f8      	ldr	r0, [r7, #28]
 800e2b4:	f001 f932 	bl	800f51c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e2b8:	69fb      	ldr	r3, [r7, #28]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3720      	adds	r7, #32
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
	...

0800e2c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b088      	sub	sp, #32
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	60b9      	str	r1, [r7, #8]
 800e2ce:	603b      	str	r3, [r7, #0]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2dc:	f3ef 8305 	mrs	r3, IPSR
 800e2e0:	617b      	str	r3, [r7, #20]
  return(result);
 800e2e2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d028      	beq.n	800e33a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d005      	beq.n	800e2fa <osMessageQueuePut+0x36>
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <osMessageQueuePut+0x36>
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d003      	beq.n	800e302 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e2fa:	f06f 0303 	mvn.w	r3, #3
 800e2fe:	61fb      	str	r3, [r7, #28]
 800e300:	e038      	b.n	800e374 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e302:	2300      	movs	r3, #0
 800e304:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e306:	f107 0210 	add.w	r2, r7, #16
 800e30a:	2300      	movs	r3, #0
 800e30c:	68b9      	ldr	r1, [r7, #8]
 800e30e:	69b8      	ldr	r0, [r7, #24]
 800e310:	f000 fc24 	bl	800eb5c <xQueueGenericSendFromISR>
 800e314:	4603      	mov	r3, r0
 800e316:	2b01      	cmp	r3, #1
 800e318:	d003      	beq.n	800e322 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e31a:	f06f 0302 	mvn.w	r3, #2
 800e31e:	61fb      	str	r3, [r7, #28]
 800e320:	e028      	b.n	800e374 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d025      	beq.n	800e374 <osMessageQueuePut+0xb0>
 800e328:	4b15      	ldr	r3, [pc, #84]	; (800e380 <osMessageQueuePut+0xbc>)
 800e32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e32e:	601a      	str	r2, [r3, #0]
 800e330:	f3bf 8f4f 	dsb	sy
 800e334:	f3bf 8f6f 	isb	sy
 800e338:	e01c      	b.n	800e374 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <osMessageQueuePut+0x82>
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d103      	bne.n	800e34e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e346:	f06f 0303 	mvn.w	r3, #3
 800e34a:	61fb      	str	r3, [r7, #28]
 800e34c:	e012      	b.n	800e374 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e34e:	2300      	movs	r3, #0
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	68b9      	ldr	r1, [r7, #8]
 800e354:	69b8      	ldr	r0, [r7, #24]
 800e356:	f000 fb03 	bl	800e960 <xQueueGenericSend>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d009      	beq.n	800e374 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d003      	beq.n	800e36e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e366:	f06f 0301 	mvn.w	r3, #1
 800e36a:	61fb      	str	r3, [r7, #28]
 800e36c:	e002      	b.n	800e374 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e36e:	f06f 0302 	mvn.w	r3, #2
 800e372:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e374:	69fb      	ldr	r3, [r7, #28]
}
 800e376:	4618      	mov	r0, r3
 800e378:	3720      	adds	r7, #32
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	e000ed04 	.word	0xe000ed04

0800e384 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e384:	b580      	push	{r7, lr}
 800e386:	b088      	sub	sp, #32
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
 800e390:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e396:	2300      	movs	r3, #0
 800e398:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e39a:	f3ef 8305 	mrs	r3, IPSR
 800e39e:	617b      	str	r3, [r7, #20]
  return(result);
 800e3a0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d028      	beq.n	800e3f8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d005      	beq.n	800e3b8 <osMessageQueueGet+0x34>
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d002      	beq.n	800e3b8 <osMessageQueueGet+0x34>
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d003      	beq.n	800e3c0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e3b8:	f06f 0303 	mvn.w	r3, #3
 800e3bc:	61fb      	str	r3, [r7, #28]
 800e3be:	e037      	b.n	800e430 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e3c4:	f107 0310 	add.w	r3, r7, #16
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	68b9      	ldr	r1, [r7, #8]
 800e3cc:	69b8      	ldr	r0, [r7, #24]
 800e3ce:	f000 fed9 	bl	800f184 <xQueueReceiveFromISR>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d003      	beq.n	800e3e0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e3d8:	f06f 0302 	mvn.w	r3, #2
 800e3dc:	61fb      	str	r3, [r7, #28]
 800e3de:	e027      	b.n	800e430 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d024      	beq.n	800e430 <osMessageQueueGet+0xac>
 800e3e6:	4b15      	ldr	r3, [pc, #84]	; (800e43c <osMessageQueueGet+0xb8>)
 800e3e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ec:	601a      	str	r2, [r3, #0]
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	e01b      	b.n	800e430 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d002      	beq.n	800e404 <osMessageQueueGet+0x80>
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d103      	bne.n	800e40c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e404:	f06f 0303 	mvn.w	r3, #3
 800e408:	61fb      	str	r3, [r7, #28]
 800e40a:	e011      	b.n	800e430 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e40c:	683a      	ldr	r2, [r7, #0]
 800e40e:	68b9      	ldr	r1, [r7, #8]
 800e410:	69b8      	ldr	r0, [r7, #24]
 800e412:	f000 fccb 	bl	800edac <xQueueReceive>
 800e416:	4603      	mov	r3, r0
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d009      	beq.n	800e430 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e422:	f06f 0301 	mvn.w	r3, #1
 800e426:	61fb      	str	r3, [r7, #28]
 800e428:	e002      	b.n	800e430 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e42a:	f06f 0302 	mvn.w	r3, #2
 800e42e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e430:	69fb      	ldr	r3, [r7, #28]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3720      	adds	r7, #32
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	e000ed04 	.word	0xe000ed04

0800e440 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e440:	b480      	push	{r7}
 800e442:	b085      	sub	sp, #20
 800e444:	af00      	add	r7, sp, #0
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	4a07      	ldr	r2, [pc, #28]	; (800e46c <vApplicationGetIdleTaskMemory+0x2c>)
 800e450:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	4a06      	ldr	r2, [pc, #24]	; (800e470 <vApplicationGetIdleTaskMemory+0x30>)
 800e456:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2280      	movs	r2, #128	; 0x80
 800e45c:	601a      	str	r2, [r3, #0]
}
 800e45e:	bf00      	nop
 800e460:	3714      	adds	r7, #20
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	20000840 	.word	0x20000840
 800e470:	200008fc 	.word	0x200008fc

0800e474 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e474:	b480      	push	{r7}
 800e476:	b085      	sub	sp, #20
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	4a07      	ldr	r2, [pc, #28]	; (800e4a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800e484:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	4a06      	ldr	r2, [pc, #24]	; (800e4a4 <vApplicationGetTimerTaskMemory+0x30>)
 800e48a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e492:	601a      	str	r2, [r3, #0]
}
 800e494:	bf00      	nop
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr
 800e4a0:	20000afc 	.word	0x20000afc
 800e4a4:	20000bb8 	.word	0x20000bb8

0800e4a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f103 0208 	add.w	r2, r3, #8
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f103 0208 	add.w	r2, r3, #8
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f103 0208 	add.w	r2, r3, #8
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e4dc:	bf00      	nop
 800e4de:	370c      	adds	r7, #12
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e4f6:	bf00      	nop
 800e4f8:	370c      	adds	r7, #12
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr

0800e502 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e502:	b480      	push	{r7}
 800e504:	b085      	sub	sp, #20
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
 800e50a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	689a      	ldr	r2, [r3, #8]
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	689b      	ldr	r3, [r3, #8]
 800e524:	683a      	ldr	r2, [r7, #0]
 800e526:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	683a      	ldr	r2, [r7, #0]
 800e52c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	1c5a      	adds	r2, r3, #1
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	601a      	str	r2, [r3, #0]
}
 800e53e:	bf00      	nop
 800e540:	3714      	adds	r7, #20
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr

0800e54a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e54a:	b480      	push	{r7}
 800e54c:	b085      	sub	sp, #20
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
 800e552:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e560:	d103      	bne.n	800e56a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	691b      	ldr	r3, [r3, #16]
 800e566:	60fb      	str	r3, [r7, #12]
 800e568:	e00c      	b.n	800e584 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	3308      	adds	r3, #8
 800e56e:	60fb      	str	r3, [r7, #12]
 800e570:	e002      	b.n	800e578 <vListInsert+0x2e>
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	60fb      	str	r3, [r7, #12]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	68ba      	ldr	r2, [r7, #8]
 800e580:	429a      	cmp	r2, r3
 800e582:	d2f6      	bcs.n	800e572 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	685a      	ldr	r2, [r3, #4]
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	683a      	ldr	r2, [r7, #0]
 800e592:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	683a      	ldr	r2, [r7, #0]
 800e59e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	601a      	str	r2, [r3, #0]
}
 800e5b0:	bf00      	nop
 800e5b2:	3714      	adds	r7, #20
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr

0800e5bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b085      	sub	sp, #20
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	6892      	ldr	r2, [r2, #8]
 800e5d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	6852      	ldr	r2, [r2, #4]
 800e5dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d103      	bne.n	800e5f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	689a      	ldr	r2, [r3, #8]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	1e5a      	subs	r2, r3, #1
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
}
 800e604:	4618      	mov	r0, r3
 800e606:	3714      	adds	r7, #20
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10a      	bne.n	800e63a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e636:	bf00      	nop
 800e638:	e7fe      	b.n	800e638 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e63a:	f002 fc9b 	bl	8010f74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e646:	68f9      	ldr	r1, [r7, #12]
 800e648:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e64a:	fb01 f303 	mul.w	r3, r1, r3
 800e64e:	441a      	add	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2200      	movs	r2, #0
 800e658:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e66a:	3b01      	subs	r3, #1
 800e66c:	68f9      	ldr	r1, [r7, #12]
 800e66e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e670:	fb01 f303 	mul.w	r3, r1, r3
 800e674:	441a      	add	r2, r3
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	22ff      	movs	r2, #255	; 0xff
 800e67e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	22ff      	movs	r2, #255	; 0xff
 800e686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d114      	bne.n	800e6ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	691b      	ldr	r3, [r3, #16]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d01a      	beq.n	800e6ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	3310      	adds	r3, #16
 800e69c:	4618      	mov	r0, r3
 800e69e:	f001 fc4b 	bl	800ff38 <xTaskRemoveFromEventList>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d012      	beq.n	800e6ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e6a8:	4b0c      	ldr	r3, [pc, #48]	; (800e6dc <xQueueGenericReset+0xcc>)
 800e6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6ae:	601a      	str	r2, [r3, #0]
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	f3bf 8f6f 	isb	sy
 800e6b8:	e009      	b.n	800e6ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	3310      	adds	r3, #16
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7ff fef2 	bl	800e4a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	3324      	adds	r3, #36	; 0x24
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7ff feed 	bl	800e4a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e6ce:	f002 fc81 	bl	8010fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e6d2:	2301      	movs	r3, #1
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	e000ed04 	.word	0xe000ed04

0800e6e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b08e      	sub	sp, #56	; 0x38
 800e6e4:	af02      	add	r7, sp, #8
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
 800e6ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d10a      	bne.n	800e70a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f8:	f383 8811 	msr	BASEPRI, r3
 800e6fc:	f3bf 8f6f 	isb	sy
 800e700:	f3bf 8f4f 	dsb	sy
 800e704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e706:	bf00      	nop
 800e708:	e7fe      	b.n	800e708 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d10a      	bne.n	800e726 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e714:	f383 8811 	msr	BASEPRI, r3
 800e718:	f3bf 8f6f 	isb	sy
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e722:	bf00      	nop
 800e724:	e7fe      	b.n	800e724 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d002      	beq.n	800e732 <xQueueGenericCreateStatic+0x52>
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d001      	beq.n	800e736 <xQueueGenericCreateStatic+0x56>
 800e732:	2301      	movs	r3, #1
 800e734:	e000      	b.n	800e738 <xQueueGenericCreateStatic+0x58>
 800e736:	2300      	movs	r3, #0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d10a      	bne.n	800e752 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e740:	f383 8811 	msr	BASEPRI, r3
 800e744:	f3bf 8f6f 	isb	sy
 800e748:	f3bf 8f4f 	dsb	sy
 800e74c:	623b      	str	r3, [r7, #32]
}
 800e74e:	bf00      	nop
 800e750:	e7fe      	b.n	800e750 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d102      	bne.n	800e75e <xQueueGenericCreateStatic+0x7e>
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d101      	bne.n	800e762 <xQueueGenericCreateStatic+0x82>
 800e75e:	2301      	movs	r3, #1
 800e760:	e000      	b.n	800e764 <xQueueGenericCreateStatic+0x84>
 800e762:	2300      	movs	r3, #0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d10a      	bne.n	800e77e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76c:	f383 8811 	msr	BASEPRI, r3
 800e770:	f3bf 8f6f 	isb	sy
 800e774:	f3bf 8f4f 	dsb	sy
 800e778:	61fb      	str	r3, [r7, #28]
}
 800e77a:	bf00      	nop
 800e77c:	e7fe      	b.n	800e77c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e77e:	2350      	movs	r3, #80	; 0x50
 800e780:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	2b50      	cmp	r3, #80	; 0x50
 800e786:	d00a      	beq.n	800e79e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78c:	f383 8811 	msr	BASEPRI, r3
 800e790:	f3bf 8f6f 	isb	sy
 800e794:	f3bf 8f4f 	dsb	sy
 800e798:	61bb      	str	r3, [r7, #24]
}
 800e79a:	bf00      	nop
 800e79c:	e7fe      	b.n	800e79c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e79e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00d      	beq.n	800e7c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e7b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	68b9      	ldr	r1, [r7, #8]
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f000 f83f 	bl	800e844 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3730      	adds	r7, #48	; 0x30
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b08a      	sub	sp, #40	; 0x28
 800e7d4:	af02      	add	r7, sp, #8
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	4613      	mov	r3, r2
 800e7dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10a      	bne.n	800e7fa <xQueueGenericCreate+0x2a>
	__asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	f383 8811 	msr	BASEPRI, r3
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	613b      	str	r3, [r7, #16]
}
 800e7f6:	bf00      	nop
 800e7f8:	e7fe      	b.n	800e7f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	68ba      	ldr	r2, [r7, #8]
 800e7fe:	fb02 f303 	mul.w	r3, r2, r3
 800e802:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	3350      	adds	r3, #80	; 0x50
 800e808:	4618      	mov	r0, r3
 800e80a:	f002 fcd5 	bl	80111b8 <pvPortMalloc>
 800e80e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d011      	beq.n	800e83a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	3350      	adds	r3, #80	; 0x50
 800e81e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	2200      	movs	r2, #0
 800e824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e828:	79fa      	ldrb	r2, [r7, #7]
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	4613      	mov	r3, r2
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	68b9      	ldr	r1, [r7, #8]
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f000 f805 	bl	800e844 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e83a:	69bb      	ldr	r3, [r7, #24]
	}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3720      	adds	r7, #32
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
 800e850:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d103      	bne.n	800e860 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e858:	69bb      	ldr	r3, [r7, #24]
 800e85a:	69ba      	ldr	r2, [r7, #24]
 800e85c:	601a      	str	r2, [r3, #0]
 800e85e:	e002      	b.n	800e866 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e872:	2101      	movs	r1, #1
 800e874:	69b8      	ldr	r0, [r7, #24]
 800e876:	f7ff fecb 	bl	800e610 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	78fa      	ldrb	r2, [r7, #3]
 800e87e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e882:	bf00      	nop
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}

0800e88a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b08a      	sub	sp, #40	; 0x28
 800e88e:	af02      	add	r7, sp, #8
 800e890:	60f8      	str	r0, [r7, #12]
 800e892:	60b9      	str	r1, [r7, #8]
 800e894:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d10a      	bne.n	800e8b2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a0:	f383 8811 	msr	BASEPRI, r3
 800e8a4:	f3bf 8f6f 	isb	sy
 800e8a8:	f3bf 8f4f 	dsb	sy
 800e8ac:	61bb      	str	r3, [r7, #24]
}
 800e8ae:	bf00      	nop
 800e8b0:	e7fe      	b.n	800e8b0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e8b2:	68ba      	ldr	r2, [r7, #8]
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d90a      	bls.n	800e8d0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	617b      	str	r3, [r7, #20]
}
 800e8cc:	bf00      	nop
 800e8ce:	e7fe      	b.n	800e8ce <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	2100      	movs	r1, #0
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f7ff ff00 	bl	800e6e0 <xQueueGenericCreateStatic>
 800e8e0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d002      	beq.n	800e8ee <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	68ba      	ldr	r2, [r7, #8]
 800e8ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e8ee:	69fb      	ldr	r3, [r7, #28]
	}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3720      	adds	r7, #32
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b086      	sub	sp, #24
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d10a      	bne.n	800e91e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90c:	f383 8811 	msr	BASEPRI, r3
 800e910:	f3bf 8f6f 	isb	sy
 800e914:	f3bf 8f4f 	dsb	sy
 800e918:	613b      	str	r3, [r7, #16]
}
 800e91a:	bf00      	nop
 800e91c:	e7fe      	b.n	800e91c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e91e:	683a      	ldr	r2, [r7, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	429a      	cmp	r2, r3
 800e924:	d90a      	bls.n	800e93c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92a:	f383 8811 	msr	BASEPRI, r3
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	f3bf 8f4f 	dsb	sy
 800e936:	60fb      	str	r3, [r7, #12]
}
 800e938:	bf00      	nop
 800e93a:	e7fe      	b.n	800e93a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e93c:	2202      	movs	r2, #2
 800e93e:	2100      	movs	r1, #0
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f7ff ff45 	bl	800e7d0 <xQueueGenericCreate>
 800e946:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d002      	beq.n	800e954 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	683a      	ldr	r2, [r7, #0]
 800e952:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e954:	697b      	ldr	r3, [r7, #20]
	}
 800e956:	4618      	mov	r0, r3
 800e958:	3718      	adds	r7, #24
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
	...

0800e960 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b08e      	sub	sp, #56	; 0x38
 800e964:	af00      	add	r7, sp, #0
 800e966:	60f8      	str	r0, [r7, #12]
 800e968:	60b9      	str	r1, [r7, #8]
 800e96a:	607a      	str	r2, [r7, #4]
 800e96c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e96e:	2300      	movs	r3, #0
 800e970:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10a      	bne.n	800e992 <xQueueGenericSend+0x32>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e98e:	bf00      	nop
 800e990:	e7fe      	b.n	800e990 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d103      	bne.n	800e9a0 <xQueueGenericSend+0x40>
 800e998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d101      	bne.n	800e9a4 <xQueueGenericSend+0x44>
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	e000      	b.n	800e9a6 <xQueueGenericSend+0x46>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d10a      	bne.n	800e9c0 <xQueueGenericSend+0x60>
	__asm volatile
 800e9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ae:	f383 8811 	msr	BASEPRI, r3
 800e9b2:	f3bf 8f6f 	isb	sy
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e9bc:	bf00      	nop
 800e9be:	e7fe      	b.n	800e9be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	2b02      	cmp	r3, #2
 800e9c4:	d103      	bne.n	800e9ce <xQueueGenericSend+0x6e>
 800e9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d101      	bne.n	800e9d2 <xQueueGenericSend+0x72>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e000      	b.n	800e9d4 <xQueueGenericSend+0x74>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d10a      	bne.n	800e9ee <xQueueGenericSend+0x8e>
	__asm volatile
 800e9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9dc:	f383 8811 	msr	BASEPRI, r3
 800e9e0:	f3bf 8f6f 	isb	sy
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	623b      	str	r3, [r7, #32]
}
 800e9ea:	bf00      	nop
 800e9ec:	e7fe      	b.n	800e9ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9ee:	f001 fc65 	bl	80102bc <xTaskGetSchedulerState>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d102      	bne.n	800e9fe <xQueueGenericSend+0x9e>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d101      	bne.n	800ea02 <xQueueGenericSend+0xa2>
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e000      	b.n	800ea04 <xQueueGenericSend+0xa4>
 800ea02:	2300      	movs	r3, #0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10a      	bne.n	800ea1e <xQueueGenericSend+0xbe>
	__asm volatile
 800ea08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0c:	f383 8811 	msr	BASEPRI, r3
 800ea10:	f3bf 8f6f 	isb	sy
 800ea14:	f3bf 8f4f 	dsb	sy
 800ea18:	61fb      	str	r3, [r7, #28]
}
 800ea1a:	bf00      	nop
 800ea1c:	e7fe      	b.n	800ea1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea1e:	f002 faa9 	bl	8010f74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d302      	bcc.n	800ea34 <xQueueGenericSend+0xd4>
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	2b02      	cmp	r3, #2
 800ea32:	d129      	bne.n	800ea88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea34:	683a      	ldr	r2, [r7, #0]
 800ea36:	68b9      	ldr	r1, [r7, #8]
 800ea38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea3a:	f000 fc5e 	bl	800f2fa <prvCopyDataToQueue>
 800ea3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d010      	beq.n	800ea6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4a:	3324      	adds	r3, #36	; 0x24
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f001 fa73 	bl	800ff38 <xTaskRemoveFromEventList>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d013      	beq.n	800ea80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ea58:	4b3f      	ldr	r3, [pc, #252]	; (800eb58 <xQueueGenericSend+0x1f8>)
 800ea5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea5e:	601a      	str	r2, [r3, #0]
 800ea60:	f3bf 8f4f 	dsb	sy
 800ea64:	f3bf 8f6f 	isb	sy
 800ea68:	e00a      	b.n	800ea80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ea6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d007      	beq.n	800ea80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ea70:	4b39      	ldr	r3, [pc, #228]	; (800eb58 <xQueueGenericSend+0x1f8>)
 800ea72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea76:	601a      	str	r2, [r3, #0]
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ea80:	f002 faa8 	bl	8010fd4 <vPortExitCritical>
				return pdPASS;
 800ea84:	2301      	movs	r3, #1
 800ea86:	e063      	b.n	800eb50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d103      	bne.n	800ea96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea8e:	f002 faa1 	bl	8010fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ea92:	2300      	movs	r3, #0
 800ea94:	e05c      	b.n	800eb50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d106      	bne.n	800eaaa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea9c:	f107 0314 	add.w	r3, r7, #20
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f001 faad 	bl	8010000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eaaa:	f002 fa93 	bl	8010fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eaae:	f001 f819 	bl	800fae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eab2:	f002 fa5f 	bl	8010f74 <vPortEnterCritical>
 800eab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eabc:	b25b      	sxtb	r3, r3
 800eabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac2:	d103      	bne.n	800eacc <xQueueGenericSend+0x16c>
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	2200      	movs	r2, #0
 800eac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ead2:	b25b      	sxtb	r3, r3
 800ead4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead8:	d103      	bne.n	800eae2 <xQueueGenericSend+0x182>
 800eada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eadc:	2200      	movs	r2, #0
 800eade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eae2:	f002 fa77 	bl	8010fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eae6:	1d3a      	adds	r2, r7, #4
 800eae8:	f107 0314 	add.w	r3, r7, #20
 800eaec:	4611      	mov	r1, r2
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f001 fa9c 	bl	801002c <xTaskCheckForTimeOut>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d124      	bne.n	800eb44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eafa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eafc:	f000 fcf5 	bl	800f4ea <prvIsQueueFull>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d018      	beq.n	800eb38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb08:	3310      	adds	r3, #16
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	4611      	mov	r1, r2
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f001 f9c2 	bl	800fe98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eb14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb16:	f000 fc80 	bl	800f41a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eb1a:	f000 fff1 	bl	800fb00 <xTaskResumeAll>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f47f af7c 	bne.w	800ea1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eb26:	4b0c      	ldr	r3, [pc, #48]	; (800eb58 <xQueueGenericSend+0x1f8>)
 800eb28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb2c:	601a      	str	r2, [r3, #0]
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	e772      	b.n	800ea1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eb38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb3a:	f000 fc6e 	bl	800f41a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb3e:	f000 ffdf 	bl	800fb00 <xTaskResumeAll>
 800eb42:	e76c      	b.n	800ea1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eb44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb46:	f000 fc68 	bl	800f41a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb4a:	f000 ffd9 	bl	800fb00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eb4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3738      	adds	r7, #56	; 0x38
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	e000ed04 	.word	0xe000ed04

0800eb5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b090      	sub	sp, #64	; 0x40
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
 800eb68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800eb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10a      	bne.n	800eb8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800eb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb86:	bf00      	nop
 800eb88:	e7fe      	b.n	800eb88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d103      	bne.n	800eb98 <xQueueGenericSendFromISR+0x3c>
 800eb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <xQueueGenericSendFromISR+0x40>
 800eb98:	2301      	movs	r3, #1
 800eb9a:	e000      	b.n	800eb9e <xQueueGenericSendFromISR+0x42>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d10a      	bne.n	800ebb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800eba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba6:	f383 8811 	msr	BASEPRI, r3
 800ebaa:	f3bf 8f6f 	isb	sy
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ebb4:	bf00      	nop
 800ebb6:	e7fe      	b.n	800ebb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d103      	bne.n	800ebc6 <xQueueGenericSendFromISR+0x6a>
 800ebbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d101      	bne.n	800ebca <xQueueGenericSendFromISR+0x6e>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e000      	b.n	800ebcc <xQueueGenericSendFromISR+0x70>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d10a      	bne.n	800ebe6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ebd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd4:	f383 8811 	msr	BASEPRI, r3
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	623b      	str	r3, [r7, #32]
}
 800ebe2:	bf00      	nop
 800ebe4:	e7fe      	b.n	800ebe4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ebe6:	f002 faa7 	bl	8011138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ebea:	f3ef 8211 	mrs	r2, BASEPRI
 800ebee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf2:	f383 8811 	msr	BASEPRI, r3
 800ebf6:	f3bf 8f6f 	isb	sy
 800ebfa:	f3bf 8f4f 	dsb	sy
 800ebfe:	61fa      	str	r2, [r7, #28]
 800ec00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ec02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d302      	bcc.n	800ec18 <xQueueGenericSendFromISR+0xbc>
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d12f      	bne.n	800ec78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ec18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec28:	683a      	ldr	r2, [r7, #0]
 800ec2a:	68b9      	ldr	r1, [r7, #8]
 800ec2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec2e:	f000 fb64 	bl	800f2fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ec32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ec36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec3a:	d112      	bne.n	800ec62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d016      	beq.n	800ec72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec46:	3324      	adds	r3, #36	; 0x24
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f001 f975 	bl	800ff38 <xTaskRemoveFromEventList>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00e      	beq.n	800ec72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d00b      	beq.n	800ec72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	601a      	str	r2, [r3, #0]
 800ec60:	e007      	b.n	800ec72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ec62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ec66:	3301      	adds	r3, #1
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	b25a      	sxtb	r2, r3
 800ec6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ec72:	2301      	movs	r3, #1
 800ec74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ec76:	e001      	b.n	800ec7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ec86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3740      	adds	r7, #64	; 0x40
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b08e      	sub	sp, #56	; 0x38
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
 800ec9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800eca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d10a      	bne.n	800ecbc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800eca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecaa:	f383 8811 	msr	BASEPRI, r3
 800ecae:	f3bf 8f6f 	isb	sy
 800ecb2:	f3bf 8f4f 	dsb	sy
 800ecb6:	623b      	str	r3, [r7, #32]
}
 800ecb8:	bf00      	nop
 800ecba:	e7fe      	b.n	800ecba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d00a      	beq.n	800ecda <xQueueGiveFromISR+0x48>
	__asm volatile
 800ecc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc8:	f383 8811 	msr	BASEPRI, r3
 800eccc:	f3bf 8f6f 	isb	sy
 800ecd0:	f3bf 8f4f 	dsb	sy
 800ecd4:	61fb      	str	r3, [r7, #28]
}
 800ecd6:	bf00      	nop
 800ecd8:	e7fe      	b.n	800ecd8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ecda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d103      	bne.n	800ecea <xQueueGiveFromISR+0x58>
 800ece2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d101      	bne.n	800ecee <xQueueGiveFromISR+0x5c>
 800ecea:	2301      	movs	r3, #1
 800ecec:	e000      	b.n	800ecf0 <xQueueGiveFromISR+0x5e>
 800ecee:	2300      	movs	r3, #0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d10a      	bne.n	800ed0a <xQueueGiveFromISR+0x78>
	__asm volatile
 800ecf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf8:	f383 8811 	msr	BASEPRI, r3
 800ecfc:	f3bf 8f6f 	isb	sy
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	61bb      	str	r3, [r7, #24]
}
 800ed06:	bf00      	nop
 800ed08:	e7fe      	b.n	800ed08 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed0a:	f002 fa15 	bl	8011138 <vPortValidateInterruptPriority>
	__asm volatile
 800ed0e:	f3ef 8211 	mrs	r2, BASEPRI
 800ed12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed16:	f383 8811 	msr	BASEPRI, r3
 800ed1a:	f3bf 8f6f 	isb	sy
 800ed1e:	f3bf 8f4f 	dsb	sy
 800ed22:	617a      	str	r2, [r7, #20]
 800ed24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ed26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ed30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d22b      	bcs.n	800ed92 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed46:	1c5a      	adds	r2, r3, #1
 800ed48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed54:	d112      	bne.n	800ed7c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d016      	beq.n	800ed8c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed60:	3324      	adds	r3, #36	; 0x24
 800ed62:	4618      	mov	r0, r3
 800ed64:	f001 f8e8 	bl	800ff38 <xTaskRemoveFromEventList>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00e      	beq.n	800ed8c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d00b      	beq.n	800ed8c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	2201      	movs	r2, #1
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	e007      	b.n	800ed8c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed80:	3301      	adds	r3, #1
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	b25a      	sxtb	r2, r3
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ed90:	e001      	b.n	800ed96 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ed92:	2300      	movs	r3, #0
 800ed94:	637b      	str	r3, [r7, #52]	; 0x34
 800ed96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f383 8811 	msr	BASEPRI, r3
}
 800eda0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3738      	adds	r7, #56	; 0x38
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b08c      	sub	sp, #48	; 0x30
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800edb8:	2300      	movs	r3, #0
 800edba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d10a      	bne.n	800eddc <xQueueReceive+0x30>
	__asm volatile
 800edc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edca:	f383 8811 	msr	BASEPRI, r3
 800edce:	f3bf 8f6f 	isb	sy
 800edd2:	f3bf 8f4f 	dsb	sy
 800edd6:	623b      	str	r3, [r7, #32]
}
 800edd8:	bf00      	nop
 800edda:	e7fe      	b.n	800edda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d103      	bne.n	800edea <xQueueReceive+0x3e>
 800ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d101      	bne.n	800edee <xQueueReceive+0x42>
 800edea:	2301      	movs	r3, #1
 800edec:	e000      	b.n	800edf0 <xQueueReceive+0x44>
 800edee:	2300      	movs	r3, #0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d10a      	bne.n	800ee0a <xQueueReceive+0x5e>
	__asm volatile
 800edf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	61fb      	str	r3, [r7, #28]
}
 800ee06:	bf00      	nop
 800ee08:	e7fe      	b.n	800ee08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee0a:	f001 fa57 	bl	80102bc <xTaskGetSchedulerState>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d102      	bne.n	800ee1a <xQueueReceive+0x6e>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d101      	bne.n	800ee1e <xQueueReceive+0x72>
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	e000      	b.n	800ee20 <xQueueReceive+0x74>
 800ee1e:	2300      	movs	r3, #0
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10a      	bne.n	800ee3a <xQueueReceive+0x8e>
	__asm volatile
 800ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	61bb      	str	r3, [r7, #24]
}
 800ee36:	bf00      	nop
 800ee38:	e7fe      	b.n	800ee38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee3a:	f002 f89b 	bl	8010f74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d01f      	beq.n	800ee8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee4a:	68b9      	ldr	r1, [r7, #8]
 800ee4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee4e:	f000 fabe 	bl	800f3ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee54:	1e5a      	subs	r2, r3, #1
 800ee56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d00f      	beq.n	800ee82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee64:	3310      	adds	r3, #16
 800ee66:	4618      	mov	r0, r3
 800ee68:	f001 f866 	bl	800ff38 <xTaskRemoveFromEventList>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d007      	beq.n	800ee82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ee72:	4b3d      	ldr	r3, [pc, #244]	; (800ef68 <xQueueReceive+0x1bc>)
 800ee74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee78:	601a      	str	r2, [r3, #0]
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ee82:	f002 f8a7 	bl	8010fd4 <vPortExitCritical>
				return pdPASS;
 800ee86:	2301      	movs	r3, #1
 800ee88:	e069      	b.n	800ef5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d103      	bne.n	800ee98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee90:	f002 f8a0 	bl	8010fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ee94:	2300      	movs	r3, #0
 800ee96:	e062      	b.n	800ef5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d106      	bne.n	800eeac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee9e:	f107 0310 	add.w	r3, r7, #16
 800eea2:	4618      	mov	r0, r3
 800eea4:	f001 f8ac 	bl	8010000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eeac:	f002 f892 	bl	8010fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eeb0:	f000 fe18 	bl	800fae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eeb4:	f002 f85e 	bl	8010f74 <vPortEnterCritical>
 800eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eebe:	b25b      	sxtb	r3, r3
 800eec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eec4:	d103      	bne.n	800eece <xQueueReceive+0x122>
 800eec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec8:	2200      	movs	r2, #0
 800eeca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eed4:	b25b      	sxtb	r3, r3
 800eed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeda:	d103      	bne.n	800eee4 <xQueueReceive+0x138>
 800eedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eede:	2200      	movs	r2, #0
 800eee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eee4:	f002 f876 	bl	8010fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eee8:	1d3a      	adds	r2, r7, #4
 800eeea:	f107 0310 	add.w	r3, r7, #16
 800eeee:	4611      	mov	r1, r2
 800eef0:	4618      	mov	r0, r3
 800eef2:	f001 f89b 	bl	801002c <xTaskCheckForTimeOut>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d123      	bne.n	800ef44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eefc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eefe:	f000 fade 	bl	800f4be <prvIsQueueEmpty>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d017      	beq.n	800ef38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0a:	3324      	adds	r3, #36	; 0x24
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	4611      	mov	r1, r2
 800ef10:	4618      	mov	r0, r3
 800ef12:	f000 ffc1 	bl	800fe98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef18:	f000 fa7f 	bl	800f41a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef1c:	f000 fdf0 	bl	800fb00 <xTaskResumeAll>
 800ef20:	4603      	mov	r3, r0
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d189      	bne.n	800ee3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ef26:	4b10      	ldr	r3, [pc, #64]	; (800ef68 <xQueueReceive+0x1bc>)
 800ef28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef2c:	601a      	str	r2, [r3, #0]
 800ef2e:	f3bf 8f4f 	dsb	sy
 800ef32:	f3bf 8f6f 	isb	sy
 800ef36:	e780      	b.n	800ee3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ef38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef3a:	f000 fa6e 	bl	800f41a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef3e:	f000 fddf 	bl	800fb00 <xTaskResumeAll>
 800ef42:	e77a      	b.n	800ee3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ef44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef46:	f000 fa68 	bl	800f41a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef4a:	f000 fdd9 	bl	800fb00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef50:	f000 fab5 	bl	800f4be <prvIsQueueEmpty>
 800ef54:	4603      	mov	r3, r0
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f43f af6f 	beq.w	800ee3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3730      	adds	r7, #48	; 0x30
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	e000ed04 	.word	0xe000ed04

0800ef6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b08e      	sub	sp, #56	; 0x38
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ef76:	2300      	movs	r3, #0
 800ef78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ef82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d10a      	bne.n	800ef9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ef88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8c:	f383 8811 	msr	BASEPRI, r3
 800ef90:	f3bf 8f6f 	isb	sy
 800ef94:	f3bf 8f4f 	dsb	sy
 800ef98:	623b      	str	r3, [r7, #32]
}
 800ef9a:	bf00      	nop
 800ef9c:	e7fe      	b.n	800ef9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d00a      	beq.n	800efbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800efa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efaa:	f383 8811 	msr	BASEPRI, r3
 800efae:	f3bf 8f6f 	isb	sy
 800efb2:	f3bf 8f4f 	dsb	sy
 800efb6:	61fb      	str	r3, [r7, #28]
}
 800efb8:	bf00      	nop
 800efba:	e7fe      	b.n	800efba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800efbc:	f001 f97e 	bl	80102bc <xTaskGetSchedulerState>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d102      	bne.n	800efcc <xQueueSemaphoreTake+0x60>
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d101      	bne.n	800efd0 <xQueueSemaphoreTake+0x64>
 800efcc:	2301      	movs	r3, #1
 800efce:	e000      	b.n	800efd2 <xQueueSemaphoreTake+0x66>
 800efd0:	2300      	movs	r3, #0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d10a      	bne.n	800efec <xQueueSemaphoreTake+0x80>
	__asm volatile
 800efd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efda:	f383 8811 	msr	BASEPRI, r3
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	f3bf 8f4f 	dsb	sy
 800efe6:	61bb      	str	r3, [r7, #24]
}
 800efe8:	bf00      	nop
 800efea:	e7fe      	b.n	800efea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800efec:	f001 ffc2 	bl	8010f74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eff4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d024      	beq.n	800f046 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800effc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effe:	1e5a      	subs	r2, r3, #1
 800f000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f002:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d104      	bne.n	800f016 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f00c:	f001 facc 	bl	80105a8 <pvTaskIncrementMutexHeldCount>
 800f010:	4602      	mov	r2, r0
 800f012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f014:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f018:	691b      	ldr	r3, [r3, #16]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00f      	beq.n	800f03e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	3310      	adds	r3, #16
 800f022:	4618      	mov	r0, r3
 800f024:	f000 ff88 	bl	800ff38 <xTaskRemoveFromEventList>
 800f028:	4603      	mov	r3, r0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d007      	beq.n	800f03e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f02e:	4b54      	ldr	r3, [pc, #336]	; (800f180 <xQueueSemaphoreTake+0x214>)
 800f030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f03e:	f001 ffc9 	bl	8010fd4 <vPortExitCritical>
				return pdPASS;
 800f042:	2301      	movs	r3, #1
 800f044:	e097      	b.n	800f176 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d111      	bne.n	800f070 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00a      	beq.n	800f068 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f056:	f383 8811 	msr	BASEPRI, r3
 800f05a:	f3bf 8f6f 	isb	sy
 800f05e:	f3bf 8f4f 	dsb	sy
 800f062:	617b      	str	r3, [r7, #20]
}
 800f064:	bf00      	nop
 800f066:	e7fe      	b.n	800f066 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f068:	f001 ffb4 	bl	8010fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f06c:	2300      	movs	r3, #0
 800f06e:	e082      	b.n	800f176 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f072:	2b00      	cmp	r3, #0
 800f074:	d106      	bne.n	800f084 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f076:	f107 030c 	add.w	r3, r7, #12
 800f07a:	4618      	mov	r0, r3
 800f07c:	f000 ffc0 	bl	8010000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f080:	2301      	movs	r3, #1
 800f082:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f084:	f001 ffa6 	bl	8010fd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f088:	f000 fd2c 	bl	800fae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f08c:	f001 ff72 	bl	8010f74 <vPortEnterCritical>
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f096:	b25b      	sxtb	r3, r3
 800f098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09c:	d103      	bne.n	800f0a6 <xQueueSemaphoreTake+0x13a>
 800f09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0ac:	b25b      	sxtb	r3, r3
 800f0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b2:	d103      	bne.n	800f0bc <xQueueSemaphoreTake+0x150>
 800f0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0bc:	f001 ff8a 	bl	8010fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0c0:	463a      	mov	r2, r7
 800f0c2:	f107 030c 	add.w	r3, r7, #12
 800f0c6:	4611      	mov	r1, r2
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f000 ffaf 	bl	801002c <xTaskCheckForTimeOut>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d132      	bne.n	800f13a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0d6:	f000 f9f2 	bl	800f4be <prvIsQueueEmpty>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d026      	beq.n	800f12e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d109      	bne.n	800f0fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f0e8:	f001 ff44 	bl	8010f74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f001 f901 	bl	80102f8 <xTaskPriorityInherit>
 800f0f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f0f8:	f001 ff6c 	bl	8010fd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fe:	3324      	adds	r3, #36	; 0x24
 800f100:	683a      	ldr	r2, [r7, #0]
 800f102:	4611      	mov	r1, r2
 800f104:	4618      	mov	r0, r3
 800f106:	f000 fec7 	bl	800fe98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f10a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f10c:	f000 f985 	bl	800f41a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f110:	f000 fcf6 	bl	800fb00 <xTaskResumeAll>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	f47f af68 	bne.w	800efec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f11c:	4b18      	ldr	r3, [pc, #96]	; (800f180 <xQueueSemaphoreTake+0x214>)
 800f11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f122:	601a      	str	r2, [r3, #0]
 800f124:	f3bf 8f4f 	dsb	sy
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	e75e      	b.n	800efec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f12e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f130:	f000 f973 	bl	800f41a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f134:	f000 fce4 	bl	800fb00 <xTaskResumeAll>
 800f138:	e758      	b.n	800efec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f13a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f13c:	f000 f96d 	bl	800f41a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f140:	f000 fcde 	bl	800fb00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f146:	f000 f9ba 	bl	800f4be <prvIsQueueEmpty>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f43f af4d 	beq.w	800efec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00d      	beq.n	800f174 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f158:	f001 ff0c 	bl	8010f74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f15c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f15e:	f000 f8b4 	bl	800f2ca <prvGetDisinheritPriorityAfterTimeout>
 800f162:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f16a:	4618      	mov	r0, r3
 800f16c:	f001 f99a 	bl	80104a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f170:	f001 ff30 	bl	8010fd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f174:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f176:	4618      	mov	r0, r3
 800f178:	3738      	adds	r7, #56	; 0x38
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	e000ed04 	.word	0xe000ed04

0800f184 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b08e      	sub	sp, #56	; 0x38
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f196:	2b00      	cmp	r3, #0
 800f198:	d10a      	bne.n	800f1b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f19e:	f383 8811 	msr	BASEPRI, r3
 800f1a2:	f3bf 8f6f 	isb	sy
 800f1a6:	f3bf 8f4f 	dsb	sy
 800f1aa:	623b      	str	r3, [r7, #32]
}
 800f1ac:	bf00      	nop
 800f1ae:	e7fe      	b.n	800f1ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d103      	bne.n	800f1be <xQueueReceiveFromISR+0x3a>
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d101      	bne.n	800f1c2 <xQueueReceiveFromISR+0x3e>
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e000      	b.n	800f1c4 <xQueueReceiveFromISR+0x40>
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d10a      	bne.n	800f1de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1cc:	f383 8811 	msr	BASEPRI, r3
 800f1d0:	f3bf 8f6f 	isb	sy
 800f1d4:	f3bf 8f4f 	dsb	sy
 800f1d8:	61fb      	str	r3, [r7, #28]
}
 800f1da:	bf00      	nop
 800f1dc:	e7fe      	b.n	800f1dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f1de:	f001 ffab 	bl	8011138 <vPortValidateInterruptPriority>
	__asm volatile
 800f1e2:	f3ef 8211 	mrs	r2, BASEPRI
 800f1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ea:	f383 8811 	msr	BASEPRI, r3
 800f1ee:	f3bf 8f6f 	isb	sy
 800f1f2:	f3bf 8f4f 	dsb	sy
 800f1f6:	61ba      	str	r2, [r7, #24]
 800f1f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f1fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f202:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f206:	2b00      	cmp	r3, #0
 800f208:	d02f      	beq.n	800f26a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f214:	68b9      	ldr	r1, [r7, #8]
 800f216:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f218:	f000 f8d9 	bl	800f3ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21e:	1e5a      	subs	r2, r3, #1
 800f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f222:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f224:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f22c:	d112      	bne.n	800f254 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f230:	691b      	ldr	r3, [r3, #16]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d016      	beq.n	800f264 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f238:	3310      	adds	r3, #16
 800f23a:	4618      	mov	r0, r3
 800f23c:	f000 fe7c 	bl	800ff38 <xTaskRemoveFromEventList>
 800f240:	4603      	mov	r3, r0
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00e      	beq.n	800f264 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d00b      	beq.n	800f264 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2201      	movs	r2, #1
 800f250:	601a      	str	r2, [r3, #0]
 800f252:	e007      	b.n	800f264 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f258:	3301      	adds	r3, #1
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	b25a      	sxtb	r2, r3
 800f25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f264:	2301      	movs	r3, #1
 800f266:	637b      	str	r3, [r7, #52]	; 0x34
 800f268:	e001      	b.n	800f26e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f26a:	2300      	movs	r3, #0
 800f26c:	637b      	str	r3, [r7, #52]	; 0x34
 800f26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f270:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	f383 8811 	msr	BASEPRI, r3
}
 800f278:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3738      	adds	r7, #56	; 0x38
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d10a      	bne.n	800f2ac <vQueueDelete+0x28>
	__asm volatile
 800f296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29a:	f383 8811 	msr	BASEPRI, r3
 800f29e:	f3bf 8f6f 	isb	sy
 800f2a2:	f3bf 8f4f 	dsb	sy
 800f2a6:	60bb      	str	r3, [r7, #8]
}
 800f2a8:	bf00      	nop
 800f2aa:	e7fe      	b.n	800f2aa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f000 f95f 	bl	800f570 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d102      	bne.n	800f2c2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f002 f847 	bl	8011350 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f2c2:	bf00      	nop
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f2ca:	b480      	push	{r7}
 800f2cc:	b085      	sub	sp, #20
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d006      	beq.n	800f2e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f2e4:	60fb      	str	r3, [r7, #12]
 800f2e6:	e001      	b.n	800f2ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
	}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3714      	adds	r7, #20
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr

0800f2fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b086      	sub	sp, #24
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	60f8      	str	r0, [r7, #12]
 800f302:	60b9      	str	r1, [r7, #8]
 800f304:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f306:	2300      	movs	r3, #0
 800f308:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f30e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f314:	2b00      	cmp	r3, #0
 800f316:	d10d      	bne.n	800f334 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d14d      	bne.n	800f3bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	4618      	mov	r0, r3
 800f326:	f001 f84f 	bl	80103c8 <xTaskPriorityDisinherit>
 800f32a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2200      	movs	r2, #0
 800f330:	609a      	str	r2, [r3, #8]
 800f332:	e043      	b.n	800f3bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d119      	bne.n	800f36e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6858      	ldr	r0, [r3, #4]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f342:	461a      	mov	r2, r3
 800f344:	68b9      	ldr	r1, [r7, #8]
 800f346:	f019 fb17 	bl	8028978 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	685a      	ldr	r2, [r3, #4]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f352:	441a      	add	r2, r3
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	685a      	ldr	r2, [r3, #4]
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	689b      	ldr	r3, [r3, #8]
 800f360:	429a      	cmp	r2, r3
 800f362:	d32b      	bcc.n	800f3bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	605a      	str	r2, [r3, #4]
 800f36c:	e026      	b.n	800f3bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	68d8      	ldr	r0, [r3, #12]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f376:	461a      	mov	r2, r3
 800f378:	68b9      	ldr	r1, [r7, #8]
 800f37a:	f019 fafd 	bl	8028978 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	68da      	ldr	r2, [r3, #12]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f386:	425b      	negs	r3, r3
 800f388:	441a      	add	r2, r3
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	68da      	ldr	r2, [r3, #12]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	429a      	cmp	r2, r3
 800f398:	d207      	bcs.n	800f3aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	689a      	ldr	r2, [r3, #8]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a2:	425b      	negs	r3, r3
 800f3a4:	441a      	add	r2, r3
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d105      	bne.n	800f3bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d002      	beq.n	800f3bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	1c5a      	adds	r2, r3, #1
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f3c4:	697b      	ldr	r3, [r7, #20]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3718      	adds	r7, #24
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}

0800f3ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f3ce:	b580      	push	{r7, lr}
 800f3d0:	b082      	sub	sp, #8
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]
 800f3d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d018      	beq.n	800f412 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	68da      	ldr	r2, [r3, #12]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e8:	441a      	add	r2, r3
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	68da      	ldr	r2, [r3, #12]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	689b      	ldr	r3, [r3, #8]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d303      	bcc.n	800f402 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	68d9      	ldr	r1, [r3, #12]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f40a:	461a      	mov	r2, r3
 800f40c:	6838      	ldr	r0, [r7, #0]
 800f40e:	f019 fab3 	bl	8028978 <memcpy>
	}
}
 800f412:	bf00      	nop
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b084      	sub	sp, #16
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f422:	f001 fda7 	bl	8010f74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f42c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f42e:	e011      	b.n	800f454 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f434:	2b00      	cmp	r3, #0
 800f436:	d012      	beq.n	800f45e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	3324      	adds	r3, #36	; 0x24
 800f43c:	4618      	mov	r0, r3
 800f43e:	f000 fd7b 	bl	800ff38 <xTaskRemoveFromEventList>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d001      	beq.n	800f44c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f448:	f000 fe52 	bl	80100f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f44c:	7bfb      	ldrb	r3, [r7, #15]
 800f44e:	3b01      	subs	r3, #1
 800f450:	b2db      	uxtb	r3, r3
 800f452:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	dce9      	bgt.n	800f430 <prvUnlockQueue+0x16>
 800f45c:	e000      	b.n	800f460 <prvUnlockQueue+0x46>
					break;
 800f45e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	22ff      	movs	r2, #255	; 0xff
 800f464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f468:	f001 fdb4 	bl	8010fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f46c:	f001 fd82 	bl	8010f74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f476:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f478:	e011      	b.n	800f49e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	691b      	ldr	r3, [r3, #16]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d012      	beq.n	800f4a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	3310      	adds	r3, #16
 800f486:	4618      	mov	r0, r3
 800f488:	f000 fd56 	bl	800ff38 <xTaskRemoveFromEventList>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f492:	f000 fe2d 	bl	80100f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f496:	7bbb      	ldrb	r3, [r7, #14]
 800f498:	3b01      	subs	r3, #1
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f49e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	dce9      	bgt.n	800f47a <prvUnlockQueue+0x60>
 800f4a6:	e000      	b.n	800f4aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	22ff      	movs	r2, #255	; 0xff
 800f4ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f4b2:	f001 fd8f 	bl	8010fd4 <vPortExitCritical>
}
 800f4b6:	bf00      	nop
 800f4b8:	3710      	adds	r7, #16
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b084      	sub	sp, #16
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4c6:	f001 fd55 	bl	8010f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d102      	bne.n	800f4d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	60fb      	str	r3, [r7, #12]
 800f4d6:	e001      	b.n	800f4dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f4dc:	f001 fd7a 	bl	8010fd4 <vPortExitCritical>

	return xReturn;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}

0800f4ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b084      	sub	sp, #16
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4f2:	f001 fd3f 	bl	8010f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d102      	bne.n	800f508 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f502:	2301      	movs	r3, #1
 800f504:	60fb      	str	r3, [r7, #12]
 800f506:	e001      	b.n	800f50c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f508:	2300      	movs	r3, #0
 800f50a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f50c:	f001 fd62 	bl	8010fd4 <vPortExitCritical>

	return xReturn;
 800f510:	68fb      	ldr	r3, [r7, #12]
}
 800f512:	4618      	mov	r0, r3
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
	...

0800f51c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f51c:	b480      	push	{r7}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f526:	2300      	movs	r3, #0
 800f528:	60fb      	str	r3, [r7, #12]
 800f52a:	e014      	b.n	800f556 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f52c:	4a0f      	ldr	r2, [pc, #60]	; (800f56c <vQueueAddToRegistry+0x50>)
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d10b      	bne.n	800f550 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f538:	490c      	ldr	r1, [pc, #48]	; (800f56c <vQueueAddToRegistry+0x50>)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	683a      	ldr	r2, [r7, #0]
 800f53e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f542:	4a0a      	ldr	r2, [pc, #40]	; (800f56c <vQueueAddToRegistry+0x50>)
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	00db      	lsls	r3, r3, #3
 800f548:	4413      	add	r3, r2
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f54e:	e006      	b.n	800f55e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	3301      	adds	r3, #1
 800f554:	60fb      	str	r3, [r7, #12]
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2b07      	cmp	r3, #7
 800f55a:	d9e7      	bls.n	800f52c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f55c:	bf00      	nop
 800f55e:	bf00      	nop
 800f560:	3714      	adds	r7, #20
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	20000fb8 	.word	0x20000fb8

0800f570 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f570:	b480      	push	{r7}
 800f572:	b085      	sub	sp, #20
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f578:	2300      	movs	r3, #0
 800f57a:	60fb      	str	r3, [r7, #12]
 800f57c:	e016      	b.n	800f5ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f57e:	4a10      	ldr	r2, [pc, #64]	; (800f5c0 <vQueueUnregisterQueue+0x50>)
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	00db      	lsls	r3, r3, #3
 800f584:	4413      	add	r3, r2
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d10b      	bne.n	800f5a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f58e:	4a0c      	ldr	r2, [pc, #48]	; (800f5c0 <vQueueUnregisterQueue+0x50>)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2100      	movs	r1, #0
 800f594:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f598:	4a09      	ldr	r2, [pc, #36]	; (800f5c0 <vQueueUnregisterQueue+0x50>)
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	00db      	lsls	r3, r3, #3
 800f59e:	4413      	add	r3, r2
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	605a      	str	r2, [r3, #4]
				break;
 800f5a4:	e006      	b.n	800f5b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	60fb      	str	r3, [r7, #12]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2b07      	cmp	r3, #7
 800f5b0:	d9e5      	bls.n	800f57e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f5b2:	bf00      	nop
 800f5b4:	bf00      	nop
 800f5b6:	3714      	adds	r7, #20
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr
 800f5c0:	20000fb8 	.word	0x20000fb8

0800f5c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b086      	sub	sp, #24
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f5d4:	f001 fcce 	bl	8010f74 <vPortEnterCritical>
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5de:	b25b      	sxtb	r3, r3
 800f5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e4:	d103      	bne.n	800f5ee <vQueueWaitForMessageRestricted+0x2a>
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5f4:	b25b      	sxtb	r3, r3
 800f5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5fa:	d103      	bne.n	800f604 <vQueueWaitForMessageRestricted+0x40>
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	2200      	movs	r2, #0
 800f600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f604:	f001 fce6 	bl	8010fd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d106      	bne.n	800f61e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	3324      	adds	r3, #36	; 0x24
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	68b9      	ldr	r1, [r7, #8]
 800f618:	4618      	mov	r0, r3
 800f61a:	f000 fc61 	bl	800fee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f61e:	6978      	ldr	r0, [r7, #20]
 800f620:	f7ff fefb 	bl	800f41a <prvUnlockQueue>
	}
 800f624:	bf00      	nop
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b08e      	sub	sp, #56	; 0x38
 800f630:	af04      	add	r7, sp, #16
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	607a      	str	r2, [r7, #4]
 800f638:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d10a      	bne.n	800f656 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	623b      	str	r3, [r7, #32]
}
 800f652:	bf00      	nop
 800f654:	e7fe      	b.n	800f654 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d10a      	bne.n	800f672 <xTaskCreateStatic+0x46>
	__asm volatile
 800f65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f660:	f383 8811 	msr	BASEPRI, r3
 800f664:	f3bf 8f6f 	isb	sy
 800f668:	f3bf 8f4f 	dsb	sy
 800f66c:	61fb      	str	r3, [r7, #28]
}
 800f66e:	bf00      	nop
 800f670:	e7fe      	b.n	800f670 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f672:	23bc      	movs	r3, #188	; 0xbc
 800f674:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	2bbc      	cmp	r3, #188	; 0xbc
 800f67a:	d00a      	beq.n	800f692 <xTaskCreateStatic+0x66>
	__asm volatile
 800f67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f680:	f383 8811 	msr	BASEPRI, r3
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	61bb      	str	r3, [r7, #24]
}
 800f68e:	bf00      	nop
 800f690:	e7fe      	b.n	800f690 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f692:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f696:	2b00      	cmp	r3, #0
 800f698:	d01e      	beq.n	800f6d8 <xTaskCreateStatic+0xac>
 800f69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d01b      	beq.n	800f6d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	2202      	movs	r2, #2
 800f6ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	9303      	str	r3, [sp, #12]
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b8:	9302      	str	r3, [sp, #8]
 800f6ba:	f107 0314 	add.w	r3, r7, #20
 800f6be:	9301      	str	r3, [sp, #4]
 800f6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c2:	9300      	str	r3, [sp, #0]
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	68b9      	ldr	r1, [r7, #8]
 800f6ca:	68f8      	ldr	r0, [r7, #12]
 800f6cc:	f000 f850 	bl	800f770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6d2:	f000 f8f3 	bl	800f8bc <prvAddNewTaskToReadyList>
 800f6d6:	e001      	b.n	800f6dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f6dc:	697b      	ldr	r3, [r7, #20]
	}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3728      	adds	r7, #40	; 0x28
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b08c      	sub	sp, #48	; 0x30
 800f6ea:	af04      	add	r7, sp, #16
 800f6ec:	60f8      	str	r0, [r7, #12]
 800f6ee:	60b9      	str	r1, [r7, #8]
 800f6f0:	603b      	str	r3, [r7, #0]
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f6f6:	88fb      	ldrh	r3, [r7, #6]
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f001 fd5c 	bl	80111b8 <pvPortMalloc>
 800f700:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00e      	beq.n	800f726 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f708:	20bc      	movs	r0, #188	; 0xbc
 800f70a:	f001 fd55 	bl	80111b8 <pvPortMalloc>
 800f70e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d003      	beq.n	800f71e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	697a      	ldr	r2, [r7, #20]
 800f71a:	631a      	str	r2, [r3, #48]	; 0x30
 800f71c:	e005      	b.n	800f72a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f71e:	6978      	ldr	r0, [r7, #20]
 800f720:	f001 fe16 	bl	8011350 <vPortFree>
 800f724:	e001      	b.n	800f72a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f726:	2300      	movs	r3, #0
 800f728:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d017      	beq.n	800f760 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	2200      	movs	r2, #0
 800f734:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f738:	88fa      	ldrh	r2, [r7, #6]
 800f73a:	2300      	movs	r3, #0
 800f73c:	9303      	str	r3, [sp, #12]
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	9302      	str	r3, [sp, #8]
 800f742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f744:	9301      	str	r3, [sp, #4]
 800f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f748:	9300      	str	r3, [sp, #0]
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	68b9      	ldr	r1, [r7, #8]
 800f74e:	68f8      	ldr	r0, [r7, #12]
 800f750:	f000 f80e 	bl	800f770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f754:	69f8      	ldr	r0, [r7, #28]
 800f756:	f000 f8b1 	bl	800f8bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f75a:	2301      	movs	r3, #1
 800f75c:	61bb      	str	r3, [r7, #24]
 800f75e:	e002      	b.n	800f766 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f760:	f04f 33ff 	mov.w	r3, #4294967295
 800f764:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f766:	69bb      	ldr	r3, [r7, #24]
	}
 800f768:	4618      	mov	r0, r3
 800f76a:	3720      	adds	r7, #32
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b088      	sub	sp, #32
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	607a      	str	r2, [r7, #4]
 800f77c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f780:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	461a      	mov	r2, r3
 800f788:	21a5      	movs	r1, #165	; 0xa5
 800f78a:	f019 f903 	bl	8028994 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f792:	6879      	ldr	r1, [r7, #4]
 800f794:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f798:	440b      	add	r3, r1
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4413      	add	r3, r2
 800f79e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	f023 0307 	bic.w	r3, r3, #7
 800f7a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	f003 0307 	and.w	r3, r3, #7
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00a      	beq.n	800f7c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b6:	f383 8811 	msr	BASEPRI, r3
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	617b      	str	r3, [r7, #20]
}
 800f7c4:	bf00      	nop
 800f7c6:	e7fe      	b.n	800f7c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d01f      	beq.n	800f80e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	61fb      	str	r3, [r7, #28]
 800f7d2:	e012      	b.n	800f7fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f7d4:	68ba      	ldr	r2, [r7, #8]
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	4413      	add	r3, r2
 800f7da:	7819      	ldrb	r1, [r3, #0]
 800f7dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	3334      	adds	r3, #52	; 0x34
 800f7e4:	460a      	mov	r2, r1
 800f7e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f7e8:	68ba      	ldr	r2, [r7, #8]
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d006      	beq.n	800f802 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	61fb      	str	r3, [r7, #28]
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	2b0f      	cmp	r3, #15
 800f7fe:	d9e9      	bls.n	800f7d4 <prvInitialiseNewTask+0x64>
 800f800:	e000      	b.n	800f804 <prvInitialiseNewTask+0x94>
			{
				break;
 800f802:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f806:	2200      	movs	r2, #0
 800f808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f80c:	e003      	b.n	800f816 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f810:	2200      	movs	r2, #0
 800f812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f818:	2b37      	cmp	r3, #55	; 0x37
 800f81a:	d901      	bls.n	800f820 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f81c:	2337      	movs	r3, #55	; 0x37
 800f81e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f824:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f82a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82e:	2200      	movs	r2, #0
 800f830:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f834:	3304      	adds	r3, #4
 800f836:	4618      	mov	r0, r3
 800f838:	f7fe fe56 	bl	800e4e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83e:	3318      	adds	r3, #24
 800f840:	4618      	mov	r0, r3
 800f842:	f7fe fe51 	bl	800e4e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f84a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f854:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f85a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85e:	2200      	movs	r2, #0
 800f860:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f866:	2200      	movs	r2, #0
 800f868:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86e:	3354      	adds	r3, #84	; 0x54
 800f870:	2260      	movs	r2, #96	; 0x60
 800f872:	2100      	movs	r1, #0
 800f874:	4618      	mov	r0, r3
 800f876:	f019 f88d 	bl	8028994 <memset>
 800f87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87c:	4a0c      	ldr	r2, [pc, #48]	; (800f8b0 <prvInitialiseNewTask+0x140>)
 800f87e:	659a      	str	r2, [r3, #88]	; 0x58
 800f880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f882:	4a0c      	ldr	r2, [pc, #48]	; (800f8b4 <prvInitialiseNewTask+0x144>)
 800f884:	65da      	str	r2, [r3, #92]	; 0x5c
 800f886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f888:	4a0b      	ldr	r2, [pc, #44]	; (800f8b8 <prvInitialiseNewTask+0x148>)
 800f88a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f88c:	683a      	ldr	r2, [r7, #0]
 800f88e:	68f9      	ldr	r1, [r7, #12]
 800f890:	69b8      	ldr	r0, [r7, #24]
 800f892:	f001 fa3f 	bl	8010d14 <pxPortInitialiseStack>
 800f896:	4602      	mov	r2, r0
 800f898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d002      	beq.n	800f8a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8a8:	bf00      	nop
 800f8aa:	3720      	adds	r7, #32
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	0802d75c 	.word	0x0802d75c
 800f8b4:	0802d77c 	.word	0x0802d77c
 800f8b8:	0802d73c 	.word	0x0802d73c

0800f8bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f8c4:	f001 fb56 	bl	8010f74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f8c8:	4b2d      	ldr	r3, [pc, #180]	; (800f980 <prvAddNewTaskToReadyList+0xc4>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	4a2c      	ldr	r2, [pc, #176]	; (800f980 <prvAddNewTaskToReadyList+0xc4>)
 800f8d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f8d2:	4b2c      	ldr	r3, [pc, #176]	; (800f984 <prvAddNewTaskToReadyList+0xc8>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d109      	bne.n	800f8ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f8da:	4a2a      	ldr	r2, [pc, #168]	; (800f984 <prvAddNewTaskToReadyList+0xc8>)
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f8e0:	4b27      	ldr	r3, [pc, #156]	; (800f980 <prvAddNewTaskToReadyList+0xc4>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d110      	bne.n	800f90a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f8e8:	f000 fc26 	bl	8010138 <prvInitialiseTaskLists>
 800f8ec:	e00d      	b.n	800f90a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f8ee:	4b26      	ldr	r3, [pc, #152]	; (800f988 <prvAddNewTaskToReadyList+0xcc>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d109      	bne.n	800f90a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8f6:	4b23      	ldr	r3, [pc, #140]	; (800f984 <prvAddNewTaskToReadyList+0xc8>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f900:	429a      	cmp	r2, r3
 800f902:	d802      	bhi.n	800f90a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f904:	4a1f      	ldr	r2, [pc, #124]	; (800f984 <prvAddNewTaskToReadyList+0xc8>)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f90a:	4b20      	ldr	r3, [pc, #128]	; (800f98c <prvAddNewTaskToReadyList+0xd0>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	3301      	adds	r3, #1
 800f910:	4a1e      	ldr	r2, [pc, #120]	; (800f98c <prvAddNewTaskToReadyList+0xd0>)
 800f912:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f914:	4b1d      	ldr	r3, [pc, #116]	; (800f98c <prvAddNewTaskToReadyList+0xd0>)
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f920:	4b1b      	ldr	r3, [pc, #108]	; (800f990 <prvAddNewTaskToReadyList+0xd4>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	429a      	cmp	r2, r3
 800f926:	d903      	bls.n	800f930 <prvAddNewTaskToReadyList+0x74>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92c:	4a18      	ldr	r2, [pc, #96]	; (800f990 <prvAddNewTaskToReadyList+0xd4>)
 800f92e:	6013      	str	r3, [r2, #0]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f934:	4613      	mov	r3, r2
 800f936:	009b      	lsls	r3, r3, #2
 800f938:	4413      	add	r3, r2
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	4a15      	ldr	r2, [pc, #84]	; (800f994 <prvAddNewTaskToReadyList+0xd8>)
 800f93e:	441a      	add	r2, r3
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	3304      	adds	r3, #4
 800f944:	4619      	mov	r1, r3
 800f946:	4610      	mov	r0, r2
 800f948:	f7fe fddb 	bl	800e502 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f94c:	f001 fb42 	bl	8010fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f950:	4b0d      	ldr	r3, [pc, #52]	; (800f988 <prvAddNewTaskToReadyList+0xcc>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d00e      	beq.n	800f976 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f958:	4b0a      	ldr	r3, [pc, #40]	; (800f984 <prvAddNewTaskToReadyList+0xc8>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f962:	429a      	cmp	r2, r3
 800f964:	d207      	bcs.n	800f976 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f966:	4b0c      	ldr	r3, [pc, #48]	; (800f998 <prvAddNewTaskToReadyList+0xdc>)
 800f968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f96c:	601a      	str	r2, [r3, #0]
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f976:	bf00      	nop
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	200014cc 	.word	0x200014cc
 800f984:	20000ff8 	.word	0x20000ff8
 800f988:	200014d8 	.word	0x200014d8
 800f98c:	200014e8 	.word	0x200014e8
 800f990:	200014d4 	.word	0x200014d4
 800f994:	20000ffc 	.word	0x20000ffc
 800f998:	e000ed04 	.word	0xe000ed04

0800f99c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d017      	beq.n	800f9de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f9ae:	4b13      	ldr	r3, [pc, #76]	; (800f9fc <vTaskDelay+0x60>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d00a      	beq.n	800f9cc <vTaskDelay+0x30>
	__asm volatile
 800f9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ba:	f383 8811 	msr	BASEPRI, r3
 800f9be:	f3bf 8f6f 	isb	sy
 800f9c2:	f3bf 8f4f 	dsb	sy
 800f9c6:	60bb      	str	r3, [r7, #8]
}
 800f9c8:	bf00      	nop
 800f9ca:	e7fe      	b.n	800f9ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f9cc:	f000 f88a 	bl	800fae4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 fdfc 	bl	80105d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f9d8:	f000 f892 	bl	800fb00 <xTaskResumeAll>
 800f9dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d107      	bne.n	800f9f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f9e4:	4b06      	ldr	r3, [pc, #24]	; (800fa00 <vTaskDelay+0x64>)
 800f9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ea:	601a      	str	r2, [r3, #0]
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9f4:	bf00      	nop
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	200014f4 	.word	0x200014f4
 800fa00:	e000ed04 	.word	0xe000ed04

0800fa04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b08a      	sub	sp, #40	; 0x28
 800fa08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa12:	463a      	mov	r2, r7
 800fa14:	1d39      	adds	r1, r7, #4
 800fa16:	f107 0308 	add.w	r3, r7, #8
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fe fd10 	bl	800e440 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa20:	6839      	ldr	r1, [r7, #0]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	68ba      	ldr	r2, [r7, #8]
 800fa26:	9202      	str	r2, [sp, #8]
 800fa28:	9301      	str	r3, [sp, #4]
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	2300      	movs	r3, #0
 800fa30:	460a      	mov	r2, r1
 800fa32:	4924      	ldr	r1, [pc, #144]	; (800fac4 <vTaskStartScheduler+0xc0>)
 800fa34:	4824      	ldr	r0, [pc, #144]	; (800fac8 <vTaskStartScheduler+0xc4>)
 800fa36:	f7ff fdf9 	bl	800f62c <xTaskCreateStatic>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	4a23      	ldr	r2, [pc, #140]	; (800facc <vTaskStartScheduler+0xc8>)
 800fa3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa40:	4b22      	ldr	r3, [pc, #136]	; (800facc <vTaskStartScheduler+0xc8>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d002      	beq.n	800fa4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	617b      	str	r3, [r7, #20]
 800fa4c:	e001      	b.n	800fa52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d102      	bne.n	800fa5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa58:	f000 fe0e 	bl	8010678 <xTimerCreateTimerTask>
 800fa5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d11b      	bne.n	800fa9c <vTaskStartScheduler+0x98>
	__asm volatile
 800fa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa68:	f383 8811 	msr	BASEPRI, r3
 800fa6c:	f3bf 8f6f 	isb	sy
 800fa70:	f3bf 8f4f 	dsb	sy
 800fa74:	613b      	str	r3, [r7, #16]
}
 800fa76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa78:	4b15      	ldr	r3, [pc, #84]	; (800fad0 <vTaskStartScheduler+0xcc>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	3354      	adds	r3, #84	; 0x54
 800fa7e:	4a15      	ldr	r2, [pc, #84]	; (800fad4 <vTaskStartScheduler+0xd0>)
 800fa80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa82:	4b15      	ldr	r3, [pc, #84]	; (800fad8 <vTaskStartScheduler+0xd4>)
 800fa84:	f04f 32ff 	mov.w	r2, #4294967295
 800fa88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa8a:	4b14      	ldr	r3, [pc, #80]	; (800fadc <vTaskStartScheduler+0xd8>)
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa90:	4b13      	ldr	r3, [pc, #76]	; (800fae0 <vTaskStartScheduler+0xdc>)
 800fa92:	2200      	movs	r2, #0
 800fa94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa96:	f001 f9cb 	bl	8010e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa9a:	e00e      	b.n	800faba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faa2:	d10a      	bne.n	800faba <vTaskStartScheduler+0xb6>
	__asm volatile
 800faa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa8:	f383 8811 	msr	BASEPRI, r3
 800faac:	f3bf 8f6f 	isb	sy
 800fab0:	f3bf 8f4f 	dsb	sy
 800fab4:	60fb      	str	r3, [r7, #12]
}
 800fab6:	bf00      	nop
 800fab8:	e7fe      	b.n	800fab8 <vTaskStartScheduler+0xb4>
}
 800faba:	bf00      	nop
 800fabc:	3718      	adds	r7, #24
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	08029908 	.word	0x08029908
 800fac8:	08010109 	.word	0x08010109
 800facc:	200014f0 	.word	0x200014f0
 800fad0:	20000ff8 	.word	0x20000ff8
 800fad4:	200001ec 	.word	0x200001ec
 800fad8:	200014ec 	.word	0x200014ec
 800fadc:	200014d8 	.word	0x200014d8
 800fae0:	200014d0 	.word	0x200014d0

0800fae4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fae4:	b480      	push	{r7}
 800fae6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fae8:	4b04      	ldr	r3, [pc, #16]	; (800fafc <vTaskSuspendAll+0x18>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	3301      	adds	r3, #1
 800faee:	4a03      	ldr	r2, [pc, #12]	; (800fafc <vTaskSuspendAll+0x18>)
 800faf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800faf2:	bf00      	nop
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr
 800fafc:	200014f4 	.word	0x200014f4

0800fb00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb06:	2300      	movs	r3, #0
 800fb08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb0e:	4b42      	ldr	r3, [pc, #264]	; (800fc18 <xTaskResumeAll+0x118>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d10a      	bne.n	800fb2c <xTaskResumeAll+0x2c>
	__asm volatile
 800fb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb1a:	f383 8811 	msr	BASEPRI, r3
 800fb1e:	f3bf 8f6f 	isb	sy
 800fb22:	f3bf 8f4f 	dsb	sy
 800fb26:	603b      	str	r3, [r7, #0]
}
 800fb28:	bf00      	nop
 800fb2a:	e7fe      	b.n	800fb2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fb2c:	f001 fa22 	bl	8010f74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fb30:	4b39      	ldr	r3, [pc, #228]	; (800fc18 <xTaskResumeAll+0x118>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	3b01      	subs	r3, #1
 800fb36:	4a38      	ldr	r2, [pc, #224]	; (800fc18 <xTaskResumeAll+0x118>)
 800fb38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb3a:	4b37      	ldr	r3, [pc, #220]	; (800fc18 <xTaskResumeAll+0x118>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d162      	bne.n	800fc08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb42:	4b36      	ldr	r3, [pc, #216]	; (800fc1c <xTaskResumeAll+0x11c>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d05e      	beq.n	800fc08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb4a:	e02f      	b.n	800fbac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb4c:	4b34      	ldr	r3, [pc, #208]	; (800fc20 <xTaskResumeAll+0x120>)
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	3318      	adds	r3, #24
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fe fd2f 	bl	800e5bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	3304      	adds	r3, #4
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fe fd2a 	bl	800e5bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb6c:	4b2d      	ldr	r3, [pc, #180]	; (800fc24 <xTaskResumeAll+0x124>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d903      	bls.n	800fb7c <xTaskResumeAll+0x7c>
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb78:	4a2a      	ldr	r2, [pc, #168]	; (800fc24 <xTaskResumeAll+0x124>)
 800fb7a:	6013      	str	r3, [r2, #0]
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb80:	4613      	mov	r3, r2
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	4413      	add	r3, r2
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	4a27      	ldr	r2, [pc, #156]	; (800fc28 <xTaskResumeAll+0x128>)
 800fb8a:	441a      	add	r2, r3
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	3304      	adds	r3, #4
 800fb90:	4619      	mov	r1, r3
 800fb92:	4610      	mov	r0, r2
 800fb94:	f7fe fcb5 	bl	800e502 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb9c:	4b23      	ldr	r3, [pc, #140]	; (800fc2c <xTaskResumeAll+0x12c>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d302      	bcc.n	800fbac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fba6:	4b22      	ldr	r3, [pc, #136]	; (800fc30 <xTaskResumeAll+0x130>)
 800fba8:	2201      	movs	r2, #1
 800fbaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbac:	4b1c      	ldr	r3, [pc, #112]	; (800fc20 <xTaskResumeAll+0x120>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d1cb      	bne.n	800fb4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d001      	beq.n	800fbbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fbba:	f000 fb5f 	bl	801027c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fbbe:	4b1d      	ldr	r3, [pc, #116]	; (800fc34 <xTaskResumeAll+0x134>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d010      	beq.n	800fbec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fbca:	f000 f847 	bl	800fc5c <xTaskIncrementTick>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d002      	beq.n	800fbda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fbd4:	4b16      	ldr	r3, [pc, #88]	; (800fc30 <xTaskResumeAll+0x130>)
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	3b01      	subs	r3, #1
 800fbde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d1f1      	bne.n	800fbca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fbe6:	4b13      	ldr	r3, [pc, #76]	; (800fc34 <xTaskResumeAll+0x134>)
 800fbe8:	2200      	movs	r2, #0
 800fbea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fbec:	4b10      	ldr	r3, [pc, #64]	; (800fc30 <xTaskResumeAll+0x130>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d009      	beq.n	800fc08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fbf8:	4b0f      	ldr	r3, [pc, #60]	; (800fc38 <xTaskResumeAll+0x138>)
 800fbfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbfe:	601a      	str	r2, [r3, #0]
 800fc00:	f3bf 8f4f 	dsb	sy
 800fc04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc08:	f001 f9e4 	bl	8010fd4 <vPortExitCritical>

	return xAlreadyYielded;
 800fc0c:	68bb      	ldr	r3, [r7, #8]
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	200014f4 	.word	0x200014f4
 800fc1c:	200014cc 	.word	0x200014cc
 800fc20:	2000148c 	.word	0x2000148c
 800fc24:	200014d4 	.word	0x200014d4
 800fc28:	20000ffc 	.word	0x20000ffc
 800fc2c:	20000ff8 	.word	0x20000ff8
 800fc30:	200014e0 	.word	0x200014e0
 800fc34:	200014dc 	.word	0x200014dc
 800fc38:	e000ed04 	.word	0xe000ed04

0800fc3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc42:	4b05      	ldr	r3, [pc, #20]	; (800fc58 <xTaskGetTickCount+0x1c>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc48:	687b      	ldr	r3, [r7, #4]
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	370c      	adds	r7, #12
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr
 800fc56:	bf00      	nop
 800fc58:	200014d0 	.word	0x200014d0

0800fc5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b086      	sub	sp, #24
 800fc60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc62:	2300      	movs	r3, #0
 800fc64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc66:	4b4f      	ldr	r3, [pc, #316]	; (800fda4 <xTaskIncrementTick+0x148>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f040 808f 	bne.w	800fd8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc70:	4b4d      	ldr	r3, [pc, #308]	; (800fda8 <xTaskIncrementTick+0x14c>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	3301      	adds	r3, #1
 800fc76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc78:	4a4b      	ldr	r2, [pc, #300]	; (800fda8 <xTaskIncrementTick+0x14c>)
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d120      	bne.n	800fcc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc84:	4b49      	ldr	r3, [pc, #292]	; (800fdac <xTaskIncrementTick+0x150>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00a      	beq.n	800fca4 <xTaskIncrementTick+0x48>
	__asm volatile
 800fc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc92:	f383 8811 	msr	BASEPRI, r3
 800fc96:	f3bf 8f6f 	isb	sy
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	603b      	str	r3, [r7, #0]
}
 800fca0:	bf00      	nop
 800fca2:	e7fe      	b.n	800fca2 <xTaskIncrementTick+0x46>
 800fca4:	4b41      	ldr	r3, [pc, #260]	; (800fdac <xTaskIncrementTick+0x150>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	60fb      	str	r3, [r7, #12]
 800fcaa:	4b41      	ldr	r3, [pc, #260]	; (800fdb0 <xTaskIncrementTick+0x154>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4a3f      	ldr	r2, [pc, #252]	; (800fdac <xTaskIncrementTick+0x150>)
 800fcb0:	6013      	str	r3, [r2, #0]
 800fcb2:	4a3f      	ldr	r2, [pc, #252]	; (800fdb0 <xTaskIncrementTick+0x154>)
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	6013      	str	r3, [r2, #0]
 800fcb8:	4b3e      	ldr	r3, [pc, #248]	; (800fdb4 <xTaskIncrementTick+0x158>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	4a3d      	ldr	r2, [pc, #244]	; (800fdb4 <xTaskIncrementTick+0x158>)
 800fcc0:	6013      	str	r3, [r2, #0]
 800fcc2:	f000 fadb 	bl	801027c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fcc6:	4b3c      	ldr	r3, [pc, #240]	; (800fdb8 <xTaskIncrementTick+0x15c>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	693a      	ldr	r2, [r7, #16]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d349      	bcc.n	800fd64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcd0:	4b36      	ldr	r3, [pc, #216]	; (800fdac <xTaskIncrementTick+0x150>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d104      	bne.n	800fce4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcda:	4b37      	ldr	r3, [pc, #220]	; (800fdb8 <xTaskIncrementTick+0x15c>)
 800fcdc:	f04f 32ff 	mov.w	r2, #4294967295
 800fce0:	601a      	str	r2, [r3, #0]
					break;
 800fce2:	e03f      	b.n	800fd64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fce4:	4b31      	ldr	r3, [pc, #196]	; (800fdac <xTaskIncrementTick+0x150>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	68db      	ldr	r3, [r3, #12]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fcf4:	693a      	ldr	r2, [r7, #16]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d203      	bcs.n	800fd04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fcfc:	4a2e      	ldr	r2, [pc, #184]	; (800fdb8 <xTaskIncrementTick+0x15c>)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd02:	e02f      	b.n	800fd64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	3304      	adds	r3, #4
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7fe fc57 	bl	800e5bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d004      	beq.n	800fd20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	3318      	adds	r3, #24
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fe fc4e 	bl	800e5bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd24:	4b25      	ldr	r3, [pc, #148]	; (800fdbc <xTaskIncrementTick+0x160>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d903      	bls.n	800fd34 <xTaskIncrementTick+0xd8>
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd30:	4a22      	ldr	r2, [pc, #136]	; (800fdbc <xTaskIncrementTick+0x160>)
 800fd32:	6013      	str	r3, [r2, #0]
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd38:	4613      	mov	r3, r2
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	4413      	add	r3, r2
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	4a1f      	ldr	r2, [pc, #124]	; (800fdc0 <xTaskIncrementTick+0x164>)
 800fd42:	441a      	add	r2, r3
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	3304      	adds	r3, #4
 800fd48:	4619      	mov	r1, r3
 800fd4a:	4610      	mov	r0, r2
 800fd4c:	f7fe fbd9 	bl	800e502 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd54:	4b1b      	ldr	r3, [pc, #108]	; (800fdc4 <xTaskIncrementTick+0x168>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d3b8      	bcc.n	800fcd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fd5e:	2301      	movs	r3, #1
 800fd60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd62:	e7b5      	b.n	800fcd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd64:	4b17      	ldr	r3, [pc, #92]	; (800fdc4 <xTaskIncrementTick+0x168>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd6a:	4915      	ldr	r1, [pc, #84]	; (800fdc0 <xTaskIncrementTick+0x164>)
 800fd6c:	4613      	mov	r3, r2
 800fd6e:	009b      	lsls	r3, r3, #2
 800fd70:	4413      	add	r3, r2
 800fd72:	009b      	lsls	r3, r3, #2
 800fd74:	440b      	add	r3, r1
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d901      	bls.n	800fd80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fd80:	4b11      	ldr	r3, [pc, #68]	; (800fdc8 <xTaskIncrementTick+0x16c>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d007      	beq.n	800fd98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	617b      	str	r3, [r7, #20]
 800fd8c:	e004      	b.n	800fd98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fd8e:	4b0f      	ldr	r3, [pc, #60]	; (800fdcc <xTaskIncrementTick+0x170>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	3301      	adds	r3, #1
 800fd94:	4a0d      	ldr	r2, [pc, #52]	; (800fdcc <xTaskIncrementTick+0x170>)
 800fd96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fd98:	697b      	ldr	r3, [r7, #20]
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3718      	adds	r7, #24
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	200014f4 	.word	0x200014f4
 800fda8:	200014d0 	.word	0x200014d0
 800fdac:	20001484 	.word	0x20001484
 800fdb0:	20001488 	.word	0x20001488
 800fdb4:	200014e4 	.word	0x200014e4
 800fdb8:	200014ec 	.word	0x200014ec
 800fdbc:	200014d4 	.word	0x200014d4
 800fdc0:	20000ffc 	.word	0x20000ffc
 800fdc4:	20000ff8 	.word	0x20000ff8
 800fdc8:	200014e0 	.word	0x200014e0
 800fdcc:	200014dc 	.word	0x200014dc

0800fdd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b085      	sub	sp, #20
 800fdd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdd6:	4b2a      	ldr	r3, [pc, #168]	; (800fe80 <vTaskSwitchContext+0xb0>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d003      	beq.n	800fde6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdde:	4b29      	ldr	r3, [pc, #164]	; (800fe84 <vTaskSwitchContext+0xb4>)
 800fde0:	2201      	movs	r2, #1
 800fde2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fde4:	e046      	b.n	800fe74 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fde6:	4b27      	ldr	r3, [pc, #156]	; (800fe84 <vTaskSwitchContext+0xb4>)
 800fde8:	2200      	movs	r2, #0
 800fdea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdec:	4b26      	ldr	r3, [pc, #152]	; (800fe88 <vTaskSwitchContext+0xb8>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	60fb      	str	r3, [r7, #12]
 800fdf2:	e010      	b.n	800fe16 <vTaskSwitchContext+0x46>
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d10a      	bne.n	800fe10 <vTaskSwitchContext+0x40>
	__asm volatile
 800fdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfe:	f383 8811 	msr	BASEPRI, r3
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	607b      	str	r3, [r7, #4]
}
 800fe0c:	bf00      	nop
 800fe0e:	e7fe      	b.n	800fe0e <vTaskSwitchContext+0x3e>
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	3b01      	subs	r3, #1
 800fe14:	60fb      	str	r3, [r7, #12]
 800fe16:	491d      	ldr	r1, [pc, #116]	; (800fe8c <vTaskSwitchContext+0xbc>)
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	4413      	add	r3, r2
 800fe20:	009b      	lsls	r3, r3, #2
 800fe22:	440b      	add	r3, r1
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d0e4      	beq.n	800fdf4 <vTaskSwitchContext+0x24>
 800fe2a:	68fa      	ldr	r2, [r7, #12]
 800fe2c:	4613      	mov	r3, r2
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	4413      	add	r3, r2
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	4a15      	ldr	r2, [pc, #84]	; (800fe8c <vTaskSwitchContext+0xbc>)
 800fe36:	4413      	add	r3, r2
 800fe38:	60bb      	str	r3, [r7, #8]
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	685a      	ldr	r2, [r3, #4]
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	605a      	str	r2, [r3, #4]
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	685a      	ldr	r2, [r3, #4]
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	3308      	adds	r3, #8
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d104      	bne.n	800fe5a <vTaskSwitchContext+0x8a>
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	685a      	ldr	r2, [r3, #4]
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	605a      	str	r2, [r3, #4]
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	4a0b      	ldr	r2, [pc, #44]	; (800fe90 <vTaskSwitchContext+0xc0>)
 800fe62:	6013      	str	r3, [r2, #0]
 800fe64:	4a08      	ldr	r2, [pc, #32]	; (800fe88 <vTaskSwitchContext+0xb8>)
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe6a:	4b09      	ldr	r3, [pc, #36]	; (800fe90 <vTaskSwitchContext+0xc0>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	3354      	adds	r3, #84	; 0x54
 800fe70:	4a08      	ldr	r2, [pc, #32]	; (800fe94 <vTaskSwitchContext+0xc4>)
 800fe72:	6013      	str	r3, [r2, #0]
}
 800fe74:	bf00      	nop
 800fe76:	3714      	adds	r7, #20
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr
 800fe80:	200014f4 	.word	0x200014f4
 800fe84:	200014e0 	.word	0x200014e0
 800fe88:	200014d4 	.word	0x200014d4
 800fe8c:	20000ffc 	.word	0x20000ffc
 800fe90:	20000ff8 	.word	0x20000ff8
 800fe94:	200001ec 	.word	0x200001ec

0800fe98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d10a      	bne.n	800febe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feac:	f383 8811 	msr	BASEPRI, r3
 800feb0:	f3bf 8f6f 	isb	sy
 800feb4:	f3bf 8f4f 	dsb	sy
 800feb8:	60fb      	str	r3, [r7, #12]
}
 800feba:	bf00      	nop
 800febc:	e7fe      	b.n	800febc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800febe:	4b07      	ldr	r3, [pc, #28]	; (800fedc <vTaskPlaceOnEventList+0x44>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	3318      	adds	r3, #24
 800fec4:	4619      	mov	r1, r3
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7fe fb3f 	bl	800e54a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fecc:	2101      	movs	r1, #1
 800fece:	6838      	ldr	r0, [r7, #0]
 800fed0:	f000 fb7e 	bl	80105d0 <prvAddCurrentTaskToDelayedList>
}
 800fed4:	bf00      	nop
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	20000ff8 	.word	0x20000ff8

0800fee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b086      	sub	sp, #24
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d10a      	bne.n	800ff08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	617b      	str	r3, [r7, #20]
}
 800ff04:	bf00      	nop
 800ff06:	e7fe      	b.n	800ff06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff08:	4b0a      	ldr	r3, [pc, #40]	; (800ff34 <vTaskPlaceOnEventListRestricted+0x54>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	3318      	adds	r3, #24
 800ff0e:	4619      	mov	r1, r3
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f7fe faf6 	bl	800e502 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d002      	beq.n	800ff22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ff1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff22:	6879      	ldr	r1, [r7, #4]
 800ff24:	68b8      	ldr	r0, [r7, #8]
 800ff26:	f000 fb53 	bl	80105d0 <prvAddCurrentTaskToDelayedList>
	}
 800ff2a:	bf00      	nop
 800ff2c:	3718      	adds	r7, #24
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	20000ff8 	.word	0x20000ff8

0800ff38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d10a      	bne.n	800ff64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ff4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	60fb      	str	r3, [r7, #12]
}
 800ff60:	bf00      	nop
 800ff62:	e7fe      	b.n	800ff62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	3318      	adds	r3, #24
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7fe fb27 	bl	800e5bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff6e:	4b1e      	ldr	r3, [pc, #120]	; (800ffe8 <xTaskRemoveFromEventList+0xb0>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d11d      	bne.n	800ffb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	3304      	adds	r3, #4
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fe fb1e 	bl	800e5bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff84:	4b19      	ldr	r3, [pc, #100]	; (800ffec <xTaskRemoveFromEventList+0xb4>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d903      	bls.n	800ff94 <xTaskRemoveFromEventList+0x5c>
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff90:	4a16      	ldr	r2, [pc, #88]	; (800ffec <xTaskRemoveFromEventList+0xb4>)
 800ff92:	6013      	str	r3, [r2, #0]
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff98:	4613      	mov	r3, r2
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	4413      	add	r3, r2
 800ff9e:	009b      	lsls	r3, r3, #2
 800ffa0:	4a13      	ldr	r2, [pc, #76]	; (800fff0 <xTaskRemoveFromEventList+0xb8>)
 800ffa2:	441a      	add	r2, r3
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	3304      	adds	r3, #4
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	4610      	mov	r0, r2
 800ffac:	f7fe faa9 	bl	800e502 <vListInsertEnd>
 800ffb0:	e005      	b.n	800ffbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	3318      	adds	r3, #24
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	480e      	ldr	r0, [pc, #56]	; (800fff4 <xTaskRemoveFromEventList+0xbc>)
 800ffba:	f7fe faa2 	bl	800e502 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc2:	4b0d      	ldr	r3, [pc, #52]	; (800fff8 <xTaskRemoveFromEventList+0xc0>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d905      	bls.n	800ffd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ffd0:	4b0a      	ldr	r3, [pc, #40]	; (800fffc <xTaskRemoveFromEventList+0xc4>)
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	601a      	str	r2, [r3, #0]
 800ffd6:	e001      	b.n	800ffdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ffdc:	697b      	ldr	r3, [r7, #20]
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3718      	adds	r7, #24
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	200014f4 	.word	0x200014f4
 800ffec:	200014d4 	.word	0x200014d4
 800fff0:	20000ffc 	.word	0x20000ffc
 800fff4:	2000148c 	.word	0x2000148c
 800fff8:	20000ff8 	.word	0x20000ff8
 800fffc:	200014e0 	.word	0x200014e0

08010000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010000:	b480      	push	{r7}
 8010002:	b083      	sub	sp, #12
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010008:	4b06      	ldr	r3, [pc, #24]	; (8010024 <vTaskInternalSetTimeOutState+0x24>)
 801000a:	681a      	ldr	r2, [r3, #0]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010010:	4b05      	ldr	r3, [pc, #20]	; (8010028 <vTaskInternalSetTimeOutState+0x28>)
 8010012:	681a      	ldr	r2, [r3, #0]
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	605a      	str	r2, [r3, #4]
}
 8010018:	bf00      	nop
 801001a:	370c      	adds	r7, #12
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr
 8010024:	200014e4 	.word	0x200014e4
 8010028:	200014d0 	.word	0x200014d0

0801002c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b088      	sub	sp, #32
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d10a      	bne.n	8010052 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801003c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010040:	f383 8811 	msr	BASEPRI, r3
 8010044:	f3bf 8f6f 	isb	sy
 8010048:	f3bf 8f4f 	dsb	sy
 801004c:	613b      	str	r3, [r7, #16]
}
 801004e:	bf00      	nop
 8010050:	e7fe      	b.n	8010050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d10a      	bne.n	801006e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005c:	f383 8811 	msr	BASEPRI, r3
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	60fb      	str	r3, [r7, #12]
}
 801006a:	bf00      	nop
 801006c:	e7fe      	b.n	801006c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801006e:	f000 ff81 	bl	8010f74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010072:	4b1d      	ldr	r3, [pc, #116]	; (80100e8 <xTaskCheckForTimeOut+0xbc>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	69ba      	ldr	r2, [r7, #24]
 801007e:	1ad3      	subs	r3, r2, r3
 8010080:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f1b3 3fff 	cmp.w	r3, #4294967295
 801008a:	d102      	bne.n	8010092 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801008c:	2300      	movs	r3, #0
 801008e:	61fb      	str	r3, [r7, #28]
 8010090:	e023      	b.n	80100da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	4b15      	ldr	r3, [pc, #84]	; (80100ec <xTaskCheckForTimeOut+0xc0>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	429a      	cmp	r2, r3
 801009c:	d007      	beq.n	80100ae <xTaskCheckForTimeOut+0x82>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	69ba      	ldr	r2, [r7, #24]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d302      	bcc.n	80100ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100a8:	2301      	movs	r3, #1
 80100aa:	61fb      	str	r3, [r7, #28]
 80100ac:	e015      	b.n	80100da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	697a      	ldr	r2, [r7, #20]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d20b      	bcs.n	80100d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	1ad2      	subs	r2, r2, r3
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f7ff ff9b 	bl	8010000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80100ca:	2300      	movs	r3, #0
 80100cc:	61fb      	str	r3, [r7, #28]
 80100ce:	e004      	b.n	80100da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	2200      	movs	r2, #0
 80100d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80100d6:	2301      	movs	r3, #1
 80100d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80100da:	f000 ff7b 	bl	8010fd4 <vPortExitCritical>

	return xReturn;
 80100de:	69fb      	ldr	r3, [r7, #28]
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3720      	adds	r7, #32
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	200014d0 	.word	0x200014d0
 80100ec:	200014e4 	.word	0x200014e4

080100f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80100f0:	b480      	push	{r7}
 80100f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80100f4:	4b03      	ldr	r3, [pc, #12]	; (8010104 <vTaskMissedYield+0x14>)
 80100f6:	2201      	movs	r2, #1
 80100f8:	601a      	str	r2, [r3, #0]
}
 80100fa:	bf00      	nop
 80100fc:	46bd      	mov	sp, r7
 80100fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010102:	4770      	bx	lr
 8010104:	200014e0 	.word	0x200014e0

08010108 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010110:	f000 f852 	bl	80101b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010114:	4b06      	ldr	r3, [pc, #24]	; (8010130 <prvIdleTask+0x28>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	2b01      	cmp	r3, #1
 801011a:	d9f9      	bls.n	8010110 <prvIdleTask+0x8>
			{
				taskYIELD();
 801011c:	4b05      	ldr	r3, [pc, #20]	; (8010134 <prvIdleTask+0x2c>)
 801011e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010122:	601a      	str	r2, [r3, #0]
 8010124:	f3bf 8f4f 	dsb	sy
 8010128:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801012c:	e7f0      	b.n	8010110 <prvIdleTask+0x8>
 801012e:	bf00      	nop
 8010130:	20000ffc 	.word	0x20000ffc
 8010134:	e000ed04 	.word	0xe000ed04

08010138 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801013e:	2300      	movs	r3, #0
 8010140:	607b      	str	r3, [r7, #4]
 8010142:	e00c      	b.n	801015e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	4613      	mov	r3, r2
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	4413      	add	r3, r2
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	4a12      	ldr	r2, [pc, #72]	; (8010198 <prvInitialiseTaskLists+0x60>)
 8010150:	4413      	add	r3, r2
 8010152:	4618      	mov	r0, r3
 8010154:	f7fe f9a8 	bl	800e4a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	3301      	adds	r3, #1
 801015c:	607b      	str	r3, [r7, #4]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2b37      	cmp	r3, #55	; 0x37
 8010162:	d9ef      	bls.n	8010144 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010164:	480d      	ldr	r0, [pc, #52]	; (801019c <prvInitialiseTaskLists+0x64>)
 8010166:	f7fe f99f 	bl	800e4a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801016a:	480d      	ldr	r0, [pc, #52]	; (80101a0 <prvInitialiseTaskLists+0x68>)
 801016c:	f7fe f99c 	bl	800e4a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010170:	480c      	ldr	r0, [pc, #48]	; (80101a4 <prvInitialiseTaskLists+0x6c>)
 8010172:	f7fe f999 	bl	800e4a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010176:	480c      	ldr	r0, [pc, #48]	; (80101a8 <prvInitialiseTaskLists+0x70>)
 8010178:	f7fe f996 	bl	800e4a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801017c:	480b      	ldr	r0, [pc, #44]	; (80101ac <prvInitialiseTaskLists+0x74>)
 801017e:	f7fe f993 	bl	800e4a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010182:	4b0b      	ldr	r3, [pc, #44]	; (80101b0 <prvInitialiseTaskLists+0x78>)
 8010184:	4a05      	ldr	r2, [pc, #20]	; (801019c <prvInitialiseTaskLists+0x64>)
 8010186:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010188:	4b0a      	ldr	r3, [pc, #40]	; (80101b4 <prvInitialiseTaskLists+0x7c>)
 801018a:	4a05      	ldr	r2, [pc, #20]	; (80101a0 <prvInitialiseTaskLists+0x68>)
 801018c:	601a      	str	r2, [r3, #0]
}
 801018e:	bf00      	nop
 8010190:	3708      	adds	r7, #8
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	20000ffc 	.word	0x20000ffc
 801019c:	2000145c 	.word	0x2000145c
 80101a0:	20001470 	.word	0x20001470
 80101a4:	2000148c 	.word	0x2000148c
 80101a8:	200014a0 	.word	0x200014a0
 80101ac:	200014b8 	.word	0x200014b8
 80101b0:	20001484 	.word	0x20001484
 80101b4:	20001488 	.word	0x20001488

080101b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101be:	e019      	b.n	80101f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80101c0:	f000 fed8 	bl	8010f74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101c4:	4b10      	ldr	r3, [pc, #64]	; (8010208 <prvCheckTasksWaitingTermination+0x50>)
 80101c6:	68db      	ldr	r3, [r3, #12]
 80101c8:	68db      	ldr	r3, [r3, #12]
 80101ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	3304      	adds	r3, #4
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fe f9f3 	bl	800e5bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80101d6:	4b0d      	ldr	r3, [pc, #52]	; (801020c <prvCheckTasksWaitingTermination+0x54>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	3b01      	subs	r3, #1
 80101dc:	4a0b      	ldr	r2, [pc, #44]	; (801020c <prvCheckTasksWaitingTermination+0x54>)
 80101de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80101e0:	4b0b      	ldr	r3, [pc, #44]	; (8010210 <prvCheckTasksWaitingTermination+0x58>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	4a0a      	ldr	r2, [pc, #40]	; (8010210 <prvCheckTasksWaitingTermination+0x58>)
 80101e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80101ea:	f000 fef3 	bl	8010fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 f810 	bl	8010214 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101f4:	4b06      	ldr	r3, [pc, #24]	; (8010210 <prvCheckTasksWaitingTermination+0x58>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d1e1      	bne.n	80101c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80101fc:	bf00      	nop
 80101fe:	bf00      	nop
 8010200:	3708      	adds	r7, #8
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	200014a0 	.word	0x200014a0
 801020c:	200014cc 	.word	0x200014cc
 8010210:	200014b4 	.word	0x200014b4

08010214 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	3354      	adds	r3, #84	; 0x54
 8010220:	4618      	mov	r0, r3
 8010222:	f018 ff9b 	bl	802915c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801022c:	2b00      	cmp	r3, #0
 801022e:	d108      	bne.n	8010242 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010234:	4618      	mov	r0, r3
 8010236:	f001 f88b 	bl	8011350 <vPortFree>
				vPortFree( pxTCB );
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f001 f888 	bl	8011350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010240:	e018      	b.n	8010274 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010248:	2b01      	cmp	r3, #1
 801024a:	d103      	bne.n	8010254 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f001 f87f 	bl	8011350 <vPortFree>
	}
 8010252:	e00f      	b.n	8010274 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801025a:	2b02      	cmp	r3, #2
 801025c:	d00a      	beq.n	8010274 <prvDeleteTCB+0x60>
	__asm volatile
 801025e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010262:	f383 8811 	msr	BASEPRI, r3
 8010266:	f3bf 8f6f 	isb	sy
 801026a:	f3bf 8f4f 	dsb	sy
 801026e:	60fb      	str	r3, [r7, #12]
}
 8010270:	bf00      	nop
 8010272:	e7fe      	b.n	8010272 <prvDeleteTCB+0x5e>
	}
 8010274:	bf00      	nop
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010282:	4b0c      	ldr	r3, [pc, #48]	; (80102b4 <prvResetNextTaskUnblockTime+0x38>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d104      	bne.n	8010296 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801028c:	4b0a      	ldr	r3, [pc, #40]	; (80102b8 <prvResetNextTaskUnblockTime+0x3c>)
 801028e:	f04f 32ff 	mov.w	r2, #4294967295
 8010292:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010294:	e008      	b.n	80102a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010296:	4b07      	ldr	r3, [pc, #28]	; (80102b4 <prvResetNextTaskUnblockTime+0x38>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	4a04      	ldr	r2, [pc, #16]	; (80102b8 <prvResetNextTaskUnblockTime+0x3c>)
 80102a6:	6013      	str	r3, [r2, #0]
}
 80102a8:	bf00      	nop
 80102aa:	370c      	adds	r7, #12
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr
 80102b4:	20001484 	.word	0x20001484
 80102b8:	200014ec 	.word	0x200014ec

080102bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80102bc:	b480      	push	{r7}
 80102be:	b083      	sub	sp, #12
 80102c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80102c2:	4b0b      	ldr	r3, [pc, #44]	; (80102f0 <xTaskGetSchedulerState+0x34>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d102      	bne.n	80102d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80102ca:	2301      	movs	r3, #1
 80102cc:	607b      	str	r3, [r7, #4]
 80102ce:	e008      	b.n	80102e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102d0:	4b08      	ldr	r3, [pc, #32]	; (80102f4 <xTaskGetSchedulerState+0x38>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d102      	bne.n	80102de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80102d8:	2302      	movs	r3, #2
 80102da:	607b      	str	r3, [r7, #4]
 80102dc:	e001      	b.n	80102e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80102de:	2300      	movs	r3, #0
 80102e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80102e2:	687b      	ldr	r3, [r7, #4]
	}
 80102e4:	4618      	mov	r0, r3
 80102e6:	370c      	adds	r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr
 80102f0:	200014d8 	.word	0x200014d8
 80102f4:	200014f4 	.word	0x200014f4

080102f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010304:	2300      	movs	r3, #0
 8010306:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d051      	beq.n	80103b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010312:	4b2a      	ldr	r3, [pc, #168]	; (80103bc <xTaskPriorityInherit+0xc4>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010318:	429a      	cmp	r2, r3
 801031a:	d241      	bcs.n	80103a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	699b      	ldr	r3, [r3, #24]
 8010320:	2b00      	cmp	r3, #0
 8010322:	db06      	blt.n	8010332 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010324:	4b25      	ldr	r3, [pc, #148]	; (80103bc <xTaskPriorityInherit+0xc4>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801032a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	6959      	ldr	r1, [r3, #20]
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801033a:	4613      	mov	r3, r2
 801033c:	009b      	lsls	r3, r3, #2
 801033e:	4413      	add	r3, r2
 8010340:	009b      	lsls	r3, r3, #2
 8010342:	4a1f      	ldr	r2, [pc, #124]	; (80103c0 <xTaskPriorityInherit+0xc8>)
 8010344:	4413      	add	r3, r2
 8010346:	4299      	cmp	r1, r3
 8010348:	d122      	bne.n	8010390 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	3304      	adds	r3, #4
 801034e:	4618      	mov	r0, r3
 8010350:	f7fe f934 	bl	800e5bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010354:	4b19      	ldr	r3, [pc, #100]	; (80103bc <xTaskPriorityInherit+0xc4>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010362:	4b18      	ldr	r3, [pc, #96]	; (80103c4 <xTaskPriorityInherit+0xcc>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	429a      	cmp	r2, r3
 8010368:	d903      	bls.n	8010372 <xTaskPriorityInherit+0x7a>
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801036e:	4a15      	ldr	r2, [pc, #84]	; (80103c4 <xTaskPriorityInherit+0xcc>)
 8010370:	6013      	str	r3, [r2, #0]
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010376:	4613      	mov	r3, r2
 8010378:	009b      	lsls	r3, r3, #2
 801037a:	4413      	add	r3, r2
 801037c:	009b      	lsls	r3, r3, #2
 801037e:	4a10      	ldr	r2, [pc, #64]	; (80103c0 <xTaskPriorityInherit+0xc8>)
 8010380:	441a      	add	r2, r3
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	3304      	adds	r3, #4
 8010386:	4619      	mov	r1, r3
 8010388:	4610      	mov	r0, r2
 801038a:	f7fe f8ba 	bl	800e502 <vListInsertEnd>
 801038e:	e004      	b.n	801039a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010390:	4b0a      	ldr	r3, [pc, #40]	; (80103bc <xTaskPriorityInherit+0xc4>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801039a:	2301      	movs	r3, #1
 801039c:	60fb      	str	r3, [r7, #12]
 801039e:	e008      	b.n	80103b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103a4:	4b05      	ldr	r3, [pc, #20]	; (80103bc <xTaskPriorityInherit+0xc4>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d201      	bcs.n	80103b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80103ae:	2301      	movs	r3, #1
 80103b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103b2:	68fb      	ldr	r3, [r7, #12]
	}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3710      	adds	r7, #16
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	20000ff8 	.word	0x20000ff8
 80103c0:	20000ffc 	.word	0x20000ffc
 80103c4:	200014d4 	.word	0x200014d4

080103c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b086      	sub	sp, #24
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80103d4:	2300      	movs	r3, #0
 80103d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d056      	beq.n	801048c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80103de:	4b2e      	ldr	r3, [pc, #184]	; (8010498 <xTaskPriorityDisinherit+0xd0>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	693a      	ldr	r2, [r7, #16]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d00a      	beq.n	80103fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80103e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ec:	f383 8811 	msr	BASEPRI, r3
 80103f0:	f3bf 8f6f 	isb	sy
 80103f4:	f3bf 8f4f 	dsb	sy
 80103f8:	60fb      	str	r3, [r7, #12]
}
 80103fa:	bf00      	nop
 80103fc:	e7fe      	b.n	80103fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010402:	2b00      	cmp	r3, #0
 8010404:	d10a      	bne.n	801041c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040a:	f383 8811 	msr	BASEPRI, r3
 801040e:	f3bf 8f6f 	isb	sy
 8010412:	f3bf 8f4f 	dsb	sy
 8010416:	60bb      	str	r3, [r7, #8]
}
 8010418:	bf00      	nop
 801041a:	e7fe      	b.n	801041a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010420:	1e5a      	subs	r2, r3, #1
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801042e:	429a      	cmp	r2, r3
 8010430:	d02c      	beq.n	801048c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010436:	2b00      	cmp	r3, #0
 8010438:	d128      	bne.n	801048c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	3304      	adds	r3, #4
 801043e:	4618      	mov	r0, r3
 8010440:	f7fe f8bc 	bl	800e5bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010450:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010454:	693b      	ldr	r3, [r7, #16]
 8010456:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801045c:	4b0f      	ldr	r3, [pc, #60]	; (801049c <xTaskPriorityDisinherit+0xd4>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	429a      	cmp	r2, r3
 8010462:	d903      	bls.n	801046c <xTaskPriorityDisinherit+0xa4>
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010468:	4a0c      	ldr	r2, [pc, #48]	; (801049c <xTaskPriorityDisinherit+0xd4>)
 801046a:	6013      	str	r3, [r2, #0]
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010470:	4613      	mov	r3, r2
 8010472:	009b      	lsls	r3, r3, #2
 8010474:	4413      	add	r3, r2
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	4a09      	ldr	r2, [pc, #36]	; (80104a0 <xTaskPriorityDisinherit+0xd8>)
 801047a:	441a      	add	r2, r3
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	3304      	adds	r3, #4
 8010480:	4619      	mov	r1, r3
 8010482:	4610      	mov	r0, r2
 8010484:	f7fe f83d 	bl	800e502 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010488:	2301      	movs	r3, #1
 801048a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801048c:	697b      	ldr	r3, [r7, #20]
	}
 801048e:	4618      	mov	r0, r3
 8010490:	3718      	adds	r7, #24
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop
 8010498:	20000ff8 	.word	0x20000ff8
 801049c:	200014d4 	.word	0x200014d4
 80104a0:	20000ffc 	.word	0x20000ffc

080104a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b088      	sub	sp, #32
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80104b2:	2301      	movs	r3, #1
 80104b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d06a      	beq.n	8010592 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80104bc:	69bb      	ldr	r3, [r7, #24]
 80104be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d10a      	bne.n	80104da <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80104c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c8:	f383 8811 	msr	BASEPRI, r3
 80104cc:	f3bf 8f6f 	isb	sy
 80104d0:	f3bf 8f4f 	dsb	sy
 80104d4:	60fb      	str	r3, [r7, #12]
}
 80104d6:	bf00      	nop
 80104d8:	e7fe      	b.n	80104d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104de:	683a      	ldr	r2, [r7, #0]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d902      	bls.n	80104ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	61fb      	str	r3, [r7, #28]
 80104e8:	e002      	b.n	80104f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104f4:	69fa      	ldr	r2, [r7, #28]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d04b      	beq.n	8010592 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104fe:	697a      	ldr	r2, [r7, #20]
 8010500:	429a      	cmp	r2, r3
 8010502:	d146      	bne.n	8010592 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010504:	4b25      	ldr	r3, [pc, #148]	; (801059c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	69ba      	ldr	r2, [r7, #24]
 801050a:	429a      	cmp	r2, r3
 801050c:	d10a      	bne.n	8010524 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801050e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010512:	f383 8811 	msr	BASEPRI, r3
 8010516:	f3bf 8f6f 	isb	sy
 801051a:	f3bf 8f4f 	dsb	sy
 801051e:	60bb      	str	r3, [r7, #8]
}
 8010520:	bf00      	nop
 8010522:	e7fe      	b.n	8010522 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010524:	69bb      	ldr	r3, [r7, #24]
 8010526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010528:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801052a:	69bb      	ldr	r3, [r7, #24]
 801052c:	69fa      	ldr	r2, [r7, #28]
 801052e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010530:	69bb      	ldr	r3, [r7, #24]
 8010532:	699b      	ldr	r3, [r3, #24]
 8010534:	2b00      	cmp	r3, #0
 8010536:	db04      	blt.n	8010542 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	6959      	ldr	r1, [r3, #20]
 8010546:	693a      	ldr	r2, [r7, #16]
 8010548:	4613      	mov	r3, r2
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	4413      	add	r3, r2
 801054e:	009b      	lsls	r3, r3, #2
 8010550:	4a13      	ldr	r2, [pc, #76]	; (80105a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010552:	4413      	add	r3, r2
 8010554:	4299      	cmp	r1, r3
 8010556:	d11c      	bne.n	8010592 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010558:	69bb      	ldr	r3, [r7, #24]
 801055a:	3304      	adds	r3, #4
 801055c:	4618      	mov	r0, r3
 801055e:	f7fe f82d 	bl	800e5bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010562:	69bb      	ldr	r3, [r7, #24]
 8010564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010566:	4b0f      	ldr	r3, [pc, #60]	; (80105a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	429a      	cmp	r2, r3
 801056c:	d903      	bls.n	8010576 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010572:	4a0c      	ldr	r2, [pc, #48]	; (80105a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010574:	6013      	str	r3, [r2, #0]
 8010576:	69bb      	ldr	r3, [r7, #24]
 8010578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801057a:	4613      	mov	r3, r2
 801057c:	009b      	lsls	r3, r3, #2
 801057e:	4413      	add	r3, r2
 8010580:	009b      	lsls	r3, r3, #2
 8010582:	4a07      	ldr	r2, [pc, #28]	; (80105a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010584:	441a      	add	r2, r3
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	3304      	adds	r3, #4
 801058a:	4619      	mov	r1, r3
 801058c:	4610      	mov	r0, r2
 801058e:	f7fd ffb8 	bl	800e502 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010592:	bf00      	nop
 8010594:	3720      	adds	r7, #32
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	20000ff8 	.word	0x20000ff8
 80105a0:	20000ffc 	.word	0x20000ffc
 80105a4:	200014d4 	.word	0x200014d4

080105a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80105a8:	b480      	push	{r7}
 80105aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80105ac:	4b07      	ldr	r3, [pc, #28]	; (80105cc <pvTaskIncrementMutexHeldCount+0x24>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d004      	beq.n	80105be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80105b4:	4b05      	ldr	r3, [pc, #20]	; (80105cc <pvTaskIncrementMutexHeldCount+0x24>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105ba:	3201      	adds	r2, #1
 80105bc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80105be:	4b03      	ldr	r3, [pc, #12]	; (80105cc <pvTaskIncrementMutexHeldCount+0x24>)
 80105c0:	681b      	ldr	r3, [r3, #0]
	}
 80105c2:	4618      	mov	r0, r3
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr
 80105cc:	20000ff8 	.word	0x20000ff8

080105d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80105da:	4b21      	ldr	r3, [pc, #132]	; (8010660 <prvAddCurrentTaskToDelayedList+0x90>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105e0:	4b20      	ldr	r3, [pc, #128]	; (8010664 <prvAddCurrentTaskToDelayedList+0x94>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	3304      	adds	r3, #4
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fd ffe8 	bl	800e5bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f2:	d10a      	bne.n	801060a <prvAddCurrentTaskToDelayedList+0x3a>
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d007      	beq.n	801060a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105fa:	4b1a      	ldr	r3, [pc, #104]	; (8010664 <prvAddCurrentTaskToDelayedList+0x94>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	3304      	adds	r3, #4
 8010600:	4619      	mov	r1, r3
 8010602:	4819      	ldr	r0, [pc, #100]	; (8010668 <prvAddCurrentTaskToDelayedList+0x98>)
 8010604:	f7fd ff7d 	bl	800e502 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010608:	e026      	b.n	8010658 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801060a:	68fa      	ldr	r2, [r7, #12]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	4413      	add	r3, r2
 8010610:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010612:	4b14      	ldr	r3, [pc, #80]	; (8010664 <prvAddCurrentTaskToDelayedList+0x94>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	68ba      	ldr	r2, [r7, #8]
 8010618:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801061a:	68ba      	ldr	r2, [r7, #8]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	429a      	cmp	r2, r3
 8010620:	d209      	bcs.n	8010636 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010622:	4b12      	ldr	r3, [pc, #72]	; (801066c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010624:	681a      	ldr	r2, [r3, #0]
 8010626:	4b0f      	ldr	r3, [pc, #60]	; (8010664 <prvAddCurrentTaskToDelayedList+0x94>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	3304      	adds	r3, #4
 801062c:	4619      	mov	r1, r3
 801062e:	4610      	mov	r0, r2
 8010630:	f7fd ff8b 	bl	800e54a <vListInsert>
}
 8010634:	e010      	b.n	8010658 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010636:	4b0e      	ldr	r3, [pc, #56]	; (8010670 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010638:	681a      	ldr	r2, [r3, #0]
 801063a:	4b0a      	ldr	r3, [pc, #40]	; (8010664 <prvAddCurrentTaskToDelayedList+0x94>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3304      	adds	r3, #4
 8010640:	4619      	mov	r1, r3
 8010642:	4610      	mov	r0, r2
 8010644:	f7fd ff81 	bl	800e54a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010648:	4b0a      	ldr	r3, [pc, #40]	; (8010674 <prvAddCurrentTaskToDelayedList+0xa4>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	68ba      	ldr	r2, [r7, #8]
 801064e:	429a      	cmp	r2, r3
 8010650:	d202      	bcs.n	8010658 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010652:	4a08      	ldr	r2, [pc, #32]	; (8010674 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	6013      	str	r3, [r2, #0]
}
 8010658:	bf00      	nop
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	200014d0 	.word	0x200014d0
 8010664:	20000ff8 	.word	0x20000ff8
 8010668:	200014b8 	.word	0x200014b8
 801066c:	20001488 	.word	0x20001488
 8010670:	20001484 	.word	0x20001484
 8010674:	200014ec 	.word	0x200014ec

08010678 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b08a      	sub	sp, #40	; 0x28
 801067c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801067e:	2300      	movs	r3, #0
 8010680:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010682:	f000 fb07 	bl	8010c94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010686:	4b1c      	ldr	r3, [pc, #112]	; (80106f8 <xTimerCreateTimerTask+0x80>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d021      	beq.n	80106d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801068e:	2300      	movs	r3, #0
 8010690:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010692:	2300      	movs	r3, #0
 8010694:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010696:	1d3a      	adds	r2, r7, #4
 8010698:	f107 0108 	add.w	r1, r7, #8
 801069c:	f107 030c 	add.w	r3, r7, #12
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7fd fee7 	bl	800e474 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80106a6:	6879      	ldr	r1, [r7, #4]
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	68fa      	ldr	r2, [r7, #12]
 80106ac:	9202      	str	r2, [sp, #8]
 80106ae:	9301      	str	r3, [sp, #4]
 80106b0:	2302      	movs	r3, #2
 80106b2:	9300      	str	r3, [sp, #0]
 80106b4:	2300      	movs	r3, #0
 80106b6:	460a      	mov	r2, r1
 80106b8:	4910      	ldr	r1, [pc, #64]	; (80106fc <xTimerCreateTimerTask+0x84>)
 80106ba:	4811      	ldr	r0, [pc, #68]	; (8010700 <xTimerCreateTimerTask+0x88>)
 80106bc:	f7fe ffb6 	bl	800f62c <xTaskCreateStatic>
 80106c0:	4603      	mov	r3, r0
 80106c2:	4a10      	ldr	r2, [pc, #64]	; (8010704 <xTimerCreateTimerTask+0x8c>)
 80106c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80106c6:	4b0f      	ldr	r3, [pc, #60]	; (8010704 <xTimerCreateTimerTask+0x8c>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d001      	beq.n	80106d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80106ce:	2301      	movs	r3, #1
 80106d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d10a      	bne.n	80106ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80106d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106dc:	f383 8811 	msr	BASEPRI, r3
 80106e0:	f3bf 8f6f 	isb	sy
 80106e4:	f3bf 8f4f 	dsb	sy
 80106e8:	613b      	str	r3, [r7, #16]
}
 80106ea:	bf00      	nop
 80106ec:	e7fe      	b.n	80106ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80106ee:	697b      	ldr	r3, [r7, #20]
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3718      	adds	r7, #24
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	20001528 	.word	0x20001528
 80106fc:	08029910 	.word	0x08029910
 8010700:	0801083d 	.word	0x0801083d
 8010704:	2000152c 	.word	0x2000152c

08010708 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b08a      	sub	sp, #40	; 0x28
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
 8010714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010716:	2300      	movs	r3, #0
 8010718:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10a      	bne.n	8010736 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	623b      	str	r3, [r7, #32]
}
 8010732:	bf00      	nop
 8010734:	e7fe      	b.n	8010734 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010736:	4b1a      	ldr	r3, [pc, #104]	; (80107a0 <xTimerGenericCommand+0x98>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d02a      	beq.n	8010794 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	2b05      	cmp	r3, #5
 801074e:	dc18      	bgt.n	8010782 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010750:	f7ff fdb4 	bl	80102bc <xTaskGetSchedulerState>
 8010754:	4603      	mov	r3, r0
 8010756:	2b02      	cmp	r3, #2
 8010758:	d109      	bne.n	801076e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801075a:	4b11      	ldr	r3, [pc, #68]	; (80107a0 <xTimerGenericCommand+0x98>)
 801075c:	6818      	ldr	r0, [r3, #0]
 801075e:	f107 0110 	add.w	r1, r7, #16
 8010762:	2300      	movs	r3, #0
 8010764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010766:	f7fe f8fb 	bl	800e960 <xQueueGenericSend>
 801076a:	6278      	str	r0, [r7, #36]	; 0x24
 801076c:	e012      	b.n	8010794 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801076e:	4b0c      	ldr	r3, [pc, #48]	; (80107a0 <xTimerGenericCommand+0x98>)
 8010770:	6818      	ldr	r0, [r3, #0]
 8010772:	f107 0110 	add.w	r1, r7, #16
 8010776:	2300      	movs	r3, #0
 8010778:	2200      	movs	r2, #0
 801077a:	f7fe f8f1 	bl	800e960 <xQueueGenericSend>
 801077e:	6278      	str	r0, [r7, #36]	; 0x24
 8010780:	e008      	b.n	8010794 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010782:	4b07      	ldr	r3, [pc, #28]	; (80107a0 <xTimerGenericCommand+0x98>)
 8010784:	6818      	ldr	r0, [r3, #0]
 8010786:	f107 0110 	add.w	r1, r7, #16
 801078a:	2300      	movs	r3, #0
 801078c:	683a      	ldr	r2, [r7, #0]
 801078e:	f7fe f9e5 	bl	800eb5c <xQueueGenericSendFromISR>
 8010792:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010796:	4618      	mov	r0, r3
 8010798:	3728      	adds	r7, #40	; 0x28
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	20001528 	.word	0x20001528

080107a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b088      	sub	sp, #32
 80107a8:	af02      	add	r7, sp, #8
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107ae:	4b22      	ldr	r3, [pc, #136]	; (8010838 <prvProcessExpiredTimer+0x94>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	3304      	adds	r3, #4
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fd fefd 	bl	800e5bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107c8:	f003 0304 	and.w	r3, r3, #4
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d022      	beq.n	8010816 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	699a      	ldr	r2, [r3, #24]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	18d1      	adds	r1, r2, r3
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	683a      	ldr	r2, [r7, #0]
 80107dc:	6978      	ldr	r0, [r7, #20]
 80107de:	f000 f8d1 	bl	8010984 <prvInsertTimerInActiveList>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d01f      	beq.n	8010828 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80107e8:	2300      	movs	r3, #0
 80107ea:	9300      	str	r3, [sp, #0]
 80107ec:	2300      	movs	r3, #0
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	2100      	movs	r1, #0
 80107f2:	6978      	ldr	r0, [r7, #20]
 80107f4:	f7ff ff88 	bl	8010708 <xTimerGenericCommand>
 80107f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d113      	bne.n	8010828 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010804:	f383 8811 	msr	BASEPRI, r3
 8010808:	f3bf 8f6f 	isb	sy
 801080c:	f3bf 8f4f 	dsb	sy
 8010810:	60fb      	str	r3, [r7, #12]
}
 8010812:	bf00      	nop
 8010814:	e7fe      	b.n	8010814 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801081c:	f023 0301 	bic.w	r3, r3, #1
 8010820:	b2da      	uxtb	r2, r3
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	6a1b      	ldr	r3, [r3, #32]
 801082c:	6978      	ldr	r0, [r7, #20]
 801082e:	4798      	blx	r3
}
 8010830:	bf00      	nop
 8010832:	3718      	adds	r7, #24
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	20001520 	.word	0x20001520

0801083c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010844:	f107 0308 	add.w	r3, r7, #8
 8010848:	4618      	mov	r0, r3
 801084a:	f000 f857 	bl	80108fc <prvGetNextExpireTime>
 801084e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	4619      	mov	r1, r3
 8010854:	68f8      	ldr	r0, [r7, #12]
 8010856:	f000 f803 	bl	8010860 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801085a:	f000 f8d5 	bl	8010a08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801085e:	e7f1      	b.n	8010844 <prvTimerTask+0x8>

08010860 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801086a:	f7ff f93b 	bl	800fae4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801086e:	f107 0308 	add.w	r3, r7, #8
 8010872:	4618      	mov	r0, r3
 8010874:	f000 f866 	bl	8010944 <prvSampleTimeNow>
 8010878:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d130      	bne.n	80108e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d10a      	bne.n	801089c <prvProcessTimerOrBlockTask+0x3c>
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	429a      	cmp	r2, r3
 801088c:	d806      	bhi.n	801089c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801088e:	f7ff f937 	bl	800fb00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010892:	68f9      	ldr	r1, [r7, #12]
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f7ff ff85 	bl	80107a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801089a:	e024      	b.n	80108e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d008      	beq.n	80108b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80108a2:	4b13      	ldr	r3, [pc, #76]	; (80108f0 <prvProcessTimerOrBlockTask+0x90>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d101      	bne.n	80108b0 <prvProcessTimerOrBlockTask+0x50>
 80108ac:	2301      	movs	r3, #1
 80108ae:	e000      	b.n	80108b2 <prvProcessTimerOrBlockTask+0x52>
 80108b0:	2300      	movs	r3, #0
 80108b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80108b4:	4b0f      	ldr	r3, [pc, #60]	; (80108f4 <prvProcessTimerOrBlockTask+0x94>)
 80108b6:	6818      	ldr	r0, [r3, #0]
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	1ad3      	subs	r3, r2, r3
 80108be:	683a      	ldr	r2, [r7, #0]
 80108c0:	4619      	mov	r1, r3
 80108c2:	f7fe fe7f 	bl	800f5c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80108c6:	f7ff f91b 	bl	800fb00 <xTaskResumeAll>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d10a      	bne.n	80108e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80108d0:	4b09      	ldr	r3, [pc, #36]	; (80108f8 <prvProcessTimerOrBlockTask+0x98>)
 80108d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108d6:	601a      	str	r2, [r3, #0]
 80108d8:	f3bf 8f4f 	dsb	sy
 80108dc:	f3bf 8f6f 	isb	sy
}
 80108e0:	e001      	b.n	80108e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80108e2:	f7ff f90d 	bl	800fb00 <xTaskResumeAll>
}
 80108e6:	bf00      	nop
 80108e8:	3710      	adds	r7, #16
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	20001524 	.word	0x20001524
 80108f4:	20001528 	.word	0x20001528
 80108f8:	e000ed04 	.word	0xe000ed04

080108fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80108fc:	b480      	push	{r7}
 80108fe:	b085      	sub	sp, #20
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010904:	4b0e      	ldr	r3, [pc, #56]	; (8010940 <prvGetNextExpireTime+0x44>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d101      	bne.n	8010912 <prvGetNextExpireTime+0x16>
 801090e:	2201      	movs	r2, #1
 8010910:	e000      	b.n	8010914 <prvGetNextExpireTime+0x18>
 8010912:	2200      	movs	r2, #0
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d105      	bne.n	801092c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010920:	4b07      	ldr	r3, [pc, #28]	; (8010940 <prvGetNextExpireTime+0x44>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	60fb      	str	r3, [r7, #12]
 801092a:	e001      	b.n	8010930 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801092c:	2300      	movs	r3, #0
 801092e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010930:	68fb      	ldr	r3, [r7, #12]
}
 8010932:	4618      	mov	r0, r3
 8010934:	3714      	adds	r7, #20
 8010936:	46bd      	mov	sp, r7
 8010938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093c:	4770      	bx	lr
 801093e:	bf00      	nop
 8010940:	20001520 	.word	0x20001520

08010944 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801094c:	f7ff f976 	bl	800fc3c <xTaskGetTickCount>
 8010950:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010952:	4b0b      	ldr	r3, [pc, #44]	; (8010980 <prvSampleTimeNow+0x3c>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	429a      	cmp	r2, r3
 801095a:	d205      	bcs.n	8010968 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801095c:	f000 f936 	bl	8010bcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2201      	movs	r2, #1
 8010964:	601a      	str	r2, [r3, #0]
 8010966:	e002      	b.n	801096e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2200      	movs	r2, #0
 801096c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801096e:	4a04      	ldr	r2, [pc, #16]	; (8010980 <prvSampleTimeNow+0x3c>)
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010974:	68fb      	ldr	r3, [r7, #12]
}
 8010976:	4618      	mov	r0, r3
 8010978:	3710      	adds	r7, #16
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	20001530 	.word	0x20001530

08010984 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b086      	sub	sp, #24
 8010988:	af00      	add	r7, sp, #0
 801098a:	60f8      	str	r0, [r7, #12]
 801098c:	60b9      	str	r1, [r7, #8]
 801098e:	607a      	str	r2, [r7, #4]
 8010990:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010992:	2300      	movs	r3, #0
 8010994:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	68ba      	ldr	r2, [r7, #8]
 801099a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	68fa      	ldr	r2, [r7, #12]
 80109a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80109a2:	68ba      	ldr	r2, [r7, #8]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d812      	bhi.n	80109d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109aa:	687a      	ldr	r2, [r7, #4]
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	1ad2      	subs	r2, r2, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	699b      	ldr	r3, [r3, #24]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d302      	bcc.n	80109be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80109b8:	2301      	movs	r3, #1
 80109ba:	617b      	str	r3, [r7, #20]
 80109bc:	e01b      	b.n	80109f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80109be:	4b10      	ldr	r3, [pc, #64]	; (8010a00 <prvInsertTimerInActiveList+0x7c>)
 80109c0:	681a      	ldr	r2, [r3, #0]
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	3304      	adds	r3, #4
 80109c6:	4619      	mov	r1, r3
 80109c8:	4610      	mov	r0, r2
 80109ca:	f7fd fdbe 	bl	800e54a <vListInsert>
 80109ce:	e012      	b.n	80109f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d206      	bcs.n	80109e6 <prvInsertTimerInActiveList+0x62>
 80109d8:	68ba      	ldr	r2, [r7, #8]
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d302      	bcc.n	80109e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80109e0:	2301      	movs	r3, #1
 80109e2:	617b      	str	r3, [r7, #20]
 80109e4:	e007      	b.n	80109f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80109e6:	4b07      	ldr	r3, [pc, #28]	; (8010a04 <prvInsertTimerInActiveList+0x80>)
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	3304      	adds	r3, #4
 80109ee:	4619      	mov	r1, r3
 80109f0:	4610      	mov	r0, r2
 80109f2:	f7fd fdaa 	bl	800e54a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80109f6:	697b      	ldr	r3, [r7, #20]
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3718      	adds	r7, #24
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}
 8010a00:	20001524 	.word	0x20001524
 8010a04:	20001520 	.word	0x20001520

08010a08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b08e      	sub	sp, #56	; 0x38
 8010a0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010a0e:	e0ca      	b.n	8010ba6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	da18      	bge.n	8010a48 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010a16:	1d3b      	adds	r3, r7, #4
 8010a18:	3304      	adds	r3, #4
 8010a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d10a      	bne.n	8010a38 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a26:	f383 8811 	msr	BASEPRI, r3
 8010a2a:	f3bf 8f6f 	isb	sy
 8010a2e:	f3bf 8f4f 	dsb	sy
 8010a32:	61fb      	str	r3, [r7, #28]
}
 8010a34:	bf00      	nop
 8010a36:	e7fe      	b.n	8010a36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a3e:	6850      	ldr	r0, [r2, #4]
 8010a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a42:	6892      	ldr	r2, [r2, #8]
 8010a44:	4611      	mov	r1, r2
 8010a46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f2c0 80aa 	blt.w	8010ba4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a56:	695b      	ldr	r3, [r3, #20]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d004      	beq.n	8010a66 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5e:	3304      	adds	r3, #4
 8010a60:	4618      	mov	r0, r3
 8010a62:	f7fd fdab 	bl	800e5bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a66:	463b      	mov	r3, r7
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7ff ff6b 	bl	8010944 <prvSampleTimeNow>
 8010a6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2b09      	cmp	r3, #9
 8010a74:	f200 8097 	bhi.w	8010ba6 <prvProcessReceivedCommands+0x19e>
 8010a78:	a201      	add	r2, pc, #4	; (adr r2, 8010a80 <prvProcessReceivedCommands+0x78>)
 8010a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a7e:	bf00      	nop
 8010a80:	08010aa9 	.word	0x08010aa9
 8010a84:	08010aa9 	.word	0x08010aa9
 8010a88:	08010aa9 	.word	0x08010aa9
 8010a8c:	08010b1d 	.word	0x08010b1d
 8010a90:	08010b31 	.word	0x08010b31
 8010a94:	08010b7b 	.word	0x08010b7b
 8010a98:	08010aa9 	.word	0x08010aa9
 8010a9c:	08010aa9 	.word	0x08010aa9
 8010aa0:	08010b1d 	.word	0x08010b1d
 8010aa4:	08010b31 	.word	0x08010b31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010aae:	f043 0301 	orr.w	r3, r3, #1
 8010ab2:	b2da      	uxtb	r2, r3
 8010ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010abe:	699b      	ldr	r3, [r3, #24]
 8010ac0:	18d1      	adds	r1, r2, r3
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ac8:	f7ff ff5c 	bl	8010984 <prvInsertTimerInActiveList>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d069      	beq.n	8010ba6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad4:	6a1b      	ldr	r3, [r3, #32]
 8010ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ad8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ae0:	f003 0304 	and.w	r3, r3, #4
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d05e      	beq.n	8010ba6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010ae8:	68ba      	ldr	r2, [r7, #8]
 8010aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aec:	699b      	ldr	r3, [r3, #24]
 8010aee:	441a      	add	r2, r3
 8010af0:	2300      	movs	r3, #0
 8010af2:	9300      	str	r3, [sp, #0]
 8010af4:	2300      	movs	r3, #0
 8010af6:	2100      	movs	r1, #0
 8010af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010afa:	f7ff fe05 	bl	8010708 <xTimerGenericCommand>
 8010afe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010b00:	6a3b      	ldr	r3, [r7, #32]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d14f      	bne.n	8010ba6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0a:	f383 8811 	msr	BASEPRI, r3
 8010b0e:	f3bf 8f6f 	isb	sy
 8010b12:	f3bf 8f4f 	dsb	sy
 8010b16:	61bb      	str	r3, [r7, #24]
}
 8010b18:	bf00      	nop
 8010b1a:	e7fe      	b.n	8010b1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b22:	f023 0301 	bic.w	r3, r3, #1
 8010b26:	b2da      	uxtb	r2, r3
 8010b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010b2e:	e03a      	b.n	8010ba6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b36:	f043 0301 	orr.w	r3, r3, #1
 8010b3a:	b2da      	uxtb	r2, r3
 8010b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010b42:	68ba      	ldr	r2, [r7, #8]
 8010b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4a:	699b      	ldr	r3, [r3, #24]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d10a      	bne.n	8010b66 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b54:	f383 8811 	msr	BASEPRI, r3
 8010b58:	f3bf 8f6f 	isb	sy
 8010b5c:	f3bf 8f4f 	dsb	sy
 8010b60:	617b      	str	r3, [r7, #20]
}
 8010b62:	bf00      	nop
 8010b64:	e7fe      	b.n	8010b64 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b68:	699a      	ldr	r2, [r3, #24]
 8010b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6c:	18d1      	adds	r1, r2, r3
 8010b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b74:	f7ff ff06 	bl	8010984 <prvInsertTimerInActiveList>
					break;
 8010b78:	e015      	b.n	8010ba6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b80:	f003 0302 	and.w	r3, r3, #2
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d103      	bne.n	8010b90 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b8a:	f000 fbe1 	bl	8011350 <vPortFree>
 8010b8e:	e00a      	b.n	8010ba6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b96:	f023 0301 	bic.w	r3, r3, #1
 8010b9a:	b2da      	uxtb	r2, r3
 8010b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010ba2:	e000      	b.n	8010ba6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010ba4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ba6:	4b08      	ldr	r3, [pc, #32]	; (8010bc8 <prvProcessReceivedCommands+0x1c0>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	1d39      	adds	r1, r7, #4
 8010bac:	2200      	movs	r2, #0
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7fe f8fc 	bl	800edac <xQueueReceive>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	f47f af2a 	bne.w	8010a10 <prvProcessReceivedCommands+0x8>
	}
}
 8010bbc:	bf00      	nop
 8010bbe:	bf00      	nop
 8010bc0:	3730      	adds	r7, #48	; 0x30
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}
 8010bc6:	bf00      	nop
 8010bc8:	20001528 	.word	0x20001528

08010bcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b088      	sub	sp, #32
 8010bd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010bd2:	e048      	b.n	8010c66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010bd4:	4b2d      	ldr	r3, [pc, #180]	; (8010c8c <prvSwitchTimerLists+0xc0>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	68db      	ldr	r3, [r3, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bde:	4b2b      	ldr	r3, [pc, #172]	; (8010c8c <prvSwitchTimerLists+0xc0>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	68db      	ldr	r3, [r3, #12]
 8010be4:	68db      	ldr	r3, [r3, #12]
 8010be6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	3304      	adds	r3, #4
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7fd fce5 	bl	800e5bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	6a1b      	ldr	r3, [r3, #32]
 8010bf6:	68f8      	ldr	r0, [r7, #12]
 8010bf8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c00:	f003 0304 	and.w	r3, r3, #4
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d02e      	beq.n	8010c66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	699b      	ldr	r3, [r3, #24]
 8010c0c:	693a      	ldr	r2, [r7, #16]
 8010c0e:	4413      	add	r3, r2
 8010c10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010c12:	68ba      	ldr	r2, [r7, #8]
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d90e      	bls.n	8010c38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	68ba      	ldr	r2, [r7, #8]
 8010c1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	68fa      	ldr	r2, [r7, #12]
 8010c24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c26:	4b19      	ldr	r3, [pc, #100]	; (8010c8c <prvSwitchTimerLists+0xc0>)
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	3304      	adds	r3, #4
 8010c2e:	4619      	mov	r1, r3
 8010c30:	4610      	mov	r0, r2
 8010c32:	f7fd fc8a 	bl	800e54a <vListInsert>
 8010c36:	e016      	b.n	8010c66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c38:	2300      	movs	r3, #0
 8010c3a:	9300      	str	r3, [sp, #0]
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	693a      	ldr	r2, [r7, #16]
 8010c40:	2100      	movs	r1, #0
 8010c42:	68f8      	ldr	r0, [r7, #12]
 8010c44:	f7ff fd60 	bl	8010708 <xTimerGenericCommand>
 8010c48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d10a      	bne.n	8010c66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	603b      	str	r3, [r7, #0]
}
 8010c62:	bf00      	nop
 8010c64:	e7fe      	b.n	8010c64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c66:	4b09      	ldr	r3, [pc, #36]	; (8010c8c <prvSwitchTimerLists+0xc0>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d1b1      	bne.n	8010bd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010c70:	4b06      	ldr	r3, [pc, #24]	; (8010c8c <prvSwitchTimerLists+0xc0>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010c76:	4b06      	ldr	r3, [pc, #24]	; (8010c90 <prvSwitchTimerLists+0xc4>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	4a04      	ldr	r2, [pc, #16]	; (8010c8c <prvSwitchTimerLists+0xc0>)
 8010c7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010c7e:	4a04      	ldr	r2, [pc, #16]	; (8010c90 <prvSwitchTimerLists+0xc4>)
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	6013      	str	r3, [r2, #0]
}
 8010c84:	bf00      	nop
 8010c86:	3718      	adds	r7, #24
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	20001520 	.word	0x20001520
 8010c90:	20001524 	.word	0x20001524

08010c94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010c9a:	f000 f96b 	bl	8010f74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010c9e:	4b15      	ldr	r3, [pc, #84]	; (8010cf4 <prvCheckForValidListAndQueue+0x60>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d120      	bne.n	8010ce8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010ca6:	4814      	ldr	r0, [pc, #80]	; (8010cf8 <prvCheckForValidListAndQueue+0x64>)
 8010ca8:	f7fd fbfe 	bl	800e4a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010cac:	4813      	ldr	r0, [pc, #76]	; (8010cfc <prvCheckForValidListAndQueue+0x68>)
 8010cae:	f7fd fbfb 	bl	800e4a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010cb2:	4b13      	ldr	r3, [pc, #76]	; (8010d00 <prvCheckForValidListAndQueue+0x6c>)
 8010cb4:	4a10      	ldr	r2, [pc, #64]	; (8010cf8 <prvCheckForValidListAndQueue+0x64>)
 8010cb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010cb8:	4b12      	ldr	r3, [pc, #72]	; (8010d04 <prvCheckForValidListAndQueue+0x70>)
 8010cba:	4a10      	ldr	r2, [pc, #64]	; (8010cfc <prvCheckForValidListAndQueue+0x68>)
 8010cbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	9300      	str	r3, [sp, #0]
 8010cc2:	4b11      	ldr	r3, [pc, #68]	; (8010d08 <prvCheckForValidListAndQueue+0x74>)
 8010cc4:	4a11      	ldr	r2, [pc, #68]	; (8010d0c <prvCheckForValidListAndQueue+0x78>)
 8010cc6:	2110      	movs	r1, #16
 8010cc8:	200a      	movs	r0, #10
 8010cca:	f7fd fd09 	bl	800e6e0 <xQueueGenericCreateStatic>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	4a08      	ldr	r2, [pc, #32]	; (8010cf4 <prvCheckForValidListAndQueue+0x60>)
 8010cd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010cd4:	4b07      	ldr	r3, [pc, #28]	; (8010cf4 <prvCheckForValidListAndQueue+0x60>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d005      	beq.n	8010ce8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010cdc:	4b05      	ldr	r3, [pc, #20]	; (8010cf4 <prvCheckForValidListAndQueue+0x60>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	490b      	ldr	r1, [pc, #44]	; (8010d10 <prvCheckForValidListAndQueue+0x7c>)
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7fe fc1a 	bl	800f51c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ce8:	f000 f974 	bl	8010fd4 <vPortExitCritical>
}
 8010cec:	bf00      	nop
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	20001528 	.word	0x20001528
 8010cf8:	200014f8 	.word	0x200014f8
 8010cfc:	2000150c 	.word	0x2000150c
 8010d00:	20001520 	.word	0x20001520
 8010d04:	20001524 	.word	0x20001524
 8010d08:	200015d4 	.word	0x200015d4
 8010d0c:	20001534 	.word	0x20001534
 8010d10:	08029918 	.word	0x08029918

08010d14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010d14:	b480      	push	{r7}
 8010d16:	b085      	sub	sp, #20
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	3b04      	subs	r3, #4
 8010d24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	3b04      	subs	r3, #4
 8010d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	f023 0201 	bic.w	r2, r3, #1
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	3b04      	subs	r3, #4
 8010d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010d44:	4a0c      	ldr	r2, [pc, #48]	; (8010d78 <pxPortInitialiseStack+0x64>)
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	3b14      	subs	r3, #20
 8010d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	3b04      	subs	r3, #4
 8010d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	f06f 0202 	mvn.w	r2, #2
 8010d62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	3b20      	subs	r3, #32
 8010d68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3714      	adds	r7, #20
 8010d70:	46bd      	mov	sp, r7
 8010d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d76:	4770      	bx	lr
 8010d78:	08010d7d 	.word	0x08010d7d

08010d7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b085      	sub	sp, #20
 8010d80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010d82:	2300      	movs	r3, #0
 8010d84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010d86:	4b12      	ldr	r3, [pc, #72]	; (8010dd0 <prvTaskExitError+0x54>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d8e:	d00a      	beq.n	8010da6 <prvTaskExitError+0x2a>
	__asm volatile
 8010d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d94:	f383 8811 	msr	BASEPRI, r3
 8010d98:	f3bf 8f6f 	isb	sy
 8010d9c:	f3bf 8f4f 	dsb	sy
 8010da0:	60fb      	str	r3, [r7, #12]
}
 8010da2:	bf00      	nop
 8010da4:	e7fe      	b.n	8010da4 <prvTaskExitError+0x28>
	__asm volatile
 8010da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010daa:	f383 8811 	msr	BASEPRI, r3
 8010dae:	f3bf 8f6f 	isb	sy
 8010db2:	f3bf 8f4f 	dsb	sy
 8010db6:	60bb      	str	r3, [r7, #8]
}
 8010db8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010dba:	bf00      	nop
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d0fc      	beq.n	8010dbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010dc2:	bf00      	nop
 8010dc4:	bf00      	nop
 8010dc6:	3714      	adds	r7, #20
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr
 8010dd0:	20000168 	.word	0x20000168
	...

08010de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010de0:	4b07      	ldr	r3, [pc, #28]	; (8010e00 <pxCurrentTCBConst2>)
 8010de2:	6819      	ldr	r1, [r3, #0]
 8010de4:	6808      	ldr	r0, [r1, #0]
 8010de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dea:	f380 8809 	msr	PSP, r0
 8010dee:	f3bf 8f6f 	isb	sy
 8010df2:	f04f 0000 	mov.w	r0, #0
 8010df6:	f380 8811 	msr	BASEPRI, r0
 8010dfa:	4770      	bx	lr
 8010dfc:	f3af 8000 	nop.w

08010e00 <pxCurrentTCBConst2>:
 8010e00:	20000ff8 	.word	0x20000ff8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010e04:	bf00      	nop
 8010e06:	bf00      	nop

08010e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010e08:	4808      	ldr	r0, [pc, #32]	; (8010e2c <prvPortStartFirstTask+0x24>)
 8010e0a:	6800      	ldr	r0, [r0, #0]
 8010e0c:	6800      	ldr	r0, [r0, #0]
 8010e0e:	f380 8808 	msr	MSP, r0
 8010e12:	f04f 0000 	mov.w	r0, #0
 8010e16:	f380 8814 	msr	CONTROL, r0
 8010e1a:	b662      	cpsie	i
 8010e1c:	b661      	cpsie	f
 8010e1e:	f3bf 8f4f 	dsb	sy
 8010e22:	f3bf 8f6f 	isb	sy
 8010e26:	df00      	svc	0
 8010e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010e2a:	bf00      	nop
 8010e2c:	e000ed08 	.word	0xe000ed08

08010e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b086      	sub	sp, #24
 8010e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010e36:	4b46      	ldr	r3, [pc, #280]	; (8010f50 <xPortStartScheduler+0x120>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	4a46      	ldr	r2, [pc, #280]	; (8010f54 <xPortStartScheduler+0x124>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d10a      	bne.n	8010e56 <xPortStartScheduler+0x26>
	__asm volatile
 8010e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e44:	f383 8811 	msr	BASEPRI, r3
 8010e48:	f3bf 8f6f 	isb	sy
 8010e4c:	f3bf 8f4f 	dsb	sy
 8010e50:	613b      	str	r3, [r7, #16]
}
 8010e52:	bf00      	nop
 8010e54:	e7fe      	b.n	8010e54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010e56:	4b3e      	ldr	r3, [pc, #248]	; (8010f50 <xPortStartScheduler+0x120>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4a3f      	ldr	r2, [pc, #252]	; (8010f58 <xPortStartScheduler+0x128>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d10a      	bne.n	8010e76 <xPortStartScheduler+0x46>
	__asm volatile
 8010e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e64:	f383 8811 	msr	BASEPRI, r3
 8010e68:	f3bf 8f6f 	isb	sy
 8010e6c:	f3bf 8f4f 	dsb	sy
 8010e70:	60fb      	str	r3, [r7, #12]
}
 8010e72:	bf00      	nop
 8010e74:	e7fe      	b.n	8010e74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010e76:	4b39      	ldr	r3, [pc, #228]	; (8010f5c <xPortStartScheduler+0x12c>)
 8010e78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	22ff      	movs	r2, #255	; 0xff
 8010e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010e90:	78fb      	ldrb	r3, [r7, #3]
 8010e92:	b2db      	uxtb	r3, r3
 8010e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	4b31      	ldr	r3, [pc, #196]	; (8010f60 <xPortStartScheduler+0x130>)
 8010e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010e9e:	4b31      	ldr	r3, [pc, #196]	; (8010f64 <xPortStartScheduler+0x134>)
 8010ea0:	2207      	movs	r2, #7
 8010ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ea4:	e009      	b.n	8010eba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010ea6:	4b2f      	ldr	r3, [pc, #188]	; (8010f64 <xPortStartScheduler+0x134>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	4a2d      	ldr	r2, [pc, #180]	; (8010f64 <xPortStartScheduler+0x134>)
 8010eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010eb0:	78fb      	ldrb	r3, [r7, #3]
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	005b      	lsls	r3, r3, #1
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010eba:	78fb      	ldrb	r3, [r7, #3]
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ec2:	2b80      	cmp	r3, #128	; 0x80
 8010ec4:	d0ef      	beq.n	8010ea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010ec6:	4b27      	ldr	r3, [pc, #156]	; (8010f64 <xPortStartScheduler+0x134>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f1c3 0307 	rsb	r3, r3, #7
 8010ece:	2b04      	cmp	r3, #4
 8010ed0:	d00a      	beq.n	8010ee8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed6:	f383 8811 	msr	BASEPRI, r3
 8010eda:	f3bf 8f6f 	isb	sy
 8010ede:	f3bf 8f4f 	dsb	sy
 8010ee2:	60bb      	str	r3, [r7, #8]
}
 8010ee4:	bf00      	nop
 8010ee6:	e7fe      	b.n	8010ee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010ee8:	4b1e      	ldr	r3, [pc, #120]	; (8010f64 <xPortStartScheduler+0x134>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	021b      	lsls	r3, r3, #8
 8010eee:	4a1d      	ldr	r2, [pc, #116]	; (8010f64 <xPortStartScheduler+0x134>)
 8010ef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ef2:	4b1c      	ldr	r3, [pc, #112]	; (8010f64 <xPortStartScheduler+0x134>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010efa:	4a1a      	ldr	r2, [pc, #104]	; (8010f64 <xPortStartScheduler+0x134>)
 8010efc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	b2da      	uxtb	r2, r3
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010f06:	4b18      	ldr	r3, [pc, #96]	; (8010f68 <xPortStartScheduler+0x138>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a17      	ldr	r2, [pc, #92]	; (8010f68 <xPortStartScheduler+0x138>)
 8010f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010f12:	4b15      	ldr	r3, [pc, #84]	; (8010f68 <xPortStartScheduler+0x138>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4a14      	ldr	r2, [pc, #80]	; (8010f68 <xPortStartScheduler+0x138>)
 8010f18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010f1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010f1e:	f000 f8dd 	bl	80110dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010f22:	4b12      	ldr	r3, [pc, #72]	; (8010f6c <xPortStartScheduler+0x13c>)
 8010f24:	2200      	movs	r2, #0
 8010f26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010f28:	f000 f8fc 	bl	8011124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010f2c:	4b10      	ldr	r3, [pc, #64]	; (8010f70 <xPortStartScheduler+0x140>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a0f      	ldr	r2, [pc, #60]	; (8010f70 <xPortStartScheduler+0x140>)
 8010f32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010f36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010f38:	f7ff ff66 	bl	8010e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010f3c:	f7fe ff48 	bl	800fdd0 <vTaskSwitchContext>
	prvTaskExitError();
 8010f40:	f7ff ff1c 	bl	8010d7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3718      	adds	r7, #24
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	e000ed00 	.word	0xe000ed00
 8010f54:	410fc271 	.word	0x410fc271
 8010f58:	410fc270 	.word	0x410fc270
 8010f5c:	e000e400 	.word	0xe000e400
 8010f60:	20001624 	.word	0x20001624
 8010f64:	20001628 	.word	0x20001628
 8010f68:	e000ed20 	.word	0xe000ed20
 8010f6c:	20000168 	.word	0x20000168
 8010f70:	e000ef34 	.word	0xe000ef34

08010f74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010f74:	b480      	push	{r7}
 8010f76:	b083      	sub	sp, #12
 8010f78:	af00      	add	r7, sp, #0
	__asm volatile
 8010f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7e:	f383 8811 	msr	BASEPRI, r3
 8010f82:	f3bf 8f6f 	isb	sy
 8010f86:	f3bf 8f4f 	dsb	sy
 8010f8a:	607b      	str	r3, [r7, #4]
}
 8010f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010f8e:	4b0f      	ldr	r3, [pc, #60]	; (8010fcc <vPortEnterCritical+0x58>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	3301      	adds	r3, #1
 8010f94:	4a0d      	ldr	r2, [pc, #52]	; (8010fcc <vPortEnterCritical+0x58>)
 8010f96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010f98:	4b0c      	ldr	r3, [pc, #48]	; (8010fcc <vPortEnterCritical+0x58>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d10f      	bne.n	8010fc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010fa0:	4b0b      	ldr	r3, [pc, #44]	; (8010fd0 <vPortEnterCritical+0x5c>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d00a      	beq.n	8010fc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fae:	f383 8811 	msr	BASEPRI, r3
 8010fb2:	f3bf 8f6f 	isb	sy
 8010fb6:	f3bf 8f4f 	dsb	sy
 8010fba:	603b      	str	r3, [r7, #0]
}
 8010fbc:	bf00      	nop
 8010fbe:	e7fe      	b.n	8010fbe <vPortEnterCritical+0x4a>
	}
}
 8010fc0:	bf00      	nop
 8010fc2:	370c      	adds	r7, #12
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fca:	4770      	bx	lr
 8010fcc:	20000168 	.word	0x20000168
 8010fd0:	e000ed04 	.word	0xe000ed04

08010fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010fda:	4b12      	ldr	r3, [pc, #72]	; (8011024 <vPortExitCritical+0x50>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d10a      	bne.n	8010ff8 <vPortExitCritical+0x24>
	__asm volatile
 8010fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe6:	f383 8811 	msr	BASEPRI, r3
 8010fea:	f3bf 8f6f 	isb	sy
 8010fee:	f3bf 8f4f 	dsb	sy
 8010ff2:	607b      	str	r3, [r7, #4]
}
 8010ff4:	bf00      	nop
 8010ff6:	e7fe      	b.n	8010ff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010ff8:	4b0a      	ldr	r3, [pc, #40]	; (8011024 <vPortExitCritical+0x50>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	4a09      	ldr	r2, [pc, #36]	; (8011024 <vPortExitCritical+0x50>)
 8011000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011002:	4b08      	ldr	r3, [pc, #32]	; (8011024 <vPortExitCritical+0x50>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d105      	bne.n	8011016 <vPortExitCritical+0x42>
 801100a:	2300      	movs	r3, #0
 801100c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	f383 8811 	msr	BASEPRI, r3
}
 8011014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011016:	bf00      	nop
 8011018:	370c      	adds	r7, #12
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr
 8011022:	bf00      	nop
 8011024:	20000168 	.word	0x20000168
	...

08011030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011030:	f3ef 8009 	mrs	r0, PSP
 8011034:	f3bf 8f6f 	isb	sy
 8011038:	4b15      	ldr	r3, [pc, #84]	; (8011090 <pxCurrentTCBConst>)
 801103a:	681a      	ldr	r2, [r3, #0]
 801103c:	f01e 0f10 	tst.w	lr, #16
 8011040:	bf08      	it	eq
 8011042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801104a:	6010      	str	r0, [r2, #0]
 801104c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011054:	f380 8811 	msr	BASEPRI, r0
 8011058:	f3bf 8f4f 	dsb	sy
 801105c:	f3bf 8f6f 	isb	sy
 8011060:	f7fe feb6 	bl	800fdd0 <vTaskSwitchContext>
 8011064:	f04f 0000 	mov.w	r0, #0
 8011068:	f380 8811 	msr	BASEPRI, r0
 801106c:	bc09      	pop	{r0, r3}
 801106e:	6819      	ldr	r1, [r3, #0]
 8011070:	6808      	ldr	r0, [r1, #0]
 8011072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011076:	f01e 0f10 	tst.w	lr, #16
 801107a:	bf08      	it	eq
 801107c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011080:	f380 8809 	msr	PSP, r0
 8011084:	f3bf 8f6f 	isb	sy
 8011088:	4770      	bx	lr
 801108a:	bf00      	nop
 801108c:	f3af 8000 	nop.w

08011090 <pxCurrentTCBConst>:
 8011090:	20000ff8 	.word	0x20000ff8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011094:	bf00      	nop
 8011096:	bf00      	nop

08011098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
	__asm volatile
 801109e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a2:	f383 8811 	msr	BASEPRI, r3
 80110a6:	f3bf 8f6f 	isb	sy
 80110aa:	f3bf 8f4f 	dsb	sy
 80110ae:	607b      	str	r3, [r7, #4]
}
 80110b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80110b2:	f7fe fdd3 	bl	800fc5c <xTaskIncrementTick>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d003      	beq.n	80110c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80110bc:	4b06      	ldr	r3, [pc, #24]	; (80110d8 <xPortSysTickHandler+0x40>)
 80110be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110c2:	601a      	str	r2, [r3, #0]
 80110c4:	2300      	movs	r3, #0
 80110c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	f383 8811 	msr	BASEPRI, r3
}
 80110ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80110d0:	bf00      	nop
 80110d2:	3708      	adds	r7, #8
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	e000ed04 	.word	0xe000ed04

080110dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80110dc:	b480      	push	{r7}
 80110de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80110e0:	4b0b      	ldr	r3, [pc, #44]	; (8011110 <vPortSetupTimerInterrupt+0x34>)
 80110e2:	2200      	movs	r2, #0
 80110e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80110e6:	4b0b      	ldr	r3, [pc, #44]	; (8011114 <vPortSetupTimerInterrupt+0x38>)
 80110e8:	2200      	movs	r2, #0
 80110ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80110ec:	4b0a      	ldr	r3, [pc, #40]	; (8011118 <vPortSetupTimerInterrupt+0x3c>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	4a0a      	ldr	r2, [pc, #40]	; (801111c <vPortSetupTimerInterrupt+0x40>)
 80110f2:	fba2 2303 	umull	r2, r3, r2, r3
 80110f6:	099b      	lsrs	r3, r3, #6
 80110f8:	4a09      	ldr	r2, [pc, #36]	; (8011120 <vPortSetupTimerInterrupt+0x44>)
 80110fa:	3b01      	subs	r3, #1
 80110fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80110fe:	4b04      	ldr	r3, [pc, #16]	; (8011110 <vPortSetupTimerInterrupt+0x34>)
 8011100:	2207      	movs	r2, #7
 8011102:	601a      	str	r2, [r3, #0]
}
 8011104:	bf00      	nop
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr
 801110e:	bf00      	nop
 8011110:	e000e010 	.word	0xe000e010
 8011114:	e000e018 	.word	0xe000e018
 8011118:	20000158 	.word	0x20000158
 801111c:	10624dd3 	.word	0x10624dd3
 8011120:	e000e014 	.word	0xe000e014

08011124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011134 <vPortEnableVFP+0x10>
 8011128:	6801      	ldr	r1, [r0, #0]
 801112a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801112e:	6001      	str	r1, [r0, #0]
 8011130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011132:	bf00      	nop
 8011134:	e000ed88 	.word	0xe000ed88

08011138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011138:	b480      	push	{r7}
 801113a:	b085      	sub	sp, #20
 801113c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801113e:	f3ef 8305 	mrs	r3, IPSR
 8011142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b0f      	cmp	r3, #15
 8011148:	d914      	bls.n	8011174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801114a:	4a17      	ldr	r2, [pc, #92]	; (80111a8 <vPortValidateInterruptPriority+0x70>)
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	4413      	add	r3, r2
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011154:	4b15      	ldr	r3, [pc, #84]	; (80111ac <vPortValidateInterruptPriority+0x74>)
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	7afa      	ldrb	r2, [r7, #11]
 801115a:	429a      	cmp	r2, r3
 801115c:	d20a      	bcs.n	8011174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011162:	f383 8811 	msr	BASEPRI, r3
 8011166:	f3bf 8f6f 	isb	sy
 801116a:	f3bf 8f4f 	dsb	sy
 801116e:	607b      	str	r3, [r7, #4]
}
 8011170:	bf00      	nop
 8011172:	e7fe      	b.n	8011172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011174:	4b0e      	ldr	r3, [pc, #56]	; (80111b0 <vPortValidateInterruptPriority+0x78>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801117c:	4b0d      	ldr	r3, [pc, #52]	; (80111b4 <vPortValidateInterruptPriority+0x7c>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	429a      	cmp	r2, r3
 8011182:	d90a      	bls.n	801119a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011188:	f383 8811 	msr	BASEPRI, r3
 801118c:	f3bf 8f6f 	isb	sy
 8011190:	f3bf 8f4f 	dsb	sy
 8011194:	603b      	str	r3, [r7, #0]
}
 8011196:	bf00      	nop
 8011198:	e7fe      	b.n	8011198 <vPortValidateInterruptPriority+0x60>
	}
 801119a:	bf00      	nop
 801119c:	3714      	adds	r7, #20
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr
 80111a6:	bf00      	nop
 80111a8:	e000e3f0 	.word	0xe000e3f0
 80111ac:	20001624 	.word	0x20001624
 80111b0:	e000ed0c 	.word	0xe000ed0c
 80111b4:	20001628 	.word	0x20001628

080111b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b08a      	sub	sp, #40	; 0x28
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80111c0:	2300      	movs	r3, #0
 80111c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80111c4:	f7fe fc8e 	bl	800fae4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80111c8:	4b5b      	ldr	r3, [pc, #364]	; (8011338 <pvPortMalloc+0x180>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d101      	bne.n	80111d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80111d0:	f000 f920 	bl	8011414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80111d4:	4b59      	ldr	r3, [pc, #356]	; (801133c <pvPortMalloc+0x184>)
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4013      	ands	r3, r2
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f040 8093 	bne.w	8011308 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d01d      	beq.n	8011224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80111e8:	2208      	movs	r2, #8
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4413      	add	r3, r2
 80111ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f003 0307 	and.w	r3, r3, #7
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d014      	beq.n	8011224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f023 0307 	bic.w	r3, r3, #7
 8011200:	3308      	adds	r3, #8
 8011202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f003 0307 	and.w	r3, r3, #7
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00a      	beq.n	8011224 <pvPortMalloc+0x6c>
	__asm volatile
 801120e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011212:	f383 8811 	msr	BASEPRI, r3
 8011216:	f3bf 8f6f 	isb	sy
 801121a:	f3bf 8f4f 	dsb	sy
 801121e:	617b      	str	r3, [r7, #20]
}
 8011220:	bf00      	nop
 8011222:	e7fe      	b.n	8011222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d06e      	beq.n	8011308 <pvPortMalloc+0x150>
 801122a:	4b45      	ldr	r3, [pc, #276]	; (8011340 <pvPortMalloc+0x188>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	429a      	cmp	r2, r3
 8011232:	d869      	bhi.n	8011308 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011234:	4b43      	ldr	r3, [pc, #268]	; (8011344 <pvPortMalloc+0x18c>)
 8011236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011238:	4b42      	ldr	r3, [pc, #264]	; (8011344 <pvPortMalloc+0x18c>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801123e:	e004      	b.n	801124a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	687a      	ldr	r2, [r7, #4]
 8011250:	429a      	cmp	r2, r3
 8011252:	d903      	bls.n	801125c <pvPortMalloc+0xa4>
 8011254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d1f1      	bne.n	8011240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801125c:	4b36      	ldr	r3, [pc, #216]	; (8011338 <pvPortMalloc+0x180>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011262:	429a      	cmp	r2, r3
 8011264:	d050      	beq.n	8011308 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011266:	6a3b      	ldr	r3, [r7, #32]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2208      	movs	r2, #8
 801126c:	4413      	add	r3, r2
 801126e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011272:	681a      	ldr	r2, [r3, #0]
 8011274:	6a3b      	ldr	r3, [r7, #32]
 8011276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127a:	685a      	ldr	r2, [r3, #4]
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	1ad2      	subs	r2, r2, r3
 8011280:	2308      	movs	r3, #8
 8011282:	005b      	lsls	r3, r3, #1
 8011284:	429a      	cmp	r2, r3
 8011286:	d91f      	bls.n	80112c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	4413      	add	r3, r2
 801128e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011290:	69bb      	ldr	r3, [r7, #24]
 8011292:	f003 0307 	and.w	r3, r3, #7
 8011296:	2b00      	cmp	r3, #0
 8011298:	d00a      	beq.n	80112b0 <pvPortMalloc+0xf8>
	__asm volatile
 801129a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129e:	f383 8811 	msr	BASEPRI, r3
 80112a2:	f3bf 8f6f 	isb	sy
 80112a6:	f3bf 8f4f 	dsb	sy
 80112aa:	613b      	str	r3, [r7, #16]
}
 80112ac:	bf00      	nop
 80112ae:	e7fe      	b.n	80112ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80112b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b2:	685a      	ldr	r2, [r3, #4]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	1ad2      	subs	r2, r2, r3
 80112b8:	69bb      	ldr	r3, [r7, #24]
 80112ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80112bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80112c2:	69b8      	ldr	r0, [r7, #24]
 80112c4:	f000 f908 	bl	80114d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80112c8:	4b1d      	ldr	r3, [pc, #116]	; (8011340 <pvPortMalloc+0x188>)
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	1ad3      	subs	r3, r2, r3
 80112d2:	4a1b      	ldr	r2, [pc, #108]	; (8011340 <pvPortMalloc+0x188>)
 80112d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80112d6:	4b1a      	ldr	r3, [pc, #104]	; (8011340 <pvPortMalloc+0x188>)
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	4b1b      	ldr	r3, [pc, #108]	; (8011348 <pvPortMalloc+0x190>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d203      	bcs.n	80112ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80112e2:	4b17      	ldr	r3, [pc, #92]	; (8011340 <pvPortMalloc+0x188>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	4a18      	ldr	r2, [pc, #96]	; (8011348 <pvPortMalloc+0x190>)
 80112e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80112ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ec:	685a      	ldr	r2, [r3, #4]
 80112ee:	4b13      	ldr	r3, [pc, #76]	; (801133c <pvPortMalloc+0x184>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	431a      	orrs	r2, r3
 80112f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80112f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fa:	2200      	movs	r2, #0
 80112fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80112fe:	4b13      	ldr	r3, [pc, #76]	; (801134c <pvPortMalloc+0x194>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	3301      	adds	r3, #1
 8011304:	4a11      	ldr	r2, [pc, #68]	; (801134c <pvPortMalloc+0x194>)
 8011306:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011308:	f7fe fbfa 	bl	800fb00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801130c:	69fb      	ldr	r3, [r7, #28]
 801130e:	f003 0307 	and.w	r3, r3, #7
 8011312:	2b00      	cmp	r3, #0
 8011314:	d00a      	beq.n	801132c <pvPortMalloc+0x174>
	__asm volatile
 8011316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801131a:	f383 8811 	msr	BASEPRI, r3
 801131e:	f3bf 8f6f 	isb	sy
 8011322:	f3bf 8f4f 	dsb	sy
 8011326:	60fb      	str	r3, [r7, #12]
}
 8011328:	bf00      	nop
 801132a:	e7fe      	b.n	801132a <pvPortMalloc+0x172>
	return pvReturn;
 801132c:	69fb      	ldr	r3, [r7, #28]
}
 801132e:	4618      	mov	r0, r3
 8011330:	3728      	adds	r7, #40	; 0x28
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	20005234 	.word	0x20005234
 801133c:	20005248 	.word	0x20005248
 8011340:	20005238 	.word	0x20005238
 8011344:	2000522c 	.word	0x2000522c
 8011348:	2000523c 	.word	0x2000523c
 801134c:	20005240 	.word	0x20005240

08011350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b086      	sub	sp, #24
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d04d      	beq.n	80113fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011362:	2308      	movs	r3, #8
 8011364:	425b      	negs	r3, r3
 8011366:	697a      	ldr	r2, [r7, #20]
 8011368:	4413      	add	r3, r2
 801136a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	685a      	ldr	r2, [r3, #4]
 8011374:	4b24      	ldr	r3, [pc, #144]	; (8011408 <vPortFree+0xb8>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	4013      	ands	r3, r2
 801137a:	2b00      	cmp	r3, #0
 801137c:	d10a      	bne.n	8011394 <vPortFree+0x44>
	__asm volatile
 801137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011382:	f383 8811 	msr	BASEPRI, r3
 8011386:	f3bf 8f6f 	isb	sy
 801138a:	f3bf 8f4f 	dsb	sy
 801138e:	60fb      	str	r3, [r7, #12]
}
 8011390:	bf00      	nop
 8011392:	e7fe      	b.n	8011392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00a      	beq.n	80113b2 <vPortFree+0x62>
	__asm volatile
 801139c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a0:	f383 8811 	msr	BASEPRI, r3
 80113a4:	f3bf 8f6f 	isb	sy
 80113a8:	f3bf 8f4f 	dsb	sy
 80113ac:	60bb      	str	r3, [r7, #8]
}
 80113ae:	bf00      	nop
 80113b0:	e7fe      	b.n	80113b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	685a      	ldr	r2, [r3, #4]
 80113b6:	4b14      	ldr	r3, [pc, #80]	; (8011408 <vPortFree+0xb8>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	4013      	ands	r3, r2
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d01e      	beq.n	80113fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d11a      	bne.n	80113fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	685a      	ldr	r2, [r3, #4]
 80113cc:	4b0e      	ldr	r3, [pc, #56]	; (8011408 <vPortFree+0xb8>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	43db      	mvns	r3, r3
 80113d2:	401a      	ands	r2, r3
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80113d8:	f7fe fb84 	bl	800fae4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	685a      	ldr	r2, [r3, #4]
 80113e0:	4b0a      	ldr	r3, [pc, #40]	; (801140c <vPortFree+0xbc>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4413      	add	r3, r2
 80113e6:	4a09      	ldr	r2, [pc, #36]	; (801140c <vPortFree+0xbc>)
 80113e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80113ea:	6938      	ldr	r0, [r7, #16]
 80113ec:	f000 f874 	bl	80114d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80113f0:	4b07      	ldr	r3, [pc, #28]	; (8011410 <vPortFree+0xc0>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	3301      	adds	r3, #1
 80113f6:	4a06      	ldr	r2, [pc, #24]	; (8011410 <vPortFree+0xc0>)
 80113f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80113fa:	f7fe fb81 	bl	800fb00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80113fe:	bf00      	nop
 8011400:	3718      	adds	r7, #24
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
 8011406:	bf00      	nop
 8011408:	20005248 	.word	0x20005248
 801140c:	20005238 	.word	0x20005238
 8011410:	20005244 	.word	0x20005244

08011414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011414:	b480      	push	{r7}
 8011416:	b085      	sub	sp, #20
 8011418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801141a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801141e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011420:	4b27      	ldr	r3, [pc, #156]	; (80114c0 <prvHeapInit+0xac>)
 8011422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f003 0307 	and.w	r3, r3, #7
 801142a:	2b00      	cmp	r3, #0
 801142c:	d00c      	beq.n	8011448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	3307      	adds	r3, #7
 8011432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f023 0307 	bic.w	r3, r3, #7
 801143a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801143c:	68ba      	ldr	r2, [r7, #8]
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	1ad3      	subs	r3, r2, r3
 8011442:	4a1f      	ldr	r2, [pc, #124]	; (80114c0 <prvHeapInit+0xac>)
 8011444:	4413      	add	r3, r2
 8011446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801144c:	4a1d      	ldr	r2, [pc, #116]	; (80114c4 <prvHeapInit+0xb0>)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011452:	4b1c      	ldr	r3, [pc, #112]	; (80114c4 <prvHeapInit+0xb0>)
 8011454:	2200      	movs	r2, #0
 8011456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	68ba      	ldr	r2, [r7, #8]
 801145c:	4413      	add	r3, r2
 801145e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011460:	2208      	movs	r2, #8
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	1a9b      	subs	r3, r3, r2
 8011466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f023 0307 	bic.w	r3, r3, #7
 801146e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	4a15      	ldr	r2, [pc, #84]	; (80114c8 <prvHeapInit+0xb4>)
 8011474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011476:	4b14      	ldr	r3, [pc, #80]	; (80114c8 <prvHeapInit+0xb4>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2200      	movs	r2, #0
 801147c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801147e:	4b12      	ldr	r3, [pc, #72]	; (80114c8 <prvHeapInit+0xb4>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2200      	movs	r2, #0
 8011484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	68fa      	ldr	r2, [r7, #12]
 801148e:	1ad2      	subs	r2, r2, r3
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011494:	4b0c      	ldr	r3, [pc, #48]	; (80114c8 <prvHeapInit+0xb4>)
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	4a0a      	ldr	r2, [pc, #40]	; (80114cc <prvHeapInit+0xb8>)
 80114a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	4a09      	ldr	r2, [pc, #36]	; (80114d0 <prvHeapInit+0xbc>)
 80114aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80114ac:	4b09      	ldr	r3, [pc, #36]	; (80114d4 <prvHeapInit+0xc0>)
 80114ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80114b2:	601a      	str	r2, [r3, #0]
}
 80114b4:	bf00      	nop
 80114b6:	3714      	adds	r7, #20
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr
 80114c0:	2000162c 	.word	0x2000162c
 80114c4:	2000522c 	.word	0x2000522c
 80114c8:	20005234 	.word	0x20005234
 80114cc:	2000523c 	.word	0x2000523c
 80114d0:	20005238 	.word	0x20005238
 80114d4:	20005248 	.word	0x20005248

080114d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80114d8:	b480      	push	{r7}
 80114da:	b085      	sub	sp, #20
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80114e0:	4b28      	ldr	r3, [pc, #160]	; (8011584 <prvInsertBlockIntoFreeList+0xac>)
 80114e2:	60fb      	str	r3, [r7, #12]
 80114e4:	e002      	b.n	80114ec <prvInsertBlockIntoFreeList+0x14>
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	60fb      	str	r3, [r7, #12]
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d8f7      	bhi.n	80114e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	68ba      	ldr	r2, [r7, #8]
 8011500:	4413      	add	r3, r2
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	429a      	cmp	r2, r3
 8011506:	d108      	bne.n	801151a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	685a      	ldr	r2, [r3, #4]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	441a      	add	r2, r3
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	68ba      	ldr	r2, [r7, #8]
 8011524:	441a      	add	r2, r3
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	429a      	cmp	r2, r3
 801152c:	d118      	bne.n	8011560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	681a      	ldr	r2, [r3, #0]
 8011532:	4b15      	ldr	r3, [pc, #84]	; (8011588 <prvInsertBlockIntoFreeList+0xb0>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	429a      	cmp	r2, r3
 8011538:	d00d      	beq.n	8011556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	685a      	ldr	r2, [r3, #4]
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	685b      	ldr	r3, [r3, #4]
 8011544:	441a      	add	r2, r3
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	681a      	ldr	r2, [r3, #0]
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	601a      	str	r2, [r3, #0]
 8011554:	e008      	b.n	8011568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011556:	4b0c      	ldr	r3, [pc, #48]	; (8011588 <prvInsertBlockIntoFreeList+0xb0>)
 8011558:	681a      	ldr	r2, [r3, #0]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	601a      	str	r2, [r3, #0]
 801155e:	e003      	b.n	8011568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681a      	ldr	r2, [r3, #0]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011568:	68fa      	ldr	r2, [r7, #12]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	429a      	cmp	r2, r3
 801156e:	d002      	beq.n	8011576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	687a      	ldr	r2, [r7, #4]
 8011574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011576:	bf00      	nop
 8011578:	3714      	adds	r7, #20
 801157a:	46bd      	mov	sp, r7
 801157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011580:	4770      	bx	lr
 8011582:	bf00      	nop
 8011584:	2000522c 	.word	0x2000522c
 8011588:	20005234 	.word	0x20005234

0801158c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8011590:	f003 fffc 	bl	801558c <touchgfx_init>
}
 8011594:	bf00      	nop
 8011596:	bd80      	pop	{r7, pc}

08011598 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
    {
 80115a0:	4a04      	ldr	r2, [pc, #16]	; (80115b4 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	601a      	str	r2, [r3, #0]
    }
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	4618      	mov	r0, r3
 80115aa:	370c      	adds	r7, #12
 80115ac:	46bd      	mov	sp, r7
 80115ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b2:	4770      	bx	lr
 80115b4:	0802a4ec 	.word	0x0802a4ec

080115b8 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
    }
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f7ff ffe9 	bl	8011598 <_ZN8touchgfx12FontProviderD1Ev>
 80115c6:	2104      	movs	r1, #4
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f017 f82e 	bl	802862a <_ZdlPvj>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	4618      	mov	r0, r3
 80115d2:	3708      	adds	r7, #8
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	460b      	mov	r3, r1
 80115e2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80115e4:	887b      	ldrh	r3, [r7, #2]
 80115e6:	2b02      	cmp	r3, #2
 80115e8:	d010      	beq.n	801160c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 80115ea:	2b02      	cmp	r3, #2
 80115ec:	dc13      	bgt.n	8011616 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d002      	beq.n	80115f8 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d005      	beq.n	8011602 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 80115f6:	e00e      	b.n	8011616 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80115f8:	f002 fe22 	bl	8014240 <_ZN17TypedTextDatabase8getFontsEv>
 80115fc:	4603      	mov	r3, r0
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	e00a      	b.n	8011618 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8011602:	f002 fe1d 	bl	8014240 <_ZN17TypedTextDatabase8getFontsEv>
 8011606:	4603      	mov	r3, r0
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	e005      	b.n	8011618 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 801160c:	f002 fe18 	bl	8014240 <_ZN17TypedTextDatabase8getFontsEv>
 8011610:	4603      	mov	r3, r0
 8011612:	689b      	ldr	r3, [r3, #8]
 8011614:	e000      	b.n	8011618 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8011616:	2300      	movs	r3, #0
    }
}
 8011618:	4618      	mov	r0, r3
 801161a:	3708      	adds	r7, #8
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	4a05      	ldr	r2, [pc, #20]	; (8011640 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	4618      	mov	r0, r3
 8011632:	f7ff ffb1 	bl	8011598 <_ZN8touchgfx12FontProviderD1Ev>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4618      	mov	r0, r3
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}
 8011640:	0802a4d8 	.word	0x0802a4d8

08011644 <_ZN23ApplicationFontProviderD0Ev>:
 8011644:	b580      	push	{r7, lr}
 8011646:	b082      	sub	sp, #8
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f7ff ffe7 	bl	8011620 <_ZN23ApplicationFontProviderD1Ev>
 8011652:	2104      	movs	r1, #4
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f016 ffe8 	bl	802862a <_ZdlPvj>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	4618      	mov	r0, r3
 801165e:	3708      	adds	r7, #8
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
    {
 801166c:	4a04      	ldr	r2, [pc, #16]	; (8011680 <_ZN8touchgfx4FontD1Ev+0x1c>)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	601a      	str	r2, [r3, #0]
    }
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	4618      	mov	r0, r3
 8011676:	370c      	adds	r7, #12
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr
 8011680:	0802a8ac 	.word	0x0802a8ac

08011684 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
    }
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7ff ffe9 	bl	8011664 <_ZN8touchgfx4FontD1Ev>
 8011692:	2110      	movs	r1, #16
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f016 ffc8 	bl	802862a <_ZdlPvj>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4618      	mov	r0, r3
 801169e:	3708      	adds	r7, #8
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}

080116a4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80116a4:	b590      	push	{r4, r7, lr}
 80116a6:	b087      	sub	sp, #28
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
 80116ac:	460b      	mov	r3, r1
 80116ae:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80116b0:	887b      	ldrh	r3, [r7, #2]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d101      	bne.n	80116ba <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80116b6:	2300      	movs	r3, #0
 80116b8:	e010      	b.n	80116dc <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80116ba:	2300      	movs	r3, #0
 80116bc:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80116be:	2300      	movs	r3, #0
 80116c0:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	3308      	adds	r3, #8
 80116c8:	681c      	ldr	r4, [r3, #0]
 80116ca:	f107 030f 	add.w	r3, r7, #15
 80116ce:	f107 0210 	add.w	r2, r7, #16
 80116d2:	8879      	ldrh	r1, [r7, #2]
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	47a0      	blx	r4
 80116d8:	6178      	str	r0, [r7, #20]
        return glyph;
 80116da:	697b      	ldr	r3, [r7, #20]
    }
 80116dc:	4618      	mov	r0, r3
 80116de:	371c      	adds	r7, #28
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd90      	pop	{r4, r7, pc}

080116e4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80116e4:	b480      	push	{r7}
 80116e6:	b083      	sub	sp, #12
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	895b      	ldrh	r3, [r3, #10]
    }
 80116f0:	4618      	mov	r0, r3
 80116f2:	370c      	adds	r7, #12
 80116f4:	46bd      	mov	sp, r7
 80116f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fa:	4770      	bx	lr

080116fc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80116fc:	b480      	push	{r7}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	899b      	ldrh	r3, [r3, #12]
    }
 8011708:	4618      	mov	r0, r3
 801170a:	370c      	adds	r7, #12
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr

08011714 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8011714:	b480      	push	{r7}
 8011716:	b083      	sub	sp, #12
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	889b      	ldrh	r3, [r3, #4]
    }
 8011720:	4618      	mov	r0, r3
 8011722:	370c      	adds	r7, #12
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr

0801172c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 801172c:	b480      	push	{r7}
 801172e:	b083      	sub	sp, #12
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	889a      	ldrh	r2, [r3, #4]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	799b      	ldrb	r3, [r3, #6]
 801173c:	b29b      	uxth	r3, r3
 801173e:	4413      	add	r3, r2
 8011740:	b29b      	uxth	r3, r3
    }
 8011742:	4618      	mov	r0, r3
 8011744:	370c      	adds	r7, #12
 8011746:	46bd      	mov	sp, r7
 8011748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174c:	4770      	bx	lr

0801174e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 801174e:	b480      	push	{r7}
 8011750:	b083      	sub	sp, #12
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	79db      	ldrb	r3, [r3, #7]
 801175a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 801175e:	b2db      	uxtb	r3, r3
    }
 8011760:	4618      	mov	r0, r3
 8011762:	370c      	adds	r7, #12
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr

0801176c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 801176c:	b480      	push	{r7}
 801176e:	b083      	sub	sp, #12
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	79db      	ldrb	r3, [r3, #7]
 8011778:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801177c:	b2db      	uxtb	r3, r3
    }
 801177e:	4618      	mov	r0, r3
 8011780:	370c      	adds	r7, #12
 8011782:	46bd      	mov	sp, r7
 8011784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011788:	4770      	bx	lr
	...

0801178c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 801178c:	b580      	push	{r7, lr}
 801178e:	b082      	sub	sp, #8
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	4a05      	ldr	r2, [pc, #20]	; (80117ac <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	601a      	str	r2, [r3, #0]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	4618      	mov	r0, r3
 801179e:	f7ff ff61 	bl	8011664 <_ZN8touchgfx4FontD1Ev>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4618      	mov	r0, r3
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	0802c2b8 	.word	0x0802c2b8

080117b0 <_ZN8touchgfx9ConstFontD0Ev>:
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f7ff ffe7 	bl	801178c <_ZN8touchgfx9ConstFontD1Ev>
 80117be:	2118      	movs	r1, #24
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f016 ff32 	bl	802862a <_ZdlPvj>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	4618      	mov	r0, r3
 80117ca:	3708      	adds	r7, #8
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}

080117d0 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	4a05      	ldr	r2, [pc, #20]	; (80117f0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7ff ffd3 	bl	801178c <_ZN8touchgfx9ConstFontD1Ev>
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	4618      	mov	r0, r3
 80117ea:	3708      	adds	r7, #8
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}
 80117f0:	0802a510 	.word	0x0802a510

080117f4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f7ff ffe7 	bl	80117d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011802:	2124      	movs	r1, #36	; 0x24
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f016 ff10 	bl	802862a <_ZdlPvj>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	4618      	mov	r0, r3
 801180e:	3708      	adds	r7, #8
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
    {
 801181c:	4a04      	ldr	r2, [pc, #16]	; (8011830 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	601a      	str	r2, [r3, #0]
    }
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4618      	mov	r0, r3
 8011826:	370c      	adds	r7, #12
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr
 8011830:	0802a500 	.word	0x0802a500

08011834 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8011834:	b580      	push	{r7, lr}
 8011836:	b082      	sub	sp, #8
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
    }
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f7ff ffe9 	bl	8011814 <_ZN8touchgfx9TypedTextD1Ev>
 8011842:	2108      	movs	r1, #8
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f016 fef0 	bl	802862a <_ZdlPvj>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	4618      	mov	r0, r3
 801184e:	3708      	adds	r7, #8
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8011854:	b480      	push	{r7}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6a1b      	ldr	r3, [r3, #32]
    }
 8011860:	4618      	mov	r0, r3
 8011862:	370c      	adds	r7, #12
 8011864:	46bd      	mov	sp, r7
 8011866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186a:	4770      	bx	lr

0801186c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 801186c:	b580      	push	{r7, lr}
 801186e:	b08c      	sub	sp, #48	; 0x30
 8011870:	af08      	add	r7, sp, #32
 8011872:	60f8      	str	r0, [r7, #12]
 8011874:	60b9      	str	r1, [r7, #8]
 8011876:	4611      	mov	r1, r2
 8011878:	461a      	mov	r2, r3
 801187a:	460b      	mov	r3, r1
 801187c:	80fb      	strh	r3, [r7, #6]
 801187e:	4613      	mov	r3, r2
 8011880:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 8011882:	68f8      	ldr	r0, [r7, #12]
 8011884:	88b9      	ldrh	r1, [r7, #4]
 8011886:	88fa      	ldrh	r2, [r7, #6]
 8011888:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801188a:	9306      	str	r3, [sp, #24]
 801188c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801188e:	9305      	str	r3, [sp, #20]
 8011890:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011894:	9304      	str	r3, [sp, #16]
 8011896:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801189a:	9303      	str	r3, [sp, #12]
 801189c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118a0:	9302      	str	r3, [sp, #8]
 80118a2:	7f3b      	ldrb	r3, [r7, #28]
 80118a4:	9301      	str	r3, [sp, #4]
 80118a6:	7e3b      	ldrb	r3, [r7, #24]
 80118a8:	9300      	str	r3, [sp, #0]
 80118aa:	460b      	mov	r3, r1
 80118ac:	68b9      	ldr	r1, [r7, #8]
 80118ae:	f009 fb6f 	bl	801af90 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80118b2:	4a08      	ldr	r2, [pc, #32]	; (80118d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	601a      	str	r2, [r3, #0]
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118bc:	619a      	str	r2, [r3, #24]
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118c2:	61da      	str	r2, [r3, #28]
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118c8:	621a      	str	r2, [r3, #32]
{
}
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	4618      	mov	r0, r3
 80118ce:	3710      	adds	r7, #16
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}
 80118d4:	0802a510 	.word	0x0802a510

080118d8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80118d8:	b480      	push	{r7}
 80118da:	b085      	sub	sp, #20
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	699b      	ldr	r3, [r3, #24]
 80118e6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	889b      	ldrh	r3, [r3, #4]
 80118ec:	0adb      	lsrs	r3, r3, #11
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	68fa      	ldr	r2, [r7, #12]
 80118f4:	4413      	add	r3, r2
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4413      	add	r3, r2
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3714      	adds	r7, #20
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr

0801190a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 801190a:	b480      	push	{r7}
 801190c:	b089      	sub	sp, #36	; 0x24
 801190e:	af00      	add	r7, sp, #0
 8011910:	60f8      	str	r0, [r7, #12]
 8011912:	460b      	mov	r3, r1
 8011914:	607a      	str	r2, [r7, #4]
 8011916:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d003      	beq.n	8011926 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	7b1b      	ldrb	r3, [r3, #12]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d101      	bne.n	801192a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8011926:	2300      	movs	r3, #0
 8011928:	e030      	b.n	801198c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	69da      	ldr	r2, [r3, #28]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	7b5b      	ldrb	r3, [r3, #13]
 8011936:	021b      	lsls	r3, r3, #8
 8011938:	b21b      	sxth	r3, r3
 801193a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801193e:	b219      	sxth	r1, r3
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	7adb      	ldrb	r3, [r3, #11]
 8011944:	b21b      	sxth	r3, r3
 8011946:	430b      	orrs	r3, r1
 8011948:	b21b      	sxth	r3, r3
 801194a:	b29b      	uxth	r3, r3
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	4413      	add	r3, r2
 8011950:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	7b1b      	ldrb	r3, [r3, #12]
 8011956:	837b      	strh	r3, [r7, #26]
 8011958:	8b7b      	ldrh	r3, [r7, #26]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d015      	beq.n	801198a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 801195e:	69fb      	ldr	r3, [r7, #28]
 8011960:	881b      	ldrh	r3, [r3, #0]
 8011962:	897a      	ldrh	r2, [r7, #10]
 8011964:	429a      	cmp	r2, r3
 8011966:	d103      	bne.n	8011970 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8011968:	69fb      	ldr	r3, [r7, #28]
 801196a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801196e:	e00d      	b.n	801198c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	881b      	ldrh	r3, [r3, #0]
 8011974:	897a      	ldrh	r2, [r7, #10]
 8011976:	429a      	cmp	r2, r3
 8011978:	d306      	bcc.n	8011988 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 801197a:	8b7b      	ldrh	r3, [r7, #26]
 801197c:	3b01      	subs	r3, #1
 801197e:	837b      	strh	r3, [r7, #26]
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	3304      	adds	r3, #4
 8011984:	61fb      	str	r3, [r7, #28]
 8011986:	e7e7      	b.n	8011958 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8011988:	bf00      	nop
        }
    }
    return 0;
 801198a:	2300      	movs	r3, #0
}
 801198c:	4618      	mov	r0, r3
 801198e:	3724      	adds	r7, #36	; 0x24
 8011990:	46bd      	mov	sp, r7
 8011992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011996:	4770      	bx	lr

08011998 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8011998:	b580      	push	{r7, lr}
 801199a:	af00      	add	r7, sp, #0
 801199c:	4801      	ldr	r0, [pc, #4]	; (80119a4 <__tcf_0+0xc>)
 801199e:	f7ff ff17 	bl	80117d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80119a2:	bd80      	pop	{r7, pc}
 80119a4:	2000524c 	.word	0x2000524c

080119a8 <_Z23getFont_verdana_10_4bppv>:
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b08a      	sub	sp, #40	; 0x28
 80119ac:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80119ae:	4b1e      	ldr	r3, [pc, #120]	; (8011a28 <_Z23getFont_verdana_10_4bppv+0x80>)
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	f3bf 8f5b 	dmb	ish
 80119b6:	b2db      	uxtb	r3, r3
 80119b8:	f003 0301 	and.w	r3, r3, #1
 80119bc:	2b00      	cmp	r3, #0
 80119be:	bf0c      	ite	eq
 80119c0:	2301      	moveq	r3, #1
 80119c2:	2300      	movne	r3, #0
 80119c4:	b2db      	uxtb	r3, r3
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d02a      	beq.n	8011a20 <_Z23getFont_verdana_10_4bppv+0x78>
 80119ca:	4817      	ldr	r0, [pc, #92]	; (8011a28 <_Z23getFont_verdana_10_4bppv+0x80>)
 80119cc:	f016 fe2f 	bl	802862e <__cxa_guard_acquire>
 80119d0:	4603      	mov	r3, r0
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	bf14      	ite	ne
 80119d6:	2301      	movne	r3, #1
 80119d8:	2300      	moveq	r3, #0
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d01f      	beq.n	8011a20 <_Z23getFont_verdana_10_4bppv+0x78>
 80119e0:	2300      	movs	r3, #0
 80119e2:	9309      	str	r3, [sp, #36]	; 0x24
 80119e4:	2300      	movs	r3, #0
 80119e6:	9308      	str	r3, [sp, #32]
 80119e8:	233f      	movs	r3, #63	; 0x3f
 80119ea:	9307      	str	r3, [sp, #28]
 80119ec:	4b0f      	ldr	r3, [pc, #60]	; (8011a2c <_Z23getFont_verdana_10_4bppv+0x84>)
 80119ee:	9306      	str	r3, [sp, #24]
 80119f0:	4b0f      	ldr	r3, [pc, #60]	; (8011a30 <_Z23getFont_verdana_10_4bppv+0x88>)
 80119f2:	9305      	str	r3, [sp, #20]
 80119f4:	2300      	movs	r3, #0
 80119f6:	9304      	str	r3, [sp, #16]
 80119f8:	2300      	movs	r3, #0
 80119fa:	9303      	str	r3, [sp, #12]
 80119fc:	2301      	movs	r3, #1
 80119fe:	9302      	str	r3, [sp, #8]
 8011a00:	2304      	movs	r3, #4
 8011a02:	9301      	str	r3, [sp, #4]
 8011a04:	2300      	movs	r3, #0
 8011a06:	9300      	str	r3, [sp, #0]
 8011a08:	230a      	movs	r3, #10
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	4909      	ldr	r1, [pc, #36]	; (8011a34 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8011a0e:	480a      	ldr	r0, [pc, #40]	; (8011a38 <_Z23getFont_verdana_10_4bppv+0x90>)
 8011a10:	f7ff ff2c 	bl	801186c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8011a14:	4809      	ldr	r0, [pc, #36]	; (8011a3c <_Z23getFont_verdana_10_4bppv+0x94>)
 8011a16:	f016 fe55 	bl	80286c4 <atexit>
 8011a1a:	4803      	ldr	r0, [pc, #12]	; (8011a28 <_Z23getFont_verdana_10_4bppv+0x80>)
 8011a1c:	f016 fe13 	bl	8028646 <__cxa_guard_release>
    return verdana_10_4bpp;
 8011a20:	4b05      	ldr	r3, [pc, #20]	; (8011a38 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 8011a22:	4618      	mov	r0, r3
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	20005270 	.word	0x20005270
 8011a2c:	0802da44 	.word	0x0802da44
 8011a30:	0802a55c 	.word	0x0802a55c
 8011a34:	0802d9f8 	.word	0x0802d9f8
 8011a38:	2000524c 	.word	0x2000524c
 8011a3c:	08011999 	.word	0x08011999

08011a40 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 3, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8011a40:	b580      	push	{r7, lr}
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	4801      	ldr	r0, [pc, #4]	; (8011a4c <__tcf_0+0xc>)
 8011a46:	f7ff fec3 	bl	80117d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011a4a:	bd80      	pop	{r7, pc}
 8011a4c:	20005274 	.word	0x20005274

08011a50 <_Z23getFont_verdana_20_4bppv>:
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b08a      	sub	sp, #40	; 0x28
 8011a54:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 3, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8011a56:	4b1e      	ldr	r3, [pc, #120]	; (8011ad0 <_Z23getFont_verdana_20_4bppv+0x80>)
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	f3bf 8f5b 	dmb	ish
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	f003 0301 	and.w	r3, r3, #1
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	bf0c      	ite	eq
 8011a68:	2301      	moveq	r3, #1
 8011a6a:	2300      	movne	r3, #0
 8011a6c:	b2db      	uxtb	r3, r3
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d02a      	beq.n	8011ac8 <_Z23getFont_verdana_20_4bppv+0x78>
 8011a72:	4817      	ldr	r0, [pc, #92]	; (8011ad0 <_Z23getFont_verdana_20_4bppv+0x80>)
 8011a74:	f016 fddb 	bl	802862e <__cxa_guard_acquire>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	bf14      	ite	ne
 8011a7e:	2301      	movne	r3, #1
 8011a80:	2300      	moveq	r3, #0
 8011a82:	b2db      	uxtb	r3, r3
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d01f      	beq.n	8011ac8 <_Z23getFont_verdana_20_4bppv+0x78>
 8011a88:	2300      	movs	r3, #0
 8011a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	9308      	str	r3, [sp, #32]
 8011a90:	233f      	movs	r3, #63	; 0x3f
 8011a92:	9307      	str	r3, [sp, #28]
 8011a94:	4b0f      	ldr	r3, [pc, #60]	; (8011ad4 <_Z23getFont_verdana_20_4bppv+0x84>)
 8011a96:	9306      	str	r3, [sp, #24]
 8011a98:	4b0f      	ldr	r3, [pc, #60]	; (8011ad8 <_Z23getFont_verdana_20_4bppv+0x88>)
 8011a9a:	9305      	str	r3, [sp, #20]
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	9304      	str	r3, [sp, #16]
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	9303      	str	r3, [sp, #12]
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	9302      	str	r3, [sp, #8]
 8011aa8:	2304      	movs	r3, #4
 8011aaa:	9301      	str	r3, [sp, #4]
 8011aac:	2300      	movs	r3, #0
 8011aae:	9300      	str	r3, [sp, #0]
 8011ab0:	2314      	movs	r3, #20
 8011ab2:	2203      	movs	r2, #3
 8011ab4:	4909      	ldr	r1, [pc, #36]	; (8011adc <_Z23getFont_verdana_20_4bppv+0x8c>)
 8011ab6:	480a      	ldr	r0, [pc, #40]	; (8011ae0 <_Z23getFont_verdana_20_4bppv+0x90>)
 8011ab8:	f7ff fed8 	bl	801186c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8011abc:	4809      	ldr	r0, [pc, #36]	; (8011ae4 <_Z23getFont_verdana_20_4bppv+0x94>)
 8011abe:	f016 fe01 	bl	80286c4 <atexit>
 8011ac2:	4803      	ldr	r0, [pc, #12]	; (8011ad0 <_Z23getFont_verdana_20_4bppv+0x80>)
 8011ac4:	f016 fdbf 	bl	8028646 <__cxa_guard_release>
    return verdana_20_4bpp;
 8011ac8:	4b05      	ldr	r3, [pc, #20]	; (8011ae0 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}
 8011ad0:	20005298 	.word	0x20005298
 8011ad4:	0802da48 	.word	0x0802da48
 8011ad8:	0802a560 	.word	0x0802a560
 8011adc:	0802da08 	.word	0x0802da08
 8011ae0:	20005274 	.word	0x20005274
 8011ae4:	08011a41 	.word	0x08011a41

08011ae8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	4801      	ldr	r0, [pc, #4]	; (8011af4 <__tcf_0+0xc>)
 8011aee:	f7ff fe6f 	bl	80117d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	2000529c 	.word	0x2000529c

08011af8 <_Z23getFont_verdana_40_4bppv>:
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b08a      	sub	sp, #40	; 0x28
 8011afc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8011afe:	4b1e      	ldr	r3, [pc, #120]	; (8011b78 <_Z23getFont_verdana_40_4bppv+0x80>)
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	f3bf 8f5b 	dmb	ish
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	f003 0301 	and.w	r3, r3, #1
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	bf0c      	ite	eq
 8011b10:	2301      	moveq	r3, #1
 8011b12:	2300      	movne	r3, #0
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d02a      	beq.n	8011b70 <_Z23getFont_verdana_40_4bppv+0x78>
 8011b1a:	4817      	ldr	r0, [pc, #92]	; (8011b78 <_Z23getFont_verdana_40_4bppv+0x80>)
 8011b1c:	f016 fd87 	bl	802862e <__cxa_guard_acquire>
 8011b20:	4603      	mov	r3, r0
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	bf14      	ite	ne
 8011b26:	2301      	movne	r3, #1
 8011b28:	2300      	moveq	r3, #0
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d01f      	beq.n	8011b70 <_Z23getFont_verdana_40_4bppv+0x78>
 8011b30:	2300      	movs	r3, #0
 8011b32:	9309      	str	r3, [sp, #36]	; 0x24
 8011b34:	2300      	movs	r3, #0
 8011b36:	9308      	str	r3, [sp, #32]
 8011b38:	233f      	movs	r3, #63	; 0x3f
 8011b3a:	9307      	str	r3, [sp, #28]
 8011b3c:	4b0f      	ldr	r3, [pc, #60]	; (8011b7c <_Z23getFont_verdana_40_4bppv+0x84>)
 8011b3e:	9306      	str	r3, [sp, #24]
 8011b40:	4b0f      	ldr	r3, [pc, #60]	; (8011b80 <_Z23getFont_verdana_40_4bppv+0x88>)
 8011b42:	9305      	str	r3, [sp, #20]
 8011b44:	2300      	movs	r3, #0
 8011b46:	9304      	str	r3, [sp, #16]
 8011b48:	2300      	movs	r3, #0
 8011b4a:	9303      	str	r3, [sp, #12]
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	9302      	str	r3, [sp, #8]
 8011b50:	2304      	movs	r3, #4
 8011b52:	9301      	str	r3, [sp, #4]
 8011b54:	2300      	movs	r3, #0
 8011b56:	9300      	str	r3, [sp, #0]
 8011b58:	2328      	movs	r3, #40	; 0x28
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	4909      	ldr	r1, [pc, #36]	; (8011b84 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8011b5e:	480a      	ldr	r0, [pc, #40]	; (8011b88 <_Z23getFont_verdana_40_4bppv+0x90>)
 8011b60:	f7ff fe84 	bl	801186c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8011b64:	4809      	ldr	r0, [pc, #36]	; (8011b8c <_Z23getFont_verdana_40_4bppv+0x94>)
 8011b66:	f016 fdad 	bl	80286c4 <atexit>
 8011b6a:	4803      	ldr	r0, [pc, #12]	; (8011b78 <_Z23getFont_verdana_40_4bppv+0x80>)
 8011b6c:	f016 fd6b 	bl	8028646 <__cxa_guard_release>
    return verdana_40_4bpp;
 8011b70:	4b05      	ldr	r3, [pc, #20]	; (8011b88 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}
 8011b78:	200052c0 	.word	0x200052c0
 8011b7c:	0802da4c 	.word	0x0802da4c
 8011b80:	0802a564 	.word	0x0802a564
 8011b84:	0802da34 	.word	0x0802da34
 8011b88:	2000529c 	.word	0x2000529c
 8011b8c:	08011ae9 	.word	0x08011ae9

08011b90 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8011b90:	b480      	push	{r7}
 8011b92:	b083      	sub	sp, #12
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr

08011ba8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
    {
    }
 8011bb2:	bf00      	nop
 8011bb4:	370c      	adds	r7, #12
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbc:	4770      	bx	lr

08011bbe <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8011bbe:	b480      	push	{r7}
 8011bc0:	b083      	sub	sp, #12
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	6078      	str	r0, [r7, #4]
 8011bc6:	6039      	str	r1, [r7, #0]
    {
    }
 8011bc8:	bf00      	nop
 8011bca:	370c      	adds	r7, #12
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
    {
    }
 8011bde:	bf00      	nop
 8011be0:	370c      	adds	r7, #12
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr

08011bea <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8011bea:	b480      	push	{r7}
 8011bec:	b083      	sub	sp, #12
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
 8011bf2:	460b      	mov	r3, r1
 8011bf4:	70fb      	strb	r3, [r7, #3]
    {
    }
 8011bf6:	bf00      	nop
 8011bf8:	370c      	adds	r7, #12
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr

08011c02 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8011c02:	b480      	push	{r7}
 8011c04:	b083      	sub	sp, #12
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	6078      	str	r0, [r7, #4]
    {
    }
 8011c0a:	bf00      	nop
 8011c0c:	370c      	adds	r7, #12
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr

08011c16 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8011c16:	b480      	push	{r7}
 8011c18:	b083      	sub	sp, #12
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
    {
    }
 8011c1e:	bf00      	nop
 8011c20:	370c      	adds	r7, #12
 8011c22:	46bd      	mov	sp, r7
 8011c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c28:	4770      	bx	lr
	...

08011c2c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8011c2c:	b480      	push	{r7}
 8011c2e:	b083      	sub	sp, #12
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
    {
 8011c34:	4a04      	ldr	r2, [pc, #16]	; (8011c48 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	601a      	str	r2, [r3, #0]
    }
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	370c      	adds	r7, #12
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr
 8011c48:	0802a730 	.word	0x0802a730

08011c4c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
    }
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f7ff ffe9 	bl	8011c2c <_ZN8touchgfx15UIEventListenerD1Ev>
 8011c5a:	2104      	movs	r1, #4
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	f016 fce4 	bl	802862a <_ZdlPvj>
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4618      	mov	r0, r3
 8011c66:	3708      	adds	r7, #8
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8011c6c:	b480      	push	{r7}
 8011c6e:	b083      	sub	sp, #12
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	460b      	mov	r3, r1
 8011c76:	70fb      	strb	r3, [r7, #3]
    {
    }
 8011c78:	bf00      	nop
 8011c7a:	370c      	adds	r7, #12
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c82:	4770      	bx	lr

08011c84 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8011c84:	b480      	push	{r7}
 8011c86:	b083      	sub	sp, #12
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	683a      	ldr	r2, [r7, #0]
 8011c92:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8011c96:	6810      	ldr	r0, [r2, #0]
 8011c98:	6851      	ldr	r1, [r2, #4]
 8011c9a:	c303      	stmia	r3!, {r0, r1}
    };
 8011c9c:	bf00      	nop
 8011c9e:	370c      	adds	r7, #12
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr

08011ca8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
    {
 8011cb0:	4a04      	ldr	r2, [pc, #16]	; (8011cc4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	601a      	str	r2, [r3, #0]
    }
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	4618      	mov	r0, r3
 8011cba:	370c      	adds	r7, #12
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr
 8011cc4:	0802a718 	.word	0x0802a718

08011cc8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b082      	sub	sp, #8
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
    }
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f7ff ffe9 	bl	8011ca8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011cd6:	2104      	movs	r1, #4
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f016 fca6 	bl	802862a <_ZdlPvj>
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3708      	adds	r7, #8
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8011ce8:	b480      	push	{r7}
 8011cea:	b083      	sub	sp, #12
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
    {
 8011cf0:	4a04      	ldr	r2, [pc, #16]	; (8011d04 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	601a      	str	r2, [r3, #0]
    }
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr
 8011d04:	0802c254 	.word	0x0802c254

08011d08 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
    }
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff ffe9 	bl	8011ce8 <_ZN8touchgfx8DrawableD1Ev>
 8011d16:	2128      	movs	r1, #40	; 0x28
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f016 fc86 	bl	802862a <_ZdlPvj>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	4618      	mov	r0, r3
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011d30:	2300      	movs	r3, #0
    }
 8011d32:	4618      	mov	r0, r3
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr

08011d3e <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8011d3e:	b580      	push	{r7, lr}
 8011d40:	b084      	sub	sp, #16
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	60f8      	str	r0, [r7, #12]
 8011d46:	4608      	mov	r0, r1
 8011d48:	4611      	mov	r1, r2
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	817b      	strh	r3, [r7, #10]
 8011d50:	460b      	mov	r3, r1
 8011d52:	813b      	strh	r3, [r7, #8]
 8011d54:	4613      	mov	r3, r2
 8011d56:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8011d58:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011d5c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011d60:	4619      	mov	r1, r3
 8011d62:	68f8      	ldr	r0, [r7, #12]
 8011d64:	f000 f837 	bl	8011dd6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8011d68:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8011d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d70:	4619      	mov	r1, r3
 8011d72:	68f8      	ldr	r0, [r7, #12]
 8011d74:	f000 f88b 	bl	8011e8e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8011d78:	bf00      	nop
 8011d7a:	3710      	adds	r7, #16
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8011d80:	b480      	push	{r7}
 8011d82:	b083      	sub	sp, #12
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8011d8e:	4618      	mov	r0, r3
 8011d90:	370c      	adds	r7, #12
 8011d92:	46bd      	mov	sp, r7
 8011d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d98:	4770      	bx	lr

08011d9a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8011d9a:	b480      	push	{r7}
 8011d9c:	b083      	sub	sp, #12
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
 8011da2:	460b      	mov	r3, r1
 8011da4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	887a      	ldrh	r2, [r7, #2]
 8011daa:	809a      	strh	r2, [r3, #4]
    }
 8011dac:	bf00      	nop
 8011dae:	370c      	adds	r7, #12
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr

08011db8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8011db8:	b480      	push	{r7}
 8011dba:	b083      	sub	sp, #12
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	460b      	mov	r3, r1
 8011dc2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	887a      	ldrh	r2, [r7, #2]
 8011dc8:	80da      	strh	r2, [r3, #6]
    }
 8011dca:	bf00      	nop
 8011dcc:	370c      	adds	r7, #12
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd4:	4770      	bx	lr

08011dd6 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8011dd6:	b580      	push	{r7, lr}
 8011dd8:	b082      	sub	sp, #8
 8011dda:	af00      	add	r7, sp, #0
 8011ddc:	6078      	str	r0, [r7, #4]
 8011dde:	460b      	mov	r3, r1
 8011de0:	807b      	strh	r3, [r7, #2]
 8011de2:	4613      	mov	r3, r2
 8011de4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	332c      	adds	r3, #44	; 0x2c
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011df2:	4611      	mov	r1, r2
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	4798      	blx	r3
        setY(y);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	3330      	adds	r3, #48	; 0x30
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011e04:	4611      	mov	r1, r2
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	4798      	blx	r3
    }
 8011e0a:	bf00      	nop
 8011e0c:	3708      	adds	r7, #8
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8011e12:	b480      	push	{r7}
 8011e14:	b083      	sub	sp, #12
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	887a      	ldrh	r2, [r7, #2]
 8011e22:	811a      	strh	r2, [r3, #8]
    }
 8011e24:	bf00      	nop
 8011e26:	370c      	adds	r7, #12
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr

08011e30 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8011e30:	b480      	push	{r7}
 8011e32:	b083      	sub	sp, #12
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	460b      	mov	r3, r1
 8011e3a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	887a      	ldrh	r2, [r7, #2]
 8011e40:	815a      	strh	r2, [r3, #10]
    }
 8011e42:	bf00      	nop
 8011e44:	370c      	adds	r7, #12
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr

08011e4e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8011e4e:	b480      	push	{r7}
 8011e50:	b083      	sub	sp, #12
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
    {
    }
 8011e56:	bf00      	nop
 8011e58:	370c      	adds	r7, #12
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e60:	4770      	bx	lr

08011e62 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 8011e62:	b480      	push	{r7}
 8011e64:	b083      	sub	sp, #12
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
 8011e6a:	6039      	str	r1, [r7, #0]
    {
    }
 8011e6c:	bf00      	nop
 8011e6e:	370c      	adds	r7, #12
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 8011e78:	b480      	push	{r7}
 8011e7a:	b083      	sub	sp, #12
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]
    {
    }
 8011e82:	bf00      	nop
 8011e84:	370c      	adds	r7, #12
 8011e86:	46bd      	mov	sp, r7
 8011e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8c:	4770      	bx	lr

08011e8e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8011e8e:	b580      	push	{r7, lr}
 8011e90:	b082      	sub	sp, #8
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
 8011e96:	460b      	mov	r3, r1
 8011e98:	807b      	strh	r3, [r7, #2]
 8011e9a:	4613      	mov	r3, r2
 8011e9c:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	3334      	adds	r3, #52	; 0x34
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011eaa:	4611      	mov	r1, r2
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	4798      	blx	r3
        setHeight(height);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	3338      	adds	r3, #56	; 0x38
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011ebc:	4611      	mov	r1, r2
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	4798      	blx	r3
    }
 8011ec2:	bf00      	nop
 8011ec4:	3708      	adds	r7, #8
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}

08011eca <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8011eca:	b480      	push	{r7}
 8011ecc:	b083      	sub	sp, #12
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	6078      	str	r0, [r7, #4]
 8011ed2:	6039      	str	r1, [r7, #0]
    {
    }
 8011ed4:	bf00      	nop
 8011ed6:	370c      	adds	r7, #12
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr

08011ee0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8011ee0:	b480      	push	{r7}
 8011ee2:	b083      	sub	sp, #12
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
    {
    }
 8011ee8:	bf00      	nop
 8011eea:	370c      	adds	r7, #12
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr

08011ef4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8011ef4:	b480      	push	{r7}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8011f02:	4618      	mov	r0, r3
 8011f04:	370c      	adds	r7, #12
 8011f06:	46bd      	mov	sp, r7
 8011f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0c:	4770      	bx	lr

08011f0e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8011f0e:	b480      	push	{r7}
 8011f10:	b083      	sub	sp, #12
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	370c      	adds	r7, #12
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr

08011f28 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	460b      	mov	r3, r1
 8011f32:	807b      	strh	r3, [r7, #2]
 8011f34:	4613      	mov	r3, r2
 8011f36:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	3350      	adds	r3, #80	; 0x50
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	8879      	ldrh	r1, [r7, #2]
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8011f48:	b292      	uxth	r2, r2
 8011f4a:	1a8a      	subs	r2, r1, r2
 8011f4c:	b292      	uxth	r2, r2
 8011f4e:	b210      	sxth	r0, r2
 8011f50:	8839      	ldrh	r1, [r7, #0]
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011f58:	b292      	uxth	r2, r2
 8011f5a:	1a8a      	subs	r2, r1, r2
 8011f5c:	b292      	uxth	r2, r2
 8011f5e:	b212      	sxth	r2, r2
 8011f60:	4601      	mov	r1, r0
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	4798      	blx	r3
    }
 8011f66:	bf00      	nop
 8011f68:	3708      	adds	r7, #8
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}

08011f6e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8011f6e:	b480      	push	{r7}
 8011f70:	b083      	sub	sp, #12
 8011f72:	af00      	add	r7, sp, #0
 8011f74:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f7c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f84:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f8c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8011f8e:	bf00      	nop
 8011f90:	370c      	adds	r7, #12
 8011f92:	46bd      	mov	sp, r7
 8011f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f98:	4770      	bx	lr

08011f9a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8011f9a:	b580      	push	{r7, lr}
 8011f9c:	b084      	sub	sp, #16
 8011f9e:	af00      	add	r7, sp, #0
 8011fa0:	60f8      	str	r0, [r7, #12]
 8011fa2:	60b9      	str	r1, [r7, #8]
 8011fa4:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8011fa6:	68f8      	ldr	r0, [r7, #12]
 8011fa8:	f7ff ffe1 	bl	8011f6e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681a      	ldr	r2, [r3, #0]
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	68fa      	ldr	r2, [r7, #12]
 8011fb8:	601a      	str	r2, [r3, #0]
    }
 8011fba:	bf00      	nop
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
	...

08011fc4 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8011fc4:	b480      	push	{r7}
 8011fc6:	af00      	add	r7, sp, #0
    {
        return instance;
 8011fc8:	4b03      	ldr	r3, [pc, #12]	; (8011fd8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8011fca:	681b      	ldr	r3, [r3, #0]
    }
 8011fcc:	4618      	mov	r0, r3
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr
 8011fd6:	bf00      	nop
 8011fd8:	200057e0 	.word	0x200057e0

08011fdc <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8011fdc:	b480      	push	{r7}
 8011fde:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8011fe0:	4b0b      	ldr	r3, [pc, #44]	; (8012010 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d008      	beq.n	8011ffe <_ZN8touchgfx3HAL3lcdEv+0x22>
 8011fec:	4b08      	ldr	r3, [pc, #32]	; (8012010 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d003      	beq.n	8011ffe <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8011ff6:	4b06      	ldr	r3, [pc, #24]	; (8012010 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ffc:	e002      	b.n	8012004 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8011ffe:	4b04      	ldr	r3, [pc, #16]	; (8012010 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	689b      	ldr	r3, [r3, #8]
        }
    }
 8012004:	4618      	mov	r0, r3
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	200057e0 	.word	0x200057e0

08012014 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8012014:	b480      	push	{r7}
 8012016:	b083      	sub	sp, #12
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 801201c:	4a07      	ldr	r2, [pc, #28]	; (801203c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	601a      	str	r2, [r3, #0]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2200      	movs	r2, #0
 8012026:	605a      	str	r2, [r3, #4]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2200      	movs	r2, #0
 801202c:	721a      	strb	r2, [r3, #8]
    {
    }
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	4618      	mov	r0, r3
 8012032:	370c      	adds	r7, #12
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr
 801203c:	0802a6f4 	.word	0x0802a6f4

08012040 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8012040:	b480      	push	{r7}
 8012042:	b083      	sub	sp, #12
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
    {
 8012048:	4a04      	ldr	r2, [pc, #16]	; (801205c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	601a      	str	r2, [r3, #0]
    }
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	4618      	mov	r0, r3
 8012052:	370c      	adds	r7, #12
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr
 801205c:	0802a6f4 	.word	0x0802a6f4

08012060 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
    }
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f7ff ffe9 	bl	8012040 <_ZN8touchgfx10TransitionD1Ev>
 801206e:	210c      	movs	r1, #12
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f016 fada 	bl	802862a <_ZdlPvj>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	4618      	mov	r0, r3
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8012080:	b480      	push	{r7}
 8012082:	b083      	sub	sp, #12
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
    {
    }
 8012088:	bf00      	nop
 801208a:	370c      	adds	r7, #12
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8012094:	b480      	push	{r7}
 8012096:	b083      	sub	sp, #12
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
    {
    }
 801209c:	bf00      	nop
 801209e:	370c      	adds	r7, #12
 80120a0:	46bd      	mov	sp, r7
 80120a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a6:	4770      	bx	lr

080120a8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
    {
    }
 80120b0:	bf00      	nop
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr

080120bc <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80120bc:	b580      	push	{r7, lr}
 80120be:	b082      	sub	sp, #8
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 80120c4:	f007 fefe 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 80120c8:	4603      	mov	r3, r0
 80120ca:	681a      	ldr	r2, [r3, #0]
 80120cc:	3230      	adds	r2, #48	; 0x30
 80120ce:	6812      	ldr	r2, [r2, #0]
 80120d0:	4618      	mov	r0, r3
 80120d2:	4790      	blx	r2
    }
 80120d4:	bf00      	nop
 80120d6:	3708      	adds	r7, #8
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}

080120dc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80120dc:	b480      	push	{r7}
 80120de:	b083      	sub	sp, #12
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	683a      	ldr	r2, [r7, #0]
 80120ea:	605a      	str	r2, [r3, #4]
    }
 80120ec:	bf00      	nop
 80120ee:	370c      	adds	r7, #12
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr

080120f8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	4a05      	ldr	r2, [pc, #20]	; (8012118 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	4618      	mov	r0, r3
 801210a:	f7ff fd8f 	bl	8011c2c <_ZN8touchgfx15UIEventListenerD1Ev>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	4618      	mov	r0, r3
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}
 8012118:	0802c120 	.word	0x0802c120

0801211c <_ZN8touchgfx11ApplicationD0Ev>:
 801211c:	b580      	push	{r7, lr}
 801211e:	b082      	sub	sp, #8
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f7ff ffe7 	bl	80120f8 <_ZN8touchgfx11ApplicationD1Ev>
 801212a:	f44f 719c 	mov.w	r1, #312	; 0x138
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f016 fa7b 	bl	802862a <_ZdlPvj>
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	4618      	mov	r0, r3
 8012138:	3708      	adds	r7, #8
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}
	...

08012140 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	4618      	mov	r0, r3
 801214c:	f007 ff24 	bl	8019f98 <_ZN8touchgfx11ApplicationC1Ev>
 8012150:	4a09      	ldr	r2, [pc, #36]	; (8012178 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	601a      	str	r2, [r3, #0]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2200      	movs	r2, #0
 801215a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2200      	movs	r2, #0
 8012162:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4a04      	ldr	r2, [pc, #16]	; (801217c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 801216a:	6013      	str	r3, [r2, #0]
    }
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	4618      	mov	r0, r3
 8012170:	3708      	adds	r7, #8
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	0802a6b0 	.word	0x0802a6b0
 801217c:	2000582c 	.word	0x2000582c

08012180 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 f804 	bl	8012196 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 801218e:	bf00      	nop
 8012190:	3708      	adds	r7, #8
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}

08012196 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8012196:	b580      	push	{r7, lr}
 8012198:	b082      	sub	sp, #8
 801219a:	af00      	add	r7, sp, #0
 801219c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d00f      	beq.n	80121c8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	330c      	adds	r3, #12
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	4610      	mov	r0, r2
 80121bc:	4798      	blx	r3
 80121be:	4603      	mov	r3, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d001      	beq.n	80121c8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80121c4:	2301      	movs	r3, #1
 80121c6:	e000      	b.n	80121ca <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80121c8:	2300      	movs	r3, #0
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00e      	beq.n	80121ec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	3308      	adds	r3, #8
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	4610      	mov	r0, r2
 80121e2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2200      	movs	r2, #0
 80121e8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 80121ec:	bf00      	nop
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80121f4:	b480      	push	{r7}
 80121f6:	b083      	sub	sp, #12
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	683a      	ldr	r2, [r7, #0]
 8012202:	601a      	str	r2, [r3, #0]
    }
 8012204:	bf00      	nop
 8012206:	370c      	adds	r7, #12
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr

08012210 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	4a05      	ldr	r2, [pc, #20]	; (8012230 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	601a      	str	r2, [r3, #0]
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	4618      	mov	r0, r3
 8012222:	f7ff ff69 	bl	80120f8 <_ZN8touchgfx11ApplicationD1Ev>
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	4618      	mov	r0, r3
 801222a:	3708      	adds	r7, #8
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}
 8012230:	0802a6b0 	.word	0x0802a6b0

08012234 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7ff ffe7 	bl	8012210 <_ZN8touchgfx14MVPApplicationD1Ev>
 8012242:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f016 f9ef 	bl	802862a <_ZdlPvj>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	4618      	mov	r0, r3
 8012250:	3708      	adds	r7, #8
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}
	...

08012258 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	4a08      	ldr	r2, [pc, #32]	; (8012284 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	601a      	str	r2, [r3, #0]
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801226c:	4618      	mov	r0, r3
 801226e:	f000 fde9 	bl	8012e44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	4618      	mov	r0, r3
 8012276:	f7ff ffcb 	bl	8012210 <_ZN8touchgfx14MVPApplicationD1Ev>
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	4618      	mov	r0, r3
 801227e:	3708      	adds	r7, #8
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	0802a654 	.word	0x0802a654

08012288 <_ZN23FrontendApplicationBaseD0Ev>:
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7ff ffe1 	bl	8012258 <_ZN23FrontendApplicationBaseD1Ev>
 8012296:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f016 f9c5 	bl	802862a <_ZdlPvj>
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	4618      	mov	r0, r3
 80122a4:	3708      	adds	r7, #8
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80122aa:	b480      	push	{r7}
 80122ac:	b083      	sub	sp, #12
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2201      	movs	r2, #1
 80122b6:	721a      	strb	r2, [r3, #8]
    }
 80122b8:	bf00      	nop
 80122ba:	370c      	adds	r7, #12
 80122bc:	46bd      	mov	sp, r7
 80122be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c2:	4770      	bx	lr

080122c4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b084      	sub	sp, #16
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	60f8      	str	r0, [r7, #12]
 80122cc:	607b      	str	r3, [r7, #4]
 80122ce:	460b      	mov	r3, r1
 80122d0:	817b      	strh	r3, [r7, #10]
 80122d2:	4613      	mov	r3, r2
 80122d4:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	4618      	mov	r0, r3
 80122da:	f7ff fe0b 	bl	8011ef4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80122de:	4603      	mov	r3, r0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d008      	beq.n	80122f6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7ff fe11 	bl	8011f0e <_ZNK8touchgfx8Drawable11isTouchableEv>
 80122ec:	4603      	mov	r3, r0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d001      	beq.n	80122f6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80122f2:	2301      	movs	r3, #1
 80122f4:	e000      	b.n	80122f8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80122f6:	2300      	movs	r3, #0
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d002      	beq.n	8012302 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80122fc:	68fa      	ldr	r2, [r7, #12]
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	601a      	str	r2, [r3, #0]
        }
    }
 8012302:	bf00      	nop
 8012304:	3710      	adds	r7, #16
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 801230a:	b480      	push	{r7}
 801230c:	b083      	sub	sp, #12
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
 8012312:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	683a      	ldr	r2, [r7, #0]
 8012318:	605a      	str	r2, [r3, #4]
    }
 801231a:	bf00      	nop
 801231c:	370c      	adds	r7, #12
 801231e:	46bd      	mov	sp, r7
 8012320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012324:	4770      	bx	lr
	...

08012328 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8012328:	b580      	push	{r7, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	4a05      	ldr	r2, [pc, #20]	; (8012348 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	601a      	str	r2, [r3, #0]
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	4618      	mov	r0, r3
 801233a:	f7ff fcd5 	bl	8011ce8 <_ZN8touchgfx8DrawableD1Ev>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	4618      	mov	r0, r3
 8012342:	3708      	adds	r7, #8
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	0802a5cc 	.word	0x0802a5cc

0801234c <_ZN8touchgfx6WidgetD0Ev>:
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f7ff ffe7 	bl	8012328 <_ZN8touchgfx6WidgetD1Ev>
 801235a:	2128      	movs	r1, #40	; 0x28
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f016 f964 	bl	802862a <_ZdlPvj>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	4618      	mov	r0, r3
 8012366:	3708      	adds	r7, #8
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	4618      	mov	r0, r3
 801237c:	f7ff fee0 	bl	8012140 <_ZN8touchgfx14MVPApplicationC1Ev>
 8012380:	4a13      	ldr	r2, [pc, #76]	; (80123d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	601a      	str	r2, [r3, #0]
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801238c:	4618      	mov	r0, r3
 801238e:	f000 f8e5 	bl	801255c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	68ba      	ldr	r2, [r7, #8]
 801239e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80123a2:	f7ff fe0f 	bl	8011fc4 <_ZN8touchgfx3HAL11getInstanceEv>
 80123a6:	4603      	mov	r3, r0
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	3208      	adds	r2, #8
 80123ac:	6812      	ldr	r2, [r2, #0]
 80123ae:	2100      	movs	r1, #0
 80123b0:	4618      	mov	r0, r3
 80123b2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80123b4:	2000      	movs	r0, #0
 80123b6:	f001 fecb 	bl	8014150 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80123ba:	f7ff fe0f 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 80123be:	4603      	mov	r3, r0
 80123c0:	4618      	mov	r0, r3
 80123c2:	f00f f80a 	bl	80213da <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	4618      	mov	r0, r3
 80123ca:	3710      	adds	r7, #16
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	0802a654 	.word	0x0802a654

080123d4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80123d4:	b480      	push	{r7}
 80123d6:	b083      	sub	sp, #12
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	6039      	str	r1, [r7, #0]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	4618      	mov	r0, r3
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	683a      	ldr	r2, [r7, #0]
 80123fa:	4611      	mov	r1, r2
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7ff ffe9 	bl	80123d4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	685a      	ldr	r2, [r3, #4]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	605a      	str	r2, [r3, #4]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	683a      	ldr	r2, [r7, #0]
 801240e:	3308      	adds	r3, #8
 8012410:	3208      	adds	r2, #8
 8012412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012416:	e883 0003 	stmia.w	r3, {r0, r1}
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	4618      	mov	r0, r3
 801241e:	3708      	adds	r7, #8
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8012424:	b590      	push	{r4, r7, lr}
 8012426:	b089      	sub	sp, #36	; 0x24
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8012432:	4b10      	ldr	r3, [pc, #64]	; (8012474 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8012434:	61bb      	str	r3, [r7, #24]
 8012436:	2300      	movs	r3, #0
 8012438:	61fb      	str	r3, [r7, #28]
 801243a:	f107 0008 	add.w	r0, r7, #8
 801243e:	f107 0318 	add.w	r3, r7, #24
 8012442:	cb0c      	ldmia	r3, {r2, r3}
 8012444:	6879      	ldr	r1, [r7, #4]
 8012446:	f000 f8a5 	bl	8012594 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801244a:	f107 0308 	add.w	r3, r7, #8
 801244e:	4619      	mov	r1, r3
 8012450:	4620      	mov	r0, r4
 8012452:	f7ff ffcb 	bl	80123ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8012456:	f107 0308 	add.w	r3, r7, #8
 801245a:	4618      	mov	r0, r3
 801245c:	f000 fcf2 	bl	8012e44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 801246c:	bf00      	nop
 801246e:	3724      	adds	r7, #36	; 0x24
 8012470:	46bd      	mov	sp, r7
 8012472:	bd90      	pop	{r4, r7, pc}
 8012474:	08012479 	.word	0x08012479

08012478 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af02      	add	r7, sp, #8
 801247e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 801248c:	461a      	mov	r2, r3
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012494:	9300      	str	r3, [sp, #0]
 8012496:	4b04      	ldr	r3, [pc, #16]	; (80124a8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 8012498:	4804      	ldr	r0, [pc, #16]	; (80124ac <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 801249a:	f000 f8ad 	bl	80125f8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801249e:	bf00      	nop
 80124a0:	3708      	adds	r7, #8
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	20005820 	.word	0x20005820
 80124ac:	2000581c 	.word	0x2000581c

080124b0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
{
 80124b0:	b590      	push	{r4, r7, lr}
 80124b2:	b089      	sub	sp, #36	; 0x24
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionEastImpl);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80124be:	4b10      	ldr	r3, [pc, #64]	; (8012500 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv+0x50>)
 80124c0:	61bb      	str	r3, [r7, #24]
 80124c2:	2300      	movs	r3, #0
 80124c4:	61fb      	str	r3, [r7, #28]
 80124c6:	f107 0008 	add.w	r0, r7, #8
 80124ca:	f107 0318 	add.w	r3, r7, #24
 80124ce:	cb0c      	ldmia	r3, {r2, r3}
 80124d0:	6879      	ldr	r1, [r7, #4]
 80124d2:	f000 f85f 	bl	8012594 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80124d6:	f107 0308 	add.w	r3, r7, #8
 80124da:	4619      	mov	r1, r3
 80124dc:	4620      	mov	r0, r4
 80124de:	f7ff ff85 	bl	80123ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80124e2:	f107 0308 	add.w	r3, r7, #8
 80124e6:	4618      	mov	r0, r3
 80124e8:	f000 fcac 	bl	8012e44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80124f8:	bf00      	nop
 80124fa:	3724      	adds	r7, #36	; 0x24
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd90      	pop	{r4, r7, pc}
 8012500:	08012505 	.word	0x08012505

08012504 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl()
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b084      	sub	sp, #16
 8012508:	af02      	add	r7, sp, #8
 801250a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8012518:	461a      	mov	r2, r3
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	4b04      	ldr	r3, [pc, #16]	; (8012534 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x30>)
 8012524:	4804      	ldr	r0, [pc, #16]	; (8012538 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x34>)
 8012526:	f000 f981 	bl	801282c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801252a:	bf00      	nop
 801252c:	3708      	adds	r7, #8
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	20005820 	.word	0x20005820
 8012538:	2000581c 	.word	0x2000581c

0801253c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801253c:	b480      	push	{r7}
 801253e:	b083      	sub	sp, #12
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	4a04      	ldr	r2, [pc, #16]	; (8012558 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	601a      	str	r2, [r3, #0]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	4618      	mov	r0, r3
 801254e:	370c      	adds	r7, #12
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr
 8012558:	0802a718 	.word	0x0802a718

0801255c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	4618      	mov	r0, r3
 8012568:	f7ff ffe8 	bl	801253c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801256c:	4a08      	ldr	r2, [pc, #32]	; (8012590 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	601a      	str	r2, [r3, #0]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2200      	movs	r2, #0
 8012576:	605a      	str	r2, [r3, #4]
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2200      	movs	r2, #0
 801257c:	609a      	str	r2, [r3, #8]
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2200      	movs	r2, #0
 8012582:	60da      	str	r2, [r3, #12]
    {
    }
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4618      	mov	r0, r3
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	0802a698 	.word	0x0802a698

08012594 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8012594:	b580      	push	{r7, lr}
 8012596:	b084      	sub	sp, #16
 8012598:	af00      	add	r7, sp, #0
 801259a:	60f8      	str	r0, [r7, #12]
 801259c:	60b9      	str	r1, [r7, #8]
 801259e:	4639      	mov	r1, r7
 80125a0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	4618      	mov	r0, r3
 80125a8:	f7ff ffc8 	bl	801253c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80125ac:	4a08      	ldr	r2, [pc, #32]	; (80125d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	68ba      	ldr	r2, [r7, #8]
 80125b6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	3308      	adds	r3, #8
 80125bc:	463a      	mov	r2, r7
 80125be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80125c2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	4618      	mov	r0, r3
 80125ca:	3710      	adds	r7, #16
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}
 80125d0:	0802a698 	.word	0x0802a698

080125d4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	4618      	mov	r0, r3
 80125e0:	f7ff fd18 	bl	8012014 <_ZN8touchgfx10TransitionC1Ev>
 80125e4:	4a03      	ldr	r2, [pc, #12]	; (80125f4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	601a      	str	r2, [r3, #0]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	4618      	mov	r0, r3
 80125ee:	3708      	adds	r7, #8
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	0802a630 	.word	0x0802a630

080125f8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80125f8:	b590      	push	{r4, r7, lr}
 80125fa:	b08f      	sub	sp, #60	; 0x3c
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	607a      	str	r2, [r7, #4]
 8012604:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	689a      	ldr	r2, [r3, #8]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	689b      	ldr	r3, [r3, #8]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	3320      	adds	r3, #32
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	4610      	mov	r0, r2
 8012616:	4798      	blx	r3
 8012618:	4603      	mov	r3, r0
 801261a:	2baf      	cmp	r3, #175	; 0xaf
 801261c:	d805      	bhi.n	801262a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 801261e:	4b7e      	ldr	r3, [pc, #504]	; (8012818 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8012620:	4a7e      	ldr	r2, [pc, #504]	; (801281c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012622:	21a7      	movs	r1, #167	; 0xa7
 8012624:	487e      	ldr	r0, [pc, #504]	; (8012820 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012626:	f016 f82f 	bl	8028688 <__assert_func>
 801262a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	685a      	ldr	r2, [r3, #4]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	3320      	adds	r3, #32
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	4610      	mov	r0, r2
 801263c:	4798      	blx	r3
 801263e:	4603      	mov	r3, r0
 8012640:	2b0f      	cmp	r3, #15
 8012642:	d805      	bhi.n	8012650 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8012644:	4b77      	ldr	r3, [pc, #476]	; (8012824 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8012646:	4a75      	ldr	r2, [pc, #468]	; (801281c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012648:	21a8      	movs	r1, #168	; 0xa8
 801264a:	4875      	ldr	r0, [pc, #468]	; (8012820 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 801264c:	f016 f81c 	bl	8028688 <__assert_func>
 8012650:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	68da      	ldr	r2, [r3, #12]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	68db      	ldr	r3, [r3, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	3320      	adds	r3, #32
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4610      	mov	r0, r2
 8012662:	4798      	blx	r3
 8012664:	4603      	mov	r3, r0
 8012666:	2b0b      	cmp	r3, #11
 8012668:	d805      	bhi.n	8012676 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 801266a:	4b6f      	ldr	r3, [pc, #444]	; (8012828 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 801266c:	4a6b      	ldr	r2, [pc, #428]	; (801281c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 801266e:	21a9      	movs	r1, #169	; 0xa9
 8012670:	486b      	ldr	r0, [pc, #428]	; (8012820 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012672:	f016 f809 	bl	8028688 <__assert_func>
 8012676:	bf00      	nop
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	62bb      	str	r3, [r7, #40]	; 0x28
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	627b      	str	r3, [r7, #36]	; 0x24
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8012684:	f007 fc1e 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 8012688:	4603      	mov	r3, r0
 801268a:	4618      	mov	r0, r3
 801268c:	f007 fc68 	bl	8019f60 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8012690:	6a3b      	ldr	r3, [r7, #32]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d008      	beq.n	80126aa <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8012698:	6a3b      	ldr	r3, [r7, #32]
 801269a:	681a      	ldr	r2, [r3, #0]
 801269c:	6a3b      	ldr	r3, [r7, #32]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	330c      	adds	r3, #12
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	4610      	mov	r0, r2
 80126a8:	4798      	blx	r3
    if (*currentTrans)
 80126aa:	6a3b      	ldr	r3, [r7, #32]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d007      	beq.n	80126c2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 80126b2:	6a3b      	ldr	r3, [r7, #32]
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	6a3b      	ldr	r3, [r7, #32]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	4610      	mov	r0, r2
 80126c0:	4798      	blx	r3
    if (*currentScreen)
 80126c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d008      	beq.n	80126dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 80126ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	3314      	adds	r3, #20
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	4610      	mov	r0, r2
 80126da:	4798      	blx	r3
    if (*currentPresenter)
 80126dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d008      	beq.n	80126f6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 80126e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e6:	681a      	ldr	r2, [r3, #0]
 80126e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	3304      	adds	r3, #4
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	4610      	mov	r0, r2
 80126f4:	4798      	blx	r3
    if (*currentScreen)
 80126f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d007      	beq.n	801270e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 80126fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	4610      	mov	r0, r2
 801270c:	4798      	blx	r3
    if (*currentPresenter)
 801270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d008      	beq.n	8012728 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8012716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	3308      	adds	r3, #8
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	4610      	mov	r0, r2
 8012726:	4798      	blx	r3
}
 8012728:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	68db      	ldr	r3, [r3, #12]
 801272e:	2100      	movs	r1, #0
 8012730:	4618      	mov	r0, r3
 8012732:	f000 f999 	bl	8012a68 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8012736:	4603      	mov	r3, r0
 8012738:	4619      	mov	r1, r3
 801273a:	200c      	movs	r0, #12
 801273c:	f7ff fa28 	bl	8011b90 <_ZnwjPv>
 8012740:	4604      	mov	r4, r0
 8012742:	4620      	mov	r0, r4
 8012744:	f7ff ff46 	bl	80125d4 <_ZN8touchgfx12NoTransitionC1Ev>
 8012748:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	689b      	ldr	r3, [r3, #8]
 801274e:	2100      	movs	r1, #0
 8012750:	4618      	mov	r0, r3
 8012752:	f000 f99c 	bl	8012a8e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8012756:	4603      	mov	r3, r0
 8012758:	4619      	mov	r1, r3
 801275a:	20b0      	movs	r0, #176	; 0xb0
 801275c:	f7ff fa18 	bl	8011b90 <_ZnwjPv>
 8012760:	4604      	mov	r4, r0
 8012762:	4620      	mov	r0, r4
 8012764:	f001 ffd4 	bl	8014710 <_ZN10screenViewC1Ev>
 8012768:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	685b      	ldr	r3, [r3, #4]
 801276e:	2100      	movs	r1, #0
 8012770:	4618      	mov	r0, r3
 8012772:	f000 f99f 	bl	8012ab4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8012776:	4603      	mov	r3, r0
 8012778:	4619      	mov	r1, r3
 801277a:	2010      	movs	r0, #16
 801277c:	f7ff fa08 	bl	8011b90 <_ZnwjPv>
 8012780:	4604      	mov	r4, r0
 8012782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012784:	4620      	mov	r0, r4
 8012786:	f001 ff6d 	bl	8014664 <_ZN15screenPresenterC1ER10screenView>
 801278a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012790:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012796:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801279c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d002      	beq.n	80127aa <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80127a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a6:	3304      	adds	r3, #4
 80127a8:	e000      	b.n	80127ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80127aa:	2300      	movs	r3, #0
 80127ac:	4619      	mov	r1, r3
 80127ae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80127b0:	f7ff fd20 	bl	80121f4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80127b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b6:	3304      	adds	r3, #4
 80127b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7ff fda5 	bl	801230a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80127c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127c4:	4618      	mov	r0, r3
 80127c6:	f000 f988 	bl	8012ada <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 80127ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127cc:	61fb      	str	r3, [r7, #28]
 80127ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d0:	61bb      	str	r3, [r7, #24]
 80127d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127d4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80127d6:	69fb      	ldr	r3, [r7, #28]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	330c      	adds	r3, #12
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	69f8      	ldr	r0, [r7, #28]
 80127e0:	4798      	blx	r3
    newPresenter->activate();
 80127e2:	69bb      	ldr	r3, [r7, #24]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	69b8      	ldr	r0, [r7, #24]
 80127ea:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80127ec:	6979      	ldr	r1, [r7, #20]
 80127ee:	69f8      	ldr	r0, [r7, #28]
 80127f0:	f009 f84b 	bl	801b88a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	3310      	adds	r3, #16
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	6978      	ldr	r0, [r7, #20]
 80127fe:	4798      	blx	r3
    newTransition->invalidate();
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	3314      	adds	r3, #20
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	6978      	ldr	r0, [r7, #20]
 801280a:	4798      	blx	r3
}
 801280c:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 801280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012810:	4618      	mov	r0, r3
 8012812:	373c      	adds	r7, #60	; 0x3c
 8012814:	46bd      	mov	sp, r7
 8012816:	bd90      	pop	{r4, r7, pc}
 8012818:	08029920 	.word	0x08029920
 801281c:	080299b0 	.word	0x080299b0
 8012820:	08029ab4 	.word	0x08029ab4
 8012824:	08029af8 	.word	0x08029af8
 8012828:	08029b9c 	.word	0x08029b9c

0801282c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801282c:	b590      	push	{r4, r7, lr}
 801282e:	b08f      	sub	sp, #60	; 0x3c
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	60b9      	str	r1, [r7, #8]
 8012836:	607a      	str	r2, [r7, #4]
 8012838:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	689a      	ldr	r2, [r3, #8]
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	689b      	ldr	r3, [r3, #8]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	3320      	adds	r3, #32
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4610      	mov	r0, r2
 801284a:	4798      	blx	r3
 801284c:	4603      	mov	r3, r0
 801284e:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8012852:	d205      	bcs.n	8012860 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8012854:	4b7f      	ldr	r3, [pc, #508]	; (8012a54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012856:	4a80      	ldr	r2, [pc, #512]	; (8012a58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8012858:	21a7      	movs	r1, #167	; 0xa7
 801285a:	4880      	ldr	r0, [pc, #512]	; (8012a5c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 801285c:	f015 ff14 	bl	8028688 <__assert_func>
 8012860:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	685a      	ldr	r2, [r3, #4]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	3320      	adds	r3, #32
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	4610      	mov	r0, r2
 8012872:	4798      	blx	r3
 8012874:	4603      	mov	r3, r0
 8012876:	2b0f      	cmp	r3, #15
 8012878:	d805      	bhi.n	8012886 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801287a:	4b79      	ldr	r3, [pc, #484]	; (8012a60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 801287c:	4a76      	ldr	r2, [pc, #472]	; (8012a58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801287e:	21a8      	movs	r1, #168	; 0xa8
 8012880:	4876      	ldr	r0, [pc, #472]	; (8012a5c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8012882:	f015 ff01 	bl	8028688 <__assert_func>
 8012886:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	68da      	ldr	r2, [r3, #12]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	3320      	adds	r3, #32
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	4610      	mov	r0, r2
 8012898:	4798      	blx	r3
 801289a:	4603      	mov	r3, r0
 801289c:	2b53      	cmp	r3, #83	; 0x53
 801289e:	d805      	bhi.n	80128ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80128a0:	4b70      	ldr	r3, [pc, #448]	; (8012a64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 80128a2:	4a6d      	ldr	r2, [pc, #436]	; (8012a58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80128a4:	21a9      	movs	r1, #169	; 0xa9
 80128a6:	486d      	ldr	r0, [pc, #436]	; (8012a5c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80128a8:	f015 feee 	bl	8028688 <__assert_func>
 80128ac:	bf00      	nop
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	627b      	str	r3, [r7, #36]	; 0x24
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80128ba:	f007 fb03 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 80128be:	4603      	mov	r3, r0
 80128c0:	4618      	mov	r0, r3
 80128c2:	f007 fb4d 	bl	8019f60 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80128c6:	6a3b      	ldr	r3, [r7, #32]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d008      	beq.n	80128e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 80128ce:	6a3b      	ldr	r3, [r7, #32]
 80128d0:	681a      	ldr	r2, [r3, #0]
 80128d2:	6a3b      	ldr	r3, [r7, #32]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	330c      	adds	r3, #12
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	4610      	mov	r0, r2
 80128de:	4798      	blx	r3
    if (*currentTrans)
 80128e0:	6a3b      	ldr	r3, [r7, #32]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d007      	beq.n	80128f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 80128e8:	6a3b      	ldr	r3, [r7, #32]
 80128ea:	681a      	ldr	r2, [r3, #0]
 80128ec:	6a3b      	ldr	r3, [r7, #32]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	4610      	mov	r0, r2
 80128f6:	4798      	blx	r3
    if (*currentScreen)
 80128f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d008      	beq.n	8012912 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8012900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012902:	681a      	ldr	r2, [r3, #0]
 8012904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	3314      	adds	r3, #20
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	4610      	mov	r0, r2
 8012910:	4798      	blx	r3
    if (*currentPresenter)
 8012912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d008      	beq.n	801292c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 801291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	3304      	adds	r3, #4
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	4610      	mov	r0, r2
 801292a:	4798      	blx	r3
    if (*currentScreen)
 801292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d007      	beq.n	8012944 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8012934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012936:	681a      	ldr	r2, [r3, #0]
 8012938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	4610      	mov	r0, r2
 8012942:	4798      	blx	r3
    if (*currentPresenter)
 8012944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d008      	beq.n	801295e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 801294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	3308      	adds	r3, #8
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	4610      	mov	r0, r2
 801295c:	4798      	blx	r3
}
 801295e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	2100      	movs	r1, #0
 8012966:	4618      	mov	r0, r3
 8012968:	f000 f8c5 	bl	8012af6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801296c:	4603      	mov	r3, r0
 801296e:	4619      	mov	r1, r3
 8012970:	2054      	movs	r0, #84	; 0x54
 8012972:	f7ff f90d 	bl	8011b90 <_ZnwjPv>
 8012976:	4604      	mov	r4, r0
 8012978:	2114      	movs	r1, #20
 801297a:	4620      	mov	r0, r4
 801297c:	f000 f912 	bl	8012ba4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8012980:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	689b      	ldr	r3, [r3, #8]
 8012986:	2100      	movs	r1, #0
 8012988:	4618      	mov	r0, r3
 801298a:	f000 f96f 	bl	8012c6c <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 801298e:	4603      	mov	r3, r0
 8012990:	4619      	mov	r1, r3
 8012992:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8012996:	f7ff f8fb 	bl	8011b90 <_ZnwjPv>
 801299a:	4604      	mov	r4, r0
 801299c:	4620      	mov	r0, r4
 801299e:	f001 fdeb 	bl	8014578 <_ZN11Screen1ViewC1Ev>
 80129a2:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	2100      	movs	r1, #0
 80129aa:	4618      	mov	r0, r3
 80129ac:	f000 f971 	bl	8012c92 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 80129b0:	4603      	mov	r3, r0
 80129b2:	4619      	mov	r1, r3
 80129b4:	2010      	movs	r0, #16
 80129b6:	f7ff f8eb 	bl	8011b90 <_ZnwjPv>
 80129ba:	4604      	mov	r4, r0
 80129bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80129be:	4620      	mov	r0, r4
 80129c0:	f001 fd82 	bl	80144c8 <_ZN16Screen1PresenterC1ER11Screen1View>
 80129c4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80129ca:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129d0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129d6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80129d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d002      	beq.n	80129e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80129de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e0:	3304      	adds	r3, #4
 80129e2:	e000      	b.n	80129e6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 80129e4:	2300      	movs	r3, #0
 80129e6:	4619      	mov	r1, r3
 80129e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80129ea:	f7ff fc03 	bl	80121f4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80129ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f0:	3304      	adds	r3, #4
 80129f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7ff fc88 	bl	801230a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80129fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129fe:	4618      	mov	r0, r3
 8012a00:	f000 f95a 	bl	8012cb8 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8012a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a06:	61fb      	str	r3, [r7, #28]
 8012a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0a:	61bb      	str	r3, [r7, #24]
 8012a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a0e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8012a10:	69fb      	ldr	r3, [r7, #28]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	330c      	adds	r3, #12
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	69f8      	ldr	r0, [r7, #28]
 8012a1a:	4798      	blx	r3
    newPresenter->activate();
 8012a1c:	69bb      	ldr	r3, [r7, #24]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	69b8      	ldr	r0, [r7, #24]
 8012a24:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8012a26:	6979      	ldr	r1, [r7, #20]
 8012a28:	69f8      	ldr	r0, [r7, #28]
 8012a2a:	f008 ff2e 	bl	801b88a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	3310      	adds	r3, #16
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	6978      	ldr	r0, [r7, #20]
 8012a38:	4798      	blx	r3
    newTransition->invalidate();
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	3314      	adds	r3, #20
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	6978      	ldr	r0, [r7, #20]
 8012a44:	4798      	blx	r3
}
 8012a46:	bf00      	nop
    return newPresenter;
 8012a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	373c      	adds	r7, #60	; 0x3c
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd90      	pop	{r4, r7, pc}
 8012a52:	bf00      	nop
 8012a54:	08029920 	.word	0x08029920
 8012a58:	08029c40 	.word	0x08029c40
 8012a5c:	08029ab4 	.word	0x08029ab4
 8012a60:	08029af8 	.word	0x08029af8
 8012a64:	08029b9c 	.word	0x08029b9c

08012a68 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	460b      	mov	r3, r1
 8012a72:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	3324      	adds	r3, #36	; 0x24
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	887a      	ldrh	r2, [r7, #2]
 8012a7e:	4611      	mov	r1, r2
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	4798      	blx	r3
 8012a84:	4603      	mov	r3, r0
    }
 8012a86:	4618      	mov	r0, r3
 8012a88:	3708      	adds	r7, #8
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}

08012a8e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8012a8e:	b580      	push	{r7, lr}
 8012a90:	b082      	sub	sp, #8
 8012a92:	af00      	add	r7, sp, #0
 8012a94:	6078      	str	r0, [r7, #4]
 8012a96:	460b      	mov	r3, r1
 8012a98:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	3324      	adds	r3, #36	; 0x24
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	887a      	ldrh	r2, [r7, #2]
 8012aa4:	4611      	mov	r1, r2
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	4798      	blx	r3
 8012aaa:	4603      	mov	r3, r0
    }
 8012aac:	4618      	mov	r0, r3
 8012aae:	3708      	adds	r7, #8
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	460b      	mov	r3, r1
 8012abe:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	3324      	adds	r3, #36	; 0x24
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	887a      	ldrh	r2, [r7, #2]
 8012aca:	4611      	mov	r1, r2
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	4798      	blx	r3
 8012ad0:	4603      	mov	r3, r0
    }
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3708      	adds	r7, #8
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}

08012ada <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8012ada:	b480      	push	{r7}
 8012adc:	b083      	sub	sp, #12
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
 8012ae2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	683a      	ldr	r2, [r7, #0]
 8012ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012aea:	bf00      	nop
 8012aec:	370c      	adds	r7, #12
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr

08012af6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8012af6:	b580      	push	{r7, lr}
 8012af8:	b082      	sub	sp, #8
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
 8012afe:	460b      	mov	r3, r1
 8012b00:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	3324      	adds	r3, #36	; 0x24
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	887a      	ldrh	r2, [r7, #2]
 8012b0c:	4611      	mov	r1, r2
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	4798      	blx	r3
 8012b12:	4603      	mov	r3, r0
    }
 8012b14:	4618      	mov	r0, r3
 8012b16:	3708      	adds	r7, #8
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	4a05      	ldr	r2, [pc, #20]	; (8012b3c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	601a      	str	r2, [r3, #0]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7ff fbfb 	bl	8012328 <_ZN8touchgfx6WidgetD1Ev>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	4618      	mov	r0, r3
 8012b36:	3708      	adds	r7, #8
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}
 8012b3c:	0802bc54 	.word	0x0802bc54

08012b40 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f7ff ffe7 	bl	8012b1c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8012b4e:	212c      	movs	r1, #44	; 0x2c
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f015 fd6a 	bl	802862a <_ZdlPvj>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3708      	adds	r7, #8
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	4a05      	ldr	r2, [pc, #20]	; (8012b80 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	601a      	str	r2, [r3, #0]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f000 f8f9 	bl	8012d68 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3708      	adds	r7, #8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}
 8012b80:	0802a59c 	.word	0x0802a59c

08012b84 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7ff ffe7 	bl	8012b60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8012b92:	2110      	movs	r1, #16
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f015 fd48 	bl	802862a <_ZdlPvj>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3708      	adds	r7, #8
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8012ba4:	b590      	push	{r4, r7, lr}
 8012ba6:	b087      	sub	sp, #28
 8012ba8:	af02      	add	r7, sp, #8
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	460b      	mov	r3, r1
 8012bae:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7ff fa2e 	bl	8012014 <_ZN8touchgfx10TransitionC1Ev>
 8012bb8:	4a27      	ldr	r2, [pc, #156]	; (8012c58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb4>)
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	601a      	str	r2, [r3, #0]
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	330c      	adds	r3, #12
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f004 ffe0 	bl	8017b88 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	639a      	str	r2, [r3, #56]	; 0x38
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8012bd8:	4a20      	ldr	r2, [pc, #128]	; (8012c5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb8>)
 8012bda:	f107 0308 	add.w	r3, r7, #8
 8012bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012be2:	e883 0003 	stmia.w	r3, {r0, r1}
 8012be6:	f107 0308 	add.w	r3, r7, #8
 8012bea:	cb0c      	ldmia	r3, {r2, r3}
 8012bec:	6879      	ldr	r1, [r7, #4]
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f000 f89a 	bl	8012d28 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	78fa      	ldrb	r2, [r7, #3]
 8012bf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2200      	movs	r2, #0
 8012c08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8012c0c:	4b14      	ldr	r3, [pc, #80]	; (8012c60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xbc>)
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d01c      	beq.n	8012c4e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xaa>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f103 000c 	add.w	r0, r3, #12
 8012c1a:	4b12      	ldr	r3, [pc, #72]	; (8012c64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	b21a      	sxth	r2, r3
 8012c20:	4b11      	ldr	r3, [pc, #68]	; (8012c68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc4>)
 8012c22:	881b      	ldrh	r3, [r3, #0]
 8012c24:	b21b      	sxth	r3, r3
 8012c26:	9300      	str	r3, [sp, #0]
 8012c28:	4613      	mov	r3, r2
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	2100      	movs	r1, #0
 8012c2e:	f7ff f886 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	330c      	adds	r3, #12
 8012c36:	4618      	mov	r0, r3
 8012c38:	f004 ff2a 	bl	8017a90 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (templateDirection)
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8012c3c:	4b09      	ldr	r3, [pc, #36]	; (8012c64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 8012c3e:	881b      	ldrh	r3, [r3, #0]
 8012c40:	425b      	negs	r3, r3
 8012c42:	b29b      	uxth	r3, r3
 8012c44:	b21a      	sxth	r2, r3
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 8012c4c:	bf00      	nop
                done = true;
                // Nothing to do here
                break;
            }
        }
    }
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	4618      	mov	r0, r3
 8012c52:	3714      	adds	r7, #20
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd90      	pop	{r4, r7, pc}
 8012c58:	0802a570 	.word	0x0802a570
 8012c5c:	08029d58 	.word	0x08029d58
 8012c60:	200057df 	.word	0x200057df
 8012c64:	200057d4 	.word	0x200057d4
 8012c68:	200057d6 	.word	0x200057d6

08012c6c <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	460b      	mov	r3, r1
 8012c76:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	3324      	adds	r3, #36	; 0x24
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	887a      	ldrh	r2, [r7, #2]
 8012c82:	4611      	mov	r1, r2
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	4798      	blx	r3
 8012c88:	4603      	mov	r3, r0
    }
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3708      	adds	r7, #8
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}

08012c92 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8012c92:	b580      	push	{r7, lr}
 8012c94:	b082      	sub	sp, #8
 8012c96:	af00      	add	r7, sp, #0
 8012c98:	6078      	str	r0, [r7, #4]
 8012c9a:	460b      	mov	r3, r1
 8012c9c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	3324      	adds	r3, #36	; 0x24
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	887a      	ldrh	r2, [r7, #2]
 8012ca8:	4611      	mov	r1, r2
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	4798      	blx	r3
 8012cae:	4603      	mov	r3, r0
    }
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3708      	adds	r7, #8
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}

08012cb8 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& presenter)
 8012cb8:	b480      	push	{r7}
 8012cba:	b083      	sub	sp, #12
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	683a      	ldr	r2, [r7, #0]
 8012cc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012cc8:	bf00      	nop
 8012cca:	370c      	adds	r7, #12
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ce2:	683a      	ldr	r2, [r7, #0]
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d00a      	beq.n	8012cfe <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2a>

        switch (templateDirection)
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	3350      	adds	r3, #80	; 0x50
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	f9b2 1050 	ldrsh.w	r1, [r2, #80]	; 0x50
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	6838      	ldr	r0, [r7, #0]
 8012cfa:	4798      	blx	r3
            break;
 8012cfc:	e000      	b.n	8012d00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 8012cfe:	bf00      	nop
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
            break;
        }
    }
 8012d00:	3708      	adds	r7, #8
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
	...

08012d08 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8012d08:	b480      	push	{r7}
 8012d0a:	b083      	sub	sp, #12
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	4a04      	ldr	r2, [pc, #16]	; (8012d24 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	601a      	str	r2, [r3, #0]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	370c      	adds	r7, #12
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr
 8012d24:	0802a5b4 	.word	0x0802a5b4

08012d28 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b084      	sub	sp, #16
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	60f8      	str	r0, [r7, #12]
 8012d30:	60b9      	str	r1, [r7, #8]
 8012d32:	4639      	mov	r1, r7
 8012d34:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7ff ffe4 	bl	8012d08 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8012d40:	4a08      	ldr	r2, [pc, #32]	; (8012d64 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	68ba      	ldr	r2, [r7, #8]
 8012d4a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	3308      	adds	r3, #8
 8012d50:	463a      	mov	r2, r7
 8012d52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d56:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3710      	adds	r7, #16
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}
 8012d64:	0802a59c 	.word	0x0802a59c

08012d68 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8012d68:	b480      	push	{r7}
 8012d6a:	b083      	sub	sp, #12
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
    }
 8012d70:	4a04      	ldr	r2, [pc, #16]	; (8012d84 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	601a      	str	r2, [r3, #0]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	370c      	adds	r7, #12
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d82:	4770      	bx	lr
 8012d84:	0802a5b4 	.word	0x0802a5b4

08012d88 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
    }
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f7ff ffe9 	bl	8012d68 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8012d96:	2104      	movs	r1, #4
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f015 fc46 	bl	802862a <_ZdlPvj>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	4618      	mov	r0, r3
 8012da2:	3708      	adds	r7, #8
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}

08012da8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	4a0a      	ldr	r2, [pc, #40]	; (8012ddc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	601a      	str	r2, [r3, #0]
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	333c      	adds	r3, #60	; 0x3c
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7ff fed0 	bl	8012b60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	330c      	adds	r3, #12
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7ff fea9 	bl	8012b1c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7ff f937 	bl	8012040 <_ZN8touchgfx10TransitionD1Ev>
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3708      	adds	r7, #8
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}
 8012ddc:	0802a570 	.word	0x0802a570

08012de0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f7ff ffdd 	bl	8012da8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8012dee:	2154      	movs	r1, #84	; 0x54
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f015 fc1a 	bl	802862a <_ZdlPvj>
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3708      	adds	r7, #8
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}

08012e00 <_ZN8touchgfx12NoTransitionD1Ev>:
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b082      	sub	sp, #8
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	4a05      	ldr	r2, [pc, #20]	; (8012e20 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	601a      	str	r2, [r3, #0]
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7ff f915 	bl	8012040 <_ZN8touchgfx10TransitionD1Ev>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3708      	adds	r7, #8
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}
 8012e20:	0802a630 	.word	0x0802a630

08012e24 <_ZN8touchgfx12NoTransitionD0Ev>:
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f7ff ffe7 	bl	8012e00 <_ZN8touchgfx12NoTransitionD1Ev>
 8012e32:	210c      	movs	r1, #12
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f015 fbf8 	bl	802862a <_ZdlPvj>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	3708      	adds	r7, #8
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}

08012e44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	4a05      	ldr	r2, [pc, #20]	; (8012e64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	601a      	str	r2, [r3, #0]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7fe ff27 	bl	8011ca8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3708      	adds	r7, #8
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}
 8012e64:	0802a698 	.word	0x0802a698

08012e68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f7ff ffe7 	bl	8012e44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8012e76:	2110      	movs	r1, #16
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f015 fbd6 	bl	802862a <_ZdlPvj>
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	4618      	mov	r0, r3
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8012e90:	4b40      	ldr	r3, [pc, #256]	; (8012f94 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x10c>)
 8012e92:	781b      	ldrb	r3, [r3, #0]
 8012e94:	f083 0301 	eor.w	r3, r3, #1
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d003      	beq.n	8012ea6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	721a      	strb	r2, [r3, #8]
            return;
 8012ea4:	e073      	b.n	8012f8e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7ff f8e9 	bl	8012080 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012eb4:	3301      	adds	r3, #1
 8012eb6:	b2da      	uxtb	r2, r3
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d82f      	bhi.n	8012f2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012ed4:	b298      	uxth	r0, r3
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	f008 fcd6 	bl	801b896 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8012eea:	4603      	mov	r3, r0
 8012eec:	461a      	mov	r2, r3
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	f003 0301 	and.w	r3, r3, #1
 8012f00:	b29b      	uxth	r3, r3
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d01b      	beq.n	8012f3e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8012f0c:	b29b      	uxth	r3, r3
 8012f0e:	687a      	ldr	r2, [r7, #4]
 8012f10:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 8012f14:	2a00      	cmp	r2, #0
 8012f16:	dd01      	ble.n	8012f1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8012f18:	2201      	movs	r2, #1
 8012f1a:	e001      	b.n	8012f20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8012f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f20:	4413      	add	r3, r2
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	b21a      	sxth	r2, r3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8012f2c:	e007      	b.n	8012f3e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2201      	movs	r2, #1
 8012f32:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2200      	movs	r2, #0
 8012f38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 8012f3c:	e027      	b.n	8012f8e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getX();
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	330c      	adds	r3, #12
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7fe ff1c 	bl	8011d80 <_ZNK8touchgfx8Drawable4getXEv>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8012f52:	b29a      	uxth	r2, r3
 8012f54:	b28b      	uxth	r3, r1
 8012f56:	1ad3      	subs	r3, r2, r3
 8012f58:	b29b      	uxth	r3, r3
 8012f5a:	b21a      	sxth	r2, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	f103 000c 	add.w	r0, r3, #12
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8012f6e:	2200      	movs	r2, #0
 8012f70:	4619      	mov	r1, r3
 8012f72:	f007 ff7d 	bl	801ae70 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8012f76:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6858      	ldr	r0, [r3, #4]
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	685b      	ldr	r3, [r3, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	3374      	adds	r3, #116	; 0x74
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	687a      	ldr	r2, [r7, #4]
 8012f88:	323c      	adds	r2, #60	; 0x3c
 8012f8a:	4611      	mov	r1, r2
 8012f8c:	4798      	blx	r3
    }
 8012f8e:	3708      	adds	r7, #8
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	200057df 	.word	0x200057df

08012f98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8012fa0:	4b0b      	ldr	r3, [pc, #44]	; (8012fd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d00e      	beq.n	8012fc6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d00a      	beq.n	8012fc6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	6858      	ldr	r0, [r3, #4]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	3360      	adds	r3, #96	; 0x60
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	687a      	ldr	r2, [r7, #4]
 8012fc0:	320c      	adds	r2, #12
 8012fc2:	4611      	mov	r1, r2
 8012fc4:	4798      	blx	r3
    }
 8012fc6:	bf00      	nop
 8012fc8:	3708      	adds	r7, #8
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	200057df 	.word	0x200057df

08012fd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b088      	sub	sp, #32
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8012fdc:	4b1a      	ldr	r3, [pc, #104]	; (8013048 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d02d      	beq.n	8013040 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7ff f85e 	bl	80120a8 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8012fec:	4a17      	ldr	r2, [pc, #92]	; (801304c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 8012fee:	f107 0318 	add.w	r3, r7, #24
 8012ff2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ff6:	e883 0003 	stmia.w	r3, {r0, r1}
 8012ffa:	f107 0008 	add.w	r0, r7, #8
 8012ffe:	f107 0318 	add.w	r3, r7, #24
 8013002:	cb0c      	ldmia	r3, {r2, r3}
 8013004:	6879      	ldr	r1, [r7, #4]
 8013006:	f7ff fe8f 	bl	8012d28 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	685a      	ldr	r2, [r3, #4]
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	3374      	adds	r3, #116	; 0x74
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	f107 0108 	add.w	r1, r7, #8
 801301c:	4610      	mov	r0, r2
 801301e:	4798      	blx	r3
            screenContainer->add(snapshot);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6858      	ldr	r0, [r3, #4]
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	685b      	ldr	r3, [r3, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	335c      	adds	r3, #92	; 0x5c
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	687a      	ldr	r2, [r7, #4]
 8013030:	320c      	adds	r2, #12
 8013032:	4611      	mov	r1, r2
 8013034:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8013036:	f107 0308 	add.w	r3, r7, #8
 801303a:	4618      	mov	r0, r3
 801303c:	f7ff fd90 	bl	8012b60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8013040:	bf00      	nop
 8013042:	3720      	adds	r7, #32
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}
 8013048:	200057df 	.word	0x200057df
 801304c:	08029d60 	.word	0x08029d60

08013050 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	6039      	str	r1, [r7, #0]
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	3350      	adds	r3, #80	; 0x50
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	4a05      	ldr	r2, [pc, #20]	; (8013078 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x28>)
 8013064:	8812      	ldrh	r2, [r2, #0]
 8013066:	b211      	sxth	r1, r2
 8013068:	2200      	movs	r2, #0
 801306a:	6838      	ldr	r0, [r7, #0]
 801306c:	4798      	blx	r3
            break;
 801306e:	bf00      	nop
    }
 8013070:	bf00      	nop
 8013072:	3708      	adds	r7, #8
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}
 8013078:	200057d4 	.word	0x200057d4

0801307c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	685b      	ldr	r3, [r3, #4]
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	68d2      	ldr	r2, [r2, #12]
 801308e:	1052      	asrs	r2, r2, #1
 8013090:	1898      	adds	r0, r3, r2
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	68db      	ldr	r3, [r3, #12]
 8013096:	f003 0301 	and.w	r3, r3, #1
 801309a:	2b00      	cmp	r3, #0
 801309c:	d102      	bne.n	80130a4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	689b      	ldr	r3, [r3, #8]
 80130a2:	e00a      	b.n	80130ba <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	687a      	ldr	r2, [r7, #4]
 80130aa:	68d2      	ldr	r2, [r2, #12]
 80130ac:	1052      	asrs	r2, r2, #1
 80130ae:	4413      	add	r3, r2
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	6892      	ldr	r2, [r2, #8]
 80130b6:	4413      	add	r3, r2
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	6839      	ldr	r1, [r7, #0]
 80130bc:	4798      	blx	r3
    }
 80130be:	bf00      	nop
 80130c0:	3708      	adds	r7, #8
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}

080130c6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 80130c6:	b480      	push	{r7}
 80130c8:	b083      	sub	sp, #12
 80130ca:	af00      	add	r7, sp, #0
 80130cc:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d010      	beq.n	80130f8 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	689b      	ldr	r3, [r3, #8]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d107      	bne.n	80130ee <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	f003 0301 	and.w	r3, r3, #1
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d101      	bne.n	80130ee <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80130ea:	2301      	movs	r3, #1
 80130ec:	e000      	b.n	80130f0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 80130ee:	2300      	movs	r3, #0
 80130f0:	2b01      	cmp	r3, #1
 80130f2:	d001      	beq.n	80130f8 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80130f4:	2301      	movs	r3, #1
 80130f6:	e000      	b.n	80130fa <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 80130f8:	2300      	movs	r3, #0
    }
 80130fa:	4618      	mov	r0, r3
 80130fc:	370c      	adds	r7, #12
 80130fe:	46bd      	mov	sp, r7
 8013100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013104:	4770      	bx	lr

08013106 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8013106:	b580      	push	{r7, lr}
 8013108:	b082      	sub	sp, #8
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	687a      	ldr	r2, [r7, #4]
 8013114:	68d2      	ldr	r2, [r2, #12]
 8013116:	1052      	asrs	r2, r2, #1
 8013118:	1899      	adds	r1, r3, r2
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	68db      	ldr	r3, [r3, #12]
 801311e:	f003 0301 	and.w	r3, r3, #1
 8013122:	2b00      	cmp	r3, #0
 8013124:	d102      	bne.n	801312c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	689b      	ldr	r3, [r3, #8]
 801312a:	e00a      	b.n	8013142 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	687a      	ldr	r2, [r7, #4]
 8013132:	68d2      	ldr	r2, [r2, #12]
 8013134:	1052      	asrs	r2, r2, #1
 8013136:	4413      	add	r3, r2
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	687a      	ldr	r2, [r7, #4]
 801313c:	6892      	ldr	r2, [r2, #8]
 801313e:	4413      	add	r3, r2
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	4608      	mov	r0, r1
 8013144:	4798      	blx	r3
    }
 8013146:	bf00      	nop
 8013148:	3708      	adds	r7, #8
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}

0801314e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801314e:	b480      	push	{r7}
 8013150:	b083      	sub	sp, #12
 8013152:	af00      	add	r7, sp, #0
 8013154:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	685b      	ldr	r3, [r3, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d010      	beq.n	8013180 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	689b      	ldr	r3, [r3, #8]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d107      	bne.n	8013176 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	f003 0301 	and.w	r3, r3, #1
 801316e:	2b00      	cmp	r3, #0
 8013170:	d101      	bne.n	8013176 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8013172:	2301      	movs	r3, #1
 8013174:	e000      	b.n	8013178 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8013176:	2300      	movs	r3, #0
 8013178:	2b01      	cmp	r3, #1
 801317a:	d001      	beq.n	8013180 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801317c:	2301      	movs	r3, #1
 801317e:	e000      	b.n	8013182 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8013180:	2300      	movs	r3, #0
    }
 8013182:	4618      	mov	r0, r3
 8013184:	370c      	adds	r7, #12
 8013186:	46bd      	mov	sp, r7
 8013188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318c:	4770      	bx	lr

0801318e <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 801318e:	b480      	push	{r7}
 8013190:	b083      	sub	sp, #12
 8013192:	af00      	add	r7, sp, #0
 8013194:	6078      	str	r0, [r7, #4]
 8013196:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	683a      	ldr	r2, [r7, #0]
 801319c:	601a      	str	r2, [r3, #0]
    }
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	4618      	mov	r0, r3
 80131a2:	370c      	adds	r7, #12
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr

080131ac <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80131ac:	b480      	push	{r7}
 80131ae:	b083      	sub	sp, #12
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2200      	movs	r2, #0
 80131b8:	801a      	strh	r2, [r3, #0]
        y = 0;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	805a      	strh	r2, [r3, #2]
        width = 0;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2200      	movs	r2, #0
 80131c4:	809a      	strh	r2, [r3, #4]
        height = 0;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2200      	movs	r2, #0
 80131ca:	80da      	strh	r2, [r3, #6]
    }
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	4618      	mov	r0, r3
 80131d0:	370c      	adds	r7, #12
 80131d2:	46bd      	mov	sp, r7
 80131d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d8:	4770      	bx	lr

080131da <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80131da:	b480      	push	{r7}
 80131dc:	b085      	sub	sp, #20
 80131de:	af00      	add	r7, sp, #0
 80131e0:	60f8      	str	r0, [r7, #12]
 80131e2:	4608      	mov	r0, r1
 80131e4:	4611      	mov	r1, r2
 80131e6:	461a      	mov	r2, r3
 80131e8:	4603      	mov	r3, r0
 80131ea:	817b      	strh	r3, [r7, #10]
 80131ec:	460b      	mov	r3, r1
 80131ee:	813b      	strh	r3, [r7, #8]
 80131f0:	4613      	mov	r3, r2
 80131f2:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	897a      	ldrh	r2, [r7, #10]
 80131f8:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	893a      	ldrh	r2, [r7, #8]
 80131fe:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	88fa      	ldrh	r2, [r7, #6]
 8013204:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	8b3a      	ldrh	r2, [r7, #24]
 801320a:	80da      	strh	r2, [r3, #6]
    }
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	4618      	mov	r0, r3
 8013210:	3714      	adds	r7, #20
 8013212:	46bd      	mov	sp, r7
 8013214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013218:	4770      	bx	lr

0801321a <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 801321a:	b480      	push	{r7}
 801321c:	b083      	sub	sp, #12
 801321e:	af00      	add	r7, sp, #0
 8013220:	6078      	str	r0, [r7, #4]
 8013222:	460b      	mov	r3, r1
 8013224:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	887a      	ldrh	r2, [r7, #2]
 801322a:	801a      	strh	r2, [r3, #0]
    {
    }
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	4618      	mov	r0, r3
 8013230:	370c      	adds	r7, #12
 8013232:	46bd      	mov	sp, r7
 8013234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013238:	4770      	bx	lr
	...

0801323c <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 801323c:	b580      	push	{r7, lr}
 801323e:	b084      	sub	sp, #16
 8013240:	af02      	add	r7, sp, #8
 8013242:	6078      	str	r0, [r7, #4]
          visible(true)
 8013244:	4a13      	ldr	r2, [pc, #76]	; (8013294 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	601a      	str	r2, [r3, #0]
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	1d18      	adds	r0, r3, #4
 801324e:	2300      	movs	r3, #0
 8013250:	9300      	str	r3, [sp, #0]
 8013252:	2300      	movs	r3, #0
 8013254:	2200      	movs	r2, #0
 8013256:	2100      	movs	r1, #0
 8013258:	f7ff ffbf 	bl	80131da <_ZN8touchgfx4RectC1Essss>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	330c      	adds	r3, #12
 8013260:	4618      	mov	r0, r3
 8013262:	f7ff ffa3 	bl	80131ac <_ZN8touchgfx4RectC1Ev>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2200      	movs	r2, #0
 801326a:	615a      	str	r2, [r3, #20]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2200      	movs	r2, #0
 8013270:	619a      	str	r2, [r3, #24]
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	2200      	movs	r2, #0
 8013276:	61da      	str	r2, [r3, #28]
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2200      	movs	r2, #0
 801327c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2201      	movs	r2, #1
 8013284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	4618      	mov	r0, r3
 801328c:	3708      	adds	r7, #8
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	0802c254 	.word	0x0802c254

08013298 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8013298:	b580      	push	{r7, lr}
 801329a:	b082      	sub	sp, #8
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
    {
 80132a0:	4a06      	ldr	r2, [pc, #24]	; (80132bc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	601a      	str	r2, [r3, #0]
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	3304      	adds	r3, #4
 80132aa:	4618      	mov	r0, r3
 80132ac:	f000 fa8e 	bl	80137cc <_ZN8touchgfx9ContainerD1Ev>
    }
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	4618      	mov	r0, r3
 80132b4:	3708      	adds	r7, #8
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	0802c348 	.word	0x0802c348

080132c0 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
    }
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f7ff ffe5 	bl	8013298 <_ZN8touchgfx6ScreenD1Ev>
 80132ce:	213c      	movs	r1, #60	; 0x3c
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f015 f9aa 	bl	802862a <_ZdlPvj>
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	4618      	mov	r0, r3
 80132da:	3708      	adds	r7, #8
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}

080132e0 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80132e0:	b480      	push	{r7}
 80132e2:	b083      	sub	sp, #12
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
    {
    }
 80132e8:	bf00      	nop
 80132ea:	370c      	adds	r7, #12
 80132ec:	46bd      	mov	sp, r7
 80132ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f2:	4770      	bx	lr

080132f4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80132f4:	b480      	push	{r7}
 80132f6:	b083      	sub	sp, #12
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
    {
    }
 80132fc:	bf00      	nop
 80132fe:	370c      	adds	r7, #12
 8013300:	46bd      	mov	sp, r7
 8013302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013306:	4770      	bx	lr

08013308 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8013308:	b480      	push	{r7}
 801330a:	b083      	sub	sp, #12
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
    {
    }
 8013310:	bf00      	nop
 8013312:	370c      	adds	r7, #12
 8013314:	46bd      	mov	sp, r7
 8013316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331a:	4770      	bx	lr

0801331c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 801331c:	b480      	push	{r7}
 801331e:	b083      	sub	sp, #12
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
    {
    }
 8013324:	bf00      	nop
 8013326:	370c      	adds	r7, #12
 8013328:	46bd      	mov	sp, r7
 801332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332e:	4770      	bx	lr

08013330 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8013330:	b480      	push	{r7}
 8013332:	b083      	sub	sp, #12
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	460b      	mov	r3, r1
 801333a:	70fb      	strb	r3, [r7, #3]
    {
    }
 801333c:	bf00      	nop
 801333e:	370c      	adds	r7, #12
 8013340:	46bd      	mov	sp, r7
 8013342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013346:	4770      	bx	lr

08013348 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	3304      	adds	r3, #4
 8013356:	6839      	ldr	r1, [r7, #0]
 8013358:	4618      	mov	r0, r3
 801335a:	f003 fb3d 	bl	80169d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801335e:	bf00      	nop
 8013360:	3708      	adds	r7, #8
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
	...

08013368 <_ZN8touchgfx6WidgetC1Ev>:
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	4618      	mov	r0, r3
 8013374:	f7ff ff62 	bl	801323c <_ZN8touchgfx8DrawableC1Ev>
 8013378:	4a03      	ldr	r2, [pc, #12]	; (8013388 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	601a      	str	r2, [r3, #0]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	4618      	mov	r0, r3
 8013382:	3708      	adds	r7, #8
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}
 8013388:	0802a5cc 	.word	0x0802a5cc

0801338c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	4618      	mov	r0, r3
 8013398:	2326      	movs	r3, #38	; 0x26
 801339a:	461a      	mov	r2, r3
 801339c:	2100      	movs	r1, #0
 801339e:	f015 faf9 	bl	8028994 <memset>
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ff ffdf 	bl	8013368 <_ZN8touchgfx6WidgetC1Ev>
 80133aa:	4a09      	ldr	r2, [pc, #36]	; (80133d0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	601a      	str	r2, [r3, #0]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	22ff      	movs	r2, #255	; 0xff
 80133b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	3328      	adds	r3, #40	; 0x28
 80133bc:	2100      	movs	r1, #0
 80133be:	4618      	mov	r0, r3
 80133c0:	f7ff fee5 	bl	801318e <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	4618      	mov	r0, r3
 80133c8:	3708      	adds	r7, #8
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	0802be28 	.word	0x0802be28

080133d4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 80133d4:	b480      	push	{r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	683a      	ldr	r2, [r7, #0]
 80133e2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80133e4:	bf00      	nop
 80133e6:	370c      	adds	r7, #12
 80133e8:	46bd      	mov	sp, r7
 80133ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ee:	4770      	bx	lr

080133f0 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	460b      	mov	r3, r1
 80133fa:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80133fc:	4a06      	ldr	r2, [pc, #24]	; (8013418 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	601a      	str	r2, [r3, #0]
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	887a      	ldrh	r2, [r7, #2]
 8013406:	809a      	strh	r2, [r3, #4]
    }
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	4618      	mov	r0, r3
 801340c:	370c      	adds	r7, #12
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop
 8013418:	0802a500 	.word	0x0802a500

0801341c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	4618      	mov	r0, r3
 8013428:	2326      	movs	r3, #38	; 0x26
 801342a:	461a      	mov	r2, r3
 801342c:	2100      	movs	r1, #0
 801342e:	f015 fab1 	bl	8028994 <memset>
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	4618      	mov	r0, r3
 8013436:	f7ff ff97 	bl	8013368 <_ZN8touchgfx6WidgetC1Ev>
 801343a:	4a14      	ldr	r2, [pc, #80]	; (801348c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	601a      	str	r2, [r3, #0]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	3328      	adds	r3, #40	; 0x28
 8013444:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff ffd1 	bl	80133f0 <_ZN8touchgfx9TypedTextC1Et>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	3330      	adds	r3, #48	; 0x30
 8013452:	2100      	movs	r1, #0
 8013454:	4618      	mov	r0, r3
 8013456:	f7ff fe9a 	bl	801318e <_ZN8touchgfx9colortypeC1Em>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2200      	movs	r2, #0
 801345e:	869a      	strh	r2, [r3, #52]	; 0x34
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	22ff      	movs	r2, #255	; 0xff
 8013464:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	2200      	movs	r2, #0
 801346c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2200      	movs	r2, #0
 8013474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2200      	movs	r2, #0
 801347c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	4618      	mov	r0, r3
 8013484:	3708      	adds	r7, #8
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
 801348a:	bf00      	nop
 801348c:	0802bd80 	.word	0x0802bd80

08013490 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8013490:	b580      	push	{r7, lr}
 8013492:	b082      	sub	sp, #8
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
 8013498:	4a05      	ldr	r2, [pc, #20]	; (80134b0 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	601a      	str	r2, [r3, #0]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7fe ff41 	bl	8012328 <_ZN8touchgfx6WidgetD1Ev>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	4618      	mov	r0, r3
 80134aa:	3708      	adds	r7, #8
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}
 80134b0:	0802bfb0 	.word	0x0802bfb0

080134b4 <_ZN8touchgfx5ImageD0Ev>:
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f7ff ffe7 	bl	8013490 <_ZN8touchgfx5ImageD1Ev>
 80134c2:	212c      	movs	r1, #44	; 0x2c
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	f015 f8b0 	bl	802862a <_ZdlPvj>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	4618      	mov	r0, r3
 80134ce:	3708      	adds	r7, #8
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b082      	sub	sp, #8
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	4a05      	ldr	r2, [pc, #20]	; (80134f4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	601a      	str	r2, [r3, #0]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7ff fed7 	bl	8013298 <_ZN8touchgfx6ScreenD1Ev>
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	4618      	mov	r0, r3
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	0802a790 	.word	0x0802a790

080134f8 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f7ff ffe7 	bl	80134d4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8013506:	2140      	movs	r1, #64	; 0x40
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f015 f88e 	bl	802862a <_ZdlPvj>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	4618      	mov	r0, r3
 8013512:	3708      	adds	r7, #8
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}

08013518 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8013518:	b580      	push	{r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	4a0d      	ldr	r2, [pc, #52]	; (8013558 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	601a      	str	r2, [r3, #0]
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	33a8      	adds	r3, #168	; 0xa8
 801352a:	4618      	mov	r0, r3
 801352c:	f000 fa2a 	bl	8013984 <_ZN8touchgfx13ImageProgressD1Ev>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	336c      	adds	r3, #108	; 0x6c
 8013534:	4618      	mov	r0, r3
 8013536:	f000 f98d 	bl	8013854 <_ZN8touchgfx8TextAreaD1Ev>
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	3340      	adds	r3, #64	; 0x40
 801353e:	4618      	mov	r0, r3
 8013540:	f000 f966 	bl	8013810 <_ZN8touchgfx3BoxD1Ev>
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	4618      	mov	r0, r3
 8013548:	f7ff ffc4 	bl	80134d4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	4618      	mov	r0, r3
 8013550:	3708      	adds	r7, #8
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
 8013556:	bf00      	nop
 8013558:	0802a758 	.word	0x0802a758

0801355c <_ZN15Screen1ViewBaseD0Ev>:
 801355c:	b580      	push	{r7, lr}
 801355e:	b082      	sub	sp, #8
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f7ff ffd7 	bl	8013518 <_ZN15Screen1ViewBaseD1Ev>
 801356a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f015 f85b 	bl	802862a <_ZdlPvj>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	4618      	mov	r0, r3
 8013578:	3708      	adds	r7, #8
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}

0801357e <_ZN15Screen1ViewBase19syringePumpProgressEv>:
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void syringePumpProgress()
 801357e:	b480      	push	{r7}
 8013580:	b083      	sub	sp, #12
 8013582:	af00      	add	r7, sp, #0
 8013584:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8013586:	bf00      	nop
 8013588:	370c      	adds	r7, #12
 801358a:	46bd      	mov	sp, r7
 801358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013590:	4770      	bx	lr
	...

08013594 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8013594:	b590      	push	{r4, r7, lr}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	4603      	mov	r3, r0
 801359c:	71fb      	strb	r3, [r7, #7]
 801359e:	460b      	mov	r3, r1
 80135a0:	71bb      	strb	r3, [r7, #6]
 80135a2:	4613      	mov	r3, r2
 80135a4:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 80135a6:	f7fe fd0d 	bl	8011fc4 <_ZN8touchgfx3HAL11getInstanceEv>
 80135aa:	4603      	mov	r3, r0
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d105      	bne.n	80135bc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 80135b0:	4b0a      	ldr	r3, [pc, #40]	; (80135dc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 80135b2:	4a0b      	ldr	r2, [pc, #44]	; (80135e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 80135b4:	2135      	movs	r1, #53	; 0x35
 80135b6:	480b      	ldr	r0, [pc, #44]	; (80135e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 80135b8:	f015 f866 	bl	8028688 <__assert_func>
 80135bc:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 80135be:	f7fe fd0d 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 80135c2:	6803      	ldr	r3, [r0, #0]
 80135c4:	3328      	adds	r3, #40	; 0x28
 80135c6:	681c      	ldr	r4, [r3, #0]
 80135c8:	797b      	ldrb	r3, [r7, #5]
 80135ca:	79ba      	ldrb	r2, [r7, #6]
 80135cc:	79f9      	ldrb	r1, [r7, #7]
 80135ce:	47a0      	blx	r4
 80135d0:	4603      	mov	r3, r0
    }
 80135d2:	4618      	mov	r0, r3
 80135d4:	370c      	adds	r7, #12
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd90      	pop	{r4, r7, pc}
 80135da:	bf00      	nop
 80135dc:	08029d68 	.word	0x08029d68
 80135e0:	08029dac 	.word	0x08029dac
 80135e4:	08029e08 	.word	0x08029e08

080135e8 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

Screen1ViewBase::Screen1ViewBase()
 80135e8:	b590      	push	{r4, r7, lr}
 80135ea:	b08d      	sub	sp, #52	; 0x34
 80135ec:	af02      	add	r7, sp, #8
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	4618      	mov	r0, r3
 80135f4:	f000 f8d4 	bl	80137a0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 80135f8:	4a5c      	ldr	r2, [pc, #368]	; (801376c <_ZN15Screen1ViewBaseC1Ev+0x184>)
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	601a      	str	r2, [r3, #0]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	3340      	adds	r3, #64	; 0x40
 8013602:	4618      	mov	r0, r3
 8013604:	f7ff fec2 	bl	801338c <_ZN8touchgfx3BoxC1Ev>
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	336c      	adds	r3, #108	; 0x6c
 801360c:	4618      	mov	r0, r3
 801360e:	f7ff ff05 	bl	801341c <_ZN8touchgfx8TextAreaC1Ev>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	33a8      	adds	r3, #168	; 0xa8
 8013616:	4618      	mov	r0, r3
 8013618:	f002 ff06 	bl	8016428 <_ZN8touchgfx13ImageProgressC1Ev>
{

    __background.setPosition(0, 0, 480, 272);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013622:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013626:	9300      	str	r3, [sp, #0]
 8013628:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801362c:	2200      	movs	r2, #0
 801362e:	2100      	movs	r1, #0
 8013630:	f7fe fb85 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801363a:	2200      	movs	r2, #0
 801363c:	2100      	movs	r1, #0
 801363e:	2000      	movs	r0, #0
 8013640:	f7ff ffa8 	bl	8013594 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013644:	4603      	mov	r3, r0
 8013646:	4619      	mov	r1, r3
 8013648:	4620      	mov	r0, r4
 801364a:	f7ff fec3 	bl	80133d4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(227, 124);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	336c      	adds	r3, #108	; 0x6c
 8013652:	227c      	movs	r2, #124	; 0x7c
 8013654:	21e3      	movs	r1, #227	; 0xe3
 8013656:	4618      	mov	r0, r3
 8013658:	f7fe fbbd 	bl	8011dd6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(240, 18, 18));
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013662:	2212      	movs	r2, #18
 8013664:	2112      	movs	r1, #18
 8013666:	20f0      	movs	r0, #240	; 0xf0
 8013668:	f7ff ff94 	bl	8013594 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801366c:	4603      	mov	r3, r0
 801366e:	61fc      	str	r4, [r7, #28]
 8013670:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	68fa      	ldr	r2, [r7, #12]
 8013676:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013678:	bf00      	nop
    textArea1.setLinespacing(0);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	336c      	adds	r3, #108	; 0x6c
 801367e:	627b      	str	r3, [r7, #36]	; 0x24
 8013680:	2300      	movs	r3, #0
 8013682:	847b      	strh	r3, [r7, #34]	; 0x22
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8013684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013686:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013688:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801368a:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013692:	f107 0310 	add.w	r3, r7, #16
 8013696:	2100      	movs	r1, #0
 8013698:	4618      	mov	r0, r3
 801369a:	f7ff fea9 	bl	80133f0 <_ZN8touchgfx9TypedTextC1Et>
 801369e:	f107 0310 	add.w	r3, r7, #16
 80136a2:	4619      	mov	r1, r3
 80136a4:	4620      	mov	r0, r4
 80136a6:	f004 fc66 	bl	8017f76 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80136aa:	f107 0310 	add.w	r3, r7, #16
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7fe f8b0 	bl	8011814 <_ZN8touchgfx9TypedTextD1Ev>

    imageProgress1.setXY(148, 79);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	33a8      	adds	r3, #168	; 0xa8
 80136b8:	224f      	movs	r2, #79	; 0x4f
 80136ba:	2194      	movs	r1, #148	; 0x94
 80136bc:	4618      	mov	r0, r3
 80136be:	f7fe fb8a 	bl	8011dd6 <_ZN8touchgfx8Drawable5setXYEss>
    imageProgress1.setProgressIndicatorPosition(2, 2, 180, 16);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 80136c8:	2310      	movs	r3, #16
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	23b4      	movs	r3, #180	; 0xb4
 80136ce:	2202      	movs	r2, #2
 80136d0:	2102      	movs	r1, #2
 80136d2:	f002 fd57 	bl	8016184 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    imageProgress1.setRange(0, 100);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 80136dc:	2300      	movs	r3, #0
 80136de:	9300      	str	r3, [sp, #0]
 80136e0:	2300      	movs	r3, #0
 80136e2:	2264      	movs	r2, #100	; 0x64
 80136e4:	2100      	movs	r1, #0
 80136e6:	f002 ffd3 	bl	8016690 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    imageProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	33a8      	adds	r3, #168	; 0xa8
 80136ee:	2100      	movs	r1, #0
 80136f0:	4618      	mov	r0, r3
 80136f2:	f002 fce6 	bl	80160c2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    imageProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80136fc:	f107 0318 	add.w	r3, r7, #24
 8013700:	2102      	movs	r1, #2
 8013702:	4618      	mov	r0, r3
 8013704:	f7ff fd89 	bl	801321a <_ZN8touchgfx6BitmapC1Et>
 8013708:	f107 0318 	add.w	r3, r7, #24
 801370c:	4619      	mov	r1, r3
 801370e:	4620      	mov	r0, r4
 8013710:	f003 f866 	bl	80167e0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    imageProgress1.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_PROGRESS_INDICATOR_FILL_STRIPED_NORMAL_HORIZONTAL_ID);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	33a8      	adds	r3, #168	; 0xa8
 8013718:	2103      	movs	r1, #3
 801371a:	4618      	mov	r0, r3
 801371c:	f002 fd11 	bl	8016142 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    imageProgress1.setValue(60);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	33a8      	adds	r3, #168	; 0xa8
 8013724:	213c      	movs	r1, #60	; 0x3c
 8013726:	4618      	mov	r0, r3
 8013728:	f002 fd44 	bl	80161b4 <_ZN8touchgfx13ImageProgress8setValueEi>
    imageProgress1.setAnchorAtZero(false);
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	33a8      	adds	r3, #168	; 0xa8
 8013730:	2100      	movs	r1, #0
 8013732:	4618      	mov	r0, r3
 8013734:	f002 fcec 	bl	8016110 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    add(__background);
 8013738:	687a      	ldr	r2, [r7, #4]
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	3340      	adds	r3, #64	; 0x40
 801373e:	4619      	mov	r1, r3
 8013740:	4610      	mov	r0, r2
 8013742:	f7ff fe01 	bl	8013348 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	336c      	adds	r3, #108	; 0x6c
 801374c:	4619      	mov	r1, r3
 801374e:	4610      	mov	r0, r2
 8013750:	f7ff fdfa 	bl	8013348 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageProgress1);
 8013754:	687a      	ldr	r2, [r7, #4]
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	33a8      	adds	r3, #168	; 0xa8
 801375a:	4619      	mov	r1, r3
 801375c:	4610      	mov	r0, r2
 801375e:	f7ff fdf3 	bl	8013348 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	4618      	mov	r0, r3
 8013766:	372c      	adds	r7, #44	; 0x2c
 8013768:	46bd      	mov	sp, r7
 801376a:	bd90      	pop	{r4, r7, pc}
 801376c:	0802a758 	.word	0x0802a758

08013770 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8013770:	b480      	push	{r7}
 8013772:	b083      	sub	sp, #12
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]

}
 8013778:	bf00      	nop
 801377a:	370c      	adds	r7, #12
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr

08013784 <_ZN15Screen1ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen1ViewBase::afterTransition()
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b082      	sub	sp, #8
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
    //Interaction1
    //When screen transition ends call virtual function
    //Call syringePumpProgress
    syringePumpProgress();
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	332c      	adds	r3, #44	; 0x2c
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	4798      	blx	r3
}
 8013798:	bf00      	nop
 801379a:	3708      	adds	r7, #8
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b082      	sub	sp, #8
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	4618      	mov	r0, r3
 80137ac:	f007 fef2 	bl	801b594 <_ZN8touchgfx6ScreenC1Ev>
 80137b0:	4a05      	ldr	r2, [pc, #20]	; (80137c8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	601a      	str	r2, [r3, #0]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2200      	movs	r2, #0
 80137ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	4618      	mov	r0, r3
 80137c0:	3708      	adds	r7, #8
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}
 80137c6:	bf00      	nop
 80137c8:	0802a790 	.word	0x0802a790

080137cc <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	4a05      	ldr	r2, [pc, #20]	; (80137ec <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	601a      	str	r2, [r3, #0]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	4618      	mov	r0, r3
 80137de:	f7fe fa83 	bl	8011ce8 <_ZN8touchgfx8DrawableD1Ev>
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	4618      	mov	r0, r3
 80137e6:	3708      	adds	r7, #8
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}
 80137ec:	0802b3d4 	.word	0x0802b3d4

080137f0 <_ZN8touchgfx9ContainerD0Ev>:
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b082      	sub	sp, #8
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f7ff ffe7 	bl	80137cc <_ZN8touchgfx9ContainerD1Ev>
 80137fe:	212c      	movs	r1, #44	; 0x2c
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f014 ff12 	bl	802862a <_ZdlPvj>
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	4618      	mov	r0, r3
 801380a:	3708      	adds	r7, #8
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}

08013810 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	4a05      	ldr	r2, [pc, #20]	; (8013830 <_ZN8touchgfx3BoxD1Ev+0x20>)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	601a      	str	r2, [r3, #0]
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	4618      	mov	r0, r3
 8013822:	f7fe fd81 	bl	8012328 <_ZN8touchgfx6WidgetD1Ev>
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	4618      	mov	r0, r3
 801382a:	3708      	adds	r7, #8
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}
 8013830:	0802be28 	.word	0x0802be28

08013834 <_ZN8touchgfx3BoxD0Ev>:
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f7ff ffe7 	bl	8013810 <_ZN8touchgfx3BoxD1Ev>
 8013842:	212c      	movs	r1, #44	; 0x2c
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f014 fef0 	bl	802862a <_ZdlPvj>
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	4618      	mov	r0, r3
 801384e:	3708      	adds	r7, #8
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}

08013854 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	4a08      	ldr	r2, [pc, #32]	; (8013880 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	601a      	str	r2, [r3, #0]
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	3328      	adds	r3, #40	; 0x28
 8013866:	4618      	mov	r0, r3
 8013868:	f7fd ffd4 	bl	8011814 <_ZN8touchgfx9TypedTextD1Ev>
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	4618      	mov	r0, r3
 8013870:	f7fe fd5a 	bl	8012328 <_ZN8touchgfx6WidgetD1Ev>
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	4618      	mov	r0, r3
 8013878:	3708      	adds	r7, #8
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
 801387e:	bf00      	nop
 8013880:	0802bd80 	.word	0x0802bd80

08013884 <_ZN8touchgfx8TextAreaD0Ev>:
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f7ff ffe1 	bl	8013854 <_ZN8touchgfx8TextAreaD1Ev>
 8013892:	213c      	movs	r1, #60	; 0x3c
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f014 fec8 	bl	802862a <_ZdlPvj>
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	4618      	mov	r0, r3
 801389e:	3708      	adds	r7, #8
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}

080138a4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	4a0a      	ldr	r2, [pc, #40]	; (80138d8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	601a      	str	r2, [r3, #0]
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	3358      	adds	r3, #88	; 0x58
 80138b6:	4618      	mov	r0, r3
 80138b8:	f7ff ff88 	bl	80137cc <_ZN8touchgfx9ContainerD1Ev>
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	332c      	adds	r3, #44	; 0x2c
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7ff fde5 	bl	8013490 <_ZN8touchgfx5ImageD1Ev>
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7ff ff7f 	bl	80137cc <_ZN8touchgfx9ContainerD1Ev>
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	4618      	mov	r0, r3
 80138d2:	3708      	adds	r7, #8
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}
 80138d8:	0802b1e0 	.word	0x0802b1e0

080138dc <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80138dc:	b580      	push	{r7, lr}
 80138de:	b082      	sub	sp, #8
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f7ff ffdd 	bl	80138a4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80138ea:	21b0      	movs	r1, #176	; 0xb0
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f014 fe9c 	bl	802862a <_ZdlPvj>
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	4618      	mov	r0, r3
 80138f6:	3708      	adds	r7, #8
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}

080138fc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
{
/**
 * An abstract class for progress indicators that need a horizontal or vertical direction to be
 * specified.
 */
class AbstractDirectionProgress : public AbstractProgressIndicator
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	4a05      	ldr	r2, [pc, #20]	; (801391c <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x20>)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	601a      	str	r2, [r3, #0]
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	4618      	mov	r0, r3
 801390e:	f7ff ffc9 	bl	80138a4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	4618      	mov	r0, r3
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	0802af04 	.word	0x0802af04

08013920 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8013920:	b580      	push	{r7, lr}
 8013922:	b082      	sub	sp, #8
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f7ff ffe7 	bl	80138fc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801392e:	21b4      	movs	r1, #180	; 0xb4
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f014 fe7a 	bl	802862a <_ZdlPvj>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	4618      	mov	r0, r3
 801393a:	3708      	adds	r7, #8
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}

08013940 <_ZN8touchgfx10TiledImageD1Ev>:
 * Simple widget capable of showing a bitmap tiled indefinitely horizontally and vertically.
 * This means that when the TiledImage Widget is larger than the provided Bitmap, the
 * Bitmap is repeated over and over horizontally and vertically. The bitmap can be alpha-
 * blended with the background and have areas of transparency.
 */
class TiledImage : public Image
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	4a05      	ldr	r2, [pc, #20]	; (8013960 <_ZN8touchgfx10TiledImageD1Ev+0x20>)
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	601a      	str	r2, [r3, #0]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	4618      	mov	r0, r3
 8013952:	f7ff fd9d 	bl	8013490 <_ZN8touchgfx5ImageD1Ev>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	4618      	mov	r0, r3
 801395a:	3708      	adds	r7, #8
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}
 8013960:	0802be8c 	.word	0x0802be8c

08013964 <_ZN8touchgfx10TiledImageD0Ev>:
 8013964:	b580      	push	{r7, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	6878      	ldr	r0, [r7, #4]
 801396e:	f7ff ffe7 	bl	8013940 <_ZN8touchgfx10TiledImageD1Ev>
 8013972:	2130      	movs	r1, #48	; 0x30
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f014 fe58 	bl	802862a <_ZdlPvj>
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	4618      	mov	r0, r3
 801397e:	3708      	adds	r7, #8
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <_ZN8touchgfx13ImageProgressD1Ev>:
 * An image progress will show parts of an image as a progress indicator. The image can progress
 * from the left, the right, the bottom or the top of the given area, and can visually
 * be fixed with a larger and larger portion of the image showing, or it can be moved
 * into view.
 */
class ImageProgress : public AbstractDirectionProgress
 8013984:	b580      	push	{r7, lr}
 8013986:	b082      	sub	sp, #8
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	4a0a      	ldr	r2, [pc, #40]	; (80139b8 <_ZN8touchgfx13ImageProgressD1Ev+0x34>)
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	601a      	str	r2, [r3, #0]
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	33e0      	adds	r3, #224	; 0xe0
 8013996:	4618      	mov	r0, r3
 8013998:	f7ff ffd2 	bl	8013940 <_ZN8touchgfx10TiledImageD1Ev>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	33b4      	adds	r3, #180	; 0xb4
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7ff ff13 	bl	80137cc <_ZN8touchgfx9ContainerD1Ev>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7ff ffa7 	bl	80138fc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4618      	mov	r0, r3
 80139b2:	3708      	adds	r7, #8
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	0802b040 	.word	0x0802b040

080139bc <_ZN8touchgfx13ImageProgressD0Ev>:
 80139bc:	b580      	push	{r7, lr}
 80139be:	b082      	sub	sp, #8
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f7ff ffdd 	bl	8013984 <_ZN8touchgfx13ImageProgressD1Ev>
 80139ca:	f44f 718a 	mov.w	r1, #276	; 0x114
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f014 fe2b 	bl	802862a <_ZdlPvj>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	4618      	mov	r0, r3
 80139d8:	3708      	adds	r7, #8
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}

080139de <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 80139de:	b480      	push	{r7}
 80139e0:	b083      	sub	sp, #12
 80139e2:	af00      	add	r7, sp, #0
 80139e4:	6078      	str	r0, [r7, #4]
 80139e6:	460b      	mov	r3, r1
 80139e8:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	78fa      	ldrb	r2, [r7, #3]
 80139ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80139f2:	bf00      	nop
 80139f4:	370c      	adds	r7, #12
 80139f6:	46bd      	mov	sp, r7
 80139f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fc:	4770      	bx	lr
	...

08013a00 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b082      	sub	sp, #8
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	2326      	movs	r3, #38	; 0x26
 8013a0e:	461a      	mov	r2, r3
 8013a10:	2100      	movs	r1, #0
 8013a12:	f014 ffbf 	bl	8028994 <memset>
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7ff fca5 	bl	8013368 <_ZN8touchgfx6WidgetC1Ev>
 8013a1e:	4a0a      	ldr	r2, [pc, #40]	; (8013a48 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	601a      	str	r2, [r3, #0]
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2200      	movs	r2, #0
 8013a28:	629a      	str	r2, [r3, #40]	; 0x28
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2101      	movs	r1, #1
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7ff ffd1 	bl	80139de <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3708      	adds	r7, #8
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
 8013a46:	bf00      	nop
 8013a48:	0802bbe8 	.word	0x0802bbe8

08013a4c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8013a4c:	b480      	push	{r7}
 8013a4e:	b083      	sub	sp, #12
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
 8013a54:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	683a      	ldr	r2, [r7, #0]
 8013a5a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8013a5c:	bf00      	nop
 8013a5e:	370c      	adds	r7, #12
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr

08013a68 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	4a05      	ldr	r2, [pc, #20]	; (8013a88 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	601a      	str	r2, [r3, #0]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fe fc55 	bl	8012328 <_ZN8touchgfx6WidgetD1Ev>
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	4618      	mov	r0, r3
 8013a82:	3708      	adds	r7, #8
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	0802bbe8 	.word	0x0802bbe8

08013a8c <_ZN8touchgfx14AbstractButtonD0Ev>:
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f7ff ffe7 	bl	8013a68 <_ZN8touchgfx14AbstractButtonD1Ev>
 8013a9a:	2130      	movs	r1, #48	; 0x30
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f014 fdc4 	bl	802862a <_ZdlPvj>
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3708      	adds	r7, #8
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7ff ffa2 	bl	8013a00 <_ZN8touchgfx14AbstractButtonC1Ev>
 8013abc:	4a0c      	ldr	r2, [pc, #48]	; (8013af0 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	601a      	str	r2, [r3, #0]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	332e      	adds	r3, #46	; 0x2e
 8013ac6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013aca:	4618      	mov	r0, r3
 8013acc:	f7ff fba5 	bl	801321a <_ZN8touchgfx6BitmapC1Et>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	3330      	adds	r3, #48	; 0x30
 8013ad4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7ff fb9e 	bl	801321a <_ZN8touchgfx6BitmapC1Et>
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	22ff      	movs	r2, #255	; 0xff
 8013ae2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3708      	adds	r7, #8
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}
 8013af0:	0802bf0c 	.word	0x0802bf0c

08013af4 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	4a05      	ldr	r2, [pc, #20]	; (8013b14 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	601a      	str	r2, [r3, #0]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7ff fbc7 	bl	8013298 <_ZN8touchgfx6ScreenD1Ev>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	3708      	adds	r7, #8
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}
 8013b14:	0802a810 	.word	0x0802a810

08013b18 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b082      	sub	sp, #8
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f7ff ffe7 	bl	8013af4 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8013b26:	2140      	movs	r1, #64	; 0x40
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f014 fd7e 	bl	802862a <_ZdlPvj>
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	4618      	mov	r0, r3
 8013b32:	3708      	adds	r7, #8
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}

08013b38 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b082      	sub	sp, #8
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	4a0d      	ldr	r2, [pc, #52]	; (8013b78 <_ZN14screenViewBaseD1Ev+0x40>)
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	601a      	str	r2, [r3, #0]
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	33a0      	adds	r3, #160	; 0xa0
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f000 f932 	bl	8013db4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	336c      	adds	r3, #108	; 0x6c
 8013b54:	4618      	mov	r0, r3
 8013b56:	f000 f94f 	bl	8013df8 <_ZN8touchgfx6ButtonD1Ev>
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	3340      	adds	r3, #64	; 0x40
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f7ff fe56 	bl	8013810 <_ZN8touchgfx3BoxD1Ev>
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7ff ffc4 	bl	8013af4 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3708      	adds	r7, #8
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}
 8013b76:	bf00      	nop
 8013b78:	0802a7c4 	.word	0x0802a7c4

08013b7c <_ZN14screenViewBaseD0Ev>:
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f7ff ffd7 	bl	8013b38 <_ZN14screenViewBaseD1Ev>
 8013b8a:	21b0      	movs	r1, #176	; 0xb0
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f014 fd4c 	bl	802862a <_ZdlPvj>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	4618      	mov	r0, r3
 8013b96:	3708      	adds	r7, #8
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8013ba4:	f006 f98e 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 8013ba8:	4603      	mov	r3, r0
    }
 8013baa:	4618      	mov	r0, r3
 8013bac:	3708      	adds	r7, #8
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
	...

08013bb4 <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

screenViewBase::screenViewBase() :
 8013bb4:	b590      	push	{r4, r7, lr}
 8013bb6:	b089      	sub	sp, #36	; 0x24
 8013bb8:	af02      	add	r7, sp, #8
 8013bba:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f000 f892 	bl	8013ce8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8013bc4:	4a36      	ldr	r2, [pc, #216]	; (8013ca0 <_ZN14screenViewBaseC1Ev+0xec>)
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	601a      	str	r2, [r3, #0]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	3340      	adds	r3, #64	; 0x40
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7ff fbdc 	bl	801338c <_ZN8touchgfx3BoxC1Ev>
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	336c      	adds	r3, #108	; 0x6c
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7ff ff67 	bl	8013aac <_ZN8touchgfx6ButtonC1Ev>
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8013be4:	4b2f      	ldr	r3, [pc, #188]	; (8013ca4 <_ZN14screenViewBaseC1Ev+0xf0>)
 8013be6:	60bb      	str	r3, [r7, #8]
 8013be8:	2300      	movs	r3, #0
 8013bea:	60fb      	str	r3, [r7, #12]
 8013bec:	f107 0308 	add.w	r3, r7, #8
 8013bf0:	cb0c      	ldmia	r3, {r2, r3}
 8013bf2:	6879      	ldr	r1, [r7, #4]
 8013bf4:	f000 f89e 	bl	8013d34 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013bfe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013c02:	9300      	str	r3, [sp, #0]
 8013c04:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013c08:	2200      	movs	r2, #0
 8013c0a:	2100      	movs	r1, #0
 8013c0c:	f7fe f897 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013c16:	2200      	movs	r2, #0
 8013c18:	2100      	movs	r1, #0
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	f7ff fcba 	bl	8013594 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c20:	4603      	mov	r3, r0
 8013c22:	4619      	mov	r1, r3
 8013c24:	4620      	mov	r0, r4
 8013c26:	f7ff fbd5 	bl	80133d4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(155, 106);
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	336c      	adds	r3, #108	; 0x6c
 8013c2e:	226a      	movs	r2, #106	; 0x6a
 8013c30:	219b      	movs	r1, #155	; 0x9b
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fe f8cf 	bl	8011dd6 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013c3e:	f107 0310 	add.w	r3, r7, #16
 8013c42:	2100      	movs	r1, #0
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7ff fae8 	bl	801321a <_ZN8touchgfx6BitmapC1Et>
 8013c4a:	f107 0314 	add.w	r3, r7, #20
 8013c4e:	2101      	movs	r1, #1
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7ff fae2 	bl	801321a <_ZN8touchgfx6BitmapC1Et>
 8013c56:	f107 0214 	add.w	r2, r7, #20
 8013c5a:	f107 0310 	add.w	r3, r7, #16
 8013c5e:	4619      	mov	r1, r3
 8013c60:	4620      	mov	r0, r4
 8013c62:	f004 fb8b 	bl	801837c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	33a0      	adds	r3, #160	; 0xa0
 8013c70:	4619      	mov	r1, r3
 8013c72:	4610      	mov	r0, r2
 8013c74:	f7ff feea 	bl	8013a4c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	3340      	adds	r3, #64	; 0x40
 8013c7e:	4619      	mov	r1, r3
 8013c80:	4610      	mov	r0, r2
 8013c82:	f7ff fb61 	bl	8013348 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8013c86:	687a      	ldr	r2, [r7, #4]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	336c      	adds	r3, #108	; 0x6c
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	4610      	mov	r0, r2
 8013c90:	f7ff fb5a 	bl	8013348 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	4618      	mov	r0, r3
 8013c98:	371c      	adds	r7, #28
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd90      	pop	{r4, r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	0802a7c4 	.word	0x0802a7c4
 8013ca4:	08013cbd 	.word	0x08013cbd

08013ca8 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8013ca8:	b480      	push	{r7}
 8013caa:	b083      	sub	sp, #12
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]

}
 8013cb0:	bf00      	nop
 8013cb2:	370c      	adds	r7, #12
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cba:	4770      	bx	lr

08013cbc <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b082      	sub	sp, #8
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	336c      	adds	r3, #108	; 0x6c
 8013cca:	683a      	ldr	r2, [r7, #0]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d106      	bne.n	8013cde <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenSlideTransitionEast();
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f7ff ff63 	bl	8013b9c <_ZN14screenViewBase11applicationEv>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7fe fbe9 	bl	80124b0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>
    }
}
 8013cde:	bf00      	nop
 8013ce0:	3708      	adds	r7, #8
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}
	...

08013ce8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f007 fc4e 	bl	801b594 <_ZN8touchgfx6ScreenC1Ev>
 8013cf8:	4a05      	ldr	r2, [pc, #20]	; (8013d10 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	601a      	str	r2, [r3, #0]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2200      	movs	r2, #0
 8013d02:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	4618      	mov	r0, r3
 8013d08:	3708      	adds	r7, #8
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}
 8013d0e:	bf00      	nop
 8013d10:	0802a810 	.word	0x0802a810

08013d14 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8013d14:	b480      	push	{r7}
 8013d16:	b083      	sub	sp, #12
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
 8013d1c:	4a04      	ldr	r2, [pc, #16]	; (8013d30 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	601a      	str	r2, [r3, #0]
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	4618      	mov	r0, r3
 8013d26:	370c      	adds	r7, #12
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2e:	4770      	bx	lr
 8013d30:	0802a844 	.word	0x0802a844

08013d34 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b084      	sub	sp, #16
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	4639      	mov	r1, r7
 8013d40:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7ff ffe4 	bl	8013d14 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8013d4c:	4a08      	ldr	r2, [pc, #32]	; (8013d70 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	68ba      	ldr	r2, [r7, #8]
 8013d56:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	3308      	adds	r3, #8
 8013d5c:	463a      	mov	r2, r7
 8013d5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d62:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3710      	adds	r7, #16
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	0802a7f8 	.word	0x0802a7f8

08013d74 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8013d74:	b480      	push	{r7}
 8013d76:	b083      	sub	sp, #12
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
    }
 8013d7c:	4a04      	ldr	r2, [pc, #16]	; (8013d90 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	601a      	str	r2, [r3, #0]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	4618      	mov	r0, r3
 8013d86:	370c      	adds	r7, #12
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8e:	4770      	bx	lr
 8013d90:	0802a844 	.word	0x0802a844

08013d94 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
    }
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f7ff ffe9 	bl	8013d74 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013da2:	2104      	movs	r1, #4
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f014 fc40 	bl	802862a <_ZdlPvj>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	4618      	mov	r0, r3
 8013dae:	3708      	adds	r7, #8
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}

08013db4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b082      	sub	sp, #8
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
 8013dbc:	4a05      	ldr	r2, [pc, #20]	; (8013dd4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	601a      	str	r2, [r3, #0]
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7ff ffd5 	bl	8013d74 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	3708      	adds	r7, #8
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}
 8013dd4:	0802a7f8 	.word	0x0802a7f8

08013dd8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b082      	sub	sp, #8
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f7ff ffe7 	bl	8013db4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013de6:	2110      	movs	r1, #16
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f014 fc1e 	bl	802862a <_ZdlPvj>
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	4618      	mov	r0, r3
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b082      	sub	sp, #8
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	4a05      	ldr	r2, [pc, #20]	; (8013e18 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	601a      	str	r2, [r3, #0]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7ff fe2d 	bl	8013a68 <_ZN8touchgfx14AbstractButtonD1Ev>
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	4618      	mov	r0, r3
 8013e12:	3708      	adds	r7, #8
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}
 8013e18:	0802bf0c 	.word	0x0802bf0c

08013e1c <_ZN8touchgfx6ButtonD0Ev>:
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b082      	sub	sp, #8
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f7ff ffe7 	bl	8013df8 <_ZN8touchgfx6ButtonD1Ev>
 8013e2a:	2134      	movs	r1, #52	; 0x34
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f014 fbfc 	bl	802862a <_ZdlPvj>
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	4618      	mov	r0, r3
 8013e36:	3708      	adds	r7, #8
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd80      	pop	{r7, pc}

08013e3c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b082      	sub	sp, #8
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
 8013e44:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	68d2      	ldr	r2, [r2, #12]
 8013e4e:	1052      	asrs	r2, r2, #1
 8013e50:	1898      	adds	r0, r3, r2
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	68db      	ldr	r3, [r3, #12]
 8013e56:	f003 0301 	and.w	r3, r3, #1
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d102      	bne.n	8013e64 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	689b      	ldr	r3, [r3, #8]
 8013e62:	e00a      	b.n	8013e7a <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	68d2      	ldr	r2, [r2, #12]
 8013e6c:	1052      	asrs	r2, r2, #1
 8013e6e:	4413      	add	r3, r2
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	687a      	ldr	r2, [r7, #4]
 8013e74:	6892      	ldr	r2, [r2, #8]
 8013e76:	4413      	add	r3, r2
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	6839      	ldr	r1, [r7, #0]
 8013e7c:	4798      	blx	r3
    }
 8013e7e:	bf00      	nop
 8013e80:	3708      	adds	r7, #8
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}

08013e86 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8013e86:	b480      	push	{r7}
 8013e88:	b083      	sub	sp, #12
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d010      	beq.n	8013eb8 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	689b      	ldr	r3, [r3, #8]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d107      	bne.n	8013eae <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	68db      	ldr	r3, [r3, #12]
 8013ea2:	f003 0301 	and.w	r3, r3, #1
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d101      	bne.n	8013eae <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013eaa:	2301      	movs	r3, #1
 8013eac:	e000      	b.n	8013eb0 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8013eae:	2300      	movs	r3, #0
 8013eb0:	2b01      	cmp	r3, #1
 8013eb2:	d001      	beq.n	8013eb8 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	e000      	b.n	8013eba <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8013eb8:	2300      	movs	r3, #0
    }
 8013eba:	4618      	mov	r0, r3
 8013ebc:	370c      	adds	r7, #12
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec4:	4770      	bx	lr
	...

08013ec8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8013ec8:	b480      	push	{r7}
 8013eca:	af00      	add	r7, sp, #0
    return bitmap_database;
 8013ecc:	4b02      	ldr	r3, [pc, #8]	; (8013ed8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed6:	4770      	bx	lr
 8013ed8:	0802a854 	.word	0x0802a854

08013edc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8013edc:	b480      	push	{r7}
 8013ede:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8013ee0:	2304      	movs	r3, #4
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eea:	4770      	bx	lr

08013eec <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8013eec:	b480      	push	{r7}
 8013eee:	b085      	sub	sp, #20
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	60f8      	str	r0, [r7, #12]
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	607a      	str	r2, [r7, #4]
 8013ef8:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8013efa:	2300      	movs	r3, #0
    }
 8013efc:	4618      	mov	r0, r3
 8013efe:	3714      	adds	r7, #20
 8013f00:	46bd      	mov	sp, r7
 8013f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f06:	4770      	bx	lr

08013f08 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8013f08:	b480      	push	{r7}
 8013f0a:	b083      	sub	sp, #12
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8013f10:	2300      	movs	r3, #0
    }
 8013f12:	4618      	mov	r0, r3
 8013f14:	370c      	adds	r7, #12
 8013f16:	46bd      	mov	sp, r7
 8013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1c:	4770      	bx	lr
	...

08013f20 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8013f20:	b480      	push	{r7}
 8013f22:	b085      	sub	sp, #20
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	60b9      	str	r1, [r7, #8]
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8013f2e:	4a07      	ldr	r2, [pc, #28]	; (8013f4c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	6013      	str	r3, [r2, #0]
        fonts = f;
 8013f34:	4a06      	ldr	r2, [pc, #24]	; (8013f50 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8013f3a:	4a06      	ldr	r2, [pc, #24]	; (8013f54 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8013f3c:	88fb      	ldrh	r3, [r7, #6]
 8013f3e:	8013      	strh	r3, [r2, #0]
    }
 8013f40:	bf00      	nop
 8013f42:	3714      	adds	r7, #20
 8013f44:	46bd      	mov	sp, r7
 8013f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4a:	4770      	bx	lr
 8013f4c:	20005830 	.word	0x20005830
 8013f50:	20005838 	.word	0x20005838
 8013f54:	20005834 	.word	0x20005834

08013f58 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8013f58:	b40e      	push	{r1, r2, r3}
 8013f5a:	b580      	push	{r7, lr}
 8013f5c:	b085      	sub	sp, #20
 8013f5e:	af00      	add	r7, sp, #0
 8013f60:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8013f62:	f107 0320 	add.w	r3, r7, #32
 8013f66:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	69fa      	ldr	r2, [r7, #28]
 8013f6c:	2100      	movs	r1, #0
 8013f6e:	6878      	ldr	r0, [r7, #4]
 8013f70:	f006 fe44 	bl	801abfc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8013f74:	4603      	mov	r3, r0
 8013f76:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8013f78:	89fb      	ldrh	r3, [r7, #14]
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3714      	adds	r7, #20
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013f84:	b003      	add	sp, #12
 8013f86:	4770      	bx	lr

08013f88 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8013f88:	b40c      	push	{r2, r3}
 8013f8a:	b580      	push	{r7, lr}
 8013f8c:	b084      	sub	sp, #16
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
 8013f92:	460b      	mov	r3, r1
 8013f94:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8013f96:	f107 031c 	add.w	r3, r7, #28
 8013f9a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8013f9c:	78f9      	ldrb	r1, [r7, #3]
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	69ba      	ldr	r2, [r7, #24]
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f006 fe2a 	bl	801abfc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8013fac:	89fb      	ldrh	r3, [r7, #14]
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3710      	adds	r7, #16
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013fb8:	b002      	add	sp, #8
 8013fba:	4770      	bx	lr

08013fbc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b08a      	sub	sp, #40	; 0x28
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d016      	beq.n	8013ffe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	331a      	adds	r3, #26
 8013fd4:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8013fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd8:	8adb      	ldrh	r3, [r3, #22]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d105      	bne.n	8013fea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8013fde:	4b43      	ldr	r3, [pc, #268]	; (80140ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8013fe0:	4a43      	ldr	r2, [pc, #268]	; (80140f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8013fe2:	21c0      	movs	r1, #192	; 0xc0
 8013fe4:	4843      	ldr	r0, [pc, #268]	; (80140f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8013fe6:	f014 fb4f 	bl	8028688 <__assert_func>
            return buffer[pos];
 8013fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fec:	8a9b      	ldrh	r3, [r3, #20]
 8013fee:	461a      	mov	r2, r3
 8013ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d001      	beq.n	8013ffe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	e000      	b.n	8014000 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8013ffe:	2300      	movs	r3, #0
 8014000:	2b00      	cmp	r3, #0
 8014002:	d06a      	beq.n	80140da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f008 f9fd 	bl	801c404 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	331a      	adds	r3, #26
 801400e:	623b      	str	r3, [r7, #32]
 8014010:	2301      	movs	r3, #1
 8014012:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8014014:	6a3b      	ldr	r3, [r7, #32]
 8014016:	8adb      	ldrh	r3, [r3, #22]
 8014018:	8bfa      	ldrh	r2, [r7, #30]
 801401a:	429a      	cmp	r2, r3
 801401c:	d305      	bcc.n	801402a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801401e:	4b36      	ldr	r3, [pc, #216]	; (80140f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8014020:	4a36      	ldr	r2, [pc, #216]	; (80140fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8014022:	21c5      	movs	r1, #197	; 0xc5
 8014024:	4833      	ldr	r0, [pc, #204]	; (80140f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014026:	f014 fb2f 	bl	8028688 <__assert_func>
            const uint16_t index = pos + offset;
 801402a:	6a3b      	ldr	r3, [r7, #32]
 801402c:	8a9a      	ldrh	r2, [r3, #20]
 801402e:	8bfb      	ldrh	r3, [r7, #30]
 8014030:	4413      	add	r3, r2
 8014032:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8014034:	8bbb      	ldrh	r3, [r7, #28]
 8014036:	2b09      	cmp	r3, #9
 8014038:	d801      	bhi.n	801403e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 801403a:	8bbb      	ldrh	r3, [r7, #28]
 801403c:	e001      	b.n	8014042 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 801403e:	8bbb      	ldrh	r3, [r7, #28]
 8014040:	3b0a      	subs	r3, #10
 8014042:	6a3a      	ldr	r2, [r7, #32]
 8014044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014048:	f640 123f 	movw	r2, #2367	; 0x93f
 801404c:	4293      	cmp	r3, r2
 801404e:	bf0c      	ite	eq
 8014050:	2301      	moveq	r3, #1
 8014052:	2300      	movne	r3, #0
 8014054:	b2db      	uxtb	r3, r3
 8014056:	2b00      	cmp	r3, #0
 8014058:	d03f      	beq.n	80140da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	331a      	adds	r3, #26
 801405e:	687a      	ldr	r2, [r7, #4]
 8014060:	321a      	adds	r2, #26
 8014062:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8014064:	68ba      	ldr	r2, [r7, #8]
 8014066:	8ad2      	ldrh	r2, [r2, #22]
 8014068:	2a00      	cmp	r2, #0
 801406a:	d105      	bne.n	8014078 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 801406c:	4b1f      	ldr	r3, [pc, #124]	; (80140ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801406e:	4a20      	ldr	r2, [pc, #128]	; (80140f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014070:	21c0      	movs	r1, #192	; 0xc0
 8014072:	4820      	ldr	r0, [pc, #128]	; (80140f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014074:	f014 fb08 	bl	8028688 <__assert_func>
            return buffer[pos];
 8014078:	68ba      	ldr	r2, [r7, #8]
 801407a:	8a92      	ldrh	r2, [r2, #20]
 801407c:	4611      	mov	r1, r2
 801407e:	68ba      	ldr	r2, [r7, #8]
 8014080:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8014084:	613b      	str	r3, [r7, #16]
 8014086:	4613      	mov	r3, r2
 8014088:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	8adb      	ldrh	r3, [r3, #22]
 801408e:	2b01      	cmp	r3, #1
 8014090:	d806      	bhi.n	80140a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8014092:	4b1b      	ldr	r3, [pc, #108]	; (8014100 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8014094:	4a1b      	ldr	r2, [pc, #108]	; (8014104 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8014096:	f240 110d 	movw	r1, #269	; 0x10d
 801409a:	4816      	ldr	r0, [pc, #88]	; (80140f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801409c:	f014 faf4 	bl	8028688 <__assert_func>
            const uint16_t index = pos + 1;
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	8a9b      	ldrh	r3, [r3, #20]
 80140a4:	3301      	adds	r3, #1
 80140a6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80140a8:	89bb      	ldrh	r3, [r7, #12]
 80140aa:	2b09      	cmp	r3, #9
 80140ac:	d801      	bhi.n	80140b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80140ae:	89bb      	ldrh	r3, [r7, #12]
 80140b0:	e000      	b.n	80140b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80140b2:	2300      	movs	r3, #0
 80140b4:	693a      	ldr	r2, [r7, #16]
 80140b6:	89f9      	ldrh	r1, [r7, #14]
 80140b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80140bc:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	331a      	adds	r3, #26
 80140c2:	61bb      	str	r3, [r7, #24]
 80140c4:	f640 133f 	movw	r3, #2367	; 0x93f
 80140c8:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80140ca:	69bb      	ldr	r3, [r7, #24]
 80140cc:	8a9b      	ldrh	r3, [r3, #20]
 80140ce:	4619      	mov	r1, r3
 80140d0:	69bb      	ldr	r3, [r7, #24]
 80140d2:	8afa      	ldrh	r2, [r7, #22]
 80140d4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80140d8:	bf00      	nop
        }
    }
    return getNextChar();
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f008 f876 	bl	801c1cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80140e0:	4603      	mov	r3, r0
}
 80140e2:	4618      	mov	r0, r3
 80140e4:	3728      	adds	r7, #40	; 0x28
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	08029e48 	.word	0x08029e48
 80140f0:	08029e54 	.word	0x08029e54
 80140f4:	08029f00 	.word	0x08029f00
 80140f8:	08029f48 	.word	0x08029f48
 80140fc:	08029f58 	.word	0x08029f58
 8014100:	0802a02c 	.word	0x0802a02c
 8014104:	0802a038 	.word	0x0802a038

08014108 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f008 f815 	bl	801c140 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8014116:	bf00      	nop
 8014118:	3708      	adds	r7, #8
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}

0801411e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 801411e:	b580      	push	{r7, lr}
 8014120:	b088      	sub	sp, #32
 8014122:	af02      	add	r7, sp, #8
 8014124:	60f8      	str	r0, [r7, #12]
 8014126:	1d38      	adds	r0, r7, #4
 8014128:	e880 0006 	stmia.w	r0, {r1, r2}
 801412c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 801412e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014132:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8014134:	1d39      	adds	r1, r7, #4
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	9301      	str	r3, [sp, #4]
 801413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413c:	9300      	str	r3, [sp, #0]
 801413e:	6a3b      	ldr	r3, [r7, #32]
 8014140:	683a      	ldr	r2, [r7, #0]
 8014142:	68f8      	ldr	r0, [r7, #12]
 8014144:	f005 fa58 	bl	80195f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8014148:	bf00      	nop
 801414a:	3718      	adds	r7, #24
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014150:	b590      	push	{r4, r7, lr}
 8014152:	b085      	sub	sp, #20
 8014154:	af00      	add	r7, sp, #0
 8014156:	4603      	mov	r3, r0
 8014158:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801415a:	2300      	movs	r3, #0
 801415c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801415e:	88fb      	ldrh	r3, [r7, #6]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d127      	bne.n	80141b4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014164:	88fb      	ldrh	r3, [r7, #6]
 8014166:	4a1e      	ldr	r2, [pc, #120]	; (80141e0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d016      	beq.n	801419e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8014170:	88fb      	ldrh	r3, [r7, #6]
 8014172:	4a1b      	ldr	r2, [pc, #108]	; (80141e0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014178:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	68ba      	ldr	r2, [r7, #8]
 8014180:	4413      	add	r3, r2
 8014182:	4a18      	ldr	r2, [pc, #96]	; (80141e4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014184:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	68ba      	ldr	r2, [r7, #8]
 801418c:	4413      	add	r3, r2
 801418e:	4a16      	ldr	r2, [pc, #88]	; (80141e8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014190:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	689b      	ldr	r3, [r3, #8]
 8014196:	68ba      	ldr	r2, [r7, #8]
 8014198:	4413      	add	r3, r2
 801419a:	60fb      	str	r3, [r7, #12]
 801419c:	e00a      	b.n	80141b4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801419e:	4b11      	ldr	r3, [pc, #68]	; (80141e4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80141a0:	4a12      	ldr	r2, [pc, #72]	; (80141ec <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80141a2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80141a4:	4a12      	ldr	r2, [pc, #72]	; (80141f0 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80141a6:	4b10      	ldr	r3, [pc, #64]	; (80141e8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80141a8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80141aa:	88fb      	ldrh	r3, [r7, #6]
 80141ac:	4a11      	ldr	r2, [pc, #68]	; (80141f4 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80141ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141b2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d00d      	beq.n	80141d6 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80141ba:	4a0f      	ldr	r2, [pc, #60]	; (80141f8 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80141bc:	88fb      	ldrh	r3, [r7, #6]
 80141be:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80141c0:	f000 f83e 	bl	8014240 <_ZN17TypedTextDatabase8getFontsEv>
 80141c4:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80141c6:	f000 f833 	bl	8014230 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80141ca:	4603      	mov	r3, r0
 80141cc:	461a      	mov	r2, r3
 80141ce:	4621      	mov	r1, r4
 80141d0:	68f8      	ldr	r0, [r7, #12]
 80141d2:	f7ff fea5 	bl	8013f20 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80141d6:	bf00      	nop
 80141d8:	3714      	adds	r7, #20
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd90      	pop	{r4, r7, pc}
 80141de:	bf00      	nop
 80141e0:	200052c4 	.word	0x200052c4
 80141e4:	200052cc 	.word	0x200052cc
 80141e8:	200052d0 	.word	0x200052d0
 80141ec:	08044894 	.word	0x08044894
 80141f0:	08044890 	.word	0x08044890
 80141f4:	080448a0 	.word	0x080448a0
 80141f8:	200052c8 	.word	0x200052c8

080141fc <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80141fc:	b480      	push	{r7}
 80141fe:	b083      	sub	sp, #12
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	460b      	mov	r3, r1
 8014206:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8014208:	4b07      	ldr	r3, [pc, #28]	; (8014228 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801420a:	681a      	ldr	r2, [r3, #0]
 801420c:	4b07      	ldr	r3, [pc, #28]	; (801422c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801420e:	6819      	ldr	r1, [r3, #0]
 8014210:	887b      	ldrh	r3, [r7, #2]
 8014212:	009b      	lsls	r3, r3, #2
 8014214:	440b      	add	r3, r1
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	005b      	lsls	r3, r3, #1
 801421a:	4413      	add	r3, r2
}
 801421c:	4618      	mov	r0, r3
 801421e:	370c      	adds	r7, #12
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr
 8014228:	200052cc 	.word	0x200052cc
 801422c:	200052d0 	.word	0x200052d0

08014230 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8014230:	b480      	push	{r7}
 8014232:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8014234:	2301      	movs	r3, #1
}
 8014236:	4618      	mov	r0, r3
 8014238:	46bd      	mov	sp, r7
 801423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423e:	4770      	bx	lr

08014240 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8014240:	b480      	push	{r7}
 8014242:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8014244:	4b02      	ldr	r3, [pc, #8]	; (8014250 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8014246:	4618      	mov	r0, r3
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr
 8014250:	200052d4 	.word	0x200052d4

08014254 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8014254:	b580      	push	{r7, lr}
 8014256:	b082      	sub	sp, #8
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
 801425c:	6039      	str	r1, [r7, #0]
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2b01      	cmp	r3, #1
 8014262:	d113      	bne.n	801428c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801426a:	4293      	cmp	r3, r2
 801426c:	d10e      	bne.n	801428c <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801426e:	f7fd fbef 	bl	8011a50 <_Z23getFont_verdana_20_4bppv>
 8014272:	4603      	mov	r3, r0
};
 8014274:	4a07      	ldr	r2, [pc, #28]	; (8014294 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014276:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8014278:	f7fd fc3e 	bl	8011af8 <_Z23getFont_verdana_40_4bppv>
 801427c:	4603      	mov	r3, r0
};
 801427e:	4a05      	ldr	r2, [pc, #20]	; (8014294 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014280:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8014282:	f7fd fb91 	bl	80119a8 <_Z23getFont_verdana_10_4bppv>
 8014286:	4603      	mov	r3, r0
};
 8014288:	4a02      	ldr	r2, [pc, #8]	; (8014294 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801428a:	6093      	str	r3, [r2, #8]
}  // namespace TypedTextDatabase
 801428c:	bf00      	nop
 801428e:	3708      	adds	r7, #8
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}
 8014294:	200052d4 	.word	0x200052d4

08014298 <_GLOBAL__sub_I_touchgfx_fonts>:
 8014298:	b580      	push	{r7, lr}
 801429a:	af00      	add	r7, sp, #0
 801429c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80142a0:	2001      	movs	r0, #1
 80142a2:	f7ff ffd7 	bl	8014254 <_Z41__static_initialization_and_destruction_0ii>
 80142a6:	bd80      	pop	{r7, pc}

080142a8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	4a05      	ldr	r2, [pc, #20]	; (80142c8 <_ZN19FrontendApplicationD1Ev+0x20>)
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	601a      	str	r2, [r3, #0]
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fd ffcd 	bl	8012258 <_ZN23FrontendApplicationBaseD1Ev>
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	4618      	mov	r0, r3
 80142c2:	3708      	adds	r7, #8
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}
 80142c8:	0802a8fc 	.word	0x0802a8fc

080142cc <_ZN19FrontendApplicationD0Ev>:
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f7ff ffe7 	bl	80142a8 <_ZN19FrontendApplicationD1Ev>
 80142da:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f014 f9a3 	bl	802862a <_ZdlPvj>
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	4618      	mov	r0, r3
 80142e8:	3708      	adds	r7, #8
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}

080142ee <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80142ee:	b580      	push	{r7, lr}
 80142f0:	b082      	sub	sp, #8
 80142f2:	af00      	add	r7, sp, #0
 80142f4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80142fc:	4618      	mov	r0, r3
 80142fe:	f000 f82d 	bl	801435c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	4618      	mov	r0, r3
 8014306:	f005 fcbf 	bl	8019c88 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801430a:	bf00      	nop
 801430c:	3708      	adds	r7, #8
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}
	...

08014314 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014314:	b580      	push	{r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af00      	add	r7, sp, #0
 801431a:	60f8      	str	r0, [r7, #12]
 801431c:	60b9      	str	r1, [r7, #8]
 801431e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	687a      	ldr	r2, [r7, #4]
 8014324:	68b9      	ldr	r1, [r7, #8]
 8014326:	4618      	mov	r0, r3
 8014328:	f7fe f820 	bl	801236c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801432c:	4a03      	ldr	r2, [pc, #12]	; (801433c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	601a      	str	r2, [r3, #0]
{

}
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	4618      	mov	r0, r3
 8014336:	3710      	adds	r7, #16
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}
 801433c:	0802a8fc 	.word	0x0802a8fc

08014340 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8014340:	b480      	push	{r7}
 8014342:	b083      	sub	sp, #12
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2200      	movs	r2, #0
 801434c:	601a      	str	r2, [r3, #0]
{

}
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	4618      	mov	r0, r3
 8014352:	370c      	adds	r7, #12
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr

0801435c <_ZN5Model4tickEv>:

void Model::tick()
{
 801435c:	b480      	push	{r7}
 801435e:	b083      	sub	sp, #12
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]

}
 8014364:	bf00      	nop
 8014366:	370c      	adds	r7, #12
 8014368:	46bd      	mov	sp, r7
 801436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436e:	4770      	bx	lr

08014370 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8014370:	b480      	push	{r7}
 8014372:	b083      	sub	sp, #12
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
    {
    }
 8014378:	bf00      	nop
 801437a:	370c      	adds	r7, #12
 801437c:	46bd      	mov	sp, r7
 801437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014382:	4770      	bx	lr

08014384 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8014384:	b480      	push	{r7}
 8014386:	b083      	sub	sp, #12
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
    {
    }
 801438c:	bf00      	nop
 801438e:	370c      	adds	r7, #12
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8014398:	b480      	push	{r7}
 801439a:	b083      	sub	sp, #12
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
    {
 80143a0:	4a04      	ldr	r2, [pc, #16]	; (80143b4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	601a      	str	r2, [r3, #0]
    }
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	4618      	mov	r0, r3
 80143aa:	370c      	adds	r7, #12
 80143ac:	46bd      	mov	sp, r7
 80143ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b2:	4770      	bx	lr
 80143b4:	0802a978 	.word	0x0802a978

080143b8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b082      	sub	sp, #8
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
    }
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f7ff ffe9 	bl	8014398 <_ZN8touchgfx9PresenterD1Ev>
 80143c6:	2104      	movs	r1, #4
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f014 f92e 	bl	802862a <_ZdlPvj>
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	4618      	mov	r0, r3
 80143d2:	3708      	adds	r7, #8
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}

080143d8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80143d8:	b480      	push	{r7}
 80143da:	b083      	sub	sp, #12
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
    {
 80143e0:	4a04      	ldr	r2, [pc, #16]	; (80143f4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	601a      	str	r2, [r3, #0]
    }
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	4618      	mov	r0, r3
 80143ea:	370c      	adds	r7, #12
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr
 80143f4:	0802a978 	.word	0x0802a978

080143f8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80143f8:	b480      	push	{r7}
 80143fa:	b083      	sub	sp, #12
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
 8014400:	4a06      	ldr	r2, [pc, #24]	; (801441c <_ZN13ModelListenerC1Ev+0x24>)
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	601a      	str	r2, [r3, #0]
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2200      	movs	r2, #0
 801440a:	605a      	str	r2, [r3, #4]
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	4618      	mov	r0, r3
 8014410:	370c      	adds	r7, #12
 8014412:	46bd      	mov	sp, r7
 8014414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014418:	4770      	bx	lr
 801441a:	bf00      	nop
 801441c:	0802a968 	.word	0x0802a968

08014420 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	4a04      	ldr	r2, [pc, #16]	; (801443c <_ZN13ModelListenerD1Ev+0x1c>)
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	601a      	str	r2, [r3, #0]
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	4618      	mov	r0, r3
 8014432:	370c      	adds	r7, #12
 8014434:	46bd      	mov	sp, r7
 8014436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443a:	4770      	bx	lr
 801443c:	0802a968 	.word	0x0802a968

08014440 <_ZN13ModelListenerD0Ev>:
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7ff ffe9 	bl	8014420 <_ZN13ModelListenerD1Ev>
 801444e:	2108      	movs	r1, #8
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f014 f8ea 	bl	802862a <_ZdlPvj>
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	4618      	mov	r0, r3
 801445a:	3708      	adds	r7, #8
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}

08014460 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8014460:	b580      	push	{r7, lr}
 8014462:	b082      	sub	sp, #8
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
 8014468:	4a09      	ldr	r2, [pc, #36]	; (8014490 <_ZN16Screen1PresenterD1Ev+0x30>)
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	601a      	str	r2, [r3, #0]
 801446e:	4a09      	ldr	r2, [pc, #36]	; (8014494 <_ZN16Screen1PresenterD1Ev+0x34>)
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	605a      	str	r2, [r3, #4]
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	3304      	adds	r3, #4
 8014478:	4618      	mov	r0, r3
 801447a:	f7ff ffd1 	bl	8014420 <_ZN13ModelListenerD1Ev>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	4618      	mov	r0, r3
 8014482:	f7ff ff89 	bl	8014398 <_ZN8touchgfx9PresenterD1Ev>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	4618      	mov	r0, r3
 801448a:	3708      	adds	r7, #8
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}
 8014490:	0802a940 	.word	0x0802a940
 8014494:	0802a958 	.word	0x0802a958

08014498 <_ZThn4_N16Screen1PresenterD1Ev>:
 8014498:	f1a0 0004 	sub.w	r0, r0, #4
 801449c:	e7e0      	b.n	8014460 <_ZN16Screen1PresenterD1Ev>
 801449e:	bf00      	nop

080144a0 <_ZN16Screen1PresenterD0Ev>:
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7ff ffd9 	bl	8014460 <_ZN16Screen1PresenterD1Ev>
 80144ae:	2110      	movs	r1, #16
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f014 f8ba 	bl	802862a <_ZdlPvj>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	4618      	mov	r0, r3
 80144ba:	3708      	adds	r7, #8
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}

080144c0 <_ZThn4_N16Screen1PresenterD0Ev>:
 80144c0:	f1a0 0004 	sub.w	r0, r0, #4
 80144c4:	e7ec      	b.n	80144a0 <_ZN16Screen1PresenterD0Ev>
	...

080144c8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b082      	sub	sp, #8
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	6039      	str	r1, [r7, #0]
    : view(v)
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	4618      	mov	r0, r3
 80144d6:	f7ff ff7f 	bl	80143d8 <_ZN8touchgfx9PresenterC1Ev>
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	3304      	adds	r3, #4
 80144de:	4618      	mov	r0, r3
 80144e0:	f7ff ff8a 	bl	80143f8 <_ZN13ModelListenerC1Ev>
 80144e4:	4a06      	ldr	r2, [pc, #24]	; (8014500 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	601a      	str	r2, [r3, #0]
 80144ea:	4a06      	ldr	r2, [pc, #24]	; (8014504 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	605a      	str	r2, [r3, #4]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	683a      	ldr	r2, [r7, #0]
 80144f4:	60da      	str	r2, [r3, #12]
{

}
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	0802a940 	.word	0x0802a940
 8014504:	0802a958 	.word	0x0802a958

08014508 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8014508:	b480      	push	{r7}
 801450a:	b083      	sub	sp, #12
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]

}
 8014510:	bf00      	nop
 8014512:	370c      	adds	r7, #12
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr

0801451c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801451c:	b480      	push	{r7}
 801451e:	b083      	sub	sp, #12
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]

}
 8014524:	bf00      	nop
 8014526:	370c      	adds	r7, #12
 8014528:	46bd      	mov	sp, r7
 801452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452e:	4770      	bx	lr

08014530 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	4a05      	ldr	r2, [pc, #20]	; (8014550 <_ZN11Screen1ViewD1Ev+0x20>)
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	601a      	str	r2, [r3, #0]
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	4618      	mov	r0, r3
 8014542:	f7fe ffe9 	bl	8013518 <_ZN15Screen1ViewBaseD1Ev>
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	4618      	mov	r0, r3
 801454a:	3708      	adds	r7, #8
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}
 8014550:	0802a990 	.word	0x0802a990

08014554 <_ZN11Screen1ViewD0Ev>:
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f7ff ffe7 	bl	8014530 <_ZN11Screen1ViewD1Ev>
 8014562:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f014 f85f 	bl	802862a <_ZdlPvj>
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	4618      	mov	r0, r3
 8014570:	3708      	adds	r7, #8
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}
	...

08014578 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	4618      	mov	r0, r3
 8014584:	f7ff f830 	bl	80135e8 <_ZN15Screen1ViewBaseC1Ev>
 8014588:	4a03      	ldr	r2, [pc, #12]	; (8014598 <_ZN11Screen1ViewC1Ev+0x20>)
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	601a      	str	r2, [r3, #0]
{

}
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	4618      	mov	r0, r3
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	0802a990 	.word	0x0802a990

0801459c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7ff f8e2 	bl	8013770 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80145ac:	bf00      	nop
 80145ae:	3708      	adds	r7, #8
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b082      	sub	sp, #8
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	4618      	mov	r0, r3
 80145c0:	f7fe fea2 	bl	8013308 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80145c4:	bf00      	nop
 80145c6:	3708      	adds	r7, #8
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <_ZN11Screen1View19syringePumpProgressEv>:

void Screen1View::syringePumpProgress(){
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
	for(int i=0;i<100;i++){
 80145d4:	2300      	movs	r3, #0
 80145d6:	60fb      	str	r3, [r7, #12]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	2b63      	cmp	r3, #99	; 0x63
 80145dc:	dc09      	bgt.n	80145f2 <_ZN11Screen1View19syringePumpProgressEv+0x26>
	imageProgress1.setValue(i);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	33a8      	adds	r3, #168	; 0xa8
 80145e2:	68f9      	ldr	r1, [r7, #12]
 80145e4:	4618      	mov	r0, r3
 80145e6:	f001 fde5 	bl	80161b4 <_ZN8touchgfx13ImageProgress8setValueEi>
	for(int i=0;i<100;i++){
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	3301      	adds	r3, #1
 80145ee:	60fb      	str	r3, [r7, #12]
 80145f0:	e7f2      	b.n	80145d8 <_ZN11Screen1View19syringePumpProgressEv+0xc>
	}
}
 80145f2:	bf00      	nop
 80145f4:	3710      	adds	r7, #16
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd80      	pop	{r7, pc}
	...

080145fc <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b082      	sub	sp, #8
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	4a09      	ldr	r2, [pc, #36]	; (801462c <_ZN15screenPresenterD1Ev+0x30>)
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	601a      	str	r2, [r3, #0]
 801460a:	4a09      	ldr	r2, [pc, #36]	; (8014630 <_ZN15screenPresenterD1Ev+0x34>)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	605a      	str	r2, [r3, #4]
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	3304      	adds	r3, #4
 8014614:	4618      	mov	r0, r3
 8014616:	f7ff ff03 	bl	8014420 <_ZN13ModelListenerD1Ev>
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	4618      	mov	r0, r3
 801461e:	f7ff febb 	bl	8014398 <_ZN8touchgfx9PresenterD1Ev>
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	4618      	mov	r0, r3
 8014626:	3708      	adds	r7, #8
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}
 801462c:	0802a9c8 	.word	0x0802a9c8
 8014630:	0802a9e0 	.word	0x0802a9e0

08014634 <_ZThn4_N15screenPresenterD1Ev>:
 8014634:	f1a0 0004 	sub.w	r0, r0, #4
 8014638:	e7e0      	b.n	80145fc <_ZN15screenPresenterD1Ev>
 801463a:	bf00      	nop

0801463c <_ZN15screenPresenterD0Ev>:
 801463c:	b580      	push	{r7, lr}
 801463e:	b082      	sub	sp, #8
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f7ff ffd9 	bl	80145fc <_ZN15screenPresenterD1Ev>
 801464a:	2110      	movs	r1, #16
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f013 ffec 	bl	802862a <_ZdlPvj>
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	4618      	mov	r0, r3
 8014656:	3708      	adds	r7, #8
 8014658:	46bd      	mov	sp, r7
 801465a:	bd80      	pop	{r7, pc}

0801465c <_ZThn4_N15screenPresenterD0Ev>:
 801465c:	f1a0 0004 	sub.w	r0, r0, #4
 8014660:	e7ec      	b.n	801463c <_ZN15screenPresenterD0Ev>
	...

08014664 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
 801466c:	6039      	str	r1, [r7, #0]
    : view(v)
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	4618      	mov	r0, r3
 8014672:	f7ff feb1 	bl	80143d8 <_ZN8touchgfx9PresenterC1Ev>
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	3304      	adds	r3, #4
 801467a:	4618      	mov	r0, r3
 801467c:	f7ff febc 	bl	80143f8 <_ZN13ModelListenerC1Ev>
 8014680:	4a06      	ldr	r2, [pc, #24]	; (801469c <_ZN15screenPresenterC1ER10screenView+0x38>)
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	601a      	str	r2, [r3, #0]
 8014686:	4a06      	ldr	r2, [pc, #24]	; (80146a0 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	605a      	str	r2, [r3, #4]
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	683a      	ldr	r2, [r7, #0]
 8014690:	60da      	str	r2, [r3, #12]
{

}
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	4618      	mov	r0, r3
 8014696:	3708      	adds	r7, #8
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}
 801469c:	0802a9c8 	.word	0x0802a9c8
 80146a0:	0802a9e0 	.word	0x0802a9e0

080146a4 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 80146a4:	b480      	push	{r7}
 80146a6:	b083      	sub	sp, #12
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]

}
 80146ac:	bf00      	nop
 80146ae:	370c      	adds	r7, #12
 80146b0:	46bd      	mov	sp, r7
 80146b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b6:	4770      	bx	lr

080146b8 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 80146b8:	b480      	push	{r7}
 80146ba:	b083      	sub	sp, #12
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]

}
 80146c0:	bf00      	nop
 80146c2:	370c      	adds	r7, #12
 80146c4:	46bd      	mov	sp, r7
 80146c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ca:	4770      	bx	lr

080146cc <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b082      	sub	sp, #8
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	4a05      	ldr	r2, [pc, #20]	; (80146ec <_ZN10screenViewD1Ev+0x20>)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	601a      	str	r2, [r3, #0]
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	4618      	mov	r0, r3
 80146de:	f7ff fa2b 	bl	8013b38 <_ZN14screenViewBaseD1Ev>
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	4618      	mov	r0, r3
 80146e6:	3708      	adds	r7, #8
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}
 80146ec:	0802a9f0 	.word	0x0802a9f0

080146f0 <_ZN10screenViewD0Ev>:
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f7ff ffe7 	bl	80146cc <_ZN10screenViewD1Ev>
 80146fe:	21b0      	movs	r1, #176	; 0xb0
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f013 ff92 	bl	802862a <_ZdlPvj>
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	4618      	mov	r0, r3
 801470a:	3708      	adds	r7, #8
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}

08014710 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8014710:	b580      	push	{r7, lr}
 8014712:	b082      	sub	sp, #8
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	4618      	mov	r0, r3
 801471c:	f7ff fa4a 	bl	8013bb4 <_ZN14screenViewBaseC1Ev>
 8014720:	4a03      	ldr	r2, [pc, #12]	; (8014730 <_ZN10screenViewC1Ev+0x20>)
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	601a      	str	r2, [r3, #0]
{

}
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	4618      	mov	r0, r3
 801472a:	3708      	adds	r7, #8
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	0802a9f0 	.word	0x0802a9f0

08014734 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	4618      	mov	r0, r3
 8014740:	f7ff fab2 	bl	8013ca8 <_ZN14screenViewBase11setupScreenEv>
}
 8014744:	bf00      	nop
 8014746:	3708      	adds	r7, #8
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}

0801474c <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b082      	sub	sp, #8
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	4618      	mov	r0, r3
 8014758:	f7fe fdd6 	bl	8013308 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801475c:	bf00      	nop
 801475e:	3708      	adds	r7, #8
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}

08014764 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8014764:	b480      	push	{r7}
 8014766:	b083      	sub	sp, #12
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
    {
 801476c:	4a04      	ldr	r2, [pc, #16]	; (8014780 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	601a      	str	r2, [r3, #0]
    }
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	4618      	mov	r0, r3
 8014776:	370c      	adds	r7, #12
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr
 8014780:	0802aa3c 	.word	0x0802aa3c

08014784 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
    }
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f7ff ffe9 	bl	8014764 <_ZN8touchgfx15TouchControllerD1Ev>
 8014792:	2104      	movs	r1, #4
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f013 ff48 	bl	802862a <_ZdlPvj>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	4618      	mov	r0, r3
 801479e:	3708      	adds	r7, #8
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80147a4:	b480      	push	{r7}
 80147a6:	b083      	sub	sp, #12
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80147ac:	bf00      	nop
 80147ae:	370c      	adds	r7, #12
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr

080147b8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80147b8:	b480      	push	{r7}
 80147ba:	b085      	sub	sp, #20
 80147bc:	af00      	add	r7, sp, #0
 80147be:	60f8      	str	r0, [r7, #12]
 80147c0:	60b9      	str	r1, [r7, #8]
 80147c2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80147c4:	2300      	movs	r3, #0
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3714      	adds	r7, #20
 80147ca:	46bd      	mov	sp, r7
 80147cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d0:	4770      	bx	lr
	...

080147d4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b082      	sub	sp, #8
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	4a05      	ldr	r2, [pc, #20]	; (80147f4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	601a      	str	r2, [r3, #0]
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7ff ffbd 	bl	8014764 <_ZN8touchgfx15TouchControllerD1Ev>
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	4618      	mov	r0, r3
 80147ee:	3708      	adds	r7, #8
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	0802aa24 	.word	0x0802aa24

080147f8 <_ZN20STM32TouchControllerD0Ev>:
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f7ff ffe7 	bl	80147d4 <_ZN20STM32TouchControllerD1Ev>
 8014806:	2104      	movs	r1, #4
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f013 ff0e 	bl	802862a <_ZdlPvj>
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	4618      	mov	r0, r3
 8014812:	3708      	adds	r7, #8
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8014818:	b480      	push	{r7}
 801481a:	b083      	sub	sp, #12
 801481c:	af00      	add	r7, sp, #0
 801481e:	4603      	mov	r3, r0
 8014820:	71fb      	strb	r3, [r7, #7]

}
 8014822:	bf00      	nop
 8014824:	370c      	adds	r7, #12
 8014826:	46bd      	mov	sp, r7
 8014828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482c:	4770      	bx	lr

0801482e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801482e:	b480      	push	{r7}
 8014830:	b083      	sub	sp, #12
 8014832:	af00      	add	r7, sp, #0
 8014834:	4603      	mov	r3, r0
 8014836:	71fb      	strb	r3, [r7, #7]

}
 8014838:	bf00      	nop
 801483a:	370c      	adds	r7, #12
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr

08014844 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8014844:	b480      	push	{r7}
 8014846:	b083      	sub	sp, #12
 8014848:	af00      	add	r7, sp, #0
 801484a:	4603      	mov	r3, r0
 801484c:	71fb      	strb	r3, [r7, #7]

}
 801484e:	bf00      	nop
 8014850:	370c      	adds	r7, #12
 8014852:	46bd      	mov	sp, r7
 8014854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014858:	4770      	bx	lr
	...

0801485c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 801485c:	b480      	push	{r7}
 801485e:	b083      	sub	sp, #12
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
    {
 8014864:	4a04      	ldr	r2, [pc, #16]	; (8014878 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	601a      	str	r2, [r3, #0]
    }
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	4618      	mov	r0, r3
 801486e:	370c      	adds	r7, #12
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr
 8014878:	0802b678 	.word	0x0802b678

0801487c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
    }
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f7ff ffe9 	bl	801485c <_ZN8touchgfx3HALD1Ev>
 801488a:	217c      	movs	r1, #124	; 0x7c
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f013 fecc 	bl	802862a <_ZdlPvj>
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	4618      	mov	r0, r3
 8014896:	3708      	adds	r7, #8
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}

0801489c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801489c:	b480      	push	{r7}
 801489e:	b083      	sub	sp, #12
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	460b      	mov	r3, r1
 80148a6:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	78fa      	ldrb	r2, [r7, #3]
 80148ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2201      	movs	r2, #1
 80148b4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80148b8:	bf00      	nop
 80148ba:	370c      	adds	r7, #12
 80148bc:	46bd      	mov	sp, r7
 80148be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c2:	4770      	bx	lr

080148c4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b082      	sub	sp, #8
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d009      	beq.n	80148ea <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	685a      	ldr	r2, [r3, #4]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	4610      	mov	r0, r2
 80148e4:	4798      	blx	r3
 80148e6:	4603      	mov	r3, r0
 80148e8:	e000      	b.n	80148ec <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 80148ea:	2300      	movs	r3, #0
        }
    }
 80148ec:	4618      	mov	r0, r3
 80148ee:	3708      	adds	r7, #8
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f002 ff29 	bl	8017754 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	3390      	adds	r3, #144	; 0x90
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	4798      	blx	r3
    }
 801490e:	bf00      	nop
 8014910:	3708      	adds	r7, #8
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}

08014916 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8014916:	b480      	push	{r7}
 8014918:	b083      	sub	sp, #12
 801491a:	af00      	add	r7, sp, #0
 801491c:	6078      	str	r0, [r7, #4]
 801491e:	6039      	str	r1, [r7, #0]
    {
        return false;
 8014920:	2300      	movs	r3, #0
    }
 8014922:	4618      	mov	r0, r3
 8014924:	370c      	adds	r7, #12
 8014926:	46bd      	mov	sp, r7
 8014928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492c:	4770      	bx	lr
	...

08014930 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8014930:	b580      	push	{r7, lr}
 8014932:	b084      	sub	sp, #16
 8014934:	af00      	add	r7, sp, #0
 8014936:	60f8      	str	r0, [r7, #12]
 8014938:	60b9      	str	r1, [r7, #8]
 801493a:	607a      	str	r2, [r7, #4]
 801493c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d106      	bne.n	8014952 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8014944:	4b11      	ldr	r3, [pc, #68]	; (801498c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8014946:	4a12      	ldr	r2, [pc, #72]	; (8014990 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8014948:	f240 216b 	movw	r1, #619	; 0x26b
 801494c:	4811      	ldr	r0, [pc, #68]	; (8014994 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801494e:	f013 fe9b 	bl	8028688 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	68ba      	ldr	r2, [r7, #8]
 8014956:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	687a      	ldr	r2, [r7, #4]
 801495c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	683a      	ldr	r2, [r7, #0]
 8014962:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2b00      	cmp	r3, #0
 8014968:	bf14      	ite	ne
 801496a:	2301      	movne	r3, #1
 801496c:	2300      	moveq	r3, #0
 801496e:	b2da      	uxtb	r2, r3
 8014970:	4b09      	ldr	r3, [pc, #36]	; (8014998 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8014972:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	2b00      	cmp	r3, #0
 8014978:	bf14      	ite	ne
 801497a:	2301      	movne	r3, #1
 801497c:	2300      	moveq	r3, #0
 801497e:	b2da      	uxtb	r2, r3
 8014980:	4b06      	ldr	r3, [pc, #24]	; (801499c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8014982:	701a      	strb	r2, [r3, #0]
    }
 8014984:	bf00      	nop
 8014986:	3710      	adds	r7, #16
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}
 801498c:	0802a0ec 	.word	0x0802a0ec
 8014990:	0802a124 	.word	0x0802a124
 8014994:	0802a174 	.word	0x0802a174
 8014998:	200057de 	.word	0x200057de
 801499c:	200057df 	.word	0x200057df

080149a0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80149a0:	b480      	push	{r7}
 80149a2:	b083      	sub	sp, #12
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80149a8:	2300      	movs	r3, #0
    }
 80149aa:	4618      	mov	r0, r3
 80149ac:	370c      	adds	r7, #12
 80149ae:	46bd      	mov	sp, r7
 80149b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b4:	4770      	bx	lr

080149b6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80149b6:	b580      	push	{r7, lr}
 80149b8:	b082      	sub	sp, #8
 80149ba:	af00      	add	r7, sp, #0
 80149bc:	6078      	str	r0, [r7, #4]
 80149be:	460b      	mov	r3, r1
 80149c0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d004      	beq.n	80149d4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149ce:	887a      	ldrh	r2, [r7, #2]
 80149d0:	4610      	mov	r0, r2
 80149d2:	4798      	blx	r3
        }
    }
 80149d4:	bf00      	nop
 80149d6:	3708      	adds	r7, #8
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80149dc:	b580      	push	{r7, lr}
 80149de:	b082      	sub	sp, #8
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	685a      	ldr	r2, [r3, #4]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	3318      	adds	r3, #24
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	4610      	mov	r0, r2
 80149f4:	4798      	blx	r3
 80149f6:	4603      	mov	r3, r0
    }
 80149f8:	4618      	mov	r0, r3
 80149fa:	3708      	adds	r7, #8
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}

08014a00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8014a00:	b480      	push	{r7}
 8014a02:	b083      	sub	sp, #12
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014a14:	429a      	cmp	r2, r3
 8014a16:	d017      	beq.n	8014a48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8014a18:	4b1a      	ldr	r3, [pc, #104]	; (8014a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d12a      	bne.n	8014a76 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014a20:	4b19      	ldr	r3, [pc, #100]	; (8014a88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014a22:	881a      	ldrh	r2, [r3, #0]
 8014a24:	4b19      	ldr	r3, [pc, #100]	; (8014a8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014a26:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014a28:	4b19      	ldr	r3, [pc, #100]	; (8014a90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014a2a:	881a      	ldrh	r2, [r3, #0]
 8014a2c:	4b19      	ldr	r3, [pc, #100]	; (8014a94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014a2e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8014a30:	4b16      	ldr	r3, [pc, #88]	; (8014a8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014a32:	881a      	ldrh	r2, [r3, #0]
 8014a34:	4b16      	ldr	r3, [pc, #88]	; (8014a90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014a36:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8014a38:	4b16      	ldr	r3, [pc, #88]	; (8014a94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014a3a:	881a      	ldrh	r2, [r3, #0]
 8014a3c:	4b12      	ldr	r3, [pc, #72]	; (8014a88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014a3e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8014a40:	4b10      	ldr	r3, [pc, #64]	; (8014a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014a42:	2201      	movs	r2, #1
 8014a44:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8014a46:	e016      	b.n	8014a76 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8014a48:	4b0e      	ldr	r3, [pc, #56]	; (8014a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d012      	beq.n	8014a76 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8014a50:	4b0f      	ldr	r3, [pc, #60]	; (8014a90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014a52:	881a      	ldrh	r2, [r3, #0]
 8014a54:	4b0d      	ldr	r3, [pc, #52]	; (8014a8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014a56:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8014a58:	4b0b      	ldr	r3, [pc, #44]	; (8014a88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014a5a:	881a      	ldrh	r2, [r3, #0]
 8014a5c:	4b0d      	ldr	r3, [pc, #52]	; (8014a94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014a5e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8014a60:	4b0c      	ldr	r3, [pc, #48]	; (8014a94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014a62:	881a      	ldrh	r2, [r3, #0]
 8014a64:	4b0a      	ldr	r3, [pc, #40]	; (8014a90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014a66:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8014a68:	4b08      	ldr	r3, [pc, #32]	; (8014a8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014a6a:	881a      	ldrh	r2, [r3, #0]
 8014a6c:	4b06      	ldr	r3, [pc, #24]	; (8014a88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014a6e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8014a70:	4b04      	ldr	r3, [pc, #16]	; (8014a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014a72:	2200      	movs	r2, #0
 8014a74:	701a      	strb	r2, [r3, #0]
    }
 8014a76:	bf00      	nop
 8014a78:	370c      	adds	r7, #12
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a80:	4770      	bx	lr
 8014a82:	bf00      	nop
 8014a84:	200057d8 	.word	0x200057d8
 8014a88:	200057d4 	.word	0x200057d4
 8014a8c:	200057da 	.word	0x200057da
 8014a90:	200057d6 	.word	0x200057d6
 8014a94:	200057dc 	.word	0x200057dc

08014a98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f002 f8dd 	bl	8016c62 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8014aa8:	bf00      	nop
 8014aaa:	3708      	adds	r7, #8
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
 8014ab8:	4a05      	ldr	r2, [pc, #20]	; (8014ad0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	601a      	str	r2, [r3, #0]
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7ff fecb 	bl	801485c <_ZN8touchgfx3HALD1Ev>
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3708      	adds	r7, #8
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}
 8014ad0:	0802ac58 	.word	0x0802ac58

08014ad4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b082      	sub	sp, #8
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f7ff ffe7 	bl	8014ab0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014ae2:	217c      	movs	r1, #124	; 0x7c
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f013 fda0 	bl	802862a <_ZdlPvj>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	4618      	mov	r0, r3
 8014aee:	3708      	adds	r7, #8
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}

08014af4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7ff ffca 	bl	8014a98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8014b04:	bf00      	nop
 8014b06:	3708      	adds	r7, #8
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}

08014b0c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	4618      	mov	r0, r3
 8014b18:	f001 f844 	bl	8015ba4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8014b1c:	bf00      	nop
 8014b1e:	3708      	adds	r7, #8
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}

08014b24 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f001 f8ba 	bl	8015ca8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8014b34:	4603      	mov	r3, r0
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3708      	adds	r7, #8
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}

08014b3e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8014b3e:	b580      	push	{r7, lr}
 8014b40:	b082      	sub	sp, #8
 8014b42:	af00      	add	r7, sp, #0
 8014b44:	6078      	str	r0, [r7, #4]
 8014b46:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6839      	ldr	r1, [r7, #0]
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f001 f8b9 	bl	8015cc4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8014b52:	bf00      	nop
 8014b54:	3708      	adds	r7, #8
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}

08014b5a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014b5a:	b580      	push	{r7, lr}
 8014b5c:	b082      	sub	sp, #8
 8014b5e:	af00      	add	r7, sp, #0
 8014b60:	6078      	str	r0, [r7, #4]
 8014b62:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	6839      	ldr	r1, [r7, #0]
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f001 f8c1 	bl	8015cf0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8014b6e:	bf00      	nop
 8014b70:	3708      	adds	r7, #8
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}

08014b76 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8014b76:	b580      	push	{r7, lr}
 8014b78:	b084      	sub	sp, #16
 8014b7a:	af00      	add	r7, sp, #0
 8014b7c:	60f8      	str	r0, [r7, #12]
 8014b7e:	60b9      	str	r1, [r7, #8]
 8014b80:	607a      	str	r2, [r7, #4]
 8014b82:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8014b84:	68f8      	ldr	r0, [r7, #12]
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	68b9      	ldr	r1, [r7, #8]
 8014b8c:	f001 f8fe 	bl	8015d8c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8014b90:	4603      	mov	r3, r0
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	3710      	adds	r7, #16
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}

08014b9a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8014b9a:	b580      	push	{r7, lr}
 8014b9c:	b082      	sub	sp, #8
 8014b9e:	af00      	add	r7, sp, #0
 8014ba0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f001 f82f 	bl	8015c08 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8014baa:	bf00      	nop
 8014bac:	3708      	adds	r7, #8
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}

08014bb2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8014bb2:	b580      	push	{r7, lr}
 8014bb4:	b082      	sub	sp, #8
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f001 f82f 	bl	8015c20 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8014bc2:	bf00      	nop
 8014bc4:	3708      	adds	r7, #8
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}

08014bca <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8014bca:	b580      	push	{r7, lr}
 8014bcc:	b082      	sub	sp, #8
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f001 f82e 	bl	8015c36 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8014bda:	bf00      	nop
 8014bdc:	3708      	adds	r7, #8
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}

08014be2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8014be2:	b580      	push	{r7, lr}
 8014be4:	b082      	sub	sp, #8
 8014be6:	af00      	add	r7, sp, #0
 8014be8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	4618      	mov	r0, r3
 8014bee:	f001 f82d 	bl	8015c4c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8014bf2:	bf00      	nop
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
	...

08014bfc <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b082      	sub	sp, #8
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
 8014c04:	4a05      	ldr	r2, [pc, #20]	; (8014c1c <_ZN11TouchGFXHALD1Ev+0x20>)
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	601a      	str	r2, [r3, #0]
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7ff ff4f 	bl	8014ab0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	4618      	mov	r0, r3
 8014c16:	3708      	adds	r7, #8
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}
 8014c1c:	0802aa54 	.word	0x0802aa54

08014c20 <_ZN11TouchGFXHALD0Ev>:
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b082      	sub	sp, #8
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f7ff ffe7 	bl	8014bfc <_ZN11TouchGFXHALD1Ev>
 8014c2e:	217c      	movs	r1, #124	; 0x7c
 8014c30:	6878      	ldr	r0, [r7, #4]
 8014c32:	f013 fcfa 	bl	802862a <_ZdlPvj>
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	4618      	mov	r0, r3
 8014c3a:	3708      	adds	r7, #8
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bd80      	pop	{r7, pc}

08014c40 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8014c44:	2200      	movs	r2, #0
 8014c46:	2101      	movs	r1, #1
 8014c48:	2001      	movs	r0, #1
 8014c4a:	f7f9 f9a8 	bl	800df9e <osSemaphoreNew>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	4a0f      	ldr	r2, [pc, #60]	; (8014c90 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014c52:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8014c54:	4b0e      	ldr	r3, [pc, #56]	; (8014c90 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d105      	bne.n	8014c68 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8014c5c:	4b0d      	ldr	r3, [pc, #52]	; (8014c94 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8014c5e:	4a0e      	ldr	r2, [pc, #56]	; (8014c98 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014c60:	2125      	movs	r1, #37	; 0x25
 8014c62:	480e      	ldr	r0, [pc, #56]	; (8014c9c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8014c64:	f013 fd10 	bl	8028688 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8014c68:	2200      	movs	r2, #0
 8014c6a:	2104      	movs	r1, #4
 8014c6c:	2001      	movs	r0, #1
 8014c6e:	f7f9 fab5 	bl	800e1dc <osMessageQueueNew>
 8014c72:	4603      	mov	r3, r0
 8014c74:	4a0a      	ldr	r2, [pc, #40]	; (8014ca0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8014c76:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8014c78:	4b09      	ldr	r3, [pc, #36]	; (8014ca0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d105      	bne.n	8014c8c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8014c80:	4b08      	ldr	r3, [pc, #32]	; (8014ca4 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8014c82:	4a05      	ldr	r2, [pc, #20]	; (8014c98 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014c84:	2129      	movs	r1, #41	; 0x29
 8014c86:	4805      	ldr	r0, [pc, #20]	; (8014c9c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8014c88:	f013 fcfe 	bl	8028688 <__assert_func>
}
 8014c8c:	bf00      	nop
 8014c8e:	bd80      	pop	{r7, pc}
 8014c90:	200052e0 	.word	0x200052e0
 8014c94:	0802a1b8 	.word	0x0802a1b8
 8014c98:	0802a204 	.word	0x0802a204
 8014c9c:	0802a234 	.word	0x0802a234
 8014ca0:	200052e4 	.word	0x200052e4
 8014ca4:	0802a260 	.word	0x0802a260

08014ca8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8014cac:	4b04      	ldr	r3, [pc, #16]	; (8014cc0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7f9 f9fb 	bl	800e0b0 <osSemaphoreAcquire>
}
 8014cba:	bf00      	nop
 8014cbc:	bd80      	pop	{r7, pc}
 8014cbe:	bf00      	nop
 8014cc0:	200052e0 	.word	0x200052e0

08014cc4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8014cc8:	4b03      	ldr	r3, [pc, #12]	; (8014cd8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7f9 fa41 	bl	800e154 <osSemaphoreRelease>
}
 8014cd2:	bf00      	nop
 8014cd4:	bd80      	pop	{r7, pc}
 8014cd6:	bf00      	nop
 8014cd8:	200052e0 	.word	0x200052e0

08014cdc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8014ce0:	4b03      	ldr	r3, [pc, #12]	; (8014cf0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	2100      	movs	r1, #0
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7f9 f9e2 	bl	800e0b0 <osSemaphoreAcquire>
}
 8014cec:	bf00      	nop
 8014cee:	bd80      	pop	{r7, pc}
 8014cf0:	200052e0 	.word	0x200052e0

08014cf4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8014cf8:	4b03      	ldr	r3, [pc, #12]	; (8014d08 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7f9 fa29 	bl	800e154 <osSemaphoreRelease>
}
 8014d02:	bf00      	nop
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	200052e0 	.word	0x200052e0

08014d0c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8014d10:	4b04      	ldr	r3, [pc, #16]	; (8014d24 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8014d12:	6818      	ldr	r0, [r3, #0]
 8014d14:	2300      	movs	r3, #0
 8014d16:	2200      	movs	r2, #0
 8014d18:	4903      	ldr	r1, [pc, #12]	; (8014d28 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8014d1a:	f7f9 fad3 	bl	800e2c4 <osMessageQueuePut>
}
 8014d1e:	bf00      	nop
 8014d20:	bd80      	pop	{r7, pc}
 8014d22:	bf00      	nop
 8014d24:	200052e4 	.word	0x200052e4
 8014d28:	2000016c 	.word	0x2000016c

08014d2c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b082      	sub	sp, #8
 8014d30:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8014d32:	4b09      	ldr	r3, [pc, #36]	; (8014d58 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014d34:	6818      	ldr	r0, [r3, #0]
 8014d36:	1d39      	adds	r1, r7, #4
 8014d38:	2300      	movs	r3, #0
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	f7f9 fb22 	bl	800e384 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8014d40:	4b05      	ldr	r3, [pc, #20]	; (8014d58 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014d42:	6818      	ldr	r0, [r3, #0]
 8014d44:	1d39      	adds	r1, r7, #4
 8014d46:	f04f 33ff 	mov.w	r3, #4294967295
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	f7f9 fb1a 	bl	800e384 <osMessageQueueGet>
}
 8014d50:	bf00      	nop
 8014d52:	3708      	adds	r7, #8
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}
 8014d58:	200052e4 	.word	0x200052e4

08014d5c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	4603      	mov	r3, r0
 8014d64:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8014d66:	88fb      	ldrh	r3, [r7, #6]
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7f9 f8fd 	bl	800df68 <osDelay>
}
 8014d6e:	bf00      	nop
 8014d70:	3708      	adds	r7, #8
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}

08014d76 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8014d76:	b480      	push	{r7}
 8014d78:	b083      	sub	sp, #12
 8014d7a:	af00      	add	r7, sp, #0
 8014d7c:	6078      	str	r0, [r7, #4]
        : color(0)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	2200      	movs	r2, #0
 8014d82:	601a      	str	r2, [r3, #0]
    }
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	4618      	mov	r0, r3
 8014d88:	370c      	adds	r7, #12
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d90:	4770      	bx	lr
	...

08014d94 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8014d94:	b480      	push	{r7}
 8014d96:	b083      	sub	sp, #12
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
    {
 8014d9c:	4a04      	ldr	r2, [pc, #16]	; (8014db0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	601a      	str	r2, [r3, #0]
    }
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	4618      	mov	r0, r3
 8014da6:	370c      	adds	r7, #12
 8014da8:	46bd      	mov	sp, r7
 8014daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dae:	4770      	bx	lr
 8014db0:	0802ab10 	.word	0x0802ab10

08014db4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b082      	sub	sp, #8
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
    }
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f7ff ffe9 	bl	8014d94 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014dc2:	2104      	movs	r1, #4
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f013 fc30 	bl	802862a <_ZdlPvj>
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	4618      	mov	r0, r3
 8014dce:	3708      	adds	r7, #8
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}

08014dd4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	3344      	adds	r3, #68	; 0x44
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	4798      	blx	r3
    }
 8014de8:	bf00      	nop
 8014dea:	3708      	adds	r7, #8
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8014df0:	b480      	push	{r7}
 8014df2:	b083      	sub	sp, #12
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
    {
 8014df8:	4a04      	ldr	r2, [pc, #16]	; (8014e0c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	601a      	str	r2, [r3, #0]
    }
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	4618      	mov	r0, r3
 8014e02:	370c      	adds	r7, #12
 8014e04:	46bd      	mov	sp, r7
 8014e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0a:	4770      	bx	lr
 8014e0c:	0802bac4 	.word	0x0802bac4

08014e10 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b082      	sub	sp, #8
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
    }
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f7ff ffe9 	bl	8014df0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8014e1e:	210c      	movs	r1, #12
 8014e20:	6878      	ldr	r0, [r7, #4]
 8014e22:	f013 fc02 	bl	802862a <_ZdlPvj>
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3708      	adds	r7, #8
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}

08014e30 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014e30:	b480      	push	{r7}
 8014e32:	b083      	sub	sp, #12
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8014e3a:	4a09      	ldr	r2, [pc, #36]	; (8014e60 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	601a      	str	r2, [r3, #0]
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	683a      	ldr	r2, [r7, #0]
 8014e44:	605a      	str	r2, [r3, #4]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	721a      	strb	r2, [r3, #8]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	725a      	strb	r2, [r3, #9]
    {
    }
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	4618      	mov	r0, r3
 8014e56:	370c      	adds	r7, #12
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5e:	4770      	bx	lr
 8014e60:	0802bac4 	.word	0x0802bac4

08014e64 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b082      	sub	sp, #8
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	685a      	ldr	r2, [r3, #4]
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	3314      	adds	r3, #20
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	4610      	mov	r0, r2
 8014e7c:	4798      	blx	r3
    }
 8014e7e:	bf00      	nop
 8014e80:	3708      	adds	r7, #8
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}
	...

08014e88 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8014e8c:	4b13      	ldr	r3, [pc, #76]	; (8014edc <DMA2D_IRQHandler+0x54>)
 8014e8e:	685b      	ldr	r3, [r3, #4]
 8014e90:	f003 0302 	and.w	r3, r3, #2
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	bf14      	ite	ne
 8014e98:	2301      	movne	r3, #1
 8014e9a:	2300      	moveq	r3, #0
 8014e9c:	b2db      	uxtb	r3, r3
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d019      	beq.n	8014ed6 <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8014ea2:	4b0e      	ldr	r3, [pc, #56]	; (8014edc <DMA2D_IRQHandler+0x54>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	bf14      	ite	ne
 8014eae:	2301      	movne	r3, #1
 8014eb0:	2300      	moveq	r3, #0
 8014eb2:	b2db      	uxtb	r3, r3
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d00e      	beq.n	8014ed6 <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8014eb8:	4b08      	ldr	r3, [pc, #32]	; (8014edc <DMA2D_IRQHandler+0x54>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	4a07      	ldr	r2, [pc, #28]	; (8014edc <DMA2D_IRQHandler+0x54>)
 8014ebe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014ec2:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8014ec4:	4b05      	ldr	r3, [pc, #20]	; (8014edc <DMA2D_IRQHandler+0x54>)
 8014ec6:	2202      	movs	r2, #2
 8014ec8:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8014eca:	f7fd f87b 	bl	8011fc4 <_ZN8touchgfx3HAL11getInstanceEv>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7ff ffc7 	bl	8014e64 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 8014ed6:	bf00      	nop
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	52001000 	.word	0x52001000

08014ee0 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b082      	sub	sp, #8
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	3318      	adds	r3, #24
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7ff ff42 	bl	8014d76 <_ZN8touchgfx9colortypeC1Ev>
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	3708      	adds	r7, #8
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}

08014efc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b082      	sub	sp, #8
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
 8014f04:	4a05      	ldr	r2, [pc, #20]	; (8014f1c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	601a      	str	r2, [r3, #0]
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f7ff ff41 	bl	8014d94 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	4618      	mov	r0, r3
 8014f16:	3708      	adds	r7, #8
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}
 8014f1c:	0802bb14 	.word	0x0802bb14

08014f20 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b082      	sub	sp, #8
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f7ff ffe7 	bl	8014efc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014f2e:	2114      	movs	r1, #20
 8014f30:	6878      	ldr	r0, [r7, #4]
 8014f32:	f013 fb7a 	bl	802862a <_ZdlPvj>
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	4618      	mov	r0, r3
 8014f3a:	3708      	adds	r7, #8
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	bd80      	pop	{r7, pc}

08014f40 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8014f40:	b480      	push	{r7}
 8014f42:	b083      	sub	sp, #12
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8014f48:	4a04      	ldr	r2, [pc, #16]	; (8014f5c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6013      	str	r3, [r2, #0]
    }
 8014f4e:	bf00      	nop
 8014f50:	370c      	adds	r7, #12
 8014f52:	46bd      	mov	sp, r7
 8014f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop
 8014f5c:	2000583c 	.word	0x2000583c

08014f60 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014f60:	b480      	push	{r7}
 8014f62:	b085      	sub	sp, #20
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	60f8      	str	r0, [r7, #12]
 8014f68:	60b9      	str	r1, [r7, #8]
 8014f6a:	607a      	str	r2, [r7, #4]
 8014f6c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8014f6e:	4a0b      	ldr	r2, [pc, #44]	; (8014f9c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	601a      	str	r2, [r3, #0]
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	68ba      	ldr	r2, [r7, #8]
 8014f78:	605a      	str	r2, [r3, #4]
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	687a      	ldr	r2, [r7, #4]
 8014f7e:	609a      	str	r2, [r3, #8]
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	683a      	ldr	r2, [r7, #0]
 8014f84:	60da      	str	r2, [r3, #12]
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	69ba      	ldr	r2, [r7, #24]
 8014f8a:	611a      	str	r2, [r3, #16]
    {
    }
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	4618      	mov	r0, r3
 8014f90:	3714      	adds	r7, #20
 8014f92:	46bd      	mov	sp, r7
 8014f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f98:	4770      	bx	lr
 8014f9a:	bf00      	nop
 8014f9c:	0802ac48 	.word	0x0802ac48

08014fa0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014fa0:	b480      	push	{r7}
 8014fa2:	b083      	sub	sp, #12
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
    {
 8014fa8:	4a04      	ldr	r2, [pc, #16]	; (8014fbc <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	601a      	str	r2, [r3, #0]
    }
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	370c      	adds	r7, #12
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fba:	4770      	bx	lr
 8014fbc:	0802ac48 	.word	0x0802ac48

08014fc0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
    }
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f7ff ffe9 	bl	8014fa0 <_ZN8touchgfx7MVPHeapD1Ev>
 8014fce:	2114      	movs	r1, #20
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f013 fb2a 	bl	802862a <_ZdlPvj>
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
    {
 8014fe8:	4a04      	ldr	r2, [pc, #16]	; (8014ffc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	601a      	str	r2, [r3, #0]
    }
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr
 8014ffc:	0802c018 	.word	0x0802c018

08015000 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8015000:	b580      	push	{r7, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
    }
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f7ff ffe9 	bl	8014fe0 <_ZN8touchgfx3LCDD1Ev>
 801500e:	2108      	movs	r1, #8
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f013 fb0a 	bl	802862a <_ZdlPvj>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	4618      	mov	r0, r3
 801501a:	3708      	adds	r7, #8
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}

08015020 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    virtual void initialize()
 8015020:	b480      	push	{r7}
 8015022:	b083      	sub	sp, #12
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
    }
 8015028:	bf00      	nop
 801502a:	370c      	adds	r7, #12
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr

08015034 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
    virtual DMAType getDMAType(void)
 8015034:	b480      	push	{r7}
 8015036:	b083      	sub	sp, #12
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
        return DMA_TYPE_GENERIC;
 801503c:	2300      	movs	r3, #0
    }
 801503e:	4618      	mov	r0, r3
 8015040:	370c      	adds	r7, #12
 8015042:	46bd      	mov	sp, r7
 8015044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015048:	4770      	bx	lr

0801504a <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801504a:	b480      	push	{r7}
 801504c:	b083      	sub	sp, #12
 801504e:	af00      	add	r7, sp, #0
 8015050:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2200      	movs	r2, #0
 8015056:	801a      	strh	r2, [r3, #0]
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2200      	movs	r2, #0
 801505c:	805a      	strh	r2, [r3, #2]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	2200      	movs	r2, #0
 8015062:	809a      	strh	r2, [r3, #4]
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2200      	movs	r2, #0
 8015068:	80da      	strh	r2, [r3, #6]
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	2200      	movs	r2, #0
 801506e:	811a      	strh	r2, [r3, #8]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2200      	movs	r2, #0
 8015074:	815a      	strh	r2, [r3, #10]
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2200      	movs	r2, #0
 801507a:	819a      	strh	r2, [r3, #12]
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2200      	movs	r2, #0
 8015080:	739a      	strb	r2, [r3, #14]
        {
        }
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	4618      	mov	r0, r3
 8015086:	370c      	adds	r7, #12
 8015088:	46bd      	mov	sp, r7
 801508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508e:	4770      	bx	lr

08015090 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	4618      	mov	r0, r3
 801509c:	f7ff ffd5 	bl	801504a <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2200      	movs	r2, #0
 80150a4:	611a      	str	r2, [r3, #16]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2200      	movs	r2, #0
 80150aa:	829a      	strh	r2, [r3, #20]
    {
    }
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	4618      	mov	r0, r3
 80150b0:	3708      	adds	r7, #8
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
	...

080150b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b084      	sub	sp, #16
 80150bc:	af00      	add	r7, sp, #0
 80150be:	60f8      	str	r0, [r7, #12]
 80150c0:	60b9      	str	r1, [r7, #8]
 80150c2:	607a      	str	r2, [r7, #4]
 80150c4:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 80150c6:	4a4a      	ldr	r2, [pc, #296]	; (80151f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	601a      	str	r2, [r3, #0]
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	68ba      	ldr	r2, [r7, #8]
 80150d0:	605a      	str	r2, [r3, #4]
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	687a      	ldr	r2, [r7, #4]
 80150d6:	609a      	str	r2, [r3, #8]
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	683a      	ldr	r2, [r7, #0]
 80150dc:	60da      	str	r2, [r3, #12]
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	2200      	movs	r2, #0
 80150e2:	611a      	str	r2, [r3, #16]
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	2200      	movs	r2, #0
 80150e8:	615a      	str	r2, [r3, #20]
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	2200      	movs	r2, #0
 80150ee:	619a      	str	r2, [r3, #24]
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	331c      	adds	r3, #28
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7ff ffcb 	bl	8015090 <_ZN8touchgfx8GesturesC1Ev>
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2200      	movs	r2, #0
 80150fe:	639a      	str	r2, [r3, #56]	; 0x38
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	2200      	movs	r2, #0
 8015104:	63da      	str	r2, [r3, #60]	; 0x3c
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	2200      	movs	r2, #0
 801510a:	641a      	str	r2, [r3, #64]	; 0x40
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	2200      	movs	r2, #0
 8015110:	645a      	str	r2, [r3, #68]	; 0x44
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	2200      	movs	r2, #0
 8015116:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	2201      	movs	r2, #1
 801511e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	2200      	movs	r2, #0
 8015126:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	2200      	movs	r2, #0
 801512e:	64da      	str	r2, [r3, #76]	; 0x4c
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	3350      	adds	r3, #80	; 0x50
 8015134:	4618      	mov	r0, r3
 8015136:	f7fe f839 	bl	80131ac <_ZN8touchgfx4RectC1Ev>
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	2201      	movs	r2, #1
 801513e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2200      	movs	r2, #0
 8015146:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	2200      	movs	r2, #0
 801514e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2201      	movs	r2, #1
 8015156:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	2200      	movs	r2, #0
 801515e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2200      	movs	r2, #0
 8015166:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2200      	movs	r2, #0
 801516e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	2200      	movs	r2, #0
 8015176:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	2200      	movs	r2, #0
 801517e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	2200      	movs	r2, #0
 8015186:	671a      	str	r2, [r3, #112]	; 0x70
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	2200      	movs	r2, #0
 801518c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2200      	movs	r2, #0
 8015194:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2201      	movs	r2, #1
 801519c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	2201      	movs	r2, #1
 80151a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80151a8:	4a12      	ldr	r2, [pc, #72]	; (80151f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80151ae:	4a12      	ldr	r2, [pc, #72]	; (80151f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 80151b0:	8b3b      	ldrh	r3, [r7, #24]
 80151b2:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80151b4:	4a11      	ldr	r2, [pc, #68]	; (80151fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 80151b6:	8bbb      	ldrh	r3, [r7, #28]
 80151b8:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80151ba:	4b11      	ldr	r3, [pc, #68]	; (8015200 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 80151bc:	2200      	movs	r2, #0
 80151be:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80151c0:	4b0d      	ldr	r3, [pc, #52]	; (80151f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 80151c2:	881a      	ldrh	r2, [r3, #0]
 80151c4:	4b0f      	ldr	r3, [pc, #60]	; (8015204 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 80151c6:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80151c8:	4b0c      	ldr	r3, [pc, #48]	; (80151fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 80151ca:	881a      	ldrh	r2, [r3, #0]
 80151cc:	4b0e      	ldr	r3, [pc, #56]	; (8015208 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 80151ce:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80151d0:	8b3a      	ldrh	r2, [r7, #24]
 80151d2:	8bbb      	ldrh	r3, [r7, #28]
 80151d4:	429a      	cmp	r2, r3
 80151d6:	bf34      	ite	cc
 80151d8:	2301      	movcc	r3, #1
 80151da:	2300      	movcs	r3, #0
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	461a      	mov	r2, r3
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	4618      	mov	r0, r3
 80151ea:	3710      	adds	r7, #16
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}
 80151f0:	0802b678 	.word	0x0802b678
 80151f4:	200057e0 	.word	0x200057e0
 80151f8:	200057d4 	.word	0x200057d4
 80151fc:	200057d6 	.word	0x200057d6
 8015200:	200057d8 	.word	0x200057d8
 8015204:	200057da 	.word	0x200057da
 8015208:	200057dc 	.word	0x200057dc

0801520c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801520c:	b580      	push	{r7, lr}
 801520e:	b082      	sub	sp, #8
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
 8015214:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8015216:	683b      	ldr	r3, [r7, #0]
 8015218:	4618      	mov	r0, r3
 801521a:	f7fd f903 	bl	8012424 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 801521e:	bf00      	nop
 8015220:	3708      	adds	r7, #8
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}
	...

08015228 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8015228:	b580      	push	{r7, lr}
 801522a:	b086      	sub	sp, #24
 801522c:	af02      	add	r7, sp, #8
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	607a      	str	r2, [r7, #4]
 8015234:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8015236:	68f8      	ldr	r0, [r7, #12]
 8015238:	69bb      	ldr	r3, [r7, #24]
 801523a:	9300      	str	r3, [sp, #0]
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	687a      	ldr	r2, [r7, #4]
 8015240:	68b9      	ldr	r1, [r7, #8]
 8015242:	f7ff fe8d 	bl	8014f60 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8015246:	4a04      	ldr	r2, [pc, #16]	; (8015258 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	601a      	str	r2, [r3, #0]
    {

    }
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	4618      	mov	r0, r3
 8015250:	3710      	adds	r7, #16
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}
 8015256:	bf00      	nop
 8015258:	0802ac34 	.word	0x0802ac34

0801525c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801525c:	b580      	push	{r7, lr}
 801525e:	af00      	add	r7, sp, #0
 8015260:	4801      	ldr	r0, [pc, #4]	; (8015268 <__tcf_0+0xc>)
 8015262:	f000 f9e5 	bl	8015630 <_ZN12FrontendHeapD1Ev>
 8015266:	bd80      	pop	{r7, pc}
 8015268:	200052e8 	.word	0x200052e8

0801526c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801526c:	b580      	push	{r7, lr}
 801526e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8015270:	4b12      	ldr	r3, [pc, #72]	; (80152bc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8015272:	781b      	ldrb	r3, [r3, #0]
 8015274:	f3bf 8f5b 	dmb	ish
 8015278:	b2db      	uxtb	r3, r3
 801527a:	f003 0301 	and.w	r3, r3, #1
 801527e:	2b00      	cmp	r3, #0
 8015280:	bf0c      	ite	eq
 8015282:	2301      	moveq	r3, #1
 8015284:	2300      	movne	r3, #0
 8015286:	b2db      	uxtb	r3, r3
 8015288:	2b00      	cmp	r3, #0
 801528a:	d013      	beq.n	80152b4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 801528c:	480b      	ldr	r0, [pc, #44]	; (80152bc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801528e:	f013 f9ce 	bl	802862e <__cxa_guard_acquire>
 8015292:	4603      	mov	r3, r0
 8015294:	2b00      	cmp	r3, #0
 8015296:	bf14      	ite	ne
 8015298:	2301      	movne	r3, #1
 801529a:	2300      	moveq	r3, #0
 801529c:	b2db      	uxtb	r3, r3
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d008      	beq.n	80152b4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80152a2:	4807      	ldr	r0, [pc, #28]	; (80152c0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80152a4:	f000 f868 	bl	8015378 <_ZN12FrontendHeapC1Ev>
 80152a8:	4806      	ldr	r0, [pc, #24]	; (80152c4 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80152aa:	f013 fa0b 	bl	80286c4 <atexit>
 80152ae:	4803      	ldr	r0, [pc, #12]	; (80152bc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80152b0:	f013 f9c9 	bl	8028646 <__cxa_guard_release>
        return instance;
 80152b4:	4b02      	ldr	r3, [pc, #8]	; (80152c0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80152b6:	4618      	mov	r0, r3
 80152b8:	bd80      	pop	{r7, pc}
 80152ba:	bf00      	nop
 80152bc:	20005690 	.word	0x20005690
 80152c0:	200052e8 	.word	0x200052e8
 80152c4:	0801525d 	.word	0x0801525d

080152c8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	4a05      	ldr	r2, [pc, #20]	; (80152e8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	601a      	str	r2, [r3, #0]
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	4618      	mov	r0, r3
 80152da:	f7ff fe61 	bl	8014fa0 <_ZN8touchgfx7MVPHeapD1Ev>
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	4618      	mov	r0, r3
 80152e2:	3708      	adds	r7, #8
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bd80      	pop	{r7, pc}
 80152e8:	0802ac34 	.word	0x0802ac34

080152ec <_ZN16FrontendHeapBaseD0Ev>:
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7ff ffe7 	bl	80152c8 <_ZN16FrontendHeapBaseD1Ev>
 80152fa:	2114      	movs	r1, #20
 80152fc:	6878      	ldr	r0, [r7, #4]
 80152fe:	f013 f994 	bl	802862a <_ZdlPvj>
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	4618      	mov	r0, r3
 8015306:	3708      	adds	r7, #8
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}

0801530c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801530c:	b580      	push	{r7, lr}
 801530e:	b082      	sub	sp, #8
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	4618      	mov	r0, r3
 8015318:	f000 fec6 	bl	80160a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801531c:	4a03      	ldr	r2, [pc, #12]	; (801532c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	601a      	str	r2, [r3, #0]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	4618      	mov	r0, r3
 8015326:	3708      	adds	r7, #8
 8015328:	46bd      	mov	sp, r7
 801532a:	bd80      	pop	{r7, pc}
 801532c:	0802ac00 	.word	0x0802ac00

08015330 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	4618      	mov	r0, r3
 801533c:	f000 feb4 	bl	80160a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015340:	4a03      	ldr	r2, [pc, #12]	; (8015350 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	601a      	str	r2, [r3, #0]
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	4618      	mov	r0, r3
 801534a:	3708      	adds	r7, #8
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}
 8015350:	0802abcc 	.word	0x0802abcc

08015354 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8015354:	b580      	push	{r7, lr}
 8015356:	b082      	sub	sp, #8
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	4618      	mov	r0, r3
 8015360:	f000 fea2 	bl	80160a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015364:	4a03      	ldr	r2, [pc, #12]	; (8015374 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	601a      	str	r2, [r3, #0]
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	4618      	mov	r0, r3
 801536e:	3708      	adds	r7, #8
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}
 8015374:	0802ab98 	.word	0x0802ab98

08015378 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015378:	b590      	push	{r4, r7, lr}
 801537a:	b085      	sub	sp, #20
 801537c:	af02      	add	r7, sp, #8
 801537e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8015380:	6878      	ldr	r0, [r7, #4]
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f103 0114 	add.w	r1, r3, #20
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f503 74f8 	add.w	r4, r3, #496	; 0x1f0
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f503 7314 	add.w	r3, r3, #592	; 0x250
                     app(model, *this)
 801539a:	9300      	str	r3, [sp, #0]
 801539c:	4623      	mov	r3, r4
 801539e:	f7ff ff43 	bl	8015228 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80153a2:	4a18      	ldr	r2, [pc, #96]	; (8015404 <_ZN12FrontendHeapC1Ev+0x8c>)
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	601a      	str	r2, [r3, #0]
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	3314      	adds	r3, #20
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7ff ffad 	bl	801530c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	332c      	adds	r3, #44	; 0x2c
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7ff ffba 	bl	8015330 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7ff ffc6 	bl	8015354 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7fe ffb6 	bl	8014340 <_ZN5ModelC1Ev>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f503 7014 	add.w	r0, r3, #592	; 0x250
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80153e0:	687a      	ldr	r2, [r7, #4]
 80153e2:	4619      	mov	r1, r3
 80153e4:	f7fe ff96 	bl	8014314 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80153e8:	687a      	ldr	r2, [r7, #4]
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80153f0:	4619      	mov	r1, r3
 80153f2:	4610      	mov	r0, r2
 80153f4:	f7ff ff0a 	bl	801520c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	4618      	mov	r0, r3
 80153fc:	370c      	adds	r7, #12
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd90      	pop	{r4, r7, pc}
 8015402:	bf00      	nop
 8015404:	0802ab84 	.word	0x0802ab84

08015408 <_ZN8touchgfx5NoDMAC1Ev>:
 * @see DMA_Interface
 */
class NoDMA : public DMA_Interface
{
public:
    NoDMA()
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
        : DMA_Interface(q), q(&b, 1)
 8015410:	687a      	ldr	r2, [r7, #4]
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	330c      	adds	r3, #12
 8015416:	4619      	mov	r1, r3
 8015418:	4610      	mov	r0, r2
 801541a:	f7ff fd09 	bl	8014e30 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801541e:	4a0b      	ldr	r2, [pc, #44]	; (801544c <_ZN8touchgfx5NoDMAC1Ev+0x44>)
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	601a      	str	r2, [r3, #0]
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	f103 000c 	add.w	r0, r3, #12
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	3320      	adds	r3, #32
 801542e:	2201      	movs	r2, #1
 8015430:	4619      	mov	r1, r3
 8015432:	f002 faeb 	bl	8017a0c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	3320      	adds	r3, #32
 801543a:	4618      	mov	r0, r3
 801543c:	f7ff fd50 	bl	8014ee0 <_ZN8touchgfx6BlitOpC1Ev>
    {
    }
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	4618      	mov	r0, r3
 8015444:	3708      	adds	r7, #8
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop
 801544c:	0802ab34 	.word	0x0802ab34

08015450 <_ZN8touchgfx5NoDMA11getBlitCapsEv>:
    /**
     * No blit operations supported by this DMA implementation.
     *
     * @return Zero (no blit ops supported).
     */
    virtual BlitOperations getBlitCaps()
 8015450:	b480      	push	{r7}
 8015452:	b083      	sub	sp, #12
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
    {
        return static_cast<BlitOperations>(0);
 8015458:	2300      	movs	r3, #0
    }
 801545a:	4618      	mov	r0, r3
 801545c:	370c      	adds	r7, #12
 801545e:	46bd      	mov	sp, r7
 8015460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015464:	4770      	bx	lr
	...

08015468 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE>:
    /**
     * Asserts if used.
     *
     * @param  blitOp The blit operation to be performed by this DMA instance.
     */
    virtual void setupDataCopy(const BlitOp& blitOp)
 8015468:	b580      	push	{r7, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
 8015470:	6039      	str	r1, [r7, #0]
    {
        assert(0 && "DMA operation not supported");
 8015472:	4b03      	ldr	r3, [pc, #12]	; (8015480 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x18>)
 8015474:	4a03      	ldr	r2, [pc, #12]	; (8015484 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x1c>)
 8015476:	213c      	movs	r1, #60	; 0x3c
 8015478:	4803      	ldr	r0, [pc, #12]	; (8015488 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x20>)
 801547a:	f013 f905 	bl	8028688 <__assert_func>
 801547e:	bf00      	nop
 8015480:	0802a2a4 	.word	0x0802a2a4
 8015484:	0802a2c8 	.word	0x0802a2c8
 8015488:	0802a310 	.word	0x0802a310

0801548c <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE>:
    /**
     * Asserts if used.
     *
     * @param  blitOp The blit operation to be performed by this DMA instance.
     */
    virtual void setupDataFill(const BlitOp& blitOp)
 801548c:	b580      	push	{r7, lr}
 801548e:	b082      	sub	sp, #8
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
 8015494:	6039      	str	r1, [r7, #0]
    {
        assert(0 && "DMA operation not supported");
 8015496:	4b03      	ldr	r3, [pc, #12]	; (80154a4 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x18>)
 8015498:	4a03      	ldr	r2, [pc, #12]	; (80154a8 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x1c>)
 801549a:	2146      	movs	r1, #70	; 0x46
 801549c:	4803      	ldr	r0, [pc, #12]	; (80154ac <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x20>)
 801549e:	f013 f8f3 	bl	8028688 <__assert_func>
 80154a2:	bf00      	nop
 80154a4:	0802a2a4 	.word	0x0802a2a4
 80154a8:	0802a354 	.word	0x0802a354
 80154ac:	0802a310 	.word	0x0802a310

080154b0 <_ZN8touchgfx5NoDMA18signalDMAInterruptEv>:
    }

    /** Does nothing. */
    virtual void signalDMAInterrupt()
 80154b0:	b480      	push	{r7}
 80154b2:	b083      	sub	sp, #12
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
    {
    }
 80154b8:	bf00      	nop
 80154ba:	370c      	adds	r7, #12
 80154bc:	46bd      	mov	sp, r7
 80154be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c2:	4770      	bx	lr

080154c4 <_ZN8touchgfx5NoDMA5flushEv>:

    /**
     * Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 80154c4:	b480      	push	{r7}
 80154c6:	b083      	sub	sp, #12
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
    {
    }
 80154cc:	bf00      	nop
 80154ce:	370c      	adds	r7, #12
 80154d0:	46bd      	mov	sp, r7
 80154d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d6:	4770      	bx	lr

080154d8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80154d8:	b580      	push	{r7, lr}
 80154da:	b086      	sub	sp, #24
 80154dc:	af02      	add	r7, sp, #8
 80154de:	60f8      	str	r0, [r7, #12]
 80154e0:	60b9      	str	r1, [r7, #8]
 80154e2:	607a      	str	r2, [r7, #4]
 80154e4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80154e6:	68f8      	ldr	r0, [r7, #12]
 80154e8:	8bbb      	ldrh	r3, [r7, #28]
 80154ea:	9301      	str	r3, [sp, #4]
 80154ec:	8b3b      	ldrh	r3, [r7, #24]
 80154ee:	9300      	str	r3, [sp, #0]
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	687a      	ldr	r2, [r7, #4]
 80154f4:	68b9      	ldr	r1, [r7, #8]
 80154f6:	f7ff fddf 	bl	80150b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80154fa:	4a04      	ldr	r2, [pc, #16]	; (801550c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	601a      	str	r2, [r3, #0]
    }
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	4618      	mov	r0, r3
 8015504:	3710      	adds	r7, #16
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}
 801550a:	bf00      	nop
 801550c:	0802ac58 	.word	0x0802ac58

08015510 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8015510:	b580      	push	{r7, lr}
 8015512:	b086      	sub	sp, #24
 8015514:	af02      	add	r7, sp, #8
 8015516:	60f8      	str	r0, [r7, #12]
 8015518:	60b9      	str	r1, [r7, #8]
 801551a:	607a      	str	r2, [r7, #4]
 801551c:	603b      	str	r3, [r7, #0]
 801551e:	68f8      	ldr	r0, [r7, #12]
 8015520:	8bbb      	ldrh	r3, [r7, #28]
 8015522:	9301      	str	r3, [sp, #4]
 8015524:	8b3b      	ldrh	r3, [r7, #24]
 8015526:	9300      	str	r3, [sp, #0]
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	687a      	ldr	r2, [r7, #4]
 801552c:	68b9      	ldr	r1, [r7, #8]
 801552e:	f7ff ffd3 	bl	80154d8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015532:	4a04      	ldr	r2, [pc, #16]	; (8015544 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	601a      	str	r2, [r3, #0]
    }
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	4618      	mov	r0, r3
 801553c:	3710      	adds	r7, #16
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	0802aa54 	.word	0x0802aa54

08015548 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8015548:	b480      	push	{r7}
 801554a:	b083      	sub	sp, #12
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
 8015550:	4a04      	ldr	r2, [pc, #16]	; (8015564 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	601a      	str	r2, [r3, #0]
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	4618      	mov	r0, r3
 801555a:	370c      	adds	r7, #12
 801555c:	46bd      	mov	sp, r7
 801555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015562:	4770      	bx	lr
 8015564:	0802aa3c 	.word	0x0802aa3c

08015568 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8015568:	b580      	push	{r7, lr}
 801556a:	b082      	sub	sp, #8
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	4618      	mov	r0, r3
 8015574:	f7ff ffe8 	bl	8015548 <_ZN8touchgfx15TouchControllerC1Ev>
 8015578:	4a03      	ldr	r2, [pc, #12]	; (8015588 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	601a      	str	r2, [r3, #0]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	4618      	mov	r0, r3
 8015582:	3708      	adds	r7, #8
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}
 8015588:	0802aa24 	.word	0x0802aa24

0801558c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 801558c:	b590      	push	{r4, r7, lr}
 801558e:	b085      	sub	sp, #20
 8015590:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8015592:	f7fe fc99 	bl	8013ec8 <_ZN14BitmapDatabase11getInstanceEv>
 8015596:	4604      	mov	r4, r0
 8015598:	f7fe fca0 	bl	8013edc <_ZN14BitmapDatabase15getInstanceSizeEv>
 801559c:	4603      	mov	r3, r0
 801559e:	4619      	mov	r1, r3
 80155a0:	2300      	movs	r3, #0
 80155a2:	9300      	str	r3, [sp, #0]
 80155a4:	2300      	movs	r3, #0
 80155a6:	2200      	movs	r2, #0
 80155a8:	4620      	mov	r0, r4
 80155aa:	f007 fa2f 	bl	801ca0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80155ae:	4809      	ldr	r0, [pc, #36]	; (80155d4 <touchgfx_init+0x48>)
 80155b0:	f7ff fcc6 	bl	8014f40 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80155b4:	2000      	movs	r0, #0
 80155b6:	f7fe fdcb 	bl	8014150 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80155ba:	4807      	ldr	r0, [pc, #28]	; (80155d8 <touchgfx_init+0x4c>)
 80155bc:	f007 f968 	bl	801c890 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80155c0:	f7ff fe54 	bl	801526c <_ZN12FrontendHeap11getInstanceEv>
 80155c4:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 80155c6:	4805      	ldr	r0, [pc, #20]	; (80155dc <touchgfx_init+0x50>)
 80155c8:	f7ff faa0 	bl	8014b0c <_ZN11TouchGFXHAL10initializeEv>
}
 80155cc:	bf00      	nop
 80155ce:	370c      	adds	r7, #12
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd90      	pop	{r4, r7, pc}
 80155d4:	20005750 	.word	0x20005750
 80155d8:	20000170 	.word	0x20000170
 80155dc:	20005754 	.word	0x20005754

080155e0 <_ZN8touchgfx5NoDMAD1Ev>:
class NoDMA : public DMA_Interface
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	4a08      	ldr	r2, [pc, #32]	; (801560c <_ZN8touchgfx5NoDMAD1Ev+0x2c>)
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	601a      	str	r2, [r3, #0]
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	330c      	adds	r3, #12
 80155f2:	4618      	mov	r0, r3
 80155f4:	f7ff fc82 	bl	8014efc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7ff fbf8 	bl	8014df0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	4618      	mov	r0, r3
 8015604:	3708      	adds	r7, #8
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}
 801560a:	bf00      	nop
 801560c:	0802ab34 	.word	0x0802ab34

08015610 <_ZN8touchgfx5NoDMAD0Ev>:
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f7ff ffe1 	bl	80155e0 <_ZN8touchgfx5NoDMAD1Ev>
 801561e:	2140      	movs	r1, #64	; 0x40
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f013 f802 	bl	802862a <_ZdlPvj>
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	4618      	mov	r0, r3
 801562a:	3708      	adds	r7, #8
 801562c:	46bd      	mov	sp, r7
 801562e:	bd80      	pop	{r7, pc}

08015630 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015630:	b580      	push	{r7, lr}
 8015632:	b082      	sub	sp, #8
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
 8015638:	4a10      	ldr	r2, [pc, #64]	; (801567c <_ZN12FrontendHeapD1Ev+0x4c>)
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	601a      	str	r2, [r3, #0]
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8015644:	4618      	mov	r0, r3
 8015646:	f7fe fe2f 	bl	80142a8 <_ZN19FrontendApplicationD1Ev>
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8015650:	4618      	mov	r0, r3
 8015652:	f000 f827 	bl	80156a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	332c      	adds	r3, #44	; 0x2c
 801565a:	4618      	mov	r0, r3
 801565c:	f000 f844 	bl	80156e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	3314      	adds	r3, #20
 8015664:	4618      	mov	r0, r3
 8015666:	f000 f863 	bl	8015730 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	4618      	mov	r0, r3
 801566e:	f7ff fe2b 	bl	80152c8 <_ZN16FrontendHeapBaseD1Ev>
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	4618      	mov	r0, r3
 8015676:	3708      	adds	r7, #8
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}
 801567c:	0802ab84 	.word	0x0802ab84

08015680 <_ZN12FrontendHeapD0Ev>:
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	6878      	ldr	r0, [r7, #4]
 801568a:	f7ff ffd1 	bl	8015630 <_ZN12FrontendHeapD1Ev>
 801568e:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f012 ffc9 	bl	802862a <_ZdlPvj>
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	4618      	mov	r0, r3
 801569c:	3708      	adds	r7, #8
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}
	...

080156a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b082      	sub	sp, #8
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
 80156ac:	4a05      	ldr	r2, [pc, #20]	; (80156c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	601a      	str	r2, [r3, #0]
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	4618      	mov	r0, r3
 80156b6:	f000 fcf5 	bl	80160a4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	4618      	mov	r0, r3
 80156be:	3708      	adds	r7, #8
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}
 80156c4:	0802ab98 	.word	0x0802ab98

080156c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b082      	sub	sp, #8
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
 80156d0:	6878      	ldr	r0, [r7, #4]
 80156d2:	f7ff ffe7 	bl	80156a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80156d6:	215c      	movs	r1, #92	; 0x5c
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f012 ffa6 	bl	802862a <_ZdlPvj>
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	4618      	mov	r0, r3
 80156e2:	3708      	adds	r7, #8
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}

080156e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b082      	sub	sp, #8
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	4a05      	ldr	r2, [pc, #20]	; (8015708 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	601a      	str	r2, [r3, #0]
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	4618      	mov	r0, r3
 80156fa:	f000 fcd3 	bl	80160a4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	4618      	mov	r0, r3
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}
 8015708:	0802abcc 	.word	0x0802abcc

0801570c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801570c:	b580      	push	{r7, lr}
 801570e:	b082      	sub	sp, #8
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f7ff ffe7 	bl	80156e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801571a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f012 ff83 	bl	802862a <_ZdlPvj>
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	4618      	mov	r0, r3
 8015728:	3708      	adds	r7, #8
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}
	...

08015730 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
 8015738:	4a05      	ldr	r2, [pc, #20]	; (8015750 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	601a      	str	r2, [r3, #0]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	4618      	mov	r0, r3
 8015742:	f000 fcaf 	bl	80160a4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	4618      	mov	r0, r3
 801574a:	3708      	adds	r7, #8
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	0802ac00 	.word	0x0802ac00

08015754 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f7ff ffe7 	bl	8015730 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015762:	2118      	movs	r1, #24
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f012 ff60 	bl	802862a <_ZdlPvj>
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	4618      	mov	r0, r3
 801576e:	3708      	adds	r7, #8
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}

08015774 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	4a05      	ldr	r2, [pc, #20]	; (8015794 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	601a      	str	r2, [r3, #0]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	4618      	mov	r0, r3
 8015786:	f7ff fc2b 	bl	8014fe0 <_ZN8touchgfx3LCDD1Ev>
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	4618      	mov	r0, r3
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}
 8015794:	0802d1f8 	.word	0x0802d1f8

08015798 <_ZN8touchgfx8LCD16bppD0Ev>:
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
 80157a0:	6878      	ldr	r0, [r7, #4]
 80157a2:	f7ff ffe7 	bl	8015774 <_ZN8touchgfx8LCD16bppD1Ev>
 80157a6:	2178      	movs	r1, #120	; 0x78
 80157a8:	6878      	ldr	r0, [r7, #4]
 80157aa:	f012 ff3e 	bl	802862a <_ZdlPvj>
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	4618      	mov	r0, r3
 80157b2:	3708      	adds	r7, #8
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}

080157b8 <_Z41__static_initialization_and_destruction_0ii>:
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
}
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b084      	sub	sp, #16
 80157bc:	af02      	add	r7, sp, #8
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	6039      	str	r1, [r7, #0]
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	2b01      	cmp	r3, #1
 80157c6:	d119      	bne.n	80157fc <_Z41__static_initialization_and_destruction_0ii+0x44>
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157ce:	4293      	cmp	r3, r2
 80157d0:	d114      	bne.n	80157fc <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80157d2:	4818      	ldr	r0, [pc, #96]	; (8015834 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80157d4:	f7ff fec8 	bl	8015568 <_ZN20STM32TouchControllerC1Ev>
static NoDMA dma;
 80157d8:	4817      	ldr	r0, [pc, #92]	; (8015838 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80157da:	f7ff fe15 	bl	8015408 <_ZN8touchgfx5NoDMAC1Ev>
static LCD16bpp display;
 80157de:	4817      	ldr	r0, [pc, #92]	; (801583c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80157e0:	f00a f998 	bl	801fb14 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80157e4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80157e8:	9301      	str	r3, [sp, #4]
 80157ea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80157ee:	9300      	str	r3, [sp, #0]
 80157f0:	4b10      	ldr	r3, [pc, #64]	; (8015834 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80157f2:	4a12      	ldr	r2, [pc, #72]	; (801583c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80157f4:	4910      	ldr	r1, [pc, #64]	; (8015838 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80157f6:	4812      	ldr	r0, [pc, #72]	; (8015840 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80157f8:	f7ff fe8a 	bl	8015510 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d113      	bne.n	801582a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015808:	4293      	cmp	r3, r2
 801580a:	d10e      	bne.n	801582a <_Z41__static_initialization_and_destruction_0ii+0x72>
 801580c:	480c      	ldr	r0, [pc, #48]	; (8015840 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801580e:	f7ff f9f5 	bl	8014bfc <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8015812:	480c      	ldr	r0, [pc, #48]	; (8015844 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8015814:	f7fb ff04 	bl	8011620 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8015818:	4808      	ldr	r0, [pc, #32]	; (801583c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801581a:	f7ff ffab 	bl	8015774 <_ZN8touchgfx8LCD16bppD1Ev>
static NoDMA dma;
 801581e:	4806      	ldr	r0, [pc, #24]	; (8015838 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015820:	f7ff fede 	bl	80155e0 <_ZN8touchgfx5NoDMAD1Ev>
static STM32TouchController tc;
 8015824:	4803      	ldr	r0, [pc, #12]	; (8015834 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8015826:	f7fe ffd5 	bl	80147d4 <_ZN20STM32TouchControllerD1Ev>
}
 801582a:	bf00      	nop
 801582c:	3708      	adds	r7, #8
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
 8015832:	bf00      	nop
 8015834:	20005694 	.word	0x20005694
 8015838:	20005698 	.word	0x20005698
 801583c:	200056d8 	.word	0x200056d8
 8015840:	20005754 	.word	0x20005754
 8015844:	20000170 	.word	0x20000170

08015848 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8015848:	b480      	push	{r7}
 801584a:	b083      	sub	sp, #12
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015850:	2301      	movs	r3, #1
    }
 8015852:	4618      	mov	r0, r3
 8015854:	370c      	adds	r7, #12
 8015856:	46bd      	mov	sp, r7
 8015858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585c:	4770      	bx	lr

0801585e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 801585e:	b480      	push	{r7}
 8015860:	b083      	sub	sp, #12
 8015862:	af00      	add	r7, sp, #0
 8015864:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8015866:	2354      	movs	r3, #84	; 0x54
    }
 8015868:	4618      	mov	r0, r3
 801586a:	370c      	adds	r7, #12
 801586c:	46bd      	mov	sp, r7
 801586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015872:	4770      	bx	lr

08015874 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8015874:	b480      	push	{r7}
 8015876:	b083      	sub	sp, #12
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
 801587c:	460b      	mov	r3, r1
 801587e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015880:	887b      	ldrh	r3, [r7, #2]
 8015882:	2254      	movs	r2, #84	; 0x54
 8015884:	fb02 f303 	mul.w	r3, r2, r3
 8015888:	3308      	adds	r3, #8
 801588a:	687a      	ldr	r2, [r7, #4]
 801588c:	4413      	add	r3, r2
    }
 801588e:	4618      	mov	r0, r3
 8015890:	370c      	adds	r7, #12
 8015892:	46bd      	mov	sp, r7
 8015894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015898:	4770      	bx	lr

0801589a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 801589a:	b480      	push	{r7}
 801589c:	b083      	sub	sp, #12
 801589e:	af00      	add	r7, sp, #0
 80158a0:	6078      	str	r0, [r7, #4]
 80158a2:	460b      	mov	r3, r1
 80158a4:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80158a6:	887b      	ldrh	r3, [r7, #2]
 80158a8:	2254      	movs	r2, #84	; 0x54
 80158aa:	fb02 f303 	mul.w	r3, r2, r3
 80158ae:	3308      	adds	r3, #8
 80158b0:	687a      	ldr	r2, [r7, #4]
 80158b2:	4413      	add	r3, r2
    }
 80158b4:	4618      	mov	r0, r3
 80158b6:	370c      	adds	r7, #12
 80158b8:	46bd      	mov	sp, r7
 80158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158be:	4770      	bx	lr

080158c0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80158c0:	b480      	push	{r7}
 80158c2:	b083      	sub	sp, #12
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80158c8:	2301      	movs	r3, #1
    }
 80158ca:	4618      	mov	r0, r3
 80158cc:	370c      	adds	r7, #12
 80158ce:	46bd      	mov	sp, r7
 80158d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d4:	4770      	bx	lr

080158d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80158d6:	b480      	push	{r7}
 80158d8:	b083      	sub	sp, #12
 80158da:	af00      	add	r7, sp, #0
 80158dc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80158de:	f44f 73de 	mov.w	r3, #444	; 0x1bc
    }
 80158e2:	4618      	mov	r0, r3
 80158e4:	370c      	adds	r7, #12
 80158e6:	46bd      	mov	sp, r7
 80158e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ec:	4770      	bx	lr

080158ee <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80158ee:	b480      	push	{r7}
 80158f0:	b083      	sub	sp, #12
 80158f2:	af00      	add	r7, sp, #0
 80158f4:	6078      	str	r0, [r7, #4]
 80158f6:	460b      	mov	r3, r1
 80158f8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80158fa:	887b      	ldrh	r3, [r7, #2]
 80158fc:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8015900:	fb02 f303 	mul.w	r3, r2, r3
 8015904:	3308      	adds	r3, #8
 8015906:	687a      	ldr	r2, [r7, #4]
 8015908:	4413      	add	r3, r2
    }
 801590a:	4618      	mov	r0, r3
 801590c:	370c      	adds	r7, #12
 801590e:	46bd      	mov	sp, r7
 8015910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015914:	4770      	bx	lr

08015916 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015916:	b480      	push	{r7}
 8015918:	b083      	sub	sp, #12
 801591a:	af00      	add	r7, sp, #0
 801591c:	6078      	str	r0, [r7, #4]
 801591e:	460b      	mov	r3, r1
 8015920:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015922:	887b      	ldrh	r3, [r7, #2]
 8015924:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8015928:	fb02 f303 	mul.w	r3, r2, r3
 801592c:	3308      	adds	r3, #8
 801592e:	687a      	ldr	r2, [r7, #4]
 8015930:	4413      	add	r3, r2
    }
 8015932:	4618      	mov	r0, r3
 8015934:	370c      	adds	r7, #12
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr

0801593e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801593e:	b480      	push	{r7}
 8015940:	b083      	sub	sp, #12
 8015942:	af00      	add	r7, sp, #0
 8015944:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015946:	2301      	movs	r3, #1
    }
 8015948:	4618      	mov	r0, r3
 801594a:	370c      	adds	r7, #12
 801594c:	46bd      	mov	sp, r7
 801594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015952:	4770      	bx	lr

08015954 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015954:	b480      	push	{r7}
 8015956:	b083      	sub	sp, #12
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801595c:	2310      	movs	r3, #16
    }
 801595e:	4618      	mov	r0, r3
 8015960:	370c      	adds	r7, #12
 8015962:	46bd      	mov	sp, r7
 8015964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015968:	4770      	bx	lr

0801596a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801596a:	b480      	push	{r7}
 801596c:	b083      	sub	sp, #12
 801596e:	af00      	add	r7, sp, #0
 8015970:	6078      	str	r0, [r7, #4]
 8015972:	460b      	mov	r3, r1
 8015974:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015976:	887b      	ldrh	r3, [r7, #2]
 8015978:	011b      	lsls	r3, r3, #4
 801597a:	3308      	adds	r3, #8
 801597c:	687a      	ldr	r2, [r7, #4]
 801597e:	4413      	add	r3, r2
    }
 8015980:	4618      	mov	r0, r3
 8015982:	370c      	adds	r7, #12
 8015984:	46bd      	mov	sp, r7
 8015986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598a:	4770      	bx	lr

0801598c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801598c:	b480      	push	{r7}
 801598e:	b083      	sub	sp, #12
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	460b      	mov	r3, r1
 8015996:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015998:	887b      	ldrh	r3, [r7, #2]
 801599a:	011b      	lsls	r3, r3, #4
 801599c:	3308      	adds	r3, #8
 801599e:	687a      	ldr	r2, [r7, #4]
 80159a0:	4413      	add	r3, r2
    }
 80159a2:	4618      	mov	r0, r3
 80159a4:	370c      	adds	r7, #12
 80159a6:	46bd      	mov	sp, r7
 80159a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ac:	4770      	bx	lr

080159ae <_GLOBAL__sub_I_touchgfx_init>:
 80159ae:	b580      	push	{r7, lr}
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80159b6:	2001      	movs	r0, #1
 80159b8:	f7ff fefe 	bl	80157b8 <_Z41__static_initialization_and_destruction_0ii>
 80159bc:	bd80      	pop	{r7, pc}

080159be <_GLOBAL__sub_D_touchgfx_init>:
 80159be:	b580      	push	{r7, lr}
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80159c6:	2000      	movs	r0, #0
 80159c8:	f7ff fef6 	bl	80157b8 <_Z41__static_initialization_and_destruction_0ii>
 80159cc:	bd80      	pop	{r7, pc}

080159ce <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80159ce:	b580      	push	{r7, lr}
 80159d0:	b082      	sub	sp, #8
 80159d2:	af00      	add	r7, sp, #0
 80159d4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	3318      	adds	r3, #24
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	4798      	blx	r3
    }
 80159e2:	bf00      	nop
 80159e4:	3708      	adds	r7, #8
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}

080159ea <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80159ea:	b480      	push	{r7}
 80159ec:	b083      	sub	sp, #12
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
 80159f2:	460b      	mov	r3, r1
 80159f4:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	78fa      	ldrb	r2, [r7, #3]
 80159fa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80159fe:	bf00      	nop
 8015a00:	370c      	adds	r7, #12
 8015a02:	46bd      	mov	sp, r7
 8015a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a08:	4770      	bx	lr

08015a0a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8015a0a:	b480      	push	{r7}
 8015a0c:	b083      	sub	sp, #12
 8015a0e:	af00      	add	r7, sp, #0
 8015a10:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8015a18:	3301      	adds	r3, #1
 8015a1a:	b2da      	uxtb	r2, r3
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8015a22:	bf00      	nop
 8015a24:	370c      	adds	r7, #12
 8015a26:	46bd      	mov	sp, r7
 8015a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2c:	4770      	bx	lr
	...

08015a30 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b082      	sub	sp, #8
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
 8015a38:	460b      	mov	r3, r1
 8015a3a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8015a3c:	78fb      	ldrb	r3, [r7, #3]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d002      	beq.n	8015a48 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8015a42:	78fb      	ldrb	r3, [r7, #3]
 8015a44:	2b02      	cmp	r3, #2
 8015a46:	d105      	bne.n	8015a54 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	78fa      	ldrb	r2, [r7, #3]
 8015a4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8015a50:	2301      	movs	r3, #1
 8015a52:	e027      	b.n	8015aa4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8015a54:	78fb      	ldrb	r3, [r7, #3]
 8015a56:	2b01      	cmp	r3, #1
 8015a58:	d123      	bne.n	8015aa2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d014      	beq.n	8015a8c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	3380      	adds	r3, #128	; 0x80
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	6878      	ldr	r0, [r7, #4]
 8015a6c:	4798      	blx	r3
 8015a6e:	4603      	mov	r3, r0
 8015a70:	461a      	mov	r2, r3
 8015a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d008      	beq.n	8015a8c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015a7a:	4b0c      	ldr	r3, [pc, #48]	; (8015aac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8015a7c:	781b      	ldrb	r3, [r3, #0]
 8015a7e:	f083 0301 	eor.w	r3, r3, #1
 8015a82:	b2db      	uxtb	r3, r3
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d001      	beq.n	8015a8c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015a88:	2301      	movs	r3, #1
 8015a8a:	e000      	b.n	8015a8e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d005      	beq.n	8015a9e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	78fa      	ldrb	r2, [r7, #3]
 8015a96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	e002      	b.n	8015aa4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	e000      	b.n	8015aa4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8015aa2:	2300      	movs	r3, #0
    }
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	3708      	adds	r7, #8
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	bd80      	pop	{r7, pc}
 8015aac:	200057de 	.word	0x200057de

08015ab0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8015ab0:	b480      	push	{r7}
 8015ab2:	b083      	sub	sp, #12
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
 8015ab8:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	683a      	ldr	r2, [r7, #0]
 8015abe:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8015ac0:	bf00      	nop
 8015ac2:	370c      	adds	r7, #12
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aca:	4770      	bx	lr

08015acc <__NVIC_EnableIRQ>:
{
 8015acc:	b480      	push	{r7}
 8015ace:	b083      	sub	sp, #12
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	db0b      	blt.n	8015af6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015ade:	88fb      	ldrh	r3, [r7, #6]
 8015ae0:	f003 021f 	and.w	r2, r3, #31
 8015ae4:	4907      	ldr	r1, [pc, #28]	; (8015b04 <__NVIC_EnableIRQ+0x38>)
 8015ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015aea:	095b      	lsrs	r3, r3, #5
 8015aec:	2001      	movs	r0, #1
 8015aee:	fa00 f202 	lsl.w	r2, r0, r2
 8015af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015af6:	bf00      	nop
 8015af8:	370c      	adds	r7, #12
 8015afa:	46bd      	mov	sp, r7
 8015afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b00:	4770      	bx	lr
 8015b02:	bf00      	nop
 8015b04:	e000e100 	.word	0xe000e100

08015b08 <__NVIC_DisableIRQ>:
{
 8015b08:	b480      	push	{r7}
 8015b0a:	b083      	sub	sp, #12
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	4603      	mov	r3, r0
 8015b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	db12      	blt.n	8015b40 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015b1a:	88fb      	ldrh	r3, [r7, #6]
 8015b1c:	f003 021f 	and.w	r2, r3, #31
 8015b20:	490a      	ldr	r1, [pc, #40]	; (8015b4c <__NVIC_DisableIRQ+0x44>)
 8015b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b26:	095b      	lsrs	r3, r3, #5
 8015b28:	2001      	movs	r0, #1
 8015b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8015b2e:	3320      	adds	r3, #32
 8015b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015b34:	f3bf 8f4f 	dsb	sy
}
 8015b38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015b3a:	f3bf 8f6f 	isb	sy
}
 8015b3e:	bf00      	nop
}
 8015b40:	bf00      	nop
 8015b42:	370c      	adds	r7, #12
 8015b44:	46bd      	mov	sp, r7
 8015b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b4a:	4770      	bx	lr
 8015b4c:	e000e100 	.word	0xe000e100

08015b50 <__NVIC_SetPriority>:
{
 8015b50:	b480      	push	{r7}
 8015b52:	b083      	sub	sp, #12
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	4603      	mov	r3, r0
 8015b58:	6039      	str	r1, [r7, #0]
 8015b5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	db0a      	blt.n	8015b7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	b2da      	uxtb	r2, r3
 8015b68:	490c      	ldr	r1, [pc, #48]	; (8015b9c <__NVIC_SetPriority+0x4c>)
 8015b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b6e:	0112      	lsls	r2, r2, #4
 8015b70:	b2d2      	uxtb	r2, r2
 8015b72:	440b      	add	r3, r1
 8015b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015b78:	e00a      	b.n	8015b90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	b2da      	uxtb	r2, r3
 8015b7e:	4908      	ldr	r1, [pc, #32]	; (8015ba0 <__NVIC_SetPriority+0x50>)
 8015b80:	88fb      	ldrh	r3, [r7, #6]
 8015b82:	f003 030f 	and.w	r3, r3, #15
 8015b86:	3b04      	subs	r3, #4
 8015b88:	0112      	lsls	r2, r2, #4
 8015b8a:	b2d2      	uxtb	r2, r2
 8015b8c:	440b      	add	r3, r1
 8015b8e:	761a      	strb	r2, [r3, #24]
}
 8015b90:	bf00      	nop
 8015b92:	370c      	adds	r7, #12
 8015b94:	46bd      	mov	sp, r7
 8015b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9a:	4770      	bx	lr
 8015b9c:	e000e100 	.word	0xe000e100
 8015ba0:	e000ed00 	.word	0xe000ed00

08015ba4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8015ba4:	b5b0      	push	{r4, r5, r7, lr}
 8015ba6:	b082      	sub	sp, #8
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f001 fb48 	bl	8017244 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8015bb4:	687d      	ldr	r5, [r7, #4]
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	334c      	adds	r3, #76	; 0x4c
 8015bbc:	681c      	ldr	r4, [r3, #0]
 8015bbe:	f004 f981 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	4619      	mov	r1, r3
 8015bc6:	4628      	mov	r0, r5
 8015bc8:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	490d      	ldr	r1, [pc, #52]	; (8015c04 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7ff ff6e 	bl	8015ab0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2101      	movs	r1, #1
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7ff ff29 	bl	8015a30 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8015bde:	6878      	ldr	r0, [r7, #4]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	3370      	adds	r3, #112	; 0x70
 8015be6:	681c      	ldr	r4, [r3, #0]
 8015be8:	2300      	movs	r3, #0
 8015bea:	2200      	movs	r2, #0
 8015bec:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8015bf0:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2101      	movs	r1, #1
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f7ff fef7 	bl	80159ea <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8015bfc:	bf00      	nop
 8015bfe:	3708      	adds	r7, #8
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bdb0      	pop	{r4, r5, r7, pc}
 8015c04:	08014d5d 	.word	0x08014d5d

08015c08 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b082      	sub	sp, #8
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(LTDC_IRQn, 9);
 8015c10:	2109      	movs	r1, #9
 8015c12:	2058      	movs	r0, #88	; 0x58
 8015c14:	f7ff ff9c 	bl	8015b50 <__NVIC_SetPriority>
}
 8015c18:	bf00      	nop
 8015c1a:	3708      	adds	r7, #8
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}

08015c20 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 8015c28:	2058      	movs	r0, #88	; 0x58
 8015c2a:	f7ff ff4f 	bl	8015acc <__NVIC_EnableIRQ>
}
 8015c2e:	bf00      	nop
 8015c30:	3708      	adds	r7, #8
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd80      	pop	{r7, pc}

08015c36 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8015c36:	b580      	push	{r7, lr}
 8015c38:	b082      	sub	sp, #8
 8015c3a:	af00      	add	r7, sp, #0
 8015c3c:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 8015c3e:	2058      	movs	r0, #88	; 0x58
 8015c40:	f7ff ff62 	bl	8015b08 <__NVIC_DisableIRQ>
}
 8015c44:	bf00      	nop
 8015c46:	3708      	adds	r7, #8
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}

08015c4c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8015c4c:	b480      	push	{r7}
 8015c4e:	b083      	sub	sp, #12
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8015c54:	4b11      	ldr	r3, [pc, #68]	; (8015c9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c56:	68db      	ldr	r3, [r3, #12]
 8015c58:	b29b      	uxth	r3, r3
 8015c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015c5e:	b29b      	uxth	r3, r3
 8015c60:	3b01      	subs	r3, #1
 8015c62:	b29a      	uxth	r2, r3
 8015c64:	4b0e      	ldr	r3, [pc, #56]	; (8015ca0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015c66:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8015c68:	4b0c      	ldr	r3, [pc, #48]	; (8015c9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c6a:	691b      	ldr	r3, [r3, #16]
 8015c6c:	b29b      	uxth	r3, r3
 8015c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015c72:	b29b      	uxth	r3, r3
 8015c74:	3b01      	subs	r3, #1
 8015c76:	b29a      	uxth	r2, r3
 8015c78:	4b0a      	ldr	r3, [pc, #40]	; (8015ca4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8015c7a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015c7c:	4b08      	ldr	r3, [pc, #32]	; (8015ca0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015c7e:	881a      	ldrh	r2, [r3, #0]
 8015c80:	4b06      	ldr	r3, [pc, #24]	; (8015c9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c82:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8015c84:	4b05      	ldr	r3, [pc, #20]	; (8015c9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c88:	4a04      	ldr	r2, [pc, #16]	; (8015c9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c8a:	f043 0301 	orr.w	r3, r3, #1
 8015c8e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015c90:	bf00      	nop
 8015c92:	370c      	adds	r7, #12
 8015c94:	46bd      	mov	sp, r7
 8015c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9a:	4770      	bx	lr
 8015c9c:	50001000 	.word	0x50001000
 8015ca0:	200057d0 	.word	0x200057d0
 8015ca4:	200057d2 	.word	0x200057d2

08015ca8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8015ca8:	b480      	push	{r7}
 8015caa:	b083      	sub	sp, #12
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015cb0:	4b03      	ldr	r3, [pc, #12]	; (8015cc0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8015cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	370c      	adds	r7, #12
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbe:	4770      	bx	lr
 8015cc0:	50001084 	.word	0x50001084

08015cc4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b083      	sub	sp, #12
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
 8015ccc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8015cce:	4a06      	ldr	r2, [pc, #24]	; (8015ce8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8015cd4:	4b05      	ldr	r3, [pc, #20]	; (8015cec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8015cd6:	2201      	movs	r2, #1
 8015cd8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015cda:	bf00      	nop
 8015cdc:	370c      	adds	r7, #12
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce4:	4770      	bx	lr
 8015ce6:	bf00      	nop
 8015ce8:	50001084 	.word	0x50001084
 8015cec:	50001000 	.word	0x50001000

08015cf0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b086      	sub	sp, #24
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
 8015cf8:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	6839      	ldr	r1, [r7, #0]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f000 ffb5 	bl	8016c6e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015d04:	4b20      	ldr	r3, [pc, #128]	; (8015d88 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8015d06:	2200      	movs	r2, #0
 8015d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8015d0c:	f3bf 8f4f 	dsb	sy
}
 8015d10:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8015d12:	4b1d      	ldr	r3, [pc, #116]	; (8015d88 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8015d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d18:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8015d1a:	697b      	ldr	r3, [r7, #20]
 8015d1c:	0b5b      	lsrs	r3, r3, #13
 8015d1e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015d22:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	08db      	lsrs	r3, r3, #3
 8015d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015d2c:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	015a      	lsls	r2, r3, #5
 8015d32:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8015d36:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8015d38:	68fa      	ldr	r2, [r7, #12]
 8015d3a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015d3c:	4912      	ldr	r1, [pc, #72]	; (8015d88 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8015d3e:	4313      	orrs	r3, r2
 8015d40:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	1e5a      	subs	r2, r3, #1
 8015d48:	60fa      	str	r2, [r7, #12]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	bf14      	ite	ne
 8015d4e:	2301      	movne	r3, #1
 8015d50:	2300      	moveq	r3, #0
 8015d52:	b2db      	uxtb	r3, r3
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d000      	beq.n	8015d5a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 8015d58:	e7e9      	b.n	8015d2e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8015d5a:	693b      	ldr	r3, [r7, #16]
 8015d5c:	1e5a      	subs	r2, r3, #1
 8015d5e:	613a      	str	r2, [r7, #16]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	bf14      	ite	ne
 8015d64:	2301      	movne	r3, #1
 8015d66:	2300      	moveq	r3, #0
 8015d68:	b2db      	uxtb	r3, r3
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d000      	beq.n	8015d70 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8015d6e:	e7d9      	b.n	8015d24 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8015d70:	f3bf 8f4f 	dsb	sy
}
 8015d74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015d76:	f3bf 8f6f 	isb	sy
}
 8015d7a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8015d7c:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 8015d7e:	bf00      	nop
 8015d80:	3718      	adds	r7, #24
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	e000ed00 	.word	0xe000ed00

08015d8c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b084      	sub	sp, #16
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	60f8      	str	r0, [r7, #12]
 8015d94:	60b9      	str	r1, [r7, #8]
 8015d96:	607a      	str	r2, [r7, #4]
 8015d98:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 8015d9a:	68f8      	ldr	r0, [r7, #12]
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	687a      	ldr	r2, [r7, #4]
 8015da0:	68b9      	ldr	r1, [r7, #8]
 8015da2:	f001 f898 	bl	8016ed6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8015da6:	4603      	mov	r3, r0
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	3710      	adds	r7, #16
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}

08015db0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8015db0:	b480      	push	{r7}
 8015db2:	b085      	sub	sp, #20
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8015db8:	4b0d      	ldr	r3, [pc, #52]	; (8015df0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dbc:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8015dbe:	4b0c      	ldr	r3, [pc, #48]	; (8015df0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015dc0:	68db      	ldr	r3, [r3, #12]
 8015dc2:	b29b      	uxth	r3, r3
 8015dc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015dc8:	b29b      	uxth	r3, r3
 8015dca:	3301      	adds	r3, #1
 8015dcc:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8015dce:	89fa      	ldrh	r2, [r7, #14]
 8015dd0:	89bb      	ldrh	r3, [r7, #12]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d304      	bcc.n	8015de0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8015dd6:	89fa      	ldrh	r2, [r7, #14]
 8015dd8:	89bb      	ldrh	r3, [r7, #12]
 8015dda:	1ad3      	subs	r3, r2, r3
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	e000      	b.n	8015de2 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8015de0:	2300      	movs	r3, #0
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	3714      	adds	r7, #20
 8015de6:	46bd      	mov	sp, r7
 8015de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dec:	4770      	bx	lr
 8015dee:	bf00      	nop
 8015df0:	50001000 	.word	0x50001000

08015df4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8015df4:	b480      	push	{r7}
 8015df6:	b087      	sub	sp, #28
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015dfc:	4b21      	ldr	r3, [pc, #132]	; (8015e84 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 8015dfe:	2200      	movs	r2, #0
 8015e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8015e04:	f3bf 8f4f 	dsb	sy
}
 8015e08:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8015e0a:	4b1e      	ldr	r3, [pc, #120]	; (8015e84 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 8015e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e10:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8015e12:	697b      	ldr	r3, [r7, #20]
 8015e14:	0b5b      	lsrs	r3, r3, #13
 8015e16:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015e1a:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	08db      	lsrs	r3, r3, #3
 8015e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015e24:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	015a      	lsls	r2, r3, #5
 8015e2a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8015e2e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8015e30:	68fa      	ldr	r2, [r7, #12]
 8015e32:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015e34:	4913      	ldr	r1, [pc, #76]	; (8015e84 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 8015e36:	4313      	orrs	r3, r2
 8015e38:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	1e5a      	subs	r2, r3, #1
 8015e40:	60fa      	str	r2, [r7, #12]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	bf14      	ite	ne
 8015e46:	2301      	movne	r3, #1
 8015e48:	2300      	moveq	r3, #0
 8015e4a:	b2db      	uxtb	r3, r3
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d000      	beq.n	8015e52 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x5e>
      do {
 8015e50:	e7e9      	b.n	8015e26 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x32>
    } while(sets-- != 0U);
 8015e52:	693b      	ldr	r3, [r7, #16]
 8015e54:	1e5a      	subs	r2, r3, #1
 8015e56:	613a      	str	r2, [r7, #16]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	bf14      	ite	ne
 8015e5c:	2301      	movne	r3, #1
 8015e5e:	2300      	moveq	r3, #0
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d000      	beq.n	8015e68 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
    do {
 8015e66:	e7d9      	b.n	8015e1c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
  __ASM volatile ("dsb 0xF":::"memory");
 8015e68:	f3bf 8f4f 	dsb	sy
}
 8015e6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015e6e:	f3bf 8f6f 	isb	sy
}
 8015e72:	bf00      	nop
}
 8015e74:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 8015e76:	bf00      	nop
 8015e78:	371c      	adds	r7, #28
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e80:	4770      	bx	lr
 8015e82:	bf00      	nop
 8015e84:	e000ed00 	.word	0xe000ed00

08015e88 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8015e88:	b480      	push	{r7}
 8015e8a:	b087      	sub	sp, #28
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015e90:	4b21      	ldr	r3, [pc, #132]	; (8015f18 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 8015e92:	2200      	movs	r2, #0
 8015e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8015e98:	f3bf 8f4f 	dsb	sy
}
 8015e9c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8015e9e:	4b1e      	ldr	r3, [pc, #120]	; (8015f18 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 8015ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015ea4:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8015ea6:	697b      	ldr	r3, [r7, #20]
 8015ea8:	0b5b      	lsrs	r3, r3, #13
 8015eaa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015eae:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8015eb0:	697b      	ldr	r3, [r7, #20]
 8015eb2:	08db      	lsrs	r3, r3, #3
 8015eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015eb8:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	015a      	lsls	r2, r3, #5
 8015ebe:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8015ec2:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8015ec4:	68fa      	ldr	r2, [r7, #12]
 8015ec6:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015ec8:	4913      	ldr	r1, [pc, #76]	; (8015f18 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 8015eca:	4313      	orrs	r3, r2
 8015ecc:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	1e5a      	subs	r2, r3, #1
 8015ed4:	60fa      	str	r2, [r7, #12]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	bf14      	ite	ne
 8015eda:	2301      	movne	r3, #1
 8015edc:	2300      	moveq	r3, #0
 8015ede:	b2db      	uxtb	r3, r3
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d000      	beq.n	8015ee6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x5e>
      do {
 8015ee4:	e7e9      	b.n	8015eba <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x32>
    } while(sets-- != 0U);
 8015ee6:	693b      	ldr	r3, [r7, #16]
 8015ee8:	1e5a      	subs	r2, r3, #1
 8015eea:	613a      	str	r2, [r7, #16]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	bf14      	ite	ne
 8015ef0:	2301      	movne	r3, #1
 8015ef2:	2300      	moveq	r3, #0
 8015ef4:	b2db      	uxtb	r3, r3
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d000      	beq.n	8015efc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
    do {
 8015efa:	e7d9      	b.n	8015eb0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
  __ASM volatile ("dsb 0xF":::"memory");
 8015efc:	f3bf 8f4f 	dsb	sy
}
 8015f00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015f02:	f3bf 8f6f 	isb	sy
}
 8015f06:	bf00      	nop
}
 8015f08:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 8015f0a:	bf00      	nop
 8015f0c:	371c      	adds	r7, #28
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f14:	4770      	bx	lr
 8015f16:	bf00      	nop
 8015f18:	e000ed00 	.word	0xe000ed00

08015f1c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b082      	sub	sp, #8
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8015f24:	4b1a      	ldr	r3, [pc, #104]	; (8015f90 <HAL_LTDC_LineEventCallback+0x74>)
 8015f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f28:	4a1a      	ldr	r2, [pc, #104]	; (8015f94 <HAL_LTDC_LineEventCallback+0x78>)
 8015f2a:	8812      	ldrh	r2, [r2, #0]
 8015f2c:	4293      	cmp	r3, r2
 8015f2e:	bf0c      	ite	eq
 8015f30:	2301      	moveq	r3, #1
 8015f32:	2300      	movne	r3, #0
 8015f34:	b2db      	uxtb	r3, r3
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d017      	beq.n	8015f6a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8015f3a:	4b17      	ldr	r3, [pc, #92]	; (8015f98 <HAL_LTDC_LineEventCallback+0x7c>)
 8015f3c:	881b      	ldrh	r3, [r3, #0]
 8015f3e:	4619      	mov	r1, r3
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	f7f1 fb53 	bl	80075ec <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8015f46:	f7fc f83d 	bl	8011fc4 <_ZN8touchgfx3HAL11getInstanceEv>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7ff fd5c 	bl	8015a0a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8015f52:	f7fe fedb 	bl	8014d0c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8015f56:	f7fc f835 	bl	8011fc4 <_ZN8touchgfx3HAL11getInstanceEv>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f001 fbf9 	bl	8017754 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8015f62:	2000      	movs	r0, #0
 8015f64:	f7fe fc58 	bl	8014818 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8015f68:	e00e      	b.n	8015f88 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8015f6a:	4b0a      	ldr	r3, [pc, #40]	; (8015f94 <HAL_LTDC_LineEventCallback+0x78>)
 8015f6c:	881b      	ldrh	r3, [r3, #0]
 8015f6e:	4619      	mov	r1, r3
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f7f1 fb3b 	bl	80075ec <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8015f76:	2000      	movs	r0, #0
 8015f78:	f7fe fc59 	bl	801482e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015f7c:	f7fc f822 	bl	8011fc4 <_ZN8touchgfx3HAL11getInstanceEv>
 8015f80:	4603      	mov	r3, r0
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7ff fd23 	bl	80159ce <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8015f88:	bf00      	nop
 8015f8a:	3708      	adds	r7, #8
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}
 8015f90:	50001000 	.word	0x50001000
 8015f94:	200057d0 	.word	0x200057d0
 8015f98:	200057d2 	.word	0x200057d2

08015f9c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015f9c:	8880      	ldrh	r0, [r0, #4]
 8015f9e:	4770      	bx	lr

08015fa0 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	8083      	strh	r3, [r0, #4]
 8015fa4:	4770      	bx	lr
	...

08015fa8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015faa:	6803      	ldr	r3, [r0, #0]
 8015fac:	460e      	mov	r6, r1
 8015fae:	2100      	movs	r1, #0
 8015fb0:	4605      	mov	r5, r0
 8015fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fb4:	4798      	blx	r3
 8015fb6:	4604      	mov	r4, r0
 8015fb8:	682b      	ldr	r3, [r5, #0]
 8015fba:	4628      	mov	r0, r5
 8015fbc:	1b34      	subs	r4, r6, r4
 8015fbe:	6a1b      	ldr	r3, [r3, #32]
 8015fc0:	b2a4      	uxth	r4, r4
 8015fc2:	4798      	blx	r3
 8015fc4:	88ab      	ldrh	r3, [r5, #4]
 8015fc6:	fbb4 f4f0 	udiv	r4, r4, r0
 8015fca:	42a3      	cmp	r3, r4
 8015fcc:	d805      	bhi.n	8015fda <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8015fce:	4b0e      	ldr	r3, [pc, #56]	; (8016008 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8015fd0:	2120      	movs	r1, #32
 8015fd2:	4a0e      	ldr	r2, [pc, #56]	; (801600c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015fd4:	480e      	ldr	r0, [pc, #56]	; (8016010 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8015fd6:	f012 fb57 	bl	8028688 <__assert_func>
 8015fda:	682b      	ldr	r3, [r5, #0]
 8015fdc:	2100      	movs	r1, #0
 8015fde:	4628      	mov	r0, r5
 8015fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fe2:	4798      	blx	r3
 8015fe4:	682b      	ldr	r3, [r5, #0]
 8015fe6:	4607      	mov	r7, r0
 8015fe8:	4628      	mov	r0, r5
 8015fea:	6a1b      	ldr	r3, [r3, #32]
 8015fec:	4798      	blx	r3
 8015fee:	1bf3      	subs	r3, r6, r7
 8015ff0:	b29b      	uxth	r3, r3
 8015ff2:	fbb3 f2f0 	udiv	r2, r3, r0
 8015ff6:	fb02 3010 	mls	r0, r2, r0, r3
 8015ffa:	b118      	cbz	r0, 8016004 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8015ffc:	4b05      	ldr	r3, [pc, #20]	; (8016014 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8015ffe:	2121      	movs	r1, #33	; 0x21
 8016000:	4a02      	ldr	r2, [pc, #8]	; (801600c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016002:	e7e7      	b.n	8015fd4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016004:	4620      	mov	r0, r4
 8016006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016008:	0802ad0c 	.word	0x0802ad0c
 801600c:	0802ae7a 	.word	0x0802ae7a
 8016010:	0802ad21 	.word	0x0802ad21
 8016014:	0802ad4f 	.word	0x0802ad4f

08016018 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016018:	b538      	push	{r3, r4, r5, lr}
 801601a:	6803      	ldr	r3, [r0, #0]
 801601c:	460d      	mov	r5, r1
 801601e:	4604      	mov	r4, r0
 8016020:	6a1b      	ldr	r3, [r3, #32]
 8016022:	4798      	blx	r3
 8016024:	4285      	cmp	r5, r0
 8016026:	d905      	bls.n	8016034 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016028:	4b0c      	ldr	r3, [pc, #48]	; (801605c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801602a:	2132      	movs	r1, #50	; 0x32
 801602c:	4a0c      	ldr	r2, [pc, #48]	; (8016060 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801602e:	480d      	ldr	r0, [pc, #52]	; (8016064 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016030:	f012 fb2a 	bl	8028688 <__assert_func>
 8016034:	6823      	ldr	r3, [r4, #0]
 8016036:	4620      	mov	r0, r4
 8016038:	88a5      	ldrh	r5, [r4, #4]
 801603a:	69db      	ldr	r3, [r3, #28]
 801603c:	4798      	blx	r3
 801603e:	4285      	cmp	r5, r0
 8016040:	d303      	bcc.n	801604a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8016042:	4b09      	ldr	r3, [pc, #36]	; (8016068 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8016044:	2133      	movs	r1, #51	; 0x33
 8016046:	4a06      	ldr	r2, [pc, #24]	; (8016060 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016048:	e7f1      	b.n	801602e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801604a:	6823      	ldr	r3, [r4, #0]
 801604c:	4620      	mov	r0, r4
 801604e:	88a1      	ldrh	r1, [r4, #4]
 8016050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016052:	4798      	blx	r3
 8016054:	88a3      	ldrh	r3, [r4, #4]
 8016056:	3301      	adds	r3, #1
 8016058:	80a3      	strh	r3, [r4, #4]
 801605a:	bd38      	pop	{r3, r4, r5, pc}
 801605c:	0802adc9 	.word	0x0802adc9
 8016060:	0802aebd 	.word	0x0802aebd
 8016064:	0802ad21 	.word	0x0802ad21
 8016068:	0802ade0 	.word	0x0802ade0

0801606c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801606c:	b570      	push	{r4, r5, r6, lr}
 801606e:	6803      	ldr	r3, [r0, #0]
 8016070:	4616      	mov	r6, r2
 8016072:	4604      	mov	r4, r0
 8016074:	460d      	mov	r5, r1
 8016076:	6a1b      	ldr	r3, [r3, #32]
 8016078:	4798      	blx	r3
 801607a:	4286      	cmp	r6, r0
 801607c:	d905      	bls.n	801608a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801607e:	4b06      	ldr	r3, [pc, #24]	; (8016098 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016080:	213c      	movs	r1, #60	; 0x3c
 8016082:	4a06      	ldr	r2, [pc, #24]	; (801609c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8016084:	4806      	ldr	r0, [pc, #24]	; (80160a0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8016086:	f012 faff 	bl	8028688 <__assert_func>
 801608a:	6823      	ldr	r3, [r4, #0]
 801608c:	4629      	mov	r1, r5
 801608e:	4620      	mov	r0, r4
 8016090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016096:	4718      	bx	r3
 8016098:	0802adc9 	.word	0x0802adc9
 801609c:	0802ae30 	.word	0x0802ae30
 80160a0:	0802ad21 	.word	0x0802ad21

080160a4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80160a4:	4770      	bx	lr
	...

080160a8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80160a8:	4a02      	ldr	r2, [pc, #8]	; (80160b4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80160aa:	6002      	str	r2, [r0, #0]
 80160ac:	2200      	movs	r2, #0
 80160ae:	8082      	strh	r2, [r0, #4]
 80160b0:	4770      	bx	lr
 80160b2:	bf00      	nop
 80160b4:	0802ae04 	.word	0x0802ae04

080160b8 <_ZN8touchgfx9Container13getFirstChildEv>:
 80160b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80160ba:	4770      	bx	lr

080160bc <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 80160bc:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
 80160c0:	4770      	bx	lr

080160c2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 80160c2:	b570      	push	{r4, r5, r6, lr}
 80160c4:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80160c8:	4604      	mov	r4, r0
 80160ca:	428b      	cmp	r3, r1
 80160cc:	d011      	beq.n	80160f2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0x30>
 80160ce:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
 80160d2:	3058      	adds	r0, #88	; 0x58
 80160d4:	f004 fe9c 	bl	801ae10 <_ZNK8touchgfx8Drawable10invalidateEv>
 80160d8:	6823      	ldr	r3, [r4, #0]
 80160da:	4620      	mov	r0, r4
 80160dc:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 80160e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80160e4:	4798      	blx	r3
 80160e6:	462b      	mov	r3, r5
 80160e8:	4601      	mov	r1, r0
 80160ea:	4620      	mov	r0, r4
 80160ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160f0:	4718      	bx	r3
 80160f2:	bd70      	pop	{r4, r5, r6, pc}

080160f4 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 80160f4:	b510      	push	{r4, lr}
 80160f6:	4604      	mov	r4, r0
 80160f8:	f000 fb80 	bl	80167fc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80160fc:	4b03      	ldr	r3, [pc, #12]	; (801610c <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80160fe:	2100      	movs	r1, #0
 8016100:	4620      	mov	r0, r4
 8016102:	6023      	str	r3, [r4, #0]
 8016104:	f7ff ffdd 	bl	80160c2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8016108:	4620      	mov	r0, r4
 801610a:	bd10      	pop	{r4, pc}
 801610c:	0802af04 	.word	0x0802af04

08016110 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8016110:	b570      	push	{r4, r5, r6, lr}
 8016112:	6803      	ldr	r3, [r0, #0]
 8016114:	4604      	mov	r4, r0
 8016116:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
 801611a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 801611e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016122:	4798      	blx	r3
 8016124:	462b      	mov	r3, r5
 8016126:	4601      	mov	r1, r0
 8016128:	4620      	mov	r0, r4
 801612a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801612e:	4718      	bx	r3

08016130 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8016130:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
 8016134:	4770      	bx	lr

08016136 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8016136:	f880 1108 	strb.w	r1, [r0, #264]	; 0x108
 801613a:	4770      	bx	lr

0801613c <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 801613c:	f890 0108 	ldrb.w	r0, [r0, #264]	; 0x108
 8016140:	4770      	bx	lr

08016142 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8016142:	b507      	push	{r0, r1, r2, lr}
 8016144:	ab02      	add	r3, sp, #8
 8016146:	30e0      	adds	r0, #224	; 0xe0
 8016148:	f823 1d04 	strh.w	r1, [r3, #-4]!
 801614c:	4619      	mov	r1, r3
 801614e:	f001 ff6a 	bl	8018026 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8016152:	b003      	add	sp, #12
 8016154:	f85d fb04 	ldr.w	pc, [sp], #4

08016158 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8016158:	b508      	push	{r3, lr}
 801615a:	4b06      	ldr	r3, [pc, #24]	; (8016174 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	b92b      	cbnz	r3, 801616c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8016160:	4b05      	ldr	r3, [pc, #20]	; (8016178 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8016162:	218b      	movs	r1, #139	; 0x8b
 8016164:	4a05      	ldr	r2, [pc, #20]	; (801617c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8016166:	4806      	ldr	r0, [pc, #24]	; (8016180 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8016168:	f012 fa8e 	bl	8028688 <__assert_func>
 801616c:	f8b0 0106 	ldrh.w	r0, [r0, #262]	; 0x106
 8016170:	bd08      	pop	{r3, pc}
 8016172:	bf00      	nop
 8016174:	20005868 	.word	0x20005868
 8016178:	0802afd4 	.word	0x0802afd4
 801617c:	0802b128 	.word	0x0802b128
 8016180:	0802b010 	.word	0x0802b010

08016184 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8016184:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016188:	4617      	mov	r7, r2
 801618a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801618e:	2200      	movs	r2, #0
 8016190:	4604      	mov	r4, r0
 8016192:	460e      	mov	r6, r1
 8016194:	4698      	mov	r8, r3
 8016196:	4611      	mov	r1, r2
 8016198:	9500      	str	r5, [sp, #0]
 801619a:	30b4      	adds	r0, #180	; 0xb4
 801619c:	f7fb fdcf 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 80161a0:	4643      	mov	r3, r8
 80161a2:	463a      	mov	r2, r7
 80161a4:	4631      	mov	r1, r6
 80161a6:	4620      	mov	r0, r4
 80161a8:	9508      	str	r5, [sp, #32]
 80161aa:	b002      	add	sp, #8
 80161ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161b0:	f000 baf7 	b.w	80167a2 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080161b4 <_ZN8touchgfx13ImageProgress8setValueEi>:
 80161b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161b6:	4604      	mov	r4, r0
 80161b8:	b085      	sub	sp, #20
 80161ba:	f000 fa46 	bl	801664a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80161be:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80161c2:	4620      	mov	r0, r4
 80161c4:	2b01      	cmp	r3, #1
 80161c6:	bf94      	ite	ls
 80161c8:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 80161cc:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 80161d0:	f000 faca 	bl	8016768 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80161d4:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80161d8:	4606      	mov	r6, r0
 80161da:	b205      	sxth	r5, r0
 80161dc:	2b00      	cmp	r3, #0
 80161de:	f000 80ca 	beq.w	8016376 <_ZN8touchgfx13ImageProgress8setValueEi+0x1c2>
 80161e2:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80161e6:	2b03      	cmp	r3, #3
 80161e8:	d834      	bhi.n	8016254 <_ZN8touchgfx13ImageProgress8setValueEi+0xa0>
 80161ea:	e8df f003 	tbb	[pc, r3]
 80161ee:	3502      	.short	0x3502
 80161f0:	9166      	.short	0x9166
 80161f2:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80161f6:	2200      	movs	r2, #0
 80161f8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 80161fc:	f9b4 60bc 	ldrsh.w	r6, [r4, #188]	; 0xbc
 8016200:	4611      	mov	r1, r2
 8016202:	9300      	str	r3, [sp, #0]
 8016204:	462b      	mov	r3, r5
 8016206:	f7fb fd9a 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 801620a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801620e:	2200      	movs	r2, #0
 8016210:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8016214:	9300      	str	r3, [sp, #0]
 8016216:	462b      	mov	r3, r5
 8016218:	4611      	mov	r1, r2
 801621a:	f7fb fd90 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 801621e:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	; 0xbc
 8016222:	4631      	mov	r1, r6
 8016224:	f9b4 20be 	ldrsh.w	r2, [r4, #190]	; 0xbe
 8016228:	429e      	cmp	r6, r3
 801622a:	eba6 0603 	sub.w	r6, r6, r3
 801622e:	bfa8      	it	ge
 8016230:	4619      	movge	r1, r3
 8016232:	2e00      	cmp	r6, #0
 8016234:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016238:	bfb8      	it	lt
 801623a:	4276      	neglt	r6, r6
 801623c:	2100      	movs	r1, #0
 801623e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8016242:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016246:	f8ad 200e 	strh.w	r2, [sp, #14]
 801624a:	a902      	add	r1, sp, #8
 801624c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016250:	f004 fe46 	bl	801aee0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 8016254:	b005      	add	sp, #20
 8016256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016258:	8921      	ldrh	r1, [r4, #8]
 801625a:	2200      	movs	r2, #0
 801625c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016260:	1a09      	subs	r1, r1, r0
 8016262:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8016266:	9300      	str	r3, [sp, #0]
 8016268:	462b      	mov	r3, r5
 801626a:	b209      	sxth	r1, r1
 801626c:	f9b4 70b8 	ldrsh.w	r7, [r4, #184]	; 0xb8
 8016270:	f7fb fd65 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 8016274:	f8b4 10b8 	ldrh.w	r1, [r4, #184]	; 0xb8
 8016278:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 801627c:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8016280:	4249      	negs	r1, r1
 8016282:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016286:	9200      	str	r2, [sp, #0]
 8016288:	2200      	movs	r2, #0
 801628a:	b209      	sxth	r1, r1
 801628c:	f7fb fd57 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 8016290:	f9b4 30b8 	ldrsh.w	r3, [r4, #184]	; 0xb8
 8016294:	4639      	mov	r1, r7
 8016296:	f9b4 20be 	ldrsh.w	r2, [r4, #190]	; 0xbe
 801629a:	429f      	cmp	r7, r3
 801629c:	eba7 0703 	sub.w	r7, r7, r3
 80162a0:	bfa8      	it	ge
 80162a2:	4619      	movge	r1, r3
 80162a4:	2f00      	cmp	r7, #0
 80162a6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80162aa:	bfb8      	it	lt
 80162ac:	427f      	neglt	r7, r7
 80162ae:	2100      	movs	r1, #0
 80162b0:	f8ad 700c 	strh.w	r7, [sp, #12]
 80162b4:	f8ad 100a 	strh.w	r1, [sp, #10]
 80162b8:	e7c5      	b.n	8016246 <_ZN8touchgfx13ImageProgress8setValueEi+0x92>
 80162ba:	2200      	movs	r2, #0
 80162bc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80162c0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 80162c4:	9500      	str	r5, [sp, #0]
 80162c6:	4611      	mov	r1, r2
 80162c8:	f9b4 60be 	ldrsh.w	r6, [r4, #190]	; 0xbe
 80162cc:	f7fb fd37 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 80162d0:	2200      	movs	r2, #0
 80162d2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80162d6:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 80162da:	4611      	mov	r1, r2
 80162dc:	9500      	str	r5, [sp, #0]
 80162de:	f7fb fd2e 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 80162e2:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	; 0xbe
 80162e6:	2100      	movs	r1, #0
 80162e8:	f9b4 20bc 	ldrsh.w	r2, [r4, #188]	; 0xbc
 80162ec:	429e      	cmp	r6, r3
 80162ee:	f8ad 1008 	strh.w	r1, [sp, #8]
 80162f2:	4631      	mov	r1, r6
 80162f4:	eba6 0603 	sub.w	r6, r6, r3
 80162f8:	bfa8      	it	ge
 80162fa:	4619      	movge	r1, r3
 80162fc:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016300:	2e00      	cmp	r6, #0
 8016302:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016306:	bfb8      	it	lt
 8016308:	4276      	neglt	r6, r6
 801630a:	f8ad 600e 	strh.w	r6, [sp, #14]
 801630e:	e79c      	b.n	801624a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8016310:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016314:	2100      	movs	r1, #0
 8016316:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801631a:	1a12      	subs	r2, r2, r0
 801631c:	9500      	str	r5, [sp, #0]
 801631e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8016322:	f9b4 70ba 	ldrsh.w	r7, [r4, #186]	; 0xba
 8016326:	b212      	sxth	r2, r2
 8016328:	f7fb fd09 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 801632c:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
 8016330:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8016334:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8016338:	4252      	negs	r2, r2
 801633a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801633e:	9100      	str	r1, [sp, #0]
 8016340:	2100      	movs	r1, #0
 8016342:	b212      	sxth	r2, r2
 8016344:	f7fb fcfb 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 8016348:	f9b4 30ba 	ldrsh.w	r3, [r4, #186]	; 0xba
 801634c:	2100      	movs	r1, #0
 801634e:	f9b4 20bc 	ldrsh.w	r2, [r4, #188]	; 0xbc
 8016352:	429f      	cmp	r7, r3
 8016354:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016358:	4639      	mov	r1, r7
 801635a:	eba7 0703 	sub.w	r7, r7, r3
 801635e:	bfa8      	it	ge
 8016360:	4619      	movge	r1, r3
 8016362:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016366:	2f00      	cmp	r7, #0
 8016368:	f8ad 100a 	strh.w	r1, [sp, #10]
 801636c:	bfb8      	it	lt
 801636e:	427f      	neglt	r7, r7
 8016370:	f8ad 700e 	strh.w	r7, [sp, #14]
 8016374:	e769      	b.n	801624a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8016376:	f104 07b4 	add.w	r7, r4, #180	; 0xb4
 801637a:	4638      	mov	r0, r7
 801637c:	f004 fd48 	bl	801ae10 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016380:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8016384:	2b03      	cmp	r3, #3
 8016386:	d818      	bhi.n	80163ba <_ZN8touchgfx13ImageProgress8setValueEi+0x206>
 8016388:	e8df f003 	tbb	[pc, r3]
 801638c:	3f2e1b02 	.word	0x3f2e1b02
 8016390:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016394:	2200      	movs	r2, #0
 8016396:	4638      	mov	r0, r7
 8016398:	4611      	mov	r1, r2
 801639a:	9300      	str	r3, [sp, #0]
 801639c:	462b      	mov	r3, r5
 801639e:	f7fb fcce 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 80163a2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80163a6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80163aa:	1af1      	subs	r1, r6, r3
 80163ac:	9200      	str	r2, [sp, #0]
 80163ae:	2200      	movs	r2, #0
 80163b0:	b209      	sxth	r1, r1
 80163b2:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 80163b6:	f7fb fcc2 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 80163ba:	4638      	mov	r0, r7
 80163bc:	f004 fd28 	bl	801ae10 <_ZNK8touchgfx8Drawable10invalidateEv>
 80163c0:	e748      	b.n	8016254 <_ZN8touchgfx13ImageProgress8setValueEi+0xa0>
 80163c2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80163c6:	2200      	movs	r2, #0
 80163c8:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80163cc:	4638      	mov	r0, r7
 80163ce:	1b89      	subs	r1, r1, r6
 80163d0:	9300      	str	r3, [sp, #0]
 80163d2:	462b      	mov	r3, r5
 80163d4:	b209      	sxth	r1, r1
 80163d6:	f7fb fcb2 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 80163da:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80163de:	9300      	str	r3, [sp, #0]
 80163e0:	462b      	mov	r3, r5
 80163e2:	2200      	movs	r2, #0
 80163e4:	4611      	mov	r1, r2
 80163e6:	e7e4      	b.n	80163b2 <_ZN8touchgfx13ImageProgress8setValueEi+0x1fe>
 80163e8:	2200      	movs	r2, #0
 80163ea:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80163ee:	4638      	mov	r0, r7
 80163f0:	9500      	str	r5, [sp, #0]
 80163f2:	4611      	mov	r1, r2
 80163f4:	f7fb fca3 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 80163f8:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 80163fc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016400:	2100      	movs	r1, #0
 8016402:	1a32      	subs	r2, r6, r0
 8016404:	9000      	str	r0, [sp, #0]
 8016406:	b212      	sxth	r2, r2
 8016408:	e7d3      	b.n	80163b2 <_ZN8touchgfx13ImageProgress8setValueEi+0x1fe>
 801640a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801640e:	2100      	movs	r1, #0
 8016410:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016414:	4638      	mov	r0, r7
 8016416:	1b92      	subs	r2, r2, r6
 8016418:	9500      	str	r5, [sp, #0]
 801641a:	b212      	sxth	r2, r2
 801641c:	f7fb fc8f 	bl	8011d3e <_ZN8touchgfx8Drawable11setPositionEssss>
 8016420:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016424:	9500      	str	r5, [sp, #0]
 8016426:	e7dc      	b.n	80163e2 <_ZN8touchgfx13ImageProgress8setValueEi+0x22e>

08016428 <_ZN8touchgfx13ImageProgressC1Ev>:
 8016428:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801642c:	4604      	mov	r4, r0
 801642e:	f7ff fe61 	bl	80160f4 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8016432:	4b31      	ldr	r3, [pc, #196]	; (80164f8 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8016434:	a902      	add	r1, sp, #8
 8016436:	4626      	mov	r6, r4
 8016438:	f104 08e0 	add.w	r8, r4, #224	; 0xe0
 801643c:	2500      	movs	r5, #0
 801643e:	4a2f      	ldr	r2, [pc, #188]	; (80164fc <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8016440:	f846 3bb4 	str.w	r3, [r6], #180
 8016444:	2701      	movs	r7, #1
 8016446:	4b2e      	ldr	r3, [pc, #184]	; (8016500 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8016448:	4640      	mov	r0, r8
 801644a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 801644e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8016452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016456:	f8a4 50b8 	strh.w	r5, [r4, #184]	; 0xb8
 801645a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801645e:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
 8016462:	f8a4 50ba 	strh.w	r5, [r4, #186]	; 0xba
 8016466:	f8a4 50bc 	strh.w	r5, [r4, #188]	; 0xbc
 801646a:	f8a4 50be 	strh.w	r5, [r4, #190]	; 0xbe
 801646e:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8016472:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8016476:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 801647a:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 801647e:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 8016482:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
 8016486:	f884 70d9 	strb.w	r7, [r4, #217]	; 0xd9
 801648a:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
 801648e:	f8a4 50e4 	strh.w	r5, [r4, #228]	; 0xe4
 8016492:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8016496:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 801649a:	f8a4 50ea 	strh.w	r5, [r4, #234]	; 0xea
 801649e:	f8a4 50ec 	strh.w	r5, [r4, #236]	; 0xec
 80164a2:	f8a4 50ee 	strh.w	r5, [r4, #238]	; 0xee
 80164a6:	f8a4 50f0 	strh.w	r5, [r4, #240]	; 0xf0
 80164aa:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
 80164ae:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
 80164b2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80164b6:	f884 7105 	strb.w	r7, [r4, #261]	; 0x105
 80164ba:	e9c4 5532 	strd	r5, r5, [r4, #200]	; 0xc8
 80164be:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 80164c2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
 80164c6:	f002 f819 	bl	80184fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80164ca:	4b0e      	ldr	r3, [pc, #56]	; (8016504 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 80164cc:	4641      	mov	r1, r8
 80164ce:	4630      	mov	r0, r6
 80164d0:	f8a4 510a 	strh.w	r5, [r4, #266]	; 0x10a
 80164d4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80164d8:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
 80164dc:	f884 7110 	strb.w	r7, [r4, #272]	; 0x110
 80164e0:	f000 fa7a 	bl	80169d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80164e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80164e8:	4631      	mov	r1, r6
 80164ea:	f000 fa75 	bl	80169d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80164ee:	4620      	mov	r0, r4
 80164f0:	b002      	add	sp, #8
 80164f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164f6:	bf00      	nop
 80164f8:	0802b040 	.word	0x0802b040
 80164fc:	0802bfb0 	.word	0x0802bfb0
 8016500:	0802b3d4 	.word	0x0802b3d4
 8016504:	0802be8c 	.word	0x0802be8c

08016508 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8016508:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 801650c:	4770      	bx	lr

0801650e <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 801650e:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8016512:	4770      	bx	lr

08016514 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8016514:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8016518:	4770      	bx	lr

0801651a <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 801651a:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 801651e:	4770      	bx	lr

08016520 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8016520:	b510      	push	{r4, lr}
 8016522:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016526:	600c      	str	r4, [r1, #0]
 8016528:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 801652c:	6011      	str	r1, [r2, #0]
 801652e:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016532:	801a      	strh	r2, [r3, #0]
 8016534:	9b02      	ldr	r3, [sp, #8]
 8016536:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 801653a:	801a      	strh	r2, [r3, #0]
 801653c:	bd10      	pop	{r4, pc}

0801653e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 801653e:	b510      	push	{r4, lr}
 8016540:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016544:	600c      	str	r4, [r1, #0]
 8016546:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 801654a:	6011      	str	r1, [r2, #0]
 801654c:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016550:	801a      	strh	r2, [r3, #0]
 8016552:	bd10      	pop	{r4, pc}

08016554 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8016554:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016558:	600b      	str	r3, [r1, #0]
 801655a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801655e:	6013      	str	r3, [r2, #0]
 8016560:	4770      	bx	lr

08016562 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8016562:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8016566:	4770      	bx	lr

08016568 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8016568:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 801656c:	4770      	bx	lr

0801656e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 801656e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016570:	460d      	mov	r5, r1
 8016572:	4614      	mov	r4, r2
 8016574:	9908      	ldr	r1, [sp, #32]
 8016576:	6802      	ldr	r2, [r0, #0]
 8016578:	9100      	str	r1, [sp, #0]
 801657a:	a902      	add	r1, sp, #8
 801657c:	f8d2 609c 	ldr.w	r6, [r2, #156]	; 0x9c
 8016580:	aa03      	add	r2, sp, #12
 8016582:	47b0      	blx	r6
 8016584:	9b02      	ldr	r3, [sp, #8]
 8016586:	802b      	strh	r3, [r5, #0]
 8016588:	9b03      	ldr	r3, [sp, #12]
 801658a:	8023      	strh	r3, [r4, #0]
 801658c:	b004      	add	sp, #16
 801658e:	bd70      	pop	{r4, r5, r6, pc}

08016590 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8016590:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016592:	4614      	mov	r4, r2
 8016594:	6802      	ldr	r2, [r0, #0]
 8016596:	460d      	mov	r5, r1
 8016598:	4669      	mov	r1, sp
 801659a:	f8d2 60a0 	ldr.w	r6, [r2, #160]	; 0xa0
 801659e:	aa01      	add	r2, sp, #4
 80165a0:	47b0      	blx	r6
 80165a2:	9b00      	ldr	r3, [sp, #0]
 80165a4:	802b      	strh	r3, [r5, #0]
 80165a6:	9b01      	ldr	r3, [sp, #4]
 80165a8:	8023      	strh	r3, [r4, #0]
 80165aa:	b002      	add	sp, #8
 80165ac:	bd70      	pop	{r4, r5, r6, pc}

080165ae <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 80165ae:	6803      	ldr	r3, [r0, #0]
 80165b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80165b2:	460d      	mov	r5, r1
 80165b4:	4614      	mov	r4, r2
 80165b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80165ba:	aa01      	add	r2, sp, #4
 80165bc:	4669      	mov	r1, sp
 80165be:	4798      	blx	r3
 80165c0:	9b00      	ldr	r3, [sp, #0]
 80165c2:	802b      	strh	r3, [r5, #0]
 80165c4:	9b01      	ldr	r3, [sp, #4]
 80165c6:	8023      	strh	r3, [r4, #0]
 80165c8:	b003      	add	sp, #12
 80165ca:	bd30      	pop	{r4, r5, pc}

080165cc <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 80165cc:	b570      	push	{r4, r5, r6, lr}
 80165ce:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 80165d2:	4604      	mov	r4, r0
 80165d4:	4616      	mov	r6, r2
 80165d6:	428d      	cmp	r5, r1
 80165d8:	bfb8      	it	lt
 80165da:	460d      	movlt	r5, r1
 80165dc:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80165e0:	428d      	cmp	r5, r1
 80165e2:	bfa8      	it	ge
 80165e4:	460d      	movge	r5, r1
 80165e6:	b99a      	cbnz	r2, 8016610 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 80165e8:	6803      	ldr	r3, [r0, #0]
 80165ea:	4629      	mov	r1, r5
 80165ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80165f0:	4798      	blx	r3
 80165f2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80165f6:	b338      	cbz	r0, 8016648 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 80165f8:	6803      	ldr	r3, [r0, #0]
 80165fa:	68db      	ldr	r3, [r3, #12]
 80165fc:	4798      	blx	r3
 80165fe:	b318      	cbz	r0, 8016648 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 8016600:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016604:	4621      	mov	r1, r4
 8016606:	6803      	ldr	r3, [r0, #0]
 8016608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801660c:	689b      	ldr	r3, [r3, #8]
 801660e:	4718      	bx	r3
 8016610:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8016614:	2b00      	cmp	r3, #0
 8016616:	dd04      	ble.n	8016622 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x56>
 8016618:	f003 fc54 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 801661c:	4621      	mov	r1, r4
 801661e:	f003 fc89 	bl	8019f34 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016622:	6823      	ldr	r3, [r4, #0]
 8016624:	4620      	mov	r0, r4
 8016626:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801662a:	4798      	blx	r3
 801662c:	2300      	movs	r3, #0
 801662e:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 8016632:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8016636:	e9c4 0526 	strd	r0, r5, [r4, #152]	; 0x98
 801663a:	f003 fc43 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 801663e:	4621      	mov	r1, r4
 8016640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016644:	f003 bc44 	b.w	8019ed0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8016648:	bd70      	pop	{r4, r5, r6, pc}

0801664a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801664a:	b510      	push	{r4, lr}
 801664c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016650:	4604      	mov	r4, r0
 8016652:	4299      	cmp	r1, r3
 8016654:	bfb8      	it	lt
 8016656:	4619      	movlt	r1, r3
 8016658:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801665c:	4299      	cmp	r1, r3
 801665e:	bfa8      	it	ge
 8016660:	4619      	movge	r1, r3
 8016662:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8016666:	428b      	cmp	r3, r1
 8016668:	d010      	beq.n	801668c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801666a:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 801666e:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8016672:	b158      	cbz	r0, 801668c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016674:	6803      	ldr	r3, [r0, #0]
 8016676:	68db      	ldr	r3, [r3, #12]
 8016678:	4798      	blx	r3
 801667a:	b138      	cbz	r0, 801668c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801667c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8016680:	4621      	mov	r1, r4
 8016682:	6803      	ldr	r3, [r0, #0]
 8016684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016688:	689b      	ldr	r3, [r3, #8]
 801668a:	4718      	bx	r3
 801668c:	bd10      	pop	{r4, pc}
	...

08016690 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8016690:	4291      	cmp	r1, r2
 8016692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016696:	4604      	mov	r4, r0
 8016698:	460e      	mov	r6, r1
 801669a:	4615      	mov	r5, r2
 801669c:	4698      	mov	r8, r3
 801669e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80166a2:	db05      	blt.n	80166b0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 80166a4:	4b11      	ldr	r3, [pc, #68]	; (80166ec <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 80166a6:	2149      	movs	r1, #73	; 0x49
 80166a8:	4a11      	ldr	r2, [pc, #68]	; (80166f0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 80166aa:	4812      	ldr	r0, [pc, #72]	; (80166f4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 80166ac:	f011 ffec 	bl	8028688 <__assert_func>
 80166b0:	6803      	ldr	r3, [r0, #0]
 80166b2:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 80166b6:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80166ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80166be:	4798      	blx	r3
 80166c0:	f1b8 0f00 	cmp.w	r8, #0
 80166c4:	d10c      	bne.n	80166e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 80166c6:	1bad      	subs	r5, r5, r6
 80166c8:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 80166cc:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 80166d0:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 80166d4:	42bb      	cmp	r3, r7
 80166d6:	d806      	bhi.n	80166e6 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 80166d8:	4b07      	ldr	r3, [pc, #28]	; (80166f8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 80166da:	2156      	movs	r1, #86	; 0x56
 80166dc:	4a04      	ldr	r2, [pc, #16]	; (80166f0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 80166de:	e7e4      	b.n	80166aa <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 80166e0:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 80166e4:	e7f2      	b.n	80166cc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 80166e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166ea:	bf00      	nop
 80166ec:	0802b15b 	.word	0x0802b15b
 80166f0:	0802b2a8 	.word	0x0802b2a8
 80166f4:	0802b165 	.word	0x0802b165
 80166f8:	0802b1bc 	.word	0x0802b1bc

080166fc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 80166fc:	b570      	push	{r4, r5, r6, lr}
 80166fe:	4604      	mov	r4, r0
 8016700:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8016704:	2100      	movs	r1, #0
 8016706:	3001      	adds	r0, #1
 8016708:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 801670c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8016710:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8016714:	b280      	uxth	r0, r0
 8016716:	1ad2      	subs	r2, r2, r3
 8016718:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 801671c:	b212      	sxth	r2, r2
 801671e:	47a8      	blx	r5
 8016720:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8016724:	6823      	ldr	r3, [r4, #0]
 8016726:	4401      	add	r1, r0
 8016728:	4620      	mov	r0, r4
 801672a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801672e:	4798      	blx	r3
 8016730:	e9d4 3228 	ldrd	r3, r2, [r4, #160]	; 0xa0
 8016734:	429a      	cmp	r2, r3
 8016736:	db16      	blt.n	8016766 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8016738:	2300      	movs	r3, #0
 801673a:	e9c4 3328 	strd	r3, r3, [r4, #160]	; 0xa0
 801673e:	f003 fbc1 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 8016742:	4621      	mov	r1, r4
 8016744:	f003 fbf6 	bl	8019f34 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016748:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 801674c:	b158      	cbz	r0, 8016766 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 801674e:	6803      	ldr	r3, [r0, #0]
 8016750:	68db      	ldr	r3, [r3, #12]
 8016752:	4798      	blx	r3
 8016754:	b138      	cbz	r0, 8016766 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8016756:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 801675a:	4621      	mov	r1, r4
 801675c:	6803      	ldr	r3, [r0, #0]
 801675e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016762:	689b      	ldr	r3, [r3, #8]
 8016764:	4718      	bx	r3
 8016766:	bd70      	pop	{r4, r5, r6, pc}

08016768 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8016768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801676a:	4604      	mov	r4, r0
 801676c:	460d      	mov	r5, r1
 801676e:	b1a9      	cbz	r1, 801679c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8016770:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8016774:	ab01      	add	r3, sp, #4
 8016776:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 801677a:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 801677e:	1b89      	subs	r1, r1, r6
 8016780:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8016784:	1a12      	subs	r2, r2, r0
 8016786:	1a38      	subs	r0, r7, r0
 8016788:	f004 fcf7 	bl	801b17a <_ZN8touchgfx6muldivElllRl>
 801678c:	4629      	mov	r1, r5
 801678e:	ab01      	add	r3, sp, #4
 8016790:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8016794:	4430      	add	r0, r6
 8016796:	f004 fcf0 	bl	801b17a <_ZN8touchgfx6muldivElllRl>
 801679a:	b285      	uxth	r5, r0
 801679c:	4628      	mov	r0, r5
 801679e:	b003      	add	sp, #12
 80167a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080167a2 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80167a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167a6:	4604      	mov	r4, r0
 80167a8:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 80167ac:	4698      	mov	r8, r3
 80167ae:	460e      	mov	r6, r1
 80167b0:	4615      	mov	r5, r2
 80167b2:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 80167b6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80167ba:	4619      	mov	r1, r3
 80167bc:	463a      	mov	r2, r7
 80167be:	3058      	adds	r0, #88	; 0x58
 80167c0:	f7fb fb65 	bl	8011e8e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80167c4:	4446      	add	r6, r8
 80167c6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80167ca:	443d      	add	r5, r7
 80167cc:	42b3      	cmp	r3, r6
 80167ce:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80167d2:	bfb8      	it	lt
 80167d4:	8126      	strhlt	r6, [r4, #8]
 80167d6:	42ab      	cmp	r3, r5
 80167d8:	bfb8      	it	lt
 80167da:	8165      	strhlt	r5, [r4, #10]
 80167dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080167e0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80167e0:	b510      	push	{r4, lr}
 80167e2:	4604      	mov	r4, r0
 80167e4:	302c      	adds	r0, #44	; 0x2c
 80167e6:	f001 fe89 	bl	80184fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80167ea:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 80167ee:	4620      	mov	r0, r4
 80167f0:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80167f4:	f7fb fb4b 	bl	8011e8e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80167f8:	bd10      	pop	{r4, pc}
	...

080167fc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 80167fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016800:	4604      	mov	r4, r0
 8016802:	2500      	movs	r5, #0
 8016804:	f7fc fd1a 	bl	801323c <_ZN8touchgfx8DrawableC1Ev>
 8016808:	4b23      	ldr	r3, [pc, #140]	; (8016898 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 801680a:	4626      	mov	r6, r4
 801680c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8016810:	af02      	add	r7, sp, #8
 8016812:	2226      	movs	r2, #38	; 0x26
 8016814:	4629      	mov	r1, r5
 8016816:	62a5      	str	r5, [r4, #40]	; 0x28
 8016818:	f846 3b2c 	str.w	r3, [r6], #44
 801681c:	4630      	mov	r0, r6
 801681e:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8016822:	f012 f8b7 	bl	8028994 <memset>
 8016826:	4630      	mov	r0, r6
 8016828:	f7fc fd08 	bl	801323c <_ZN8touchgfx8DrawableC1Ev>
 801682c:	4b1b      	ldr	r3, [pc, #108]	; (801689c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 801682e:	4639      	mov	r1, r7
 8016830:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8016834:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016836:	4630      	mov	r0, r6
 8016838:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801683c:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8016840:	f001 fe5c 	bl	80184fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016844:	4638      	mov	r0, r7
 8016846:	f7fc fcf9 	bl	801323c <_ZN8touchgfx8DrawableC1Ev>
 801684a:	4b15      	ldr	r3, [pc, #84]	; (80168a0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 801684c:	4629      	mov	r1, r5
 801684e:	4630      	mov	r0, r6
 8016850:	65a3      	str	r3, [r4, #88]	; 0x58
 8016852:	2364      	movs	r3, #100	; 0x64
 8016854:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8016858:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801685c:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8016860:	4b10      	ldr	r3, [pc, #64]	; (80168a4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8016862:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8016866:	e9c4 3525 	strd	r3, r5, [r4, #148]	; 0x94
 801686a:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 801686e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016872:	f7fb fa92 	bl	8011d9a <_ZN8touchgfx8Drawable4setXEs>
 8016876:	4629      	mov	r1, r5
 8016878:	4630      	mov	r0, r6
 801687a:	f7fb fa9d 	bl	8011db8 <_ZN8touchgfx8Drawable4setYEs>
 801687e:	4631      	mov	r1, r6
 8016880:	4620      	mov	r0, r4
 8016882:	f000 f8a9 	bl	80169d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016886:	4620      	mov	r0, r4
 8016888:	4639      	mov	r1, r7
 801688a:	f000 f8a5 	bl	80169d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801688e:	4620      	mov	r0, r4
 8016890:	b002      	add	sp, #8
 8016892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016896:	bf00      	nop
 8016898:	0802b1e0 	.word	0x0802b1e0
 801689c:	0802bfb0 	.word	0x0802bfb0
 80168a0:	0802b3d4 	.word	0x0802b3d4
 80168a4:	0801b901 	.word	0x0801b901

080168a8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80168a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80168aa:	2000      	movs	r0, #0
 80168ac:	b12b      	cbz	r3, 80168ba <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80168ae:	b920      	cbnz	r0, 80168ba <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80168b0:	1a5a      	subs	r2, r3, r1
 80168b2:	699b      	ldr	r3, [r3, #24]
 80168b4:	4250      	negs	r0, r2
 80168b6:	4150      	adcs	r0, r2
 80168b8:	e7f8      	b.n	80168ac <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80168ba:	4770      	bx	lr

080168bc <_ZN8touchgfx9Container9removeAllEv>:
 80168bc:	2200      	movs	r2, #0
 80168be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80168c0:	b123      	cbz	r3, 80168cc <_ZN8touchgfx9Container9removeAllEv+0x10>
 80168c2:	6999      	ldr	r1, [r3, #24]
 80168c4:	6281      	str	r1, [r0, #40]	; 0x28
 80168c6:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80168ca:	e7f8      	b.n	80168be <_ZN8touchgfx9Container9removeAllEv+0x2>
 80168cc:	4770      	bx	lr

080168ce <_ZN8touchgfx9Container6unlinkEv>:
 80168ce:	2300      	movs	r3, #0
 80168d0:	6283      	str	r3, [r0, #40]	; 0x28
 80168d2:	4770      	bx	lr

080168d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80168d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168d8:	461f      	mov	r7, r3
 80168da:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80168de:	460d      	mov	r5, r1
 80168e0:	4616      	mov	r6, r2
 80168e2:	b103      	cbz	r3, 80168e6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80168e4:	6038      	str	r0, [r7, #0]
 80168e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80168e8:	b314      	cbz	r4, 8016930 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80168ea:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80168ee:	b1eb      	cbz	r3, 801692c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80168f0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80168f4:	428d      	cmp	r5, r1
 80168f6:	db19      	blt.n	801692c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80168f8:	b289      	uxth	r1, r1
 80168fa:	8923      	ldrh	r3, [r4, #8]
 80168fc:	440b      	add	r3, r1
 80168fe:	b21b      	sxth	r3, r3
 8016900:	429d      	cmp	r5, r3
 8016902:	da13      	bge.n	801692c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016904:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016908:	4296      	cmp	r6, r2
 801690a:	db0f      	blt.n	801692c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801690c:	b292      	uxth	r2, r2
 801690e:	8963      	ldrh	r3, [r4, #10]
 8016910:	4413      	add	r3, r2
 8016912:	b21b      	sxth	r3, r3
 8016914:	429e      	cmp	r6, r3
 8016916:	da09      	bge.n	801692c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016918:	6823      	ldr	r3, [r4, #0]
 801691a:	1ab2      	subs	r2, r6, r2
 801691c:	1a69      	subs	r1, r5, r1
 801691e:	4620      	mov	r0, r4
 8016920:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8016924:	b212      	sxth	r2, r2
 8016926:	463b      	mov	r3, r7
 8016928:	b209      	sxth	r1, r1
 801692a:	47c0      	blx	r8
 801692c:	69a4      	ldr	r4, [r4, #24]
 801692e:	e7db      	b.n	80168e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016934 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016934:	2200      	movs	r2, #0
 8016936:	8002      	strh	r2, [r0, #0]
 8016938:	8042      	strh	r2, [r0, #2]
 801693a:	8082      	strh	r2, [r0, #4]
 801693c:	80c2      	strh	r2, [r0, #6]
 801693e:	4770      	bx	lr

08016940 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016940:	b570      	push	{r4, r5, r6, lr}
 8016942:	460d      	mov	r5, r1
 8016944:	4616      	mov	r6, r2
 8016946:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016948:	b13c      	cbz	r4, 801695a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801694a:	6823      	ldr	r3, [r4, #0]
 801694c:	4620      	mov	r0, r4
 801694e:	4632      	mov	r2, r6
 8016950:	4629      	mov	r1, r5
 8016952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016954:	4798      	blx	r3
 8016956:	69a4      	ldr	r4, [r4, #24]
 8016958:	e7f6      	b.n	8016948 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801695a:	bd70      	pop	{r4, r5, r6, pc}

0801695c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801695c:	b538      	push	{r3, r4, r5, lr}
 801695e:	460d      	mov	r5, r1
 8016960:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016962:	b134      	cbz	r4, 8016972 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016964:	682b      	ldr	r3, [r5, #0]
 8016966:	4621      	mov	r1, r4
 8016968:	4628      	mov	r0, r5
 801696a:	689b      	ldr	r3, [r3, #8]
 801696c:	4798      	blx	r3
 801696e:	69a4      	ldr	r4, [r4, #24]
 8016970:	e7f7      	b.n	8016962 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016972:	bd38      	pop	{r3, r4, r5, pc}

08016974 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016974:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016976:	b19b      	cbz	r3, 80169a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016978:	428b      	cmp	r3, r1
 801697a:	d109      	bne.n	8016990 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801697c:	699a      	ldr	r2, [r3, #24]
 801697e:	2100      	movs	r1, #0
 8016980:	6159      	str	r1, [r3, #20]
 8016982:	6282      	str	r2, [r0, #40]	; 0x28
 8016984:	b902      	cbnz	r2, 8016988 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016986:	4770      	bx	lr
 8016988:	6199      	str	r1, [r3, #24]
 801698a:	4770      	bx	lr
 801698c:	4613      	mov	r3, r2
 801698e:	b13a      	cbz	r2, 80169a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016990:	699a      	ldr	r2, [r3, #24]
 8016992:	428a      	cmp	r2, r1
 8016994:	d1fa      	bne.n	801698c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016996:	698a      	ldr	r2, [r1, #24]
 8016998:	619a      	str	r2, [r3, #24]
 801699a:	2300      	movs	r3, #0
 801699c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80169a0:	4770      	bx	lr

080169a2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80169a2:	b410      	push	{r4}
 80169a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80169a6:	4604      	mov	r4, r0
 80169a8:	b92b      	cbnz	r3, 80169b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80169aa:	6803      	ldr	r3, [r0, #0]
 80169ac:	4611      	mov	r1, r2
 80169ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80169b4:	4718      	bx	r3
 80169b6:	b941      	cbnz	r1, 80169ca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80169b8:	6193      	str	r3, [r2, #24]
 80169ba:	6282      	str	r2, [r0, #40]	; 0x28
 80169bc:	6154      	str	r4, [r2, #20]
 80169be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169c2:	4770      	bx	lr
 80169c4:	4603      	mov	r3, r0
 80169c6:	2800      	cmp	r0, #0
 80169c8:	d0f9      	beq.n	80169be <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80169ca:	4299      	cmp	r1, r3
 80169cc:	6998      	ldr	r0, [r3, #24]
 80169ce:	d1f9      	bne.n	80169c4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80169d0:	6190      	str	r0, [r2, #24]
 80169d2:	618a      	str	r2, [r1, #24]
 80169d4:	e7f2      	b.n	80169bc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080169d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80169d8:	4288      	cmp	r0, r1
 80169da:	b508      	push	{r3, lr}
 80169dc:	d105      	bne.n	80169ea <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80169de:	4b11      	ldr	r3, [pc, #68]	; (8016a24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80169e0:	2123      	movs	r1, #35	; 0x23
 80169e2:	4a11      	ldr	r2, [pc, #68]	; (8016a28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80169e4:	4811      	ldr	r0, [pc, #68]	; (8016a2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80169e6:	f011 fe4f 	bl	8028688 <__assert_func>
 80169ea:	694b      	ldr	r3, [r1, #20]
 80169ec:	b11b      	cbz	r3, 80169f6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80169ee:	4b10      	ldr	r3, [pc, #64]	; (8016a30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80169f0:	2124      	movs	r1, #36	; 0x24
 80169f2:	4a0d      	ldr	r2, [pc, #52]	; (8016a28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80169f4:	e7f6      	b.n	80169e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80169f6:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80169fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80169fc:	b913      	cbnz	r3, 8016a04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80169fe:	6281      	str	r1, [r0, #40]	; 0x28
 8016a00:	bd08      	pop	{r3, pc}
 8016a02:	4613      	mov	r3, r2
 8016a04:	699a      	ldr	r2, [r3, #24]
 8016a06:	b12a      	cbz	r2, 8016a14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8016a08:	428b      	cmp	r3, r1
 8016a0a:	d1fa      	bne.n	8016a02 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8016a0c:	4b09      	ldr	r3, [pc, #36]	; (8016a34 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8016a0e:	2135      	movs	r1, #53	; 0x35
 8016a10:	4a05      	ldr	r2, [pc, #20]	; (8016a28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016a12:	e7e7      	b.n	80169e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016a14:	428b      	cmp	r3, r1
 8016a16:	d103      	bne.n	8016a20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8016a18:	4b06      	ldr	r3, [pc, #24]	; (8016a34 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8016a1a:	2138      	movs	r1, #56	; 0x38
 8016a1c:	4a02      	ldr	r2, [pc, #8]	; (8016a28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016a1e:	e7e1      	b.n	80169e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016a20:	6199      	str	r1, [r3, #24]
 8016a22:	e7ed      	b.n	8016a00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8016a24:	0802b301 	.word	0x0802b301
 8016a28:	0802b454 	.word	0x0802b454
 8016a2c:	0802b32d 	.word	0x0802b32d
 8016a30:	0802b360 	.word	0x0802b360
 8016a34:	0802b396 	.word	0x0802b396

08016a38 <_ZN8touchgfx4RectaNERKS0_>:
 8016a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a3c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8016a40:	888c      	ldrh	r4, [r1, #4]
 8016a42:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016a46:	443c      	add	r4, r7
 8016a48:	b2a4      	uxth	r4, r4
 8016a4a:	fa0f f884 	sxth.w	r8, r4
 8016a4e:	45c1      	cmp	r9, r8
 8016a50:	da2f      	bge.n	8016ab2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016a52:	8882      	ldrh	r2, [r0, #4]
 8016a54:	444a      	add	r2, r9
 8016a56:	b292      	uxth	r2, r2
 8016a58:	fa0f fe82 	sxth.w	lr, r2
 8016a5c:	4577      	cmp	r7, lr
 8016a5e:	da28      	bge.n	8016ab2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016a60:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016a64:	88cb      	ldrh	r3, [r1, #6]
 8016a66:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016a6a:	442b      	add	r3, r5
 8016a6c:	b21b      	sxth	r3, r3
 8016a6e:	429e      	cmp	r6, r3
 8016a70:	da1f      	bge.n	8016ab2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016a72:	88c3      	ldrh	r3, [r0, #6]
 8016a74:	4433      	add	r3, r6
 8016a76:	b29b      	uxth	r3, r3
 8016a78:	fa0f fc83 	sxth.w	ip, r3
 8016a7c:	4565      	cmp	r5, ip
 8016a7e:	da18      	bge.n	8016ab2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016a80:	454f      	cmp	r7, r9
 8016a82:	bfb8      	it	lt
 8016a84:	464f      	movlt	r7, r9
 8016a86:	42b5      	cmp	r5, r6
 8016a88:	bfb8      	it	lt
 8016a8a:	4635      	movlt	r5, r6
 8016a8c:	45f0      	cmp	r8, lr
 8016a8e:	bfd8      	it	le
 8016a90:	4622      	movle	r2, r4
 8016a92:	1bd2      	subs	r2, r2, r7
 8016a94:	8082      	strh	r2, [r0, #4]
 8016a96:	884a      	ldrh	r2, [r1, #2]
 8016a98:	88c9      	ldrh	r1, [r1, #6]
 8016a9a:	8007      	strh	r7, [r0, #0]
 8016a9c:	440a      	add	r2, r1
 8016a9e:	8045      	strh	r5, [r0, #2]
 8016aa0:	b292      	uxth	r2, r2
 8016aa2:	b211      	sxth	r1, r2
 8016aa4:	458c      	cmp	ip, r1
 8016aa6:	bfa8      	it	ge
 8016aa8:	4613      	movge	r3, r2
 8016aaa:	1b5b      	subs	r3, r3, r5
 8016aac:	80c3      	strh	r3, [r0, #6]
 8016aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	8003      	strh	r3, [r0, #0]
 8016ab6:	8043      	strh	r3, [r0, #2]
 8016ab8:	8083      	strh	r3, [r0, #4]
 8016aba:	80c3      	strh	r3, [r0, #6]
 8016abc:	e7f7      	b.n	8016aae <_ZN8touchgfx4RectaNERKS0_+0x76>

08016abe <_ZNK8touchgfx4Rect7isEmptyEv>:
 8016abe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	dd06      	ble.n	8016ad4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016ac6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016aca:	2800      	cmp	r0, #0
 8016acc:	bfcc      	ite	gt
 8016ace:	2000      	movgt	r0, #0
 8016ad0:	2001      	movle	r0, #1
 8016ad2:	4770      	bx	lr
 8016ad4:	2001      	movs	r0, #1
 8016ad6:	4770      	bx	lr

08016ad8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016adc:	2300      	movs	r3, #0
 8016ade:	4604      	mov	r4, r0
 8016ae0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016ae2:	8003      	strh	r3, [r0, #0]
 8016ae4:	8043      	strh	r3, [r0, #2]
 8016ae6:	8083      	strh	r3, [r0, #4]
 8016ae8:	80c3      	strh	r3, [r0, #6]
 8016aea:	2d00      	cmp	r5, #0
 8016aec:	d040      	beq.n	8016b70 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8016aee:	1d28      	adds	r0, r5, #4
 8016af0:	f7ff ffe5 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 8016af4:	b988      	cbnz	r0, 8016b1a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016af6:	4620      	mov	r0, r4
 8016af8:	f7ff ffe1 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 8016afc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016b00:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016b04:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8016b08:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8016b0c:	b138      	cbz	r0, 8016b1e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8016b0e:	8022      	strh	r2, [r4, #0]
 8016b10:	8063      	strh	r3, [r4, #2]
 8016b12:	f8a4 e004 	strh.w	lr, [r4, #4]
 8016b16:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016b1a:	69ad      	ldr	r5, [r5, #24]
 8016b1c:	e7e5      	b.n	8016aea <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8016b1e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016b22:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016b26:	4290      	cmp	r0, r2
 8016b28:	4607      	mov	r7, r0
 8016b2a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016b2e:	460e      	mov	r6, r1
 8016b30:	bfa8      	it	ge
 8016b32:	4617      	movge	r7, r2
 8016b34:	4299      	cmp	r1, r3
 8016b36:	4472      	add	r2, lr
 8016b38:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8016b3c:	bfa8      	it	ge
 8016b3e:	461e      	movge	r6, r3
 8016b40:	4440      	add	r0, r8
 8016b42:	4471      	add	r1, lr
 8016b44:	4463      	add	r3, ip
 8016b46:	b200      	sxth	r0, r0
 8016b48:	8027      	strh	r7, [r4, #0]
 8016b4a:	b212      	sxth	r2, r2
 8016b4c:	8066      	strh	r6, [r4, #2]
 8016b4e:	b209      	sxth	r1, r1
 8016b50:	b21b      	sxth	r3, r3
 8016b52:	4290      	cmp	r0, r2
 8016b54:	bfac      	ite	ge
 8016b56:	ebc7 0200 	rsbge	r2, r7, r0
 8016b5a:	ebc7 0202 	rsblt	r2, r7, r2
 8016b5e:	4299      	cmp	r1, r3
 8016b60:	bfac      	ite	ge
 8016b62:	ebc6 0301 	rsbge	r3, r6, r1
 8016b66:	ebc6 0303 	rsblt	r3, r6, r3
 8016b6a:	80a2      	strh	r2, [r4, #4]
 8016b6c:	80e3      	strh	r3, [r4, #6]
 8016b6e:	e7d4      	b.n	8016b1a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016b70:	4620      	mov	r0, r4
 8016b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b76 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016b76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016b7a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016b7e:	b383      	cbz	r3, 8016be2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016b80:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016b82:	b374      	cbz	r4, 8016be2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016b84:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016b88:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016b8c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016b90:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016b94:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016b98:	b303      	cbz	r3, 8016bdc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016b9a:	4668      	mov	r0, sp
 8016b9c:	1d21      	adds	r1, r4, #4
 8016b9e:	f8ad 5000 	strh.w	r5, [sp]
 8016ba2:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016ba6:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016baa:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016bae:	f7ff ff43 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 8016bb2:	4668      	mov	r0, sp
 8016bb4:	f7ff ff83 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 8016bb8:	b980      	cbnz	r0, 8016bdc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016bba:	f8bd 3000 	ldrh.w	r3, [sp]
 8016bbe:	4669      	mov	r1, sp
 8016bc0:	88a2      	ldrh	r2, [r4, #4]
 8016bc2:	4620      	mov	r0, r4
 8016bc4:	1a9b      	subs	r3, r3, r2
 8016bc6:	88e2      	ldrh	r2, [r4, #6]
 8016bc8:	f8ad 3000 	strh.w	r3, [sp]
 8016bcc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016bd0:	1a9b      	subs	r3, r3, r2
 8016bd2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016bd6:	6823      	ldr	r3, [r4, #0]
 8016bd8:	689b      	ldr	r3, [r3, #8]
 8016bda:	4798      	blx	r3
 8016bdc:	69a4      	ldr	r4, [r4, #24]
 8016bde:	2c00      	cmp	r4, #0
 8016be0:	d1d8      	bne.n	8016b94 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8016be2:	b002      	add	sp, #8
 8016be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016be8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8016be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016bea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016bee:	460d      	mov	r5, r1
 8016bf0:	4616      	mov	r6, r2
 8016bf2:	b323      	cbz	r3, 8016c3e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016bf4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016bf6:	b314      	cbz	r4, 8016c3e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016bf8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016bfc:	b1eb      	cbz	r3, 8016c3a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016bfe:	6828      	ldr	r0, [r5, #0]
 8016c00:	466b      	mov	r3, sp
 8016c02:	6869      	ldr	r1, [r5, #4]
 8016c04:	c303      	stmia	r3!, {r0, r1}
 8016c06:	4668      	mov	r0, sp
 8016c08:	1d21      	adds	r1, r4, #4
 8016c0a:	f7ff ff15 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 8016c0e:	4668      	mov	r0, sp
 8016c10:	f7ff ff55 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 8016c14:	b988      	cbnz	r0, 8016c3a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016c16:	f8bd 3000 	ldrh.w	r3, [sp]
 8016c1a:	4669      	mov	r1, sp
 8016c1c:	88a2      	ldrh	r2, [r4, #4]
 8016c1e:	4620      	mov	r0, r4
 8016c20:	1a9b      	subs	r3, r3, r2
 8016c22:	88e2      	ldrh	r2, [r4, #6]
 8016c24:	f8ad 3000 	strh.w	r3, [sp]
 8016c28:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016c2c:	1a9b      	subs	r3, r3, r2
 8016c2e:	4632      	mov	r2, r6
 8016c30:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016c34:	6823      	ldr	r3, [r4, #0]
 8016c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016c38:	4798      	blx	r3
 8016c3a:	69a4      	ldr	r4, [r4, #24]
 8016c3c:	e7db      	b.n	8016bf6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8016c3e:	b002      	add	sp, #8
 8016c40:	bd70      	pop	{r4, r5, r6, pc}

08016c42 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8016c42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016c46:	4770      	bx	lr

08016c48 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8016c48:	4770      	bx	lr

08016c4a <_ZN8touchgfx3HAL10FlushCacheEv>:
 8016c4a:	4770      	bx	lr

08016c4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8016c4c:	6803      	ldr	r3, [r0, #0]
 8016c4e:	b513      	push	{r0, r1, r4, lr}
 8016c50:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8016c54:	2300      	movs	r3, #0
 8016c56:	e9cd 3300 	strd	r3, r3, [sp]
 8016c5a:	466b      	mov	r3, sp
 8016c5c:	47a0      	blx	r4
 8016c5e:	b002      	add	sp, #8
 8016c60:	bd10      	pop	{r4, pc}

08016c62 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016c62:	2301      	movs	r3, #1
 8016c64:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016c68:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016c6c:	4770      	bx	lr

08016c6e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8016c6e:	2301      	movs	r3, #1
 8016c70:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016c74:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016c78:	4770      	bx	lr

08016c7a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016c7a:	6843      	ldr	r3, [r0, #4]
 8016c7c:	2201      	movs	r2, #1
 8016c7e:	725a      	strb	r2, [r3, #9]
 8016c80:	6840      	ldr	r0, [r0, #4]
 8016c82:	6803      	ldr	r3, [r0, #0]
 8016c84:	691b      	ldr	r3, [r3, #16]
 8016c86:	4718      	bx	r3

08016c88 <_ZN8touchgfx3HAL8flushDMAEv>:
 8016c88:	6840      	ldr	r0, [r0, #4]
 8016c8a:	6803      	ldr	r3, [r0, #0]
 8016c8c:	689b      	ldr	r3, [r3, #8]
 8016c8e:	4718      	bx	r3

08016c90 <_ZN8touchgfx3HAL10beginFrameEv>:
 8016c90:	4b04      	ldr	r3, [pc, #16]	; (8016ca4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8016c92:	781b      	ldrb	r3, [r3, #0]
 8016c94:	b123      	cbz	r3, 8016ca0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8016c96:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016c9a:	f080 0001 	eor.w	r0, r0, #1
 8016c9e:	4770      	bx	lr
 8016ca0:	2001      	movs	r0, #1
 8016ca2:	4770      	bx	lr
 8016ca4:	200057de 	.word	0x200057de

08016ca8 <_ZN8touchgfx3HAL8endFrameEv>:
 8016ca8:	b510      	push	{r4, lr}
 8016caa:	4604      	mov	r4, r0
 8016cac:	6840      	ldr	r0, [r0, #4]
 8016cae:	6803      	ldr	r3, [r0, #0]
 8016cb0:	689b      	ldr	r3, [r3, #8]
 8016cb2:	4798      	blx	r3
 8016cb4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8016cb8:	b113      	cbz	r3, 8016cc0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016cba:	2301      	movs	r3, #1
 8016cbc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016cc0:	bd10      	pop	{r4, pc}

08016cc2 <_ZN8touchgfx3HAL9taskEntryEv>:
 8016cc2:	b508      	push	{r3, lr}
 8016cc4:	6803      	ldr	r3, [r0, #0]
 8016cc6:	4604      	mov	r4, r0
 8016cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016cca:	4798      	blx	r3
 8016ccc:	6823      	ldr	r3, [r4, #0]
 8016cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016cd0:	4620      	mov	r0, r4
 8016cd2:	4798      	blx	r3
 8016cd4:	f7fe f82a 	bl	8014d2c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016cd8:	6823      	ldr	r3, [r4, #0]
 8016cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016cdc:	e7f8      	b.n	8016cd0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08016ce0 <_ZN8touchgfx3HAL4tickEv>:
 8016ce0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016ce2:	6803      	ldr	r3, [r0, #0]
 8016ce4:	4604      	mov	r4, r0
 8016ce6:	4d5c      	ldr	r5, [pc, #368]	; (8016e58 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8016ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016cec:	4798      	blx	r3
 8016cee:	2800      	cmp	r0, #0
 8016cf0:	f000 8097 	beq.w	8016e22 <_ZN8touchgfx3HAL4tickEv+0x142>
 8016cf4:	2001      	movs	r0, #1
 8016cf6:	2600      	movs	r6, #0
 8016cf8:	f7fd fd8e 	bl	8014818 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016cfc:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8016d00:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016d04:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016d08:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8016d0c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8016d10:	b133      	cbz	r3, 8016d20 <_ZN8touchgfx3HAL4tickEv+0x40>
 8016d12:	6823      	ldr	r3, [r4, #0]
 8016d14:	4620      	mov	r0, r4
 8016d16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016d1a:	4798      	blx	r3
 8016d1c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8016d20:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016d24:	2601      	movs	r6, #1
 8016d26:	6862      	ldr	r2, [r4, #4]
 8016d28:	f083 0301 	eor.w	r3, r3, #1
 8016d2c:	702e      	strb	r6, [r5, #0]
 8016d2e:	7253      	strb	r3, [r2, #9]
 8016d30:	f003 f8c8 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 8016d34:	6803      	ldr	r3, [r0, #0]
 8016d36:	4631      	mov	r1, r6
 8016d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d3a:	4798      	blx	r3
 8016d3c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016d40:	b90b      	cbnz	r3, 8016d46 <_ZN8touchgfx3HAL4tickEv+0x66>
 8016d42:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8016d46:	f003 f8bd 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 8016d4a:	6803      	ldr	r3, [r0, #0]
 8016d4c:	695b      	ldr	r3, [r3, #20]
 8016d4e:	4798      	blx	r3
 8016d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d52:	6803      	ldr	r3, [r0, #0]
 8016d54:	691b      	ldr	r3, [r3, #16]
 8016d56:	4798      	blx	r3
 8016d58:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016d5c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8016d60:	3b01      	subs	r3, #1
 8016d62:	b2db      	uxtb	r3, r3
 8016d64:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016d68:	b10a      	cbz	r2, 8016d6e <_ZN8touchgfx3HAL4tickEv+0x8e>
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d1eb      	bne.n	8016d46 <_ZN8touchgfx3HAL4tickEv+0x66>
 8016d6e:	4a3b      	ldr	r2, [pc, #236]	; (8016e5c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8016d70:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8016d74:	7813      	ldrb	r3, [r2, #0]
 8016d76:	3301      	adds	r3, #1
 8016d78:	b25b      	sxtb	r3, r3
 8016d7a:	4299      	cmp	r1, r3
 8016d7c:	7013      	strb	r3, [r2, #0]
 8016d7e:	dc10      	bgt.n	8016da2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8016d80:	2300      	movs	r3, #0
 8016d82:	68e0      	ldr	r0, [r4, #12]
 8016d84:	a902      	add	r1, sp, #8
 8016d86:	7013      	strb	r3, [r2, #0]
 8016d88:	aa03      	add	r2, sp, #12
 8016d8a:	6803      	ldr	r3, [r0, #0]
 8016d8c:	68db      	ldr	r3, [r3, #12]
 8016d8e:	4798      	blx	r3
 8016d90:	6823      	ldr	r3, [r4, #0]
 8016d92:	2800      	cmp	r0, #0
 8016d94:	d051      	beq.n	8016e3a <_ZN8touchgfx3HAL4tickEv+0x15a>
 8016d96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016da0:	4798      	blx	r3
 8016da2:	2300      	movs	r3, #0
 8016da4:	6960      	ldr	r0, [r4, #20]
 8016da6:	f88d 3007 	strb.w	r3, [sp, #7]
 8016daa:	b158      	cbz	r0, 8016dc4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016dac:	6803      	ldr	r3, [r0, #0]
 8016dae:	f10d 0107 	add.w	r1, sp, #7
 8016db2:	68db      	ldr	r3, [r3, #12]
 8016db4:	4798      	blx	r3
 8016db6:	b128      	cbz	r0, 8016dc4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dba:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016dbe:	6803      	ldr	r3, [r0, #0]
 8016dc0:	68db      	ldr	r3, [r3, #12]
 8016dc2:	4798      	blx	r3
 8016dc4:	f104 001c 	add.w	r0, r4, #28
 8016dc8:	f011 fb76 	bl	80284b8 <_ZN8touchgfx8Gestures4tickEv>
 8016dcc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8016dd0:	b30b      	cbz	r3, 8016e16 <_ZN8touchgfx3HAL4tickEv+0x136>
 8016dd2:	6920      	ldr	r0, [r4, #16]
 8016dd4:	6803      	ldr	r3, [r0, #0]
 8016dd6:	691b      	ldr	r3, [r3, #16]
 8016dd8:	4798      	blx	r3
 8016dda:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016ddc:	4606      	mov	r6, r0
 8016dde:	b903      	cbnz	r3, 8016de2 <_ZN8touchgfx3HAL4tickEv+0x102>
 8016de0:	6720      	str	r0, [r4, #112]	; 0x70
 8016de2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016de4:	4a1e      	ldr	r2, [pc, #120]	; (8016e60 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8016de6:	1af3      	subs	r3, r6, r3
 8016de8:	4293      	cmp	r3, r2
 8016dea:	d914      	bls.n	8016e16 <_ZN8touchgfx3HAL4tickEv+0x136>
 8016dec:	6920      	ldr	r0, [r4, #16]
 8016dee:	6803      	ldr	r3, [r0, #0]
 8016df0:	699b      	ldr	r3, [r3, #24]
 8016df2:	4798      	blx	r3
 8016df4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016df6:	2264      	movs	r2, #100	; 0x64
 8016df8:	1af3      	subs	r3, r6, r3
 8016dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8016dfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8016e02:	2800      	cmp	r0, #0
 8016e04:	dc1e      	bgt.n	8016e44 <_ZN8touchgfx3HAL4tickEv+0x164>
 8016e06:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8016e0a:	6920      	ldr	r0, [r4, #16]
 8016e0c:	2100      	movs	r1, #0
 8016e0e:	6803      	ldr	r3, [r0, #0]
 8016e10:	69db      	ldr	r3, [r3, #28]
 8016e12:	4798      	blx	r3
 8016e14:	6726      	str	r6, [r4, #112]	; 0x70
 8016e16:	f003 f855 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 8016e1a:	6803      	ldr	r3, [r0, #0]
 8016e1c:	2100      	movs	r1, #0
 8016e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e20:	4798      	blx	r3
 8016e22:	6823      	ldr	r3, [r4, #0]
 8016e24:	4620      	mov	r0, r4
 8016e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016e2a:	4798      	blx	r3
 8016e2c:	2001      	movs	r0, #1
 8016e2e:	f7fd fcfe 	bl	801482e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8016e32:	2300      	movs	r3, #0
 8016e34:	702b      	strb	r3, [r5, #0]
 8016e36:	b004      	add	sp, #16
 8016e38:	bd70      	pop	{r4, r5, r6, pc}
 8016e3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016e3e:	4620      	mov	r0, r4
 8016e40:	4798      	blx	r3
 8016e42:	e7ae      	b.n	8016da2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8016e44:	2863      	cmp	r0, #99	; 0x63
 8016e46:	bfcb      	itete	gt
 8016e48:	2300      	movgt	r3, #0
 8016e4a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016e4e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8016e52:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8016e56:	e7d8      	b.n	8016e0a <_ZN8touchgfx3HAL4tickEv+0x12a>
 8016e58:	200057e4 	.word	0x200057e4
 8016e5c:	200057e5 	.word	0x200057e5
 8016e60:	05f5e100 	.word	0x05f5e100

08016e64 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016e64:	f7fd bf2e 	b.w	8014cc4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016e68 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016e68:	6581      	str	r1, [r0, #88]	; 0x58
 8016e6a:	301c      	adds	r0, #28
 8016e6c:	f011 bb22 	b.w	80284b4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016e70 <_ZN8touchgfx3HAL5touchEll>:
 8016e70:	b530      	push	{r4, r5, lr}
 8016e72:	b087      	sub	sp, #28
 8016e74:	4604      	mov	r4, r0
 8016e76:	a804      	add	r0, sp, #16
 8016e78:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016e7c:	f002 fdec 	bl	8019a58 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016e80:	9b04      	ldr	r3, [sp, #16]
 8016e82:	a906      	add	r1, sp, #24
 8016e84:	a803      	add	r0, sp, #12
 8016e86:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016e8a:	9b05      	ldr	r3, [sp, #20]
 8016e8c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016e90:	f002 fe20 	bl	8019ad4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016e94:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016e98:	f104 001c 	add.w	r0, r4, #28
 8016e9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016ea0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016ea4:	b189      	cbz	r1, 8016eca <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016ea6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016eaa:	9300      	str	r3, [sp, #0]
 8016eac:	4613      	mov	r3, r2
 8016eae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8016eb2:	462a      	mov	r2, r5
 8016eb4:	f011 fb0e 	bl	80284d4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016eb8:	b128      	cbz	r0, 8016ec6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8016eba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016ebe:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016ec0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016ec4:	6623      	str	r3, [r4, #96]	; 0x60
 8016ec6:	b007      	add	sp, #28
 8016ec8:	bd30      	pop	{r4, r5, pc}
 8016eca:	f011 fb47 	bl	802855c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016ece:	2301      	movs	r3, #1
 8016ed0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016ed4:	e7f1      	b.n	8016eba <_ZN8touchgfx3HAL5touchEll+0x4a>

08016ed6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016ed6:	b570      	push	{r4, r5, r6, lr}
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d050      	beq.n	8016f7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016edc:	ea81 0002 	eor.w	r0, r1, r2
 8016ee0:	07c6      	lsls	r6, r0, #31
 8016ee2:	d508      	bpl.n	8016ef6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016ee4:	3a01      	subs	r2, #1
 8016ee6:	18cc      	adds	r4, r1, r3
 8016ee8:	42a1      	cmp	r1, r4
 8016eea:	d048      	beq.n	8016f7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016eec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016ef0:	f801 0b01 	strb.w	r0, [r1], #1
 8016ef4:	e7f8      	b.n	8016ee8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016ef6:	07d5      	lsls	r5, r2, #31
 8016ef8:	bf42      	ittt	mi
 8016efa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016efe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016f02:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016f06:	2b01      	cmp	r3, #1
 8016f08:	d915      	bls.n	8016f36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016f0a:	ea82 0001 	eor.w	r0, r2, r1
 8016f0e:	0784      	lsls	r4, r0, #30
 8016f10:	d02d      	beq.n	8016f6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8016f12:	1e94      	subs	r4, r2, #2
 8016f14:	4608      	mov	r0, r1
 8016f16:	18ce      	adds	r6, r1, r3
 8016f18:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8016f1c:	f820 5b02 	strh.w	r5, [r0], #2
 8016f20:	1a35      	subs	r5, r6, r0
 8016f22:	2d01      	cmp	r5, #1
 8016f24:	d8f8      	bhi.n	8016f18 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8016f26:	1e98      	subs	r0, r3, #2
 8016f28:	f003 0301 	and.w	r3, r3, #1
 8016f2c:	f020 0001 	bic.w	r0, r0, #1
 8016f30:	3002      	adds	r0, #2
 8016f32:	4401      	add	r1, r0
 8016f34:	4402      	add	r2, r0
 8016f36:	1f14      	subs	r4, r2, #4
 8016f38:	4608      	mov	r0, r1
 8016f3a:	18ce      	adds	r6, r1, r3
 8016f3c:	1a35      	subs	r5, r6, r0
 8016f3e:	2d03      	cmp	r5, #3
 8016f40:	d810      	bhi.n	8016f64 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8016f42:	089c      	lsrs	r4, r3, #2
 8016f44:	00a0      	lsls	r0, r4, #2
 8016f46:	4401      	add	r1, r0
 8016f48:	3801      	subs	r0, #1
 8016f4a:	4402      	add	r2, r0
 8016f4c:	f06f 0003 	mvn.w	r0, #3
 8016f50:	fb00 3404 	mla	r4, r0, r4, r3
 8016f54:	440c      	add	r4, r1
 8016f56:	42a1      	cmp	r1, r4
 8016f58:	d011      	beq.n	8016f7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016f5a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8016f5e:	f801 3b01 	strb.w	r3, [r1], #1
 8016f62:	e7f8      	b.n	8016f56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8016f64:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8016f68:	f840 5b04 	str.w	r5, [r0], #4
 8016f6c:	e7e6      	b.n	8016f3c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8016f6e:	0790      	lsls	r0, r2, #30
 8016f70:	d0e1      	beq.n	8016f36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016f72:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016f76:	3b02      	subs	r3, #2
 8016f78:	f821 0b02 	strh.w	r0, [r1], #2
 8016f7c:	e7db      	b.n	8016f36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016f7e:	2001      	movs	r0, #1
 8016f80:	bd70      	pop	{r4, r5, r6, pc}

08016f82 <_ZN8touchgfx3HAL7noTouchEv>:
 8016f82:	b510      	push	{r4, lr}
 8016f84:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016f88:	4604      	mov	r4, r0
 8016f8a:	b153      	cbz	r3, 8016fa2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016f8c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016f90:	2101      	movs	r1, #1
 8016f92:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8016f96:	301c      	adds	r0, #28
 8016f98:	f011 fae0 	bl	802855c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016fa2:	bd10      	pop	{r4, pc}

08016fa4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016fa8:	4604      	mov	r4, r0
 8016faa:	6980      	ldr	r0, [r0, #24]
 8016fac:	b085      	sub	sp, #20
 8016fae:	460f      	mov	r7, r1
 8016fb0:	4690      	mov	r8, r2
 8016fb2:	4699      	mov	r9, r3
 8016fb4:	b930      	cbnz	r0, 8016fc4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8016fb6:	4b1c      	ldr	r3, [pc, #112]	; (8017028 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8016fb8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8016fbc:	4a1b      	ldr	r2, [pc, #108]	; (801702c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016fbe:	481c      	ldr	r0, [pc, #112]	; (8017030 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8016fc0:	f011 fb62 	bl	8028688 <__assert_func>
 8016fc4:	ad04      	add	r5, sp, #16
 8016fc6:	2600      	movs	r6, #0
 8016fc8:	f845 6d04 	str.w	r6, [r5, #-4]!
 8016fcc:	6806      	ldr	r6, [r0, #0]
 8016fce:	9501      	str	r5, [sp, #4]
 8016fd0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016fd4:	9500      	str	r5, [sp, #0]
 8016fd6:	6835      	ldr	r5, [r6, #0]
 8016fd8:	47a8      	blx	r5
 8016fda:	4d16      	ldr	r5, [pc, #88]	; (8017034 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016fdc:	4606      	mov	r6, r0
 8016fde:	f8a5 9000 	strh.w	r9, [r5]
 8016fe2:	f7fa fffb 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 8016fe6:	6803      	ldr	r3, [r0, #0]
 8016fe8:	6a1b      	ldr	r3, [r3, #32]
 8016fea:	4798      	blx	r3
 8016fec:	2801      	cmp	r0, #1
 8016fee:	d012      	beq.n	8017016 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8016ff0:	d306      	bcc.n	8017000 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8016ff2:	280d      	cmp	r0, #13
 8016ff4:	d80b      	bhi.n	801700e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8016ff6:	4b10      	ldr	r3, [pc, #64]	; (8017038 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016ff8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8016ffc:	4a0b      	ldr	r2, [pc, #44]	; (801702c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016ffe:	e7de      	b.n	8016fbe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017000:	882b      	ldrh	r3, [r5, #0]
 8017002:	fb08 7203 	mla	r2, r8, r3, r7
 8017006:	9b03      	ldr	r3, [sp, #12]
 8017008:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801700c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801700e:	4630      	mov	r0, r6
 8017010:	b005      	add	sp, #20
 8017012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017016:	882a      	ldrh	r2, [r5, #0]
 8017018:	9b03      	ldr	r3, [sp, #12]
 801701a:	fb08 7202 	mla	r2, r8, r2, r7
 801701e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017022:	1a9a      	subs	r2, r3, r2
 8017024:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017026:	e7f2      	b.n	801700e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017028:	0802b4fd 	.word	0x0802b4fd
 801702c:	0802b816 	.word	0x0802b816
 8017030:	0802b542 	.word	0x0802b542
 8017034:	200057da 	.word	0x200057da
 8017038:	0802b568 	.word	0x0802b568

0801703c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801703c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017040:	4698      	mov	r8, r3
 8017042:	6803      	ldr	r3, [r0, #0]
 8017044:	b087      	sub	sp, #28
 8017046:	460e      	mov	r6, r1
 8017048:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801704a:	4617      	mov	r7, r2
 801704c:	4b0d      	ldr	r3, [pc, #52]	; (8017084 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801704e:	4604      	mov	r4, r0
 8017050:	f8b3 9000 	ldrh.w	r9, [r3]
 8017054:	f7fa ffc2 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 8017058:	6803      	ldr	r3, [r0, #0]
 801705a:	6a1b      	ldr	r3, [r3, #32]
 801705c:	4798      	blx	r3
 801705e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017062:	463a      	mov	r2, r7
 8017064:	4631      	mov	r1, r6
 8017066:	9302      	str	r3, [sp, #8]
 8017068:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801706c:	9301      	str	r3, [sp, #4]
 801706e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017072:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8017076:	9300      	str	r3, [sp, #0]
 8017078:	4620      	mov	r0, r4
 801707a:	4643      	mov	r3, r8
 801707c:	47a8      	blx	r5
 801707e:	b007      	add	sp, #28
 8017080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017084:	200057da 	.word	0x200057da

08017088 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801708c:	4604      	mov	r4, r0
 801708e:	b08b      	sub	sp, #44	; 0x2c
 8017090:	4610      	mov	r0, r2
 8017092:	460d      	mov	r5, r1
 8017094:	4691      	mov	r9, r2
 8017096:	461e      	mov	r6, r3
 8017098:	f005 fc12 	bl	801c8c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801709c:	2800      	cmp	r0, #0
 801709e:	f000 80a0 	beq.w	80171e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80170a2:	6823      	ldr	r3, [r4, #0]
 80170a4:	4620      	mov	r0, r4
 80170a6:	f8df b170 	ldr.w	fp, [pc, #368]	; 8017218 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 80170aa:	af0a      	add	r7, sp, #40	; 0x28
 80170ac:	6a1b      	ldr	r3, [r3, #32]
 80170ae:	4798      	blx	r3
 80170b0:	6823      	ldr	r3, [r4, #0]
 80170b2:	4620      	mov	r0, r4
 80170b4:	f8df a164 	ldr.w	sl, [pc, #356]	; 801721c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 80170b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170ba:	4798      	blx	r3
 80170bc:	f8bb 3000 	ldrh.w	r3, [fp]
 80170c0:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 80170c4:	4638      	mov	r0, r7
 80170c6:	9301      	str	r3, [sp, #4]
 80170c8:	f8ba 3000 	ldrh.w	r3, [sl]
 80170cc:	9302      	str	r3, [sp, #8]
 80170ce:	4b4f      	ldr	r3, [pc, #316]	; (801720c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 80170d0:	881a      	ldrh	r2, [r3, #0]
 80170d2:	4698      	mov	r8, r3
 80170d4:	9203      	str	r2, [sp, #12]
 80170d6:	4a4e      	ldr	r2, [pc, #312]	; (8017210 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 80170d8:	8812      	ldrh	r2, [r2, #0]
 80170da:	9204      	str	r2, [sp, #16]
 80170dc:	4a4d      	ldr	r2, [pc, #308]	; (8017214 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 80170de:	7812      	ldrb	r2, [r2, #0]
 80170e0:	2a00      	cmp	r2, #0
 80170e2:	f040 8081 	bne.w	80171e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 80170e6:	f005 fca5 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80170ea:	f8ab 0000 	strh.w	r0, [fp]
 80170ee:	4638      	mov	r0, r7
 80170f0:	f005 fcda 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170f4:	f8aa 0000 	strh.w	r0, [sl]
 80170f8:	4638      	mov	r0, r7
 80170fa:	f005 fc9b 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80170fe:	f8a8 0000 	strh.w	r0, [r8]
 8017102:	4638      	mov	r0, r7
 8017104:	f005 fcd0 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017108:	4b41      	ldr	r3, [pc, #260]	; (8017210 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 801710a:	8018      	strh	r0, [r3, #0]
 801710c:	4648      	mov	r0, r9
 801710e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017112:	f005 fbd5 	bl	801c8c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017116:	2200      	movs	r2, #0
 8017118:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801711c:	4611      	mov	r1, r2
 801711e:	4628      	mov	r0, r5
 8017120:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017124:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017128:	f7fa fe55 	bl	8011dd6 <_ZN8touchgfx8Drawable5setXYEss>
 801712c:	2301      	movs	r3, #1
 801712e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017132:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017136:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801713a:	2b00      	cmp	r3, #0
 801713c:	dd5c      	ble.n	80171f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 801713e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017142:	2b00      	cmp	r3, #0
 8017144:	dd58      	ble.n	80171f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8017146:	462a      	mov	r2, r5
 8017148:	ab08      	add	r3, sp, #32
 801714a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801714e:	6851      	ldr	r1, [r2, #4]
 8017150:	c303      	stmia	r3!, {r0, r1}
 8017152:	4631      	mov	r1, r6
 8017154:	a808      	add	r0, sp, #32
 8017156:	f7ff fc6f 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 801715a:	a807      	add	r0, sp, #28
 801715c:	f005 fdfc 	bl	801cd58 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017160:	4606      	mov	r6, r0
 8017162:	f7fa ff3b 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 8017166:	6803      	ldr	r3, [r0, #0]
 8017168:	6a1b      	ldr	r3, [r3, #32]
 801716a:	4798      	blx	r3
 801716c:	4286      	cmp	r6, r0
 801716e:	d04a      	beq.n	8017206 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 8017170:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017172:	b150      	cbz	r0, 801718a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8017174:	a807      	add	r0, sp, #28
 8017176:	f005 fdef 	bl	801cd58 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801717a:	4606      	mov	r6, r0
 801717c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801717e:	6803      	ldr	r3, [r0, #0]
 8017180:	6a1b      	ldr	r3, [r3, #32]
 8017182:	4798      	blx	r3
 8017184:	1a33      	subs	r3, r6, r0
 8017186:	4258      	negs	r0, r3
 8017188:	4158      	adcs	r0, r3
 801718a:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801718e:	2600      	movs	r6, #0
 8017190:	696b      	ldr	r3, [r5, #20]
 8017192:	a908      	add	r1, sp, #32
 8017194:	682a      	ldr	r2, [r5, #0]
 8017196:	4628      	mov	r0, r5
 8017198:	9305      	str	r3, [sp, #20]
 801719a:	616e      	str	r6, [r5, #20]
 801719c:	6892      	ldr	r2, [r2, #8]
 801719e:	4790      	blx	r2
 80171a0:	9b05      	ldr	r3, [sp, #20]
 80171a2:	4652      	mov	r2, sl
 80171a4:	4649      	mov	r1, r9
 80171a6:	616b      	str	r3, [r5, #20]
 80171a8:	4628      	mov	r0, r5
 80171aa:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80171ae:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80171b2:	f7fa fe10 	bl	8011dd6 <_ZN8touchgfx8Drawable5setXYEss>
 80171b6:	9a01      	ldr	r2, [sp, #4]
 80171b8:	4b17      	ldr	r3, [pc, #92]	; (8017218 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 80171ba:	4620      	mov	r0, r4
 80171bc:	801a      	strh	r2, [r3, #0]
 80171be:	9a02      	ldr	r2, [sp, #8]
 80171c0:	4b16      	ldr	r3, [pc, #88]	; (801721c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 80171c2:	801a      	strh	r2, [r3, #0]
 80171c4:	9a03      	ldr	r2, [sp, #12]
 80171c6:	4b11      	ldr	r3, [pc, #68]	; (801720c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 80171c8:	801a      	strh	r2, [r3, #0]
 80171ca:	4b11      	ldr	r3, [pc, #68]	; (8017210 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 80171cc:	9a04      	ldr	r2, [sp, #16]
 80171ce:	801a      	strh	r2, [r3, #0]
 80171d0:	6823      	ldr	r3, [r4, #0]
 80171d2:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80171d6:	6a1b      	ldr	r3, [r3, #32]
 80171d8:	4798      	blx	r3
 80171da:	6823      	ldr	r3, [r4, #0]
 80171dc:	4620      	mov	r0, r4
 80171de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171e0:	4798      	blx	r3
 80171e2:	b00b      	add	sp, #44	; 0x2c
 80171e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171e8:	f005 fc5e 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80171ec:	f8ab 0000 	strh.w	r0, [fp]
 80171f0:	4638      	mov	r0, r7
 80171f2:	f005 fc1f 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80171f6:	e77d      	b.n	80170f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 80171f8:	462a      	mov	r2, r5
 80171fa:	ab08      	add	r3, sp, #32
 80171fc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017200:	6851      	ldr	r1, [r2, #4]
 8017202:	c303      	stmia	r3!, {r0, r1}
 8017204:	e7a9      	b.n	801715a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 8017206:	2000      	movs	r0, #0
 8017208:	e7bf      	b.n	801718a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 801720a:	bf00      	nop
 801720c:	200057d4 	.word	0x200057d4
 8017210:	200057d6 	.word	0x200057d6
 8017214:	200057d8 	.word	0x200057d8
 8017218:	200057da 	.word	0x200057da
 801721c:	200057dc 	.word	0x200057dc

08017220 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017220:	4b07      	ldr	r3, [pc, #28]	; (8017240 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017222:	b510      	push	{r4, lr}
 8017224:	781b      	ldrb	r3, [r3, #0]
 8017226:	4604      	mov	r4, r0
 8017228:	b13b      	cbz	r3, 801723a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801722a:	6803      	ldr	r3, [r0, #0]
 801722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801722e:	4798      	blx	r3
 8017230:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017232:	4283      	cmp	r3, r0
 8017234:	d101      	bne.n	801723a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017236:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017238:	bd10      	pop	{r4, pc}
 801723a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801723c:	e7fc      	b.n	8017238 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801723e:	bf00      	nop
 8017240:	200057de 	.word	0x200057de

08017244 <_ZN8touchgfx3HAL10initializeEv>:
 8017244:	b510      	push	{r4, lr}
 8017246:	4604      	mov	r4, r0
 8017248:	f7fd fcfa 	bl	8014c40 <_ZN8touchgfx10OSWrappers10initializeEv>
 801724c:	6860      	ldr	r0, [r4, #4]
 801724e:	6803      	ldr	r3, [r0, #0]
 8017250:	68db      	ldr	r3, [r3, #12]
 8017252:	4798      	blx	r3
 8017254:	68e0      	ldr	r0, [r4, #12]
 8017256:	6803      	ldr	r3, [r0, #0]
 8017258:	689b      	ldr	r3, [r3, #8]
 801725a:	4798      	blx	r3
 801725c:	6823      	ldr	r3, [r4, #0]
 801725e:	4620      	mov	r0, r4
 8017260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017266:	4718      	bx	r3

08017268 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8017268:	b508      	push	{r3, lr}
 801726a:	290d      	cmp	r1, #13
 801726c:	d817      	bhi.n	801729e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801726e:	e8df f001 	tbb	[pc, r1]
 8017272:	090b      	.short	0x090b
 8017274:	0d0d0d07 	.word	0x0d0d0d07
 8017278:	1414140d 	.word	0x1414140d
 801727c:	0d0d1414 	.word	0x0d0d1414
 8017280:	2020      	movs	r0, #32
 8017282:	bd08      	pop	{r3, pc}
 8017284:	2018      	movs	r0, #24
 8017286:	e7fc      	b.n	8017282 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017288:	2010      	movs	r0, #16
 801728a:	e7fa      	b.n	8017282 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801728c:	4b05      	ldr	r3, [pc, #20]	; (80172a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801728e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8017292:	4a05      	ldr	r2, [pc, #20]	; (80172a8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8017294:	4805      	ldr	r0, [pc, #20]	; (80172ac <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8017296:	f011 f9f7 	bl	8028688 <__assert_func>
 801729a:	2008      	movs	r0, #8
 801729c:	e7f1      	b.n	8017282 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801729e:	2000      	movs	r0, #0
 80172a0:	e7ef      	b.n	8017282 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80172a2:	bf00      	nop
 80172a4:	0802b63b 	.word	0x0802b63b
 80172a8:	0802b9d8 	.word	0x0802b9d8
 80172ac:	0802b542 	.word	0x0802b542

080172b0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80172b0:	b570      	push	{r4, r5, r6, lr}
 80172b2:	460d      	mov	r5, r1
 80172b4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80172b8:	4616      	mov	r6, r2
 80172ba:	461c      	mov	r4, r3
 80172bc:	f7ff ffd4 	bl	8017268 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80172c0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80172c4:	10c0      	asrs	r0, r0, #3
 80172c6:	fb06 5101 	mla	r1, r6, r1, r5
 80172ca:	fb00 4001 	mla	r0, r0, r1, r4
 80172ce:	bd70      	pop	{r4, r5, r6, pc}

080172d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80172d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172d4:	b08a      	sub	sp, #40	; 0x28
 80172d6:	f04f 0c00 	mov.w	ip, #0
 80172da:	4604      	mov	r4, r0
 80172dc:	469a      	mov	sl, r3
 80172de:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80172e2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80172e6:	f1b8 0f02 	cmp.w	r8, #2
 80172ea:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80172ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80172f2:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80172f6:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80172fa:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80172fe:	f8cd c020 	str.w	ip, [sp, #32]
 8017302:	d030      	beq.n	8017366 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8017304:	2bff      	cmp	r3, #255	; 0xff
 8017306:	d12c      	bne.n	8017362 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8017308:	4560      	cmp	r0, ip
 801730a:	bf14      	ite	ne
 801730c:	2004      	movne	r0, #4
 801730e:	2001      	moveq	r0, #1
 8017310:	9204      	str	r2, [sp, #16]
 8017312:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8017316:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801731a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801731e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017322:	f8ad 501a 	strh.w	r5, [sp, #26]
 8017326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801732a:	4620      	mov	r0, r4
 801732c:	f7ff ff78 	bl	8017220 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017330:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8017334:	4603      	mov	r3, r0
 8017336:	4651      	mov	r1, sl
 8017338:	4620      	mov	r0, r4
 801733a:	e9cd 9700 	strd	r9, r7, [sp]
 801733e:	f7ff ffb7 	bl	80172b0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017342:	f8ad 901e 	strh.w	r9, [sp, #30]
 8017346:	9005      	str	r0, [sp, #20]
 8017348:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801734c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8017350:	b106      	cbz	r6, 8017354 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8017352:	b98d      	cbnz	r5, 8017378 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8017354:	4b12      	ldr	r3, [pc, #72]	; (80173a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8017356:	f240 11c3 	movw	r1, #451	; 0x1c3
 801735a:	4a12      	ldr	r2, [pc, #72]	; (80173a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801735c:	4812      	ldr	r0, [pc, #72]	; (80173a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801735e:	f011 f993 	bl	8028688 <__assert_func>
 8017362:	2004      	movs	r0, #4
 8017364:	e7d4      	b.n	8017310 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017366:	2bff      	cmp	r3, #255	; 0xff
 8017368:	d104      	bne.n	8017374 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801736a:	2800      	cmp	r0, #0
 801736c:	bf14      	ite	ne
 801736e:	2040      	movne	r0, #64	; 0x40
 8017370:	2020      	moveq	r0, #32
 8017372:	e7cd      	b.n	8017310 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017374:	2040      	movs	r0, #64	; 0x40
 8017376:	e7cb      	b.n	8017310 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017378:	6823      	ldr	r3, [r4, #0]
 801737a:	4620      	mov	r0, r4
 801737c:	9d02      	ldr	r5, [sp, #8]
 801737e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017380:	4798      	blx	r3
 8017382:	4228      	tst	r0, r5
 8017384:	d104      	bne.n	8017390 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8017386:	4b09      	ldr	r3, [pc, #36]	; (80173ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8017388:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801738c:	4a05      	ldr	r2, [pc, #20]	; (80173a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801738e:	e7e5      	b.n	801735c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8017390:	6860      	ldr	r0, [r4, #4]
 8017392:	a902      	add	r1, sp, #8
 8017394:	6803      	ldr	r3, [r0, #0]
 8017396:	685b      	ldr	r3, [r3, #4]
 8017398:	4798      	blx	r3
 801739a:	b00a      	add	sp, #40	; 0x28
 801739c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173a0:	0802b5be 	.word	0x0802b5be
 80173a4:	0802b87a 	.word	0x0802b87a
 80173a8:	0802b542 	.word	0x0802b542
 80173ac:	0802b5f6 	.word	0x0802b5f6

080173b0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80173b0:	b510      	push	{r4, lr}
 80173b2:	b08a      	sub	sp, #40	; 0x28
 80173b4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80173b8:	9408      	str	r4, [sp, #32]
 80173ba:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80173be:	9407      	str	r4, [sp, #28]
 80173c0:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80173c4:	9406      	str	r4, [sp, #24]
 80173c6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80173ca:	9405      	str	r4, [sp, #20]
 80173cc:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80173d0:	9404      	str	r4, [sp, #16]
 80173d2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80173d6:	9403      	str	r4, [sp, #12]
 80173d8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80173dc:	9402      	str	r4, [sp, #8]
 80173de:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80173e2:	e9cd 3400 	strd	r3, r4, [sp]
 80173e6:	4613      	mov	r3, r2
 80173e8:	2200      	movs	r2, #0
 80173ea:	f7ff ff71 	bl	80172d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80173ee:	b00a      	add	sp, #40	; 0x28
 80173f0:	bd10      	pop	{r4, pc}
	...

080173f4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80173f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173f6:	b08b      	sub	sp, #44	; 0x2c
 80173f8:	4616      	mov	r6, r2
 80173fa:	460d      	mov	r5, r1
 80173fc:	461f      	mov	r7, r3
 80173fe:	4604      	mov	r4, r0
 8017400:	f7fa fdec 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 8017404:	6803      	ldr	r3, [r0, #0]
 8017406:	6a1b      	ldr	r3, [r3, #32]
 8017408:	4798      	blx	r3
 801740a:	4b0e      	ldr	r3, [pc, #56]	; (8017444 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801740c:	2200      	movs	r2, #0
 801740e:	4629      	mov	r1, r5
 8017410:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017414:	881b      	ldrh	r3, [r3, #0]
 8017416:	4620      	mov	r0, r4
 8017418:	9306      	str	r3, [sp, #24]
 801741a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801741e:	9305      	str	r3, [sp, #20]
 8017420:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017424:	9304      	str	r3, [sp, #16]
 8017426:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801742a:	9303      	str	r3, [sp, #12]
 801742c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017430:	9302      	str	r3, [sp, #8]
 8017432:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017436:	e9cd 7300 	strd	r7, r3, [sp]
 801743a:	4633      	mov	r3, r6
 801743c:	f7ff ff48 	bl	80172d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017440:	b00b      	add	sp, #44	; 0x2c
 8017442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017444:	200057da 	.word	0x200057da

08017448 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8017448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801744c:	461f      	mov	r7, r3
 801744e:	4b14      	ldr	r3, [pc, #80]	; (80174a0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8017450:	b08a      	sub	sp, #40	; 0x28
 8017452:	4616      	mov	r6, r2
 8017454:	f8b3 8000 	ldrh.w	r8, [r3]
 8017458:	460d      	mov	r5, r1
 801745a:	4604      	mov	r4, r0
 801745c:	f7fa fdbe 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 8017460:	6803      	ldr	r3, [r0, #0]
 8017462:	6a1b      	ldr	r3, [r3, #32]
 8017464:	4798      	blx	r3
 8017466:	2302      	movs	r3, #2
 8017468:	9008      	str	r0, [sp, #32]
 801746a:	2200      	movs	r2, #0
 801746c:	4629      	mov	r1, r5
 801746e:	4620      	mov	r0, r4
 8017470:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8017474:	2301      	movs	r3, #1
 8017476:	9305      	str	r3, [sp, #20]
 8017478:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801747c:	9304      	str	r3, [sp, #16]
 801747e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017482:	9303      	str	r3, [sp, #12]
 8017484:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017488:	9302      	str	r3, [sp, #8]
 801748a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801748e:	e9cd 7300 	strd	r7, r3, [sp]
 8017492:	4633      	mov	r3, r6
 8017494:	f7ff ff1c 	bl	80172d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017498:	b00a      	add	sp, #40	; 0x28
 801749a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801749e:	bf00      	nop
 80174a0:	200057da 	.word	0x200057da

080174a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80174a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a8:	b08b      	sub	sp, #44	; 0x2c
 80174aa:	469b      	mov	fp, r3
 80174ac:	4604      	mov	r4, r0
 80174ae:	4692      	mov	sl, r2
 80174b0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80174b4:	2600      	movs	r6, #0
 80174b6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80174ba:	4689      	mov	r9, r1
 80174bc:	2fff      	cmp	r7, #255	; 0xff
 80174be:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80174c2:	9608      	str	r6, [sp, #32]
 80174c4:	bf14      	ite	ne
 80174c6:	2308      	movne	r3, #8
 80174c8:	2302      	moveq	r3, #2
 80174ca:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80174ce:	f7ff fea7 	bl	8017220 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80174d2:	465a      	mov	r2, fp
 80174d4:	4603      	mov	r3, r0
 80174d6:	4651      	mov	r1, sl
 80174d8:	4620      	mov	r0, r4
 80174da:	e9cd 8500 	strd	r8, r5, [sp]
 80174de:	f7ff fee7 	bl	80172b0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80174e2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80174e6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80174ea:	f8ad 3018 	strh.w	r3, [sp, #24]
 80174ee:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80174f2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80174f6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80174fa:	6823      	ldr	r3, [r4, #0]
 80174fc:	9d02      	ldr	r5, [sp, #8]
 80174fe:	9005      	str	r0, [sp, #20]
 8017500:	4620      	mov	r0, r4
 8017502:	f8ad 601c 	strh.w	r6, [sp, #28]
 8017506:	f8ad 801e 	strh.w	r8, [sp, #30]
 801750a:	f8cd 9020 	str.w	r9, [sp, #32]
 801750e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8017512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017514:	4798      	blx	r3
 8017516:	4228      	tst	r0, r5
 8017518:	d106      	bne.n	8017528 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801751a:	4b07      	ldr	r3, [pc, #28]	; (8017538 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801751c:	f240 11fb 	movw	r1, #507	; 0x1fb
 8017520:	4a06      	ldr	r2, [pc, #24]	; (801753c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8017522:	4807      	ldr	r0, [pc, #28]	; (8017540 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8017524:	f011 f8b0 	bl	8028688 <__assert_func>
 8017528:	6860      	ldr	r0, [r4, #4]
 801752a:	a902      	add	r1, sp, #8
 801752c:	6803      	ldr	r3, [r0, #0]
 801752e:	685b      	ldr	r3, [r3, #4]
 8017530:	4798      	blx	r3
 8017532:	b00b      	add	sp, #44	; 0x2c
 8017534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017538:	0802b5f6 	.word	0x0802b5f6
 801753c:	0802b943 	.word	0x0802b943
 8017540:	0802b542 	.word	0x0802b542

08017544 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017544:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017548:	461f      	mov	r7, r3
 801754a:	4b0b      	ldr	r3, [pc, #44]	; (8017578 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801754c:	460d      	mov	r5, r1
 801754e:	4616      	mov	r6, r2
 8017550:	f8b3 8000 	ldrh.w	r8, [r3]
 8017554:	4604      	mov	r4, r0
 8017556:	f7fa fd41 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 801755a:	6803      	ldr	r3, [r0, #0]
 801755c:	6a1b      	ldr	r3, [r3, #32]
 801755e:	4798      	blx	r3
 8017560:	463b      	mov	r3, r7
 8017562:	4632      	mov	r2, r6
 8017564:	4629      	mov	r1, r5
 8017566:	e9cd 8000 	strd	r8, r0, [sp]
 801756a:	4620      	mov	r0, r4
 801756c:	f7ff fea0 	bl	80172b0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017570:	b002      	add	sp, #8
 8017572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017576:	bf00      	nop
 8017578:	200057da 	.word	0x200057da

0801757c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017580:	4698      	mov	r8, r3
 8017582:	b088      	sub	sp, #32
 8017584:	2300      	movs	r3, #0
 8017586:	4617      	mov	r7, r2
 8017588:	4604      	mov	r4, r0
 801758a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801758e:	9306      	str	r3, [sp, #24]
 8017590:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017594:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017598:	f8ad 6010 	strh.w	r6, [sp, #16]
 801759c:	f8ad 5012 	strh.w	r5, [sp, #18]
 80175a0:	e9cd 3100 	strd	r3, r1, [sp]
 80175a4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80175a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80175ac:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80175b0:	f88d 301c 	strb.w	r3, [sp, #28]
 80175b4:	f7ff fe34 	bl	8017220 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80175b8:	4642      	mov	r2, r8
 80175ba:	4603      	mov	r3, r0
 80175bc:	4639      	mov	r1, r7
 80175be:	4620      	mov	r0, r4
 80175c0:	f7ff ffc0 	bl	8017544 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80175c4:	4b16      	ldr	r3, [pc, #88]	; (8017620 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80175c6:	9003      	str	r0, [sp, #12]
 80175c8:	881b      	ldrh	r3, [r3, #0]
 80175ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80175ce:	f7fa fd05 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 80175d2:	6803      	ldr	r3, [r0, #0]
 80175d4:	6a1b      	ldr	r3, [r3, #32]
 80175d6:	4798      	blx	r3
 80175d8:	f88d 001e 	strb.w	r0, [sp, #30]
 80175dc:	f88d 001d 	strb.w	r0, [sp, #29]
 80175e0:	b106      	cbz	r6, 80175e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80175e2:	b935      	cbnz	r5, 80175f2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80175e4:	4b0f      	ldr	r3, [pc, #60]	; (8017624 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80175e6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80175ea:	4a0f      	ldr	r2, [pc, #60]	; (8017628 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80175ec:	480f      	ldr	r0, [pc, #60]	; (801762c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80175ee:	f011 f84b 	bl	8028688 <__assert_func>
 80175f2:	6823      	ldr	r3, [r4, #0]
 80175f4:	4620      	mov	r0, r4
 80175f6:	9d00      	ldr	r5, [sp, #0]
 80175f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175fa:	4798      	blx	r3
 80175fc:	4228      	tst	r0, r5
 80175fe:	d104      	bne.n	801760a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8017600:	4b0b      	ldr	r3, [pc, #44]	; (8017630 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8017602:	f240 11e1 	movw	r1, #481	; 0x1e1
 8017606:	4a08      	ldr	r2, [pc, #32]	; (8017628 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8017608:	e7f0      	b.n	80175ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801760a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801760c:	4669      	mov	r1, sp
 801760e:	6860      	ldr	r0, [r4, #4]
 8017610:	9306      	str	r3, [sp, #24]
 8017612:	6803      	ldr	r3, [r0, #0]
 8017614:	685b      	ldr	r3, [r3, #4]
 8017616:	4798      	blx	r3
 8017618:	b008      	add	sp, #32
 801761a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801761e:	bf00      	nop
 8017620:	200057da 	.word	0x200057da
 8017624:	0802b5be 	.word	0x0802b5be
 8017628:	0802b72c 	.word	0x0802b72c
 801762c:	0802b542 	.word	0x0802b542
 8017630:	0802b5f6 	.word	0x0802b5f6

08017634 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8017634:	b570      	push	{r4, r5, r6, lr}
 8017636:	b08a      	sub	sp, #40	; 0x28
 8017638:	4604      	mov	r4, r0
 801763a:	466b      	mov	r3, sp
 801763c:	e883 0006 	stmia.w	r3, {r1, r2}
 8017640:	4b1f      	ldr	r3, [pc, #124]	; (80176c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8017642:	781b      	ldrb	r3, [r3, #0]
 8017644:	b933      	cbnz	r3, 8017654 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8017646:	4b1f      	ldr	r3, [pc, #124]	; (80176c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8017648:	f44f 7103 	mov.w	r1, #524	; 0x20c
 801764c:	4a1e      	ldr	r2, [pc, #120]	; (80176c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801764e:	481f      	ldr	r0, [pc, #124]	; (80176cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8017650:	f011 f81a 	bl	8028688 <__assert_func>
 8017654:	2300      	movs	r3, #0
 8017656:	f8bd 5000 	ldrh.w	r5, [sp]
 801765a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801765e:	9308      	str	r3, [sp, #32]
 8017660:	2301      	movs	r3, #1
 8017662:	9302      	str	r3, [sp, #8]
 8017664:	6803      	ldr	r3, [r0, #0]
 8017666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017668:	4798      	blx	r3
 801766a:	4632      	mov	r2, r6
 801766c:	4629      	mov	r1, r5
 801766e:	4603      	mov	r3, r0
 8017670:	4620      	mov	r0, r4
 8017672:	f7ff ff67 	bl	8017544 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017676:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017678:	9003      	str	r0, [sp, #12]
 801767a:	9305      	str	r3, [sp, #20]
 801767c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017680:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017684:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017688:	f8ad 301a 	strh.w	r3, [sp, #26]
 801768c:	4b10      	ldr	r3, [pc, #64]	; (80176d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801768e:	881b      	ldrh	r3, [r3, #0]
 8017690:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017694:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017698:	f7fa fca0 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 801769c:	6803      	ldr	r3, [r0, #0]
 801769e:	6a1b      	ldr	r3, [r3, #32]
 80176a0:	4798      	blx	r3
 80176a2:	23ff      	movs	r3, #255	; 0xff
 80176a4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80176a8:	a902      	add	r1, sp, #8
 80176aa:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80176ae:	6860      	ldr	r0, [r4, #4]
 80176b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80176b4:	6803      	ldr	r3, [r0, #0]
 80176b6:	685b      	ldr	r3, [r3, #4]
 80176b8:	4798      	blx	r3
 80176ba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80176bc:	b00a      	add	sp, #40	; 0x28
 80176be:	bd70      	pop	{r4, r5, r6, pc}
 80176c0:	200057df 	.word	0x200057df
 80176c4:	0802b48f 	.word	0x0802b48f
 80176c8:	0802b7d0 	.word	0x0802b7d0
 80176cc:	0802b542 	.word	0x0802b542
 80176d0:	200057da 	.word	0x200057da

080176d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80176d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176d6:	b08b      	sub	sp, #44	; 0x2c
 80176d8:	4604      	mov	r4, r0
 80176da:	466d      	mov	r5, sp
 80176dc:	e885 0006 	stmia.w	r5, {r1, r2}
 80176e0:	461d      	mov	r5, r3
 80176e2:	2300      	movs	r3, #0
 80176e4:	f8bd 6000 	ldrh.w	r6, [sp]
 80176e8:	9308      	str	r3, [sp, #32]
 80176ea:	2301      	movs	r3, #1
 80176ec:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80176f0:	9302      	str	r3, [sp, #8]
 80176f2:	6803      	ldr	r3, [r0, #0]
 80176f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176f6:	4798      	blx	r3
 80176f8:	463a      	mov	r2, r7
 80176fa:	4631      	mov	r1, r6
 80176fc:	4603      	mov	r3, r0
 80176fe:	4620      	mov	r0, r4
 8017700:	f7ff ff20 	bl	8017544 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017704:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017708:	9003      	str	r0, [sp, #12]
 801770a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801770e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017712:	9505      	str	r5, [sp, #20]
 8017714:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017718:	4b0d      	ldr	r3, [pc, #52]	; (8017750 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801771a:	881b      	ldrh	r3, [r3, #0]
 801771c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017720:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017722:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017726:	f7fa fc59 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 801772a:	6803      	ldr	r3, [r0, #0]
 801772c:	6a1b      	ldr	r3, [r3, #32]
 801772e:	4798      	blx	r3
 8017730:	23ff      	movs	r3, #255	; 0xff
 8017732:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8017736:	a902      	add	r1, sp, #8
 8017738:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801773c:	6860      	ldr	r0, [r4, #4]
 801773e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017742:	6803      	ldr	r3, [r0, #0]
 8017744:	685b      	ldr	r3, [r3, #4]
 8017746:	4798      	blx	r3
 8017748:	4628      	mov	r0, r5
 801774a:	b00b      	add	sp, #44	; 0x2c
 801774c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801774e:	bf00      	nop
 8017750:	200057da 	.word	0x200057da

08017754 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017754:	b570      	push	{r4, r5, r6, lr}
 8017756:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801775a:	4604      	mov	r4, r0
 801775c:	b19b      	cbz	r3, 8017786 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801775e:	2002      	movs	r0, #2
 8017760:	f7fd f870 	bl	8014844 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017764:	2300      	movs	r3, #0
 8017766:	4620      	mov	r0, r4
 8017768:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801776c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8017770:	6823      	ldr	r3, [r4, #0]
 8017772:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8017776:	f7ff fd53 	bl	8017220 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801777a:	4601      	mov	r1, r0
 801777c:	4620      	mov	r0, r4
 801777e:	462b      	mov	r3, r5
 8017780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017784:	4718      	bx	r3
 8017786:	bd70      	pop	{r4, r5, r6, pc}

08017788 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8017788:	b538      	push	{r3, r4, r5, lr}
 801778a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 801778e:	4604      	mov	r4, r0
 8017790:	460d      	mov	r5, r1
 8017792:	428a      	cmp	r2, r1
 8017794:	d008      	beq.n	80177a8 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 8017796:	2a01      	cmp	r2, #1
 8017798:	6803      	ldr	r3, [r0, #0]
 801779a:	d106      	bne.n	80177aa <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 801779c:	b929      	cbnz	r1, 80177aa <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 801779e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80177a2:	4798      	blx	r3
 80177a4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80177a8:	bd38      	pop	{r3, r4, r5, pc}
 80177aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80177ae:	4620      	mov	r0, r4
 80177b0:	e7f7      	b.n	80177a2 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

080177b4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80177b4:	4b0d      	ldr	r3, [pc, #52]	; (80177ec <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80177b6:	b510      	push	{r4, lr}
 80177b8:	781b      	ldrb	r3, [r3, #0]
 80177ba:	4604      	mov	r4, r0
 80177bc:	b95b      	cbnz	r3, 80177d6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80177be:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80177c2:	2b02      	cmp	r3, #2
 80177c4:	d007      	beq.n	80177d6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80177c6:	6840      	ldr	r0, [r0, #4]
 80177c8:	f000 f92c 	bl	8017a24 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80177cc:	b118      	cbz	r0, 80177d6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80177ce:	6862      	ldr	r2, [r4, #4]
 80177d0:	7a53      	ldrb	r3, [r2, #9]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d0fc      	beq.n	80177d0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80177d6:	f7fd fa67 	bl	8014ca8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80177da:	4620      	mov	r0, r4
 80177dc:	2100      	movs	r1, #0
 80177de:	f7ff ffd3 	bl	8017788 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 80177e2:	4620      	mov	r0, r4
 80177e4:	f7ff fd1c 	bl	8017220 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80177e8:	bd10      	pop	{r4, pc}
 80177ea:	bf00      	nop
 80177ec:	200057de 	.word	0x200057de

080177f0 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80177f0:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80177f4:	1a13      	subs	r3, r2, r0
 80177f6:	4258      	negs	r0, r3
 80177f8:	4158      	adcs	r0, r3
 80177fa:	4770      	bx	lr

080177fc <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80177fc:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8017800:	1a9b      	subs	r3, r3, r2
 8017802:	2b00      	cmp	r3, #0
 8017804:	bfdc      	itt	le
 8017806:	6882      	ldrle	r2, [r0, #8]
 8017808:	189b      	addle	r3, r3, r2
 801780a:	2b01      	cmp	r3, #1
 801780c:	bfcc      	ite	gt
 801780e:	2000      	movgt	r0, #0
 8017810:	2001      	movle	r0, #1
 8017812:	4770      	bx	lr

08017814 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017814:	6902      	ldr	r2, [r0, #16]
 8017816:	6840      	ldr	r0, [r0, #4]
 8017818:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801781c:	4770      	bx	lr

0801781e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801781e:	6803      	ldr	r3, [r0, #0]
 8017820:	691b      	ldr	r3, [r3, #16]
 8017822:	4718      	bx	r3

08017824 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8017824:	4770      	bx	lr

08017826 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8017826:	4770      	bx	lr

08017828 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017828:	2301      	movs	r3, #1
 801782a:	b570      	push	{r4, r5, r6, lr}
 801782c:	7203      	strb	r3, [r0, #8]
 801782e:	4604      	mov	r4, r0
 8017830:	6840      	ldr	r0, [r0, #4]
 8017832:	6803      	ldr	r3, [r0, #0]
 8017834:	699b      	ldr	r3, [r3, #24]
 8017836:	4798      	blx	r3
 8017838:	6803      	ldr	r3, [r0, #0]
 801783a:	4605      	mov	r5, r0
 801783c:	2b08      	cmp	r3, #8
 801783e:	d01e      	beq.n	801787e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8017840:	d80b      	bhi.n	801785a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017842:	2b02      	cmp	r3, #2
 8017844:	d027      	beq.n	8017896 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8017846:	2b04      	cmp	r3, #4
 8017848:	d011      	beq.n	801786e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801784a:	2b01      	cmp	r3, #1
 801784c:	d028      	beq.n	80178a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801784e:	4b17      	ldr	r3, [pc, #92]	; (80178ac <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8017850:	218c      	movs	r1, #140	; 0x8c
 8017852:	4a17      	ldr	r2, [pc, #92]	; (80178b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8017854:	4817      	ldr	r0, [pc, #92]	; (80178b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8017856:	f010 ff17 	bl	8028688 <__assert_func>
 801785a:	2b40      	cmp	r3, #64	; 0x40
 801785c:	d020      	beq.n	80178a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801785e:	d801      	bhi.n	8017864 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8017860:	2b20      	cmp	r3, #32
 8017862:	e7f3      	b.n	801784c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8017864:	2b80      	cmp	r3, #128	; 0x80
 8017866:	d01b      	beq.n	80178a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801786c:	e7ee      	b.n	801784c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801786e:	6823      	ldr	r3, [r4, #0]
 8017870:	7f01      	ldrb	r1, [r0, #28]
 8017872:	4620      	mov	r0, r4
 8017874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017876:	4798      	blx	r3
 8017878:	6823      	ldr	r3, [r4, #0]
 801787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801787c:	e006      	b.n	801788c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801787e:	6823      	ldr	r3, [r4, #0]
 8017880:	7f01      	ldrb	r1, [r0, #28]
 8017882:	4620      	mov	r0, r4
 8017884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017886:	4798      	blx	r3
 8017888:	6823      	ldr	r3, [r4, #0]
 801788a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801788c:	4629      	mov	r1, r5
 801788e:	4620      	mov	r0, r4
 8017890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017894:	4718      	bx	r3
 8017896:	6823      	ldr	r3, [r4, #0]
 8017898:	4620      	mov	r0, r4
 801789a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801789c:	4798      	blx	r3
 801789e:	e7f3      	b.n	8017888 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80178a0:	6823      	ldr	r3, [r4, #0]
 80178a2:	4620      	mov	r0, r4
 80178a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178a6:	4798      	blx	r3
 80178a8:	e7e6      	b.n	8017878 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80178aa:	bf00      	nop
 80178ac:	0802ba21 	.word	0x0802ba21
 80178b0:	0802bb30 	.word	0x0802bb30
 80178b4:	0802ba46 	.word	0x0802ba46

080178b8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80178b8:	b570      	push	{r4, r5, r6, lr}
 80178ba:	4604      	mov	r4, r0
 80178bc:	460e      	mov	r6, r1
 80178be:	6860      	ldr	r0, [r4, #4]
 80178c0:	6803      	ldr	r3, [r0, #0]
 80178c2:	685b      	ldr	r3, [r3, #4]
 80178c4:	4798      	blx	r3
 80178c6:	2800      	cmp	r0, #0
 80178c8:	d1f9      	bne.n	80178be <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80178ca:	4d0d      	ldr	r5, [pc, #52]	; (8017900 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80178cc:	6828      	ldr	r0, [r5, #0]
 80178ce:	6803      	ldr	r3, [r0, #0]
 80178d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80178d2:	4798      	blx	r3
 80178d4:	f7fd fa02 	bl	8014cdc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80178d8:	6828      	ldr	r0, [r5, #0]
 80178da:	2101      	movs	r1, #1
 80178dc:	f7ff ff54 	bl	8017788 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 80178e0:	6860      	ldr	r0, [r4, #4]
 80178e2:	4631      	mov	r1, r6
 80178e4:	6803      	ldr	r3, [r0, #0]
 80178e6:	689b      	ldr	r3, [r3, #8]
 80178e8:	4798      	blx	r3
 80178ea:	6823      	ldr	r3, [r4, #0]
 80178ec:	4620      	mov	r0, r4
 80178ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178f0:	4798      	blx	r3
 80178f2:	6828      	ldr	r0, [r5, #0]
 80178f4:	6803      	ldr	r3, [r0, #0]
 80178f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80178fc:	4718      	bx	r3
 80178fe:	bf00      	nop
 8017900:	200057e0 	.word	0x200057e0

08017904 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8017904:	b508      	push	{r3, lr}
 8017906:	f7fd f9cf 	bl	8014ca8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801790a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801790e:	f7fd b9d9 	b.w	8014cc4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017912 <_ZN8touchgfx13DMA_Interface5startEv>:
 8017912:	b510      	push	{r4, lr}
 8017914:	4604      	mov	r4, r0
 8017916:	6840      	ldr	r0, [r0, #4]
 8017918:	6803      	ldr	r3, [r0, #0]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	4798      	blx	r3
 801791e:	b948      	cbnz	r0, 8017934 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017920:	7a63      	ldrb	r3, [r4, #9]
 8017922:	b13b      	cbz	r3, 8017934 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017924:	7a23      	ldrb	r3, [r4, #8]
 8017926:	b92b      	cbnz	r3, 8017934 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017928:	6823      	ldr	r3, [r4, #0]
 801792a:	4620      	mov	r0, r4
 801792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801792e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017932:	4718      	bx	r3
 8017934:	bd10      	pop	{r4, pc}
	...

08017938 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8017938:	b510      	push	{r4, lr}
 801793a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801793e:	1b12      	subs	r2, r2, r4
 8017940:	2a00      	cmp	r2, #0
 8017942:	bfdc      	itt	le
 8017944:	6883      	ldrle	r3, [r0, #8]
 8017946:	18d2      	addle	r2, r2, r3
 8017948:	2a01      	cmp	r2, #1
 801794a:	dd18      	ble.n	801797e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801794c:	6843      	ldr	r3, [r0, #4]
 801794e:	f101 021c 	add.w	r2, r1, #28
 8017952:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8017956:	f851 4b04 	ldr.w	r4, [r1], #4
 801795a:	4291      	cmp	r1, r2
 801795c:	f843 4b04 	str.w	r4, [r3], #4
 8017960:	d1f9      	bne.n	8017956 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8017962:	880a      	ldrh	r2, [r1, #0]
 8017964:	801a      	strh	r2, [r3, #0]
 8017966:	788a      	ldrb	r2, [r1, #2]
 8017968:	709a      	strb	r2, [r3, #2]
 801796a:	68c3      	ldr	r3, [r0, #12]
 801796c:	6882      	ldr	r2, [r0, #8]
 801796e:	f3bf 8f5b 	dmb	ish
 8017972:	3301      	adds	r3, #1
 8017974:	429a      	cmp	r2, r3
 8017976:	bfd8      	it	le
 8017978:	1a9b      	suble	r3, r3, r2
 801797a:	60c3      	str	r3, [r0, #12]
 801797c:	bd10      	pop	{r4, pc}
 801797e:	4b03      	ldr	r3, [pc, #12]	; (801798c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8017980:	2139      	movs	r1, #57	; 0x39
 8017982:	4a03      	ldr	r2, [pc, #12]	; (8017990 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8017984:	4803      	ldr	r0, [pc, #12]	; (8017994 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8017986:	f010 fe7f 	bl	8028688 <__assert_func>
 801798a:	bf00      	nop
 801798c:	0802ba6c 	.word	0x0802ba6c
 8017990:	0802bb60 	.word	0x0802bb60
 8017994:	0802ba46 	.word	0x0802ba46

08017998 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017998:	b510      	push	{r4, lr}
 801799a:	6803      	ldr	r3, [r0, #0]
 801799c:	4604      	mov	r4, r0
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	4798      	blx	r3
 80179a2:	b128      	cbz	r0, 80179b0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80179a4:	4b07      	ldr	r3, [pc, #28]	; (80179c4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80179a6:	213f      	movs	r1, #63	; 0x3f
 80179a8:	4a07      	ldr	r2, [pc, #28]	; (80179c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80179aa:	4808      	ldr	r0, [pc, #32]	; (80179cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80179ac:	f010 fe6c 	bl	8028688 <__assert_func>
 80179b0:	6923      	ldr	r3, [r4, #16]
 80179b2:	68a2      	ldr	r2, [r4, #8]
 80179b4:	f3bf 8f5b 	dmb	ish
 80179b8:	3301      	adds	r3, #1
 80179ba:	429a      	cmp	r2, r3
 80179bc:	bfd8      	it	le
 80179be:	1a9b      	suble	r3, r3, r2
 80179c0:	6123      	str	r3, [r4, #16]
 80179c2:	bd10      	pop	{r4, pc}
 80179c4:	0802ba8f 	.word	0x0802ba8f
 80179c8:	0802bbae 	.word	0x0802bbae
 80179cc:	0802ba46 	.word	0x0802ba46

080179d0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80179d0:	b570      	push	{r4, r5, r6, lr}
 80179d2:	4604      	mov	r4, r0
 80179d4:	6840      	ldr	r0, [r0, #4]
 80179d6:	6803      	ldr	r3, [r0, #0]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	4798      	blx	r3
 80179dc:	4605      	mov	r5, r0
 80179de:	b930      	cbnz	r0, 80179ee <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80179e0:	7a23      	ldrb	r3, [r4, #8]
 80179e2:	b123      	cbz	r3, 80179ee <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80179e4:	6860      	ldr	r0, [r4, #4]
 80179e6:	6803      	ldr	r3, [r0, #0]
 80179e8:	695b      	ldr	r3, [r3, #20]
 80179ea:	4798      	blx	r3
 80179ec:	7225      	strb	r5, [r4, #8]
 80179ee:	6860      	ldr	r0, [r4, #4]
 80179f0:	6803      	ldr	r3, [r0, #0]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	4798      	blx	r3
 80179f6:	b928      	cbnz	r0, 8017a04 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80179f8:	6823      	ldr	r3, [r4, #0]
 80179fa:	4620      	mov	r0, r4
 80179fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a02:	4718      	bx	r3
 8017a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a08:	f7fd b974 	b.w	8014cf4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017a0c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017a0c:	b510      	push	{r4, lr}
 8017a0e:	6082      	str	r2, [r0, #8]
 8017a10:	2200      	movs	r2, #0
 8017a12:	4c03      	ldr	r4, [pc, #12]	; (8017a20 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017a14:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017a18:	e9c0 4100 	strd	r4, r1, [r0]
 8017a1c:	bd10      	pop	{r4, pc}
 8017a1e:	bf00      	nop
 8017a20:	0802bb14 	.word	0x0802bb14

08017a24 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017a24:	6840      	ldr	r0, [r0, #4]
 8017a26:	6803      	ldr	r3, [r0, #0]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	4718      	bx	r3

08017a2c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8017a2c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8017a30:	4770      	bx	lr

08017a32 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8017a32:	b510      	push	{r4, lr}
 8017a34:	4604      	mov	r4, r0
 8017a36:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017a38:	b150      	cbz	r0, 8017a50 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8017a3a:	6803      	ldr	r3, [r0, #0]
 8017a3c:	68db      	ldr	r3, [r3, #12]
 8017a3e:	4798      	blx	r3
 8017a40:	b130      	cbz	r0, 8017a50 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8017a42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017a44:	4621      	mov	r1, r4
 8017a46:	6803      	ldr	r3, [r0, #0]
 8017a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a4c:	689b      	ldr	r3, [r3, #8]
 8017a4e:	4718      	bx	r3
 8017a50:	bd10      	pop	{r4, pc}

08017a52 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8017a52:	790b      	ldrb	r3, [r1, #4]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	bf0c      	ite	eq
 8017a58:	2301      	moveq	r3, #1
 8017a5a:	2300      	movne	r3, #0
 8017a5c:	b570      	push	{r4, r5, r6, lr}
 8017a5e:	4604      	mov	r4, r0
 8017a60:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8017a64:	460e      	mov	r6, r1
 8017a66:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8017a6a:	d109      	bne.n	8017a80 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8017a6c:	b14d      	cbz	r5, 8017a82 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8017a6e:	7933      	ldrb	r3, [r6, #4]
 8017a70:	2b01      	cmp	r3, #1
 8017a72:	d10c      	bne.n	8017a8e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017a74:	6823      	ldr	r3, [r4, #0]
 8017a76:	4620      	mov	r0, r4
 8017a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a7e:	4718      	bx	r3
 8017a80:	b12d      	cbz	r5, 8017a8e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017a82:	6823      	ldr	r3, [r4, #0]
 8017a84:	4620      	mov	r0, r4
 8017a86:	695b      	ldr	r3, [r3, #20]
 8017a88:	4798      	blx	r3
 8017a8a:	2d00      	cmp	r5, #0
 8017a8c:	d1ef      	bne.n	8017a6e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8017a8e:	bd70      	pop	{r4, r5, r6, pc}

08017a90 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8017a90:	6803      	ldr	r3, [r0, #0]
 8017a92:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8017a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a98:	4718      	bx	r3

08017a9a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8017a9a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017a9e:	2bff      	cmp	r3, #255	; 0xff
 8017aa0:	b510      	push	{r4, lr}
 8017aa2:	d104      	bne.n	8017aae <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8017aa4:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8017aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017aaa:	429a      	cmp	r2, r3
 8017aac:	d105      	bne.n	8017aba <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8017aae:	2300      	movs	r3, #0
 8017ab0:	8003      	strh	r3, [r0, #0]
 8017ab2:	8043      	strh	r3, [r0, #2]
 8017ab4:	8083      	strh	r3, [r0, #4]
 8017ab6:	80c3      	strh	r3, [r0, #6]
 8017ab8:	bd10      	pop	{r4, pc}
 8017aba:	2300      	movs	r3, #0
 8017abc:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8017ac0:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8017ac4:	8003      	strh	r3, [r0, #0]
 8017ac6:	8043      	strh	r3, [r0, #2]
 8017ac8:	8084      	strh	r4, [r0, #4]
 8017aca:	80c2      	strh	r2, [r0, #6]
 8017acc:	e7f4      	b.n	8017ab8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08017ace <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8017ace:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ad2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8017ad6:	b087      	sub	sp, #28
 8017ad8:	4604      	mov	r4, r0
 8017ada:	4689      	mov	r9, r1
 8017adc:	b363      	cbz	r3, 8017b38 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017ade:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d027      	beq.n	8017b38 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017ae8:	ad06      	add	r5, sp, #24
 8017aea:	2700      	movs	r7, #0
 8017aec:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8017af0:	4628      	mov	r0, r5
 8017af2:	f004 ff9f 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017af6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017afa:	a904      	add	r1, sp, #16
 8017afc:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017b00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b04:	4620      	mov	r0, r4
 8017b06:	6823      	ldr	r3, [r4, #0]
 8017b08:	9704      	str	r7, [sp, #16]
 8017b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b0c:	4798      	blx	r3
 8017b0e:	f7fa fa65 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 8017b12:	6803      	ldr	r3, [r0, #0]
 8017b14:	4606      	mov	r6, r0
 8017b16:	4628      	mov	r0, r5
 8017b18:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8017b1c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8017b1e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017b22:	f005 f88f 	bl	801cc44 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017b26:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8017b2a:	4601      	mov	r1, r0
 8017b2c:	9701      	str	r7, [sp, #4]
 8017b2e:	aa04      	add	r2, sp, #16
 8017b30:	9300      	str	r3, [sp, #0]
 8017b32:	4630      	mov	r0, r6
 8017b34:	464b      	mov	r3, r9
 8017b36:	47c0      	blx	r8
 8017b38:	b007      	add	sp, #28
 8017b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017b3e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8017b3e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017b40:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017b44:	460d      	mov	r5, r1
 8017b46:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017b4a:	2100      	movs	r1, #0
 8017b4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017b50:	4604      	mov	r4, r0
 8017b52:	6803      	ldr	r3, [r0, #0]
 8017b54:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b5a:	9100      	str	r1, [sp, #0]
 8017b5c:	4669      	mov	r1, sp
 8017b5e:	4798      	blx	r3
 8017b60:	4621      	mov	r1, r4
 8017b62:	a802      	add	r0, sp, #8
 8017b64:	f003 fa02 	bl	801af6c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b68:	f7fa fa38 	bl	8011fdc <_ZN8touchgfx3HAL3lcdEv>
 8017b6c:	6803      	ldr	r3, [r0, #0]
 8017b6e:	aa02      	add	r2, sp, #8
 8017b70:	4669      	mov	r1, sp
 8017b72:	695e      	ldr	r6, [r3, #20]
 8017b74:	462b      	mov	r3, r5
 8017b76:	47b0      	blx	r6
 8017b78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b7c:	2800      	cmp	r0, #0
 8017b7e:	bf08      	it	eq
 8017b80:	461d      	moveq	r5, r3
 8017b82:	84e5      	strh	r5, [r4, #38]	; 0x26
 8017b84:	b004      	add	sp, #16
 8017b86:	bd70      	pop	{r4, r5, r6, pc}

08017b88 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8017b88:	2200      	movs	r2, #0
 8017b8a:	8082      	strh	r2, [r0, #4]
 8017b8c:	80c2      	strh	r2, [r0, #6]
 8017b8e:	8102      	strh	r2, [r0, #8]
 8017b90:	8142      	strh	r2, [r0, #10]
 8017b92:	8182      	strh	r2, [r0, #12]
 8017b94:	81c2      	strh	r2, [r0, #14]
 8017b96:	8202      	strh	r2, [r0, #16]
 8017b98:	8242      	strh	r2, [r0, #18]
 8017b9a:	61c2      	str	r2, [r0, #28]
 8017b9c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017ba0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017ba4:	2201      	movs	r2, #1
 8017ba6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8017baa:	4a04      	ldr	r2, [pc, #16]	; (8017bbc <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 8017bac:	6002      	str	r2, [r0, #0]
 8017bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017bb2:	84c2      	strh	r2, [r0, #38]	; 0x26
 8017bb4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8017bb8:	4770      	bx	lr
 8017bba:	bf00      	nop
 8017bbc:	0802bc54 	.word	0x0802bc54

08017bc0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	8002      	strh	r2, [r0, #0]
 8017bc4:	8042      	strh	r2, [r0, #2]
 8017bc6:	8082      	strh	r2, [r0, #4]
 8017bc8:	80c2      	strh	r2, [r0, #6]
 8017bca:	4770      	bx	lr

08017bcc <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8017bcc:	b570      	push	{r4, r5, r6, lr}
 8017bce:	6803      	ldr	r3, [r0, #0]
 8017bd0:	4604      	mov	r4, r0
 8017bd2:	4615      	mov	r5, r2
 8017bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bd6:	4798      	blx	r3
 8017bd8:	6823      	ldr	r3, [r4, #0]
 8017bda:	4629      	mov	r1, r5
 8017bdc:	4620      	mov	r0, r4
 8017bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017be4:	4718      	bx	r3
	...

08017be8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017bee:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017bf0:	4299      	cmp	r1, r3
 8017bf2:	d029      	beq.n	8017c48 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8017bf4:	4b15      	ldr	r3, [pc, #84]	; (8017c4c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	b92b      	cbnz	r3, 8017c06 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8017bfa:	4b15      	ldr	r3, [pc, #84]	; (8017c50 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017bfc:	21b1      	movs	r1, #177	; 0xb1
 8017bfe:	4a15      	ldr	r2, [pc, #84]	; (8017c54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017c00:	4815      	ldr	r0, [pc, #84]	; (8017c58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017c02:	f010 fd41 	bl	8028688 <__assert_func>
 8017c06:	4a15      	ldr	r2, [pc, #84]	; (8017c5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8017c08:	8812      	ldrh	r2, [r2, #0]
 8017c0a:	428a      	cmp	r2, r1
 8017c0c:	d803      	bhi.n	8017c16 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8017c0e:	4b14      	ldr	r3, [pc, #80]	; (8017c60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8017c10:	21b2      	movs	r1, #178	; 0xb2
 8017c12:	4a10      	ldr	r2, [pc, #64]	; (8017c54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017c14:	e7f4      	b.n	8017c00 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8017c16:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017c1a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017c1e:	4b11      	ldr	r3, [pc, #68]	; (8017c64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8017c20:	7854      	ldrb	r4, [r2, #1]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8017c28:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017c2c:	682b      	ldr	r3, [r5, #0]
 8017c2e:	69de      	ldr	r6, [r3, #28]
 8017c30:	4b0d      	ldr	r3, [pc, #52]	; (8017c68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8017c32:	6818      	ldr	r0, [r3, #0]
 8017c34:	f7fc fae2 	bl	80141fc <_ZNK8touchgfx5Texts7getTextEt>
 8017c38:	2300      	movs	r3, #0
 8017c3a:	4602      	mov	r2, r0
 8017c3c:	4621      	mov	r1, r4
 8017c3e:	9300      	str	r3, [sp, #0]
 8017c40:	4628      	mov	r0, r5
 8017c42:	47b0      	blx	r6
 8017c44:	b002      	add	sp, #8
 8017c46:	bd70      	pop	{r4, r5, r6, pc}
 8017c48:	2000      	movs	r0, #0
 8017c4a:	e7fb      	b.n	8017c44 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8017c4c:	20005830 	.word	0x20005830
 8017c50:	0802bcb8 	.word	0x0802bcb8
 8017c54:	0802bdf0 	.word	0x0802bdf0
 8017c58:	0802bcfa 	.word	0x0802bcfa
 8017c5c:	20005834 	.word	0x20005834
 8017c60:	0802bd23 	.word	0x0802bd23
 8017c64:	20005838 	.word	0x20005838
 8017c68:	2000583c 	.word	0x2000583c

08017c6c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8017c6c:	b570      	push	{r4, r5, r6, lr}
 8017c6e:	6803      	ldr	r3, [r0, #0]
 8017c70:	4604      	mov	r4, r0
 8017c72:	b28d      	uxth	r5, r1
 8017c74:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017c76:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8017c78:	4b10      	ldr	r3, [pc, #64]	; (8017cbc <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	b92b      	cbnz	r3, 8017c8a <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8017c7e:	4b10      	ldr	r3, [pc, #64]	; (8017cc0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8017c80:	21b1      	movs	r1, #177	; 0xb1
 8017c82:	4a10      	ldr	r2, [pc, #64]	; (8017cc4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8017c84:	4810      	ldr	r0, [pc, #64]	; (8017cc8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8017c86:	f010 fcff 	bl	8028688 <__assert_func>
 8017c8a:	4910      	ldr	r1, [pc, #64]	; (8017ccc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8017c8c:	8809      	ldrh	r1, [r1, #0]
 8017c8e:	4291      	cmp	r1, r2
 8017c90:	d803      	bhi.n	8017c9a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8017c92:	4b0f      	ldr	r3, [pc, #60]	; (8017cd0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8017c94:	21b2      	movs	r1, #178	; 0xb2
 8017c96:	4a0b      	ldr	r2, [pc, #44]	; (8017cc4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8017c98:	e7f4      	b.n	8017c84 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8017c9a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017c9e:	4b0d      	ldr	r3, [pc, #52]	; (8017cd4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017ca6:	6803      	ldr	r3, [r0, #0]
 8017ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017caa:	4798      	blx	r3
 8017cac:	1a29      	subs	r1, r5, r0
 8017cae:	4633      	mov	r3, r6
 8017cb0:	4620      	mov	r0, r4
 8017cb2:	b209      	sxth	r1, r1
 8017cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cb8:	4718      	bx	r3
 8017cba:	bf00      	nop
 8017cbc:	20005830 	.word	0x20005830
 8017cc0:	0802bcb8 	.word	0x0802bcb8
 8017cc4:	0802bdf0 	.word	0x0802bdf0
 8017cc8:	0802bcfa 	.word	0x0802bcfa
 8017ccc:	20005834 	.word	0x20005834
 8017cd0:	0802bd23 	.word	0x0802bd23
 8017cd4:	20005838 	.word	0x20005838

08017cd8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ce0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017ce2:	b08c      	sub	sp, #48	; 0x30
 8017ce4:	4604      	mov	r4, r0
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	4688      	mov	r8, r1
 8017cea:	d05f      	beq.n	8017dac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017cec:	4e31      	ldr	r6, [pc, #196]	; (8017db4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8017cee:	6832      	ldr	r2, [r6, #0]
 8017cf0:	b92a      	cbnz	r2, 8017cfe <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8017cf2:	4b31      	ldr	r3, [pc, #196]	; (8017db8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8017cf4:	21b1      	movs	r1, #177	; 0xb1
 8017cf6:	4a31      	ldr	r2, [pc, #196]	; (8017dbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017cf8:	4831      	ldr	r0, [pc, #196]	; (8017dc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8017cfa:	f010 fcc5 	bl	8028688 <__assert_func>
 8017cfe:	4d31      	ldr	r5, [pc, #196]	; (8017dc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8017d00:	8829      	ldrh	r1, [r5, #0]
 8017d02:	4299      	cmp	r1, r3
 8017d04:	d803      	bhi.n	8017d0e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8017d06:	4b30      	ldr	r3, [pc, #192]	; (8017dc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8017d08:	21b2      	movs	r1, #178	; 0xb2
 8017d0a:	4a2c      	ldr	r2, [pc, #176]	; (8017dbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017d0c:	e7f4      	b.n	8017cf8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8017d0e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017d12:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017d16:	4b2d      	ldr	r3, [pc, #180]	; (8017dcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017d1e:	2a00      	cmp	r2, #0
 8017d20:	d044      	beq.n	8017dac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017d22:	784b      	ldrb	r3, [r1, #1]
 8017d24:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8017d28:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8017d2c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017d30:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8017d34:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8017d38:	4b25      	ldr	r3, [pc, #148]	; (8017dd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8017d3a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8017d44:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8017d48:	9207      	str	r2, [sp, #28]
 8017d4a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017d4c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017d50:	9009      	str	r0, [sp, #36]	; 0x24
 8017d52:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8017d56:	f88d 9020 	strb.w	r9, [sp, #32]
 8017d5a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8017d5e:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8017d62:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8017d66:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017d6a:	b10a      	cbz	r2, 8017d70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8017d6c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8017d6e:	b907      	cbnz	r7, 8017d72 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8017d70:	689f      	ldr	r7, [r3, #8]
 8017d72:	f10d 0914 	add.w	r9, sp, #20
 8017d76:	4621      	mov	r1, r4
 8017d78:	4648      	mov	r0, r9
 8017d7a:	f003 f8f7 	bl	801af6c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017d7e:	6833      	ldr	r3, [r6, #0]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d0b6      	beq.n	8017cf2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8017d84:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017d86:	882b      	ldrh	r3, [r5, #0]
 8017d88:	428b      	cmp	r3, r1
 8017d8a:	d9bc      	bls.n	8017d06 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8017d8c:	4b11      	ldr	r3, [pc, #68]	; (8017dd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8017d8e:	6818      	ldr	r0, [r3, #0]
 8017d90:	f7fc fa34 	bl	80141fc <_ZNK8touchgfx5Texts7getTextEt>
 8017d94:	2300      	movs	r3, #0
 8017d96:	9001      	str	r0, [sp, #4]
 8017d98:	4638      	mov	r0, r7
 8017d9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017d9e:	ab07      	add	r3, sp, #28
 8017da0:	9300      	str	r3, [sp, #0]
 8017da2:	4643      	mov	r3, r8
 8017da4:	e899 0006 	ldmia.w	r9, {r1, r2}
 8017da8:	f7fc f9b9 	bl	801411e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017dac:	b00c      	add	sp, #48	; 0x30
 8017dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017db2:	bf00      	nop
 8017db4:	20005830 	.word	0x20005830
 8017db8:	0802bcb8 	.word	0x0802bcb8
 8017dbc:	0802bdf0 	.word	0x0802bdf0
 8017dc0:	0802bcfa 	.word	0x0802bcfa
 8017dc4:	20005834 	.word	0x20005834
 8017dc8:	0802bd23 	.word	0x0802bd23
 8017dcc:	20005838 	.word	0x20005838
 8017dd0:	200057e0 	.word	0x200057e0
 8017dd4:	2000583c 	.word	0x2000583c

08017dd8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017dd8:	b40e      	push	{r1, r2, r3}
 8017dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017dde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017de2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017de4:	b09b      	sub	sp, #108	; 0x6c
 8017de6:	4604      	mov	r4, r0
 8017de8:	4293      	cmp	r3, r2
 8017dea:	d061      	beq.n	8017eb0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8017dec:	aa24      	add	r2, sp, #144	; 0x90
 8017dee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017ec4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8017df2:	9203      	str	r2, [sp, #12]
 8017df4:	f8da 2000 	ldr.w	r2, [sl]
 8017df8:	b92a      	cbnz	r2, 8017e06 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8017dfa:	4b2e      	ldr	r3, [pc, #184]	; (8017eb4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8017dfc:	21b1      	movs	r1, #177	; 0xb1
 8017dfe:	4a2e      	ldr	r2, [pc, #184]	; (8017eb8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8017e00:	482e      	ldr	r0, [pc, #184]	; (8017ebc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8017e02:	f010 fc41 	bl	8028688 <__assert_func>
 8017e06:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8017ec8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 8017e0a:	f8b8 1000 	ldrh.w	r1, [r8]
 8017e0e:	4299      	cmp	r1, r3
 8017e10:	d803      	bhi.n	8017e1a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8017e12:	4b2b      	ldr	r3, [pc, #172]	; (8017ec0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8017e14:	21b2      	movs	r1, #178	; 0xb2
 8017e16:	4a28      	ldr	r2, [pc, #160]	; (8017eb8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8017e18:	e7f2      	b.n	8017e00 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8017e1a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8017ecc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8017e1e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017e22:	f8d9 3000 	ldr.w	r3, [r9]
 8017e26:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	4638      	mov	r0, r7
 8017e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e30:	4798      	blx	r3
 8017e32:	4606      	mov	r6, r0
 8017e34:	b205      	sxth	r5, r0
 8017e36:	a804      	add	r0, sp, #16
 8017e38:	f003 fd91 	bl	801b95e <_ZN8touchgfx12TextProviderC1Ev>
 8017e3c:	683b      	ldr	r3, [r7, #0]
 8017e3e:	4638      	mov	r0, r7
 8017e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e42:	4798      	blx	r3
 8017e44:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8017e46:	4603      	mov	r3, r0
 8017e48:	9a03      	ldr	r2, [sp, #12]
 8017e4a:	a804      	add	r0, sp, #16
 8017e4c:	f003 fdcc 	bl	801b9e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017e50:	f8da 3000 	ldr.w	r3, [sl]
 8017e54:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d0ce      	beq.n	8017dfa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8017e5c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017e5e:	f8b8 0000 	ldrh.w	r0, [r8]
 8017e62:	4290      	cmp	r0, r2
 8017e64:	d9d5      	bls.n	8017e12 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8017e66:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8017e6a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017e6e:	f8d9 3000 	ldr.w	r3, [r9]
 8017e72:	787a      	ldrb	r2, [r7, #1]
 8017e74:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8017e78:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017e7c:	9700      	str	r7, [sp, #0]
 8017e7e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017e82:	a804      	add	r0, sp, #16
 8017e84:	f001 fb93 	bl	80195ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017e88:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8017e8c:	b203      	sxth	r3, r0
 8017e8e:	18a9      	adds	r1, r5, r2
 8017e90:	2900      	cmp	r1, #0
 8017e92:	dd0b      	ble.n	8017eac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8017e94:	3b01      	subs	r3, #1
 8017e96:	fb13 f302 	smulbb	r3, r3, r2
 8017e9a:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017e9e:	b21d      	sxth	r5, r3
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	b01b      	add	sp, #108	; 0x6c
 8017ea4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ea8:	b003      	add	sp, #12
 8017eaa:	4770      	bx	lr
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	dcf7      	bgt.n	8017ea0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017eb0:	2500      	movs	r5, #0
 8017eb2:	e7f5      	b.n	8017ea0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017eb4:	0802bcb8 	.word	0x0802bcb8
 8017eb8:	0802bdf0 	.word	0x0802bdf0
 8017ebc:	0802bcfa 	.word	0x0802bcfa
 8017ec0:	0802bd23 	.word	0x0802bd23
 8017ec4:	20005830 	.word	0x20005830
 8017ec8:	20005834 	.word	0x20005834
 8017ecc:	20005838 	.word	0x20005838

08017ed0 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017ed0:	b570      	push	{r4, r5, r6, lr}
 8017ed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ed6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017ed8:	4604      	mov	r4, r0
 8017eda:	4299      	cmp	r1, r3
 8017edc:	d01e      	beq.n	8017f1c <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8017ede:	6803      	ldr	r3, [r0, #0]
 8017ee0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8017ee2:	4b0f      	ldr	r3, [pc, #60]	; (8017f20 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	b92b      	cbnz	r3, 8017ef4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8017ee8:	4b0e      	ldr	r3, [pc, #56]	; (8017f24 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8017eea:	21b1      	movs	r1, #177	; 0xb1
 8017eec:	4a0e      	ldr	r2, [pc, #56]	; (8017f28 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017eee:	480f      	ldr	r0, [pc, #60]	; (8017f2c <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8017ef0:	f010 fbca 	bl	8028688 <__assert_func>
 8017ef4:	4b0e      	ldr	r3, [pc, #56]	; (8017f30 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8017ef6:	881b      	ldrh	r3, [r3, #0]
 8017ef8:	428b      	cmp	r3, r1
 8017efa:	d803      	bhi.n	8017f04 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8017efc:	4b0d      	ldr	r3, [pc, #52]	; (8017f34 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8017efe:	21b2      	movs	r1, #178	; 0xb2
 8017f00:	4a09      	ldr	r2, [pc, #36]	; (8017f28 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017f02:	e7f4      	b.n	8017eee <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8017f04:	4b0c      	ldr	r3, [pc, #48]	; (8017f38 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8017f06:	6818      	ldr	r0, [r3, #0]
 8017f08:	f7fc f978 	bl	80141fc <_ZNK8touchgfx5Texts7getTextEt>
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	4601      	mov	r1, r0
 8017f10:	46ac      	mov	ip, r5
 8017f12:	4620      	mov	r0, r4
 8017f14:	461a      	mov	r2, r3
 8017f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f1a:	4760      	bx	ip
 8017f1c:	2000      	movs	r0, #0
 8017f1e:	bd70      	pop	{r4, r5, r6, pc}
 8017f20:	20005830 	.word	0x20005830
 8017f24:	0802bcb8 	.word	0x0802bcb8
 8017f28:	0802bdf0 	.word	0x0802bdf0
 8017f2c:	0802bcfa 	.word	0x0802bcfa
 8017f30:	20005834 	.word	0x20005834
 8017f34:	0802bd23 	.word	0x0802bd23
 8017f38:	2000583c 	.word	0x2000583c

08017f3c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017f3c:	b538      	push	{r3, r4, r5, lr}
 8017f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f42:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017f44:	4604      	mov	r4, r0
 8017f46:	429a      	cmp	r2, r3
 8017f48:	d014      	beq.n	8017f74 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8017f4a:	6803      	ldr	r3, [r0, #0]
 8017f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f4e:	4798      	blx	r3
 8017f50:	6823      	ldr	r3, [r4, #0]
 8017f52:	4605      	mov	r5, r0
 8017f54:	4620      	mov	r0, r4
 8017f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f58:	4798      	blx	r3
 8017f5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017f5e:	b22d      	sxth	r5, r5
 8017f60:	4601      	mov	r1, r0
 8017f62:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017f66:	bf06      	itte	eq
 8017f68:	4602      	moveq	r2, r0
 8017f6a:	4629      	moveq	r1, r5
 8017f6c:	462a      	movne	r2, r5
 8017f6e:	4620      	mov	r0, r4
 8017f70:	f7f9 ff8d 	bl	8011e8e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017f74:	bd38      	pop	{r3, r4, r5, pc}

08017f76 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8017f76:	888a      	ldrh	r2, [r1, #4]
 8017f78:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017f7a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017f7e:	b922      	cbnz	r2, 8017f8a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017f80:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017f84:	b90b      	cbnz	r3, 8017f8a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017f86:	f7ff bfd9 	b.w	8017f3c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017f8a:	4770      	bx	lr

08017f8c <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	8083      	strh	r3, [r0, #4]
 8017f90:	80c3      	strh	r3, [r0, #6]
 8017f92:	8003      	strh	r3, [r0, #0]
 8017f94:	8043      	strh	r3, [r0, #2]
 8017f96:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017f9a:	2bff      	cmp	r3, #255	; 0xff
 8017f9c:	bf01      	itttt	eq
 8017f9e:	890b      	ldrheq	r3, [r1, #8]
 8017fa0:	8083      	strheq	r3, [r0, #4]
 8017fa2:	894b      	ldrheq	r3, [r1, #10]
 8017fa4:	80c3      	strheq	r3, [r0, #6]
 8017fa6:	4770      	bx	lr

08017fa8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017faa:	4604      	mov	r4, r0
 8017fac:	466b      	mov	r3, sp
 8017fae:	6808      	ldr	r0, [r1, #0]
 8017fb0:	6849      	ldr	r1, [r1, #4]
 8017fb2:	c303      	stmia	r3!, {r0, r1}
 8017fb4:	6823      	ldr	r3, [r4, #0]
 8017fb6:	4669      	mov	r1, sp
 8017fb8:	4620      	mov	r0, r4
 8017fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fbc:	4798      	blx	r3
 8017fbe:	4b08      	ldr	r3, [pc, #32]	; (8017fe0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017fc6:	b10a      	cbz	r2, 8017fcc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017fc8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017fca:	b900      	cbnz	r0, 8017fce <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017fcc:	6898      	ldr	r0, [r3, #8]
 8017fce:	6803      	ldr	r3, [r0, #0]
 8017fd0:	4669      	mov	r1, sp
 8017fd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017fd4:	699d      	ldr	r5, [r3, #24]
 8017fd6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017fda:	47a8      	blx	r5
 8017fdc:	b003      	add	sp, #12
 8017fde:	bd30      	pop	{r4, r5, pc}
 8017fe0:	200057e0 	.word	0x200057e0

08017fe4 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8017fe4:	b570      	push	{r4, r5, r6, lr}
 8017fe6:	6803      	ldr	r3, [r0, #0]
 8017fe8:	4604      	mov	r4, r0
 8017fea:	4615      	mov	r5, r2
 8017fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017fee:	4798      	blx	r3
 8017ff0:	6823      	ldr	r3, [r4, #0]
 8017ff2:	4629      	mov	r1, r5
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ffc:	4718      	bx	r3

08017ffe <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8017ffe:	b570      	push	{r4, r5, r6, lr}
 8018000:	6803      	ldr	r3, [r0, #0]
 8018002:	4604      	mov	r4, r0
 8018004:	460e      	mov	r6, r1
 8018006:	4615      	mov	r5, r2
 8018008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801800a:	4798      	blx	r3
 801800c:	8030      	strh	r0, [r6, #0]
 801800e:	6823      	ldr	r3, [r4, #0]
 8018010:	4620      	mov	r0, r4
 8018012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018014:	4798      	blx	r3
 8018016:	8028      	strh	r0, [r5, #0]
 8018018:	bd70      	pop	{r4, r5, r6, pc}

0801801a <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801801a:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801801e:	4770      	bx	lr

08018020 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8018020:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8018024:	4770      	bx	lr

08018026 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8018026:	b510      	push	{r4, lr}
 8018028:	4604      	mov	r4, r0
 801802a:	f000 fa67 	bl	80184fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801802e:	6823      	ldr	r3, [r4, #0]
 8018030:	4620      	mov	r0, r4
 8018032:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8018036:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801803a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801803c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018040:	4718      	bx	r3

08018042 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8018042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018044:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8018048:	4605      	mov	r5, r0
 801804a:	8541      	strh	r1, [r0, #42]	; 0x2a
 801804c:	4630      	mov	r0, r6
 801804e:	f004 fcf1 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018052:	b1a0      	cbz	r0, 801807e <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 8018054:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8018058:	4630      	mov	r0, r6
 801805a:	f004 fceb 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801805e:	fb97 f4f0 	sdiv	r4, r7, r0
 8018062:	fb04 7410 	mls	r4, r4, r0, r7
 8018066:	4630      	mov	r0, r6
 8018068:	f004 fce4 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801806c:	4404      	add	r4, r0
 801806e:	4630      	mov	r0, r6
 8018070:	f004 fce0 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018074:	fb94 f3f0 	sdiv	r3, r4, r0
 8018078:	fb03 4010 	mls	r0, r3, r0, r4
 801807c:	8568      	strh	r0, [r5, #42]	; 0x2a
 801807e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018080 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8018080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018082:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8018086:	4605      	mov	r5, r0
 8018088:	8581      	strh	r1, [r0, #44]	; 0x2c
 801808a:	4630      	mov	r0, r6
 801808c:	f004 fd0c 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018090:	b1a0      	cbz	r0, 80180bc <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 8018092:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 8018096:	4630      	mov	r0, r6
 8018098:	f004 fd06 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801809c:	fb97 f4f0 	sdiv	r4, r7, r0
 80180a0:	fb04 7410 	mls	r4, r4, r0, r7
 80180a4:	4630      	mov	r0, r6
 80180a6:	f004 fcff 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80180aa:	4404      	add	r4, r0
 80180ac:	4630      	mov	r0, r6
 80180ae:	f004 fcfb 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80180b2:	fb94 f3f0 	sdiv	r3, r4, r0
 80180b6:	fb03 4010 	mls	r0, r3, r0, r4
 80180ba:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80180bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080180c0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80180c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180c4:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80180c8:	b093      	sub	sp, #76	; 0x4c
 80180ca:	4607      	mov	r7, r0
 80180cc:	460e      	mov	r6, r1
 80180ce:	4658      	mov	r0, fp
 80180d0:	f004 fcb0 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80180d4:	4605      	mov	r5, r0
 80180d6:	4658      	mov	r0, fp
 80180d8:	f004 fce6 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80180dc:	4680      	mov	r8, r0
 80180de:	2d00      	cmp	r5, #0
 80180e0:	f000 80c5 	beq.w	801826e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80180e4:	2800      	cmp	r0, #0
 80180e6:	f000 80c2 	beq.w	801826e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80180ea:	2300      	movs	r3, #0
 80180ec:	a90e      	add	r1, sp, #56	; 0x38
 80180ee:	4638      	mov	r0, r7
 80180f0:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80180f4:	683b      	ldr	r3, [r7, #0]
 80180f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180f8:	4798      	blx	r3
 80180fa:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80180fe:	f9b6 3000 	ldrsh.w	r3, [r6]
 8018102:	88b1      	ldrh	r1, [r6, #4]
 8018104:	189c      	adds	r4, r3, r2
 8018106:	440b      	add	r3, r1
 8018108:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801810c:	fa02 f383 	sxtah	r3, r2, r3
 8018110:	3b01      	subs	r3, #1
 8018112:	fb93 f3f5 	sdiv	r3, r3, r5
 8018116:	fb94 f4f5 	sdiv	r4, r4, r5
 801811a:	fb13 f305 	smulbb	r3, r3, r5
 801811e:	fb14 f405 	smulbb	r4, r4, r5
 8018122:	b21b      	sxth	r3, r3
 8018124:	1aa4      	subs	r4, r4, r2
 8018126:	930b      	str	r3, [sp, #44]	; 0x2c
 8018128:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801812c:	b2a4      	uxth	r4, r4
 801812e:	185a      	adds	r2, r3, r1
 8018130:	fb92 f2f8 	sdiv	r2, r2, r8
 8018134:	fb12 f208 	smulbb	r2, r2, r8
 8018138:	1a52      	subs	r2, r2, r1
 801813a:	b212      	sxth	r2, r2
 801813c:	920c      	str	r2, [sp, #48]	; 0x30
 801813e:	88f2      	ldrh	r2, [r6, #6]
 8018140:	4413      	add	r3, r2
 8018142:	fa01 f383 	sxtah	r3, r1, r3
 8018146:	3b01      	subs	r3, #1
 8018148:	fb93 f3f8 	sdiv	r3, r3, r8
 801814c:	fb13 f308 	smulbb	r3, r3, r8
 8018150:	b21b      	sxth	r3, r3
 8018152:	930d      	str	r3, [sp, #52]	; 0x34
 8018154:	1963      	adds	r3, r4, r5
 8018156:	fa1f fa83 	uxth.w	sl, r3
 801815a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801815c:	b223      	sxth	r3, r4
 801815e:	4293      	cmp	r3, r2
 8018160:	9305      	str	r3, [sp, #20]
 8018162:	f300 8084 	bgt.w	801826e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8018166:	fa0f f38a 	sxth.w	r3, sl
 801816a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801816e:	930a      	str	r3, [sp, #40]	; 0x28
 8018170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018172:	4599      	cmp	r9, r3
 8018174:	dd04      	ble.n	8018180 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 8018176:	442c      	add	r4, r5
 8018178:	eb05 030a 	add.w	r3, r5, sl
 801817c:	b2a4      	uxth	r4, r4
 801817e:	e7ea      	b.n	8018156 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 8018180:	f9b6 c000 	ldrsh.w	ip, [r6]
 8018184:	88b2      	ldrh	r2, [r6, #4]
 8018186:	4462      	add	r2, ip
 8018188:	b292      	uxth	r2, r2
 801818a:	b213      	sxth	r3, r2
 801818c:	9308      	str	r3, [sp, #32]
 801818e:	fa1f f389 	uxth.w	r3, r9
 8018192:	eb08 0103 	add.w	r1, r8, r3
 8018196:	9306      	str	r3, [sp, #24]
 8018198:	b289      	uxth	r1, r1
 801819a:	b208      	sxth	r0, r1
 801819c:	9007      	str	r0, [sp, #28]
 801819e:	9805      	ldr	r0, [sp, #20]
 80181a0:	4603      	mov	r3, r0
 80181a2:	9808      	ldr	r0, [sp, #32]
 80181a4:	4283      	cmp	r3, r0
 80181a6:	da5e      	bge.n	8018266 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80181a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80181aa:	4584      	cmp	ip, r0
 80181ac:	da5b      	bge.n	8018266 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80181ae:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80181b2:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 80181b6:	4486      	add	lr, r0
 80181b8:	fa1f fe8e 	uxth.w	lr, lr
 80181bc:	fa0f f38e 	sxth.w	r3, lr
 80181c0:	4599      	cmp	r9, r3
 80181c2:	9309      	str	r3, [sp, #36]	; 0x24
 80181c4:	da4f      	bge.n	8018266 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80181c6:	9b07      	ldr	r3, [sp, #28]
 80181c8:	4298      	cmp	r0, r3
 80181ca:	da4c      	bge.n	8018266 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80181cc:	9b05      	ldr	r3, [sp, #20]
 80181ce:	459c      	cmp	ip, r3
 80181d0:	bfb8      	it	lt
 80181d2:	469c      	movlt	ip, r3
 80181d4:	4548      	cmp	r0, r9
 80181d6:	9b08      	ldr	r3, [sp, #32]
 80181d8:	bfb8      	it	lt
 80181da:	4648      	movlt	r0, r9
 80181dc:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 80181e0:	4699      	mov	r9, r3
 80181e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181e4:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 80181e8:	4599      	cmp	r9, r3
 80181ea:	bfc8      	it	gt
 80181ec:	4652      	movgt	r2, sl
 80181ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181f0:	eba2 020c 	sub.w	r2, r2, ip
 80181f4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80181f8:	9a07      	ldr	r2, [sp, #28]
 80181fa:	4293      	cmp	r3, r2
 80181fc:	bfd8      	it	le
 80181fe:	4671      	movle	r1, lr
 8018200:	1a09      	subs	r1, r1, r0
 8018202:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8018206:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801820a:	9b06      	ldr	r3, [sp, #24]
 801820c:	1b12      	subs	r2, r2, r4
 801820e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018212:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018216:	1ad2      	subs	r2, r2, r3
 8018218:	4b16      	ldr	r3, [pc, #88]	; (8018274 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801821a:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801821e:	681a      	ldr	r2, [r3, #0]
 8018220:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8018224:	b109      	cbz	r1, 801822a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 8018226:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8018228:	b900      	cbnz	r0, 801822c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801822a:	6890      	ldr	r0, [r2, #8]
 801822c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018230:	f04f 0c01 	mov.w	ip, #1
 8018234:	9b06      	ldr	r3, [sp, #24]
 8018236:	6801      	ldr	r1, [r0, #0]
 8018238:	4413      	add	r3, r2
 801823a:	f8cd c008 	str.w	ip, [sp, #8]
 801823e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018242:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8018246:	b21b      	sxth	r3, r3
 8018248:	4422      	add	r2, r4
 801824a:	f8cd c004 	str.w	ip, [sp, #4]
 801824e:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8018252:	b212      	sxth	r2, r2
 8018254:	f8cd c000 	str.w	ip, [sp]
 8018258:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801825c:	4659      	mov	r1, fp
 801825e:	47c8      	blx	r9
 8018260:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8018264:	e784      	b.n	8018170 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 8018266:	2300      	movs	r3, #0
 8018268:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801826c:	e7cb      	b.n	8018206 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801826e:	b013      	add	sp, #76	; 0x4c
 8018270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018274:	200057e0 	.word	0x200057e0

08018278 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8018278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801827c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018280:	4606      	mov	r6, r0
 8018282:	4689      	mov	r9, r1
 8018284:	2bff      	cmp	r3, #255	; 0xff
 8018286:	d008      	beq.n	801829a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8018288:	2300      	movs	r3, #0
 801828a:	8003      	strh	r3, [r0, #0]
 801828c:	8043      	strh	r3, [r0, #2]
 801828e:	8083      	strh	r3, [r0, #4]
 8018290:	4630      	mov	r0, r6
 8018292:	80f3      	strh	r3, [r6, #6]
 8018294:	b003      	add	sp, #12
 8018296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829a:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801829e:	4668      	mov	r0, sp
 80182a0:	4659      	mov	r1, fp
 80182a2:	f004 fc3b 	bl	801cb1c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80182a6:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80182aa:	4658      	mov	r0, fp
 80182ac:	f9bd 7000 	ldrsh.w	r7, [sp]
 80182b0:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80182b4:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80182b8:	f004 fbbc 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80182bc:	4284      	cmp	r4, r0
 80182be:	d10d      	bne.n	80182dc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80182c0:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80182c4:	4658      	mov	r0, fp
 80182c6:	f004 fbef 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80182ca:	4580      	cmp	r8, r0
 80182cc:	d12a      	bne.n	8018324 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80182ce:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80182d2:	8037      	strh	r7, [r6, #0]
 80182d4:	f8a6 a002 	strh.w	sl, [r6, #2]
 80182d8:	80b5      	strh	r5, [r6, #4]
 80182da:	e7d9      	b.n	8018290 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 80182dc:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 80182e0:	4658      	mov	r0, fp
 80182e2:	f004 fba7 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80182e6:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 80182ea:	1b7f      	subs	r7, r7, r5
 80182ec:	b2a3      	uxth	r3, r4
 80182ee:	b2bd      	uxth	r5, r7
 80182f0:	b22f      	sxth	r7, r5
 80182f2:	4428      	add	r0, r5
 80182f4:	2f00      	cmp	r7, #0
 80182f6:	b280      	uxth	r0, r0
 80182f8:	bfb8      	it	lt
 80182fa:	18ed      	addlt	r5, r5, r3
 80182fc:	4403      	add	r3, r0
 80182fe:	bfac      	ite	ge
 8018300:	4625      	movge	r5, r4
 8018302:	2700      	movlt	r7, #0
 8018304:	b29b      	uxth	r3, r3
 8018306:	bfb8      	it	lt
 8018308:	b22d      	sxthlt	r5, r5
 801830a:	b219      	sxth	r1, r3
 801830c:	bfb8      	it	lt
 801830e:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8018312:	4291      	cmp	r1, r2
 8018314:	bfc4      	itt	gt
 8018316:	1a9c      	subgt	r4, r3, r2
 8018318:	b224      	sxthgt	r4, r4
 801831a:	42ac      	cmp	r4, r5
 801831c:	bfc4      	itt	gt
 801831e:	b207      	sxthgt	r7, r0
 8018320:	4625      	movgt	r5, r4
 8018322:	e7cf      	b.n	80182c4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8018324:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8018328:	4658      	mov	r0, fp
 801832a:	f004 fbbd 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801832e:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8018332:	ebaa 0404 	sub.w	r4, sl, r4
 8018336:	fa1f f288 	uxth.w	r2, r8
 801833a:	b2a4      	uxth	r4, r4
 801833c:	fa0f fa84 	sxth.w	sl, r4
 8018340:	4420      	add	r0, r4
 8018342:	f1ba 0f00 	cmp.w	sl, #0
 8018346:	b280      	uxth	r0, r0
 8018348:	bfb8      	it	lt
 801834a:	18a3      	addlt	r3, r4, r2
 801834c:	4402      	add	r2, r0
 801834e:	bfac      	ite	ge
 8018350:	4643      	movge	r3, r8
 8018352:	f04f 0a00 	movlt.w	sl, #0
 8018356:	b292      	uxth	r2, r2
 8018358:	bfb8      	it	lt
 801835a:	b21b      	sxthlt	r3, r3
 801835c:	b214      	sxth	r4, r2
 801835e:	bfb8      	it	lt
 8018360:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018364:	428c      	cmp	r4, r1
 8018366:	bfc4      	itt	gt
 8018368:	eba2 0801 	subgt.w	r8, r2, r1
 801836c:	fa0f f888 	sxthgt.w	r8, r8
 8018370:	4598      	cmp	r8, r3
 8018372:	bfc4      	itt	gt
 8018374:	fa0f fa80 	sxthgt.w	sl, r0
 8018378:	4643      	movgt	r3, r8
 801837a:	e7aa      	b.n	80182d2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801837c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801837c:	b570      	push	{r4, r5, r6, lr}
 801837e:	880b      	ldrh	r3, [r1, #0]
 8018380:	4605      	mov	r5, r0
 8018382:	4604      	mov	r4, r0
 8018384:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018386:	8813      	ldrh	r3, [r2, #0]
 8018388:	f825 3f30 	strh.w	r3, [r5, #48]!
 801838c:	4628      	mov	r0, r5
 801838e:	f004 fb51 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018392:	4606      	mov	r6, r0
 8018394:	4628      	mov	r0, r5
 8018396:	f004 fb87 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801839a:	6823      	ldr	r3, [r4, #0]
 801839c:	4605      	mov	r5, r0
 801839e:	b231      	sxth	r1, r6
 80183a0:	4620      	mov	r0, r4
 80183a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183a4:	4798      	blx	r3
 80183a6:	6823      	ldr	r3, [r4, #0]
 80183a8:	b229      	sxth	r1, r5
 80183aa:	4620      	mov	r0, r4
 80183ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183b2:	4718      	bx	r3

080183b4 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80183b4:	b510      	push	{r4, lr}
 80183b6:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80183ba:	4604      	mov	r4, r0
 80183bc:	2bff      	cmp	r3, #255	; 0xff
 80183be:	d006      	beq.n	80183ce <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80183c0:	2300      	movs	r3, #0
 80183c2:	8003      	strh	r3, [r0, #0]
 80183c4:	8043      	strh	r3, [r0, #2]
 80183c6:	8083      	strh	r3, [r0, #4]
 80183c8:	80c3      	strh	r3, [r0, #6]
 80183ca:	4620      	mov	r0, r4
 80183cc:	bd10      	pop	{r4, pc}
 80183ce:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80183d2:	b11b      	cbz	r3, 80183dc <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80183d4:	3130      	adds	r1, #48	; 0x30
 80183d6:	f004 fba1 	bl	801cb1c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80183da:	e7f6      	b.n	80183ca <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80183dc:	312e      	adds	r1, #46	; 0x2e
 80183de:	e7fa      	b.n	80183d6 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080183e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80183e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183e4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80183e8:	b08a      	sub	sp, #40	; 0x28
 80183ea:	4604      	mov	r4, r0
 80183ec:	4688      	mov	r8, r1
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d044      	beq.n	801847c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 80183f2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80183f4:	a805      	add	r0, sp, #20
 80183f6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80183fa:	f004 fb1b 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80183fe:	4605      	mov	r5, r0
 8018400:	b206      	sxth	r6, r0
 8018402:	a805      	add	r0, sp, #20
 8018404:	f004 fb50 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018408:	f9b8 2000 	ldrsh.w	r2, [r8]
 801840c:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8018410:	2300      	movs	r3, #0
 8018412:	fa0f fc80 	sxth.w	ip, r0
 8018416:	4417      	add	r7, r2
 8018418:	9306      	str	r3, [sp, #24]
 801841a:	b2bf      	uxth	r7, r7
 801841c:	fa0f fe87 	sxth.w	lr, r7
 8018420:	459e      	cmp	lr, r3
 8018422:	dd2d      	ble.n	8018480 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018424:	4296      	cmp	r6, r2
 8018426:	dd2b      	ble.n	8018480 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018428:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801842c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8018430:	4419      	add	r1, r3
 8018432:	b289      	uxth	r1, r1
 8018434:	fa0f f881 	sxth.w	r8, r1
 8018438:	f1b8 0f00 	cmp.w	r8, #0
 801843c:	dd20      	ble.n	8018480 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801843e:	459c      	cmp	ip, r3
 8018440:	dd1e      	ble.n	8018480 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018442:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8018446:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801844a:	4576      	cmp	r6, lr
 801844c:	bfa8      	it	ge
 801844e:	463d      	movge	r5, r7
 8018450:	45c4      	cmp	ip, r8
 8018452:	bfa8      	it	ge
 8018454:	4608      	movge	r0, r1
 8018456:	f8ad 2018 	strh.w	r2, [sp, #24]
 801845a:	1aad      	subs	r5, r5, r2
 801845c:	1ac0      	subs	r0, r0, r3
 801845e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018462:	f8ad 501c 	strh.w	r5, [sp, #28]
 8018466:	f8ad 001e 	strh.w	r0, [sp, #30]
 801846a:	4b1f      	ldr	r3, [pc, #124]	; (80184e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	b953      	cbnz	r3, 8018486 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8018470:	4b1e      	ldr	r3, [pc, #120]	; (80184ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8018472:	218b      	movs	r1, #139	; 0x8b
 8018474:	4a1e      	ldr	r2, [pc, #120]	; (80184f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8018476:	481f      	ldr	r0, [pc, #124]	; (80184f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8018478:	f010 f906 	bl	8028688 <__assert_func>
 801847c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801847e:	e7b9      	b.n	80183f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8018480:	2300      	movs	r3, #0
 8018482:	9307      	str	r3, [sp, #28]
 8018484:	e7f1      	b.n	801846a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8018486:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801848a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801848e:	429a      	cmp	r2, r3
 8018490:	d026      	beq.n	80184e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018492:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018496:	2b00      	cmp	r3, #0
 8018498:	dd22      	ble.n	80184e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801849a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	dd1e      	ble.n	80184e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80184a2:	2300      	movs	r3, #0
 80184a4:	a908      	add	r1, sp, #32
 80184a6:	4620      	mov	r0, r4
 80184a8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80184ac:	6823      	ldr	r3, [r4, #0]
 80184ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184b0:	4798      	blx	r3
 80184b2:	4b11      	ldr	r3, [pc, #68]	; (80184f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80184ba:	b10a      	cbz	r2, 80184c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80184bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80184be:	b900      	cbnz	r0, 80184c2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 80184c0:	6898      	ldr	r0, [r3, #8]
 80184c2:	2501      	movs	r5, #1
 80184c4:	6801      	ldr	r1, [r0, #0]
 80184c6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80184ca:	9502      	str	r5, [sp, #8]
 80184cc:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80184d0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80184d4:	9401      	str	r4, [sp, #4]
 80184d6:	ac06      	add	r4, sp, #24
 80184d8:	9400      	str	r4, [sp, #0]
 80184da:	688c      	ldr	r4, [r1, #8]
 80184dc:	a905      	add	r1, sp, #20
 80184de:	47a0      	blx	r4
 80184e0:	b00a      	add	sp, #40	; 0x28
 80184e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184e6:	bf00      	nop
 80184e8:	20005868 	.word	0x20005868
 80184ec:	0802afd4 	.word	0x0802afd4
 80184f0:	0802bf74 	.word	0x0802bf74
 80184f4:	0802b010 	.word	0x0802b010
 80184f8:	200057e0 	.word	0x200057e0

080184fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80184fc:	b570      	push	{r4, r5, r6, lr}
 80184fe:	880b      	ldrh	r3, [r1, #0]
 8018500:	460d      	mov	r5, r1
 8018502:	4604      	mov	r4, r0
 8018504:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018506:	4608      	mov	r0, r1
 8018508:	f004 fa94 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801850c:	4606      	mov	r6, r0
 801850e:	4628      	mov	r0, r5
 8018510:	f004 faca 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018514:	6823      	ldr	r3, [r4, #0]
 8018516:	4605      	mov	r5, r0
 8018518:	b231      	sxth	r1, r6
 801851a:	4620      	mov	r0, r4
 801851c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801851e:	4798      	blx	r3
 8018520:	6823      	ldr	r3, [r4, #0]
 8018522:	b229      	sxth	r1, r5
 8018524:	4620      	mov	r0, r4
 8018526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801852c:	4718      	bx	r3

0801852e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801852e:	b510      	push	{r4, lr}
 8018530:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018534:	4604      	mov	r4, r0
 8018536:	2bff      	cmp	r3, #255	; 0xff
 8018538:	d006      	beq.n	8018548 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801853a:	2300      	movs	r3, #0
 801853c:	8003      	strh	r3, [r0, #0]
 801853e:	8043      	strh	r3, [r0, #2]
 8018540:	8083      	strh	r3, [r0, #4]
 8018542:	80c3      	strh	r3, [r0, #6]
 8018544:	4620      	mov	r0, r4
 8018546:	bd10      	pop	{r4, pc}
 8018548:	3126      	adds	r1, #38	; 0x26
 801854a:	f004 fae7 	bl	801cb1c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801854e:	e7f9      	b.n	8018544 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018550 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018554:	4604      	mov	r4, r0
 8018556:	b088      	sub	sp, #32
 8018558:	2500      	movs	r5, #0
 801855a:	460f      	mov	r7, r1
 801855c:	f854 3b26 	ldr.w	r3, [r4], #38
 8018560:	a904      	add	r1, sp, #16
 8018562:	4606      	mov	r6, r0
 8018564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018566:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801856a:	4798      	blx	r3
 801856c:	4620      	mov	r0, r4
 801856e:	f004 fa61 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018572:	4680      	mov	r8, r0
 8018574:	4620      	mov	r0, r4
 8018576:	f004 fa97 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801857a:	9506      	str	r5, [sp, #24]
 801857c:	ad06      	add	r5, sp, #24
 801857e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018582:	4639      	mov	r1, r7
 8018584:	f8ad 801c 	strh.w	r8, [sp, #28]
 8018588:	4628      	mov	r0, r5
 801858a:	f7fe fa55 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 801858e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018592:	2b00      	cmp	r3, #0
 8018594:	dd19      	ble.n	80185ca <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018596:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801859a:	2b00      	cmp	r3, #0
 801859c:	dd15      	ble.n	80185ca <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801859e:	4b0c      	ldr	r3, [pc, #48]	; (80185d0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80185a6:	b10a      	cbz	r2, 80185ac <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80185a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80185aa:	b900      	cbnz	r0, 80185ae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80185ac:	6898      	ldr	r0, [r3, #8]
 80185ae:	2701      	movs	r7, #1
 80185b0:	6801      	ldr	r1, [r0, #0]
 80185b2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80185b6:	9702      	str	r7, [sp, #8]
 80185b8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80185bc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80185c0:	e9cd 5600 	strd	r5, r6, [sp]
 80185c4:	688d      	ldr	r5, [r1, #8]
 80185c6:	4621      	mov	r1, r4
 80185c8:	47a8      	blx	r5
 80185ca:	b008      	add	sp, #32
 80185cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185d0:	200057e0 	.word	0x200057e0

080185d4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80185d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d8:	4696      	mov	lr, r2
 80185da:	b097      	sub	sp, #92	; 0x5c
 80185dc:	4605      	mov	r5, r0
 80185de:	4614      	mov	r4, r2
 80185e0:	460e      	mov	r6, r1
 80185e2:	461f      	mov	r7, r3
 80185e4:	f10d 0c1c 	add.w	ip, sp, #28
 80185e8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80185ec:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80185f0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80185f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80185f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80185fc:	f8de 3000 	ldr.w	r3, [lr]
 8018600:	f104 0e14 	add.w	lr, r4, #20
 8018604:	f8cc 3000 	str.w	r3, [ip]
 8018608:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801860c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018610:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018614:	f8de 3000 	ldr.w	r3, [lr]
 8018618:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801861c:	f8cc 3000 	str.w	r3, [ip]
 8018620:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018624:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018628:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801862c:	f8de 3000 	ldr.w	r3, [lr]
 8018630:	4631      	mov	r1, r6
 8018632:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018634:	4628      	mov	r0, r5
 8018636:	f8cc 3000 	str.w	r3, [ip]
 801863a:	682b      	ldr	r3, [r5, #0]
 801863c:	9201      	str	r2, [sp, #4]
 801863e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018640:	f8cd 8008 	str.w	r8, [sp, #8]
 8018644:	9200      	str	r2, [sp, #0]
 8018646:	aa07      	add	r2, sp, #28
 8018648:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801864c:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 8018650:	463b      	mov	r3, r7
 8018652:	47d8      	blx	fp
 8018654:	46a6      	mov	lr, r4
 8018656:	f10d 0c1c 	add.w	ip, sp, #28
 801865a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801865e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018662:	f8de 3000 	ldr.w	r3, [lr]
 8018666:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801866a:	343c      	adds	r4, #60	; 0x3c
 801866c:	f8cc 3000 	str.w	r3, [ip]
 8018670:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018674:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018678:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801867c:	f8de 3000 	ldr.w	r3, [lr]
 8018680:	f8cc 3000 	str.w	r3, [ip]
 8018684:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801868a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801868e:	6823      	ldr	r3, [r4, #0]
 8018690:	4631      	mov	r1, r6
 8018692:	4628      	mov	r0, r5
 8018694:	f8cc 3000 	str.w	r3, [ip]
 8018698:	682b      	ldr	r3, [r5, #0]
 801869a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801869e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80186a0:	f8cd 8008 	str.w	r8, [sp, #8]
 80186a4:	9201      	str	r2, [sp, #4]
 80186a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80186a8:	9200      	str	r2, [sp, #0]
 80186aa:	aa07      	add	r2, sp, #28
 80186ac:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80186ae:	463b      	mov	r3, r7
 80186b0:	47a0      	blx	r4
 80186b2:	b017      	add	sp, #92	; 0x5c
 80186b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186b8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80186b8:	2000      	movs	r0, #0
 80186ba:	4770      	bx	lr

080186bc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80186bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186c0:	b08d      	sub	sp, #52	; 0x34
 80186c2:	4688      	mov	r8, r1
 80186c4:	f8d3 c000 	ldr.w	ip, [r3]
 80186c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80186ca:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80186ce:	680f      	ldr	r7, [r1, #0]
 80186d0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80186d4:	eba7 070c 	sub.w	r7, r7, ip
 80186d8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80186dc:	edd3 6a07 	vldr	s13, [r3, #28]
 80186e0:	42bc      	cmp	r4, r7
 80186e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80186e4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80186e8:	bfa8      	it	ge
 80186ea:	463c      	movge	r4, r7
 80186ec:	f9b1 9000 	ldrsh.w	r9, [r1]
 80186f0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80186f4:	ee07 4a90 	vmov	s15, r4
 80186f8:	eb09 0e0c 	add.w	lr, r9, ip
 80186fc:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018700:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018704:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8018708:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801870c:	4571      	cmp	r1, lr
 801870e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018712:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018716:	ee25 5a27 	vmul.f32	s10, s10, s15
 801871a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801871e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018722:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018726:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801872a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801872e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018732:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018736:	f340 808c 	ble.w	8018852 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801873a:	eba1 060e 	sub.w	r6, r1, lr
 801873e:	fb96 f5f4 	sdiv	r5, r6, r4
 8018742:	ee07 5a10 	vmov	s14, r5
 8018746:	2d00      	cmp	r5, #0
 8018748:	fb04 6615 	mls	r6, r4, r5, r6
 801874c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018750:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018754:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018758:	eea7 1a05 	vfma.f32	s2, s14, s10
 801875c:	dd12      	ble.n	8018784 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801875e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018762:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018766:	ee31 2a45 	vsub.f32	s4, s2, s10
 801876a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801876e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018772:	bf14      	ite	ne
 8018774:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018778:	eeb0 7a67 	vmoveq.f32	s14, s15
 801877c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018780:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018784:	fb05 f204 	mul.w	r2, r5, r4
 8018788:	1abf      	subs	r7, r7, r2
 801878a:	4494      	add	ip, r2
 801878c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8018790:	4411      	add	r1, r2
 8018792:	eb09 020c 	add.w	r2, r9, ip
 8018796:	b209      	sxth	r1, r1
 8018798:	443a      	add	r2, r7
 801879a:	428a      	cmp	r2, r1
 801879c:	bfc4      	itt	gt
 801879e:	eba1 0209 	subgt.w	r2, r1, r9
 80187a2:	eba2 070c 	subgt.w	r7, r2, ip
 80187a6:	2f00      	cmp	r7, #0
 80187a8:	dd50      	ble.n	801884c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80187aa:	fb97 f1f4 	sdiv	r1, r7, r4
 80187ae:	fb04 7211 	mls	r2, r4, r1, r7
 80187b2:	b90a      	cbnz	r2, 80187b8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80187b4:	3901      	subs	r1, #1
 80187b6:	4622      	mov	r2, r4
 80187b8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80187bc:	6840      	ldr	r0, [r0, #4]
 80187be:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80187c2:	44b6      	add	lr, r6
 80187c4:	f8d0 a000 	ldr.w	sl, [r0]
 80187c8:	2900      	cmp	r1, #0
 80187ca:	bfcc      	ite	gt
 80187cc:	46a1      	movgt	r9, r4
 80187ce:	4691      	movle	r9, r2
 80187d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80187d2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80187d4:	fb04 e505 	mla	r5, r4, r5, lr
 80187d8:	eef0 6a42 	vmov.f32	s13, s4
 80187dc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80187e0:	9008      	str	r0, [sp, #32]
 80187e2:	eeb0 7a61 	vmov.f32	s14, s3
 80187e6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80187e8:	695b      	ldr	r3, [r3, #20]
 80187ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187ee:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80187f2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80187f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80187f8:	445b      	add	r3, fp
 80187fa:	9307      	str	r3, [sp, #28]
 80187fc:	ee16 3a90 	vmov	r3, s13
 8018800:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018804:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018808:	ee21 3a23 	vmul.f32	s6, s2, s7
 801880c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018810:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018814:	ee17 7a90 	vmov	r7, s15
 8018818:	ee73 7a42 	vsub.f32	s15, s6, s4
 801881c:	fb97 f7f4 	sdiv	r7, r7, r4
 8018820:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018824:	ee17 ca90 	vmov	ip, s15
 8018828:	fb9c fcf4 	sdiv	ip, ip, r4
 801882c:	fb0c 3306 	mla	r3, ip, r6, r3
 8018830:	9302      	str	r3, [sp, #8]
 8018832:	ee17 3a10 	vmov	r3, s14
 8018836:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801883a:	fb07 3706 	mla	r7, r7, r6, r3
 801883e:	eba9 0306 	sub.w	r3, r9, r6
 8018842:	e9cd 4700 	strd	r4, r7, [sp]
 8018846:	f8da 4008 	ldr.w	r4, [sl, #8]
 801884a:	47a0      	blx	r4
 801884c:	b00d      	add	sp, #52	; 0x34
 801884e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018852:	2500      	movs	r5, #0
 8018854:	462e      	mov	r6, r5
 8018856:	e799      	b.n	801878c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801885c:	b0db      	sub	sp, #364	; 0x16c
 801885e:	461d      	mov	r5, r3
 8018860:	4614      	mov	r4, r2
 8018862:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8018866:	910f      	str	r1, [sp, #60]	; 0x3c
 8018868:	4629      	mov	r1, r5
 801886a:	930a      	str	r3, [sp, #40]	; 0x28
 801886c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8018870:	9009      	str	r0, [sp, #36]	; 0x24
 8018872:	930b      	str	r3, [sp, #44]	; 0x2c
 8018874:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8018878:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801887c:	9310      	str	r3, [sp, #64]	; 0x40
 801887e:	6803      	ldr	r3, [r0, #0]
 8018880:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8018882:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018886:	47b8      	blx	r7
 8018888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801888a:	6058      	str	r0, [r3, #4]
 801888c:	2800      	cmp	r0, #0
 801888e:	f000 83a1 	beq.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018892:	682b      	ldr	r3, [r5, #0]
 8018894:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8018898:	ed94 7a02 	vldr	s14, [r4, #8]
 801889c:	9314      	str	r3, [sp, #80]	; 0x50
 801889e:	686b      	ldr	r3, [r5, #4]
 80188a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188a4:	9315      	str	r3, [sp, #84]	; 0x54
 80188a6:	4bc1      	ldr	r3, [pc, #772]	; (8018bac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80188a8:	7819      	ldrb	r1, [r3, #0]
 80188aa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80188ae:	2900      	cmp	r1, #0
 80188b0:	bf16      	itet	ne
 80188b2:	4619      	movne	r1, r3
 80188b4:	4611      	moveq	r1, r2
 80188b6:	4613      	movne	r3, r2
 80188b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188bc:	9116      	str	r1, [sp, #88]	; 0x58
 80188be:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80188c2:	f240 8387 	bls.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188c6:	ed94 7a07 	vldr	s14, [r4, #28]
 80188ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188d2:	f240 837f 	bls.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188d6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80188da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e2:	f240 8377 	bls.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188e6:	6822      	ldr	r2, [r4, #0]
 80188e8:	4bb1      	ldr	r3, [pc, #708]	; (8018bb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80188ea:	429a      	cmp	r2, r3
 80188ec:	f2c0 8372 	blt.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188f0:	49b0      	ldr	r1, [pc, #704]	; (8018bb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80188f2:	6963      	ldr	r3, [r4, #20]
 80188f4:	428a      	cmp	r2, r1
 80188f6:	f300 836d 	bgt.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188fa:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80188fe:	48ae      	ldr	r0, [pc, #696]	; (8018bb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018900:	33ff      	adds	r3, #255	; 0xff
 8018902:	4283      	cmp	r3, r0
 8018904:	f200 8366 	bhi.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018908:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801890a:	4dac      	ldr	r5, [pc, #688]	; (8018bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801890c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018910:	33ff      	adds	r3, #255	; 0xff
 8018912:	42ab      	cmp	r3, r5
 8018914:	f200 835e 	bhi.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018918:	6862      	ldr	r2, [r4, #4]
 801891a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801891e:	33ff      	adds	r3, #255	; 0xff
 8018920:	4283      	cmp	r3, r0
 8018922:	f200 8357 	bhi.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018926:	69a1      	ldr	r1, [r4, #24]
 8018928:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801892c:	33ff      	adds	r3, #255	; 0xff
 801892e:	4283      	cmp	r3, r0
 8018930:	f200 8350 	bhi.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018934:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018936:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801893a:	30ff      	adds	r0, #255	; 0xff
 801893c:	42a8      	cmp	r0, r5
 801893e:	f200 8349 	bhi.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018942:	428a      	cmp	r2, r1
 8018944:	f280 8110 	bge.w	8018b68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018948:	429a      	cmp	r2, r3
 801894a:	f300 8119 	bgt.w	8018b80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801894e:	4299      	cmp	r1, r3
 8018950:	f280 811d 	bge.w	8018b8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018954:	2502      	movs	r5, #2
 8018956:	2701      	movs	r7, #1
 8018958:	46a9      	mov	r9, r5
 801895a:	46b8      	mov	r8, r7
 801895c:	f04f 0a00 	mov.w	sl, #0
 8018960:	4621      	mov	r1, r4
 8018962:	a849      	add	r0, sp, #292	; 0x124
 8018964:	f003 fdb4 	bl	801c4d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018968:	4622      	mov	r2, r4
 801896a:	4653      	mov	r3, sl
 801896c:	a949      	add	r1, sp, #292	; 0x124
 801896e:	f8cd 9000 	str.w	r9, [sp]
 8018972:	a819      	add	r0, sp, #100	; 0x64
 8018974:	f003 fedc 	bl	801c730 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018978:	4622      	mov	r2, r4
 801897a:	4653      	mov	r3, sl
 801897c:	a949      	add	r1, sp, #292	; 0x124
 801897e:	f8cd 8000 	str.w	r8, [sp]
 8018982:	a829      	add	r0, sp, #164	; 0xa4
 8018984:	f003 fed4 	bl	801c730 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018988:	4643      	mov	r3, r8
 801898a:	4622      	mov	r2, r4
 801898c:	a949      	add	r1, sp, #292	; 0x124
 801898e:	f8cd 9000 	str.w	r9, [sp]
 8018992:	a839      	add	r0, sp, #228	; 0xe4
 8018994:	f003 fecc 	bl	801c730 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018998:	42af      	cmp	r7, r5
 801899a:	af12      	add	r7, sp, #72	; 0x48
 801899c:	bfb7      	itett	lt
 801899e:	2300      	movlt	r3, #0
 80189a0:	2301      	movge	r3, #1
 80189a2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80189a4:	ac19      	addlt	r4, sp, #100	; 0x64
 80189a6:	bfb1      	iteee	lt
 80189a8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80189aa:	ad19      	addge	r5, sp, #100	; 0x64
 80189ac:	930e      	strge	r3, [sp, #56]	; 0x38
 80189ae:	ac29      	addge	r4, sp, #164	; 0xa4
 80189b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80189b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80189b6:	e887 0003 	stmia.w	r7, {r0, r1}
 80189ba:	b928      	cbnz	r0, 80189c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80189bc:	4b80      	ldr	r3, [pc, #512]	; (8018bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80189be:	6818      	ldr	r0, [r3, #0]
 80189c0:	6803      	ldr	r3, [r0, #0]
 80189c2:	6a1b      	ldr	r3, [r3, #32]
 80189c4:	4798      	blx	r3
 80189c6:	6038      	str	r0, [r7, #0]
 80189c8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80189ca:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80189ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80189d2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80189d4:	930c      	str	r3, [sp, #48]	; 0x30
 80189d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80189d8:	6963      	ldr	r3, [r4, #20]
 80189da:	440b      	add	r3, r1
 80189dc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80189e0:	4408      	add	r0, r1
 80189e2:	b200      	sxth	r0, r0
 80189e4:	4283      	cmp	r3, r0
 80189e6:	900d      	str	r0, [sp, #52]	; 0x34
 80189e8:	f280 80dd 	bge.w	8018ba6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80189ec:	428b      	cmp	r3, r1
 80189ee:	da08      	bge.n	8018a02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80189f0:	2a00      	cmp	r2, #0
 80189f2:	dd06      	ble.n	8018a02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80189f4:	1acb      	subs	r3, r1, r3
 80189f6:	429a      	cmp	r2, r3
 80189f8:	f2c0 80e4 	blt.w	8018bc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	f300 80e2 	bgt.w	8018bc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018a02:	6967      	ldr	r7, [r4, #20]
 8018a04:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a0a:	443b      	add	r3, r7
 8018a0c:	461f      	mov	r7, r3
 8018a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a10:	1bdf      	subs	r7, r3, r7
 8018a12:	4297      	cmp	r7, r2
 8018a14:	bfa8      	it	ge
 8018a16:	4617      	movge	r7, r2
 8018a18:	2f00      	cmp	r7, #0
 8018a1a:	f340 8166 	ble.w	8018cea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018a1e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018a20:	6829      	ldr	r1, [r5, #0]
 8018a22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a26:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018a2a:	4411      	add	r1, r2
 8018a2c:	6820      	ldr	r0, [r4, #0]
 8018a2e:	4299      	cmp	r1, r3
 8018a30:	dd1a      	ble.n	8018a68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018a32:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018a36:	4402      	add	r2, r0
 8018a38:	440b      	add	r3, r1
 8018a3a:	b21b      	sxth	r3, r3
 8018a3c:	429a      	cmp	r2, r3
 8018a3e:	dc13      	bgt.n	8018a68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018a40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a42:	a912      	add	r1, sp, #72	; 0x48
 8018a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	9206      	str	r2, [sp, #24]
 8018a4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018a4e:	9500      	str	r5, [sp, #0]
 8018a50:	9205      	str	r2, [sp, #20]
 8018a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a54:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018a58:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018a5a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018a5e:	aa49      	add	r2, sp, #292	; 0x124
 8018a60:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8018a64:	4623      	mov	r3, r4
 8018a66:	47c8      	blx	r9
 8018a68:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018a6c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018a70:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018a78:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018a7c:	68a1      	ldr	r1, [r4, #8]
 8018a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018a82:	ed94 6a08 	vldr	s12, [r4, #32]
 8018a86:	edd4 6a07 	vldr	s13, [r4, #28]
 8018a8a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018a8e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018a92:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018a96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018a9a:	edc4 6a07 	vstr	s13, [r4, #28]
 8018a9e:	441a      	add	r2, r3
 8018aa0:	6963      	ldr	r3, [r4, #20]
 8018aa2:	3301      	adds	r3, #1
 8018aa4:	6022      	str	r2, [r4, #0]
 8018aa6:	6163      	str	r3, [r4, #20]
 8018aa8:	69a3      	ldr	r3, [r4, #24]
 8018aaa:	3b01      	subs	r3, #1
 8018aac:	61a3      	str	r3, [r4, #24]
 8018aae:	6923      	ldr	r3, [r4, #16]
 8018ab0:	440b      	add	r3, r1
 8018ab2:	68e1      	ldr	r1, [r4, #12]
 8018ab4:	428b      	cmp	r3, r1
 8018ab6:	6123      	str	r3, [r4, #16]
 8018ab8:	db15      	blt.n	8018ae6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018aba:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018abe:	3201      	adds	r2, #1
 8018ac0:	1a5b      	subs	r3, r3, r1
 8018ac2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018ac6:	6022      	str	r2, [r4, #0]
 8018ac8:	6123      	str	r3, [r4, #16]
 8018aca:	edc4 6a07 	vstr	s13, [r4, #28]
 8018ace:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018ad2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018ad6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018ada:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018ae2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018ae6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018aea:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018aee:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018af2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018af6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018afa:	68a9      	ldr	r1, [r5, #8]
 8018afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b00:	ed95 6a08 	vldr	s12, [r5, #32]
 8018b04:	edd5 6a07 	vldr	s13, [r5, #28]
 8018b08:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018b0c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018b10:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018b14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018b18:	edc5 6a07 	vstr	s13, [r5, #28]
 8018b1c:	441a      	add	r2, r3
 8018b1e:	696b      	ldr	r3, [r5, #20]
 8018b20:	3301      	adds	r3, #1
 8018b22:	602a      	str	r2, [r5, #0]
 8018b24:	616b      	str	r3, [r5, #20]
 8018b26:	69ab      	ldr	r3, [r5, #24]
 8018b28:	3b01      	subs	r3, #1
 8018b2a:	61ab      	str	r3, [r5, #24]
 8018b2c:	692b      	ldr	r3, [r5, #16]
 8018b2e:	440b      	add	r3, r1
 8018b30:	68e9      	ldr	r1, [r5, #12]
 8018b32:	428b      	cmp	r3, r1
 8018b34:	612b      	str	r3, [r5, #16]
 8018b36:	db15      	blt.n	8018b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018b38:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018b3c:	3201      	adds	r2, #1
 8018b3e:	1a5b      	subs	r3, r3, r1
 8018b40:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018b44:	602a      	str	r2, [r5, #0]
 8018b46:	612b      	str	r3, [r5, #16]
 8018b48:	edc5 6a07 	vstr	s13, [r5, #28]
 8018b4c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018b50:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018b54:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018b58:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b60:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018b64:	3f01      	subs	r7, #1
 8018b66:	e757      	b.n	8018a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018b68:	4299      	cmp	r1, r3
 8018b6a:	dc13      	bgt.n	8018b94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018b6c:	429a      	cmp	r2, r3
 8018b6e:	da14      	bge.n	8018b9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018b70:	2502      	movs	r5, #2
 8018b72:	2703      	movs	r7, #3
 8018b74:	f04f 0800 	mov.w	r8, #0
 8018b78:	46a9      	mov	r9, r5
 8018b7a:	f04f 0a01 	mov.w	sl, #1
 8018b7e:	e6ef      	b.n	8018960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018b80:	2501      	movs	r5, #1
 8018b82:	2700      	movs	r7, #0
 8018b84:	46a9      	mov	r9, r5
 8018b86:	46b8      	mov	r8, r7
 8018b88:	f04f 0a02 	mov.w	sl, #2
 8018b8c:	e6e8      	b.n	8018960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018b8e:	2501      	movs	r5, #1
 8018b90:	2702      	movs	r7, #2
 8018b92:	e6e1      	b.n	8018958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018b94:	2500      	movs	r5, #0
 8018b96:	2701      	movs	r7, #1
 8018b98:	e7f4      	b.n	8018b84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018b9a:	2702      	movs	r7, #2
 8018b9c:	2503      	movs	r5, #3
 8018b9e:	f04f 0900 	mov.w	r9, #0
 8018ba2:	46b8      	mov	r8, r7
 8018ba4:	e7e9      	b.n	8018b7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018ba6:	4613      	mov	r3, r2
 8018ba8:	e728      	b.n	80189fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018baa:	bf00      	nop
 8018bac:	200057d8 	.word	0x200057d8
 8018bb0:	fffd8f01 	.word	0xfffd8f01
 8018bb4:	00027100 	.word	0x00027100
 8018bb8:	0004e1ff 	.word	0x0004e1ff
 8018bbc:	0004e1fe 	.word	0x0004e1fe
 8018bc0:	200057e0 	.word	0x200057e0
 8018bc4:	4613      	mov	r3, r2
 8018bc6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018bc8:	469e      	mov	lr, r3
 8018bca:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8018bcc:	469c      	mov	ip, r3
 8018bce:	9111      	str	r1, [sp, #68]	; 0x44
 8018bd0:	f04f 0900 	mov.w	r9, #0
 8018bd4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8018bd8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8018bdc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018be0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8018be4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8018be8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8018bec:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018bf0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018bf4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018bf8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8018bfc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018c00:	f1bc 0f00 	cmp.w	ip, #0
 8018c04:	d147      	bne.n	8018c96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018c06:	eb03 0c07 	add.w	ip, r3, r7
 8018c0a:	1ad7      	subs	r7, r2, r3
 8018c0c:	f1b9 0f00 	cmp.w	r9, #0
 8018c10:	d009      	beq.n	8018c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018c12:	9029      	str	r0, [sp, #164]	; 0xa4
 8018c14:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018c18:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8018c1c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018c20:	912d      	str	r1, [sp, #180]	; 0xb4
 8018c22:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018c26:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018c28:	f04f 0800 	mov.w	r8, #0
 8018c2c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018c30:	9111      	str	r1, [sp, #68]	; 0x44
 8018c32:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018c36:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018c3a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018c3e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018c42:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018c46:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018c4a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018c4e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018c52:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018c56:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018c5a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018c5e:	f1be 0f00 	cmp.w	lr, #0
 8018c62:	d031      	beq.n	8018cc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018c64:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018c66:	4450      	add	r0, sl
 8018c68:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018c6c:	4431      	add	r1, r6
 8018c6e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018c72:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018c76:	4549      	cmp	r1, r9
 8018c78:	db08      	blt.n	8018c8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8018c7a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018c7e:	3001      	adds	r0, #1
 8018c80:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018c84:	eba1 0109 	sub.w	r1, r1, r9
 8018c88:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018c8c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018c90:	f04f 0801 	mov.w	r8, #1
 8018c94:	e7e3      	b.n	8018c5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8018c96:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018c98:	4450      	add	r0, sl
 8018c9a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018c9e:	4431      	add	r1, r6
 8018ca0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018ca4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018ca8:	4541      	cmp	r1, r8
 8018caa:	db08      	blt.n	8018cbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8018cac:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018cb0:	3001      	adds	r0, #1
 8018cb2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018cb6:	eba1 0108 	sub.w	r1, r1, r8
 8018cba:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018cbe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018cc2:	f04f 0901 	mov.w	r9, #1
 8018cc6:	e79b      	b.n	8018c00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018cc8:	449c      	add	ip, r3
 8018cca:	1aff      	subs	r7, r7, r3
 8018ccc:	f1b8 0f00 	cmp.w	r8, #0
 8018cd0:	d009      	beq.n	8018ce6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018cd2:	9019      	str	r0, [sp, #100]	; 0x64
 8018cd4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018cd8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018cdc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018ce0:	911d      	str	r1, [sp, #116]	; 0x74
 8018ce2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018ce6:	1ad2      	subs	r2, r2, r3
 8018ce8:	e68b      	b.n	8018a02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018cec:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	f000 80d1 	beq.w	8018e96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018cf4:	ad19      	add	r5, sp, #100	; 0x64
 8018cf6:	ac39      	add	r4, sp, #228	; 0xe4
 8018cf8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018cfa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018cfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d02:	930c      	str	r3, [sp, #48]	; 0x30
 8018d04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018d06:	6963      	ldr	r3, [r4, #20]
 8018d08:	440b      	add	r3, r1
 8018d0a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018d0e:	4408      	add	r0, r1
 8018d10:	b200      	sxth	r0, r0
 8018d12:	4283      	cmp	r3, r0
 8018d14:	900d      	str	r0, [sp, #52]	; 0x34
 8018d16:	f280 80c1 	bge.w	8018e9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8018d1a:	428b      	cmp	r3, r1
 8018d1c:	da08      	bge.n	8018d30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018d1e:	2a00      	cmp	r2, #0
 8018d20:	dd06      	ble.n	8018d30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018d22:	1acb      	subs	r3, r1, r3
 8018d24:	429a      	cmp	r2, r3
 8018d26:	f2c0 80bb 	blt.w	8018ea0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	f300 80b9 	bgt.w	8018ea2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018d30:	6967      	ldr	r7, [r4, #20]
 8018d32:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d38:	443b      	add	r3, r7
 8018d3a:	461f      	mov	r7, r3
 8018d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d3e:	1bdf      	subs	r7, r3, r7
 8018d40:	4297      	cmp	r7, r2
 8018d42:	bfa8      	it	ge
 8018d44:	4617      	movge	r7, r2
 8018d46:	2f00      	cmp	r7, #0
 8018d48:	f340 813c 	ble.w	8018fc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8018d4c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018d4e:	6829      	ldr	r1, [r5, #0]
 8018d50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d54:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018d58:	4411      	add	r1, r2
 8018d5a:	6820      	ldr	r0, [r4, #0]
 8018d5c:	4299      	cmp	r1, r3
 8018d5e:	dd1a      	ble.n	8018d96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018d60:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018d64:	4402      	add	r2, r0
 8018d66:	440b      	add	r3, r1
 8018d68:	b21b      	sxth	r3, r3
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	dc13      	bgt.n	8018d96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018d6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018d70:	a912      	add	r1, sp, #72	; 0x48
 8018d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	9206      	str	r2, [sp, #24]
 8018d7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018d7c:	9500      	str	r5, [sp, #0]
 8018d7e:	9205      	str	r2, [sp, #20]
 8018d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018d82:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018d86:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018d88:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018d8c:	aa49      	add	r2, sp, #292	; 0x124
 8018d8e:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8018d92:	4623      	mov	r3, r4
 8018d94:	47c8      	blx	r9
 8018d96:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018d9a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018d9e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018da6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018daa:	68a1      	ldr	r1, [r4, #8]
 8018dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018db0:	ed94 6a08 	vldr	s12, [r4, #32]
 8018db4:	edd4 6a07 	vldr	s13, [r4, #28]
 8018db8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018dbc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018dc0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018dc4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018dc8:	edc4 6a07 	vstr	s13, [r4, #28]
 8018dcc:	441a      	add	r2, r3
 8018dce:	6963      	ldr	r3, [r4, #20]
 8018dd0:	3301      	adds	r3, #1
 8018dd2:	6022      	str	r2, [r4, #0]
 8018dd4:	6163      	str	r3, [r4, #20]
 8018dd6:	69a3      	ldr	r3, [r4, #24]
 8018dd8:	3b01      	subs	r3, #1
 8018dda:	61a3      	str	r3, [r4, #24]
 8018ddc:	6923      	ldr	r3, [r4, #16]
 8018dde:	440b      	add	r3, r1
 8018de0:	68e1      	ldr	r1, [r4, #12]
 8018de2:	428b      	cmp	r3, r1
 8018de4:	6123      	str	r3, [r4, #16]
 8018de6:	db15      	blt.n	8018e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018de8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018dec:	3201      	adds	r2, #1
 8018dee:	1a5b      	subs	r3, r3, r1
 8018df0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018df4:	6022      	str	r2, [r4, #0]
 8018df6:	6123      	str	r3, [r4, #16]
 8018df8:	edc4 6a07 	vstr	s13, [r4, #28]
 8018dfc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018e00:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018e04:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018e08:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e10:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018e14:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018e18:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018e1c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018e24:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018e28:	68a9      	ldr	r1, [r5, #8]
 8018e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e2e:	ed95 6a08 	vldr	s12, [r5, #32]
 8018e32:	edd5 6a07 	vldr	s13, [r5, #28]
 8018e36:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018e3a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018e3e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018e42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018e46:	edc5 6a07 	vstr	s13, [r5, #28]
 8018e4a:	441a      	add	r2, r3
 8018e4c:	696b      	ldr	r3, [r5, #20]
 8018e4e:	3301      	adds	r3, #1
 8018e50:	602a      	str	r2, [r5, #0]
 8018e52:	616b      	str	r3, [r5, #20]
 8018e54:	69ab      	ldr	r3, [r5, #24]
 8018e56:	3b01      	subs	r3, #1
 8018e58:	61ab      	str	r3, [r5, #24]
 8018e5a:	692b      	ldr	r3, [r5, #16]
 8018e5c:	440b      	add	r3, r1
 8018e5e:	68e9      	ldr	r1, [r5, #12]
 8018e60:	428b      	cmp	r3, r1
 8018e62:	612b      	str	r3, [r5, #16]
 8018e64:	db15      	blt.n	8018e92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018e66:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018e6a:	3201      	adds	r2, #1
 8018e6c:	1a5b      	subs	r3, r3, r1
 8018e6e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018e72:	602a      	str	r2, [r5, #0]
 8018e74:	612b      	str	r3, [r5, #16]
 8018e76:	edc5 6a07 	vstr	s13, [r5, #28]
 8018e7a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018e7e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018e82:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018e86:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e8e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018e92:	3f01      	subs	r7, #1
 8018e94:	e757      	b.n	8018d46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018e96:	ad39      	add	r5, sp, #228	; 0xe4
 8018e98:	ac19      	add	r4, sp, #100	; 0x64
 8018e9a:	e72d      	b.n	8018cf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8018e9c:	4613      	mov	r3, r2
 8018e9e:	e744      	b.n	8018d2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018ea0:	4613      	mov	r3, r2
 8018ea2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8018ea4:	469e      	mov	lr, r3
 8018ea6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8018eaa:	461f      	mov	r7, r3
 8018eac:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8018eb0:	f04f 0900 	mov.w	r9, #0
 8018eb4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8018eb8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8018ebc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8018ec0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8018ec4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8018ec8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8018eca:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8018ece:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018ed2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8018ed6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8018eda:	960e      	str	r6, [sp, #56]	; 0x38
 8018edc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018ee0:	2f00      	cmp	r7, #0
 8018ee2:	d146      	bne.n	8018f72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018ee4:	449c      	add	ip, r3
 8018ee6:	1ad7      	subs	r7, r2, r3
 8018ee8:	f1b9 0f00 	cmp.w	r9, #0
 8018eec:	d009      	beq.n	8018f02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8018eee:	9039      	str	r0, [sp, #228]	; 0xe4
 8018ef0:	913d      	str	r1, [sp, #244]	; 0xf4
 8018ef2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018ef6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8018efa:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8018efe:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018f02:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018f04:	f04f 0800 	mov.w	r8, #0
 8018f08:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018f0c:	910e      	str	r1, [sp, #56]	; 0x38
 8018f0e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018f12:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018f16:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018f1a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018f1e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018f22:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018f26:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018f2a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018f2e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018f32:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018f36:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018f3a:	f1be 0f00 	cmp.w	lr, #0
 8018f3e:	d030      	beq.n	8018fa2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018f40:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018f42:	4450      	add	r0, sl
 8018f44:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018f48:	4431      	add	r1, r6
 8018f4a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018f4e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018f52:	4549      	cmp	r1, r9
 8018f54:	db08      	blt.n	8018f68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018f56:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018f5a:	3001      	adds	r0, #1
 8018f5c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018f60:	eba1 0109 	sub.w	r1, r1, r9
 8018f64:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018f68:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018f6c:	f04f 0801 	mov.w	r8, #1
 8018f70:	e7e3      	b.n	8018f3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018f72:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018f74:	4450      	add	r0, sl
 8018f76:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018f7a:	4431      	add	r1, r6
 8018f7c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018f80:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018f84:	4541      	cmp	r1, r8
 8018f86:	db08      	blt.n	8018f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8018f88:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018f8c:	3001      	adds	r0, #1
 8018f8e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018f92:	eba1 0108 	sub.w	r1, r1, r8
 8018f96:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018f9a:	3f01      	subs	r7, #1
 8018f9c:	f04f 0901 	mov.w	r9, #1
 8018fa0:	e79e      	b.n	8018ee0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8018fa2:	449c      	add	ip, r3
 8018fa4:	1aff      	subs	r7, r7, r3
 8018fa6:	f1b8 0f00 	cmp.w	r8, #0
 8018faa:	d009      	beq.n	8018fc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8018fac:	9019      	str	r0, [sp, #100]	; 0x64
 8018fae:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018fb2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018fb6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018fba:	911d      	str	r1, [sp, #116]	; 0x74
 8018fbc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018fc0:	1ad2      	subs	r2, r2, r3
 8018fc2:	e6b5      	b.n	8018d30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	b923      	cbnz	r3, 8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018fca:	4b04      	ldr	r3, [pc, #16]	; (8018fdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8018fcc:	6818      	ldr	r0, [r3, #0]
 8018fce:	6803      	ldr	r3, [r0, #0]
 8018fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fd2:	4798      	blx	r3
 8018fd4:	b05b      	add	sp, #364	; 0x16c
 8018fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fda:	bf00      	nop
 8018fdc:	200057e0 	.word	0x200057e0

08018fe0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8018fe0:	b570      	push	{r4, r5, r6, lr}
 8018fe2:	4604      	mov	r4, r0
 8018fe4:	2500      	movs	r5, #0
 8018fe6:	9804      	ldr	r0, [sp, #16]
 8018fe8:	7223      	strb	r3, [r4, #8]
 8018fea:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018fee:	8025      	strh	r5, [r4, #0]
 8018ff0:	6061      	str	r1, [r4, #4]
 8018ff2:	7263      	strb	r3, [r4, #9]
 8018ff4:	60e0      	str	r0, [r4, #12]
 8018ff6:	8222      	strh	r2, [r4, #16]
 8018ff8:	8265      	strh	r5, [r4, #18]
 8018ffa:	82a5      	strh	r5, [r4, #20]
 8018ffc:	82e5      	strh	r5, [r4, #22]
 8018ffe:	8325      	strh	r5, [r4, #24]
 8019000:	8365      	strh	r5, [r4, #26]
 8019002:	83a5      	strh	r5, [r4, #28]
 8019004:	77a5      	strb	r5, [r4, #30]
 8019006:	6803      	ldr	r3, [r0, #0]
 8019008:	695b      	ldr	r3, [r3, #20]
 801900a:	4798      	blx	r3
 801900c:	4606      	mov	r6, r0
 801900e:	b1f8      	cbz	r0, 8019050 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019010:	68e0      	ldr	r0, [r4, #12]
 8019012:	4631      	mov	r1, r6
 8019014:	6803      	ldr	r3, [r0, #0]
 8019016:	68db      	ldr	r3, [r3, #12]
 8019018:	4798      	blx	r3
 801901a:	7b43      	ldrb	r3, [r0, #13]
 801901c:	7a82      	ldrb	r2, [r0, #10]
 801901e:	4605      	mov	r5, r0
 8019020:	005b      	lsls	r3, r3, #1
 8019022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019026:	4313      	orrs	r3, r2
 8019028:	83a3      	strh	r3, [r4, #28]
 801902a:	7a63      	ldrb	r3, [r4, #9]
 801902c:	2b04      	cmp	r3, #4
 801902e:	d10f      	bne.n	8019050 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019030:	68e0      	ldr	r0, [r4, #12]
 8019032:	462a      	mov	r2, r5
 8019034:	4631      	mov	r1, r6
 8019036:	6803      	ldr	r3, [r0, #0]
 8019038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801903a:	4798      	blx	r3
 801903c:	7b6b      	ldrb	r3, [r5, #13]
 801903e:	005b      	lsls	r3, r3, #1
 8019040:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019044:	7aab      	ldrb	r3, [r5, #10]
 8019046:	4313      	orrs	r3, r2
 8019048:	4418      	add	r0, r3
 801904a:	8ba3      	ldrh	r3, [r4, #28]
 801904c:	4418      	add	r0, r3
 801904e:	83a0      	strh	r0, [r4, #28]
 8019050:	4620      	mov	r0, r4
 8019052:	bd70      	pop	{r4, r5, r6, pc}

08019054 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019058:	2400      	movs	r4, #0
 801905a:	b085      	sub	sp, #20
 801905c:	4681      	mov	r9, r0
 801905e:	4688      	mov	r8, r1
 8019060:	4692      	mov	sl, r2
 8019062:	469b      	mov	fp, r3
 8019064:	4627      	mov	r7, r4
 8019066:	4625      	mov	r5, r4
 8019068:	4626      	mov	r6, r4
 801906a:	4554      	cmp	r4, sl
 801906c:	da2a      	bge.n	80190c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801906e:	2300      	movs	r3, #0
 8019070:	9303      	str	r3, [sp, #12]
 8019072:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019076:	429d      	cmp	r5, r3
 8019078:	d004      	beq.n	8019084 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801907a:	f242 030b 	movw	r3, #8203	; 0x200b
 801907e:	429d      	cmp	r5, r3
 8019080:	bf18      	it	ne
 8019082:	462f      	movne	r7, r5
 8019084:	ab03      	add	r3, sp, #12
 8019086:	4642      	mov	r2, r8
 8019088:	4659      	mov	r1, fp
 801908a:	4648      	mov	r0, r9
 801908c:	f002 ffa6 	bl	801bfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019090:	4605      	mov	r5, r0
 8019092:	b1b8      	cbz	r0, 80190c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019094:	280a      	cmp	r0, #10
 8019096:	d015      	beq.n	80190c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019098:	9a03      	ldr	r2, [sp, #12]
 801909a:	b18a      	cbz	r2, 80190c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801909c:	7b50      	ldrb	r0, [r2, #13]
 801909e:	4639      	mov	r1, r7
 80190a0:	7a93      	ldrb	r3, [r2, #10]
 80190a2:	0040      	lsls	r0, r0, #1
 80190a4:	8895      	ldrh	r5, [r2, #4]
 80190a6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80190aa:	4303      	orrs	r3, r0
 80190ac:	4640      	mov	r0, r8
 80190ae:	9301      	str	r3, [sp, #4]
 80190b0:	f8d8 3000 	ldr.w	r3, [r8]
 80190b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80190b6:	4798      	blx	r3
 80190b8:	9b01      	ldr	r3, [sp, #4]
 80190ba:	4418      	add	r0, r3
 80190bc:	4406      	add	r6, r0
 80190be:	b2b6      	uxth	r6, r6
 80190c0:	3401      	adds	r4, #1
 80190c2:	e7d2      	b.n	801906a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80190c4:	4630      	mov	r0, r6
 80190c6:	b005      	add	sp, #20
 80190c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190cc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80190cc:	2a02      	cmp	r2, #2
 80190ce:	b530      	push	{r4, r5, lr}
 80190d0:	d011      	beq.n	80190f6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80190d2:	2a03      	cmp	r2, #3
 80190d4:	d01c      	beq.n	8019110 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80190d6:	2a01      	cmp	r2, #1
 80190d8:	d10c      	bne.n	80190f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80190da:	888b      	ldrh	r3, [r1, #4]
 80190dc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80190e0:	8801      	ldrh	r1, [r0, #0]
 80190e2:	1a9b      	subs	r3, r3, r2
 80190e4:	8844      	ldrh	r4, [r0, #2]
 80190e6:	1a5b      	subs	r3, r3, r1
 80190e8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80190ec:	8004      	strh	r4, [r0, #0]
 80190ee:	8043      	strh	r3, [r0, #2]
 80190f0:	8081      	strh	r1, [r0, #4]
 80190f2:	80c2      	strh	r2, [r0, #6]
 80190f4:	bd30      	pop	{r4, r5, pc}
 80190f6:	88cb      	ldrh	r3, [r1, #6]
 80190f8:	88c2      	ldrh	r2, [r0, #6]
 80190fa:	1a9b      	subs	r3, r3, r2
 80190fc:	8842      	ldrh	r2, [r0, #2]
 80190fe:	1a9b      	subs	r3, r3, r2
 8019100:	888a      	ldrh	r2, [r1, #4]
 8019102:	8881      	ldrh	r1, [r0, #4]
 8019104:	8043      	strh	r3, [r0, #2]
 8019106:	1a52      	subs	r2, r2, r1
 8019108:	8801      	ldrh	r1, [r0, #0]
 801910a:	1a52      	subs	r2, r2, r1
 801910c:	8002      	strh	r2, [r0, #0]
 801910e:	e7f1      	b.n	80190f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019110:	88cb      	ldrh	r3, [r1, #6]
 8019112:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019116:	8841      	ldrh	r1, [r0, #2]
 8019118:	1a9b      	subs	r3, r3, r2
 801911a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801911e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019122:	1a5b      	subs	r3, r3, r1
 8019124:	8045      	strh	r5, [r0, #2]
 8019126:	8082      	strh	r2, [r0, #4]
 8019128:	8003      	strh	r3, [r0, #0]
 801912a:	80c4      	strh	r4, [r0, #6]
 801912c:	e7e2      	b.n	80190f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801912e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801912e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019132:	b09f      	sub	sp, #124	; 0x7c
 8019134:	9116      	str	r1, [sp, #88]	; 0x58
 8019136:	9317      	str	r3, [sp, #92]	; 0x5c
 8019138:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801913a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801913c:	8809      	ldrh	r1, [r1, #0]
 801913e:	889b      	ldrh	r3, [r3, #4]
 8019140:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019144:	440b      	add	r3, r1
 8019146:	9212      	str	r2, [sp, #72]	; 0x48
 8019148:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801914c:	b21b      	sxth	r3, r3
 801914e:	9011      	str	r0, [sp, #68]	; 0x44
 8019150:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019154:	9310      	str	r3, [sp, #64]	; 0x40
 8019156:	f8d8 3000 	ldr.w	r3, [r8]
 801915a:	7a59      	ldrb	r1, [r3, #9]
 801915c:	7a1b      	ldrb	r3, [r3, #8]
 801915e:	9114      	str	r1, [sp, #80]	; 0x50
 8019160:	9315      	str	r3, [sp, #84]	; 0x54
 8019162:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019168:	2a00      	cmp	r2, #0
 801916a:	d067      	beq.n	801923c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801916c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019170:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019172:	2b04      	cmp	r3, #4
 8019174:	bf14      	ite	ne
 8019176:	2301      	movne	r3, #1
 8019178:	2302      	moveq	r3, #2
 801917a:	4413      	add	r3, r2
 801917c:	f04f 0900 	mov.w	r9, #0
 8019180:	930f      	str	r3, [sp, #60]	; 0x3c
 8019182:	464c      	mov	r4, r9
 8019184:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019188:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801918c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019190:	4293      	cmp	r3, r2
 8019192:	f280 808c 	bge.w	80192ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019196:	2300      	movs	r3, #0
 8019198:	931c      	str	r3, [sp, #112]	; 0x70
 801919a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801919e:	429c      	cmp	r4, r3
 80191a0:	d006      	beq.n	80191b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80191a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80191a4:	f242 020b 	movw	r2, #8203	; 0x200b
 80191a8:	4294      	cmp	r4, r2
 80191aa:	bf18      	it	ne
 80191ac:	4623      	movne	r3, r4
 80191ae:	930d      	str	r3, [sp, #52]	; 0x34
 80191b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191b2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80191b4:	f8d8 2000 	ldr.w	r2, [r8]
 80191b8:	428b      	cmp	r3, r1
 80191ba:	db41      	blt.n	8019240 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80191bc:	6813      	ldr	r3, [r2, #0]
 80191be:	4610      	mov	r0, r2
 80191c0:	695b      	ldr	r3, [r3, #20]
 80191c2:	4798      	blx	r3
 80191c4:	4604      	mov	r4, r0
 80191c6:	f8d8 0000 	ldr.w	r0, [r8]
 80191ca:	aa1d      	add	r2, sp, #116	; 0x74
 80191cc:	4621      	mov	r1, r4
 80191ce:	6803      	ldr	r3, [r0, #0]
 80191d0:	689e      	ldr	r6, [r3, #8]
 80191d2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80191d6:	47b0      	blx	r6
 80191d8:	901c      	str	r0, [sp, #112]	; 0x70
 80191da:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80191de:	429c      	cmp	r4, r3
 80191e0:	f000 80ea 	beq.w	80193b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80191e4:	f242 030b 	movw	r3, #8203	; 0x200b
 80191e8:	429c      	cmp	r4, r3
 80191ea:	f000 80e5 	beq.w	80193b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80191ee:	2c00      	cmp	r4, #0
 80191f0:	f000 80f7 	beq.w	80193e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80191f4:	2c0a      	cmp	r4, #10
 80191f6:	d060      	beq.n	80192ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80191f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80191fa:	b36a      	cbz	r2, 8019258 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80191fc:	8894      	ldrh	r4, [r2, #4]
 80191fe:	f1bb 0f00 	cmp.w	fp, #0
 8019202:	d03b      	beq.n	801927c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8019204:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019208:	f1bb 0f01 	cmp.w	fp, #1
 801920c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019210:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019214:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019218:	ea49 0903 	orr.w	r9, r9, r3
 801921c:	d134      	bne.n	8019288 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801921e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019220:	eba5 0509 	sub.w	r5, r5, r9
 8019224:	2b00      	cmp	r3, #0
 8019226:	d14f      	bne.n	80192c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019228:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801922a:	eb09 0305 	add.w	r3, r9, r5
 801922e:	4413      	add	r3, r2
 8019230:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019232:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019236:	4293      	cmp	r3, r2
 8019238:	da51      	bge.n	80192de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801923a:	e038      	b.n	80192ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801923c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801923e:	e79d      	b.n	801917c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8019240:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019244:	4659      	mov	r1, fp
 8019246:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019248:	9301      	str	r3, [sp, #4]
 801924a:	ab1d      	add	r3, sp, #116	; 0x74
 801924c:	9300      	str	r3, [sp, #0]
 801924e:	ab1c      	add	r3, sp, #112	; 0x70
 8019250:	f002 ff1c 	bl	801c08c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019254:	4604      	mov	r4, r0
 8019256:	e7c0      	b.n	80191da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8019258:	f8d8 0000 	ldr.w	r0, [r8]
 801925c:	6803      	ldr	r3, [r0, #0]
 801925e:	691b      	ldr	r3, [r3, #16]
 8019260:	4798      	blx	r3
 8019262:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019266:	4298      	cmp	r0, r3
 8019268:	f000 80a6 	beq.w	80193b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801926c:	f242 030b 	movw	r3, #8203	; 0x200b
 8019270:	4298      	cmp	r0, r3
 8019272:	f000 80a1 	beq.w	80193b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019276:	f1bb 0f00 	cmp.w	fp, #0
 801927a:	d100      	bne.n	801927e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801927c:	444d      	add	r5, r9
 801927e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019280:	2a00      	cmp	r2, #0
 8019282:	d1bf      	bne.n	8019204 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8019284:	4691      	mov	r9, r2
 8019286:	e097      	b.n	80193b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801928a:	2b00      	cmp	r3, #0
 801928c:	f000 80ab 	beq.w	80193e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019290:	f1bb 0f00 	cmp.w	fp, #0
 8019294:	d118      	bne.n	80192c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019296:	f8d8 0000 	ldr.w	r0, [r8]
 801929a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801929c:	6803      	ldr	r3, [r0, #0]
 801929e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192a0:	4798      	blx	r3
 80192a2:	4405      	add	r5, r0
 80192a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80192a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80192a8:	1aeb      	subs	r3, r5, r3
 80192aa:	4293      	cmp	r3, r2
 80192ac:	dd17      	ble.n	80192de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80192ae:	2c00      	cmp	r4, #0
 80192b0:	f000 8097 	beq.w	80193e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80192b4:	2c0a      	cmp	r4, #10
 80192b6:	f040 8085 	bne.w	80193c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80192ba:	240a      	movs	r4, #10
 80192bc:	fab4 f084 	clz	r0, r4
 80192c0:	0940      	lsrs	r0, r0, #5
 80192c2:	b01f      	add	sp, #124	; 0x7c
 80192c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192c8:	f8d8 0000 	ldr.w	r0, [r8]
 80192cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80192ce:	6803      	ldr	r3, [r0, #0]
 80192d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192d2:	4798      	blx	r3
 80192d4:	f1bb 0f01 	cmp.w	fp, #1
 80192d8:	eba5 0500 	sub.w	r5, r5, r0
 80192dc:	d0a4      	beq.n	8019228 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80192de:	981c      	ldr	r0, [sp, #112]	; 0x70
 80192e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80192e2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80192e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80192ea:	7b43      	ldrb	r3, [r0, #13]
 80192ec:	4429      	add	r1, r5
 80192ee:	015b      	lsls	r3, r3, #5
 80192f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80192f4:	7983      	ldrb	r3, [r0, #6]
 80192f6:	4313      	orrs	r3, r2
 80192f8:	440b      	add	r3, r1
 80192fa:	42b3      	cmp	r3, r6
 80192fc:	db5c      	blt.n	80193b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80192fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019300:	4299      	cmp	r1, r3
 8019302:	da59      	bge.n	80193b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019304:	f8d8 0000 	ldr.w	r0, [r8]
 8019308:	42ae      	cmp	r6, r5
 801930a:	6803      	ldr	r3, [r0, #0]
 801930c:	bfcc      	ite	gt
 801930e:	1b76      	subgt	r6, r6, r5
 8019310:	2600      	movle	r6, #0
 8019312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019314:	bfc8      	it	gt
 8019316:	b2b6      	uxthgt	r6, r6
 8019318:	4798      	blx	r3
 801931a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801931c:	7b5a      	ldrb	r2, [r3, #13]
 801931e:	00d1      	lsls	r1, r2, #3
 8019320:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8019324:	7a19      	ldrb	r1, [r3, #8]
 8019326:	4339      	orrs	r1, r7
 8019328:	0657      	lsls	r7, r2, #25
 801932a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801932c:	bf48      	it	mi
 801932e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019332:	4407      	add	r7, r0
 8019334:	bf48      	it	mi
 8019336:	b209      	sxthmi	r1, r1
 8019338:	1a7f      	subs	r7, r7, r1
 801933a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801933c:	b2bf      	uxth	r7, r7
 801933e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019342:	fa0f fa87 	sxth.w	sl, r7
 8019346:	4551      	cmp	r1, sl
 8019348:	dd3a      	ble.n	80193c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801934a:	0112      	lsls	r2, r2, #4
 801934c:	79d8      	ldrb	r0, [r3, #7]
 801934e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019352:	4302      	orrs	r2, r0
 8019354:	4492      	add	sl, r2
 8019356:	4551      	cmp	r1, sl
 8019358:	dc2e      	bgt.n	80193b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801935a:	1bcf      	subs	r7, r1, r7
 801935c:	468a      	mov	sl, r1
 801935e:	b2bf      	uxth	r7, r7
 8019360:	9319      	str	r3, [sp, #100]	; 0x64
 8019362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019364:	f8d8 0000 	ldr.w	r0, [r8]
 8019368:	681a      	ldr	r2, [r3, #0]
 801936a:	6801      	ldr	r1, [r0, #0]
 801936c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801936e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019370:	9313      	str	r3, [sp, #76]	; 0x4c
 8019372:	9218      	str	r2, [sp, #96]	; 0x60
 8019374:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8019376:	4788      	blx	r1
 8019378:	f898 1006 	ldrb.w	r1, [r8, #6]
 801937c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801937e:	910b      	str	r1, [sp, #44]	; 0x2c
 8019380:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019384:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019386:	910a      	str	r1, [sp, #40]	; 0x28
 8019388:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801938c:	9109      	str	r1, [sp, #36]	; 0x24
 801938e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019392:	9305      	str	r3, [sp, #20]
 8019394:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019396:	9206      	str	r2, [sp, #24]
 8019398:	e9cd a601 	strd	sl, r6, [sp, #4]
 801939c:	442e      	add	r6, r5
 801939e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80193a2:	b236      	sxth	r6, r6
 80193a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80193a6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80193aa:	9600      	str	r6, [sp, #0]
 80193ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80193ae:	681a      	ldr	r2, [r3, #0]
 80193b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80193b2:	685b      	ldr	r3, [r3, #4]
 80193b4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80193b6:	47b0      	blx	r6
 80193b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193ba:	3301      	adds	r3, #1
 80193bc:	930e      	str	r3, [sp, #56]	; 0x38
 80193be:	e6e5      	b.n	801918c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80193c0:	2700      	movs	r7, #0
 80193c2:	e7cd      	b.n	8019360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 80193c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80193c6:	3501      	adds	r5, #1
 80193c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80193ca:	429d      	cmp	r5, r3
 80193cc:	f6bf af76 	bge.w	80192bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80193d0:	4659      	mov	r1, fp
 80193d2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80193d4:	f7fa fdf2 	bl	8013fbc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80193d8:	4604      	mov	r4, r0
 80193da:	b110      	cbz	r0, 80193e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80193dc:	280a      	cmp	r0, #10
 80193de:	d1f2      	bne.n	80193c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80193e0:	e76b      	b.n	80192ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80193e2:	2400      	movs	r4, #0
 80193e4:	e76a      	b.n	80192bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80193e6:	f1bb 0f00 	cmp.w	fp, #0
 80193ea:	f43f af5b 	beq.w	80192a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80193ee:	e776      	b.n	80192de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

080193f0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80193f0:	b530      	push	{r4, r5, lr}
 80193f2:	8a44      	ldrh	r4, [r0, #18]
 80193f4:	8ac5      	ldrh	r5, [r0, #22]
 80193f6:	82c3      	strh	r3, [r0, #22]
 80193f8:	442c      	add	r4, r5
 80193fa:	1ae4      	subs	r4, r4, r3
 80193fc:	8b03      	ldrh	r3, [r0, #24]
 80193fe:	8244      	strh	r4, [r0, #18]
 8019400:	8a84      	ldrh	r4, [r0, #20]
 8019402:	4422      	add	r2, r4
 8019404:	440c      	add	r4, r1
 8019406:	1a59      	subs	r1, r3, r1
 8019408:	8342      	strh	r2, [r0, #26]
 801940a:	8284      	strh	r4, [r0, #20]
 801940c:	8301      	strh	r1, [r0, #24]
 801940e:	bd30      	pop	{r4, r5, pc}

08019410 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019414:	7a43      	ldrb	r3, [r0, #9]
 8019416:	b087      	sub	sp, #28
 8019418:	4604      	mov	r4, r0
 801941a:	460f      	mov	r7, r1
 801941c:	1eda      	subs	r2, r3, #3
 801941e:	b2d2      	uxtb	r2, r2
 8019420:	2900      	cmp	r1, #0
 8019422:	d036      	beq.n	8019492 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8019424:	2a01      	cmp	r2, #1
 8019426:	d932      	bls.n	801948e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019428:	1e58      	subs	r0, r3, #1
 801942a:	f1d0 0b00 	rsbs	fp, r0, #0
 801942e:	eb4b 0b00 	adc.w	fp, fp, r0
 8019432:	1e99      	subs	r1, r3, #2
 8019434:	424b      	negs	r3, r1
 8019436:	414b      	adcs	r3, r1
 8019438:	9303      	str	r3, [sp, #12]
 801943a:	2300      	movs	r3, #0
 801943c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019440:	2500      	movs	r5, #0
 8019442:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8019446:	46a9      	mov	r9, r5
 8019448:	8265      	strh	r5, [r4, #18]
 801944a:	82a5      	strh	r5, [r4, #20]
 801944c:	2300      	movs	r3, #0
 801944e:	9305      	str	r3, [sp, #20]
 8019450:	8823      	ldrh	r3, [r4, #0]
 8019452:	2b20      	cmp	r3, #32
 8019454:	d02b      	beq.n	80194ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8019456:	eba3 020a 	sub.w	r2, r3, sl
 801945a:	4256      	negs	r6, r2
 801945c:	4156      	adcs	r6, r2
 801945e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019462:	4293      	cmp	r3, r2
 8019464:	d004      	beq.n	8019470 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019466:	4553      	cmp	r3, sl
 8019468:	bf16      	itet	ne
 801946a:	4699      	movne	r9, r3
 801946c:	2601      	moveq	r6, #1
 801946e:	2600      	movne	r6, #0
 8019470:	ab05      	add	r3, sp, #20
 8019472:	68e2      	ldr	r2, [r4, #12]
 8019474:	7a21      	ldrb	r1, [r4, #8]
 8019476:	6860      	ldr	r0, [r4, #4]
 8019478:	f002 fdb0 	bl	801bfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801947c:	8020      	strh	r0, [r4, #0]
 801947e:	b9c8      	cbnz	r0, 80194b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8019480:	8b22      	ldrh	r2, [r4, #24]
 8019482:	2300      	movs	r3, #0
 8019484:	4611      	mov	r1, r2
 8019486:	4620      	mov	r0, r4
 8019488:	f7ff ffb2 	bl	80193f0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801948c:	e066      	b.n	801955c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801948e:	468b      	mov	fp, r1
 8019490:	e7cf      	b.n	8019432 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8019492:	3b01      	subs	r3, #1
 8019494:	2a01      	cmp	r2, #1
 8019496:	9103      	str	r1, [sp, #12]
 8019498:	468b      	mov	fp, r1
 801949a:	bf8c      	ite	hi
 801949c:	2200      	movhi	r2, #0
 801949e:	2201      	movls	r2, #1
 80194a0:	2b01      	cmp	r3, #1
 80194a2:	9202      	str	r2, [sp, #8]
 80194a4:	bf8c      	ite	hi
 80194a6:	2300      	movhi	r3, #0
 80194a8:	2301      	movls	r3, #1
 80194aa:	9301      	str	r3, [sp, #4]
 80194ac:	e7c8      	b.n	8019440 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80194ae:	4699      	mov	r9, r3
 80194b0:	2601      	movs	r6, #1
 80194b2:	e7dd      	b.n	8019470 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80194b4:	8ae3      	ldrh	r3, [r4, #22]
 80194b6:	280a      	cmp	r0, #10
 80194b8:	f103 0301 	add.w	r3, r3, #1
 80194bc:	82e3      	strh	r3, [r4, #22]
 80194be:	d0df      	beq.n	8019480 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80194c0:	9a05      	ldr	r2, [sp, #20]
 80194c2:	bb42      	cbnz	r2, 8019516 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80194c4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80194c8:	4298      	cmp	r0, r3
 80194ca:	d001      	beq.n	80194d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80194cc:	4550      	cmp	r0, sl
 80194ce:	d1bd      	bne.n	801944c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80194d0:	8823      	ldrh	r3, [r4, #0]
 80194d2:	8b21      	ldrh	r1, [r4, #24]
 80194d4:	2b20      	cmp	r3, #32
 80194d6:	d001      	beq.n	80194dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80194d8:	4553      	cmp	r3, sl
 80194da:	d131      	bne.n	8019540 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 80194dc:	2e00      	cmp	r6, #0
 80194de:	bf0a      	itet	eq
 80194e0:	460d      	moveq	r5, r1
 80194e2:	4630      	movne	r0, r6
 80194e4:	2001      	moveq	r0, #1
 80194e6:	440a      	add	r2, r1
 80194e8:	8aa3      	ldrh	r3, [r4, #20]
 80194ea:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80194ee:	b292      	uxth	r2, r2
 80194f0:	8322      	strh	r2, [r4, #24]
 80194f2:	4413      	add	r3, r2
 80194f4:	2f00      	cmp	r7, #0
 80194f6:	d03a      	beq.n	801956e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80194f8:	f1bb 0f00 	cmp.w	fp, #0
 80194fc:	d102      	bne.n	8019504 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80194fe:	9903      	ldr	r1, [sp, #12]
 8019500:	b301      	cbz	r1, 8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019502:	b1f8      	cbz	r0, 8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019504:	8ba1      	ldrh	r1, [r4, #28]
 8019506:	4419      	add	r1, r3
 8019508:	458c      	cmp	ip, r1
 801950a:	da2a      	bge.n	8019562 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801950c:	8a61      	ldrh	r1, [r4, #18]
 801950e:	b341      	cbz	r1, 8019562 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019510:	4563      	cmp	r3, ip
 8019512:	dd9b      	ble.n	801944c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019514:	e01c      	b.n	8019550 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8019516:	8893      	ldrh	r3, [r2, #4]
 8019518:	4649      	mov	r1, r9
 801951a:	8023      	strh	r3, [r4, #0]
 801951c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8019520:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8019524:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8019528:	f892 800a 	ldrb.w	r8, [r2, #10]
 801952c:	ea48 0800 	orr.w	r8, r8, r0
 8019530:	68e0      	ldr	r0, [r4, #12]
 8019532:	6803      	ldr	r3, [r0, #0]
 8019534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019536:	4798      	blx	r3
 8019538:	eb08 0200 	add.w	r2, r8, r0
 801953c:	b292      	uxth	r2, r2
 801953e:	e7c7      	b.n	80194d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019540:	2000      	movs	r0, #0
 8019542:	e7d0      	b.n	80194e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8019544:	4563      	cmp	r3, ip
 8019546:	dd81      	ble.n	801944c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019548:	8a63      	ldrh	r3, [r4, #18]
 801954a:	2b00      	cmp	r3, #0
 801954c:	f43f af7e 	beq.w	801944c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019550:	2301      	movs	r3, #1
 8019552:	8ba2      	ldrh	r2, [r4, #28]
 8019554:	77a3      	strb	r3, [r4, #30]
 8019556:	8b63      	ldrh	r3, [r4, #26]
 8019558:	4413      	add	r3, r2
 801955a:	8363      	strh	r3, [r4, #26]
 801955c:	b007      	add	sp, #28
 801955e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019562:	2300      	movs	r3, #0
 8019564:	4611      	mov	r1, r2
 8019566:	4620      	mov	r0, r4
 8019568:	f7ff ff42 	bl	80193f0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801956c:	e76e      	b.n	801944c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801956e:	4563      	cmp	r3, ip
 8019570:	dd14      	ble.n	801959c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8019572:	9b02      	ldr	r3, [sp, #8]
 8019574:	b113      	cbz	r3, 801957c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8019576:	2301      	movs	r3, #1
 8019578:	460a      	mov	r2, r1
 801957a:	e783      	b.n	8019484 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801957c:	9b01      	ldr	r3, [sp, #4]
 801957e:	2b00      	cmp	r3, #0
 8019580:	f43f af64 	beq.w	801944c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019584:	2800      	cmp	r0, #0
 8019586:	f47f af61 	bne.w	801944c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801958a:	b116      	cbz	r6, 8019592 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801958c:	2301      	movs	r3, #1
 801958e:	462a      	mov	r2, r5
 8019590:	e779      	b.n	8019486 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8019592:	8a63      	ldrh	r3, [r4, #18]
 8019594:	2b00      	cmp	r3, #0
 8019596:	f43f af59 	beq.w	801944c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801959a:	e7df      	b.n	801955c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801959c:	2800      	cmp	r0, #0
 801959e:	f47f af55 	bne.w	801944c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80195a2:	2e00      	cmp	r6, #0
 80195a4:	f43f af52 	beq.w	801944c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80195a8:	2301      	movs	r3, #1
 80195aa:	462a      	mov	r2, r5
 80195ac:	e7db      	b.n	8019566 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080195ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80195ae:	b530      	push	{r4, r5, lr}
 80195b0:	4605      	mov	r5, r0
 80195b2:	b08b      	sub	sp, #44	; 0x2c
 80195b4:	b191      	cbz	r1, 80195dc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80195b6:	2401      	movs	r4, #1
 80195b8:	e9cd 3100 	strd	r3, r1, [sp]
 80195bc:	4613      	mov	r3, r2
 80195be:	4601      	mov	r1, r0
 80195c0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80195c4:	a802      	add	r0, sp, #8
 80195c6:	f7ff fd0b 	bl	8018fe0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80195ca:	2100      	movs	r1, #0
 80195cc:	a802      	add	r0, sp, #8
 80195ce:	f7ff ff1f 	bl	8019410 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80195d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80195d6:	b163      	cbz	r3, 80195f2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80195d8:	3401      	adds	r4, #1
 80195da:	e7f6      	b.n	80195ca <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 80195dc:	2401      	movs	r4, #1
 80195de:	f002 fdf5 	bl	801c1cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80195e2:	280a      	cmp	r0, #10
 80195e4:	4628      	mov	r0, r5
 80195e6:	bf08      	it	eq
 80195e8:	3401      	addeq	r4, #1
 80195ea:	f002 fdef 	bl	801c1cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80195ee:	2800      	cmp	r0, #0
 80195f0:	d1f7      	bne.n	80195e2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80195f2:	b2a0      	uxth	r0, r4
 80195f4:	b00b      	add	sp, #44	; 0x2c
 80195f6:	bd30      	pop	{r4, r5, pc}

080195f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80195f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195fc:	b0db      	sub	sp, #364	; 0x16c
 80195fe:	4689      	mov	r9, r1
 8019600:	461c      	mov	r4, r3
 8019602:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8019606:	900a      	str	r0, [sp, #40]	; 0x28
 8019608:	f1ba 0f00 	cmp.w	sl, #0
 801960c:	f000 80a5 	beq.w	801975a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	2b00      	cmp	r3, #0
 8019614:	f000 80a1 	beq.w	801975a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019618:	7ba3      	ldrb	r3, [r4, #14]
 801961a:	2b00      	cmp	r3, #0
 801961c:	f000 809d 	beq.w	801975a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019620:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8019624:	6810      	ldr	r0, [r2, #0]
 8019626:	6851      	ldr	r1, [r2, #4]
 8019628:	2500      	movs	r5, #0
 801962a:	4643      	mov	r3, r8
 801962c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8019630:	950e      	str	r5, [sp, #56]	; 0x38
 8019632:	af18      	add	r7, sp, #96	; 0x60
 8019634:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019638:	79a2      	ldrb	r2, [r4, #6]
 801963a:	c303      	stmia	r3!, {r0, r1}
 801963c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8019640:	a90e      	add	r1, sp, #56	; 0x38
 8019642:	4640      	mov	r0, r8
 8019644:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019648:	f7ff fd40 	bl	80190cc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801964c:	a90e      	add	r1, sp, #56	; 0x38
 801964e:	79a2      	ldrb	r2, [r4, #6]
 8019650:	4608      	mov	r0, r1
 8019652:	f7ff fd3b 	bl	80190cc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019656:	4638      	mov	r0, r7
 8019658:	f002 f981 	bl	801b95e <_ZN8touchgfx12TextProviderC1Ev>
 801965c:	6820      	ldr	r0, [r4, #0]
 801965e:	6803      	ldr	r3, [r0, #0]
 8019660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019662:	4798      	blx	r3
 8019664:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019666:	4603      	mov	r3, r0
 8019668:	4651      	mov	r1, sl
 801966a:	4638      	mov	r0, r7
 801966c:	f002 f9bc 	bl	801b9e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019670:	7923      	ldrb	r3, [r4, #4]
 8019672:	6820      	ldr	r0, [r4, #0]
 8019674:	9308      	str	r3, [sp, #32]
 8019676:	6803      	ldr	r3, [r0, #0]
 8019678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801967a:	4798      	blx	r3
 801967c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019680:	181e      	adds	r6, r3, r0
 8019682:	42ae      	cmp	r6, r5
 8019684:	dd06      	ble.n	8019694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8019686:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801968a:	4282      	cmp	r2, r0
 801968c:	bfa4      	itt	ge
 801968e:	189d      	addge	r5, r3, r2
 8019690:	fb95 f5f6 	sdivge	r5, r5, r6
 8019694:	a82e      	add	r0, sp, #184	; 0xb8
 8019696:	f002 f962 	bl	801b95e <_ZN8touchgfx12TextProviderC1Ev>
 801969a:	7c23      	ldrb	r3, [r4, #16]
 801969c:	b14b      	cbz	r3, 80196b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 801969e:	6820      	ldr	r0, [r4, #0]
 80196a0:	6803      	ldr	r3, [r0, #0]
 80196a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196a4:	4798      	blx	r3
 80196a6:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80196a8:	4603      	mov	r3, r0
 80196aa:	4651      	mov	r1, sl
 80196ac:	a82e      	add	r0, sp, #184	; 0xb8
 80196ae:	f002 f99b 	bl	801b9e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80196b2:	7c21      	ldrb	r1, [r4, #16]
 80196b4:	a810      	add	r0, sp, #64	; 0x40
 80196b6:	7963      	ldrb	r3, [r4, #5]
 80196b8:	9101      	str	r1, [sp, #4]
 80196ba:	6821      	ldr	r1, [r4, #0]
 80196bc:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80196c0:	9100      	str	r1, [sp, #0]
 80196c2:	a92e      	add	r1, sp, #184	; 0xb8
 80196c4:	f7ff fc8c 	bl	8018fe0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80196c8:	7c23      	ldrb	r3, [r4, #16]
 80196ca:	b9bb      	cbnz	r3, 80196fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 80196cc:	fa1f fa86 	uxth.w	sl, r6
 80196d0:	2d00      	cmp	r5, #0
 80196d2:	dd45      	ble.n	8019760 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 80196d4:	4638      	mov	r0, r7
 80196d6:	f002 fd79 	bl	801c1cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80196da:	2800      	cmp	r0, #0
 80196dc:	d03d      	beq.n	801975a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80196de:	280a      	cmp	r0, #10
 80196e0:	d1f6      	bne.n	80196d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 80196e2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80196e6:	3d01      	subs	r5, #1
 80196e8:	4453      	add	r3, sl
 80196ea:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80196ee:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80196f2:	eba3 030a 	sub.w	r3, r3, sl
 80196f6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80196fa:	e7e9      	b.n	80196d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 80196fc:	0073      	lsls	r3, r6, #1
 80196fe:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8019702:	fa1f fa86 	uxth.w	sl, r6
 8019706:	9309      	str	r3, [sp, #36]	; 0x24
 8019708:	2d00      	cmp	r5, #0
 801970a:	dd29      	ble.n	8019760 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801970c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019710:	a810      	add	r0, sp, #64	; 0x40
 8019712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019714:	428b      	cmp	r3, r1
 8019716:	bfd4      	ite	le
 8019718:	2100      	movle	r1, #0
 801971a:	2101      	movgt	r1, #1
 801971c:	f7ff fe78 	bl	8019410 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019720:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8019724:	3b01      	subs	r3, #1
 8019726:	b29b      	uxth	r3, r3
 8019728:	455b      	cmp	r3, fp
 801972a:	930b      	str	r3, [sp, #44]	; 0x2c
 801972c:	d005      	beq.n	801973a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801972e:	7961      	ldrb	r1, [r4, #5]
 8019730:	4638      	mov	r0, r7
 8019732:	f7fa fc43 	bl	8013fbc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019738:	e7f4      	b.n	8019724 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 801973a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801973e:	3d01      	subs	r5, #1
 8019740:	4453      	add	r3, sl
 8019742:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019746:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801974a:	eba3 030a 	sub.w	r3, r3, sl
 801974e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019752:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019756:	2b00      	cmp	r3, #0
 8019758:	d1d6      	bne.n	8019708 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 801975a:	b05b      	add	sp, #364	; 0x16c
 801975c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019760:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8019764:	ad44      	add	r5, sp, #272	; 0x110
 8019766:	f04f 0b00 	mov.w	fp, #0
 801976a:	7c23      	ldrb	r3, [r4, #16]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d067      	beq.n	8019840 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8019770:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019774:	a810      	add	r0, sp, #64	; 0x40
 8019776:	458a      	cmp	sl, r1
 8019778:	bfd4      	ite	le
 801977a:	2100      	movle	r1, #0
 801977c:	2101      	movgt	r1, #1
 801977e:	f7ff fe47 	bl	8019410 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019782:	9b08      	ldr	r3, [sp, #32]
 8019784:	2b00      	cmp	r3, #0
 8019786:	d056      	beq.n	8019836 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019788:	7c23      	ldrb	r3, [r4, #16]
 801978a:	2258      	movs	r2, #88	; 0x58
 801978c:	4639      	mov	r1, r7
 801978e:	4628      	mov	r0, r5
 8019790:	9309      	str	r3, [sp, #36]	; 0x24
 8019792:	f00f f8f1 	bl	8028978 <memcpy>
 8019796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019798:	2b00      	cmp	r3, #0
 801979a:	d059      	beq.n	8019850 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801979c:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80197a0:	7922      	ldrb	r2, [r4, #4]
 80197a2:	2a01      	cmp	r2, #1
 80197a4:	d13d      	bne.n	8019822 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 80197a6:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80197aa:	1ac0      	subs	r0, r0, r3
 80197ac:	2302      	movs	r3, #2
 80197ae:	fb90 f0f3 	sdiv	r0, r0, r3
 80197b2:	b200      	sxth	r0, r0
 80197b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80197b8:	4418      	add	r0, r3
 80197ba:	7c23      	ldrb	r3, [r4, #16]
 80197bc:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d03a      	beq.n	801983a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80197c4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80197c8:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 80197cc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80197d0:	9500      	str	r5, [sp, #0]
 80197d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80197d4:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80197d8:	e9cd b703 	strd	fp, r7, [sp, #12]
 80197dc:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80197e0:	464a      	mov	r2, r9
 80197e2:	2100      	movs	r1, #0
 80197e4:	f7ff fca3 	bl	801912e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80197e8:	2800      	cmp	r0, #0
 80197ea:	d1b6      	bne.n	801975a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80197ec:	b2b2      	uxth	r2, r6
 80197ee:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80197f2:	4611      	mov	r1, r2
 80197f4:	4413      	add	r3, r2
 80197f6:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80197fa:	b21b      	sxth	r3, r3
 80197fc:	1a52      	subs	r2, r2, r1
 80197fe:	7c21      	ldrb	r1, [r4, #16]
 8019800:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019804:	b212      	sxth	r2, r2
 8019806:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801980a:	b109      	cbz	r1, 8019810 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801980c:	42b2      	cmp	r2, r6
 801980e:	dba4      	blt.n	801975a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019810:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8019814:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8019818:	440a      	add	r2, r1
 801981a:	b212      	sxth	r2, r2
 801981c:	4293      	cmp	r3, r2
 801981e:	dda4      	ble.n	801976a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8019820:	e79b      	b.n	801975a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019822:	2a02      	cmp	r2, #2
 8019824:	d105      	bne.n	8019832 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8019826:	7be2      	ldrb	r2, [r4, #15]
 8019828:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801982c:	1a80      	subs	r0, r0, r2
 801982e:	1ac0      	subs	r0, r0, r3
 8019830:	e7bf      	b.n	80197b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8019832:	2000      	movs	r0, #0
 8019834:	e7be      	b.n	80197b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8019836:	7be0      	ldrb	r0, [r4, #15]
 8019838:	e7bc      	b.n	80197b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801983a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801983e:	e7c3      	b.n	80197c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8019840:	9b08      	ldr	r3, [sp, #32]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d0f7      	beq.n	8019836 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019846:	2258      	movs	r2, #88	; 0x58
 8019848:	4639      	mov	r1, r7
 801984a:	4628      	mov	r0, r5
 801984c:	f00f f894 	bl	8028978 <memcpy>
 8019850:	2300      	movs	r3, #0
 8019852:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019856:	6821      	ldr	r1, [r4, #0]
 8019858:	4628      	mov	r0, r5
 801985a:	f7ff fbfb 	bl	8019054 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801985e:	b203      	sxth	r3, r0
 8019860:	e79e      	b.n	80197a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08019862 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019862:	2b02      	cmp	r3, #2
 8019864:	b510      	push	{r4, lr}
 8019866:	f9b0 4000 	ldrsh.w	r4, [r0]
 801986a:	d00b      	beq.n	8019884 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801986c:	2b03      	cmp	r3, #3
 801986e:	d00e      	beq.n	801988e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8019870:	2b01      	cmp	r3, #1
 8019872:	d001      	beq.n	8019878 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8019874:	1860      	adds	r0, r4, r1
 8019876:	bd10      	pop	{r4, pc}
 8019878:	8880      	ldrh	r0, [r0, #4]
 801987a:	4420      	add	r0, r4
 801987c:	b200      	sxth	r0, r0
 801987e:	1a80      	subs	r0, r0, r2
 8019880:	3801      	subs	r0, #1
 8019882:	e7f8      	b.n	8019876 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8019884:	8880      	ldrh	r0, [r0, #4]
 8019886:	4420      	add	r0, r4
 8019888:	b200      	sxth	r0, r0
 801988a:	1a40      	subs	r0, r0, r1
 801988c:	e7f8      	b.n	8019880 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801988e:	18a0      	adds	r0, r4, r2
 8019890:	e7f1      	b.n	8019876 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08019892 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019892:	2b02      	cmp	r3, #2
 8019894:	b510      	push	{r4, lr}
 8019896:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801989a:	d006      	beq.n	80198aa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801989c:	2b03      	cmp	r3, #3
 801989e:	d00a      	beq.n	80198b6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80198a0:	2b01      	cmp	r3, #1
 80198a2:	bf14      	ite	ne
 80198a4:	18a0      	addne	r0, r4, r2
 80198a6:	1860      	addeq	r0, r4, r1
 80198a8:	bd10      	pop	{r4, pc}
 80198aa:	88c0      	ldrh	r0, [r0, #6]
 80198ac:	4420      	add	r0, r4
 80198ae:	b200      	sxth	r0, r0
 80198b0:	1a80      	subs	r0, r0, r2
 80198b2:	3801      	subs	r0, #1
 80198b4:	e7f8      	b.n	80198a8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80198b6:	88c0      	ldrh	r0, [r0, #6]
 80198b8:	4420      	add	r0, r4
 80198ba:	b200      	sxth	r0, r0
 80198bc:	1a40      	subs	r0, r0, r1
 80198be:	e7f8      	b.n	80198b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

080198c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80198c0:	4b01      	ldr	r3, [pc, #4]	; (80198c8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80198c2:	2200      	movs	r2, #0
 80198c4:	601a      	str	r2, [r3, #0]
 80198c6:	4770      	bx	lr
 80198c8:	200057e8 	.word	0x200057e8

080198cc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80198cc:	4603      	mov	r3, r0
 80198ce:	b1c8      	cbz	r0, 8019904 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80198d0:	0c02      	lsrs	r2, r0, #16
 80198d2:	0412      	lsls	r2, r2, #16
 80198d4:	b9a2      	cbnz	r2, 8019900 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80198d6:	0403      	lsls	r3, r0, #16
 80198d8:	2010      	movs	r0, #16
 80198da:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80198de:	bf04      	itt	eq
 80198e0:	021b      	lsleq	r3, r3, #8
 80198e2:	3008      	addeq	r0, #8
 80198e4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80198e8:	bf04      	itt	eq
 80198ea:	011b      	lsleq	r3, r3, #4
 80198ec:	3004      	addeq	r0, #4
 80198ee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80198f2:	bf04      	itt	eq
 80198f4:	009b      	lsleq	r3, r3, #2
 80198f6:	3002      	addeq	r0, #2
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	db04      	blt.n	8019906 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80198fc:	3001      	adds	r0, #1
 80198fe:	4770      	bx	lr
 8019900:	2000      	movs	r0, #0
 8019902:	e7ea      	b.n	80198da <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8019904:	2020      	movs	r0, #32
 8019906:	4770      	bx	lr

08019908 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801990c:	b087      	sub	sp, #28
 801990e:	4681      	mov	r9, r0
 8019910:	4698      	mov	r8, r3
 8019912:	4610      	mov	r0, r2
 8019914:	460d      	mov	r5, r1
 8019916:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801991a:	b981      	cbnz	r1, 801993e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801991c:	b14b      	cbz	r3, 8019932 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801991e:	460b      	mov	r3, r1
 8019920:	464a      	mov	r2, r9
 8019922:	4641      	mov	r1, r8
 8019924:	e9cd 4700 	strd	r4, r7, [sp]
 8019928:	f7ff ffee 	bl	8019908 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801992c:	b007      	add	sp, #28
 801992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019932:	f04f 33ff 	mov.w	r3, #4294967295
 8019936:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801993a:	603b      	str	r3, [r7, #0]
 801993c:	e7f6      	b.n	801992c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801993e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8019942:	d107      	bne.n	8019954 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8019944:	fb09 f602 	mul.w	r6, r9, r2
 8019948:	fbb6 f0f4 	udiv	r0, r6, r4
 801994c:	fb04 6610 	mls	r6, r4, r0, r6
 8019950:	603e      	str	r6, [r7, #0]
 8019952:	e7eb      	b.n	801992c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019954:	2601      	movs	r6, #1
 8019956:	fa09 fb01 	lsl.w	fp, r9, r1
 801995a:	408e      	lsls	r6, r1
 801995c:	fbbb f3f4 	udiv	r3, fp, r4
 8019960:	3e01      	subs	r6, #1
 8019962:	9302      	str	r3, [sp, #8]
 8019964:	fb0a f303 	mul.w	r3, sl, r3
 8019968:	4016      	ands	r6, r2
 801996a:	9303      	str	r3, [sp, #12]
 801996c:	4630      	mov	r0, r6
 801996e:	f7ff ffad 	bl	80198cc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019972:	464a      	mov	r2, r9
 8019974:	460b      	mov	r3, r1
 8019976:	4601      	mov	r1, r0
 8019978:	4630      	mov	r0, r6
 801997a:	e9cd 4700 	strd	r4, r7, [sp]
 801997e:	f7ff ffc3 	bl	8019908 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019982:	9b02      	ldr	r3, [sp, #8]
 8019984:	4606      	mov	r6, r0
 8019986:	eb05 0108 	add.w	r1, r5, r8
 801998a:	fb04 bb13 	mls	fp, r4, r3, fp
 801998e:	4658      	mov	r0, fp
 8019990:	f7ff ff9c 	bl	80198cc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019994:	ab05      	add	r3, sp, #20
 8019996:	465a      	mov	r2, fp
 8019998:	e9cd 4300 	strd	r4, r3, [sp]
 801999c:	4603      	mov	r3, r0
 801999e:	4650      	mov	r0, sl
 80199a0:	f7ff ffb2 	bl	8019908 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80199a4:	6839      	ldr	r1, [r7, #0]
 80199a6:	9a05      	ldr	r2, [sp, #20]
 80199a8:	9b03      	ldr	r3, [sp, #12]
 80199aa:	4411      	add	r1, r2
 80199ac:	fbb1 f2f4 	udiv	r2, r1, r4
 80199b0:	18d3      	adds	r3, r2, r3
 80199b2:	fb04 1412 	mls	r4, r4, r2, r1
 80199b6:	441e      	add	r6, r3
 80199b8:	603c      	str	r4, [r7, #0]
 80199ba:	4430      	add	r0, r6
 80199bc:	e7b6      	b.n	801992c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080199be <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80199be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199c2:	b085      	sub	sp, #20
 80199c4:	f1b0 0900 	subs.w	r9, r0, #0
 80199c8:	461d      	mov	r5, r3
 80199ca:	4617      	mov	r7, r2
 80199cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80199ce:	bfbb      	ittet	lt
 80199d0:	f1c9 0900 	rsblt	r9, r9, #0
 80199d4:	f04f 36ff 	movlt.w	r6, #4294967295
 80199d8:	2601      	movge	r6, #1
 80199da:	6823      	ldrlt	r3, [r4, #0]
 80199dc:	bfbc      	itt	lt
 80199de:	425b      	neglt	r3, r3
 80199e0:	6023      	strlt	r3, [r4, #0]
 80199e2:	2a00      	cmp	r2, #0
 80199e4:	da04      	bge.n	80199f0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80199e6:	6823      	ldr	r3, [r4, #0]
 80199e8:	4257      	negs	r7, r2
 80199ea:	4276      	negs	r6, r6
 80199ec:	425b      	negs	r3, r3
 80199ee:	6023      	str	r3, [r4, #0]
 80199f0:	2d00      	cmp	r5, #0
 80199f2:	4638      	mov	r0, r7
 80199f4:	bfba      	itte	lt
 80199f6:	426d      	neglt	r5, r5
 80199f8:	f04f 38ff 	movlt.w	r8, #4294967295
 80199fc:	f04f 0801 	movge.w	r8, #1
 8019a00:	f7ff ff64 	bl	80198cc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019a04:	ab03      	add	r3, sp, #12
 8019a06:	463a      	mov	r2, r7
 8019a08:	e9cd 5300 	strd	r5, r3, [sp]
 8019a0c:	4603      	mov	r3, r0
 8019a0e:	4648      	mov	r0, r9
 8019a10:	f7ff ff7a 	bl	8019908 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019a14:	6823      	ldr	r3, [r4, #0]
 8019a16:	9a03      	ldr	r2, [sp, #12]
 8019a18:	4546      	cmp	r6, r8
 8019a1a:	441a      	add	r2, r3
 8019a1c:	fb92 f3f5 	sdiv	r3, r2, r5
 8019a20:	4418      	add	r0, r3
 8019a22:	fb05 2313 	mls	r3, r5, r3, r2
 8019a26:	bf18      	it	ne
 8019a28:	4240      	negne	r0, r0
 8019a2a:	1c72      	adds	r2, r6, #1
 8019a2c:	6023      	str	r3, [r4, #0]
 8019a2e:	d105      	bne.n	8019a3c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	f1c3 0200 	rsb	r2, r3, #0
 8019a36:	db0b      	blt.n	8019a50 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8019a38:	6022      	str	r2, [r4, #0]
 8019a3a:	e006      	b.n	8019a4a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019a3c:	2e01      	cmp	r6, #1
 8019a3e:	d104      	bne.n	8019a4a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	da02      	bge.n	8019a4a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019a44:	442b      	add	r3, r5
 8019a46:	3801      	subs	r0, #1
 8019a48:	6023      	str	r3, [r4, #0]
 8019a4a:	b005      	add	sp, #20
 8019a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a50:	3801      	subs	r0, #1
 8019a52:	1b52      	subs	r2, r2, r5
 8019a54:	e7f0      	b.n	8019a38 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08019a58 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019a58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019a5c:	4c1c      	ldr	r4, [pc, #112]	; (8019ad0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8019a5e:	4605      	mov	r5, r0
 8019a60:	6807      	ldr	r7, [r0, #0]
 8019a62:	69a3      	ldr	r3, [r4, #24]
 8019a64:	b92b      	cbnz	r3, 8019a72 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8019a66:	6840      	ldr	r0, [r0, #4]
 8019a68:	e9c5 7000 	strd	r7, r0, [r5]
 8019a6c:	b004      	add	sp, #16
 8019a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a72:	f04f 0802 	mov.w	r8, #2
 8019a76:	68a2      	ldr	r2, [r4, #8]
 8019a78:	ae04      	add	r6, sp, #16
 8019a7a:	6820      	ldr	r0, [r4, #0]
 8019a7c:	fb93 f1f8 	sdiv	r1, r3, r8
 8019a80:	440a      	add	r2, r1
 8019a82:	69e1      	ldr	r1, [r4, #28]
 8019a84:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019a88:	463a      	mov	r2, r7
 8019a8a:	9600      	str	r6, [sp, #0]
 8019a8c:	f7ff ff97 	bl	80199be <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019a90:	69a3      	ldr	r3, [r4, #24]
 8019a92:	4607      	mov	r7, r0
 8019a94:	686a      	ldr	r2, [r5, #4]
 8019a96:	6a21      	ldr	r1, [r4, #32]
 8019a98:	9600      	str	r6, [sp, #0]
 8019a9a:	6860      	ldr	r0, [r4, #4]
 8019a9c:	f7ff ff8f 	bl	80199be <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019aa0:	69a3      	ldr	r3, [r4, #24]
 8019aa2:	6962      	ldr	r2, [r4, #20]
 8019aa4:	4407      	add	r7, r0
 8019aa6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019aa8:	9600      	str	r6, [sp, #0]
 8019aaa:	68e0      	ldr	r0, [r4, #12]
 8019aac:	fb93 f8f8 	sdiv	r8, r3, r8
 8019ab0:	4442      	add	r2, r8
 8019ab2:	9203      	str	r2, [sp, #12]
 8019ab4:	682a      	ldr	r2, [r5, #0]
 8019ab6:	f7ff ff82 	bl	80199be <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019aba:	4680      	mov	r8, r0
 8019abc:	9600      	str	r6, [sp, #0]
 8019abe:	69a3      	ldr	r3, [r4, #24]
 8019ac0:	686a      	ldr	r2, [r5, #4]
 8019ac2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019ac4:	6920      	ldr	r0, [r4, #16]
 8019ac6:	f7ff ff7a 	bl	80199be <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019aca:	4440      	add	r0, r8
 8019acc:	e7cc      	b.n	8019a68 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019ace:	bf00      	nop
 8019ad0:	200057ec 	.word	0x200057ec

08019ad4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019ad4:	4b07      	ldr	r3, [pc, #28]	; (8019af4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019ad6:	b510      	push	{r4, lr}
 8019ad8:	781b      	ldrb	r3, [r3, #0]
 8019ada:	2b01      	cmp	r3, #1
 8019adc:	d108      	bne.n	8019af0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019ade:	4b06      	ldr	r3, [pc, #24]	; (8019af8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019ae0:	880c      	ldrh	r4, [r1, #0]
 8019ae2:	881b      	ldrh	r3, [r3, #0]
 8019ae4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019ae8:	3b01      	subs	r3, #1
 8019aea:	1b1b      	subs	r3, r3, r4
 8019aec:	8003      	strh	r3, [r0, #0]
 8019aee:	800a      	strh	r2, [r1, #0]
 8019af0:	bd10      	pop	{r4, pc}
 8019af2:	bf00      	nop
 8019af4:	200057d8 	.word	0x200057d8
 8019af8:	200057dc 	.word	0x200057dc

08019afc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019afc:	4b0a      	ldr	r3, [pc, #40]	; (8019b28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019afe:	b510      	push	{r4, lr}
 8019b00:	781b      	ldrb	r3, [r3, #0]
 8019b02:	2b01      	cmp	r3, #1
 8019b04:	d10e      	bne.n	8019b24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019b06:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019b0a:	8843      	ldrh	r3, [r0, #2]
 8019b0c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019b10:	18ca      	adds	r2, r1, r3
 8019b12:	4b06      	ldr	r3, [pc, #24]	; (8019b2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019b14:	8044      	strh	r4, [r0, #2]
 8019b16:	881b      	ldrh	r3, [r3, #0]
 8019b18:	1a9b      	subs	r3, r3, r2
 8019b1a:	8003      	strh	r3, [r0, #0]
 8019b1c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019b20:	8081      	strh	r1, [r0, #4]
 8019b22:	80c3      	strh	r3, [r0, #6]
 8019b24:	bd10      	pop	{r4, pc}
 8019b26:	bf00      	nop
 8019b28:	200057d8 	.word	0x200057d8
 8019b2c:	200057d4 	.word	0x200057d4

08019b30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019b30:	4b07      	ldr	r3, [pc, #28]	; (8019b50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019b32:	b510      	push	{r4, lr}
 8019b34:	781b      	ldrb	r3, [r3, #0]
 8019b36:	2b01      	cmp	r3, #1
 8019b38:	d108      	bne.n	8019b4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019b3a:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019b3e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019b42:	8003      	strh	r3, [r0, #0]
 8019b44:	8893      	ldrh	r3, [r2, #4]
 8019b46:	3b01      	subs	r3, #1
 8019b48:	1b1b      	subs	r3, r3, r4
 8019b4a:	800b      	strh	r3, [r1, #0]
 8019b4c:	bd10      	pop	{r4, pc}
 8019b4e:	bf00      	nop
 8019b50:	200057d8 	.word	0x200057d8

08019b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019b54:	4b08      	ldr	r3, [pc, #32]	; (8019b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019b56:	b513      	push	{r0, r1, r4, lr}
 8019b58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019b5c:	2400      	movs	r4, #0
 8019b5e:	4b07      	ldr	r3, [pc, #28]	; (8019b7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8019b60:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019b64:	466a      	mov	r2, sp
 8019b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b6a:	9400      	str	r4, [sp, #0]
 8019b6c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019b70:	f7ff ffde 	bl	8019b30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019b74:	b002      	add	sp, #8
 8019b76:	bd10      	pop	{r4, pc}
 8019b78:	200057d4 	.word	0x200057d4
 8019b7c:	200057d6 	.word	0x200057d6

08019b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019b80:	4b0a      	ldr	r3, [pc, #40]	; (8019bac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019b82:	460a      	mov	r2, r1
 8019b84:	b510      	push	{r4, lr}
 8019b86:	781b      	ldrb	r3, [r3, #0]
 8019b88:	2b01      	cmp	r3, #1
 8019b8a:	d10d      	bne.n	8019ba8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019b8c:	8881      	ldrh	r1, [r0, #4]
 8019b8e:	8803      	ldrh	r3, [r0, #0]
 8019b90:	440b      	add	r3, r1
 8019b92:	4601      	mov	r1, r0
 8019b94:	3b01      	subs	r3, #1
 8019b96:	f821 3b02 	strh.w	r3, [r1], #2
 8019b9a:	f7ff ffc9 	bl	8019b30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019b9e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019ba2:	88c2      	ldrh	r2, [r0, #6]
 8019ba4:	80c3      	strh	r3, [r0, #6]
 8019ba6:	8082      	strh	r2, [r0, #4]
 8019ba8:	bd10      	pop	{r4, pc}
 8019baa:	bf00      	nop
 8019bac:	200057d8 	.word	0x200057d8

08019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019bb0:	4b09      	ldr	r3, [pc, #36]	; (8019bd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019bb2:	b507      	push	{r0, r1, r2, lr}
 8019bb4:	2100      	movs	r1, #0
 8019bb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019bba:	4b08      	ldr	r3, [pc, #32]	; (8019bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8019bbc:	9100      	str	r1, [sp, #0]
 8019bbe:	4669      	mov	r1, sp
 8019bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bc4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019bc8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019bcc:	f7ff ffd8 	bl	8019b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019bd0:	b003      	add	sp, #12
 8019bd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8019bd6:	bf00      	nop
 8019bd8:	200057d4 	.word	0x200057d4
 8019bdc:	200057d6 	.word	0x200057d6

08019be0 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019be0:	4b06      	ldr	r3, [pc, #24]	; (8019bfc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8019be2:	2100      	movs	r1, #0
 8019be4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019be8:	4b05      	ldr	r3, [pc, #20]	; (8019c00 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019bea:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8019bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bf2:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8019bf6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8019bfa:	4770      	bx	lr
 8019bfc:	200057d4 	.word	0x200057d4
 8019c00:	200057d6 	.word	0x200057d6

08019c04 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019c04:	4b03      	ldr	r3, [pc, #12]	; (8019c14 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019c06:	6818      	ldr	r0, [r3, #0]
 8019c08:	b110      	cbz	r0, 8019c10 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019c0a:	6803      	ldr	r3, [r0, #0]
 8019c0c:	699b      	ldr	r3, [r3, #24]
 8019c0e:	4718      	bx	r3
 8019c10:	4770      	bx	lr
 8019c12:	bf00      	nop
 8019c14:	2000581c 	.word	0x2000581c

08019c18 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019c18:	4770      	bx	lr
	...

08019c1c <_ZN8touchgfx11Application4drawEv>:
 8019c1c:	4b09      	ldr	r3, [pc, #36]	; (8019c44 <_ZN8touchgfx11Application4drawEv+0x28>)
 8019c1e:	b507      	push	{r0, r1, r2, lr}
 8019c20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c24:	2100      	movs	r1, #0
 8019c26:	4b08      	ldr	r3, [pc, #32]	; (8019c48 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019c28:	9100      	str	r1, [sp, #0]
 8019c2a:	4669      	mov	r1, sp
 8019c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c30:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019c34:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019c38:	6803      	ldr	r3, [r0, #0]
 8019c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c3c:	4798      	blx	r3
 8019c3e:	b003      	add	sp, #12
 8019c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8019c44:	200057d4 	.word	0x200057d4
 8019c48:	200057d6 	.word	0x200057d6

08019c4c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019c4c:	4b03      	ldr	r3, [pc, #12]	; (8019c5c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019c4e:	6818      	ldr	r0, [r3, #0]
 8019c50:	b110      	cbz	r0, 8019c58 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019c52:	6803      	ldr	r3, [r0, #0]
 8019c54:	69db      	ldr	r3, [r3, #28]
 8019c56:	4718      	bx	r3
 8019c58:	4770      	bx	lr
 8019c5a:	bf00      	nop
 8019c5c:	2000581c 	.word	0x2000581c

08019c60 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019c60:	4b03      	ldr	r3, [pc, #12]	; (8019c70 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8019c62:	6818      	ldr	r0, [r3, #0]
 8019c64:	b110      	cbz	r0, 8019c6c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019c66:	6803      	ldr	r3, [r0, #0]
 8019c68:	6a1b      	ldr	r3, [r3, #32]
 8019c6a:	4718      	bx	r3
 8019c6c:	4770      	bx	lr
 8019c6e:	bf00      	nop
 8019c70:	2000581c 	.word	0x2000581c

08019c74 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019c74:	4b03      	ldr	r3, [pc, #12]	; (8019c84 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019c76:	6818      	ldr	r0, [r3, #0]
 8019c78:	b110      	cbz	r0, 8019c80 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019c7a:	6803      	ldr	r3, [r0, #0]
 8019c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c7e:	4718      	bx	r3
 8019c80:	4770      	bx	lr
 8019c82:	bf00      	nop
 8019c84:	2000581c 	.word	0x2000581c

08019c88 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019c88:	b570      	push	{r4, r5, r6, lr}
 8019c8a:	4d34      	ldr	r5, [pc, #208]	; (8019d5c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8019c8c:	4604      	mov	r4, r0
 8019c8e:	6828      	ldr	r0, [r5, #0]
 8019c90:	b140      	cbz	r0, 8019ca4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019c92:	7a03      	ldrb	r3, [r0, #8]
 8019c94:	b933      	cbnz	r3, 8019ca4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019c96:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8019c9a:	6803      	ldr	r3, [r0, #0]
 8019c9c:	689b      	ldr	r3, [r3, #8]
 8019c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ca2:	4718      	bx	r3
 8019ca4:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8019ca8:	b97b      	cbnz	r3, 8019cca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019caa:	b170      	cbz	r0, 8019cca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019cac:	7a03      	ldrb	r3, [r0, #8]
 8019cae:	b163      	cbz	r3, 8019cca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019cb0:	4b2b      	ldr	r3, [pc, #172]	; (8019d60 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8019cb2:	6818      	ldr	r0, [r3, #0]
 8019cb4:	b110      	cbz	r0, 8019cbc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8019cb6:	6803      	ldr	r3, [r0, #0]
 8019cb8:	691b      	ldr	r3, [r3, #16]
 8019cba:	4798      	blx	r3
 8019cbc:	6828      	ldr	r0, [r5, #0]
 8019cbe:	6803      	ldr	r3, [r0, #0]
 8019cc0:	68db      	ldr	r3, [r3, #12]
 8019cc2:	4798      	blx	r3
 8019cc4:	2301      	movs	r3, #1
 8019cc6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8019cca:	2500      	movs	r5, #0
 8019ccc:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8019cd0:	42a8      	cmp	r0, r5
 8019cd2:	dd0c      	ble.n	8019cee <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8019cd4:	1963      	adds	r3, r4, r5
 8019cd6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019cda:	b132      	cbz	r2, 8019cea <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8019cdc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8019ce0:	4413      	add	r3, r2
 8019ce2:	6858      	ldr	r0, [r3, #4]
 8019ce4:	6803      	ldr	r3, [r0, #0]
 8019ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019ce8:	4798      	blx	r3
 8019cea:	3501      	adds	r5, #1
 8019cec:	e7ee      	b.n	8019ccc <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019cee:	2300      	movs	r3, #0
 8019cf0:	461a      	mov	r2, r3
 8019cf2:	4298      	cmp	r0, r3
 8019cf4:	d114      	bne.n	8019d20 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8019cf6:	1d25      	adds	r5, r4, #4
 8019cf8:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8019cfc:	1e48      	subs	r0, r1, #1
 8019cfe:	b280      	uxth	r0, r0
 8019d00:	4291      	cmp	r1, r2
 8019d02:	dd24      	ble.n	8019d4e <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8019d04:	4288      	cmp	r0, r1
 8019d06:	d2fb      	bcs.n	8019d00 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8019d08:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8019d0c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8019d10:	3304      	adds	r3, #4
 8019d12:	428b      	cmp	r3, r1
 8019d14:	d018      	beq.n	8019d48 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8019d16:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8019d1a:	f843 6c04 	str.w	r6, [r3, #-4]
 8019d1e:	e7f8      	b.n	8019d12 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8019d20:	18e1      	adds	r1, r4, r3
 8019d22:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8019d26:	b16d      	cbz	r5, 8019d44 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8019d28:	429a      	cmp	r2, r3
 8019d2a:	d00a      	beq.n	8019d42 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8019d2c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8019d30:	4431      	add	r1, r6
 8019d32:	684e      	ldr	r6, [r1, #4]
 8019d34:	b291      	uxth	r1, r2
 8019d36:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019d3a:	604e      	str	r6, [r1, #4]
 8019d3c:	18a1      	adds	r1, r4, r2
 8019d3e:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8019d42:	3201      	adds	r2, #1
 8019d44:	3301      	adds	r3, #1
 8019d46:	e7d4      	b.n	8019cf2 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8019d48:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8019d4c:	e7d4      	b.n	8019cf8 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8019d4e:	4b04      	ldr	r3, [pc, #16]	; (8019d60 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8019d50:	6818      	ldr	r0, [r3, #0]
 8019d52:	b110      	cbz	r0, 8019d5a <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8019d54:	6803      	ldr	r3, [r0, #0]
 8019d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d58:	e7a1      	b.n	8019c9e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019d5a:	bd70      	pop	{r4, r5, r6, pc}
 8019d5c:	20005820 	.word	0x20005820
 8019d60:	2000581c 	.word	0x2000581c

08019d64 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019d64:	b570      	push	{r4, r5, r6, lr}
 8019d66:	4606      	mov	r6, r0
 8019d68:	460c      	mov	r4, r1
 8019d6a:	b929      	cbnz	r1, 8019d78 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8019d6c:	4b0c      	ldr	r3, [pc, #48]	; (8019da0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8019d6e:	2164      	movs	r1, #100	; 0x64
 8019d70:	4a0c      	ldr	r2, [pc, #48]	; (8019da4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8019d72:	480d      	ldr	r0, [pc, #52]	; (8019da8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8019d74:	f00e fc88 	bl	8028688 <__assert_func>
 8019d78:	2300      	movs	r3, #0
 8019d7a:	4d0c      	ldr	r5, [pc, #48]	; (8019dac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8019d7c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8019d80:	6828      	ldr	r0, [r5, #0]
 8019d82:	b110      	cbz	r0, 8019d8a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8019d84:	6803      	ldr	r3, [r0, #0]
 8019d86:	695b      	ldr	r3, [r3, #20]
 8019d88:	4798      	blx	r3
 8019d8a:	602c      	str	r4, [r5, #0]
 8019d8c:	4620      	mov	r0, r4
 8019d8e:	6823      	ldr	r3, [r4, #0]
 8019d90:	68db      	ldr	r3, [r3, #12]
 8019d92:	4798      	blx	r3
 8019d94:	6833      	ldr	r3, [r6, #0]
 8019d96:	4630      	mov	r0, r6
 8019d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d9e:	4718      	bx	r3
 8019da0:	0802c064 	.word	0x0802c064
 8019da4:	0802c15c 	.word	0x0802c15c
 8019da8:	0802c06e 	.word	0x0802c06e
 8019dac:	2000581c 	.word	0x2000581c

08019db0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019db0:	b510      	push	{r4, lr}
 8019db2:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019db6:	888a      	ldrh	r2, [r1, #4]
 8019db8:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019dbc:	4422      	add	r2, r4
 8019dbe:	b212      	sxth	r2, r2
 8019dc0:	4293      	cmp	r3, r2
 8019dc2:	da15      	bge.n	8019df0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019dc4:	8882      	ldrh	r2, [r0, #4]
 8019dc6:	4413      	add	r3, r2
 8019dc8:	b21b      	sxth	r3, r3
 8019dca:	429c      	cmp	r4, r3
 8019dcc:	da10      	bge.n	8019df0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019dce:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019dd2:	88c9      	ldrh	r1, [r1, #6]
 8019dd4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019dd8:	4419      	add	r1, r3
 8019dda:	b209      	sxth	r1, r1
 8019ddc:	428a      	cmp	r2, r1
 8019dde:	da07      	bge.n	8019df0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019de0:	88c0      	ldrh	r0, [r0, #6]
 8019de2:	4410      	add	r0, r2
 8019de4:	b200      	sxth	r0, r0
 8019de6:	4283      	cmp	r3, r0
 8019de8:	bfac      	ite	ge
 8019dea:	2000      	movge	r0, #0
 8019dec:	2001      	movlt	r0, #1
 8019dee:	bd10      	pop	{r4, pc}
 8019df0:	2000      	movs	r0, #0
 8019df2:	e7fc      	b.n	8019dee <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019df4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019df4:	b570      	push	{r4, r5, r6, lr}
 8019df6:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019dfa:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019dfe:	42ac      	cmp	r4, r5
 8019e00:	db18      	blt.n	8019e34 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019e02:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8019e06:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019e0a:	429a      	cmp	r2, r3
 8019e0c:	db12      	blt.n	8019e34 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019e0e:	8886      	ldrh	r6, [r0, #4]
 8019e10:	4435      	add	r5, r6
 8019e12:	888e      	ldrh	r6, [r1, #4]
 8019e14:	4434      	add	r4, r6
 8019e16:	b22d      	sxth	r5, r5
 8019e18:	b224      	sxth	r4, r4
 8019e1a:	42a5      	cmp	r5, r4
 8019e1c:	db0a      	blt.n	8019e34 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019e1e:	88c0      	ldrh	r0, [r0, #6]
 8019e20:	4418      	add	r0, r3
 8019e22:	88cb      	ldrh	r3, [r1, #6]
 8019e24:	441a      	add	r2, r3
 8019e26:	b200      	sxth	r0, r0
 8019e28:	b212      	sxth	r2, r2
 8019e2a:	4290      	cmp	r0, r2
 8019e2c:	bfb4      	ite	lt
 8019e2e:	2000      	movlt	r0, #0
 8019e30:	2001      	movge	r0, #1
 8019e32:	bd70      	pop	{r4, r5, r6, pc}
 8019e34:	2000      	movs	r0, #0
 8019e36:	e7fc      	b.n	8019e32 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08019e38 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e3a:	4604      	mov	r4, r0
 8019e3c:	4608      	mov	r0, r1
 8019e3e:	460d      	mov	r5, r1
 8019e40:	f7fc fe3d 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e44:	b978      	cbnz	r0, 8019e66 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8019e46:	4620      	mov	r0, r4
 8019e48:	f7fc fe39 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e4c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019e50:	b150      	cbz	r0, 8019e68 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019e52:	8026      	strh	r6, [r4, #0]
 8019e54:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019e58:	8063      	strh	r3, [r4, #2]
 8019e5a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8019e5e:	80a3      	strh	r3, [r4, #4]
 8019e60:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019e64:	80e3      	strh	r3, [r4, #6]
 8019e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e68:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019e6c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019e70:	42b1      	cmp	r1, r6
 8019e72:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019e76:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8019e7a:	460f      	mov	r7, r1
 8019e7c:	88ed      	ldrh	r5, [r5, #6]
 8019e7e:	bfa8      	it	ge
 8019e80:	4637      	movge	r7, r6
 8019e82:	4293      	cmp	r3, r2
 8019e84:	4618      	mov	r0, r3
 8019e86:	4466      	add	r6, ip
 8019e88:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019e8c:	bfa8      	it	ge
 8019e8e:	4610      	movge	r0, r2
 8019e90:	442a      	add	r2, r5
 8019e92:	88e5      	ldrh	r5, [r4, #6]
 8019e94:	4461      	add	r1, ip
 8019e96:	b236      	sxth	r6, r6
 8019e98:	8027      	strh	r7, [r4, #0]
 8019e9a:	442b      	add	r3, r5
 8019e9c:	b209      	sxth	r1, r1
 8019e9e:	b212      	sxth	r2, r2
 8019ea0:	8060      	strh	r0, [r4, #2]
 8019ea2:	b21b      	sxth	r3, r3
 8019ea4:	428e      	cmp	r6, r1
 8019ea6:	bfac      	ite	ge
 8019ea8:	ebc7 0106 	rsbge	r1, r7, r6
 8019eac:	ebc7 0101 	rsblt	r1, r7, r1
 8019eb0:	429a      	cmp	r2, r3
 8019eb2:	bfac      	ite	ge
 8019eb4:	ebc0 0202 	rsbge	r2, r0, r2
 8019eb8:	ebc0 0203 	rsblt	r2, r0, r3
 8019ebc:	80a1      	strh	r1, [r4, #4]
 8019ebe:	80e2      	strh	r2, [r4, #6]
 8019ec0:	e7d1      	b.n	8019e66 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08019ec4 <_ZN8touchgfx11Application11getInstanceEv>:
 8019ec4:	4b01      	ldr	r3, [pc, #4]	; (8019ecc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019ec6:	6818      	ldr	r0, [r3, #0]
 8019ec8:	4770      	bx	lr
 8019eca:	bf00      	nop
 8019ecc:	2000582c 	.word	0x2000582c

08019ed0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8019ed0:	b570      	push	{r4, r5, r6, lr}
 8019ed2:	2200      	movs	r2, #0
 8019ed4:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8019ed8:	1d04      	adds	r4, r0, #4
 8019eda:	b295      	uxth	r5, r2
 8019edc:	42ab      	cmp	r3, r5
 8019ede:	d90e      	bls.n	8019efe <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 8019ee0:	f854 6b04 	ldr.w	r6, [r4], #4
 8019ee4:	4615      	mov	r5, r2
 8019ee6:	3201      	adds	r2, #1
 8019ee8:	428e      	cmp	r6, r1
 8019eea:	d1f6      	bne.n	8019eda <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8019eec:	4428      	add	r0, r5
 8019eee:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8019ef2:	2bff      	cmp	r3, #255	; 0xff
 8019ef4:	d002      	beq.n	8019efc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8019ef6:	3301      	adds	r3, #1
 8019ef8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8019efc:	bd70      	pop	{r4, r5, r6, pc}
 8019efe:	2b20      	cmp	r3, #32
 8019f00:	d106      	bne.n	8019f10 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 8019f02:	4b09      	ldr	r3, [pc, #36]	; (8019f28 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 8019f04:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8019f08:	4a08      	ldr	r2, [pc, #32]	; (8019f2c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 8019f0a:	4809      	ldr	r0, [pc, #36]	; (8019f30 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 8019f0c:	f00e fbbc 	bl	8028688 <__assert_func>
 8019f10:	18c2      	adds	r2, r0, r3
 8019f12:	2401      	movs	r4, #1
 8019f14:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8019f18:	191a      	adds	r2, r3, r4
 8019f1a:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 8019f1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019f22:	6041      	str	r1, [r0, #4]
 8019f24:	e7ea      	b.n	8019efc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8019f26:	bf00      	nop
 8019f28:	0802c098 	.word	0x0802c098
 8019f2c:	0802c1a0 	.word	0x0802c1a0
 8019f30:	0802c06e 	.word	0x0802c06e

08019f34 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8019f34:	b570      	push	{r4, r5, r6, lr}
 8019f36:	2300      	movs	r3, #0
 8019f38:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8019f3c:	1d04      	adds	r4, r0, #4
 8019f3e:	b29a      	uxth	r2, r3
 8019f40:	4296      	cmp	r6, r2
 8019f42:	d90a      	bls.n	8019f5a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8019f44:	f854 2b04 	ldr.w	r2, [r4], #4
 8019f48:	428a      	cmp	r2, r1
 8019f4a:	d107      	bne.n	8019f5c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8019f4c:	18c5      	adds	r5, r0, r3
 8019f4e:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8019f52:	b11a      	cbz	r2, 8019f5c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8019f54:	3a01      	subs	r2, #1
 8019f56:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8019f5a:	bd70      	pop	{r4, r5, r6, pc}
 8019f5c:	3301      	adds	r3, #1
 8019f5e:	e7ee      	b.n	8019f3e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08019f60 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8019f60:	2300      	movs	r3, #0
 8019f62:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8019f66:	30a8      	adds	r0, #168	; 0xa8
 8019f68:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019f6c:	f802 3b01 	strb.w	r3, [r2], #1
 8019f70:	4282      	cmp	r2, r0
 8019f72:	d1fb      	bne.n	8019f6c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8019f74:	4770      	bx	lr

08019f76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8019f76:	4603      	mov	r3, r0
 8019f78:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019f7c:	2200      	movs	r2, #0
 8019f7e:	801a      	strh	r2, [r3, #0]
 8019f80:	3308      	adds	r3, #8
 8019f82:	f823 2c06 	strh.w	r2, [r3, #-6]
 8019f86:	f823 2c04 	strh.w	r2, [r3, #-4]
 8019f8a:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019f8e:	428b      	cmp	r3, r1
 8019f90:	d1f5      	bne.n	8019f7e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019f92:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8019f96:	4770      	bx	lr

08019f98 <_ZN8touchgfx11ApplicationC1Ev>:
 8019f98:	b570      	push	{r4, r5, r6, lr}
 8019f9a:	4b1a      	ldr	r3, [pc, #104]	; (801a004 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8019f9c:	2500      	movs	r5, #0
 8019f9e:	4604      	mov	r4, r0
 8019fa0:	30a8      	adds	r0, #168	; 0xa8
 8019fa2:	f840 3ca8 	str.w	r3, [r0, #-168]
 8019fa6:	f820 5c24 	strh.w	r5, [r0, #-36]
 8019faa:	f7ff ffe4 	bl	8019f76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019fae:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8019fb2:	f7ff ffe0 	bl	8019f76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019fb6:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8019fba:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8019fbe:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8019fc2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8019fc6:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8019fca:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8019fce:	490e      	ldr	r1, [pc, #56]	; (801a008 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8019fd0:	480e      	ldr	r0, [pc, #56]	; (801a00c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8019fd2:	f00e fa23 	bl	802841c <CRC_Lock>
 8019fd6:	4e0e      	ldr	r6, [pc, #56]	; (801a010 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8019fd8:	4b0e      	ldr	r3, [pc, #56]	; (801a014 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8019fda:	b158      	cbz	r0, 8019ff4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8019fdc:	801d      	strh	r5, [r3, #0]
 8019fde:	2300      	movs	r3, #0
 8019fe0:	4a0d      	ldr	r2, [pc, #52]	; (801a018 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8019fe2:	4620      	mov	r0, r4
 8019fe4:	6013      	str	r3, [r2, #0]
 8019fe6:	4a0d      	ldr	r2, [pc, #52]	; (801a01c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8019fe8:	6033      	str	r3, [r6, #0]
 8019fea:	6013      	str	r3, [r2, #0]
 8019fec:	f7ff ffb8 	bl	8019f60 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8019ff0:	4620      	mov	r0, r4
 8019ff2:	bd70      	pop	{r4, r5, r6, pc}
 8019ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019ff8:	2002      	movs	r0, #2
 8019ffa:	801a      	strh	r2, [r3, #0]
 8019ffc:	6030      	str	r0, [r6, #0]
 8019ffe:	f001 faff 	bl	801b600 <_ZN8touchgfx6Screen4drawEv>
 801a002:	e7ec      	b.n	8019fde <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801a004:	0802c120 	.word	0x0802c120
 801a008:	b5e8b5cd 	.word	0xb5e8b5cd
 801a00c:	f407a5c2 	.word	0xf407a5c2
 801a010:	2000581c 	.word	0x2000581c
 801a014:	20000174 	.word	0x20000174
 801a018:	2000582c 	.word	0x2000582c
 801a01c:	20005820 	.word	0x20005820

0801a020 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a020:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801a024:	428b      	cmp	r3, r1
 801a026:	b510      	push	{r4, lr}
 801a028:	d90e      	bls.n	801a048 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a02a:	3b01      	subs	r3, #1
 801a02c:	b29b      	uxth	r3, r3
 801a02e:	428b      	cmp	r3, r1
 801a030:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801a034:	d908      	bls.n	801a048 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a036:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a03a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801a03e:	681a      	ldr	r2, [r3, #0]
 801a040:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801a044:	685a      	ldr	r2, [r3, #4]
 801a046:	6062      	str	r2, [r4, #4]
 801a048:	bd10      	pop	{r4, pc}
	...

0801a04c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801a04c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a04e:	466b      	mov	r3, sp
 801a050:	4604      	mov	r4, r0
 801a052:	e883 0006 	stmia.w	r3, {r1, r2}
 801a056:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801a05a:	2a07      	cmp	r2, #7
 801a05c:	d906      	bls.n	801a06c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801a05e:	4b09      	ldr	r3, [pc, #36]	; (801a084 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801a060:	f240 118f 	movw	r1, #399	; 0x18f
 801a064:	4a08      	ldr	r2, [pc, #32]	; (801a088 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801a066:	4809      	ldr	r0, [pc, #36]	; (801a08c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801a068:	f00e fb0e 	bl	8028688 <__assert_func>
 801a06c:	1c51      	adds	r1, r2, #1
 801a06e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801a072:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a076:	cb03      	ldmia	r3!, {r0, r1}
 801a078:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801a07c:	6069      	str	r1, [r5, #4]
 801a07e:	b003      	add	sp, #12
 801a080:	bd30      	pop	{r4, r5, pc}
 801a082:	bf00      	nop
 801a084:	0802c0c0 	.word	0x0802c0c0
 801a088:	0802c1e5 	.word	0x0802c1e5
 801a08c:	0802c0ef 	.word	0x0802c0ef

0801a090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a094:	b08d      	sub	sp, #52	; 0x34
 801a096:	4683      	mov	fp, r0
 801a098:	ac08      	add	r4, sp, #32
 801a09a:	4620      	mov	r0, r4
 801a09c:	e884 0006 	stmia.w	r4, {r1, r2}
 801a0a0:	f7fc fd0d 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 801a0a4:	2800      	cmp	r0, #0
 801a0a6:	d16a      	bne.n	801a17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a0a8:	9402      	str	r4, [sp, #8]
 801a0aa:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a0ae:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a0b2:	2400      	movs	r4, #0
 801a0b4:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801a0b8:	9301      	str	r3, [sp, #4]
 801a0ba:	36a0      	adds	r6, #160	; 0xa0
 801a0bc:	42a5      	cmp	r5, r4
 801a0be:	d00d      	beq.n	801a0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801a0c0:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801a0c4:	9802      	ldr	r0, [sp, #8]
 801a0c6:	f7ff fe95 	bl	8019df4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a0ca:	b128      	cbz	r0, 801a0d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801a0cc:	1e69      	subs	r1, r5, #1
 801a0ce:	9801      	ldr	r0, [sp, #4]
 801a0d0:	1b09      	subs	r1, r1, r4
 801a0d2:	b289      	uxth	r1, r1
 801a0d4:	f7ff ffa4 	bl	801a020 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a0d8:	3401      	adds	r4, #1
 801a0da:	e7ef      	b.n	801a0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a0dc:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a0e0:	1e7b      	subs	r3, r7, #1
 801a0e2:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801a0e6:	9703      	str	r7, [sp, #12]
 801a0e8:	9300      	str	r3, [sp, #0]
 801a0ea:	2400      	movs	r4, #0
 801a0ec:	4655      	mov	r5, sl
 801a0ee:	9704      	str	r7, [sp, #16]
 801a0f0:	4626      	mov	r6, r4
 801a0f2:	9b04      	ldr	r3, [sp, #16]
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d078      	beq.n	801a1ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801a0f8:	9902      	ldr	r1, [sp, #8]
 801a0fa:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a0fe:	f7ff fe57 	bl	8019db0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a102:	b360      	cbz	r0, 801a15e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801a104:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801a108:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801a10c:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801a110:	45e6      	cmp	lr, ip
 801a112:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801a116:	db35      	blt.n	801a184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a118:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a11c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a120:	4472      	add	r2, lr
 801a122:	4463      	add	r3, ip
 801a124:	b212      	sxth	r2, r2
 801a126:	b21b      	sxth	r3, r3
 801a128:	429a      	cmp	r2, r3
 801a12a:	dc2b      	bgt.n	801a184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a12c:	fa1f f288 	uxth.w	r2, r8
 801a130:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a134:	45c1      	cmp	r9, r8
 801a136:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a13a:	4413      	add	r3, r2
 801a13c:	fa1f fc89 	uxth.w	ip, r9
 801a140:	b29b      	uxth	r3, r3
 801a142:	fa0f fe83 	sxth.w	lr, r3
 801a146:	db0f      	blt.n	801a168 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801a148:	eba3 030c 	sub.w	r3, r3, ip
 801a14c:	1ac9      	subs	r1, r1, r3
 801a14e:	b209      	sxth	r1, r1
 801a150:	2900      	cmp	r1, #0
 801a152:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a156:	dd12      	ble.n	801a17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a158:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801a15c:	4604      	mov	r4, r0
 801a15e:	9b04      	ldr	r3, [sp, #16]
 801a160:	3d08      	subs	r5, #8
 801a162:	3b01      	subs	r3, #1
 801a164:	9304      	str	r3, [sp, #16]
 801a166:	e7c4      	b.n	801a0f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801a168:	4461      	add	r1, ip
 801a16a:	b209      	sxth	r1, r1
 801a16c:	4571      	cmp	r1, lr
 801a16e:	dc3a      	bgt.n	801a1e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a170:	eba2 020c 	sub.w	r2, r2, ip
 801a174:	b212      	sxth	r2, r2
 801a176:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801a17a:	2a00      	cmp	r2, #0
 801a17c:	dcee      	bgt.n	801a15c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801a17e:	b00d      	add	sp, #52	; 0x34
 801a180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a184:	45c1      	cmp	r9, r8
 801a186:	db2e      	blt.n	801a1e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a188:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801a18c:	4499      	add	r9, r3
 801a18e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a192:	4498      	add	r8, r3
 801a194:	fa0f f989 	sxth.w	r9, r9
 801a198:	fa0f f888 	sxth.w	r8, r8
 801a19c:	45c1      	cmp	r9, r8
 801a19e:	dc22      	bgt.n	801a1e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a1a0:	fa1f f28c 	uxth.w	r2, ip
 801a1a4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a1a8:	45e6      	cmp	lr, ip
 801a1aa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801a1ae:	4413      	add	r3, r2
 801a1b0:	fa1f f88e 	uxth.w	r8, lr
 801a1b4:	b29b      	uxth	r3, r3
 801a1b6:	fa0f f983 	sxth.w	r9, r3
 801a1ba:	db0a      	blt.n	801a1d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801a1bc:	eba3 0308 	sub.w	r3, r3, r8
 801a1c0:	1ac9      	subs	r1, r1, r3
 801a1c2:	b209      	sxth	r1, r1
 801a1c4:	2900      	cmp	r1, #0
 801a1c6:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801a1ca:	ddd8      	ble.n	801a17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a1cc:	f8ad 9020 	strh.w	r9, [sp, #32]
 801a1d0:	e7c4      	b.n	801a15c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801a1d2:	4441      	add	r1, r8
 801a1d4:	b209      	sxth	r1, r1
 801a1d6:	4549      	cmp	r1, r9
 801a1d8:	dc05      	bgt.n	801a1e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a1da:	eba2 0208 	sub.w	r2, r2, r8
 801a1de:	b212      	sxth	r2, r2
 801a1e0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801a1e4:	e7c9      	b.n	801a17a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801a1e6:	4606      	mov	r6, r0
 801a1e8:	e7b9      	b.n	801a15e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801a1ea:	2c00      	cmp	r4, #0
 801a1ec:	f47f af7d 	bne.w	801a0ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801a1f0:	2e00      	cmp	r6, #0
 801a1f2:	f000 81dc 	beq.w	801a5ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a1f6:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801a1fa:	4655      	mov	r5, sl
 801a1fc:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801a200:	b2b9      	uxth	r1, r7
 801a202:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a206:	b2b3      	uxth	r3, r6
 801a208:	9104      	str	r1, [sp, #16]
 801a20a:	9804      	ldr	r0, [sp, #16]
 801a20c:	441a      	add	r2, r3
 801a20e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a212:	b292      	uxth	r2, r2
 801a214:	4401      	add	r1, r0
 801a216:	fa0f f882 	sxth.w	r8, r2
 801a21a:	b289      	uxth	r1, r1
 801a21c:	9105      	str	r1, [sp, #20]
 801a21e:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801a222:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a226:	9b03      	ldr	r3, [sp, #12]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d054      	beq.n	801a2d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801a22c:	9902      	ldr	r1, [sp, #8]
 801a22e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a232:	f7ff fdbd 	bl	8019db0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a23a:	b1d8      	cbz	r0, 801a274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a23c:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801a240:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801a244:	4576      	cmp	r6, lr
 801a246:	dc26      	bgt.n	801a296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a248:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801a24c:	44f4      	add	ip, lr
 801a24e:	fa0f fc8c 	sxth.w	ip, ip
 801a252:	45e0      	cmp	r8, ip
 801a254:	db1f      	blt.n	801a296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a256:	428f      	cmp	r7, r1
 801a258:	fa1f fc81 	uxth.w	ip, r1
 801a25c:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801a260:	dc0f      	bgt.n	801a282 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801a262:	9805      	ldr	r0, [sp, #20]
 801a264:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801a268:	eba0 0c0c 	sub.w	ip, r0, ip
 801a26c:	eba1 010c 	sub.w	r1, r1, ip
 801a270:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801a274:	4620      	mov	r0, r4
 801a276:	9903      	ldr	r1, [sp, #12]
 801a278:	3d08      	subs	r5, #8
 801a27a:	4604      	mov	r4, r0
 801a27c:	3901      	subs	r1, #1
 801a27e:	9103      	str	r1, [sp, #12]
 801a280:	e7cf      	b.n	801a222 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801a282:	4461      	add	r1, ip
 801a284:	b209      	sxth	r1, r1
 801a286:	4549      	cmp	r1, r9
 801a288:	dcf5      	bgt.n	801a276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a28a:	9904      	ldr	r1, [sp, #16]
 801a28c:	eba1 0c0c 	sub.w	ip, r1, ip
 801a290:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801a294:	e7ee      	b.n	801a274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a296:	428f      	cmp	r7, r1
 801a298:	dced      	bgt.n	801a276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a29a:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801a29e:	4461      	add	r1, ip
 801a2a0:	b209      	sxth	r1, r1
 801a2a2:	4589      	cmp	r9, r1
 801a2a4:	dbe7      	blt.n	801a276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a2a6:	4576      	cmp	r6, lr
 801a2a8:	fa1f fc8e 	uxth.w	ip, lr
 801a2ac:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801a2b0:	dc08      	bgt.n	801a2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801a2b2:	eba2 0c0c 	sub.w	ip, r2, ip
 801a2b6:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801a2ba:	eba1 010c 	sub.w	r1, r1, ip
 801a2be:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801a2c2:	e7d7      	b.n	801a274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a2c4:	4461      	add	r1, ip
 801a2c6:	b209      	sxth	r1, r1
 801a2c8:	4588      	cmp	r8, r1
 801a2ca:	dbd4      	blt.n	801a276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a2cc:	eba3 0c0c 	sub.w	ip, r3, ip
 801a2d0:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801a2d4:	e7ce      	b.n	801a274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a2d6:	2c00      	cmp	r4, #0
 801a2d8:	f000 8169 	beq.w	801a5ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a2dc:	9b00      	ldr	r3, [sp, #0]
 801a2de:	3301      	adds	r3, #1
 801a2e0:	f000 8165 	beq.w	801a5ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a2e4:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801a2e8:	9802      	ldr	r0, [sp, #8]
 801a2ea:	4621      	mov	r1, r4
 801a2ec:	f7ff fd82 	bl	8019df4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a2f0:	b120      	cbz	r0, 801a2fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801a2f2:	f8bd 1000 	ldrh.w	r1, [sp]
 801a2f6:	9801      	ldr	r0, [sp, #4]
 801a2f8:	f7ff fe92 	bl	801a020 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a2fc:	9902      	ldr	r1, [sp, #8]
 801a2fe:	4620      	mov	r0, r4
 801a300:	f7ff fd56 	bl	8019db0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a304:	2800      	cmp	r0, #0
 801a306:	f000 809b 	beq.w	801a440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801a30a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801a30e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801a312:	fa1f f288 	uxth.w	r2, r8
 801a316:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801a31a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801a31e:	19d5      	adds	r5, r2, r7
 801a320:	b2a1      	uxth	r1, r4
 801a322:	45a0      	cmp	r8, r4
 801a324:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801a328:	fa1f f985 	uxth.w	r9, r5
 801a32c:	440b      	add	r3, r1
 801a32e:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801a332:	fa0f f589 	sxth.w	r5, r9
 801a336:	b29b      	uxth	r3, r3
 801a338:	9503      	str	r5, [sp, #12]
 801a33a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a33e:	9507      	str	r5, [sp, #28]
 801a340:	f340 809d 	ble.w	801a47e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801a344:	1a52      	subs	r2, r2, r1
 801a346:	4584      	cmp	ip, r0
 801a348:	fa0f fe83 	sxth.w	lr, r3
 801a34c:	b292      	uxth	r2, r2
 801a34e:	b215      	sxth	r5, r2
 801a350:	dd2f      	ble.n	801a3b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801a352:	9e00      	ldr	r6, [sp, #0]
 801a354:	fa1f fc8c 	uxth.w	ip, ip
 801a358:	b280      	uxth	r0, r0
 801a35a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a35e:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801a362:	9e03      	ldr	r6, [sp, #12]
 801a364:	ebac 0300 	sub.w	r3, ip, r0
 801a368:	448c      	add	ip, r1
 801a36a:	eba6 060e 	sub.w	r6, r6, lr
 801a36e:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801a372:	b29b      	uxth	r3, r3
 801a374:	4470      	add	r0, lr
 801a376:	fa0f fc8c 	sxth.w	ip, ip
 801a37a:	b21c      	sxth	r4, r3
 801a37c:	b200      	sxth	r0, r0
 801a37e:	4366      	muls	r6, r4
 801a380:	ebac 0000 	sub.w	r0, ip, r0
 801a384:	4368      	muls	r0, r5
 801a386:	4286      	cmp	r6, r0
 801a388:	db09      	blt.n	801a39e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801a38a:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801a38e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801a392:	4417      	add	r7, r2
 801a394:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a398:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801a39c:	e685      	b.n	801a0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a39e:	440b      	add	r3, r1
 801a3a0:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801a3a4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a3a8:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801a3ac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a3b0:	e67b      	b.n	801a0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a3b2:	9e03      	ldr	r6, [sp, #12]
 801a3b4:	45b6      	cmp	lr, r6
 801a3b6:	da28      	bge.n	801a40a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801a3b8:	9b00      	ldr	r3, [sp, #0]
 801a3ba:	eba6 060e 	sub.w	r6, r6, lr
 801a3be:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801a3c2:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801a3c6:	eb04 030c 	add.w	r3, r4, ip
 801a3ca:	fa1f f883 	uxth.w	r8, r3
 801a3ce:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801a3d2:	4403      	add	r3, r0
 801a3d4:	fa0f f988 	sxth.w	r9, r8
 801a3d8:	eba0 000c 	sub.w	r0, r0, ip
 801a3dc:	eba3 0308 	sub.w	r3, r3, r8
 801a3e0:	4368      	muls	r0, r5
 801a3e2:	b29b      	uxth	r3, r3
 801a3e4:	fa0f f883 	sxth.w	r8, r3
 801a3e8:	fb08 f606 	mul.w	r6, r8, r6
 801a3ec:	42b0      	cmp	r0, r6
 801a3ee:	dc06      	bgt.n	801a3fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801a3f0:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801a3f4:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801a3f8:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801a3fc:	e7c9      	b.n	801a392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801a3fe:	4423      	add	r3, r4
 801a400:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801a404:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a408:	e64f      	b.n	801a0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a40a:	eba3 0309 	sub.w	r3, r3, r9
 801a40e:	9807      	ldr	r0, [sp, #28]
 801a410:	b29b      	uxth	r3, r3
 801a412:	2806      	cmp	r0, #6
 801a414:	fa0f fc83 	sxth.w	ip, r3
 801a418:	d818      	bhi.n	801a44c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801a41a:	4652      	mov	r2, sl
 801a41c:	ab0a      	add	r3, sp, #40	; 0x28
 801a41e:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801a422:	6851      	ldr	r1, [r2, #4]
 801a424:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801a428:	c303      	stmia	r3!, {r0, r1}
 801a42a:	9b03      	ldr	r3, [sp, #12]
 801a42c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801a430:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801a434:	ab0a      	add	r3, sp, #40	; 0x28
 801a436:	9801      	ldr	r0, [sp, #4]
 801a438:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a43c:	f7ff fe06 	bl	801a04c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a440:	9b00      	ldr	r3, [sp, #0]
 801a442:	f1aa 0a08 	sub.w	sl, sl, #8
 801a446:	3b01      	subs	r3, #1
 801a448:	9300      	str	r3, [sp, #0]
 801a44a:	e747      	b.n	801a2dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801a44c:	9800      	ldr	r0, [sp, #0]
 801a44e:	45ac      	cmp	ip, r5
 801a450:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801a454:	db0c      	blt.n	801a470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801a456:	4417      	add	r7, r2
 801a458:	4458      	add	r0, fp
 801a45a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801a45e:	b2bf      	uxth	r7, r7
 801a460:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801a464:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801a468:	440f      	add	r7, r1
 801a46a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801a46e:	e61c      	b.n	801a0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a470:	4458      	add	r0, fp
 801a472:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801a476:	443b      	add	r3, r7
 801a478:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a47c:	e615      	b.n	801a0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a47e:	fa1f f18c 	uxth.w	r1, ip
 801a482:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801a486:	b282      	uxth	r2, r0
 801a488:	4584      	cmp	ip, r0
 801a48a:	eb01 0e05 	add.w	lr, r1, r5
 801a48e:	9204      	str	r2, [sp, #16]
 801a490:	fa1f fe8e 	uxth.w	lr, lr
 801a494:	9e04      	ldr	r6, [sp, #16]
 801a496:	fa0f f28e 	sxth.w	r2, lr
 801a49a:	9205      	str	r2, [sp, #20]
 801a49c:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801a4a0:	4432      	add	r2, r6
 801a4a2:	b292      	uxth	r2, r2
 801a4a4:	9206      	str	r2, [sp, #24]
 801a4a6:	da26      	bge.n	801a4f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801a4a8:	eba3 0309 	sub.w	r3, r3, r9
 801a4ac:	eba2 020e 	sub.w	r2, r2, lr
 801a4b0:	eba0 000c 	sub.w	r0, r0, ip
 801a4b4:	eba4 0408 	sub.w	r4, r4, r8
 801a4b8:	b29b      	uxth	r3, r3
 801a4ba:	b292      	uxth	r2, r2
 801a4bc:	fa0f fa83 	sxth.w	sl, r3
 801a4c0:	b211      	sxth	r1, r2
 801a4c2:	fb0a f000 	mul.w	r0, sl, r0
 801a4c6:	434c      	muls	r4, r1
 801a4c8:	42a0      	cmp	r0, r4
 801a4ca:	9800      	ldr	r0, [sp, #0]
 801a4cc:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801a4d0:	dc06      	bgt.n	801a4e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801a4d2:	4458      	add	r0, fp
 801a4d4:	9a05      	ldr	r2, [sp, #20]
 801a4d6:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801a4da:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801a4de:	e7ca      	b.n	801a476 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801a4e0:	eb0b 0300 	add.w	r3, fp, r0
 801a4e4:	9903      	ldr	r1, [sp, #12]
 801a4e6:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801a4ea:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801a4ee:	442a      	add	r2, r5
 801a4f0:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801a4f4:	e5d9      	b.n	801a0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a4f6:	9e04      	ldr	r6, [sp, #16]
 801a4f8:	9a03      	ldr	r2, [sp, #12]
 801a4fa:	1b89      	subs	r1, r1, r6
 801a4fc:	b21e      	sxth	r6, r3
 801a4fe:	b289      	uxth	r1, r1
 801a500:	4296      	cmp	r6, r2
 801a502:	fa0f fc81 	sxth.w	ip, r1
 801a506:	dd25      	ble.n	801a554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801a508:	eba3 0309 	sub.w	r3, r3, r9
 801a50c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801a510:	9e05      	ldr	r6, [sp, #20]
 801a512:	eba4 0408 	sub.w	r4, r4, r8
 801a516:	b29b      	uxth	r3, r3
 801a518:	eba6 0902 	sub.w	r9, r6, r2
 801a51c:	fb0c f404 	mul.w	r4, ip, r4
 801a520:	b218      	sxth	r0, r3
 801a522:	9a00      	ldr	r2, [sp, #0]
 801a524:	fb00 f909 	mul.w	r9, r0, r9
 801a528:	00d2      	lsls	r2, r2, #3
 801a52a:	454c      	cmp	r4, r9
 801a52c:	db03      	blt.n	801a536 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801a52e:	445a      	add	r2, fp
 801a530:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801a534:	e79f      	b.n	801a476 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801a536:	eb0b 0302 	add.w	r3, fp, r2
 801a53a:	9a03      	ldr	r2, [sp, #12]
 801a53c:	4429      	add	r1, r5
 801a53e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801a542:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801a546:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801a54a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a54e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a552:	e5aa      	b.n	801a0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a554:	9b06      	ldr	r3, [sp, #24]
 801a556:	9c07      	ldr	r4, [sp, #28]
 801a558:	eba3 020e 	sub.w	r2, r3, lr
 801a55c:	2c06      	cmp	r4, #6
 801a55e:	b292      	uxth	r2, r2
 801a560:	b213      	sxth	r3, r2
 801a562:	d80d      	bhi.n	801a580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801a564:	4651      	mov	r1, sl
 801a566:	aa0a      	add	r2, sp, #40	; 0x28
 801a568:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801a56c:	6849      	ldr	r1, [r1, #4]
 801a56e:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801a572:	9b05      	ldr	r3, [sp, #20]
 801a574:	c203      	stmia	r2!, {r0, r1}
 801a576:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801a57a:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801a57e:	e759      	b.n	801a434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801a580:	9c00      	ldr	r4, [sp, #0]
 801a582:	4563      	cmp	r3, ip
 801a584:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801a588:	db0d      	blt.n	801a5a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801a58a:	4429      	add	r1, r5
 801a58c:	9a04      	ldr	r2, [sp, #16]
 801a58e:	445c      	add	r4, fp
 801a590:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a594:	b289      	uxth	r1, r1
 801a596:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801a59a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a59e:	4411      	add	r1, r2
 801a5a0:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801a5a4:	e581      	b.n	801a0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a5a6:	445c      	add	r4, fp
 801a5a8:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801a5ac:	e79f      	b.n	801a4ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801a5ae:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a5b2:	2f07      	cmp	r7, #7
 801a5b4:	d806      	bhi.n	801a5c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801a5b6:	ab08      	add	r3, sp, #32
 801a5b8:	9801      	ldr	r0, [sp, #4]
 801a5ba:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a5be:	f7ff fd45 	bl	801a04c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a5c2:	e5dc      	b.n	801a17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a5c4:	f107 39ff 	add.w	r9, r7, #4294967295
 801a5c8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a5cc:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801a5d0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801a5d4:	f04f 35ff 	mov.w	r5, #4294967295
 801a5d8:	2400      	movs	r4, #0
 801a5da:	9304      	str	r3, [sp, #16]
 801a5dc:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801a5e0:	f109 32ff 	add.w	r2, r9, #4294967295
 801a5e4:	9300      	str	r3, [sp, #0]
 801a5e6:	4690      	mov	r8, r2
 801a5e8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801a5ec:	9303      	str	r3, [sp, #12]
 801a5ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801a5f2:	f1b8 3fff 	cmp.w	r8, #4294967295
 801a5f6:	6818      	ldr	r0, [r3, #0]
 801a5f8:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801a5fc:	9206      	str	r2, [sp, #24]
 801a5fe:	bf16      	itet	ne
 801a600:	9904      	ldrne	r1, [sp, #16]
 801a602:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801a606:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801a60a:	9305      	str	r3, [sp, #20]
 801a60c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801a610:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801a614:	fb16 f601 	smulbb	r6, r6, r1
 801a618:	6859      	ldr	r1, [r3, #4]
 801a61a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a61e:	4671      	mov	r1, lr
 801a620:	a80a      	add	r0, sp, #40	; 0x28
 801a622:	f7ff fc09 	bl	8019e38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a626:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801a62a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a62e:	9b03      	ldr	r3, [sp, #12]
 801a630:	9a00      	ldr	r2, [sp, #0]
 801a632:	fb11 f100 	smulbb	r1, r1, r0
 801a636:	2008      	movs	r0, #8
 801a638:	fb02 6603 	mla	r6, r2, r3, r6
 801a63c:	1b8e      	subs	r6, r1, r6
 801a63e:	fb91 f1f0 	sdiv	r1, r1, r0
 801a642:	42b1      	cmp	r1, r6
 801a644:	dc21      	bgt.n	801a68a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801a646:	4556      	cmp	r6, sl
 801a648:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801a64c:	da03      	bge.n	801a656 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801a64e:	b1e6      	cbz	r6, 801a68a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801a650:	46b2      	mov	sl, r6
 801a652:	4645      	mov	r5, r8
 801a654:	464c      	mov	r4, r9
 801a656:	f108 38ff 	add.w	r8, r8, #4294967295
 801a65a:	f118 0f02 	cmn.w	r8, #2
 801a65e:	d1c8      	bne.n	801a5f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801a660:	f1b2 3fff 	cmp.w	r2, #4294967295
 801a664:	f1a7 0708 	sub.w	r7, r7, #8
 801a668:	4691      	mov	r9, r2
 801a66a:	d1b7      	bne.n	801a5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801a66c:	9b01      	ldr	r3, [sp, #4]
 801a66e:	b2a6      	uxth	r6, r4
 801a670:	00e4      	lsls	r4, r4, #3
 801a672:	1918      	adds	r0, r3, r4
 801a674:	1c6b      	adds	r3, r5, #1
 801a676:	d10b      	bne.n	801a690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801a678:	4601      	mov	r1, r0
 801a67a:	9802      	ldr	r0, [sp, #8]
 801a67c:	f7ff fbdc 	bl	8019e38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a680:	4631      	mov	r1, r6
 801a682:	9801      	ldr	r0, [sp, #4]
 801a684:	f7ff fccc 	bl	801a020 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a688:	e50f      	b.n	801a0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a68a:	4645      	mov	r5, r8
 801a68c:	464c      	mov	r4, r9
 801a68e:	e7ed      	b.n	801a66c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801a690:	9b01      	ldr	r3, [sp, #4]
 801a692:	00ed      	lsls	r5, r5, #3
 801a694:	445c      	add	r4, fp
 801a696:	1959      	adds	r1, r3, r5
 801a698:	445d      	add	r5, fp
 801a69a:	f7ff fbcd 	bl	8019e38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a69e:	9b02      	ldr	r3, [sp, #8]
 801a6a0:	cb03      	ldmia	r3!, {r0, r1}
 801a6a2:	9b02      	ldr	r3, [sp, #8]
 801a6a4:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801a6a8:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801a6ac:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801a6b0:	6861      	ldr	r1, [r4, #4]
 801a6b2:	c303      	stmia	r3!, {r0, r1}
 801a6b4:	e7e4      	b.n	801a680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801a6b8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a6b8:	4b1d      	ldr	r3, [pc, #116]	; (801a730 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801a6ba:	b530      	push	{r4, r5, lr}
 801a6bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a6c0:	b085      	sub	sp, #20
 801a6c2:	4b1c      	ldr	r3, [pc, #112]	; (801a734 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801a6c4:	460c      	mov	r4, r1
 801a6c6:	2100      	movs	r1, #0
 801a6c8:	4605      	mov	r5, r0
 801a6ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6ce:	6820      	ldr	r0, [r4, #0]
 801a6d0:	9100      	str	r1, [sp, #0]
 801a6d2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a6d6:	ab02      	add	r3, sp, #8
 801a6d8:	6861      	ldr	r1, [r4, #4]
 801a6da:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a6de:	c303      	stmia	r3!, {r0, r1}
 801a6e0:	4669      	mov	r1, sp
 801a6e2:	a802      	add	r0, sp, #8
 801a6e4:	f7fc f9a8 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 801a6e8:	ab02      	add	r3, sp, #8
 801a6ea:	cb03      	ldmia	r3!, {r0, r1}
 801a6ec:	4b12      	ldr	r3, [pc, #72]	; (801a738 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801a6ee:	6020      	str	r0, [r4, #0]
 801a6f0:	6818      	ldr	r0, [r3, #0]
 801a6f2:	6061      	str	r1, [r4, #4]
 801a6f4:	b138      	cbz	r0, 801a706 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801a6f6:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801a6fa:	b133      	cbz	r3, 801a70a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801a6fc:	6821      	ldr	r1, [r4, #0]
 801a6fe:	4628      	mov	r0, r5
 801a700:	6862      	ldr	r2, [r4, #4]
 801a702:	f7ff fcc5 	bl	801a090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a706:	b005      	add	sp, #20
 801a708:	bd30      	pop	{r4, r5, pc}
 801a70a:	6803      	ldr	r3, [r0, #0]
 801a70c:	4621      	mov	r1, r4
 801a70e:	689b      	ldr	r3, [r3, #8]
 801a710:	4798      	blx	r3
 801a712:	4b0a      	ldr	r3, [pc, #40]	; (801a73c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801a714:	6818      	ldr	r0, [r3, #0]
 801a716:	b118      	cbz	r0, 801a720 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801a718:	6803      	ldr	r3, [r0, #0]
 801a71a:	4621      	mov	r1, r4
 801a71c:	689b      	ldr	r3, [r3, #8]
 801a71e:	4798      	blx	r3
 801a720:	4b07      	ldr	r3, [pc, #28]	; (801a740 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801a722:	4621      	mov	r1, r4
 801a724:	6818      	ldr	r0, [r3, #0]
 801a726:	6803      	ldr	r3, [r0, #0]
 801a728:	695b      	ldr	r3, [r3, #20]
 801a72a:	4798      	blx	r3
 801a72c:	e7eb      	b.n	801a706 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801a72e:	bf00      	nop
 801a730:	200057d4 	.word	0x200057d4
 801a734:	200057d6 	.word	0x200057d6
 801a738:	2000581c 	.word	0x2000581c
 801a73c:	20005818 	.word	0x20005818
 801a740:	200057e0 	.word	0x200057e0

0801a744 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a748:	4604      	mov	r4, r0
 801a74a:	b09b      	sub	sp, #108	; 0x6c
 801a74c:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801a750:	b129      	cbz	r1, 801a75e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801a752:	2300      	movs	r3, #0
 801a754:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801a758:	b01b      	add	sp, #108	; 0x6c
 801a75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a75e:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801a762:	4630      	mov	r0, r6
 801a764:	f7fc f9ab 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 801a768:	4605      	mov	r5, r0
 801a76a:	b940      	cbnz	r0, 801a77e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801a76c:	4620      	mov	r0, r4
 801a76e:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a772:	f7ff fc8d 	bl	801a090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a776:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801a77a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801a77e:	4ba6      	ldr	r3, [pc, #664]	; (801aa18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	b33b      	cbz	r3, 801a7d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801a784:	4da5      	ldr	r5, [pc, #660]	; (801aa1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801a786:	4628      	mov	r0, r5
 801a788:	f7fc f999 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 801a78c:	4606      	mov	r6, r0
 801a78e:	bb08      	cbnz	r0, 801a7d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801a790:	4628      	mov	r0, r5
 801a792:	f7ff f9b3 	bl	8019afc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a796:	6829      	ldr	r1, [r5, #0]
 801a798:	686a      	ldr	r2, [r5, #4]
 801a79a:	4620      	mov	r0, r4
 801a79c:	f7ff fc78 	bl	801a090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a7a0:	802e      	strh	r6, [r5, #0]
 801a7a2:	806e      	strh	r6, [r5, #2]
 801a7a4:	80ae      	strh	r6, [r5, #4]
 801a7a6:	80ee      	strh	r6, [r5, #6]
 801a7a8:	4f9d      	ldr	r7, [pc, #628]	; (801aa20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801a7aa:	a809      	add	r0, sp, #36	; 0x24
 801a7ac:	f7ff fbe3 	bl	8019f76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a7b0:	883d      	ldrh	r5, [r7, #0]
 801a7b2:	462e      	mov	r6, r5
 801a7b4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a7b8:	42b3      	cmp	r3, r6
 801a7ba:	d910      	bls.n	801a7de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801a7bc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a7c0:	3601      	adds	r6, #1
 801a7c2:	a809      	add	r0, sp, #36	; 0x24
 801a7c4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801a7c8:	b2b6      	uxth	r6, r6
 801a7ca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a7ce:	f7ff fc3d 	bl	801a04c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a7d2:	e7ef      	b.n	801a7b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801a7d4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d1e5      	bne.n	801a7a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801a7dc:	e7bc      	b.n	801a758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a7de:	462e      	mov	r6, r5
 801a7e0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801a7e4:	42b3      	cmp	r3, r6
 801a7e6:	d90b      	bls.n	801a800 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801a7e8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a7ec:	3601      	adds	r6, #1
 801a7ee:	4620      	mov	r0, r4
 801a7f0:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801a7f4:	b2b6      	uxth	r6, r6
 801a7f6:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801a7fa:	f7ff fc49 	bl	801a090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a7fe:	e7ef      	b.n	801a7e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801a800:	4a88      	ldr	r2, [pc, #544]	; (801aa24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801a802:	6813      	ldr	r3, [r2, #0]
 801a804:	4690      	mov	r8, r2
 801a806:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a80a:	2b01      	cmp	r3, #1
 801a80c:	f040 8093 	bne.w	801a936 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 801a810:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a814:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801a818:	f04f 0900 	mov.w	r9, #0
 801a81c:	33aa      	adds	r3, #170	; 0xaa
 801a81e:	42a8      	cmp	r0, r5
 801a820:	f103 0308 	add.w	r3, r3, #8
 801a824:	dd0a      	ble.n	801a83c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801a826:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801a82a:	3501      	adds	r5, #1
 801a82c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801a830:	440a      	add	r2, r1
 801a832:	b212      	sxth	r2, r2
 801a834:	4591      	cmp	r9, r2
 801a836:	bfb8      	it	lt
 801a838:	4691      	movlt	r9, r2
 801a83a:	e7f0      	b.n	801a81e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801a83c:	4b7a      	ldr	r3, [pc, #488]	; (801aa28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801a83e:	4e7b      	ldr	r6, [pc, #492]	; (801aa2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801a840:	881d      	ldrh	r5, [r3, #0]
 801a842:	2300      	movs	r3, #0
 801a844:	2d0f      	cmp	r5, #15
 801a846:	bf8c      	ite	hi
 801a848:	08ed      	lsrhi	r5, r5, #3
 801a84a:	2501      	movls	r5, #1
 801a84c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a850:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a854:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801a858:	f8d8 0000 	ldr.w	r0, [r8]
 801a85c:	440b      	add	r3, r1
 801a85e:	6802      	ldr	r2, [r0, #0]
 801a860:	b21b      	sxth	r3, r3
 801a862:	4599      	cmp	r9, r3
 801a864:	dd4a      	ble.n	801a8fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801a866:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801a86a:	4798      	blx	r3
 801a86c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a870:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a874:	4413      	add	r3, r2
 801a876:	b21b      	sxth	r3, r3
 801a878:	195a      	adds	r2, r3, r5
 801a87a:	4290      	cmp	r0, r2
 801a87c:	da07      	bge.n	801a88e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801a87e:	4581      	cmp	r9, r0
 801a880:	dd05      	ble.n	801a88e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801a882:	4298      	cmp	r0, r3
 801a884:	da33      	bge.n	801a8ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801a886:	2b00      	cmp	r3, #0
 801a888:	dd31      	ble.n	801a8ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801a88a:	4648      	mov	r0, r9
 801a88c:	e004      	b.n	801a898 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801a88e:	4298      	cmp	r0, r3
 801a890:	dbfb      	blt.n	801a88a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801a892:	4548      	cmp	r0, r9
 801a894:	bfa8      	it	ge
 801a896:	4648      	movge	r0, r9
 801a898:	f9b6 2000 	ldrsh.w	r2, [r6]
 801a89c:	2100      	movs	r1, #0
 801a89e:	1ac0      	subs	r0, r0, r3
 801a8a0:	f8b7 a000 	ldrh.w	sl, [r7]
 801a8a4:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a8a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a8ac:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a8b0:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a8b4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a8b8:	4553      	cmp	r3, sl
 801a8ba:	d9c9      	bls.n	801a850 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801a8bc:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a8c0:	ab07      	add	r3, sp, #28
 801a8c2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a8c6:	6851      	ldr	r1, [r2, #4]
 801a8c8:	c303      	stmia	r3!, {r0, r1}
 801a8ca:	a807      	add	r0, sp, #28
 801a8cc:	a905      	add	r1, sp, #20
 801a8ce:	f7fc f8b3 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 801a8d2:	a807      	add	r0, sp, #28
 801a8d4:	f7fc f8f3 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 801a8d8:	b920      	cbnz	r0, 801a8e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801a8da:	6823      	ldr	r3, [r4, #0]
 801a8dc:	a907      	add	r1, sp, #28
 801a8de:	4620      	mov	r0, r4
 801a8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8e2:	4798      	blx	r3
 801a8e4:	f10a 0a01 	add.w	sl, sl, #1
 801a8e8:	fa1f fa8a 	uxth.w	sl, sl
 801a8ec:	e7e2      	b.n	801a8b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801a8ee:	f8d8 0000 	ldr.w	r0, [r8]
 801a8f2:	2101      	movs	r1, #1
 801a8f4:	6803      	ldr	r3, [r0, #0]
 801a8f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a8f8:	4798      	blx	r3
 801a8fa:	e7a9      	b.n	801a850 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801a8fc:	69d3      	ldr	r3, [r2, #28]
 801a8fe:	4798      	blx	r3
 801a900:	4b4b      	ldr	r3, [pc, #300]	; (801aa30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801a902:	781b      	ldrb	r3, [r3, #0]
 801a904:	2b00      	cmp	r3, #0
 801a906:	f43f af27 	beq.w	801a758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a90a:	2300      	movs	r3, #0
 801a90c:	883d      	ldrh	r5, [r7, #0]
 801a90e:	34ea      	adds	r4, #234	; 0xea
 801a910:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801a914:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801a918:	42ab      	cmp	r3, r5
 801a91a:	f67f af1d 	bls.w	801a758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a91e:	ab1a      	add	r3, sp, #104	; 0x68
 801a920:	4620      	mov	r0, r4
 801a922:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a926:	3501      	adds	r5, #1
 801a928:	3b44      	subs	r3, #68	; 0x44
 801a92a:	b2ad      	uxth	r5, r5
 801a92c:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a930:	f7ff fb8c 	bl	801a04c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a934:	e7ee      	b.n	801a914 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 801a936:	2b02      	cmp	r3, #2
 801a938:	f040 813d 	bne.w	801abb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801a93c:	4b3d      	ldr	r3, [pc, #244]	; (801aa34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801a93e:	781b      	ldrb	r3, [r3, #0]
 801a940:	2b01      	cmp	r3, #1
 801a942:	d02c      	beq.n	801a99e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 801a944:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801a948:	883a      	ldrh	r2, [r7, #0]
 801a94a:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801a94e:	3201      	adds	r2, #1
 801a950:	b292      	uxth	r2, r2
 801a952:	2900      	cmp	r1, #0
 801a954:	d0d4      	beq.n	801a900 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801a956:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801a95a:	4610      	mov	r0, r2
 801a95c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801a960:	f04f 0a00 	mov.w	sl, #0
 801a964:	441d      	add	r5, r3
 801a966:	b22d      	sxth	r5, r5
 801a968:	b283      	uxth	r3, r0
 801a96a:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801a96e:	4299      	cmp	r1, r3
 801a970:	f240 80c4 	bls.w	801aafc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801a974:	4426      	add	r6, r4
 801a976:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801a97a:	4684      	mov	ip, r0
 801a97c:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801a980:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801a984:	4573      	cmp	r3, lr
 801a986:	f340 80a6 	ble.w	801aad6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801a98a:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801a98e:	4475      	add	r5, lr
 801a990:	b22d      	sxth	r5, r5
 801a992:	429d      	cmp	r5, r3
 801a994:	bfa8      	it	ge
 801a996:	461d      	movge	r5, r3
 801a998:	3001      	adds	r0, #1
 801a99a:	46e2      	mov	sl, ip
 801a99c:	e7e4      	b.n	801a968 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 801a99e:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801a9a2:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801a9a6:	f1bb 0f00 	cmp.w	fp, #0
 801a9aa:	d0a9      	beq.n	801a900 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801a9ac:	883b      	ldrh	r3, [r7, #0]
 801a9ae:	2600      	movs	r6, #0
 801a9b0:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801a9b4:	3301      	adds	r3, #1
 801a9b6:	b29b      	uxth	r3, r3
 801a9b8:	b299      	uxth	r1, r3
 801a9ba:	00f5      	lsls	r5, r6, #3
 801a9bc:	458b      	cmp	fp, r1
 801a9be:	d93b      	bls.n	801aa38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801a9c0:	4425      	add	r5, r4
 801a9c2:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801a9c6:	469c      	mov	ip, r3
 801a9c8:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801a9cc:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801a9d0:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801a9d4:	4408      	add	r0, r1
 801a9d6:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801a9da:	4471      	add	r1, lr
 801a9dc:	b200      	sxth	r0, r0
 801a9de:	b209      	sxth	r1, r1
 801a9e0:	4288      	cmp	r0, r1
 801a9e2:	da06      	bge.n	801a9f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ae>
 801a9e4:	4586      	cmp	lr, r0
 801a9e6:	4672      	mov	r2, lr
 801a9e8:	bfb8      	it	lt
 801a9ea:	4602      	movlt	r2, r0
 801a9ec:	3301      	adds	r3, #1
 801a9ee:	4666      	mov	r6, ip
 801a9f0:	e7e2      	b.n	801a9b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 801a9f2:	d10b      	bne.n	801aa0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801a9f4:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801a9f8:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801a9fc:	458c      	cmp	ip, r1
 801a9fe:	bfb4      	ite	lt
 801aa00:	469c      	movlt	ip, r3
 801aa02:	46b4      	movge	ip, r6
 801aa04:	4572      	cmp	r2, lr
 801aa06:	bfb8      	it	lt
 801aa08:	4672      	movlt	r2, lr
 801aa0a:	e7ef      	b.n	801a9ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801aa0c:	428a      	cmp	r2, r1
 801aa0e:	46b4      	mov	ip, r6
 801aa10:	bfb8      	it	lt
 801aa12:	460a      	movlt	r2, r1
 801aa14:	e7ea      	b.n	801a9ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801aa16:	bf00      	nop
 801aa18:	20005818 	.word	0x20005818
 801aa1c:	20005824 	.word	0x20005824
 801aa20:	20000174 	.word	0x20000174
 801aa24:	200057e0 	.word	0x200057e0
 801aa28:	200057d6 	.word	0x200057d6
 801aa2c:	200057d4 	.word	0x200057d4
 801aa30:	200057de 	.word	0x200057de
 801aa34:	200057d8 	.word	0x200057d8
 801aa38:	1961      	adds	r1, r4, r5
 801aa3a:	ab07      	add	r3, sp, #28
 801aa3c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801aa40:	6849      	ldr	r1, [r1, #4]
 801aa42:	c303      	stmia	r3!, {r0, r1}
 801aa44:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801aa48:	a807      	add	r0, sp, #28
 801aa4a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801aa4e:	2b13      	cmp	r3, #19
 801aa50:	440b      	add	r3, r1
 801aa52:	bfd8      	it	le
 801aa54:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801aa58:	1a9b      	subs	r3, r3, r2
 801aa5a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801aa5e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801aa62:	f7ff f8a5 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa66:	a807      	add	r0, sp, #28
 801aa68:	f7fc f829 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa6c:	2800      	cmp	r0, #0
 801aa6e:	d198      	bne.n	801a9a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801aa70:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801aa74:	4425      	add	r5, r4
 801aa76:	f8d8 0000 	ldr.w	r0, [r8]
 801aa7a:	f1bc 0f14 	cmp.w	ip, #20
 801aa7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801aa82:	f8d0 e000 	ldr.w	lr, [r0]
 801aa86:	bfa8      	it	ge
 801aa88:	f04f 0c14 	movge.w	ip, #20
 801aa8c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801aa90:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801aa94:	fa1f fc8c 	uxth.w	ip, ip
 801aa98:	f8cd c000 	str.w	ip, [sp]
 801aa9c:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 801aaa0:	47d0      	blx	sl
 801aaa2:	4682      	mov	sl, r0
 801aaa4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801aaa8:	a807      	add	r0, sp, #28
 801aaaa:	f7ff f827 	bl	8019afc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801aaae:	6823      	ldr	r3, [r4, #0]
 801aab0:	4620      	mov	r0, r4
 801aab2:	a907      	add	r1, sp, #28
 801aab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aab6:	4798      	blx	r3
 801aab8:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801aabc:	eba0 000a 	sub.w	r0, r0, sl
 801aac0:	b200      	sxth	r0, r0
 801aac2:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801aac6:	2800      	cmp	r0, #0
 801aac8:	f47f af6b 	bne.w	801a9a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801aacc:	b2b1      	uxth	r1, r6
 801aace:	4648      	mov	r0, r9
 801aad0:	f7ff faa6 	bl	801a020 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801aad4:	e765      	b.n	801a9a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801aad6:	d10c      	bne.n	801aaf2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801aad8:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801aadc:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801aae0:	45b4      	cmp	ip, r6
 801aae2:	bfb4      	ite	lt
 801aae4:	4684      	movlt	ip, r0
 801aae6:	46d4      	movge	ip, sl
 801aae8:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801aaec:	4433      	add	r3, r6
 801aaee:	b21b      	sxth	r3, r3
 801aaf0:	e74f      	b.n	801a992 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 801aaf2:	4575      	cmp	r5, lr
 801aaf4:	46d4      	mov	ip, sl
 801aaf6:	bfa8      	it	ge
 801aaf8:	4675      	movge	r5, lr
 801aafa:	e74d      	b.n	801a998 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 801aafc:	eb0b 0006 	add.w	r0, fp, r6
 801ab00:	4426      	add	r6, r4
 801ab02:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801ab06:	f1b9 0f13 	cmp.w	r9, #19
 801ab0a:	bfdc      	itt	le
 801ab0c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801ab10:	444d      	addle	r5, r9
 801ab12:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ab16:	bfd8      	it	le
 801ab18:	b22d      	sxthle	r5, r5
 801ab1a:	f7fb ffd0 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab1e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801ab22:	2800      	cmp	r0, #0
 801ab24:	f47f af15 	bne.w	801a952 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 801ab28:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801ab2c:	fa1f f989 	uxth.w	r9, r9
 801ab30:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ab34:	eba5 050c 	sub.w	r5, r5, ip
 801ab38:	fa1f f28c 	uxth.w	r2, ip
 801ab3c:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801ab40:	eb02 0009 	add.w	r0, r2, r9
 801ab44:	2d14      	cmp	r5, #20
 801ab46:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801ab4a:	bfa8      	it	ge
 801ab4c:	2514      	movge	r5, #20
 801ab4e:	b200      	sxth	r0, r0
 801ab50:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ab54:	b289      	uxth	r1, r1
 801ab56:	fa1f fe85 	uxth.w	lr, r5
 801ab5a:	eba0 000c 	sub.w	r0, r0, ip
 801ab5e:	f8ad c01e 	strh.w	ip, [sp, #30]
 801ab62:	4586      	cmp	lr, r0
 801ab64:	f8d8 0000 	ldr.w	r0, [r8]
 801ab68:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ab6c:	b29b      	uxth	r3, r3
 801ab6e:	bfb8      	it	lt
 801ab70:	46f1      	movlt	r9, lr
 801ab72:	6805      	ldr	r5, [r0, #0]
 801ab74:	f8cd 9000 	str.w	r9, [sp]
 801ab78:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 801ab7a:	47a8      	blx	r5
 801ab7c:	6823      	ldr	r3, [r4, #0]
 801ab7e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ab82:	a907      	add	r1, sp, #28
 801ab84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ab86:	4620      	mov	r0, r4
 801ab88:	4798      	blx	r3
 801ab8a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ab8e:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801ab92:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801ab96:	1a5b      	subs	r3, r3, r1
 801ab98:	440a      	add	r2, r1
 801ab9a:	b21b      	sxth	r3, r3
 801ab9c:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801aba0:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	f47f aecf 	bne.w	801a948 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801abaa:	fa1f f18a 	uxth.w	r1, sl
 801abae:	4658      	mov	r0, fp
 801abb0:	f7ff fa36 	bl	801a020 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801abb4:	e6c8      	b.n	801a948 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801abb6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801abba:	42ab      	cmp	r3, r5
 801abbc:	f67f aea0 	bls.w	801a900 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801abc0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801abc4:	ab07      	add	r3, sp, #28
 801abc6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801abca:	6851      	ldr	r1, [r2, #4]
 801abcc:	c303      	stmia	r3!, {r0, r1}
 801abce:	a807      	add	r0, sp, #28
 801abd0:	f7fb ff75 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 801abd4:	b920      	cbnz	r0, 801abe0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49c>
 801abd6:	6823      	ldr	r3, [r4, #0]
 801abd8:	a907      	add	r1, sp, #28
 801abda:	4620      	mov	r0, r4
 801abdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801abde:	4798      	blx	r3
 801abe0:	3501      	adds	r5, #1
 801abe2:	b2ad      	uxth	r5, r5
 801abe4:	e7e7      	b.n	801abb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801abe6:	bf00      	nop

0801abe8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801abe8:	4b03      	ldr	r3, [pc, #12]	; (801abf8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801abea:	2200      	movs	r2, #0
 801abec:	801a      	strh	r2, [r3, #0]
 801abee:	805a      	strh	r2, [r3, #2]
 801abf0:	809a      	strh	r2, [r3, #4]
 801abf2:	80da      	strh	r2, [r3, #6]
 801abf4:	4770      	bx	lr
 801abf6:	bf00      	nop
 801abf8:	20005824 	.word	0x20005824

0801abfc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac00:	b099      	sub	sp, #100	; 0x64
 801ac02:	4607      	mov	r7, r0
 801ac04:	4614      	mov	r4, r2
 801ac06:	461d      	mov	r5, r3
 801ac08:	a802      	add	r0, sp, #8
 801ac0a:	468a      	mov	sl, r1
 801ac0c:	f000 fea7 	bl	801b95e <_ZN8touchgfx12TextProviderC1Ev>
 801ac10:	683b      	ldr	r3, [r7, #0]
 801ac12:	4638      	mov	r0, r7
 801ac14:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801ac18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac1a:	4798      	blx	r3
 801ac1c:	462a      	mov	r2, r5
 801ac1e:	2500      	movs	r5, #0
 801ac20:	4621      	mov	r1, r4
 801ac22:	4603      	mov	r3, r0
 801ac24:	a802      	add	r0, sp, #8
 801ac26:	462c      	mov	r4, r5
 801ac28:	46a9      	mov	r9, r5
 801ac2a:	46a8      	mov	r8, r5
 801ac2c:	f000 fedc 	bl	801b9e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ac30:	2300      	movs	r3, #0
 801ac32:	9301      	str	r3, [sp, #4]
 801ac34:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ac38:	429c      	cmp	r4, r3
 801ac3a:	d002      	beq.n	801ac42 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801ac3c:	455c      	cmp	r4, fp
 801ac3e:	bf18      	it	ne
 801ac40:	4625      	movne	r5, r4
 801ac42:	ab01      	add	r3, sp, #4
 801ac44:	463a      	mov	r2, r7
 801ac46:	4651      	mov	r1, sl
 801ac48:	a802      	add	r0, sp, #8
 801ac4a:	f001 f9c7 	bl	801bfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ac4e:	4604      	mov	r4, r0
 801ac50:	b108      	cbz	r0, 801ac56 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801ac52:	280a      	cmp	r0, #10
 801ac54:	d10a      	bne.n	801ac6c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801ac56:	45c1      	cmp	r9, r8
 801ac58:	bf38      	it	cc
 801ac5a:	46c1      	movcc	r9, r8
 801ac5c:	f04f 0800 	mov.w	r8, #0
 801ac60:	2c00      	cmp	r4, #0
 801ac62:	d1e5      	bne.n	801ac30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801ac64:	4648      	mov	r0, r9
 801ac66:	b019      	add	sp, #100	; 0x64
 801ac68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac6c:	9a01      	ldr	r2, [sp, #4]
 801ac6e:	2a00      	cmp	r2, #0
 801ac70:	d0de      	beq.n	801ac30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801ac72:	7b56      	ldrb	r6, [r2, #13]
 801ac74:	4629      	mov	r1, r5
 801ac76:	683b      	ldr	r3, [r7, #0]
 801ac78:	0076      	lsls	r6, r6, #1
 801ac7a:	8894      	ldrh	r4, [r2, #4]
 801ac7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac7e:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801ac82:	7a96      	ldrb	r6, [r2, #10]
 801ac84:	4306      	orrs	r6, r0
 801ac86:	4638      	mov	r0, r7
 801ac88:	4798      	blx	r3
 801ac8a:	4430      	add	r0, r6
 801ac8c:	4480      	add	r8, r0
 801ac8e:	fa1f f888 	uxth.w	r8, r8
 801ac92:	e7e5      	b.n	801ac60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801ac94 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ac94:	b508      	push	{r3, lr}
 801ac96:	6803      	ldr	r3, [r0, #0]
 801ac98:	68db      	ldr	r3, [r3, #12]
 801ac9a:	4798      	blx	r3
 801ac9c:	b128      	cbz	r0, 801acaa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ac9e:	7b43      	ldrb	r3, [r0, #13]
 801aca0:	7a80      	ldrb	r0, [r0, #10]
 801aca2:	005b      	lsls	r3, r3, #1
 801aca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801aca8:	4318      	orrs	r0, r3
 801acaa:	bd08      	pop	{r3, pc}

0801acac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801acac:	b40e      	push	{r1, r2, r3}
 801acae:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acb0:	b098      	sub	sp, #96	; 0x60
 801acb2:	4605      	mov	r5, r0
 801acb4:	ab1d      	add	r3, sp, #116	; 0x74
 801acb6:	a802      	add	r0, sp, #8
 801acb8:	ae18      	add	r6, sp, #96	; 0x60
 801acba:	f853 4b04 	ldr.w	r4, [r3], #4
 801acbe:	9300      	str	r3, [sp, #0]
 801acc0:	f000 fe4d 	bl	801b95e <_ZN8touchgfx12TextProviderC1Ev>
 801acc4:	682b      	ldr	r3, [r5, #0]
 801acc6:	4628      	mov	r0, r5
 801acc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801acca:	4798      	blx	r3
 801accc:	4621      	mov	r1, r4
 801acce:	2400      	movs	r4, #0
 801acd0:	4603      	mov	r3, r0
 801acd2:	9a00      	ldr	r2, [sp, #0]
 801acd4:	a802      	add	r0, sp, #8
 801acd6:	f000 fe87 	bl	801b9e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801acda:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801acde:	462a      	mov	r2, r5
 801ace0:	4633      	mov	r3, r6
 801ace2:	4621      	mov	r1, r4
 801ace4:	a802      	add	r0, sp, #8
 801ace6:	f001 f979 	bl	801bfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801acea:	b300      	cbz	r0, 801ad2e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801acec:	280a      	cmp	r0, #10
 801acee:	d01a      	beq.n	801ad26 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801acf0:	9f01      	ldr	r7, [sp, #4]
 801acf2:	b1c7      	cbz	r7, 801ad26 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801acf4:	7b78      	ldrb	r0, [r7, #13]
 801acf6:	7a3b      	ldrb	r3, [r7, #8]
 801acf8:	00c1      	lsls	r1, r0, #3
 801acfa:	88aa      	ldrh	r2, [r5, #4]
 801acfc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ad00:	4319      	orrs	r1, r3
 801ad02:	0643      	lsls	r3, r0, #25
 801ad04:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801ad08:	bf48      	it	mi
 801ad0a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801ad0e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ad12:	bf48      	it	mi
 801ad14:	b219      	sxthmi	r1, r3
 801ad16:	79fb      	ldrb	r3, [r7, #7]
 801ad18:	4303      	orrs	r3, r0
 801ad1a:	4413      	add	r3, r2
 801ad1c:	1a5b      	subs	r3, r3, r1
 801ad1e:	b29b      	uxth	r3, r3
 801ad20:	42a3      	cmp	r3, r4
 801ad22:	bfc8      	it	gt
 801ad24:	b21c      	sxthgt	r4, r3
 801ad26:	4633      	mov	r3, r6
 801ad28:	462a      	mov	r2, r5
 801ad2a:	2100      	movs	r1, #0
 801ad2c:	e7da      	b.n	801ace4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801ad2e:	b2a0      	uxth	r0, r4
 801ad30:	b018      	add	sp, #96	; 0x60
 801ad32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ad36:	b003      	add	sp, #12
 801ad38:	4770      	bx	lr

0801ad3a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ad3a:	b40e      	push	{r1, r2, r3}
 801ad3c:	b530      	push	{r4, r5, lr}
 801ad3e:	b098      	sub	sp, #96	; 0x60
 801ad40:	4604      	mov	r4, r0
 801ad42:	ab1b      	add	r3, sp, #108	; 0x6c
 801ad44:	a802      	add	r0, sp, #8
 801ad46:	f853 5b04 	ldr.w	r5, [r3], #4
 801ad4a:	9301      	str	r3, [sp, #4]
 801ad4c:	f000 fe07 	bl	801b95e <_ZN8touchgfx12TextProviderC1Ev>
 801ad50:	6823      	ldr	r3, [r4, #0]
 801ad52:	4620      	mov	r0, r4
 801ad54:	2401      	movs	r4, #1
 801ad56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad58:	4798      	blx	r3
 801ad5a:	9a01      	ldr	r2, [sp, #4]
 801ad5c:	4603      	mov	r3, r0
 801ad5e:	4629      	mov	r1, r5
 801ad60:	a802      	add	r0, sp, #8
 801ad62:	f000 fe41 	bl	801b9e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ad66:	a802      	add	r0, sp, #8
 801ad68:	f001 fa30 	bl	801c1cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ad6c:	b2a3      	uxth	r3, r4
 801ad6e:	b138      	cbz	r0, 801ad80 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801ad70:	280a      	cmp	r0, #10
 801ad72:	a802      	add	r0, sp, #8
 801ad74:	bf04      	itt	eq
 801ad76:	3301      	addeq	r3, #1
 801ad78:	b21c      	sxtheq	r4, r3
 801ad7a:	f001 fa27 	bl	801c1cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ad7e:	e7f5      	b.n	801ad6c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801ad80:	4618      	mov	r0, r3
 801ad82:	b018      	add	sp, #96	; 0x60
 801ad84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ad88:	b003      	add	sp, #12
 801ad8a:	4770      	bx	lr

0801ad8c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801ad8c:	b40e      	push	{r1, r2, r3}
 801ad8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad90:	b098      	sub	sp, #96	; 0x60
 801ad92:	4604      	mov	r4, r0
 801ad94:	26ff      	movs	r6, #255	; 0xff
 801ad96:	ab1d      	add	r3, sp, #116	; 0x74
 801ad98:	a802      	add	r0, sp, #8
 801ad9a:	f853 5b04 	ldr.w	r5, [r3], #4
 801ad9e:	9300      	str	r3, [sp, #0]
 801ada0:	f000 fddd 	bl	801b95e <_ZN8touchgfx12TextProviderC1Ev>
 801ada4:	6823      	ldr	r3, [r4, #0]
 801ada6:	4620      	mov	r0, r4
 801ada8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801adaa:	4798      	blx	r3
 801adac:	4629      	mov	r1, r5
 801adae:	4603      	mov	r3, r0
 801adb0:	9a00      	ldr	r2, [sp, #0]
 801adb2:	a802      	add	r0, sp, #8
 801adb4:	ad18      	add	r5, sp, #96	; 0x60
 801adb6:	f000 fe17 	bl	801b9e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801adba:	2100      	movs	r1, #0
 801adbc:	4622      	mov	r2, r4
 801adbe:	a802      	add	r0, sp, #8
 801adc0:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801adc4:	462b      	mov	r3, r5
 801adc6:	f001 f909 	bl	801bfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801adca:	b1d8      	cbz	r0, 801ae04 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801adcc:	280a      	cmp	r0, #10
 801adce:	d012      	beq.n	801adf6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801add0:	9801      	ldr	r0, [sp, #4]
 801add2:	b180      	cbz	r0, 801adf6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801add4:	7b47      	ldrb	r7, [r0, #13]
 801add6:	7922      	ldrb	r2, [r4, #4]
 801add8:	00fb      	lsls	r3, r7, #3
 801adda:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801adde:	7a03      	ldrb	r3, [r0, #8]
 801ade0:	430b      	orrs	r3, r1
 801ade2:	0679      	lsls	r1, r7, #25
 801ade4:	bf44      	itt	mi
 801ade6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801adea:	b21b      	sxthmi	r3, r3
 801adec:	1ad3      	subs	r3, r2, r3
 801adee:	b2db      	uxtb	r3, r3
 801adf0:	429e      	cmp	r6, r3
 801adf2:	bf28      	it	cs
 801adf4:	461e      	movcs	r6, r3
 801adf6:	462b      	mov	r3, r5
 801adf8:	4622      	mov	r2, r4
 801adfa:	2100      	movs	r1, #0
 801adfc:	a802      	add	r0, sp, #8
 801adfe:	f001 f8ed 	bl	801bfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ae02:	e7e2      	b.n	801adca <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801ae04:	4630      	mov	r0, r6
 801ae06:	b018      	add	sp, #96	; 0x60
 801ae08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ae0c:	b003      	add	sp, #12
 801ae0e:	4770      	bx	lr

0801ae10 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ae10:	b513      	push	{r0, r1, r4, lr}
 801ae12:	1d01      	adds	r1, r0, #4
 801ae14:	4603      	mov	r3, r0
 801ae16:	466a      	mov	r2, sp
 801ae18:	c903      	ldmia	r1, {r0, r1}
 801ae1a:	e882 0003 	stmia.w	r2, {r0, r1}
 801ae1e:	2100      	movs	r1, #0
 801ae20:	4618      	mov	r0, r3
 801ae22:	9100      	str	r1, [sp, #0]
 801ae24:	6819      	ldr	r1, [r3, #0]
 801ae26:	690c      	ldr	r4, [r1, #16]
 801ae28:	4611      	mov	r1, r2
 801ae2a:	47a0      	blx	r4
 801ae2c:	b002      	add	sp, #8
 801ae2e:	bd10      	pop	{r4, pc}

0801ae30 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ae30:	b538      	push	{r3, r4, r5, lr}
 801ae32:	680b      	ldr	r3, [r1, #0]
 801ae34:	460c      	mov	r4, r1
 801ae36:	4605      	mov	r5, r0
 801ae38:	68db      	ldr	r3, [r3, #12]
 801ae3a:	4798      	blx	r3
 801ae3c:	6823      	ldr	r3, [r4, #0]
 801ae3e:	4620      	mov	r0, r4
 801ae40:	4629      	mov	r1, r5
 801ae42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae44:	4798      	blx	r3
 801ae46:	4628      	mov	r0, r5
 801ae48:	bd38      	pop	{r3, r4, r5, pc}

0801ae4a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ae4a:	b410      	push	{r4}
 801ae4c:	880a      	ldrh	r2, [r1, #0]
 801ae4e:	8884      	ldrh	r4, [r0, #4]
 801ae50:	4422      	add	r2, r4
 801ae52:	800a      	strh	r2, [r1, #0]
 801ae54:	884a      	ldrh	r2, [r1, #2]
 801ae56:	88c4      	ldrh	r4, [r0, #6]
 801ae58:	4422      	add	r2, r4
 801ae5a:	804a      	strh	r2, [r1, #2]
 801ae5c:	6940      	ldr	r0, [r0, #20]
 801ae5e:	b120      	cbz	r0, 801ae6a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ae60:	6803      	ldr	r3, [r0, #0]
 801ae62:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae68:	4718      	bx	r3
 801ae6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae6e:	4770      	bx	lr

0801ae70 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ae70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae72:	460b      	mov	r3, r1
 801ae74:	b085      	sub	sp, #20
 801ae76:	4604      	mov	r4, r0
 801ae78:	b901      	cbnz	r1, 801ae7c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ae7a:	b322      	cbz	r2, 801aec6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801ae7c:	1d27      	adds	r7, r4, #4
 801ae7e:	466e      	mov	r6, sp
 801ae80:	88e5      	ldrh	r5, [r4, #6]
 801ae82:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ae86:	442a      	add	r2, r5
 801ae88:	e886 0003 	stmia.w	r6, {r0, r1}
 801ae8c:	88a1      	ldrh	r1, [r4, #4]
 801ae8e:	4620      	mov	r0, r4
 801ae90:	b215      	sxth	r5, r2
 801ae92:	4419      	add	r1, r3
 801ae94:	6823      	ldr	r3, [r4, #0]
 801ae96:	b209      	sxth	r1, r1
 801ae98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae9a:	4798      	blx	r3
 801ae9c:	6823      	ldr	r3, [r4, #0]
 801ae9e:	4629      	mov	r1, r5
 801aea0:	4620      	mov	r0, r4
 801aea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aea4:	ad02      	add	r5, sp, #8
 801aea6:	4798      	blx	r3
 801aea8:	e897 0003 	ldmia.w	r7, {r0, r1}
 801aeac:	e885 0003 	stmia.w	r5, {r0, r1}
 801aeb0:	6960      	ldr	r0, [r4, #20]
 801aeb2:	b150      	cbz	r0, 801aeca <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801aeb4:	6803      	ldr	r3, [r0, #0]
 801aeb6:	4631      	mov	r1, r6
 801aeb8:	691b      	ldr	r3, [r3, #16]
 801aeba:	4798      	blx	r3
 801aebc:	6960      	ldr	r0, [r4, #20]
 801aebe:	6803      	ldr	r3, [r0, #0]
 801aec0:	691b      	ldr	r3, [r3, #16]
 801aec2:	4629      	mov	r1, r5
 801aec4:	4798      	blx	r3
 801aec6:	b005      	add	sp, #20
 801aec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aeca:	f7fe fffb 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 801aece:	6803      	ldr	r3, [r0, #0]
 801aed0:	4631      	mov	r1, r6
 801aed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aed4:	4798      	blx	r3
 801aed6:	f7fe fff5 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 801aeda:	6803      	ldr	r3, [r0, #0]
 801aedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aede:	e7f0      	b.n	801aec2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801aee0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801aee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aee2:	8882      	ldrh	r2, [r0, #4]
 801aee4:	4605      	mov	r5, r0
 801aee6:	880b      	ldrh	r3, [r1, #0]
 801aee8:	460c      	mov	r4, r1
 801aeea:	4413      	add	r3, r2
 801aeec:	800b      	strh	r3, [r1, #0]
 801aeee:	884b      	ldrh	r3, [r1, #2]
 801aef0:	88c2      	ldrh	r2, [r0, #6]
 801aef2:	4413      	add	r3, r2
 801aef4:	4602      	mov	r2, r0
 801aef6:	804b      	strh	r3, [r1, #2]
 801aef8:	466b      	mov	r3, sp
 801aefa:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801aefe:	6851      	ldr	r1, [r2, #4]
 801af00:	c303      	stmia	r3!, {r0, r1}
 801af02:	4621      	mov	r1, r4
 801af04:	4668      	mov	r0, sp
 801af06:	f7fb fd97 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 801af0a:	466b      	mov	r3, sp
 801af0c:	cb03      	ldmia	r3!, {r0, r1}
 801af0e:	6020      	str	r0, [r4, #0]
 801af10:	6061      	str	r1, [r4, #4]
 801af12:	6968      	ldr	r0, [r5, #20]
 801af14:	b128      	cbz	r0, 801af22 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801af16:	6803      	ldr	r3, [r0, #0]
 801af18:	691b      	ldr	r3, [r3, #16]
 801af1a:	4621      	mov	r1, r4
 801af1c:	4798      	blx	r3
 801af1e:	b003      	add	sp, #12
 801af20:	bd30      	pop	{r4, r5, pc}
 801af22:	f7fe ffcf 	bl	8019ec4 <_ZN8touchgfx11Application11getInstanceEv>
 801af26:	6803      	ldr	r3, [r0, #0]
 801af28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af2a:	e7f6      	b.n	801af1a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801af2c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801af2c:	b570      	push	{r4, r5, r6, lr}
 801af2e:	8882      	ldrh	r2, [r0, #4]
 801af30:	460c      	mov	r4, r1
 801af32:	880b      	ldrh	r3, [r1, #0]
 801af34:	4605      	mov	r5, r0
 801af36:	4413      	add	r3, r2
 801af38:	800b      	strh	r3, [r1, #0]
 801af3a:	884b      	ldrh	r3, [r1, #2]
 801af3c:	88c2      	ldrh	r2, [r0, #6]
 801af3e:	4413      	add	r3, r2
 801af40:	804b      	strh	r3, [r1, #2]
 801af42:	1d01      	adds	r1, r0, #4
 801af44:	4620      	mov	r0, r4
 801af46:	f7fb fd77 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 801af4a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801af4e:	2b00      	cmp	r3, #0
 801af50:	dd0b      	ble.n	801af6a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801af52:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801af56:	2b00      	cmp	r3, #0
 801af58:	dd07      	ble.n	801af6a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801af5a:	6968      	ldr	r0, [r5, #20]
 801af5c:	b128      	cbz	r0, 801af6a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801af5e:	6803      	ldr	r3, [r0, #0]
 801af60:	4621      	mov	r1, r4
 801af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af68:	4718      	bx	r3
 801af6a:	bd70      	pop	{r4, r5, r6, pc}

0801af6c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801af6c:	b510      	push	{r4, lr}
 801af6e:	2300      	movs	r3, #0
 801af70:	4604      	mov	r4, r0
 801af72:	4608      	mov	r0, r1
 801af74:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801af78:	8023      	strh	r3, [r4, #0]
 801af7a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801af7e:	8063      	strh	r3, [r4, #2]
 801af80:	6803      	ldr	r3, [r0, #0]
 801af82:	80a1      	strh	r1, [r4, #4]
 801af84:	4621      	mov	r1, r4
 801af86:	80e2      	strh	r2, [r4, #6]
 801af88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af8a:	4798      	blx	r3
 801af8c:	4620      	mov	r0, r4
 801af8e:	bd10      	pop	{r4, pc}

0801af90 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801af90:	b530      	push	{r4, r5, lr}
 801af92:	8083      	strh	r3, [r0, #4]
 801af94:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801af98:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801af9c:	7183      	strb	r3, [r0, #6]
 801af9e:	79c3      	ldrb	r3, [r0, #7]
 801afa0:	6101      	str	r1, [r0, #16]
 801afa2:	f365 0306 	bfi	r3, r5, #0, #7
 801afa6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801afaa:	8282      	strh	r2, [r0, #20]
 801afac:	f365 13c7 	bfi	r3, r5, #7, #1
 801afb0:	71c3      	strb	r3, [r0, #7]
 801afb2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801afb6:	7203      	strb	r3, [r0, #8]
 801afb8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801afbc:	7243      	strb	r3, [r0, #9]
 801afbe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801afc2:	8143      	strh	r3, [r0, #10]
 801afc4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801afc8:	8183      	strh	r3, [r0, #12]
 801afca:	4b01      	ldr	r3, [pc, #4]	; (801afd0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801afcc:	6003      	str	r3, [r0, #0]
 801afce:	bd30      	pop	{r4, r5, pc}
 801afd0:	0802c2b8 	.word	0x0802c2b8

0801afd4 <_ZNK8touchgfx9ConstFont4findEt>:
 801afd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801afd6:	6904      	ldr	r4, [r0, #16]
 801afd8:	b3bc      	cbz	r4, 801b04a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801afda:	88a3      	ldrh	r3, [r4, #4]
 801afdc:	8a82      	ldrh	r2, [r0, #20]
 801afde:	1acb      	subs	r3, r1, r3
 801afe0:	f102 32ff 	add.w	r2, r2, #4294967295
 801afe4:	d431      	bmi.n	801b04a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801afe6:	4293      	cmp	r3, r2
 801afe8:	dd0c      	ble.n	801b004 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801afea:	230e      	movs	r3, #14
 801afec:	fb03 4302 	mla	r3, r3, r2, r4
 801aff0:	889b      	ldrh	r3, [r3, #4]
 801aff2:	1a5b      	subs	r3, r3, r1
 801aff4:	1ad3      	subs	r3, r2, r3
 801aff6:	429a      	cmp	r2, r3
 801aff8:	db27      	blt.n	801b04a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801affa:	2b00      	cmp	r3, #0
 801affc:	bfbc      	itt	lt
 801affe:	2302      	movlt	r3, #2
 801b000:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b004:	2500      	movs	r5, #0
 801b006:	260e      	movs	r6, #14
 801b008:	4295      	cmp	r5, r2
 801b00a:	dc1e      	bgt.n	801b04a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b00c:	fb06 4003 	mla	r0, r6, r3, r4
 801b010:	8887      	ldrh	r7, [r0, #4]
 801b012:	42b9      	cmp	r1, r7
 801b014:	d01a      	beq.n	801b04c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b016:	d20d      	bcs.n	801b034 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b018:	1e5a      	subs	r2, r3, #1
 801b01a:	4295      	cmp	r5, r2
 801b01c:	dc15      	bgt.n	801b04a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b01e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b022:	1a5b      	subs	r3, r3, r1
 801b024:	1ad3      	subs	r3, r2, r3
 801b026:	429a      	cmp	r2, r3
 801b028:	db0f      	blt.n	801b04a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b02a:	429d      	cmp	r5, r3
 801b02c:	ddec      	ble.n	801b008 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b02e:	1953      	adds	r3, r2, r5
 801b030:	105b      	asrs	r3, r3, #1
 801b032:	e7e9      	b.n	801b008 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b034:	1c5d      	adds	r5, r3, #1
 801b036:	42aa      	cmp	r2, r5
 801b038:	db07      	blt.n	801b04a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b03a:	8a43      	ldrh	r3, [r0, #18]
 801b03c:	1acb      	subs	r3, r1, r3
 801b03e:	442b      	add	r3, r5
 801b040:	429d      	cmp	r5, r3
 801b042:	dc02      	bgt.n	801b04a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b044:	429a      	cmp	r2, r3
 801b046:	dadf      	bge.n	801b008 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b048:	e7f1      	b.n	801b02e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b04a:	2000      	movs	r0, #0
 801b04c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b04e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b04e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b050:	4604      	mov	r4, r0
 801b052:	4617      	mov	r7, r2
 801b054:	461e      	mov	r6, r3
 801b056:	b911      	cbnz	r1, 801b05e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b058:	2500      	movs	r5, #0
 801b05a:	4628      	mov	r0, r5
 801b05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b05e:	290a      	cmp	r1, #10
 801b060:	d0fa      	beq.n	801b058 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b062:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b066:	4291      	cmp	r1, r2
 801b068:	d0f6      	beq.n	801b058 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b06a:	f242 020b 	movw	r2, #8203	; 0x200b
 801b06e:	4291      	cmp	r1, r2
 801b070:	d0f2      	beq.n	801b058 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b072:	f7ff ffaf 	bl	801afd4 <_ZNK8touchgfx9ConstFont4findEt>
 801b076:	4605      	mov	r5, r0
 801b078:	b950      	cbnz	r0, 801b090 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b07a:	6823      	ldr	r3, [r4, #0]
 801b07c:	4620      	mov	r0, r4
 801b07e:	691b      	ldr	r3, [r3, #16]
 801b080:	4798      	blx	r3
 801b082:	4601      	mov	r1, r0
 801b084:	4620      	mov	r0, r4
 801b086:	f7ff ffa5 	bl	801afd4 <_ZNK8touchgfx9ConstFont4findEt>
 801b08a:	4605      	mov	r5, r0
 801b08c:	2800      	cmp	r0, #0
 801b08e:	d0e3      	beq.n	801b058 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b090:	6823      	ldr	r3, [r4, #0]
 801b092:	4629      	mov	r1, r5
 801b094:	4620      	mov	r0, r4
 801b096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b098:	4798      	blx	r3
 801b09a:	6038      	str	r0, [r7, #0]
 801b09c:	6823      	ldr	r3, [r4, #0]
 801b09e:	4620      	mov	r0, r4
 801b0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b0a2:	4798      	blx	r3
 801b0a4:	7030      	strb	r0, [r6, #0]
 801b0a6:	e7d8      	b.n	801b05a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b0a8 <_ZN8touchgfx4clzuEm>:
 801b0a8:	4603      	mov	r3, r0
 801b0aa:	b1c8      	cbz	r0, 801b0e0 <_ZN8touchgfx4clzuEm+0x38>
 801b0ac:	0c02      	lsrs	r2, r0, #16
 801b0ae:	0412      	lsls	r2, r2, #16
 801b0b0:	b9a2      	cbnz	r2, 801b0dc <_ZN8touchgfx4clzuEm+0x34>
 801b0b2:	0403      	lsls	r3, r0, #16
 801b0b4:	2010      	movs	r0, #16
 801b0b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b0ba:	bf04      	itt	eq
 801b0bc:	021b      	lsleq	r3, r3, #8
 801b0be:	3008      	addeq	r0, #8
 801b0c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b0c4:	bf04      	itt	eq
 801b0c6:	011b      	lsleq	r3, r3, #4
 801b0c8:	3004      	addeq	r0, #4
 801b0ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b0ce:	bf04      	itt	eq
 801b0d0:	009b      	lsleq	r3, r3, #2
 801b0d2:	3002      	addeq	r0, #2
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	db04      	blt.n	801b0e2 <_ZN8touchgfx4clzuEm+0x3a>
 801b0d8:	3001      	adds	r0, #1
 801b0da:	4770      	bx	lr
 801b0dc:	2000      	movs	r0, #0
 801b0de:	e7ea      	b.n	801b0b6 <_ZN8touchgfx4clzuEm+0xe>
 801b0e0:	2020      	movs	r0, #32
 801b0e2:	4770      	bx	lr

0801b0e4 <_ZN8touchgfx7muldivuEmmmRm>:
 801b0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0e8:	4680      	mov	r8, r0
 801b0ea:	460f      	mov	r7, r1
 801b0ec:	4615      	mov	r5, r2
 801b0ee:	461e      	mov	r6, r3
 801b0f0:	f7ff ffda 	bl	801b0a8 <_ZN8touchgfx4clzuEm>
 801b0f4:	b998      	cbnz	r0, 801b11e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801b0f6:	4608      	mov	r0, r1
 801b0f8:	f7ff ffd6 	bl	801b0a8 <_ZN8touchgfx4clzuEm>
 801b0fc:	2800      	cmp	r0, #0
 801b0fe:	dd08      	ble.n	801b112 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801b100:	4633      	mov	r3, r6
 801b102:	462a      	mov	r2, r5
 801b104:	4641      	mov	r1, r8
 801b106:	4638      	mov	r0, r7
 801b108:	f7ff ffec 	bl	801b0e4 <_ZN8touchgfx7muldivuEmmmRm>
 801b10c:	b003      	add	sp, #12
 801b10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b112:	f04f 33ff 	mov.w	r3, #4294967295
 801b116:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b11a:	6033      	str	r3, [r6, #0]
 801b11c:	e7f6      	b.n	801b10c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801b11e:	fa31 f900 	lsrs.w	r9, r1, r0
 801b122:	fb01 f308 	mul.w	r3, r1, r8
 801b126:	d105      	bne.n	801b134 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801b128:	fbb3 f0f5 	udiv	r0, r3, r5
 801b12c:	fb05 3510 	mls	r5, r5, r0, r3
 801b130:	6035      	str	r5, [r6, #0]
 801b132:	e7eb      	b.n	801b10c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801b134:	2301      	movs	r3, #1
 801b136:	fa08 fb00 	lsl.w	fp, r8, r0
 801b13a:	462a      	mov	r2, r5
 801b13c:	4641      	mov	r1, r8
 801b13e:	fa03 f000 	lsl.w	r0, r3, r0
 801b142:	4633      	mov	r3, r6
 801b144:	fbbb faf5 	udiv	sl, fp, r5
 801b148:	3801      	subs	r0, #1
 801b14a:	fb09 f40a 	mul.w	r4, r9, sl
 801b14e:	4038      	ands	r0, r7
 801b150:	f7ff ffc8 	bl	801b0e4 <_ZN8touchgfx7muldivuEmmmRm>
 801b154:	462a      	mov	r2, r5
 801b156:	4607      	mov	r7, r0
 801b158:	ab01      	add	r3, sp, #4
 801b15a:	fb05 b11a 	mls	r1, r5, sl, fp
 801b15e:	4648      	mov	r0, r9
 801b160:	f7ff ffc0 	bl	801b0e4 <_ZN8touchgfx7muldivuEmmmRm>
 801b164:	9b01      	ldr	r3, [sp, #4]
 801b166:	6832      	ldr	r2, [r6, #0]
 801b168:	441a      	add	r2, r3
 801b16a:	fbb2 f3f5 	udiv	r3, r2, r5
 801b16e:	441c      	add	r4, r3
 801b170:	fb05 2513 	mls	r5, r5, r3, r2
 801b174:	443c      	add	r4, r7
 801b176:	4420      	add	r0, r4
 801b178:	e7da      	b.n	801b130 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801b17a <_ZN8touchgfx6muldivElllRl>:
 801b17a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b17c:	2800      	cmp	r0, #0
 801b17e:	461e      	mov	r6, r3
 801b180:	bfba      	itte	lt
 801b182:	4240      	neglt	r0, r0
 801b184:	f04f 34ff 	movlt.w	r4, #4294967295
 801b188:	2401      	movge	r4, #1
 801b18a:	2900      	cmp	r1, #0
 801b18c:	bfbc      	itt	lt
 801b18e:	4249      	neglt	r1, r1
 801b190:	4264      	neglt	r4, r4
 801b192:	2a00      	cmp	r2, #0
 801b194:	bfb6      	itet	lt
 801b196:	4265      	neglt	r5, r4
 801b198:	4625      	movge	r5, r4
 801b19a:	4252      	neglt	r2, r2
 801b19c:	4288      	cmp	r0, r1
 801b19e:	bfc2      	ittt	gt
 801b1a0:	4603      	movgt	r3, r0
 801b1a2:	4608      	movgt	r0, r1
 801b1a4:	4619      	movgt	r1, r3
 801b1a6:	ab01      	add	r3, sp, #4
 801b1a8:	f7ff ff9c 	bl	801b0e4 <_ZN8touchgfx7muldivuEmmmRm>
 801b1ac:	9b01      	ldr	r3, [sp, #4]
 801b1ae:	4368      	muls	r0, r5
 801b1b0:	435c      	muls	r4, r3
 801b1b2:	6034      	str	r4, [r6, #0]
 801b1b4:	b002      	add	sp, #8
 801b1b6:	bd70      	pop	{r4, r5, r6, pc}

0801b1b8 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801b1b8:	2000      	movs	r0, #0
 801b1ba:	4770      	bx	lr

0801b1bc <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801b1bc:	2001      	movs	r0, #1
 801b1be:	4770      	bx	lr

0801b1c0 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801b1c0:	2002      	movs	r0, #2
 801b1c2:	4770      	bx	lr

0801b1c4 <_ZN8touchgfx12GestureEventD1Ev>:
 801b1c4:	4770      	bx	lr

0801b1c6 <_ZN8touchgfx9DragEventD1Ev>:
 801b1c6:	4770      	bx	lr

0801b1c8 <_ZN8touchgfx10ClickEventD1Ev>:
 801b1c8:	4770      	bx	lr

0801b1ca <_ZN8touchgfx10ClickEventD0Ev>:
 801b1ca:	b510      	push	{r4, lr}
 801b1cc:	4604      	mov	r4, r0
 801b1ce:	210c      	movs	r1, #12
 801b1d0:	f00d fa2b 	bl	802862a <_ZdlPvj>
 801b1d4:	4620      	mov	r0, r4
 801b1d6:	bd10      	pop	{r4, pc}

0801b1d8 <_ZN8touchgfx9DragEventD0Ev>:
 801b1d8:	b510      	push	{r4, lr}
 801b1da:	4604      	mov	r4, r0
 801b1dc:	2110      	movs	r1, #16
 801b1de:	f00d fa24 	bl	802862a <_ZdlPvj>
 801b1e2:	4620      	mov	r0, r4
 801b1e4:	bd10      	pop	{r4, pc}

0801b1e6 <_ZN8touchgfx12GestureEventD0Ev>:
 801b1e6:	b510      	push	{r4, lr}
 801b1e8:	4604      	mov	r4, r0
 801b1ea:	210c      	movs	r1, #12
 801b1ec:	f00d fa1d 	bl	802862a <_ZdlPvj>
 801b1f0:	4620      	mov	r0, r4
 801b1f2:	bd10      	pop	{r4, pc}

0801b1f4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b1f4:	b530      	push	{r4, r5, lr}
 801b1f6:	460d      	mov	r5, r1
 801b1f8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b1fa:	b087      	sub	sp, #28
 801b1fc:	4604      	mov	r4, r0
 801b1fe:	b301      	cbz	r1, 801b242 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b200:	a801      	add	r0, sp, #4
 801b202:	f7ff feb3 	bl	801af6c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b206:	892a      	ldrh	r2, [r5, #8]
 801b208:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b20c:	7928      	ldrb	r0, [r5, #4]
 801b20e:	1ad2      	subs	r2, r2, r3
 801b210:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b212:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b216:	441a      	add	r2, r3
 801b218:	896b      	ldrh	r3, [r5, #10]
 801b21a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b21e:	f88d 0010 	strb.w	r0, [sp, #16]
 801b222:	1b5b      	subs	r3, r3, r5
 801b224:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b226:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b228:	442b      	add	r3, r5
 801b22a:	4d07      	ldr	r5, [pc, #28]	; (801b248 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b22c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b230:	a903      	add	r1, sp, #12
 801b232:	9503      	str	r5, [sp, #12]
 801b234:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b238:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b23c:	6803      	ldr	r3, [r0, #0]
 801b23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b240:	4798      	blx	r3
 801b242:	b007      	add	sp, #28
 801b244:	bd30      	pop	{r4, r5, pc}
 801b246:	bf00      	nop
 801b248:	0802c334 	.word	0x0802c334

0801b24c <_ZNK8touchgfx4Rect9intersectEss>:
 801b24c:	b510      	push	{r4, lr}
 801b24e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b252:	428b      	cmp	r3, r1
 801b254:	dc10      	bgt.n	801b278 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b256:	8884      	ldrh	r4, [r0, #4]
 801b258:	4423      	add	r3, r4
 801b25a:	b21b      	sxth	r3, r3
 801b25c:	4299      	cmp	r1, r3
 801b25e:	da0b      	bge.n	801b278 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b260:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b264:	4293      	cmp	r3, r2
 801b266:	dc07      	bgt.n	801b278 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b268:	88c0      	ldrh	r0, [r0, #6]
 801b26a:	4418      	add	r0, r3
 801b26c:	b200      	sxth	r0, r0
 801b26e:	4282      	cmp	r2, r0
 801b270:	bfac      	ite	ge
 801b272:	2000      	movge	r0, #0
 801b274:	2001      	movlt	r0, #1
 801b276:	bd10      	pop	{r4, pc}
 801b278:	2000      	movs	r0, #0
 801b27a:	e7fc      	b.n	801b276 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801b27c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b27e:	460c      	mov	r4, r1
 801b280:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b282:	b089      	sub	sp, #36	; 0x24
 801b284:	4605      	mov	r5, r0
 801b286:	2900      	cmp	r1, #0
 801b288:	d054      	beq.n	801b334 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801b28a:	4668      	mov	r0, sp
 801b28c:	f7ff fe6e 	bl	801af6c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b290:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801b292:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801b294:	4668      	mov	r0, sp
 801b296:	8922      	ldrh	r2, [r4, #8]
 801b298:	88e1      	ldrh	r1, [r4, #6]
 801b29a:	443a      	add	r2, r7
 801b29c:	4431      	add	r1, r6
 801b29e:	b212      	sxth	r2, r2
 801b2a0:	b209      	sxth	r1, r1
 801b2a2:	f7ff ffd3 	bl	801b24c <_ZNK8touchgfx4Rect9intersectEss>
 801b2a6:	b1d0      	cbz	r0, 801b2de <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b2a8:	89a2      	ldrh	r2, [r4, #12]
 801b2aa:	4668      	mov	r0, sp
 801b2ac:	8961      	ldrh	r1, [r4, #10]
 801b2ae:	443a      	add	r2, r7
 801b2b0:	4431      	add	r1, r6
 801b2b2:	b212      	sxth	r2, r2
 801b2b4:	b209      	sxth	r1, r1
 801b2b6:	f7ff ffc9 	bl	801b24c <_ZNK8touchgfx4Rect9intersectEss>
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	b978      	cbnz	r0, 801b2de <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b2be:	4a1e      	ldr	r2, [pc, #120]	; (801b338 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801b2c0:	a904      	add	r1, sp, #16
 801b2c2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b2c4:	9204      	str	r2, [sp, #16]
 801b2c6:	2202      	movs	r2, #2
 801b2c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b2cc:	f88d 2014 	strb.w	r2, [sp, #20]
 801b2d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b2d4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b2d8:	6803      	ldr	r3, [r0, #0]
 801b2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2dc:	4798      	blx	r3
 801b2de:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801b2e0:	a802      	add	r0, sp, #8
 801b2e2:	f7ff fe43 	bl	801af6c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b2e6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b2ea:	88e0      	ldrh	r0, [r4, #6]
 801b2ec:	8961      	ldrh	r1, [r4, #10]
 801b2ee:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b2f2:	1a80      	subs	r0, r0, r2
 801b2f4:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801b2f8:	1a89      	subs	r1, r1, r2
 801b2fa:	8923      	ldrh	r3, [r4, #8]
 801b2fc:	4460      	add	r0, ip
 801b2fe:	89a2      	ldrh	r2, [r4, #12]
 801b300:	4461      	add	r1, ip
 801b302:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b304:	eba3 030e 	sub.w	r3, r3, lr
 801b308:	eba2 020e 	sub.w	r2, r2, lr
 801b30c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b310:	7927      	ldrb	r7, [r4, #4]
 801b312:	4433      	add	r3, r6
 801b314:	4432      	add	r2, r6
 801b316:	4c09      	ldr	r4, [pc, #36]	; (801b33c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801b318:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b31a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b31e:	a904      	add	r1, sp, #16
 801b320:	9404      	str	r4, [sp, #16]
 801b322:	f88d 7014 	strb.w	r7, [sp, #20]
 801b326:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b32a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b32e:	6803      	ldr	r3, [r0, #0]
 801b330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b332:	4798      	blx	r3
 801b334:	b009      	add	sp, #36	; 0x24
 801b336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b338:	0802c30c 	.word	0x0802c30c
 801b33c:	0802c320 	.word	0x0802c320

0801b340 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b344:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801b348:	b0a1      	sub	sp, #132	; 0x84
 801b34a:	4604      	mov	r4, r0
 801b34c:	460d      	mov	r5, r1
 801b34e:	790b      	ldrb	r3, [r1, #4]
 801b350:	f1b9 0f00 	cmp.w	r9, #0
 801b354:	d00f      	beq.n	801b376 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801b356:	2b00      	cmp	r3, #0
 801b358:	f040 80a2 	bne.w	801b4a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b35c:	b021      	add	sp, #132	; 0x84
 801b35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b362:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b366:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b36a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b36e:	1d20      	adds	r0, r4, #4
 801b370:	f7fb fab0 	bl	80168d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b374:	e094      	b.n	801b4a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b376:	2b00      	cmp	r3, #0
 801b378:	d1f0      	bne.n	801b35c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b37a:	4b5f      	ldr	r3, [pc, #380]	; (801b4f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801b382:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801b386:	f1ba 0f03 	cmp.w	sl, #3
 801b38a:	ddea      	ble.n	801b362 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801b38c:	f1ba 0f0c 	cmp.w	sl, #12
 801b390:	f04f 0303 	mov.w	r3, #3
 801b394:	f04f 0600 	mov.w	r6, #0
 801b398:	4958      	ldr	r1, [pc, #352]	; (801b4fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801b39a:	bfd8      	it	le
 801b39c:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801b3a0:	960a      	str	r6, [sp, #40]	; 0x28
 801b3a2:	bfd8      	it	le
 801b3a4:	fb92 f3f3 	sdivle	r3, r2, r3
 801b3a8:	9301      	str	r3, [sp, #4]
 801b3aa:	4b55      	ldr	r3, [pc, #340]	; (801b500 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801b3ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b3b0:	4b54      	ldr	r3, [pc, #336]	; (801b504 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801b3b2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b3b6:	2248      	movs	r2, #72	; 0x48
 801b3b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b3bc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b3c0:	ab0e      	add	r3, sp, #56	; 0x38
 801b3c2:	4618      	mov	r0, r3
 801b3c4:	f00d fad8 	bl	8028978 <memcpy>
 801b3c8:	f04f 32ff 	mov.w	r2, #4294967295
 801b3cc:	f8cd a008 	str.w	sl, [sp, #8]
 801b3d0:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801b3d4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b3d8:	46b3      	mov	fp, r6
 801b3da:	fb93 f3f2 	sdiv	r3, r3, r2
 801b3de:	b29b      	uxth	r3, r3
 801b3e0:	9303      	str	r3, [sp, #12]
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	9a03      	ldr	r2, [sp, #12]
 801b3e6:	88ef      	ldrh	r7, [r5, #6]
 801b3e8:	a80a      	add	r0, sp, #40	; 0x28
 801b3ea:	9309      	str	r3, [sp, #36]	; 0x24
 801b3ec:	9b07      	ldr	r3, [sp, #28]
 801b3ee:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801b3f2:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801b3f6:	fb13 f302 	smulbb	r3, r3, r2
 801b3fa:	b29b      	uxth	r3, r3
 801b3fc:	9304      	str	r3, [sp, #16]
 801b3fe:	9b07      	ldr	r3, [sp, #28]
 801b400:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b404:	685b      	ldr	r3, [r3, #4]
 801b406:	fb13 f302 	smulbb	r3, r3, r2
 801b40a:	b29b      	uxth	r3, r3
 801b40c:	9305      	str	r3, [sp, #20]
 801b40e:	9b04      	ldr	r3, [sp, #16]
 801b410:	441f      	add	r7, r3
 801b412:	9b05      	ldr	r3, [sp, #20]
 801b414:	4498      	add	r8, r3
 801b416:	b23f      	sxth	r7, r7
 801b418:	fa0f f888 	sxth.w	r8, r8
 801b41c:	4639      	mov	r1, r7
 801b41e:	4642      	mov	r2, r8
 801b420:	f7ff ff14 	bl	801b24c <_ZNK8touchgfx4Rect9intersectEss>
 801b424:	b380      	cbz	r0, 801b488 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b426:	4639      	mov	r1, r7
 801b428:	ab09      	add	r3, sp, #36	; 0x24
 801b42a:	4642      	mov	r2, r8
 801b42c:	1d20      	adds	r0, r4, #4
 801b42e:	f7fb fa51 	bl	80168d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b432:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b434:	b341      	cbz	r1, 801b488 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b436:	4549      	cmp	r1, r9
 801b438:	d026      	beq.n	801b488 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b43a:	a80c      	add	r0, sp, #48	; 0x30
 801b43c:	f7ff fd96 	bl	801af6c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b440:	2002      	movs	r0, #2
 801b442:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b446:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b44a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b44e:	fb92 f2f0 	sdiv	r2, r2, r0
 801b452:	440a      	add	r2, r1
 801b454:	1a99      	subs	r1, r3, r2
 801b456:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801b45a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b45e:	fb93 f3f0 	sdiv	r3, r3, r0
 801b462:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801b466:	4403      	add	r3, r0
 801b468:	1ad3      	subs	r3, r2, r3
 801b46a:	9a06      	ldr	r2, [sp, #24]
 801b46c:	435b      	muls	r3, r3
 801b46e:	fb01 3301 	mla	r3, r1, r1, r3
 801b472:	4293      	cmp	r3, r2
 801b474:	d208      	bcs.n	801b488 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b476:	9a04      	ldr	r2, [sp, #16]
 801b478:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b47c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801b47e:	9a05      	ldr	r2, [sp, #20]
 801b480:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801b484:	86e2      	strh	r2, [r4, #54]	; 0x36
 801b486:	9306      	str	r3, [sp, #24]
 801b488:	f10b 0b02 	add.w	fp, fp, #2
 801b48c:	f1bb 0f08 	cmp.w	fp, #8
 801b490:	dda7      	ble.n	801b3e2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801b492:	9b02      	ldr	r3, [sp, #8]
 801b494:	3601      	adds	r6, #1
 801b496:	4453      	add	r3, sl
 801b498:	9302      	str	r3, [sp, #8]
 801b49a:	9b01      	ldr	r3, [sp, #4]
 801b49c:	42b3      	cmp	r3, r6
 801b49e:	d199      	bne.n	801b3d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801b4a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b4a2:	2900      	cmp	r1, #0
 801b4a4:	f43f af5a 	beq.w	801b35c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b4a8:	a80c      	add	r0, sp, #48	; 0x30
 801b4aa:	2600      	movs	r6, #0
 801b4ac:	f7ff fd5e 	bl	801af6c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4b0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b4b4:	88ea      	ldrh	r2, [r5, #6]
 801b4b6:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801b4ba:	1ad2      	subs	r2, r2, r3
 801b4bc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b4be:	7929      	ldrb	r1, [r5, #4]
 801b4c0:	441a      	add	r2, r3
 801b4c2:	892b      	ldrh	r3, [r5, #8]
 801b4c4:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801b4c8:	a90e      	add	r1, sp, #56	; 0x38
 801b4ca:	1a1b      	subs	r3, r3, r0
 801b4cc:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801b4ce:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801b4d2:	4403      	add	r3, r0
 801b4d4:	480c      	ldr	r0, [pc, #48]	; (801b508 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801b4d6:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801b4da:	900e      	str	r0, [sp, #56]	; 0x38
 801b4dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b4de:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801b4e2:	6803      	ldr	r3, [r0, #0]
 801b4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4e6:	4798      	blx	r3
 801b4e8:	792b      	ldrb	r3, [r5, #4]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	f43f af36 	beq.w	801b35c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b4f0:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801b4f4:	e732      	b.n	801b35c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b4f6:	bf00      	nop
 801b4f8:	200057e0 	.word	0x200057e0
 801b4fc:	0802a39c 	.word	0x0802a39c
 801b500:	200057d4 	.word	0x200057d4
 801b504:	200057d6 	.word	0x200057d6
 801b508:	0802c30c 	.word	0x0802c30c

0801b50c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b50c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b50e:	4604      	mov	r4, r0
 801b510:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b514:	3201      	adds	r2, #1
 801b516:	d112      	bne.n	801b53e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b518:	2500      	movs	r5, #0
 801b51a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b51e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b522:	6803      	ldr	r3, [r0, #0]
 801b524:	9500      	str	r5, [sp, #0]
 801b526:	466d      	mov	r5, sp
 801b528:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b52c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b530:	4629      	mov	r1, r5
 801b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b534:	4798      	blx	r3
 801b536:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b53a:	e884 0003 	stmia.w	r4, {r0, r1}
 801b53e:	4620      	mov	r0, r4
 801b540:	b003      	add	sp, #12
 801b542:	bd30      	pop	{r4, r5, pc}

0801b544 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b544:	b513      	push	{r0, r1, r4, lr}
 801b546:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b54a:	4604      	mov	r4, r0
 801b54c:	3301      	adds	r3, #1
 801b54e:	d109      	bne.n	801b564 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b550:	4601      	mov	r1, r0
 801b552:	4668      	mov	r0, sp
 801b554:	f7ff fd0a 	bl	801af6c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b558:	f8bd 3000 	ldrh.w	r3, [sp]
 801b55c:	8423      	strh	r3, [r4, #32]
 801b55e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b562:	8463      	strh	r3, [r4, #34]	; 0x22
 801b564:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b568:	b002      	add	sp, #8
 801b56a:	bd10      	pop	{r4, pc}

0801b56c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b56c:	b513      	push	{r0, r1, r4, lr}
 801b56e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b572:	4604      	mov	r4, r0
 801b574:	3301      	adds	r3, #1
 801b576:	d109      	bne.n	801b58c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b578:	4601      	mov	r1, r0
 801b57a:	4668      	mov	r0, sp
 801b57c:	f7ff fcf6 	bl	801af6c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b580:	f8bd 3000 	ldrh.w	r3, [sp]
 801b584:	8423      	strh	r3, [r4, #32]
 801b586:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b58a:	8463      	strh	r3, [r4, #34]	; 0x22
 801b58c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801b590:	b002      	add	sp, #8
 801b592:	bd10      	pop	{r4, pc}

0801b594 <_ZN8touchgfx6ScreenC1Ev>:
 801b594:	b570      	push	{r4, r5, r6, lr}
 801b596:	4b16      	ldr	r3, [pc, #88]	; (801b5f0 <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 801b598:	4605      	mov	r5, r0
 801b59a:	4a16      	ldr	r2, [pc, #88]	; (801b5f4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b59c:	2101      	movs	r1, #1
 801b59e:	f845 3b04 	str.w	r3, [r5], #4
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	6042      	str	r2, [r0, #4]
 801b5a6:	4604      	mov	r4, r0
 801b5a8:	8103      	strh	r3, [r0, #8]
 801b5aa:	8143      	strh	r3, [r0, #10]
 801b5ac:	8183      	strh	r3, [r0, #12]
 801b5ae:	81c3      	strh	r3, [r0, #14]
 801b5b0:	8203      	strh	r3, [r0, #16]
 801b5b2:	8243      	strh	r3, [r0, #18]
 801b5b4:	8283      	strh	r3, [r0, #20]
 801b5b6:	82c3      	strh	r3, [r0, #22]
 801b5b8:	6203      	str	r3, [r0, #32]
 801b5ba:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b5be:	6343      	str	r3, [r0, #52]	; 0x34
 801b5c0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b5c4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801b5c8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b5cc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801b5d0:	4b09      	ldr	r3, [pc, #36]	; (801b5f8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b5d2:	4628      	mov	r0, r5
 801b5d4:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b5d8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801b5da:	4a08      	ldr	r2, [pc, #32]	; (801b5fc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b5dc:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b5e0:	4798      	blx	r3
 801b5e2:	6863      	ldr	r3, [r4, #4]
 801b5e4:	4628      	mov	r0, r5
 801b5e6:	4631      	mov	r1, r6
 801b5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b5ea:	4798      	blx	r3
 801b5ec:	4620      	mov	r0, r4
 801b5ee:	bd70      	pop	{r4, r5, r6, pc}
 801b5f0:	0802c348 	.word	0x0802c348
 801b5f4:	0802b3d4 	.word	0x0802b3d4
 801b5f8:	200057d6 	.word	0x200057d6
 801b5fc:	200057d4 	.word	0x200057d4

0801b600 <_ZN8touchgfx6Screen4drawEv>:
 801b600:	4b09      	ldr	r3, [pc, #36]	; (801b628 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b602:	b507      	push	{r0, r1, r2, lr}
 801b604:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b608:	2100      	movs	r1, #0
 801b60a:	4b08      	ldr	r3, [pc, #32]	; (801b62c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b60c:	9100      	str	r1, [sp, #0]
 801b60e:	4669      	mov	r1, sp
 801b610:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b614:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b618:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b61c:	6803      	ldr	r3, [r0, #0]
 801b61e:	689b      	ldr	r3, [r3, #8]
 801b620:	4798      	blx	r3
 801b622:	b003      	add	sp, #12
 801b624:	f85d fb04 	ldr.w	pc, [sp], #4
 801b628:	200057d4 	.word	0x200057d4
 801b62c:	200057d6 	.word	0x200057d6

0801b630 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b634:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b638:	b089      	sub	sp, #36	; 0x24
 801b63a:	4680      	mov	r8, r0
 801b63c:	460c      	mov	r4, r1
 801b63e:	2b00      	cmp	r3, #0
 801b640:	4615      	mov	r5, r2
 801b642:	dd0e      	ble.n	801b662 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b644:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b648:	2b00      	cmp	r3, #0
 801b64a:	dd0a      	ble.n	801b662 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b64c:	4628      	mov	r0, r5
 801b64e:	f7ff ff5d 	bl	801b50c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b652:	4621      	mov	r1, r4
 801b654:	f7fe fbac 	bl	8019db0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b658:	69eb      	ldr	r3, [r5, #28]
 801b65a:	b928      	cbnz	r0, 801b668 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b65c:	461d      	mov	r5, r3
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d1f4      	bne.n	801b64c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b662:	b009      	add	sp, #36	; 0x24
 801b664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b668:	ae04      	add	r6, sp, #16
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	f000 80b5 	beq.w	801b7da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b670:	682b      	ldr	r3, [r5, #0]
 801b672:	4629      	mov	r1, r5
 801b674:	a802      	add	r0, sp, #8
 801b676:	68db      	ldr	r3, [r3, #12]
 801b678:	4798      	blx	r3
 801b67a:	4628      	mov	r0, r5
 801b67c:	f7ff ff62 	bl	801b544 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b680:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b684:	4407      	add	r7, r0
 801b686:	4628      	mov	r0, r5
 801b688:	f7ff ff70 	bl	801b56c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b68c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b690:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b694:	b23f      	sxth	r7, r7
 801b696:	4418      	add	r0, r3
 801b698:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b69c:	4621      	mov	r1, r4
 801b69e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b6a2:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b6a6:	4630      	mov	r0, r6
 801b6a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b6ac:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b6b0:	f7fb f9c2 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 801b6b4:	4628      	mov	r0, r5
 801b6b6:	f7ff ff29 	bl	801b50c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b6ba:	ab06      	add	r3, sp, #24
 801b6bc:	4602      	mov	r2, r0
 801b6be:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b6c2:	e883 0003 	stmia.w	r3, {r0, r1}
 801b6c6:	4611      	mov	r1, r2
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	f7fb f9b5 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 801b6ce:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b6d2:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b6d6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b6da:	4299      	cmp	r1, r3
 801b6dc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b6e0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b6e4:	d10b      	bne.n	801b6fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b6e6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b6ea:	4552      	cmp	r2, sl
 801b6ec:	d107      	bne.n	801b6fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b6ee:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b6f2:	455a      	cmp	r2, fp
 801b6f4:	d103      	bne.n	801b6fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b6f6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b6fa:	454a      	cmp	r2, r9
 801b6fc:	d06d      	beq.n	801b7da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b6fe:	f1bb 0f00 	cmp.w	fp, #0
 801b702:	dd65      	ble.n	801b7d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b704:	f1b9 0f00 	cmp.w	r9, #0
 801b708:	dd62      	ble.n	801b7d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b70a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b70e:	fa1f f08a 	uxth.w	r0, sl
 801b712:	4552      	cmp	r2, sl
 801b714:	9000      	str	r0, [sp, #0]
 801b716:	da12      	bge.n	801b73e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b718:	9301      	str	r3, [sp, #4]
 801b71a:	9b00      	ldr	r3, [sp, #0]
 801b71c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b720:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b724:	1a9a      	subs	r2, r3, r2
 801b726:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b72a:	4631      	mov	r1, r6
 801b72c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b730:	4640      	mov	r0, r8
 801b732:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b736:	69ea      	ldr	r2, [r5, #28]
 801b738:	f7ff ff7a 	bl	801b630 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b73c:	9b01      	ldr	r3, [sp, #4]
 801b73e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b742:	b29f      	uxth	r7, r3
 801b744:	429a      	cmp	r2, r3
 801b746:	da0d      	bge.n	801b764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b748:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b74c:	1aba      	subs	r2, r7, r2
 801b74e:	f8ad a012 	strh.w	sl, [sp, #18]
 801b752:	4631      	mov	r1, r6
 801b754:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b758:	4640      	mov	r0, r8
 801b75a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b75e:	69ea      	ldr	r2, [r5, #28]
 801b760:	f7ff ff66 	bl	801b630 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b764:	8822      	ldrh	r2, [r4, #0]
 801b766:	445f      	add	r7, fp
 801b768:	88a3      	ldrh	r3, [r4, #4]
 801b76a:	b2bf      	uxth	r7, r7
 801b76c:	4413      	add	r3, r2
 801b76e:	b23a      	sxth	r2, r7
 801b770:	b29b      	uxth	r3, r3
 801b772:	b219      	sxth	r1, r3
 801b774:	4291      	cmp	r1, r2
 801b776:	dd0d      	ble.n	801b794 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b778:	1bdb      	subs	r3, r3, r7
 801b77a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b77e:	f8ad a012 	strh.w	sl, [sp, #18]
 801b782:	4631      	mov	r1, r6
 801b784:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b788:	4640      	mov	r0, r8
 801b78a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b78e:	69ea      	ldr	r2, [r5, #28]
 801b790:	f7ff ff4e 	bl	801b630 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b794:	88e2      	ldrh	r2, [r4, #6]
 801b796:	8863      	ldrh	r3, [r4, #2]
 801b798:	4413      	add	r3, r2
 801b79a:	9a00      	ldr	r2, [sp, #0]
 801b79c:	444a      	add	r2, r9
 801b79e:	b29b      	uxth	r3, r3
 801b7a0:	fa1f f982 	uxth.w	r9, r2
 801b7a4:	b219      	sxth	r1, r3
 801b7a6:	fa0f f289 	sxth.w	r2, r9
 801b7aa:	428a      	cmp	r2, r1
 801b7ac:	da15      	bge.n	801b7da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b7ae:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b7b2:	eba3 0309 	sub.w	r3, r3, r9
 801b7b6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b7ba:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b7be:	4631      	mov	r1, r6
 801b7c0:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b7c4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b7c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b7cc:	69ea      	ldr	r2, [r5, #28]
 801b7ce:	e001      	b.n	801b7d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b7d0:	69ea      	ldr	r2, [r5, #28]
 801b7d2:	4621      	mov	r1, r4
 801b7d4:	4640      	mov	r0, r8
 801b7d6:	f7ff ff2b 	bl	801b630 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b7da:	4628      	mov	r0, r5
 801b7dc:	f7ff fe96 	bl	801b50c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b7e0:	6861      	ldr	r1, [r4, #4]
 801b7e2:	4602      	mov	r2, r0
 801b7e4:	4633      	mov	r3, r6
 801b7e6:	6820      	ldr	r0, [r4, #0]
 801b7e8:	c303      	stmia	r3!, {r0, r1}
 801b7ea:	4611      	mov	r1, r2
 801b7ec:	4630      	mov	r0, r6
 801b7ee:	f7fb f923 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 801b7f2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	f77f af33 	ble.w	801b662 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b7fc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b800:	2b00      	cmp	r3, #0
 801b802:	f77f af2e 	ble.w	801b662 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b806:	4628      	mov	r0, r5
 801b808:	f7ff fe9c 	bl	801b544 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b80c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b810:	1a18      	subs	r0, r3, r0
 801b812:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b816:	4628      	mov	r0, r5
 801b818:	f7ff fea8 	bl	801b56c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b81c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b820:	4631      	mov	r1, r6
 801b822:	1a18      	subs	r0, r3, r0
 801b824:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b828:	4628      	mov	r0, r5
 801b82a:	682b      	ldr	r3, [r5, #0]
 801b82c:	689b      	ldr	r3, [r3, #8]
 801b82e:	4798      	blx	r3
 801b830:	e717      	b.n	801b662 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b832 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b832:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b834:	2300      	movs	r3, #0
 801b836:	aa02      	add	r2, sp, #8
 801b838:	4604      	mov	r4, r0
 801b83a:	3004      	adds	r0, #4
 801b83c:	f842 3d04 	str.w	r3, [r2, #-4]!
 801b840:	460d      	mov	r5, r1
 801b842:	f7fb f9d1 	bl	8016be8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b846:	9a01      	ldr	r2, [sp, #4]
 801b848:	b11a      	cbz	r2, 801b852 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801b84a:	4629      	mov	r1, r5
 801b84c:	4620      	mov	r0, r4
 801b84e:	f7ff feef 	bl	801b630 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b852:	b003      	add	sp, #12
 801b854:	bd30      	pop	{r4, r5, pc}

0801b856 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b856:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b858:	4602      	mov	r2, r0
 801b85a:	4604      	mov	r4, r0
 801b85c:	460d      	mov	r5, r1
 801b85e:	466b      	mov	r3, sp
 801b860:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b864:	6851      	ldr	r1, [r2, #4]
 801b866:	c303      	stmia	r3!, {r0, r1}
 801b868:	4629      	mov	r1, r5
 801b86a:	4668      	mov	r0, sp
 801b86c:	f7fb f8e4 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 801b870:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b874:	4669      	mov	r1, sp
 801b876:	b123      	cbz	r3, 801b882 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801b878:	4620      	mov	r0, r4
 801b87a:	f7ff ffda 	bl	801b832 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b87e:	b003      	add	sp, #12
 801b880:	bd30      	pop	{r4, r5, pc}
 801b882:	1d20      	adds	r0, r4, #4
 801b884:	f7fb f977 	bl	8016b76 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b888:	e7f9      	b.n	801b87e <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801b88a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b88a:	460b      	mov	r3, r1
 801b88c:	680a      	ldr	r2, [r1, #0]
 801b88e:	1d01      	adds	r1, r0, #4
 801b890:	6992      	ldr	r2, [r2, #24]
 801b892:	4618      	mov	r0, r3
 801b894:	4710      	bx	r2

0801b896 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801b896:	b510      	push	{r4, lr}
 801b898:	4298      	cmp	r0, r3
 801b89a:	eb01 0402 	add.w	r4, r1, r2
 801b89e:	b224      	sxth	r4, r4
 801b8a0:	d22c      	bcs.n	801b8fc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801b8a2:	b35b      	cbz	r3, 801b8fc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801b8a4:	ee07 0a90 	vmov	s15, r0
 801b8a8:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801b8ac:	ee07 3a90 	vmov	s15, r3
 801b8b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b8b4:	ee07 2a90 	vmov	s15, r2
 801b8b8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b8bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b8c0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801b8c4:	ee07 1a90 	vmov	s15, r1
 801b8c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b8cc:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b8d0:	ee67 5a07 	vmul.f32	s11, s14, s14
 801b8d4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b8d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b8dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 801b8e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8e8:	bfcc      	ite	gt
 801b8ea:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801b8ee:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801b8f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b8f6:	ee17 3a90 	vmov	r3, s15
 801b8fa:	b21c      	sxth	r4, r3
 801b8fc:	4620      	mov	r0, r4
 801b8fe:	bd10      	pop	{r4, pc}

0801b900 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801b900:	b510      	push	{r4, lr}
 801b902:	4298      	cmp	r0, r3
 801b904:	eb01 0402 	add.w	r4, r1, r2
 801b908:	b224      	sxth	r4, r4
 801b90a:	d226      	bcs.n	801b95a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801b90c:	b32b      	cbz	r3, 801b95a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801b90e:	ee07 2a90 	vmov	s15, r2
 801b912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b916:	ee07 0a90 	vmov	s15, r0
 801b91a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b91e:	ee07 3a90 	vmov	s15, r3
 801b922:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801b926:	ee07 1a90 	vmov	s15, r1
 801b92a:	ee67 6a26 	vmul.f32	s13, s14, s13
 801b92e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b932:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801b936:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b93a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b93e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b946:	bfcc      	ite	gt
 801b948:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801b94c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801b950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b954:	ee17 3a90 	vmov	r3, s15
 801b958:	b21c      	sxth	r4, r3
 801b95a:	4620      	mov	r0, r4
 801b95c:	bd10      	pop	{r4, pc}

0801b95e <_ZN8touchgfx12TextProviderC1Ev>:
 801b95e:	2300      	movs	r3, #0
 801b960:	2201      	movs	r2, #1
 801b962:	b510      	push	{r4, lr}
 801b964:	4604      	mov	r4, r0
 801b966:	60c3      	str	r3, [r0, #12]
 801b968:	7403      	strb	r3, [r0, #16]
 801b96a:	82c3      	strh	r3, [r0, #22]
 801b96c:	8303      	strh	r3, [r0, #24]
 801b96e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801b970:	8603      	strh	r3, [r0, #48]	; 0x30
 801b972:	86c3      	strh	r3, [r0, #54]	; 0x36
 801b974:	8703      	strh	r3, [r0, #56]	; 0x38
 801b976:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b978:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801b97c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801b980:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801b984:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801b988:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801b98c:	e9c0 3300 	strd	r3, r3, [r0]
 801b990:	f7f8 fbba 	bl	8014108 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b994:	4620      	mov	r0, r4
 801b996:	bd10      	pop	{r4, pc}

0801b998 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b998:	b530      	push	{r4, r5, lr}
 801b99a:	2500      	movs	r5, #0
 801b99c:	2401      	movs	r4, #1
 801b99e:	6843      	ldr	r3, [r0, #4]
 801b9a0:	b913      	cbnz	r3, 801b9a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801b9a2:	6803      	ldr	r3, [r0, #0]
 801b9a4:	b1f3      	cbz	r3, 801b9e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b9a6:	6043      	str	r3, [r0, #4]
 801b9a8:	7c03      	ldrb	r3, [r0, #16]
 801b9aa:	b143      	cbz	r3, 801b9be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801b9ac:	68c3      	ldr	r3, [r0, #12]
 801b9ae:	b12b      	cbz	r3, 801b9bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b9b0:	881a      	ldrh	r2, [r3, #0]
 801b9b2:	b11a      	cbz	r2, 801b9bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b9b4:	1c9a      	adds	r2, r3, #2
 801b9b6:	60c2      	str	r2, [r0, #12]
 801b9b8:	8818      	ldrh	r0, [r3, #0]
 801b9ba:	bd30      	pop	{r4, r5, pc}
 801b9bc:	7405      	strb	r5, [r0, #16]
 801b9be:	6843      	ldr	r3, [r0, #4]
 801b9c0:	8819      	ldrh	r1, [r3, #0]
 801b9c2:	b179      	cbz	r1, 801b9e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b9c4:	1c9a      	adds	r2, r3, #2
 801b9c6:	2902      	cmp	r1, #2
 801b9c8:	6042      	str	r2, [r0, #4]
 801b9ca:	d1f5      	bne.n	801b9b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801b9cc:	6883      	ldr	r3, [r0, #8]
 801b9ce:	1d1a      	adds	r2, r3, #4
 801b9d0:	6082      	str	r2, [r0, #8]
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	60c3      	str	r3, [r0, #12]
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d0e1      	beq.n	801b99e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b9da:	881b      	ldrh	r3, [r3, #0]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d0de      	beq.n	801b99e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b9e0:	7404      	strb	r4, [r0, #16]
 801b9e2:	e7dc      	b.n	801b99e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b9e4:	2000      	movs	r0, #0
 801b9e6:	e7e8      	b.n	801b9ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801b9e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801b9e8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b9ea:	2300      	movs	r3, #0
 801b9ec:	6082      	str	r2, [r0, #8]
 801b9ee:	6001      	str	r1, [r0, #0]
 801b9f0:	6043      	str	r3, [r0, #4]
 801b9f2:	60c3      	str	r3, [r0, #12]
 801b9f4:	7403      	strb	r3, [r0, #16]
 801b9f6:	8603      	strh	r3, [r0, #48]	; 0x30
 801b9f8:	8303      	strh	r3, [r0, #24]
 801b9fa:	8703      	strh	r3, [r0, #56]	; 0x38
 801b9fc:	b410      	push	{r4}
 801b9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba02:	f7f8 bb81 	b.w	8014108 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ba06 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801ba06:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba08:	4605      	mov	r5, r0
 801ba0a:	4608      	mov	r0, r1
 801ba0c:	b1f1      	cbz	r1, 801ba4c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801ba0e:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801ba12:	460b      	mov	r3, r1
 801ba14:	f101 0708 	add.w	r7, r1, #8
 801ba18:	4622      	mov	r2, r4
 801ba1a:	6818      	ldr	r0, [r3, #0]
 801ba1c:	3308      	adds	r3, #8
 801ba1e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ba22:	4626      	mov	r6, r4
 801ba24:	42bb      	cmp	r3, r7
 801ba26:	c603      	stmia	r6!, {r0, r1}
 801ba28:	4634      	mov	r4, r6
 801ba2a:	d1f6      	bne.n	801ba1a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ba2c:	6818      	ldr	r0, [r3, #0]
 801ba2e:	6030      	str	r0, [r6, #0]
 801ba30:	4610      	mov	r0, r2
 801ba32:	889b      	ldrh	r3, [r3, #4]
 801ba34:	80b3      	strh	r3, [r6, #4]
 801ba36:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801ba3a:	015b      	lsls	r3, r3, #5
 801ba3c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ba40:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801ba44:	430b      	orrs	r3, r1
 801ba46:	425b      	negs	r3, r3
 801ba48:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801ba4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ba4e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ba4e:	b538      	push	{r3, r4, r5, lr}
 801ba50:	460c      	mov	r4, r1
 801ba52:	6811      	ldr	r1, [r2, #0]
 801ba54:	4610      	mov	r0, r2
 801ba56:	68cd      	ldr	r5, [r1, #12]
 801ba58:	4619      	mov	r1, r3
 801ba5a:	47a8      	blx	r5
 801ba5c:	2800      	cmp	r0, #0
 801ba5e:	bf08      	it	eq
 801ba60:	4620      	moveq	r0, r4
 801ba62:	bd38      	pop	{r3, r4, r5, pc}

0801ba64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba66:	4604      	mov	r4, r0
 801ba68:	4615      	mov	r5, r2
 801ba6a:	4608      	mov	r0, r1
 801ba6c:	b93a      	cbnz	r2, 801ba7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ba6e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801ba72:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801ba76:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801ba7a:	4628      	mov	r0, r5
 801ba7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba7e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ba82:	8893      	ldrh	r3, [r2, #4]
 801ba84:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801ba88:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ba8c:	79ee      	ldrb	r6, [r5, #7]
 801ba8e:	4316      	orrs	r6, r2
 801ba90:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801ba94:	189a      	adds	r2, r3, r2
 801ba96:	b2b7      	uxth	r7, r6
 801ba98:	b291      	uxth	r1, r2
 801ba9a:	291d      	cmp	r1, #29
 801ba9c:	f200 8084 	bhi.w	801bba8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801baa0:	2201      	movs	r2, #1
 801baa2:	10f6      	asrs	r6, r6, #3
 801baa4:	408a      	lsls	r2, r1
 801baa6:	4978      	ldr	r1, [pc, #480]	; (801bc88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801baa8:	420a      	tst	r2, r1
 801baaa:	d12e      	bne.n	801bb0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801baac:	f412 7f60 	tst.w	r2, #896	; 0x380
 801bab0:	d07a      	beq.n	801bba8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801bab2:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801bab6:	462b      	mov	r3, r5
 801bab8:	f105 0e08 	add.w	lr, r5, #8
 801babc:	4615      	mov	r5, r2
 801babe:	6818      	ldr	r0, [r3, #0]
 801bac0:	3308      	adds	r3, #8
 801bac2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bac6:	4694      	mov	ip, r2
 801bac8:	4573      	cmp	r3, lr
 801baca:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bace:	4662      	mov	r2, ip
 801bad0:	d1f5      	bne.n	801babe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801bad2:	6818      	ldr	r0, [r3, #0]
 801bad4:	f8cc 0000 	str.w	r0, [ip]
 801bad8:	889b      	ldrh	r3, [r3, #4]
 801bada:	f8ac 3004 	strh.w	r3, [ip, #4]
 801bade:	b2b3      	uxth	r3, r6
 801bae0:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801bae4:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801bae8:	1aca      	subs	r2, r1, r3
 801baea:	1bcf      	subs	r7, r1, r7
 801baec:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801baf0:	b292      	uxth	r2, r2
 801baf2:	1afb      	subs	r3, r7, r3
 801baf4:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801baf8:	10d2      	asrs	r2, r2, #3
 801bafa:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801bafe:	4302      	orrs	r2, r0
 801bb00:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801bb04:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801bb08:	e7b7      	b.n	801ba7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bb0a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801bb0c:	b92b      	cbnz	r3, 801bb1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801bb0e:	4b5f      	ldr	r3, [pc, #380]	; (801bc8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801bb10:	21c0      	movs	r1, #192	; 0xc0
 801bb12:	4a5f      	ldr	r2, [pc, #380]	; (801bc90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801bb14:	485f      	ldr	r0, [pc, #380]	; (801bc94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801bb16:	f00c fdb7 	bl	8028688 <__assert_func>
 801bb1a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801bb1c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bb20:	8b59      	ldrh	r1, [r3, #26]
 801bb22:	f640 6333 	movw	r3, #3635	; 0xe33
 801bb26:	4299      	cmp	r1, r3
 801bb28:	d110      	bne.n	801bb4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801bb2a:	6803      	ldr	r3, [r0, #0]
 801bb2c:	68db      	ldr	r3, [r3, #12]
 801bb2e:	4798      	blx	r3
 801bb30:	7b41      	ldrb	r1, [r0, #13]
 801bb32:	00cb      	lsls	r3, r1, #3
 801bb34:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bb38:	7a03      	ldrb	r3, [r0, #8]
 801bb3a:	0648      	lsls	r0, r1, #25
 801bb3c:	ea43 0302 	orr.w	r3, r3, r2
 801bb40:	bf44      	itt	mi
 801bb42:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bb46:	b21b      	sxthmi	r3, r3
 801bb48:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bb4c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801bb50:	462a      	mov	r2, r5
 801bb52:	f105 0c08 	add.w	ip, r5, #8
 801bb56:	443b      	add	r3, r7
 801bb58:	4433      	add	r3, r6
 801bb5a:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801bb5e:	b29b      	uxth	r3, r3
 801bb60:	4635      	mov	r5, r6
 801bb62:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bb66:	6810      	ldr	r0, [r2, #0]
 801bb68:	3208      	adds	r2, #8
 801bb6a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801bb6e:	4637      	mov	r7, r6
 801bb70:	4562      	cmp	r2, ip
 801bb72:	c703      	stmia	r7!, {r0, r1}
 801bb74:	463e      	mov	r6, r7
 801bb76:	d1f6      	bne.n	801bb66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801bb78:	6810      	ldr	r0, [r2, #0]
 801bb7a:	6038      	str	r0, [r7, #0]
 801bb7c:	8892      	ldrh	r2, [r2, #4]
 801bb7e:	80ba      	strh	r2, [r7, #4]
 801bb80:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801bb84:	10db      	asrs	r3, r3, #3
 801bb86:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801bb8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bb8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bb92:	4313      	orrs	r3, r2
 801bb94:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801bb98:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801bb9c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801bba0:	1a9b      	subs	r3, r3, r2
 801bba2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801bba6:	e768      	b.n	801ba7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bba8:	f023 0204 	bic.w	r2, r3, #4
 801bbac:	f640 611b 	movw	r1, #3611	; 0xe1b
 801bbb0:	428a      	cmp	r2, r1
 801bbb2:	d003      	beq.n	801bbbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801bbb4:	f640 621d 	movw	r2, #3613	; 0xe1d
 801bbb8:	4293      	cmp	r3, r2
 801bbba:	d120      	bne.n	801bbfe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801bbbc:	3b01      	subs	r3, #1
 801bbbe:	4602      	mov	r2, r0
 801bbc0:	4629      	mov	r1, r5
 801bbc2:	4620      	mov	r0, r4
 801bbc4:	b29b      	uxth	r3, r3
 801bbc6:	f7ff ff42 	bl	801ba4e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bbca:	7b41      	ldrb	r1, [r0, #13]
 801bbcc:	00cb      	lsls	r3, r1, #3
 801bbce:	0649      	lsls	r1, r1, #25
 801bbd0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bbd4:	7a03      	ldrb	r3, [r0, #8]
 801bbd6:	ea43 0302 	orr.w	r3, r3, r2
 801bbda:	bf44      	itt	mi
 801bbdc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bbe0:	b21b      	sxthmi	r3, r3
 801bbe2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bbe6:	7b6b      	ldrb	r3, [r5, #13]
 801bbe8:	7aaa      	ldrb	r2, [r5, #10]
 801bbea:	005b      	lsls	r3, r3, #1
 801bbec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bbf0:	4313      	orrs	r3, r2
 801bbf2:	115a      	asrs	r2, r3, #5
 801bbf4:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bbf8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801bbfc:	e035      	b.n	801bc6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801bbfe:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801bc02:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801bc06:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801bc0a:	7a2a      	ldrb	r2, [r5, #8]
 801bc0c:	ea42 0201 	orr.w	r2, r2, r1
 801bc10:	f640 6109 	movw	r1, #3593	; 0xe09
 801bc14:	bf1c      	itt	ne
 801bc16:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801bc1a:	b212      	sxthne	r2, r2
 801bc1c:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801bc20:	f023 0210 	bic.w	r2, r3, #16
 801bc24:	428a      	cmp	r2, r1
 801bc26:	d003      	beq.n	801bc30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801bc28:	f640 6213 	movw	r2, #3603	; 0xe13
 801bc2c:	4293      	cmp	r3, r2
 801bc2e:	d129      	bne.n	801bc84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801bc30:	7b6e      	ldrb	r6, [r5, #13]
 801bc32:	4629      	mov	r1, r5
 801bc34:	0076      	lsls	r6, r6, #1
 801bc36:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801bc3a:	7aae      	ldrb	r6, [r5, #10]
 801bc3c:	4316      	orrs	r6, r2
 801bc3e:	f640 6213 	movw	r2, #3603	; 0xe13
 801bc42:	4293      	cmp	r3, r2
 801bc44:	4602      	mov	r2, r0
 801bc46:	4620      	mov	r0, r4
 801bc48:	bf16      	itet	ne
 801bc4a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bc4e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801bc52:	b29b      	uxthne	r3, r3
 801bc54:	f7ff fefb 	bl	801ba4e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bc58:	7b43      	ldrb	r3, [r0, #13]
 801bc5a:	7a82      	ldrb	r2, [r0, #10]
 801bc5c:	005b      	lsls	r3, r3, #1
 801bc5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc62:	4313      	orrs	r3, r2
 801bc64:	1af6      	subs	r6, r6, r3
 801bc66:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801bc6a:	7b69      	ldrb	r1, [r5, #13]
 801bc6c:	00cb      	lsls	r3, r1, #3
 801bc6e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bc72:	7a2b      	ldrb	r3, [r5, #8]
 801bc74:	4313      	orrs	r3, r2
 801bc76:	064a      	lsls	r2, r1, #25
 801bc78:	bf44      	itt	mi
 801bc7a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bc7e:	b21b      	sxthmi	r3, r3
 801bc80:	1bdb      	subs	r3, r3, r7
 801bc82:	e73f      	b.n	801bb04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801bc84:	2300      	movs	r3, #0
 801bc86:	e7b7      	b.n	801bbf8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801bc88:	3fc00079 	.word	0x3fc00079
 801bc8c:	0802c374 	.word	0x0802c374
 801bc90:	0802c5e6 	.word	0x0802c5e6
 801bc94:	0802c37d 	.word	0x0802c37d

0801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801bc98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc9c:	4604      	mov	r4, r0
 801bc9e:	b942      	cbnz	r2, 801bcb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bca4:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801bca8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801bcac:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801bcb0:	e046      	b.n	801bd40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801bcb2:	7b51      	ldrb	r1, [r2, #13]
 801bcb4:	8893      	ldrh	r3, [r2, #4]
 801bcb6:	010f      	lsls	r7, r1, #4
 801bcb8:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801bcbc:	79d7      	ldrb	r7, [r2, #7]
 801bcbe:	4307      	orrs	r7, r0
 801bcc0:	2f04      	cmp	r7, #4
 801bcc2:	b2bd      	uxth	r5, r7
 801bcc4:	bfcc      	ite	gt
 801bcc6:	08bf      	lsrgt	r7, r7, #2
 801bcc8:	2701      	movle	r7, #1
 801bcca:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801bcce:	f200 80ab 	bhi.w	801be28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801bcd2:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801bcd6:	4283      	cmp	r3, r0
 801bcd8:	d216      	bcs.n	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bcda:	f240 605b 	movw	r0, #1627	; 0x65b
 801bcde:	4283      	cmp	r3, r0
 801bce0:	d859      	bhi.n	801bd96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801bce2:	f240 6057 	movw	r0, #1623	; 0x657
 801bce6:	4283      	cmp	r3, r0
 801bce8:	d20e      	bcs.n	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bcea:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bcee:	d24a      	bcs.n	801bd86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801bcf0:	f240 604e 	movw	r0, #1614	; 0x64e
 801bcf4:	4283      	cmp	r3, r0
 801bcf6:	d207      	bcs.n	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bcf8:	f240 601a 	movw	r0, #1562	; 0x61a
 801bcfc:	4283      	cmp	r3, r0
 801bcfe:	d02a      	beq.n	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bd00:	d821      	bhi.n	801bd46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801bd02:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801bd06:	d35b      	bcc.n	801bdc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801bd08:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801bd0c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bd10:	f040 80d0 	bne.w	801beb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801bd14:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801bd18:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bd1c:	f040 80ca 	bne.w	801beb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801bd20:	00cb      	lsls	r3, r1, #3
 801bd22:	0649      	lsls	r1, r1, #25
 801bd24:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bd28:	7a13      	ldrb	r3, [r2, #8]
 801bd2a:	ea43 0300 	orr.w	r3, r3, r0
 801bd2e:	bf44      	itt	mi
 801bd30:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bd34:	b21b      	sxthmi	r3, r3
 801bd36:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bd3a:	1b5d      	subs	r5, r3, r5
 801bd3c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801bd40:	4610      	mov	r0, r2
 801bd42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd46:	f240 604b 	movw	r0, #1611	; 0x64b
 801bd4a:	4283      	cmp	r3, r0
 801bd4c:	d338      	bcc.n	801bdc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801bd4e:	f240 604c 	movw	r0, #1612	; 0x64c
 801bd52:	4283      	cmp	r3, r0
 801bd54:	d9d8      	bls.n	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bd56:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801bd5a:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801bd5e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bd62:	f040 80f2 	bne.w	801bf4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801bd66:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bd6a:	f040 80ee 	bne.w	801bf4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801bd6e:	00cb      	lsls	r3, r1, #3
 801bd70:	064e      	lsls	r6, r1, #25
 801bd72:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bd76:	7a13      	ldrb	r3, [r2, #8]
 801bd78:	ea43 0300 	orr.w	r3, r3, r0
 801bd7c:	bf44      	itt	mi
 801bd7e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bd82:	b21b      	sxthmi	r3, r3
 801bd84:	e7d9      	b.n	801bd3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801bd86:	f240 6054 	movw	r0, #1620	; 0x654
 801bd8a:	4283      	cmp	r3, r0
 801bd8c:	d8e3      	bhi.n	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bd8e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bd92:	d9e0      	bls.n	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bd94:	e7b8      	b.n	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bd96:	f240 6074 	movw	r0, #1652	; 0x674
 801bd9a:	4283      	cmp	r3, r0
 801bd9c:	d0b4      	beq.n	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bd9e:	d82d      	bhi.n	801bdfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801bda0:	f240 605e 	movw	r0, #1630	; 0x65e
 801bda4:	4283      	cmp	r3, r0
 801bda6:	d804      	bhi.n	801bdb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801bda8:	f240 605d 	movw	r0, #1629	; 0x65d
 801bdac:	4283      	cmp	r3, r0
 801bdae:	d3d2      	bcc.n	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bdb0:	e7aa      	b.n	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bdb2:	f240 605f 	movw	r0, #1631	; 0x65f
 801bdb6:	4283      	cmp	r3, r0
 801bdb8:	d0cd      	beq.n	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bdba:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801bdbe:	d0a3      	beq.n	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bdc0:	00cb      	lsls	r3, r1, #3
 801bdc2:	0649      	lsls	r1, r1, #25
 801bdc4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bdc8:	7a13      	ldrb	r3, [r2, #8]
 801bdca:	ea43 0300 	orr.w	r3, r3, r0
 801bdce:	bf44      	itt	mi
 801bdd0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bdd4:	b21b      	sxthmi	r3, r3
 801bdd6:	1b5d      	subs	r5, r3, r5
 801bdd8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bddc:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801bde0:	7b53      	ldrb	r3, [r2, #13]
 801bde2:	015b      	lsls	r3, r3, #5
 801bde4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bde8:	7993      	ldrb	r3, [r2, #6]
 801bdea:	430b      	orrs	r3, r1
 801bdec:	2105      	movs	r1, #5
 801bdee:	005b      	lsls	r3, r3, #1
 801bdf0:	fb93 f3f1 	sdiv	r3, r3, r1
 801bdf4:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801bdf8:	440b      	add	r3, r1
 801bdfa:	e757      	b.n	801bcac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801bdfc:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801be00:	4283      	cmp	r3, r0
 801be02:	d809      	bhi.n	801be18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801be04:	f240 60df 	movw	r0, #1759	; 0x6df
 801be08:	4283      	cmp	r3, r0
 801be0a:	f4bf af7d 	bcs.w	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801be0e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801be12:	2b05      	cmp	r3, #5
 801be14:	d8d4      	bhi.n	801bdc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801be16:	e777      	b.n	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801be18:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801be1c:	4283      	cmp	r3, r0
 801be1e:	d09a      	beq.n	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801be20:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801be24:	4283      	cmp	r3, r0
 801be26:	e7ca      	b.n	801bdbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801be28:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801be2c:	d22b      	bcs.n	801be86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801be2e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801be32:	4283      	cmp	r3, r0
 801be34:	d28f      	bcs.n	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801be36:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801be3a:	4283      	cmp	r3, r0
 801be3c:	d816      	bhi.n	801be6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801be3e:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801be42:	4283      	cmp	r3, r0
 801be44:	f4bf af60 	bcs.w	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801be48:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801be4c:	4283      	cmp	r3, r0
 801be4e:	d80a      	bhi.n	801be66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801be50:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801be54:	4283      	cmp	r3, r0
 801be56:	f4bf af57 	bcs.w	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801be5a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801be5e:	4283      	cmp	r3, r0
 801be60:	f43f af79 	beq.w	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801be64:	e7ac      	b.n	801bdc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801be66:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801be6a:	e7f8      	b.n	801be5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801be6c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801be70:	4283      	cmp	r3, r0
 801be72:	d802      	bhi.n	801be7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801be74:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801be78:	e798      	b.n	801bdac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801be7a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801be7e:	4283      	cmp	r3, r0
 801be80:	f47f af42 	bne.w	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801be84:	e767      	b.n	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801be86:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801be8a:	4283      	cmp	r3, r0
 801be8c:	f43f af63 	beq.w	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801be90:	d802      	bhi.n	801be98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801be92:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801be96:	e7f2      	b.n	801be7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801be98:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801be9c:	4283      	cmp	r3, r0
 801be9e:	d805      	bhi.n	801beac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801bea0:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801bea4:	4283      	cmp	r3, r0
 801bea6:	f4ff af2f 	bcc.w	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801beaa:	e754      	b.n	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801beac:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801beb0:	4283      	cmp	r3, r0
 801beb2:	e7af      	b.n	801be14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801beb4:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801beb8:	4617      	mov	r7, r2
 801beba:	f102 0808 	add.w	r8, r2, #8
 801bebe:	4666      	mov	r6, ip
 801bec0:	6838      	ldr	r0, [r7, #0]
 801bec2:	3708      	adds	r7, #8
 801bec4:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801bec8:	46e6      	mov	lr, ip
 801beca:	4547      	cmp	r7, r8
 801becc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801bed0:	46f4      	mov	ip, lr
 801bed2:	d1f5      	bne.n	801bec0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801bed4:	6838      	ldr	r0, [r7, #0]
 801bed6:	f8ce 0000 	str.w	r0, [lr]
 801beda:	88b9      	ldrh	r1, [r7, #4]
 801bedc:	f8ae 1004 	strh.w	r1, [lr, #4]
 801bee0:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801bee4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bee8:	d009      	beq.n	801befe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801beea:	7b51      	ldrb	r1, [r2, #13]
 801beec:	7992      	ldrb	r2, [r2, #6]
 801beee:	0149      	lsls	r1, r1, #5
 801bef0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bef4:	4311      	orrs	r1, r2
 801bef6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801befa:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801befe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bf02:	d00d      	beq.n	801bf20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801bf04:	442b      	add	r3, r5
 801bf06:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801bf0a:	b29b      	uxth	r3, r3
 801bf0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bf10:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801bf14:	10db      	asrs	r3, r3, #3
 801bf16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bf1a:	4313      	orrs	r3, r2
 801bf1c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801bf20:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801bf24:	00cb      	lsls	r3, r1, #3
 801bf26:	064f      	lsls	r7, r1, #25
 801bf28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bf2c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801bf30:	ea43 0302 	orr.w	r3, r3, r2
 801bf34:	bf44      	itt	mi
 801bf36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bf3a:	b21b      	sxthmi	r3, r3
 801bf3c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bf40:	1b5d      	subs	r5, r3, r5
 801bf42:	4632      	mov	r2, r6
 801bf44:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801bf48:	e6fa      	b.n	801bd40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801bf4a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801bf4e:	4694      	mov	ip, r2
 801bf50:	f102 0908 	add.w	r9, r2, #8
 801bf54:	4676      	mov	r6, lr
 801bf56:	f8dc 0000 	ldr.w	r0, [ip]
 801bf5a:	f10c 0c08 	add.w	ip, ip, #8
 801bf5e:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801bf62:	46f0      	mov	r8, lr
 801bf64:	45cc      	cmp	ip, r9
 801bf66:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801bf6a:	46c6      	mov	lr, r8
 801bf6c:	d1f3      	bne.n	801bf56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801bf6e:	f8dc 0000 	ldr.w	r0, [ip]
 801bf72:	f8c8 0000 	str.w	r0, [r8]
 801bf76:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801bf7a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801bf7e:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801bf82:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bf86:	d009      	beq.n	801bf9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801bf88:	7b51      	ldrb	r1, [r2, #13]
 801bf8a:	7992      	ldrb	r2, [r2, #6]
 801bf8c:	0149      	lsls	r1, r1, #5
 801bf8e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bf92:	4311      	orrs	r1, r2
 801bf94:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801bf98:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801bf9c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bfa0:	d00d      	beq.n	801bfbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801bfa2:	1bdb      	subs	r3, r3, r7
 801bfa4:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801bfa8:	b29b      	uxth	r3, r3
 801bfaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bfae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801bfb2:	10db      	asrs	r3, r3, #3
 801bfb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bfb8:	4313      	orrs	r3, r2
 801bfba:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801bfbe:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801bfc2:	00cb      	lsls	r3, r1, #3
 801bfc4:	0648      	lsls	r0, r1, #25
 801bfc6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bfca:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801bfce:	ea43 0302 	orr.w	r3, r3, r2
 801bfd2:	bf44      	itt	mi
 801bfd4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bfd8:	b21b      	sxthmi	r3, r3
 801bfda:	e7b1      	b.n	801bf40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801bfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801bfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfe0:	461e      	mov	r6, r3
 801bfe2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801bfe4:	4604      	mov	r4, r0
 801bfe6:	4617      	mov	r7, r2
 801bfe8:	b92b      	cbnz	r3, 801bff6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801bfea:	4b25      	ldr	r3, [pc, #148]	; (801c080 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801bfec:	21c0      	movs	r1, #192	; 0xc0
 801bfee:	4a25      	ldr	r2, [pc, #148]	; (801c084 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801bff0:	4825      	ldr	r0, [pc, #148]	; (801c088 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801bff2:	f00c fb49 	bl	8028688 <__assert_func>
 801bff6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801bff8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bffc:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c000:	f7f7 ffdc 	bl	8013fbc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c004:	4605      	mov	r5, r0
 801c006:	b918      	cbnz	r0, 801c010 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801c008:	6030      	str	r0, [r6, #0]
 801c00a:	4628      	mov	r0, r5
 801c00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c010:	683b      	ldr	r3, [r7, #0]
 801c012:	4601      	mov	r1, r0
 801c014:	4638      	mov	r0, r7
 801c016:	68db      	ldr	r3, [r3, #12]
 801c018:	4798      	blx	r3
 801c01a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c01e:	4602      	mov	r2, r0
 801c020:	6030      	str	r0, [r6, #0]
 801c022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c026:	d213      	bcs.n	801c050 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801c028:	4643      	mov	r3, r8
 801c02a:	4639      	mov	r1, r7
 801c02c:	4620      	mov	r0, r4
 801c02e:	f7ff fe33 	bl	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c032:	6030      	str	r0, [r6, #0]
 801c034:	6833      	ldr	r3, [r6, #0]
 801c036:	b143      	cbz	r3, 801c04a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801c038:	7b5a      	ldrb	r2, [r3, #13]
 801c03a:	7a9b      	ldrb	r3, [r3, #10]
 801c03c:	0052      	lsls	r2, r2, #1
 801c03e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c042:	4313      	orrs	r3, r2
 801c044:	bf0c      	ite	eq
 801c046:	2301      	moveq	r3, #1
 801c048:	2300      	movne	r3, #0
 801c04a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c04e:	e7dc      	b.n	801c00a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801c050:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c054:	b29b      	uxth	r3, r3
 801c056:	2b7f      	cmp	r3, #127	; 0x7f
 801c058:	d804      	bhi.n	801c064 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801c05a:	4639      	mov	r1, r7
 801c05c:	4620      	mov	r0, r4
 801c05e:	f7ff fd01 	bl	801ba64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c062:	e7e6      	b.n	801c032 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c064:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d0e3      	beq.n	801c034 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c06c:	f640 1302 	movw	r3, #2306	; 0x902
 801c070:	429d      	cmp	r5, r3
 801c072:	d1df      	bne.n	801c034 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c074:	4601      	mov	r1, r0
 801c076:	4620      	mov	r0, r4
 801c078:	f7ff fcc5 	bl	801ba06 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c07c:	e7d9      	b.n	801c032 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c07e:	bf00      	nop
 801c080:	0802c374 	.word	0x0802c374
 801c084:	0802c5e6 	.word	0x0802c5e6
 801c088:	0802c37d 	.word	0x0802c37d

0801c08c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c090:	461e      	mov	r6, r3
 801c092:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c094:	4604      	mov	r4, r0
 801c096:	4617      	mov	r7, r2
 801c098:	b92b      	cbnz	r3, 801c0a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801c09a:	4b26      	ldr	r3, [pc, #152]	; (801c134 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801c09c:	21c0      	movs	r1, #192	; 0xc0
 801c09e:	4a26      	ldr	r2, [pc, #152]	; (801c138 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801c0a0:	4826      	ldr	r0, [pc, #152]	; (801c13c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801c0a2:	f00c faf1 	bl	8028688 <__assert_func>
 801c0a6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c0a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c0ac:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c0b0:	f7f7 ff84 	bl	8013fbc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c0b4:	4605      	mov	r5, r0
 801c0b6:	b918      	cbnz	r0, 801c0c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801c0b8:	6030      	str	r0, [r6, #0]
 801c0ba:	4628      	mov	r0, r5
 801c0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c0c0:	683b      	ldr	r3, [r7, #0]
 801c0c2:	4601      	mov	r1, r0
 801c0c4:	4638      	mov	r0, r7
 801c0c6:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801c0ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c0ce:	47c8      	blx	r9
 801c0d0:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c0d4:	4602      	mov	r2, r0
 801c0d6:	6030      	str	r0, [r6, #0]
 801c0d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c0dc:	d213      	bcs.n	801c106 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801c0de:	4643      	mov	r3, r8
 801c0e0:	4639      	mov	r1, r7
 801c0e2:	4620      	mov	r0, r4
 801c0e4:	f7ff fdd8 	bl	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c0e8:	6030      	str	r0, [r6, #0]
 801c0ea:	6833      	ldr	r3, [r6, #0]
 801c0ec:	b143      	cbz	r3, 801c100 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801c0ee:	7b5a      	ldrb	r2, [r3, #13]
 801c0f0:	7a9b      	ldrb	r3, [r3, #10]
 801c0f2:	0052      	lsls	r2, r2, #1
 801c0f4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c0f8:	4313      	orrs	r3, r2
 801c0fa:	bf0c      	ite	eq
 801c0fc:	2301      	moveq	r3, #1
 801c0fe:	2300      	movne	r3, #0
 801c100:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c104:	e7d9      	b.n	801c0ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801c106:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c10a:	b29b      	uxth	r3, r3
 801c10c:	2b7f      	cmp	r3, #127	; 0x7f
 801c10e:	d804      	bhi.n	801c11a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801c110:	4639      	mov	r1, r7
 801c112:	4620      	mov	r0, r4
 801c114:	f7ff fca6 	bl	801ba64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c118:	e7e6      	b.n	801c0e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801c11a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d0e3      	beq.n	801c0ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801c122:	f640 1302 	movw	r3, #2306	; 0x902
 801c126:	429d      	cmp	r5, r3
 801c128:	d1df      	bne.n	801c0ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801c12a:	4601      	mov	r1, r0
 801c12c:	4620      	mov	r0, r4
 801c12e:	f7ff fc6a 	bl	801ba06 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c132:	e7d9      	b.n	801c0e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801c134:	0802c374 	.word	0x0802c374
 801c138:	0802c5e6 	.word	0x0802c5e6
 801c13c:	0802c37d 	.word	0x0802c37d

0801c140 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c140:	b510      	push	{r4, lr}
 801c142:	4604      	mov	r4, r0
 801c144:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801c146:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c148:	b9d9      	cbnz	r1, 801c182 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801c14a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c14c:	2b0a      	cmp	r3, #10
 801c14e:	d036      	beq.n	801c1be <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c150:	4620      	mov	r0, r4
 801c152:	f7ff fc21 	bl	801b998 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c156:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c158:	2b09      	cmp	r3, #9
 801c15a:	d906      	bls.n	801c16a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801c15c:	4b18      	ldr	r3, [pc, #96]	; (801c1c0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801c15e:	f44f 7182 	mov.w	r1, #260	; 0x104
 801c162:	4a18      	ldr	r2, [pc, #96]	; (801c1c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801c164:	4818      	ldr	r0, [pc, #96]	; (801c1c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801c166:	f00c fa8f 	bl	8028688 <__assert_func>
 801c16a:	1c5a      	adds	r2, r3, #1
 801c16c:	8622      	strh	r2, [r4, #48]	; 0x30
 801c16e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c170:	4413      	add	r3, r2
 801c172:	b29b      	uxth	r3, r3
 801c174:	2b09      	cmp	r3, #9
 801c176:	bf88      	it	hi
 801c178:	3b0a      	subhi	r3, #10
 801c17a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c17e:	8358      	strh	r0, [r3, #26]
 801c180:	e7e3      	b.n	801c14a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801c182:	2b0a      	cmp	r3, #10
 801c184:	d01b      	beq.n	801c1be <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c186:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c188:	3901      	subs	r1, #1
 801c18a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c18e:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801c190:	8721      	strh	r1, [r4, #56]	; 0x38
 801c192:	1c51      	adds	r1, r2, #1
 801c194:	b289      	uxth	r1, r1
 801c196:	2901      	cmp	r1, #1
 801c198:	bf8a      	itet	hi
 801c19a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c19e:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801c1a0:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801c1a2:	2b09      	cmp	r3, #9
 801c1a4:	d8da      	bhi.n	801c15c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801c1a6:	1c5a      	adds	r2, r3, #1
 801c1a8:	8622      	strh	r2, [r4, #48]	; 0x30
 801c1aa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c1ac:	4413      	add	r3, r2
 801c1ae:	b29b      	uxth	r3, r3
 801c1b0:	2b09      	cmp	r3, #9
 801c1b2:	bf88      	it	hi
 801c1b4:	3b0a      	subhi	r3, #10
 801c1b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c1ba:	8358      	strh	r0, [r3, #26]
 801c1bc:	e7c2      	b.n	801c144 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c1be:	bd10      	pop	{r4, pc}
 801c1c0:	0802c3a9 	.word	0x0802c3a9
 801c1c4:	0802c73c 	.word	0x0802c73c
 801c1c8:	0802c37d 	.word	0x0802c37d

0801c1cc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c1cc:	b538      	push	{r3, r4, r5, lr}
 801c1ce:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801c1d0:	4604      	mov	r4, r0
 801c1d2:	b92a      	cbnz	r2, 801c1e0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801c1d4:	4b13      	ldr	r3, [pc, #76]	; (801c224 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801c1d6:	21d5      	movs	r1, #213	; 0xd5
 801c1d8:	4a13      	ldr	r2, [pc, #76]	; (801c228 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801c1da:	4814      	ldr	r0, [pc, #80]	; (801c22c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801c1dc:	f00c fa54 	bl	8028688 <__assert_func>
 801c1e0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c1e2:	3a01      	subs	r2, #1
 801c1e4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801c1e8:	8b4d      	ldrh	r5, [r1, #26]
 801c1ea:	8602      	strh	r2, [r0, #48]	; 0x30
 801c1ec:	1c5a      	adds	r2, r3, #1
 801c1ee:	b292      	uxth	r2, r2
 801c1f0:	2a09      	cmp	r2, #9
 801c1f2:	bf8a      	itet	hi
 801c1f4:	3b09      	subhi	r3, #9
 801c1f6:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801c1f8:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801c1fa:	f7ff ffa1 	bl	801c140 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c1fe:	8b23      	ldrh	r3, [r4, #24]
 801c200:	2b01      	cmp	r3, #1
 801c202:	bf9c      	itt	ls
 801c204:	3301      	addls	r3, #1
 801c206:	8323      	strhls	r3, [r4, #24]
 801c208:	8ae3      	ldrh	r3, [r4, #22]
 801c20a:	b90b      	cbnz	r3, 801c210 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801c20c:	2302      	movs	r3, #2
 801c20e:	82e3      	strh	r3, [r4, #22]
 801c210:	8ae3      	ldrh	r3, [r4, #22]
 801c212:	4628      	mov	r0, r5
 801c214:	3b01      	subs	r3, #1
 801c216:	b29b      	uxth	r3, r3
 801c218:	82e3      	strh	r3, [r4, #22]
 801c21a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c21e:	8265      	strh	r5, [r4, #18]
 801c220:	bd38      	pop	{r3, r4, r5, pc}
 801c222:	bf00      	nop
 801c224:	0802c374 	.word	0x0802c374
 801c228:	0802c691 	.word	0x0802c691
 801c22c:	0802c37d 	.word	0x0802c37d

0801c230 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c230:	428a      	cmp	r2, r1
 801c232:	b538      	push	{r3, r4, r5, lr}
 801c234:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801c236:	d90c      	bls.n	801c252 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801c238:	b92c      	cbnz	r4, 801c246 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801c23a:	4b1c      	ldr	r3, [pc, #112]	; (801c2ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801c23c:	21e1      	movs	r1, #225	; 0xe1
 801c23e:	4a1c      	ldr	r2, [pc, #112]	; (801c2b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801c240:	481c      	ldr	r0, [pc, #112]	; (801c2b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801c242:	f00c fa21 	bl	8028688 <__assert_func>
 801c246:	3c01      	subs	r4, #1
 801c248:	4b1b      	ldr	r3, [pc, #108]	; (801c2b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801c24a:	4a1c      	ldr	r2, [pc, #112]	; (801c2bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801c24c:	21c5      	movs	r1, #197	; 0xc5
 801c24e:	8604      	strh	r4, [r0, #48]	; 0x30
 801c250:	e7f6      	b.n	801c240 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c252:	428c      	cmp	r4, r1
 801c254:	d203      	bcs.n	801c25e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801c256:	4b1a      	ldr	r3, [pc, #104]	; (801c2c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801c258:	21cb      	movs	r1, #203	; 0xcb
 801c25a:	4a1a      	ldr	r2, [pc, #104]	; (801c2c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801c25c:	e7f0      	b.n	801c240 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c25e:	1a64      	subs	r4, r4, r1
 801c260:	250a      	movs	r5, #10
 801c262:	8604      	strh	r4, [r0, #48]	; 0x30
 801c264:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801c266:	4421      	add	r1, r4
 801c268:	b289      	uxth	r1, r1
 801c26a:	2909      	cmp	r1, #9
 801c26c:	bf88      	it	hi
 801c26e:	390a      	subhi	r1, #10
 801c270:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c272:	b1ba      	cbz	r2, 801c2a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801c274:	3a01      	subs	r2, #1
 801c276:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801c278:	b292      	uxth	r2, r2
 801c27a:	2909      	cmp	r1, #9
 801c27c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c280:	d903      	bls.n	801c28a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801c282:	4b11      	ldr	r3, [pc, #68]	; (801c2c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801c284:	21e6      	movs	r1, #230	; 0xe6
 801c286:	4a11      	ldr	r2, [pc, #68]	; (801c2cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801c288:	e7da      	b.n	801c240 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c28a:	3101      	adds	r1, #1
 801c28c:	8601      	strh	r1, [r0, #48]	; 0x30
 801c28e:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c290:	b901      	cbnz	r1, 801c294 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801c292:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801c294:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c296:	3901      	subs	r1, #1
 801c298:	b289      	uxth	r1, r1
 801c29a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c29c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c2a0:	834c      	strh	r4, [r1, #26]
 801c2a2:	e7e6      	b.n	801c272 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801c2a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c2a8:	f7ff bf4a 	b.w	801c140 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c2ac:	0802c374 	.word	0x0802c374
 801c2b0:	0802c46a 	.word	0x0802c46a
 801c2b4:	0802c37d 	.word	0x0802c37d
 801c2b8:	0802c3b5 	.word	0x0802c3b5
 801c2bc:	0802c514 	.word	0x0802c514
 801c2c0:	0802c3c3 	.word	0x0802c3c3
 801c2c4:	0802c7eb 	.word	0x0802c7eb
 801c2c8:	0802c3cf 	.word	0x0802c3cf
 801c2cc:	0802c3e2 	.word	0x0802c3e2

0801c2d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c2d0:	3a01      	subs	r2, #1
 801c2d2:	b570      	push	{r4, r5, r6, lr}
 801c2d4:	b292      	uxth	r2, r2
 801c2d6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801c2da:	42b2      	cmp	r2, r6
 801c2dc:	d019      	beq.n	801c312 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801c2de:	8b04      	ldrh	r4, [r0, #24]
 801c2e0:	f831 5b02 	ldrh.w	r5, [r1], #2
 801c2e4:	4294      	cmp	r4, r2
 801c2e6:	d805      	bhi.n	801c2f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801c2e8:	4b19      	ldr	r3, [pc, #100]	; (801c350 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801c2ea:	4a1a      	ldr	r2, [pc, #104]	; (801c354 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801c2ec:	21c5      	movs	r1, #197	; 0xc5
 801c2ee:	481a      	ldr	r0, [pc, #104]	; (801c358 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801c2f0:	f00c f9ca 	bl	8028688 <__assert_func>
 801c2f4:	8ac4      	ldrh	r4, [r0, #22]
 801c2f6:	4414      	add	r4, r2
 801c2f8:	3a01      	subs	r2, #1
 801c2fa:	b2a4      	uxth	r4, r4
 801c2fc:	b292      	uxth	r2, r2
 801c2fe:	2c01      	cmp	r4, #1
 801c300:	bf88      	it	hi
 801c302:	3c02      	subhi	r4, #2
 801c304:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c308:	8a64      	ldrh	r4, [r4, #18]
 801c30a:	42ac      	cmp	r4, r5
 801c30c:	d0e5      	beq.n	801c2da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801c30e:	2000      	movs	r0, #0
 801c310:	bd70      	pop	{r4, r5, r6, pc}
 801c312:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c316:	2400      	movs	r4, #0
 801c318:	4413      	add	r3, r2
 801c31a:	b2a2      	uxth	r2, r4
 801c31c:	429a      	cmp	r2, r3
 801c31e:	da14      	bge.n	801c34a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801c320:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801c322:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c326:	4296      	cmp	r6, r2
 801c328:	d802      	bhi.n	801c330 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801c32a:	4b09      	ldr	r3, [pc, #36]	; (801c350 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801c32c:	4a0b      	ldr	r2, [pc, #44]	; (801c35c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801c32e:	e7dd      	b.n	801c2ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801c330:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801c332:	3401      	adds	r4, #1
 801c334:	4432      	add	r2, r6
 801c336:	b292      	uxth	r2, r2
 801c338:	2a09      	cmp	r2, #9
 801c33a:	bf88      	it	hi
 801c33c:	3a0a      	subhi	r2, #10
 801c33e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c342:	8b52      	ldrh	r2, [r2, #26]
 801c344:	42aa      	cmp	r2, r5
 801c346:	d0e8      	beq.n	801c31a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801c348:	e7e1      	b.n	801c30e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801c34a:	2001      	movs	r0, #1
 801c34c:	e7e0      	b.n	801c310 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801c34e:	bf00      	nop
 801c350:	0802c3b5 	.word	0x0802c3b5
 801c354:	0802c86f 	.word	0x0802c86f
 801c358:	0802c37d 	.word	0x0802c37d
 801c35c:	0802c514 	.word	0x0802c514

0801c360 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c364:	4605      	mov	r5, r0
 801c366:	4616      	mov	r6, r2
 801c368:	1c8c      	adds	r4, r1, #2
 801c36a:	8809      	ldrh	r1, [r1, #0]
 801c36c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c370:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c374:	42b3      	cmp	r3, r6
 801c376:	d124      	bne.n	801c3c2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c378:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c37c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c380:	f001 070f 	and.w	r7, r1, #15
 801c384:	4652      	mov	r2, sl
 801c386:	f8cd 8000 	str.w	r8, [sp]
 801c38a:	464b      	mov	r3, r9
 801c38c:	4621      	mov	r1, r4
 801c38e:	4628      	mov	r0, r5
 801c390:	f7ff ff9e 	bl	801c2d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c394:	4683      	mov	fp, r0
 801c396:	b168      	cbz	r0, 801c3b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c398:	eb0a 0109 	add.w	r1, sl, r9
 801c39c:	463a      	mov	r2, r7
 801c39e:	4628      	mov	r0, r5
 801c3a0:	4441      	add	r1, r8
 801c3a2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c3a6:	4649      	mov	r1, r9
 801c3a8:	f7ff ff42 	bl	801c230 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c3ac:	4658      	mov	r0, fp
 801c3ae:	b003      	add	sp, #12
 801c3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3b4:	eb07 010a 	add.w	r1, r7, sl
 801c3b8:	4449      	add	r1, r9
 801c3ba:	4441      	add	r1, r8
 801c3bc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c3c0:	e7d2      	b.n	801c368 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c3c2:	f04f 0b00 	mov.w	fp, #0
 801c3c6:	e7f1      	b.n	801c3ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c3c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c3c8:	b570      	push	{r4, r5, r6, lr}
 801c3ca:	8810      	ldrh	r0, [r2, #0]
 801c3cc:	4298      	cmp	r0, r3
 801c3ce:	d817      	bhi.n	801c400 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c3d0:	1e48      	subs	r0, r1, #1
 801c3d2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c3d6:	4298      	cmp	r0, r3
 801c3d8:	d312      	bcc.n	801c400 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c3da:	2400      	movs	r4, #0
 801c3dc:	428c      	cmp	r4, r1
 801c3de:	d20f      	bcs.n	801c400 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c3e0:	1860      	adds	r0, r4, r1
 801c3e2:	1040      	asrs	r0, r0, #1
 801c3e4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c3e8:	0085      	lsls	r5, r0, #2
 801c3ea:	42b3      	cmp	r3, r6
 801c3ec:	d902      	bls.n	801c3f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c3ee:	3001      	adds	r0, #1
 801c3f0:	b284      	uxth	r4, r0
 801c3f2:	e7f3      	b.n	801c3dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c3f4:	d201      	bcs.n	801c3fa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c3f6:	b281      	uxth	r1, r0
 801c3f8:	e7f0      	b.n	801c3dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c3fa:	442a      	add	r2, r5
 801c3fc:	8850      	ldrh	r0, [r2, #2]
 801c3fe:	bd70      	pop	{r4, r5, r6, pc}
 801c400:	2000      	movs	r0, #0
 801c402:	e7fc      	b.n	801c3fe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c404 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c408:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801c40a:	4604      	mov	r4, r0
 801c40c:	260b      	movs	r6, #11
 801c40e:	886f      	ldrh	r7, [r5, #2]
 801c410:	087f      	lsrs	r7, r7, #1
 801c412:	3e01      	subs	r6, #1
 801c414:	d01b      	beq.n	801c44e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801c416:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c418:	b92b      	cbnz	r3, 801c426 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801c41a:	4b0e      	ldr	r3, [pc, #56]	; (801c454 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801c41c:	21c0      	movs	r1, #192	; 0xc0
 801c41e:	4a0e      	ldr	r2, [pc, #56]	; (801c458 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801c420:	480e      	ldr	r0, [pc, #56]	; (801c45c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801c422:	f00c f931 	bl	8028688 <__assert_func>
 801c426:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801c428:	462a      	mov	r2, r5
 801c42a:	4639      	mov	r1, r7
 801c42c:	4620      	mov	r0, r4
 801c42e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c432:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c436:	4643      	mov	r3, r8
 801c438:	f7ff ffc6 	bl	801c3c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c43c:	b138      	cbz	r0, 801c44e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801c43e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c442:	4642      	mov	r2, r8
 801c444:	4620      	mov	r0, r4
 801c446:	f7ff ff8b 	bl	801c360 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c44a:	2800      	cmp	r0, #0
 801c44c:	d1e1      	bne.n	801c412 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c452:	bf00      	nop
 801c454:	0802c374 	.word	0x0802c374
 801c458:	0802c5e6 	.word	0x0802c5e6
 801c45c:	0802c37d 	.word	0x0802c37d

0801c460 <_ZN8touchgfx8ceil28_4El>:
 801c460:	f110 030f 	adds.w	r3, r0, #15
 801c464:	d401      	bmi.n	801c46a <_ZN8touchgfx8ceil28_4El+0xa>
 801c466:	1118      	asrs	r0, r3, #4
 801c468:	4770      	bx	lr
 801c46a:	2210      	movs	r2, #16
 801c46c:	f1c0 0001 	rsb	r0, r0, #1
 801c470:	fb93 f3f2 	sdiv	r3, r3, r2
 801c474:	f010 000f 	ands.w	r0, r0, #15
 801c478:	bf18      	it	ne
 801c47a:	2001      	movne	r0, #1
 801c47c:	1a18      	subs	r0, r3, r0
 801c47e:	4770      	bx	lr

0801c480 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801c480:	2900      	cmp	r1, #0
 801c482:	b538      	push	{r3, r4, r5, lr}
 801c484:	dc05      	bgt.n	801c492 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801c486:	4b0f      	ldr	r3, [pc, #60]	; (801c4c4 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801c488:	21fa      	movs	r1, #250	; 0xfa
 801c48a:	4a0f      	ldr	r2, [pc, #60]	; (801c4c8 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801c48c:	480f      	ldr	r0, [pc, #60]	; (801c4cc <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801c48e:	f00c f8fb 	bl	8028688 <__assert_func>
 801c492:	2800      	cmp	r0, #0
 801c494:	db06      	blt.n	801c4a4 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801c496:	fb90 f4f1 	sdiv	r4, r0, r1
 801c49a:	fb01 0114 	mls	r1, r1, r4, r0
 801c49e:	6014      	str	r4, [r2, #0]
 801c4a0:	6019      	str	r1, [r3, #0]
 801c4a2:	bd38      	pop	{r3, r4, r5, pc}
 801c4a4:	4240      	negs	r0, r0
 801c4a6:	fb90 f4f1 	sdiv	r4, r0, r1
 801c4aa:	4265      	negs	r5, r4
 801c4ac:	fb01 0014 	mls	r0, r1, r4, r0
 801c4b0:	6015      	str	r5, [r2, #0]
 801c4b2:	6018      	str	r0, [r3, #0]
 801c4b4:	2800      	cmp	r0, #0
 801c4b6:	d0f4      	beq.n	801c4a2 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801c4b8:	6810      	ldr	r0, [r2, #0]
 801c4ba:	3801      	subs	r0, #1
 801c4bc:	6010      	str	r0, [r2, #0]
 801c4be:	6818      	ldr	r0, [r3, #0]
 801c4c0:	1a09      	subs	r1, r1, r0
 801c4c2:	e7ed      	b.n	801c4a0 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801c4c4:	0802c940 	.word	0x0802c940
 801c4c8:	0802c97f 	.word	0x0802c97f
 801c4cc:	0802c950 	.word	0x0802c950

0801c4d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c4d0:	b570      	push	{r4, r5, r6, lr}
 801c4d2:	694a      	ldr	r2, [r1, #20]
 801c4d4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801c4d6:	684b      	ldr	r3, [r1, #4]
 801c4d8:	1b54      	subs	r4, r2, r5
 801c4da:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801c4dc:	f000 8106 	beq.w	801c6ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801c4e0:	1b9b      	subs	r3, r3, r6
 801c4e2:	d003      	beq.n	801c4ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c4e4:	4363      	muls	r3, r4
 801c4e6:	2210      	movs	r2, #16
 801c4e8:	fb93 f3f2 	sdiv	r3, r3, r2
 801c4ec:	680c      	ldr	r4, [r1, #0]
 801c4ee:	698a      	ldr	r2, [r1, #24]
 801c4f0:	1b65      	subs	r5, r4, r5
 801c4f2:	f000 80fd 	beq.w	801c6f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801c4f6:	1b92      	subs	r2, r2, r6
 801c4f8:	d003      	beq.n	801c502 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c4fa:	436a      	muls	r2, r5
 801c4fc:	2410      	movs	r4, #16
 801c4fe:	fb92 f2f4 	sdiv	r2, r2, r4
 801c502:	1a9b      	subs	r3, r3, r2
 801c504:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801c72c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801c508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c50c:	460a      	mov	r2, r1
 801c50e:	ee07 3a90 	vmov	s15, r3
 801c512:	f100 040c 	add.w	r4, r0, #12
 801c516:	4603      	mov	r3, r0
 801c518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c51c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c520:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c524:	eeb1 6a43 	vneg.f32	s12, s6
 801c528:	edd2 7a02 	vldr	s15, [r2, #8]
 801c52c:	3214      	adds	r2, #20
 801c52e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c532:	ece3 6a01 	vstmia	r3!, {s13}
 801c536:	429c      	cmp	r4, r3
 801c538:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c53c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c540:	edc3 7a02 	vstr	s15, [r3, #8]
 801c544:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c548:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c54c:	edc3 7a05 	vstr	s15, [r3, #20]
 801c550:	d1ea      	bne.n	801c528 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c552:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c554:	698b      	ldr	r3, [r1, #24]
 801c556:	edd0 4a02 	vldr	s9, [r0, #8]
 801c55a:	1a9b      	subs	r3, r3, r2
 801c55c:	edd0 3a00 	vldr	s7, [r0]
 801c560:	edd0 6a01 	vldr	s13, [r0, #4]
 801c564:	ee07 3a90 	vmov	s15, r3
 801c568:	684b      	ldr	r3, [r1, #4]
 801c56a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c56e:	ed90 5a05 	vldr	s10, [r0, #20]
 801c572:	1a9b      	subs	r3, r3, r2
 801c574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c578:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c57c:	ed90 2a03 	vldr	s4, [r0, #12]
 801c580:	ee07 3a10 	vmov	s14, r3
 801c584:	edd0 5a04 	vldr	s11, [r0, #16]
 801c588:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c58c:	ed90 1a07 	vldr	s2, [r0, #28]
 801c590:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c594:	edd0 2a06 	vldr	s5, [r0, #24]
 801c598:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c59c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c5a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5a4:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c5a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c5ac:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c5b0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801c5b4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c5b6:	694a      	ldr	r2, [r1, #20]
 801c5b8:	1b13      	subs	r3, r2, r4
 801c5ba:	ee07 3a10 	vmov	s14, r3
 801c5be:	680b      	ldr	r3, [r1, #0]
 801c5c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5c4:	1b1b      	subs	r3, r3, r4
 801c5c6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5ca:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c5ce:	ee07 3a10 	vmov	s14, r3
 801c5d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5da:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c5de:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c5e2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801c5e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c5e8:	698b      	ldr	r3, [r1, #24]
 801c5ea:	1a9b      	subs	r3, r3, r2
 801c5ec:	ee06 3a90 	vmov	s13, r3
 801c5f0:	684b      	ldr	r3, [r1, #4]
 801c5f2:	1a9b      	subs	r3, r3, r2
 801c5f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c5f8:	ee07 3a10 	vmov	s14, r3
 801c5fc:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c600:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c604:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c608:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c60c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c610:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c614:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801c618:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c61a:	694a      	ldr	r2, [r1, #20]
 801c61c:	1b13      	subs	r3, r2, r4
 801c61e:	ee07 3a10 	vmov	s14, r3
 801c622:	680b      	ldr	r3, [r1, #0]
 801c624:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c628:	1b1b      	subs	r3, r3, r4
 801c62a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c62e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c632:	ee07 3a10 	vmov	s14, r3
 801c636:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c63a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c63e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c642:	edd0 5a08 	vldr	s11, [r0, #32]
 801c646:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c64a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c64e:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c652:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801c656:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c658:	698b      	ldr	r3, [r1, #24]
 801c65a:	1a9b      	subs	r3, r3, r2
 801c65c:	ee07 3a10 	vmov	s14, r3
 801c660:	684b      	ldr	r3, [r1, #4]
 801c662:	1a9b      	subs	r3, r3, r2
 801c664:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c668:	ee01 3a90 	vmov	s3, r3
 801c66c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c670:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c674:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c678:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c67c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c680:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c684:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c688:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c68a:	694a      	ldr	r2, [r1, #20]
 801c68c:	1b13      	subs	r3, r2, r4
 801c68e:	ee03 3a10 	vmov	s6, r3
 801c692:	680b      	ldr	r3, [r1, #0]
 801c694:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c698:	1b1b      	subs	r3, r3, r4
 801c69a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c69e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c6a2:	ee03 3a10 	vmov	s6, r3
 801c6a6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c6aa:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c6ae:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c6b2:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c6b6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c6ba:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801c6be:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c6c2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6ca:	dd13      	ble.n	801c6f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c6cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c6d0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c6d4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c6d6:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c6da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6e2:	dd15      	ble.n	801c710 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c6e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c6e8:	6403      	str	r3, [r0, #64]	; 0x40
 801c6ea:	bd70      	pop	{r4, r5, r6, pc}
 801c6ec:	4623      	mov	r3, r4
 801c6ee:	e6fd      	b.n	801c4ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c6f0:	462a      	mov	r2, r5
 801c6f2:	e706      	b.n	801c502 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c6f4:	d502      	bpl.n	801c6fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c6f6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c6fa:	e7e9      	b.n	801c6d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c6fc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c700:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c704:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c70c:	dade      	bge.n	801c6cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801c70e:	e7f2      	b.n	801c6f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c710:	d502      	bpl.n	801c718 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801c712:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c716:	e7e7      	b.n	801c6e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801c718:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c71c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c720:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c728:	dadc      	bge.n	801c6e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801c72a:	e7f2      	b.n	801c712 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c72c:	3d800000 	.word	0x3d800000

0801c730 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c734:	f04f 0814 	mov.w	r8, #20
 801c738:	4604      	mov	r4, r0
 801c73a:	4617      	mov	r7, r2
 801c73c:	460d      	mov	r5, r1
 801c73e:	fb08 f903 	mul.w	r9, r8, r3
 801c742:	461e      	mov	r6, r3
 801c744:	eb02 0a09 	add.w	sl, r2, r9
 801c748:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c74c:	f7ff fe88 	bl	801c460 <_ZN8touchgfx8ceil28_4El>
 801c750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c752:	6160      	str	r0, [r4, #20]
 801c754:	fb08 f803 	mul.w	r8, r8, r3
 801c758:	9001      	str	r0, [sp, #4]
 801c75a:	eb07 0b08 	add.w	fp, r7, r8
 801c75e:	f8db 0004 	ldr.w	r0, [fp, #4]
 801c762:	f7ff fe7d 	bl	801c460 <_ZN8touchgfx8ceil28_4El>
 801c766:	9a01      	ldr	r2, [sp, #4]
 801c768:	1a80      	subs	r0, r0, r2
 801c76a:	61a0      	str	r0, [r4, #24]
 801c76c:	2800      	cmp	r0, #0
 801c76e:	f000 8088 	beq.w	801c882 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801c772:	f857 3009 	ldr.w	r3, [r7, r9]
 801c776:	f857 c008 	ldr.w	ip, [r7, r8]
 801c77a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801c77e:	ebac 0c03 	sub.w	ip, ip, r3
 801c782:	f8da 1004 	ldr.w	r1, [sl, #4]
 801c786:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801c78a:	1a40      	subs	r0, r0, r1
 801c78c:	fb0b f202 	mul.w	r2, fp, r2
 801c790:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801c794:	fb0c 2211 	mls	r2, ip, r1, r2
 801c798:	4641      	mov	r1, r8
 801c79a:	fb00 2003 	mla	r0, r0, r3, r2
 801c79e:	f104 0310 	add.w	r3, r4, #16
 801c7a2:	4622      	mov	r2, r4
 801c7a4:	3801      	subs	r0, #1
 801c7a6:	4440      	add	r0, r8
 801c7a8:	f7ff fe6a 	bl	801c480 <_ZN8touchgfx11floorDivModEllRlS0_>
 801c7ac:	f104 0308 	add.w	r3, r4, #8
 801c7b0:	1d22      	adds	r2, r4, #4
 801c7b2:	4641      	mov	r1, r8
 801c7b4:	4658      	mov	r0, fp
 801c7b6:	f7ff fe63 	bl	801c480 <_ZN8touchgfx11floorDivModEllRlS0_>
 801c7ba:	f8c4 800c 	str.w	r8, [r4, #12]
 801c7be:	6962      	ldr	r2, [r4, #20]
 801c7c0:	f8da 3004 	ldr.w	r3, [sl, #4]
 801c7c4:	eddf 6a31 	vldr	s13, [pc, #196]	; 801c88c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c7c8:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801c7cc:	6822      	ldr	r2, [r4, #0]
 801c7ce:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801c7d2:	ee07 3a10 	vmov	s14, r3
 801c7d6:	f857 3009 	ldr.w	r3, [r7, r9]
 801c7da:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801c7de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7e2:	ee07 3a90 	vmov	s15, r3
 801c7e6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801c7ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c7ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c7f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c7f6:	edd3 6a00 	vldr	s13, [r3]
 801c7fa:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c7fe:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801c802:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c806:	edc4 6a07 	vstr	s13, [r4, #28]
 801c80a:	edd4 6a01 	vldr	s13, [r4, #4]
 801c80e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801c812:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c816:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801c81a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c81e:	ed84 6a08 	vstr	s12, [r4, #32]
 801c822:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801c824:	6262      	str	r2, [r4, #36]	; 0x24
 801c826:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801c82a:	ed93 6a03 	vldr	s12, [r3, #12]
 801c82e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c832:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801c836:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c83a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801c83e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801c842:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801c846:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c84a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801c84e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801c850:	6322      	str	r2, [r4, #48]	; 0x30
 801c852:	ed93 6a06 	vldr	s12, [r3, #24]
 801c856:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801c85a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c85e:	eeb0 7a46 	vmov.f32	s14, s12
 801c862:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801c866:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c86a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801c86e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801c872:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801c876:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c87a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801c87e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801c880:	63e3      	str	r3, [r4, #60]	; 0x3c
 801c882:	4620      	mov	r0, r4
 801c884:	b003      	add	sp, #12
 801c886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c88a:	bf00      	nop
 801c88c:	3d800000 	.word	0x3d800000

0801c890 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c890:	4b01      	ldr	r3, [pc, #4]	; (801c898 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c892:	6018      	str	r0, [r3, #0]
 801c894:	4770      	bx	lr
 801c896:	bf00      	nop
 801c898:	20005840 	.word	0x20005840

0801c89c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c89c:	4b06      	ldr	r3, [pc, #24]	; (801c8b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c89e:	881a      	ldrh	r2, [r3, #0]
 801c8a0:	4282      	cmp	r2, r0
 801c8a2:	d807      	bhi.n	801c8b4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c8a4:	4b05      	ldr	r3, [pc, #20]	; (801c8bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c8a6:	881b      	ldrh	r3, [r3, #0]
 801c8a8:	4413      	add	r3, r2
 801c8aa:	4298      	cmp	r0, r3
 801c8ac:	bfac      	ite	ge
 801c8ae:	2000      	movge	r0, #0
 801c8b0:	2001      	movlt	r0, #1
 801c8b2:	4770      	bx	lr
 801c8b4:	2000      	movs	r0, #0
 801c8b6:	4770      	bx	lr
 801c8b8:	20005860 	.word	0x20005860
 801c8bc:	20005864 	.word	0x20005864

0801c8c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c8c0:	b508      	push	{r3, lr}
 801c8c2:	4601      	mov	r1, r0
 801c8c4:	f7ff ffea 	bl	801c89c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c8c8:	b118      	cbz	r0, 801c8d2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c8ca:	4b02      	ldr	r3, [pc, #8]	; (801c8d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c8d2:	bd08      	pop	{r3, pc}
 801c8d4:	20005844 	.word	0x20005844

0801c8d8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8dc:	4d28      	ldr	r5, [pc, #160]	; (801c980 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c8de:	682b      	ldr	r3, [r5, #0]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d04a      	beq.n	801c97a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801c8e4:	4a27      	ldr	r2, [pc, #156]	; (801c984 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c8e6:	4e28      	ldr	r6, [pc, #160]	; (801c988 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c8e8:	8810      	ldrh	r0, [r2, #0]
 801c8ea:	f8b6 8000 	ldrh.w	r8, [r6]
 801c8ee:	4c27      	ldr	r4, [pc, #156]	; (801c98c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c8f0:	4440      	add	r0, r8
 801c8f2:	4f27      	ldr	r7, [pc, #156]	; (801c990 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c8f4:	1c41      	adds	r1, r0, #1
 801c8f6:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801c8fa:	f021 0101 	bic.w	r1, r1, #1
 801c8fe:	eb03 020e 	add.w	r2, r3, lr
 801c902:	0409      	lsls	r1, r1, #16
 801c904:	6022      	str	r2, [r4, #0]
 801c906:	0c09      	lsrs	r1, r1, #16
 801c908:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801c90c:	eb0e 010c 	add.w	r1, lr, ip
 801c910:	185a      	adds	r2, r3, r1
 801c912:	603a      	str	r2, [r7, #0]
 801c914:	220e      	movs	r2, #14
 801c916:	fb02 f208 	mul.w	r2, r2, r8
 801c91a:	3203      	adds	r2, #3
 801c91c:	f022 0203 	bic.w	r2, r2, #3
 801c920:	4411      	add	r1, r2
 801c922:	440b      	add	r3, r1
 801c924:	491b      	ldr	r1, [pc, #108]	; (801c994 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801c926:	600b      	str	r3, [r1, #0]
 801c928:	2300      	movs	r3, #0
 801c92a:	491b      	ldr	r1, [pc, #108]	; (801c998 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801c92c:	800b      	strh	r3, [r1, #0]
 801c92e:	491b      	ldr	r1, [pc, #108]	; (801c99c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801c930:	6809      	ldr	r1, [r1, #0]
 801c932:	eba1 010e 	sub.w	r1, r1, lr
 801c936:	eba1 010c 	sub.w	r1, r1, ip
 801c93a:	469c      	mov	ip, r3
 801c93c:	1a8a      	subs	r2, r1, r2
 801c93e:	4918      	ldr	r1, [pc, #96]	; (801c9a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801c940:	600a      	str	r2, [r1, #0]
 801c942:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c946:	4a17      	ldr	r2, [pc, #92]	; (801c9a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801c948:	8013      	strh	r3, [r2, #0]
 801c94a:	4283      	cmp	r3, r0
 801c94c:	d10d      	bne.n	801c96a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801c94e:	8835      	ldrh	r5, [r6, #0]
 801c950:	2300      	movs	r3, #0
 801c952:	6838      	ldr	r0, [r7, #0]
 801c954:	240e      	movs	r4, #14
 801c956:	429d      	cmp	r5, r3
 801c958:	d90f      	bls.n	801c97a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801c95a:	fb04 0203 	mla	r2, r4, r3, r0
 801c95e:	3301      	adds	r3, #1
 801c960:	7b11      	ldrb	r1, [r2, #12]
 801c962:	f36f 1145 	bfc	r1, #5, #1
 801c966:	7311      	strb	r1, [r2, #12]
 801c968:	e7f5      	b.n	801c956 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801c96a:	682a      	ldr	r2, [r5, #0]
 801c96c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801c970:	6822      	ldr	r2, [r4, #0]
 801c972:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801c976:	3301      	adds	r3, #1
 801c978:	e7e7      	b.n	801c94a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801c97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c97e:	bf00      	nop
 801c980:	20005844 	.word	0x20005844
 801c984:	20005860 	.word	0x20005860
 801c988:	20005864 	.word	0x20005864
 801c98c:	20005858 	.word	0x20005858
 801c990:	20005848 	.word	0x20005848
 801c994:	20005850 	.word	0x20005850
 801c998:	20005862 	.word	0x20005862
 801c99c:	2000584c 	.word	0x2000584c
 801c9a0:	2000585c 	.word	0x2000585c
 801c9a4:	20005854 	.word	0x20005854

0801c9a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c9a8:	4b10      	ldr	r3, [pc, #64]	; (801c9ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801c9aa:	b510      	push	{r4, lr}
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	b9db      	cbnz	r3, 801c9e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c9b0:	b1d1      	cbz	r1, 801c9e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c9b2:	4b0f      	ldr	r3, [pc, #60]	; (801c9f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801c9b4:	240e      	movs	r4, #14
 801c9b6:	801a      	strh	r2, [r3, #0]
 801c9b8:	b292      	uxth	r2, r2
 801c9ba:	4b0e      	ldr	r3, [pc, #56]	; (801c9f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801c9bc:	881b      	ldrh	r3, [r3, #0]
 801c9be:	4413      	add	r3, r2
 801c9c0:	4362      	muls	r2, r4
 801c9c2:	2406      	movs	r4, #6
 801c9c4:	fb04 2203 	mla	r2, r4, r3, r2
 801c9c8:	428a      	cmp	r2, r1
 801c9ca:	d305      	bcc.n	801c9d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801c9cc:	4b0a      	ldr	r3, [pc, #40]	; (801c9f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801c9ce:	2137      	movs	r1, #55	; 0x37
 801c9d0:	4a0a      	ldr	r2, [pc, #40]	; (801c9fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801c9d2:	480b      	ldr	r0, [pc, #44]	; (801ca00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801c9d4:	f00b fe58 	bl	8028688 <__assert_func>
 801c9d8:	4b0a      	ldr	r3, [pc, #40]	; (801ca04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801c9da:	6019      	str	r1, [r3, #0]
 801c9dc:	4b0a      	ldr	r3, [pc, #40]	; (801ca08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801c9de:	6018      	str	r0, [r3, #0]
 801c9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9e4:	f7ff bf78 	b.w	801c8d8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c9e8:	bd10      	pop	{r4, pc}
 801c9ea:	bf00      	nop
 801c9ec:	20005850 	.word	0x20005850
 801c9f0:	20005864 	.word	0x20005864
 801c9f4:	20005860 	.word	0x20005860
 801c9f8:	0802ca1d 	.word	0x0802ca1d
 801c9fc:	0802ca76 	.word	0x0802ca76
 801ca00:	0802c9f8 	.word	0x0802c9f8
 801ca04:	2000584c 	.word	0x2000584c
 801ca08:	20005844 	.word	0x20005844

0801ca0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ca0c:	b470      	push	{r4, r5, r6}
 801ca0e:	4c07      	ldr	r4, [pc, #28]	; (801ca2c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ca10:	4605      	mov	r5, r0
 801ca12:	4610      	mov	r0, r2
 801ca14:	9a03      	ldr	r2, [sp, #12]
 801ca16:	6826      	ldr	r6, [r4, #0]
 801ca18:	b936      	cbnz	r6, 801ca28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ca1a:	6025      	str	r5, [r4, #0]
 801ca1c:	4c04      	ldr	r4, [pc, #16]	; (801ca30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ca1e:	8021      	strh	r1, [r4, #0]
 801ca20:	4619      	mov	r1, r3
 801ca22:	bc70      	pop	{r4, r5, r6}
 801ca24:	f7ff bfc0 	b.w	801c9a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ca28:	bc70      	pop	{r4, r5, r6}
 801ca2a:	4770      	bx	lr
 801ca2c:	20005868 	.word	0x20005868
 801ca30:	20005860 	.word	0x20005860

0801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ca34:	b508      	push	{r3, lr}
 801ca36:	4b14      	ldr	r3, [pc, #80]	; (801ca88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ca38:	6819      	ldr	r1, [r3, #0]
 801ca3a:	b931      	cbnz	r1, 801ca4a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801ca3c:	4b13      	ldr	r3, [pc, #76]	; (801ca8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ca3e:	f240 3187 	movw	r1, #903	; 0x387
 801ca42:	4a13      	ldr	r2, [pc, #76]	; (801ca90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ca44:	4813      	ldr	r0, [pc, #76]	; (801ca94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ca46:	f00b fe1f 	bl	8028688 <__assert_func>
 801ca4a:	4a13      	ldr	r2, [pc, #76]	; (801ca98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ca4c:	8803      	ldrh	r3, [r0, #0]
 801ca4e:	8812      	ldrh	r2, [r2, #0]
 801ca50:	4293      	cmp	r3, r2
 801ca52:	d204      	bcs.n	801ca5e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801ca54:	2214      	movs	r2, #20
 801ca56:	fb02 1303 	mla	r3, r2, r3, r1
 801ca5a:	8918      	ldrh	r0, [r3, #8]
 801ca5c:	bd08      	pop	{r3, pc}
 801ca5e:	490f      	ldr	r1, [pc, #60]	; (801ca9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801ca60:	8809      	ldrh	r1, [r1, #0]
 801ca62:	4411      	add	r1, r2
 801ca64:	428b      	cmp	r3, r1
 801ca66:	da06      	bge.n	801ca76 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801ca68:	1a9b      	subs	r3, r3, r2
 801ca6a:	4a0d      	ldr	r2, [pc, #52]	; (801caa0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801ca6c:	210e      	movs	r1, #14
 801ca6e:	6812      	ldr	r2, [r2, #0]
 801ca70:	fb01 2303 	mla	r3, r1, r3, r2
 801ca74:	e7f1      	b.n	801ca5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801ca76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ca7a:	4293      	cmp	r3, r2
 801ca7c:	bf0a      	itet	eq
 801ca7e:	4b09      	ldreq	r3, [pc, #36]	; (801caa4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801ca80:	2000      	movne	r0, #0
 801ca82:	8818      	ldrheq	r0, [r3, #0]
 801ca84:	e7ea      	b.n	801ca5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801ca86:	bf00      	nop
 801ca88:	20005868 	.word	0x20005868
 801ca8c:	0802afd4 	.word	0x0802afd4
 801ca90:	0802cb23 	.word	0x0802cb23
 801ca94:	0802c9f8 	.word	0x0802c9f8
 801ca98:	20005860 	.word	0x20005860
 801ca9c:	20005864 	.word	0x20005864
 801caa0:	20005848 	.word	0x20005848
 801caa4:	200057d4 	.word	0x200057d4

0801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801caa8:	b508      	push	{r3, lr}
 801caaa:	4b14      	ldr	r3, [pc, #80]	; (801cafc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801caac:	6819      	ldr	r1, [r3, #0]
 801caae:	b931      	cbnz	r1, 801cabe <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801cab0:	4b13      	ldr	r3, [pc, #76]	; (801cb00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801cab2:	f240 319b 	movw	r1, #923	; 0x39b
 801cab6:	4a13      	ldr	r2, [pc, #76]	; (801cb04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801cab8:	4813      	ldr	r0, [pc, #76]	; (801cb08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801caba:	f00b fde5 	bl	8028688 <__assert_func>
 801cabe:	4a13      	ldr	r2, [pc, #76]	; (801cb0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801cac0:	8803      	ldrh	r3, [r0, #0]
 801cac2:	8812      	ldrh	r2, [r2, #0]
 801cac4:	4293      	cmp	r3, r2
 801cac6:	d204      	bcs.n	801cad2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801cac8:	2214      	movs	r2, #20
 801caca:	fb02 1303 	mla	r3, r2, r3, r1
 801cace:	8958      	ldrh	r0, [r3, #10]
 801cad0:	bd08      	pop	{r3, pc}
 801cad2:	490f      	ldr	r1, [pc, #60]	; (801cb10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801cad4:	8809      	ldrh	r1, [r1, #0]
 801cad6:	4411      	add	r1, r2
 801cad8:	428b      	cmp	r3, r1
 801cada:	da06      	bge.n	801caea <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801cadc:	1a9b      	subs	r3, r3, r2
 801cade:	4a0d      	ldr	r2, [pc, #52]	; (801cb14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801cae0:	210e      	movs	r1, #14
 801cae2:	6812      	ldr	r2, [r2, #0]
 801cae4:	fb01 2303 	mla	r3, r1, r3, r2
 801cae8:	e7f1      	b.n	801cace <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801caea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801caee:	4293      	cmp	r3, r2
 801caf0:	bf0a      	itet	eq
 801caf2:	4b09      	ldreq	r3, [pc, #36]	; (801cb18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801caf4:	2000      	movne	r0, #0
 801caf6:	8818      	ldrheq	r0, [r3, #0]
 801caf8:	e7ea      	b.n	801cad0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801cafa:	bf00      	nop
 801cafc:	20005868 	.word	0x20005868
 801cb00:	0802afd4 	.word	0x0802afd4
 801cb04:	0802cb4f 	.word	0x0802cb4f
 801cb08:	0802c9f8 	.word	0x0802c9f8
 801cb0c:	20005860 	.word	0x20005860
 801cb10:	20005864 	.word	0x20005864
 801cb14:	20005848 	.word	0x20005848
 801cb18:	200057d6 	.word	0x200057d6

0801cb1c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801cb1c:	4b23      	ldr	r3, [pc, #140]	; (801cbac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801cb1e:	b510      	push	{r4, lr}
 801cb20:	681c      	ldr	r4, [r3, #0]
 801cb22:	b934      	cbnz	r4, 801cb32 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801cb24:	4b22      	ldr	r3, [pc, #136]	; (801cbb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801cb26:	f240 31af 	movw	r1, #943	; 0x3af
 801cb2a:	4a22      	ldr	r2, [pc, #136]	; (801cbb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801cb2c:	4822      	ldr	r0, [pc, #136]	; (801cbb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801cb2e:	f00b fdab 	bl	8028688 <__assert_func>
 801cb32:	4a22      	ldr	r2, [pc, #136]	; (801cbbc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801cb34:	880b      	ldrh	r3, [r1, #0]
 801cb36:	8812      	ldrh	r2, [r2, #0]
 801cb38:	4293      	cmp	r3, r2
 801cb3a:	d211      	bcs.n	801cb60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801cb3c:	2214      	movs	r2, #20
 801cb3e:	fb02 4303 	mla	r3, r2, r3, r4
 801cb42:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801cb46:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801cb4a:	8a1a      	ldrh	r2, [r3, #16]
 801cb4c:	8a5b      	ldrh	r3, [r3, #18]
 801cb4e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cb52:	8004      	strh	r4, [r0, #0]
 801cb54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cb58:	8041      	strh	r1, [r0, #2]
 801cb5a:	8082      	strh	r2, [r0, #4]
 801cb5c:	80c3      	strh	r3, [r0, #6]
 801cb5e:	e00e      	b.n	801cb7e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801cb60:	4917      	ldr	r1, [pc, #92]	; (801cbc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801cb62:	8809      	ldrh	r1, [r1, #0]
 801cb64:	4411      	add	r1, r2
 801cb66:	428b      	cmp	r3, r1
 801cb68:	da0a      	bge.n	801cb80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801cb6a:	1a9b      	subs	r3, r3, r2
 801cb6c:	4a15      	ldr	r2, [pc, #84]	; (801cbc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801cb6e:	210e      	movs	r1, #14
 801cb70:	6812      	ldr	r2, [r2, #0]
 801cb72:	fb01 2303 	mla	r3, r1, r3, r2
 801cb76:	681a      	ldr	r2, [r3, #0]
 801cb78:	6002      	str	r2, [r0, #0]
 801cb7a:	685a      	ldr	r2, [r3, #4]
 801cb7c:	6042      	str	r2, [r0, #4]
 801cb7e:	bd10      	pop	{r4, pc}
 801cb80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cb84:	4293      	cmp	r3, r2
 801cb86:	d10b      	bne.n	801cba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801cb88:	4b0f      	ldr	r3, [pc, #60]	; (801cbc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801cb8a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801cb8e:	4b0f      	ldr	r3, [pc, #60]	; (801cbcc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801cb90:	8081      	strh	r1, [r0, #4]
 801cb92:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cb96:	2300      	movs	r3, #0
 801cb98:	80c2      	strh	r2, [r0, #6]
 801cb9a:	8003      	strh	r3, [r0, #0]
 801cb9c:	8043      	strh	r3, [r0, #2]
 801cb9e:	e7ee      	b.n	801cb7e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801cba0:	2300      	movs	r3, #0
 801cba2:	8003      	strh	r3, [r0, #0]
 801cba4:	8043      	strh	r3, [r0, #2]
 801cba6:	8083      	strh	r3, [r0, #4]
 801cba8:	e7d8      	b.n	801cb5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801cbaa:	bf00      	nop
 801cbac:	20005868 	.word	0x20005868
 801cbb0:	0802afd4 	.word	0x0802afd4
 801cbb4:	0802cabc 	.word	0x0802cabc
 801cbb8:	0802c9f8 	.word	0x0802c9f8
 801cbbc:	20005860 	.word	0x20005860
 801cbc0:	20005864 	.word	0x20005864
 801cbc4:	20005848 	.word	0x20005848
 801cbc8:	200057d4 	.word	0x200057d4
 801cbcc:	200057d6 	.word	0x200057d6

0801cbd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801cbd0:	4b18      	ldr	r3, [pc, #96]	; (801cc34 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	b34b      	cbz	r3, 801cc2a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801cbd6:	4a18      	ldr	r2, [pc, #96]	; (801cc38 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801cbd8:	8800      	ldrh	r0, [r0, #0]
 801cbda:	8812      	ldrh	r2, [r2, #0]
 801cbdc:	4290      	cmp	r0, r2
 801cbde:	d211      	bcs.n	801cc04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801cbe0:	2214      	movs	r2, #20
 801cbe2:	fb02 3300 	mla	r3, r2, r0, r3
 801cbe6:	8a1a      	ldrh	r2, [r3, #16]
 801cbe8:	8919      	ldrh	r1, [r3, #8]
 801cbea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cbee:	428a      	cmp	r2, r1
 801cbf0:	db1d      	blt.n	801cc2e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801cbf2:	8a58      	ldrh	r0, [r3, #18]
 801cbf4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801cbf8:	895b      	ldrh	r3, [r3, #10]
 801cbfa:	4298      	cmp	r0, r3
 801cbfc:	bfac      	ite	ge
 801cbfe:	2000      	movge	r0, #0
 801cc00:	2001      	movlt	r0, #1
 801cc02:	4770      	bx	lr
 801cc04:	4b0d      	ldr	r3, [pc, #52]	; (801cc3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801cc06:	881b      	ldrh	r3, [r3, #0]
 801cc08:	4413      	add	r3, r2
 801cc0a:	4298      	cmp	r0, r3
 801cc0c:	da0d      	bge.n	801cc2a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801cc0e:	4b0c      	ldr	r3, [pc, #48]	; (801cc40 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801cc10:	1a80      	subs	r0, r0, r2
 801cc12:	220e      	movs	r2, #14
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	fb02 3300 	mla	r3, r2, r0, r3
 801cc1a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801cc1e:	891a      	ldrh	r2, [r3, #8]
 801cc20:	4291      	cmp	r1, r2
 801cc22:	db04      	blt.n	801cc2e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801cc24:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801cc28:	e7e6      	b.n	801cbf8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801cc2a:	2000      	movs	r0, #0
 801cc2c:	4770      	bx	lr
 801cc2e:	2001      	movs	r0, #1
 801cc30:	4770      	bx	lr
 801cc32:	bf00      	nop
 801cc34:	20005868 	.word	0x20005868
 801cc38:	20005860 	.word	0x20005860
 801cc3c:	20005864 	.word	0x20005864
 801cc40:	20005848 	.word	0x20005848

0801cc44 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801cc44:	b508      	push	{r3, lr}
 801cc46:	4b12      	ldr	r3, [pc, #72]	; (801cc90 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801cc48:	6819      	ldr	r1, [r3, #0]
 801cc4a:	b931      	cbnz	r1, 801cc5a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801cc4c:	4b11      	ldr	r3, [pc, #68]	; (801cc94 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cc4e:	f240 31d3 	movw	r1, #979	; 0x3d3
 801cc52:	4a11      	ldr	r2, [pc, #68]	; (801cc98 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801cc54:	4811      	ldr	r0, [pc, #68]	; (801cc9c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801cc56:	f00b fd17 	bl	8028688 <__assert_func>
 801cc5a:	8803      	ldrh	r3, [r0, #0]
 801cc5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cc60:	4293      	cmp	r3, r2
 801cc62:	d012      	beq.n	801cc8a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801cc64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cc68:	4293      	cmp	r3, r2
 801cc6a:	d103      	bne.n	801cc74 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801cc6c:	4b0c      	ldr	r3, [pc, #48]	; (801cca0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801cc72:	bd08      	pop	{r3, pc}
 801cc74:	4a0b      	ldr	r2, [pc, #44]	; (801cca4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801cc76:	6812      	ldr	r2, [r2, #0]
 801cc78:	b11a      	cbz	r2, 801cc82 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801cc7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cc7e:	2800      	cmp	r0, #0
 801cc80:	d1f7      	bne.n	801cc72 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cc82:	2214      	movs	r2, #20
 801cc84:	4353      	muls	r3, r2
 801cc86:	58c8      	ldr	r0, [r1, r3]
 801cc88:	e7f3      	b.n	801cc72 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cc8a:	2000      	movs	r0, #0
 801cc8c:	e7f1      	b.n	801cc72 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cc8e:	bf00      	nop
 801cc90:	20005868 	.word	0x20005868
 801cc94:	0802afd4 	.word	0x0802afd4
 801cc98:	0802caf2 	.word	0x0802caf2
 801cc9c:	0802c9f8 	.word	0x0802c9f8
 801cca0:	200057e0 	.word	0x200057e0
 801cca4:	20005844 	.word	0x20005844

0801cca8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801cca8:	8802      	ldrh	r2, [r0, #0]
 801ccaa:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801ccae:	429a      	cmp	r2, r3
 801ccb0:	d845      	bhi.n	801cd3e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ccb2:	4b24      	ldr	r3, [pc, #144]	; (801cd44 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ccb4:	8818      	ldrh	r0, [r3, #0]
 801ccb6:	4282      	cmp	r2, r0
 801ccb8:	d221      	bcs.n	801ccfe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801ccba:	4b23      	ldr	r3, [pc, #140]	; (801cd48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ccbc:	6819      	ldr	r1, [r3, #0]
 801ccbe:	2314      	movs	r3, #20
 801ccc0:	fb03 1302 	mla	r3, r3, r2, r1
 801ccc4:	6858      	ldr	r0, [r3, #4]
 801ccc6:	2800      	cmp	r0, #0
 801ccc8:	d03a      	beq.n	801cd40 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ccca:	4920      	ldr	r1, [pc, #128]	; (801cd4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cccc:	6809      	ldr	r1, [r1, #0]
 801ccce:	2900      	cmp	r1, #0
 801ccd0:	d036      	beq.n	801cd40 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ccd2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ccd6:	2900      	cmp	r1, #0
 801ccd8:	d032      	beq.n	801cd40 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ccda:	891a      	ldrh	r2, [r3, #8]
 801ccdc:	8958      	ldrh	r0, [r3, #10]
 801ccde:	4350      	muls	r0, r2
 801cce0:	7c5a      	ldrb	r2, [r3, #17]
 801cce2:	7cdb      	ldrb	r3, [r3, #19]
 801cce4:	0952      	lsrs	r2, r2, #5
 801cce6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ccea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ccee:	2b0b      	cmp	r3, #11
 801ccf0:	bf18      	it	ne
 801ccf2:	0040      	lslne	r0, r0, #1
 801ccf4:	3003      	adds	r0, #3
 801ccf6:	f020 0003 	bic.w	r0, r0, #3
 801ccfa:	4408      	add	r0, r1
 801ccfc:	4770      	bx	lr
 801ccfe:	4b14      	ldr	r3, [pc, #80]	; (801cd50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801cd00:	881b      	ldrh	r3, [r3, #0]
 801cd02:	4403      	add	r3, r0
 801cd04:	429a      	cmp	r2, r3
 801cd06:	da1a      	bge.n	801cd3e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801cd08:	4b12      	ldr	r3, [pc, #72]	; (801cd54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801cd0a:	1a10      	subs	r0, r2, r0
 801cd0c:	210e      	movs	r1, #14
 801cd0e:	681b      	ldr	r3, [r3, #0]
 801cd10:	fb01 3000 	mla	r0, r1, r0, r3
 801cd14:	7b03      	ldrb	r3, [r0, #12]
 801cd16:	f003 031f 	and.w	r3, r3, #31
 801cd1a:	2b0b      	cmp	r3, #11
 801cd1c:	d10b      	bne.n	801cd36 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cd1e:	8903      	ldrh	r3, [r0, #8]
 801cd20:	8940      	ldrh	r0, [r0, #10]
 801cd22:	4358      	muls	r0, r3
 801cd24:	4b09      	ldr	r3, [pc, #36]	; (801cd4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cd26:	3003      	adds	r0, #3
 801cd28:	6819      	ldr	r1, [r3, #0]
 801cd2a:	f020 0303 	bic.w	r3, r0, #3
 801cd2e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801cd32:	4418      	add	r0, r3
 801cd34:	4770      	bx	lr
 801cd36:	2b0d      	cmp	r3, #13
 801cd38:	d101      	bne.n	801cd3e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801cd3a:	300d      	adds	r0, #13
 801cd3c:	4770      	bx	lr
 801cd3e:	2000      	movs	r0, #0
 801cd40:	4770      	bx	lr
 801cd42:	bf00      	nop
 801cd44:	20005860 	.word	0x20005860
 801cd48:	20005868 	.word	0x20005868
 801cd4c:	20005844 	.word	0x20005844
 801cd50:	20005864 	.word	0x20005864
 801cd54:	20005848 	.word	0x20005848

0801cd58 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801cd58:	4b19      	ldr	r3, [pc, #100]	; (801cdc0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801cd5a:	6819      	ldr	r1, [r3, #0]
 801cd5c:	8803      	ldrh	r3, [r0, #0]
 801cd5e:	b1e9      	cbz	r1, 801cd9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801cd60:	4a18      	ldr	r2, [pc, #96]	; (801cdc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801cd62:	8812      	ldrh	r2, [r2, #0]
 801cd64:	429a      	cmp	r2, r3
 801cd66:	d90a      	bls.n	801cd7e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801cd68:	2214      	movs	r2, #20
 801cd6a:	fb02 1303 	mla	r3, r2, r3, r1
 801cd6e:	7c58      	ldrb	r0, [r3, #17]
 801cd70:	0942      	lsrs	r2, r0, #5
 801cd72:	7cd8      	ldrb	r0, [r3, #19]
 801cd74:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801cd78:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801cd7c:	4770      	bx	lr
 801cd7e:	4912      	ldr	r1, [pc, #72]	; (801cdc8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801cd80:	8809      	ldrh	r1, [r1, #0]
 801cd82:	4411      	add	r1, r2
 801cd84:	428b      	cmp	r3, r1
 801cd86:	da09      	bge.n	801cd9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801cd88:	1a9b      	subs	r3, r3, r2
 801cd8a:	4a10      	ldr	r2, [pc, #64]	; (801cdcc <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801cd8c:	210e      	movs	r1, #14
 801cd8e:	6812      	ldr	r2, [r2, #0]
 801cd90:	fb01 2303 	mla	r3, r1, r3, r2
 801cd94:	7b18      	ldrb	r0, [r3, #12]
 801cd96:	f000 001f 	and.w	r0, r0, #31
 801cd9a:	4770      	bx	lr
 801cd9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cda0:	4293      	cmp	r3, r2
 801cda2:	d10a      	bne.n	801cdba <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801cda4:	4b0a      	ldr	r3, [pc, #40]	; (801cdd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801cdac:	b10a      	cbz	r2, 801cdb2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801cdae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801cdb0:	b900      	cbnz	r0, 801cdb4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801cdb2:	6898      	ldr	r0, [r3, #8]
 801cdb4:	6803      	ldr	r3, [r0, #0]
 801cdb6:	6a1b      	ldr	r3, [r3, #32]
 801cdb8:	4718      	bx	r3
 801cdba:	2000      	movs	r0, #0
 801cdbc:	4770      	bx	lr
 801cdbe:	bf00      	nop
 801cdc0:	20005868 	.word	0x20005868
 801cdc4:	20005860 	.word	0x20005860
 801cdc8:	20005864 	.word	0x20005864
 801cdcc:	20005848 	.word	0x20005848
 801cdd0:	200057e0 	.word	0x200057e0

0801cdd4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801cdd4:	2010      	movs	r0, #16
 801cdd6:	4770      	bx	lr

0801cdd8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801cdd8:	2000      	movs	r0, #0
 801cdda:	4770      	bx	lr

0801cddc <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 801cddc:	00d2      	lsls	r2, r2, #3
 801cdde:	0209      	lsls	r1, r1, #8
 801cde0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cde4:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801cde8:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 801cdec:	4310      	orrs	r0, r2
 801cdee:	4770      	bx	lr

0801cdf0 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 801cdf0:	0a09      	lsrs	r1, r1, #8
 801cdf2:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801cdf6:	4770      	bx	lr

0801cdf8 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 801cdf8:	08c9      	lsrs	r1, r1, #3
 801cdfa:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 801cdfe:	4770      	bx	lr

0801ce00 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 801ce00:	00c9      	lsls	r1, r1, #3
 801ce02:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801ce06:	4770      	bx	lr

0801ce08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ce08:	2bff      	cmp	r3, #255	; 0xff
 801ce0a:	d050      	beq.n	801ceae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ce0c:	2a0b      	cmp	r2, #11
 801ce0e:	d04a      	beq.n	801cea6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ce10:	d80e      	bhi.n	801ce30 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ce12:	2a03      	cmp	r2, #3
 801ce14:	d03f      	beq.n	801ce96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ce16:	d804      	bhi.n	801ce22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce18:	2a01      	cmp	r2, #1
 801ce1a:	d03e      	beq.n	801ce9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ce1c:	d93f      	bls.n	801ce9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ce1e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801ce20:	4770      	bx	lr
 801ce22:	2a09      	cmp	r2, #9
 801ce24:	d03f      	beq.n	801cea6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ce26:	d83c      	bhi.n	801cea2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ce28:	2a08      	cmp	r2, #8
 801ce2a:	d03a      	beq.n	801cea2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ce2c:	2000      	movs	r0, #0
 801ce2e:	4770      	bx	lr
 801ce30:	2a2f      	cmp	r2, #47	; 0x2f
 801ce32:	d024      	beq.n	801ce7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801ce34:	d80d      	bhi.n	801ce52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801ce36:	2a2d      	cmp	r2, #45	; 0x2d
 801ce38:	d014      	beq.n	801ce64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801ce3a:	d826      	bhi.n	801ce8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801ce3c:	2a2c      	cmp	r2, #44	; 0x2c
 801ce3e:	d1f5      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce40:	684b      	ldr	r3, [r1, #4]
 801ce42:	781b      	ldrb	r3, [r3, #0]
 801ce44:	2b01      	cmp	r3, #1
 801ce46:	d018      	beq.n	801ce7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801ce48:	d323      	bcc.n	801ce92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801ce4a:	2b02      	cmp	r3, #2
 801ce4c:	d1ee      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce4e:	6880      	ldr	r0, [r0, #8]
 801ce50:	4770      	bx	lr
 801ce52:	2a31      	cmp	r2, #49	; 0x31
 801ce54:	d004      	beq.n	801ce60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801ce56:	d328      	bcc.n	801ceaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ce58:	2a32      	cmp	r2, #50	; 0x32
 801ce5a:	d026      	beq.n	801ceaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ce5c:	2a33      	cmp	r2, #51	; 0x33
 801ce5e:	d1e5      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce60:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801ce62:	4770      	bx	lr
 801ce64:	684b      	ldr	r3, [r1, #4]
 801ce66:	781b      	ldrb	r3, [r3, #0]
 801ce68:	2b01      	cmp	r3, #1
 801ce6a:	d004      	beq.n	801ce76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce6c:	d30b      	bcc.n	801ce86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ce6e:	2b02      	cmp	r3, #2
 801ce70:	d1dc      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce72:	6900      	ldr	r0, [r0, #16]
 801ce74:	4770      	bx	lr
 801ce76:	6a00      	ldr	r0, [r0, #32]
 801ce78:	4770      	bx	lr
 801ce7a:	6980      	ldr	r0, [r0, #24]
 801ce7c:	4770      	bx	lr
 801ce7e:	684b      	ldr	r3, [r1, #4]
 801ce80:	781b      	ldrb	r3, [r3, #0]
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d1d2      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce86:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801ce88:	4770      	bx	lr
 801ce8a:	684b      	ldr	r3, [r1, #4]
 801ce8c:	781b      	ldrb	r3, [r3, #0]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d1cc      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce92:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ce94:	4770      	bx	lr
 801ce96:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801ce98:	4770      	bx	lr
 801ce9a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801ce9c:	4770      	bx	lr
 801ce9e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801cea0:	4770      	bx	lr
 801cea2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801cea4:	4770      	bx	lr
 801cea6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801cea8:	4770      	bx	lr
 801ceaa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801ceac:	4770      	bx	lr
 801ceae:	2a0b      	cmp	r2, #11
 801ceb0:	d049      	beq.n	801cf46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ceb2:	d80e      	bhi.n	801ced2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801ceb4:	2a03      	cmp	r2, #3
 801ceb6:	d040      	beq.n	801cf3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801ceb8:	d804      	bhi.n	801cec4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801ceba:	2a01      	cmp	r2, #1
 801cebc:	d03f      	beq.n	801cf3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801cebe:	d940      	bls.n	801cf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801cec0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801cec2:	4770      	bx	lr
 801cec4:	2a09      	cmp	r2, #9
 801cec6:	d03e      	beq.n	801cf46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cec8:	d801      	bhi.n	801cece <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801ceca:	2a08      	cmp	r2, #8
 801cecc:	d1ae      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cece:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801ced0:	4770      	bx	lr
 801ced2:	2a2f      	cmp	r2, #47	; 0x2f
 801ced4:	d024      	beq.n	801cf20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801ced6:	d80d      	bhi.n	801cef4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801ced8:	2a2d      	cmp	r2, #45	; 0x2d
 801ceda:	d014      	beq.n	801cf06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801cedc:	d826      	bhi.n	801cf2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801cede:	2a2c      	cmp	r2, #44	; 0x2c
 801cee0:	d1a4      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cee2:	684b      	ldr	r3, [r1, #4]
 801cee4:	781b      	ldrb	r3, [r3, #0]
 801cee6:	2b01      	cmp	r3, #1
 801cee8:	d018      	beq.n	801cf1c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801ceea:	d324      	bcc.n	801cf36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801ceec:	2b02      	cmp	r3, #2
 801ceee:	d19d      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cef0:	68c0      	ldr	r0, [r0, #12]
 801cef2:	4770      	bx	lr
 801cef4:	2a31      	cmp	r2, #49	; 0x31
 801cef6:	d004      	beq.n	801cf02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801cef8:	d327      	bcc.n	801cf4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801cefa:	2a32      	cmp	r2, #50	; 0x32
 801cefc:	d025      	beq.n	801cf4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801cefe:	2a33      	cmp	r2, #51	; 0x33
 801cf00:	d194      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf02:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801cf04:	4770      	bx	lr
 801cf06:	684b      	ldr	r3, [r1, #4]
 801cf08:	781b      	ldrb	r3, [r3, #0]
 801cf0a:	2b01      	cmp	r3, #1
 801cf0c:	d004      	beq.n	801cf18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801cf0e:	d30b      	bcc.n	801cf28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801cf10:	2b02      	cmp	r3, #2
 801cf12:	d18b      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf14:	6940      	ldr	r0, [r0, #20]
 801cf16:	4770      	bx	lr
 801cf18:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801cf1a:	4770      	bx	lr
 801cf1c:	69c0      	ldr	r0, [r0, #28]
 801cf1e:	4770      	bx	lr
 801cf20:	684b      	ldr	r3, [r1, #4]
 801cf22:	781b      	ldrb	r3, [r3, #0]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d181      	bne.n	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf28:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801cf2a:	4770      	bx	lr
 801cf2c:	684b      	ldr	r3, [r1, #4]
 801cf2e:	781b      	ldrb	r3, [r3, #0]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	f47f af7b 	bne.w	801ce2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf36:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801cf38:	4770      	bx	lr
 801cf3a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801cf3c:	4770      	bx	lr
 801cf3e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801cf40:	4770      	bx	lr
 801cf42:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801cf44:	4770      	bx	lr
 801cf46:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801cf48:	4770      	bx	lr
 801cf4a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801cf4c:	4770      	bx	lr

0801cf4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cf4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf52:	b087      	sub	sp, #28
 801cf54:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cf56:	9205      	str	r2, [sp, #20]
 801cf58:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801cf5c:	9101      	str	r1, [sp, #4]
 801cf5e:	9202      	str	r2, [sp, #8]
 801cf60:	6841      	ldr	r1, [r0, #4]
 801cf62:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801cf66:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801cf6a:	fb01 2404 	mla	r4, r1, r4, r2
 801cf6e:	6802      	ldr	r2, [r0, #0]
 801cf70:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cf74:	f8de 2000 	ldr.w	r2, [lr]
 801cf78:	9203      	str	r2, [sp, #12]
 801cf7a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801cf7e:	3204      	adds	r2, #4
 801cf80:	9204      	str	r2, [sp, #16]
 801cf82:	9a02      	ldr	r2, [sp, #8]
 801cf84:	43d6      	mvns	r6, r2
 801cf86:	b2f6      	uxtb	r6, r6
 801cf88:	9a01      	ldr	r2, [sp, #4]
 801cf8a:	2a00      	cmp	r2, #0
 801cf8c:	dc03      	bgt.n	801cf96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cf8e:	9a05      	ldr	r2, [sp, #20]
 801cf90:	2a00      	cmp	r2, #0
 801cf92:	f340 8129 	ble.w	801d1e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cf96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cf98:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801cf9c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cfa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cfa2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801cfa6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	dd0e      	ble.n	801cfcc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cfae:	1408      	asrs	r0, r1, #16
 801cfb0:	d405      	bmi.n	801cfbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cfb2:	4560      	cmp	r0, ip
 801cfb4:	da03      	bge.n	801cfbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cfb6:	1410      	asrs	r0, r2, #16
 801cfb8:	d401      	bmi.n	801cfbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cfba:	42b8      	cmp	r0, r7
 801cfbc:	db07      	blt.n	801cfce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cfbe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cfc0:	3b01      	subs	r3, #1
 801cfc2:	3402      	adds	r4, #2
 801cfc4:	4401      	add	r1, r0
 801cfc6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cfc8:	4402      	add	r2, r0
 801cfca:	e7ee      	b.n	801cfaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cfcc:	d071      	beq.n	801d0b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cfce:	1e58      	subs	r0, r3, #1
 801cfd0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cfd2:	fb05 1500 	mla	r5, r5, r0, r1
 801cfd6:	142d      	asrs	r5, r5, #16
 801cfd8:	d45f      	bmi.n	801d09a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cfda:	4565      	cmp	r5, ip
 801cfdc:	da5d      	bge.n	801d09a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cfde:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cfe0:	fb05 2000 	mla	r0, r5, r0, r2
 801cfe4:	1400      	asrs	r0, r0, #16
 801cfe6:	d458      	bmi.n	801d09a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cfe8:	42b8      	cmp	r0, r7
 801cfea:	da56      	bge.n	801d09a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cfec:	4699      	mov	r9, r3
 801cfee:	46a2      	mov	sl, r4
 801cff0:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801cff4:	f1b9 0f00 	cmp.w	r9, #0
 801cff8:	dd57      	ble.n	801d0aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801cffa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cffe:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d002:	9803      	ldr	r0, [sp, #12]
 801d004:	140d      	asrs	r5, r1, #16
 801d006:	f109 39ff 	add.w	r9, r9, #4294967295
 801d00a:	fb07 000c 	mla	r0, r7, ip, r0
 801d00e:	5d40      	ldrb	r0, [r0, r5]
 801d010:	9d04      	ldr	r5, [sp, #16]
 801d012:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d016:	f8ba 5000 	ldrh.w	r5, [sl]
 801d01a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d01e:	122f      	asrs	r7, r5, #8
 801d020:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d024:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d028:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d02c:	00ed      	lsls	r5, r5, #3
 801d02e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801d032:	fb17 f706 	smulbb	r7, r7, r6
 801d036:	b2ed      	uxtb	r5, r5
 801d038:	fb18 f806 	smulbb	r8, r8, r6
 801d03c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d040:	10c7      	asrs	r7, r0, #3
 801d042:	fb15 f506 	smulbb	r5, r5, r6
 801d046:	00c0      	lsls	r0, r0, #3
 801d048:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d04c:	fa1f fc8c 	uxth.w	ip, ip
 801d050:	b2c0      	uxtb	r0, r0
 801d052:	fb07 870b 	mla	r7, r7, fp, r8
 801d056:	fb00 500b 	mla	r0, r0, fp, r5
 801d05a:	f10c 0501 	add.w	r5, ip, #1
 801d05e:	b2bf      	uxth	r7, r7
 801d060:	b280      	uxth	r0, r0
 801d062:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d066:	f107 0801 	add.w	r8, r7, #1
 801d06a:	1c45      	adds	r5, r0, #1
 801d06c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d070:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d074:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d078:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d07a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d07e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d082:	4401      	add	r1, r0
 801d084:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d088:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d08a:	ea4c 0c05 	orr.w	ip, ip, r5
 801d08e:	4402      	add	r2, r0
 801d090:	ea4c 0c08 	orr.w	ip, ip, r8
 801d094:	f82a cb02 	strh.w	ip, [sl], #2
 801d098:	e7ac      	b.n	801cff4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d09a:	f04f 0800 	mov.w	r8, #0
 801d09e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801d0a2:	eb03 0008 	add.w	r0, r3, r8
 801d0a6:	2800      	cmp	r0, #0
 801d0a8:	dc41      	bgt.n	801d12e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d0aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0ae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d0b2:	9b01      	ldr	r3, [sp, #4]
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	f340 8097 	ble.w	801d1e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d0ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d0be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0c8:	eef0 6a62 	vmov.f32	s13, s5
 801d0cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d0d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d0d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d0d8:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801d0dc:	eef0 6a43 	vmov.f32	s13, s6
 801d0e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d0e4:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801d0e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d0ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d0f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d0f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d0f8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d0fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d100:	ee12 2a90 	vmov	r2, s5
 801d104:	eef0 2a47 	vmov.f32	s5, s14
 801d108:	fb92 f3f3 	sdiv	r3, r2, r3
 801d10c:	ee13 2a10 	vmov	r2, s6
 801d110:	9313      	str	r3, [sp, #76]	; 0x4c
 801d112:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d114:	eeb0 3a67 	vmov.f32	s6, s15
 801d118:	fb92 f3f3 	sdiv	r3, r2, r3
 801d11c:	9314      	str	r3, [sp, #80]	; 0x50
 801d11e:	9b01      	ldr	r3, [sp, #4]
 801d120:	9a05      	ldr	r2, [sp, #20]
 801d122:	3b01      	subs	r3, #1
 801d124:	9301      	str	r3, [sp, #4]
 801d126:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d128:	bf08      	it	eq
 801d12a:	4613      	moveq	r3, r2
 801d12c:	e72c      	b.n	801cf88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d12e:	140f      	asrs	r7, r1, #16
 801d130:	d453      	bmi.n	801d1da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d132:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d136:	42bd      	cmp	r5, r7
 801d138:	dd4f      	ble.n	801d1da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d13a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d13e:	d44c      	bmi.n	801d1da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d140:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d144:	4560      	cmp	r0, ip
 801d146:	dd48      	ble.n	801d1da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d148:	9803      	ldr	r0, [sp, #12]
 801d14a:	b22d      	sxth	r5, r5
 801d14c:	fb0c 0505 	mla	r5, ip, r5, r0
 801d150:	5de8      	ldrb	r0, [r5, r7]
 801d152:	9d04      	ldr	r5, [sp, #16]
 801d154:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d158:	f06f 0501 	mvn.w	r5, #1
 801d15c:	fb05 fb08 	mul.w	fp, r5, r8
 801d160:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d164:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d168:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d16c:	122f      	asrs	r7, r5, #8
 801d16e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d172:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d176:	00ed      	lsls	r5, r5, #3
 801d178:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d17c:	fb17 f706 	smulbb	r7, r7, r6
 801d180:	b2ed      	uxtb	r5, r5
 801d182:	fb19 f906 	smulbb	r9, r9, r6
 801d186:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d18a:	10c7      	asrs	r7, r0, #3
 801d18c:	fb15 f506 	smulbb	r5, r5, r6
 801d190:	00c0      	lsls	r0, r0, #3
 801d192:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d196:	fa1f fc8c 	uxth.w	ip, ip
 801d19a:	b2c0      	uxtb	r0, r0
 801d19c:	fb07 970a 	mla	r7, r7, sl, r9
 801d1a0:	fb00 500a 	mla	r0, r0, sl, r5
 801d1a4:	f10c 0501 	add.w	r5, ip, #1
 801d1a8:	b2bf      	uxth	r7, r7
 801d1aa:	b280      	uxth	r0, r0
 801d1ac:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d1b0:	f107 0901 	add.w	r9, r7, #1
 801d1b4:	1c45      	adds	r5, r0, #1
 801d1b6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d1ba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d1be:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d1c2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d1c6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d1ca:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d1ce:	ea4c 0c05 	orr.w	ip, ip, r5
 801d1d2:	ea4c 0c09 	orr.w	ip, ip, r9
 801d1d6:	f824 c00b 	strh.w	ip, [r4, fp]
 801d1da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d1dc:	f108 38ff 	add.w	r8, r8, #4294967295
 801d1e0:	4401      	add	r1, r0
 801d1e2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d1e4:	4402      	add	r2, r0
 801d1e6:	e75c      	b.n	801d0a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d1e8:	b007      	add	sp, #28
 801d1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d1ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d1ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1f2:	b085      	sub	sp, #20
 801d1f4:	4693      	mov	fp, r2
 801d1f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d1fa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d1fc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d1fe:	6870      	ldr	r0, [r6, #4]
 801d200:	9100      	str	r1, [sp, #0]
 801d202:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d206:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801d20a:	fb00 2404 	mla	r4, r0, r4, r2
 801d20e:	6832      	ldr	r2, [r6, #0]
 801d210:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d214:	682a      	ldr	r2, [r5, #0]
 801d216:	9201      	str	r2, [sp, #4]
 801d218:	686a      	ldr	r2, [r5, #4]
 801d21a:	3204      	adds	r2, #4
 801d21c:	9202      	str	r2, [sp, #8]
 801d21e:	9a00      	ldr	r2, [sp, #0]
 801d220:	2a00      	cmp	r2, #0
 801d222:	dc03      	bgt.n	801d22c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d224:	f1bb 0f00 	cmp.w	fp, #0
 801d228:	f340 80a0 	ble.w	801d36c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d22c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d22e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d232:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d236:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d238:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d23c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d240:	2b00      	cmp	r3, #0
 801d242:	dd0c      	ble.n	801d25e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d244:	1406      	asrs	r6, r0, #16
 801d246:	d405      	bmi.n	801d254 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d248:	454e      	cmp	r6, r9
 801d24a:	da03      	bge.n	801d254 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d24c:	1416      	asrs	r6, r2, #16
 801d24e:	d401      	bmi.n	801d254 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d250:	4546      	cmp	r6, r8
 801d252:	db05      	blt.n	801d260 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d254:	4470      	add	r0, lr
 801d256:	4462      	add	r2, ip
 801d258:	3b01      	subs	r3, #1
 801d25a:	3402      	adds	r4, #2
 801d25c:	e7f0      	b.n	801d240 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d25e:	d00f      	beq.n	801d280 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d260:	1e5e      	subs	r6, r3, #1
 801d262:	fb0e 0706 	mla	r7, lr, r6, r0
 801d266:	143f      	asrs	r7, r7, #16
 801d268:	d541      	bpl.n	801d2ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801d26a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d26e:	4698      	mov	r8, r3
 801d270:	9603      	str	r6, [sp, #12]
 801d272:	f1b8 0f00 	cmp.w	r8, #0
 801d276:	dc59      	bgt.n	801d32c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d278:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d27c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d280:	9b00      	ldr	r3, [sp, #0]
 801d282:	2b00      	cmp	r3, #0
 801d284:	dd72      	ble.n	801d36c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d286:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d28a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d28c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d290:	eeb0 6a62 	vmov.f32	s12, s5
 801d294:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d298:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d29c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2a0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d2a4:	eeb0 6a43 	vmov.f32	s12, s6
 801d2a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2ac:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d2b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d2b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d2b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d2bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d2c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d2c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d2c8:	ee12 2a90 	vmov	r2, s5
 801d2cc:	eef0 2a47 	vmov.f32	s5, s14
 801d2d0:	fb92 fef3 	sdiv	lr, r2, r3
 801d2d4:	ee13 2a10 	vmov	r2, s6
 801d2d8:	eeb0 3a67 	vmov.f32	s6, s15
 801d2dc:	fb92 fcf3 	sdiv	ip, r2, r3
 801d2e0:	9b00      	ldr	r3, [sp, #0]
 801d2e2:	3b01      	subs	r3, #1
 801d2e4:	9300      	str	r3, [sp, #0]
 801d2e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2e8:	bf08      	it	eq
 801d2ea:	465b      	moveq	r3, fp
 801d2ec:	e797      	b.n	801d21e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d2ee:	454f      	cmp	r7, r9
 801d2f0:	dabb      	bge.n	801d26a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d2f2:	fb0c 2606 	mla	r6, ip, r6, r2
 801d2f6:	1436      	asrs	r6, r6, #16
 801d2f8:	d4b7      	bmi.n	801d26a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d2fa:	4546      	cmp	r6, r8
 801d2fc:	dab5      	bge.n	801d26a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d2fe:	461e      	mov	r6, r3
 801d300:	46a0      	mov	r8, r4
 801d302:	2e00      	cmp	r6, #0
 801d304:	ddb8      	ble.n	801d278 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d306:	1417      	asrs	r7, r2, #16
 801d308:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d30c:	9901      	ldr	r1, [sp, #4]
 801d30e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d312:	4462      	add	r2, ip
 801d314:	4470      	add	r0, lr
 801d316:	fb0a 1707 	mla	r7, sl, r7, r1
 801d31a:	9902      	ldr	r1, [sp, #8]
 801d31c:	3e01      	subs	r6, #1
 801d31e:	f817 7009 	ldrb.w	r7, [r7, r9]
 801d322:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d326:	f828 7b02 	strh.w	r7, [r8], #2
 801d32a:	e7ea      	b.n	801d302 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d32c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d330:	d417      	bmi.n	801d362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d332:	68ae      	ldr	r6, [r5, #8]
 801d334:	454e      	cmp	r6, r9
 801d336:	dd14      	ble.n	801d362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d338:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d33c:	d411      	bmi.n	801d362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d33e:	68ef      	ldr	r7, [r5, #12]
 801d340:	4557      	cmp	r7, sl
 801d342:	dd0e      	ble.n	801d362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d344:	9f01      	ldr	r7, [sp, #4]
 801d346:	b236      	sxth	r6, r6
 801d348:	f06f 0101 	mvn.w	r1, #1
 801d34c:	fb0a 7606 	mla	r6, sl, r6, r7
 801d350:	9f02      	ldr	r7, [sp, #8]
 801d352:	f816 6009 	ldrb.w	r6, [r6, r9]
 801d356:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d35a:	fb01 f608 	mul.w	r6, r1, r8
 801d35e:	9903      	ldr	r1, [sp, #12]
 801d360:	538f      	strh	r7, [r1, r6]
 801d362:	4470      	add	r0, lr
 801d364:	4462      	add	r2, ip
 801d366:	f108 38ff 	add.w	r8, r8, #4294967295
 801d36a:	e782      	b.n	801d272 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d36c:	b005      	add	sp, #20
 801d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d372 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d376:	b087      	sub	sp, #28
 801d378:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d37a:	9205      	str	r2, [sp, #20]
 801d37c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d380:	9102      	str	r1, [sp, #8]
 801d382:	9203      	str	r2, [sp, #12]
 801d384:	6861      	ldr	r1, [r4, #4]
 801d386:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d38a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801d38e:	fb01 2000 	mla	r0, r1, r0, r2
 801d392:	6822      	ldr	r2, [r4, #0]
 801d394:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801d398:	9200      	str	r2, [sp, #0]
 801d39a:	f8dc 2000 	ldr.w	r2, [ip]
 801d39e:	9204      	str	r2, [sp, #16]
 801d3a0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d3a4:	3204      	adds	r2, #4
 801d3a6:	9201      	str	r2, [sp, #4]
 801d3a8:	9a03      	ldr	r2, [sp, #12]
 801d3aa:	43d5      	mvns	r5, r2
 801d3ac:	b2ed      	uxtb	r5, r5
 801d3ae:	9a02      	ldr	r2, [sp, #8]
 801d3b0:	2a00      	cmp	r2, #0
 801d3b2:	dc03      	bgt.n	801d3bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d3b4:	9a05      	ldr	r2, [sp, #20]
 801d3b6:	2a00      	cmp	r2, #0
 801d3b8:	f340 812c 	ble.w	801d614 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d3bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d3be:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d3c2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d3c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d3c8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d3cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	dd10      	ble.n	801d3f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d3d4:	140c      	asrs	r4, r1, #16
 801d3d6:	d405      	bmi.n	801d3e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d3d8:	4574      	cmp	r4, lr
 801d3da:	da03      	bge.n	801d3e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d3dc:	1414      	asrs	r4, r2, #16
 801d3de:	d401      	bmi.n	801d3e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d3e0:	42bc      	cmp	r4, r7
 801d3e2:	db09      	blt.n	801d3f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d3e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d3e6:	3b01      	subs	r3, #1
 801d3e8:	9800      	ldr	r0, [sp, #0]
 801d3ea:	4421      	add	r1, r4
 801d3ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d3ee:	3002      	adds	r0, #2
 801d3f0:	4422      	add	r2, r4
 801d3f2:	9000      	str	r0, [sp, #0]
 801d3f4:	e7ec      	b.n	801d3d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d3f6:	d071      	beq.n	801d4dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801d3f8:	1e5c      	subs	r4, r3, #1
 801d3fa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d3fc:	fb06 1604 	mla	r6, r6, r4, r1
 801d400:	1436      	asrs	r6, r6, #16
 801d402:	d45d      	bmi.n	801d4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d404:	4576      	cmp	r6, lr
 801d406:	da5b      	bge.n	801d4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d408:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d40a:	fb06 2404 	mla	r4, r6, r4, r2
 801d40e:	1424      	asrs	r4, r4, #16
 801d410:	d456      	bmi.n	801d4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d412:	42bc      	cmp	r4, r7
 801d414:	da54      	bge.n	801d4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d416:	4698      	mov	r8, r3
 801d418:	f8dd 9000 	ldr.w	r9, [sp]
 801d41c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801d420:	f1b8 0f00 	cmp.w	r8, #0
 801d424:	dd54      	ble.n	801d4d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d426:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d42a:	1414      	asrs	r4, r2, #16
 801d42c:	9804      	ldr	r0, [sp, #16]
 801d42e:	140e      	asrs	r6, r1, #16
 801d430:	f108 38ff 	add.w	r8, r8, #4294967295
 801d434:	fb07 0404 	mla	r4, r7, r4, r0
 801d438:	9801      	ldr	r0, [sp, #4]
 801d43a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801d43e:	f8b9 4000 	ldrh.w	r4, [r9]
 801d442:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d446:	1227      	asrs	r7, r4, #8
 801d448:	eb00 0b0e 	add.w	fp, r0, lr
 801d44c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801d450:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d454:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d456:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d45a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d45e:	4401      	add	r1, r0
 801d460:	fb16 f60a 	smulbb	r6, r6, sl
 801d464:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d466:	fb1b fb0a 	smulbb	fp, fp, sl
 801d46a:	fb07 6705 	mla	r7, r7, r5, r6
 801d46e:	10e6      	asrs	r6, r4, #3
 801d470:	00e4      	lsls	r4, r4, #3
 801d472:	4402      	add	r2, r0
 801d474:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d478:	b2bf      	uxth	r7, r7
 801d47a:	b2e4      	uxtb	r4, r4
 801d47c:	fb06 b605 	mla	r6, r6, r5, fp
 801d480:	fb14 f405 	smulbb	r4, r4, r5
 801d484:	b2b6      	uxth	r6, r6
 801d486:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801d48a:	1c7c      	adds	r4, r7, #1
 801d48c:	f106 0b01 	add.w	fp, r6, #1
 801d490:	fa1f fe8e 	uxth.w	lr, lr
 801d494:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d498:	f10e 0401 	add.w	r4, lr, #1
 801d49c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d4a0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d4a4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801d4a8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d4ac:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d4b0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d4b4:	4327      	orrs	r7, r4
 801d4b6:	ea47 070b 	orr.w	r7, r7, fp
 801d4ba:	f829 7b02 	strh.w	r7, [r9], #2
 801d4be:	e7af      	b.n	801d420 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d4c0:	f04f 0e00 	mov.w	lr, #0
 801d4c4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801d4c8:	eb03 040e 	add.w	r4, r3, lr
 801d4cc:	2c00      	cmp	r4, #0
 801d4ce:	dc43      	bgt.n	801d558 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d4d0:	9a00      	ldr	r2, [sp, #0]
 801d4d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4d6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d4da:	9300      	str	r3, [sp, #0]
 801d4dc:	9b02      	ldr	r3, [sp, #8]
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	f340 8098 	ble.w	801d614 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d4e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d4e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4f2:	eef0 6a62 	vmov.f32	s13, s5
 801d4f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d4fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d4fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d502:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801d506:	eef0 6a43 	vmov.f32	s13, s6
 801d50a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d50e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801d512:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d516:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d51a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d51e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d522:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d526:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d52a:	ee12 2a90 	vmov	r2, s5
 801d52e:	eef0 2a47 	vmov.f32	s5, s14
 801d532:	fb92 f3f3 	sdiv	r3, r2, r3
 801d536:	ee13 2a10 	vmov	r2, s6
 801d53a:	9313      	str	r3, [sp, #76]	; 0x4c
 801d53c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d53e:	eeb0 3a67 	vmov.f32	s6, s15
 801d542:	fb92 f3f3 	sdiv	r3, r2, r3
 801d546:	9314      	str	r3, [sp, #80]	; 0x50
 801d548:	9b02      	ldr	r3, [sp, #8]
 801d54a:	9a05      	ldr	r2, [sp, #20]
 801d54c:	3b01      	subs	r3, #1
 801d54e:	9302      	str	r3, [sp, #8]
 801d550:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d552:	bf08      	it	eq
 801d554:	4613      	moveq	r3, r2
 801d556:	e72a      	b.n	801d3ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d558:	140f      	asrs	r7, r1, #16
 801d55a:	d454      	bmi.n	801d606 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d55c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d560:	42be      	cmp	r6, r7
 801d562:	dd50      	ble.n	801d606 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d564:	ea5f 4822 	movs.w	r8, r2, asr #16
 801d568:	d44d      	bmi.n	801d606 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d56a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801d56e:	4544      	cmp	r4, r8
 801d570:	dd49      	ble.n	801d606 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d572:	9c04      	ldr	r4, [sp, #16]
 801d574:	b236      	sxth	r6, r6
 801d576:	f06f 0001 	mvn.w	r0, #1
 801d57a:	fb08 4606 	mla	r6, r8, r6, r4
 801d57e:	9c01      	ldr	r4, [sp, #4]
 801d580:	fb00 fa0e 	mul.w	sl, r0, lr
 801d584:	9800      	ldr	r0, [sp, #0]
 801d586:	f816 8007 	ldrb.w	r8, [r6, r7]
 801d58a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d58e:	eb04 0b08 	add.w	fp, r4, r8
 801d592:	f830 400a 	ldrh.w	r4, [r0, sl]
 801d596:	9801      	ldr	r0, [sp, #4]
 801d598:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d59c:	1227      	asrs	r7, r4, #8
 801d59e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d5a2:	fb16 f609 	smulbb	r6, r6, r9
 801d5a6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d5aa:	f810 8008 	ldrb.w	r8, [r0, r8]
 801d5ae:	fb1b fb09 	smulbb	fp, fp, r9
 801d5b2:	fb07 6705 	mla	r7, r7, r5, r6
 801d5b6:	10e6      	asrs	r6, r4, #3
 801d5b8:	00e4      	lsls	r4, r4, #3
 801d5ba:	9800      	ldr	r0, [sp, #0]
 801d5bc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d5c0:	b2bf      	uxth	r7, r7
 801d5c2:	b2e4      	uxtb	r4, r4
 801d5c4:	fb06 b605 	mla	r6, r6, r5, fp
 801d5c8:	fb14 f405 	smulbb	r4, r4, r5
 801d5cc:	b2b6      	uxth	r6, r6
 801d5ce:	fb08 4809 	mla	r8, r8, r9, r4
 801d5d2:	1c7c      	adds	r4, r7, #1
 801d5d4:	f106 0b01 	add.w	fp, r6, #1
 801d5d8:	fa1f f888 	uxth.w	r8, r8
 801d5dc:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d5e0:	f108 0401 	add.w	r4, r8, #1
 801d5e4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d5e8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d5ec:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801d5f0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d5f4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d5f8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d5fc:	4327      	orrs	r7, r4
 801d5fe:	ea47 070b 	orr.w	r7, r7, fp
 801d602:	f820 700a 	strh.w	r7, [r0, sl]
 801d606:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d608:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d60c:	4401      	add	r1, r0
 801d60e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d610:	4402      	add	r2, r0
 801d612:	e759      	b.n	801d4c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d614:	b007      	add	sp, #28
 801d616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d61c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d620:	b085      	sub	sp, #20
 801d622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d626:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d628:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d62a:	9203      	str	r2, [sp, #12]
 801d62c:	6870      	ldr	r0, [r6, #4]
 801d62e:	686f      	ldr	r7, [r5, #4]
 801d630:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801d634:	3704      	adds	r7, #4
 801d636:	9101      	str	r1, [sp, #4]
 801d638:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d63c:	fb00 2404 	mla	r4, r0, r4, r2
 801d640:	6832      	ldr	r2, [r6, #0]
 801d642:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d646:	682a      	ldr	r2, [r5, #0]
 801d648:	9202      	str	r2, [sp, #8]
 801d64a:	9a01      	ldr	r2, [sp, #4]
 801d64c:	2a00      	cmp	r2, #0
 801d64e:	dc03      	bgt.n	801d658 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d650:	9a03      	ldr	r2, [sp, #12]
 801d652:	2a00      	cmp	r2, #0
 801d654:	f340 80cc 	ble.w	801d7f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d65a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d65e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d662:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d664:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d668:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	dd0d      	ble.n	801d68c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d670:	1406      	asrs	r6, r0, #16
 801d672:	d405      	bmi.n	801d680 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d674:	454e      	cmp	r6, r9
 801d676:	da03      	bge.n	801d680 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d678:	1416      	asrs	r6, r2, #16
 801d67a:	d401      	bmi.n	801d680 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d67c:	4546      	cmp	r6, r8
 801d67e:	db06      	blt.n	801d68e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d680:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d682:	4460      	add	r0, ip
 801d684:	3b01      	subs	r3, #1
 801d686:	3402      	adds	r4, #2
 801d688:	4432      	add	r2, r6
 801d68a:	e7ef      	b.n	801d66c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d68c:	d00f      	beq.n	801d6ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d68e:	1e5e      	subs	r6, r3, #1
 801d690:	fb0c 0e06 	mla	lr, ip, r6, r0
 801d694:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d698:	d543      	bpl.n	801d722 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801d69a:	4698      	mov	r8, r3
 801d69c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801d6a0:	f1b8 0f00 	cmp.w	r8, #0
 801d6a4:	dc71      	bgt.n	801d78a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d6a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d6aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d6ae:	9b01      	ldr	r3, [sp, #4]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	f340 809d 	ble.w	801d7f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d6b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d6bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6c0:	eeb0 6a62 	vmov.f32	s12, s5
 801d6c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d6c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d6cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6d0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d6d4:	eeb0 6a43 	vmov.f32	s12, s6
 801d6d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6dc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d6e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d6e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d6e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d6ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d6f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d6f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d6f8:	ee12 2a90 	vmov	r2, s5
 801d6fc:	eef0 2a47 	vmov.f32	s5, s14
 801d700:	fb92 fcf3 	sdiv	ip, r2, r3
 801d704:	ee13 2a10 	vmov	r2, s6
 801d708:	eeb0 3a67 	vmov.f32	s6, s15
 801d70c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d710:	9312      	str	r3, [sp, #72]	; 0x48
 801d712:	9b01      	ldr	r3, [sp, #4]
 801d714:	9a03      	ldr	r2, [sp, #12]
 801d716:	3b01      	subs	r3, #1
 801d718:	9301      	str	r3, [sp, #4]
 801d71a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d71c:	bf08      	it	eq
 801d71e:	4613      	moveq	r3, r2
 801d720:	e793      	b.n	801d64a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d722:	45ce      	cmp	lr, r9
 801d724:	dab9      	bge.n	801d69a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d726:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d728:	fb01 2606 	mla	r6, r1, r6, r2
 801d72c:	1436      	asrs	r6, r6, #16
 801d72e:	d4b4      	bmi.n	801d69a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d730:	4546      	cmp	r6, r8
 801d732:	dab2      	bge.n	801d69a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d734:	4698      	mov	r8, r3
 801d736:	46a2      	mov	sl, r4
 801d738:	f1b8 0f00 	cmp.w	r8, #0
 801d73c:	ddb3      	ble.n	801d6a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d73e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d742:	1416      	asrs	r6, r2, #16
 801d744:	9902      	ldr	r1, [sp, #8]
 801d746:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801d74a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d74e:	4460      	add	r0, ip
 801d750:	fb09 1606 	mla	r6, r9, r6, r1
 801d754:	4928      	ldr	r1, [pc, #160]	; (801d7f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801d756:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801d75a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d75e:	eb07 0b0e 	add.w	fp, r7, lr
 801d762:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801d766:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d76a:	00f6      	lsls	r6, r6, #3
 801d76c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801d770:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d772:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d776:	440a      	add	r2, r1
 801d778:	ea49 0606 	orr.w	r6, r9, r6
 801d77c:	f817 900e 	ldrb.w	r9, [r7, lr]
 801d780:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801d784:	f82a 6b02 	strh.w	r6, [sl], #2
 801d788:	e7d6      	b.n	801d738 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d78a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d78e:	d429      	bmi.n	801d7e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d790:	68ae      	ldr	r6, [r5, #8]
 801d792:	454e      	cmp	r6, r9
 801d794:	dd26      	ble.n	801d7e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d796:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801d79a:	d423      	bmi.n	801d7e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d79c:	68e9      	ldr	r1, [r5, #12]
 801d79e:	4559      	cmp	r1, fp
 801d7a0:	dd20      	ble.n	801d7e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d7a2:	fa0f fe86 	sxth.w	lr, r6
 801d7a6:	9902      	ldr	r1, [sp, #8]
 801d7a8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801d7ac:	f06f 0101 	mvn.w	r1, #1
 801d7b0:	f81e e009 	ldrb.w	lr, [lr, r9]
 801d7b4:	fb01 f908 	mul.w	r9, r1, r8
 801d7b8:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801d7bc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d7c0:	eb07 060e 	add.w	r6, r7, lr
 801d7c4:	f896 b002 	ldrb.w	fp, [r6, #2]
 801d7c8:	7876      	ldrb	r6, [r6, #1]
 801d7ca:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801d7ce:	00f6      	lsls	r6, r6, #3
 801d7d0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d7d4:	ea4b 0606 	orr.w	r6, fp, r6
 801d7d8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801d7dc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801d7e0:	f82a 6009 	strh.w	r6, [sl, r9]
 801d7e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d7e6:	4460      	add	r0, ip
 801d7e8:	f108 38ff 	add.w	r8, r8, #4294967295
 801d7ec:	440a      	add	r2, r1
 801d7ee:	e757      	b.n	801d6a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d7f0:	b005      	add	sp, #20
 801d7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7f6:	bf00      	nop
 801d7f8:	fffff800 	.word	0xfffff800

0801d7fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d800:	b087      	sub	sp, #28
 801d802:	468b      	mov	fp, r1
 801d804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d808:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d80a:	9204      	str	r2, [sp, #16]
 801d80c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d810:	6841      	ldr	r1, [r0, #4]
 801d812:	9205      	str	r2, [sp, #20]
 801d814:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d818:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d81c:	fb01 2404 	mla	r4, r1, r4, r2
 801d820:	6802      	ldr	r2, [r0, #0]
 801d822:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d826:	f8dc 2000 	ldr.w	r2, [ip]
 801d82a:	9201      	str	r2, [sp, #4]
 801d82c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d830:	3204      	adds	r2, #4
 801d832:	9202      	str	r2, [sp, #8]
 801d834:	f1bb 0f00 	cmp.w	fp, #0
 801d838:	dc03      	bgt.n	801d842 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d83a:	9a04      	ldr	r2, [sp, #16]
 801d83c:	2a00      	cmp	r2, #0
 801d83e:	f340 8138 	ble.w	801dab2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d842:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d844:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d848:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d84c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d84e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801d852:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d856:	2b00      	cmp	r3, #0
 801d858:	dd0e      	ble.n	801d878 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d85a:	1402      	asrs	r2, r0, #16
 801d85c:	d405      	bmi.n	801d86a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d85e:	42ba      	cmp	r2, r7
 801d860:	da03      	bge.n	801d86a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d862:	140a      	asrs	r2, r1, #16
 801d864:	d401      	bmi.n	801d86a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d866:	42b2      	cmp	r2, r6
 801d868:	db07      	blt.n	801d87a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d86a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d86c:	3b01      	subs	r3, #1
 801d86e:	3402      	adds	r4, #2
 801d870:	4410      	add	r0, r2
 801d872:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d874:	4411      	add	r1, r2
 801d876:	e7ee      	b.n	801d856 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d878:	d019      	beq.n	801d8ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d87a:	1e5a      	subs	r2, r3, #1
 801d87c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d87e:	fb05 0502 	mla	r5, r5, r2, r0
 801d882:	142d      	asrs	r5, r5, #16
 801d884:	d409      	bmi.n	801d89a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d886:	42bd      	cmp	r5, r7
 801d888:	da07      	bge.n	801d89a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d88a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d88c:	fb05 1202 	mla	r2, r5, r2, r1
 801d890:	1412      	asrs	r2, r2, #16
 801d892:	d402      	bmi.n	801d89a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d894:	42b2      	cmp	r2, r6
 801d896:	f2c0 80ac 	blt.w	801d9f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801d89a:	f04f 0e00 	mov.w	lr, #0
 801d89e:	eb03 020e 	add.w	r2, r3, lr
 801d8a2:	2a00      	cmp	r2, #0
 801d8a4:	dc3e      	bgt.n	801d924 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d8a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d8aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d8ae:	f1bb 0f00 	cmp.w	fp, #0
 801d8b2:	f340 80fe 	ble.w	801dab2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d8b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d8ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d8bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d8c0:	f1bb 0b01 	subs.w	fp, fp, #1
 801d8c4:	eeb0 6a62 	vmov.f32	s12, s5
 801d8c8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d8cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d8d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8d4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d8d8:	eeb0 6a43 	vmov.f32	s12, s6
 801d8dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8e0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d8e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d8e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d8ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d8f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d8f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d8f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d8fc:	ee12 2a90 	vmov	r2, s5
 801d900:	eef0 2a47 	vmov.f32	s5, s14
 801d904:	fb92 f3f3 	sdiv	r3, r2, r3
 801d908:	ee13 2a10 	vmov	r2, s6
 801d90c:	9313      	str	r3, [sp, #76]	; 0x4c
 801d90e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d910:	eeb0 3a67 	vmov.f32	s6, s15
 801d914:	fb92 f3f3 	sdiv	r3, r2, r3
 801d918:	9a04      	ldr	r2, [sp, #16]
 801d91a:	9314      	str	r3, [sp, #80]	; 0x50
 801d91c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d91e:	bf08      	it	eq
 801d920:	4613      	moveq	r3, r2
 801d922:	e787      	b.n	801d834 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d924:	1406      	asrs	r6, r0, #16
 801d926:	d45d      	bmi.n	801d9e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d928:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801d92c:	42b5      	cmp	r5, r6
 801d92e:	dd59      	ble.n	801d9e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d930:	140f      	asrs	r7, r1, #16
 801d932:	d457      	bmi.n	801d9e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d934:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d938:	42ba      	cmp	r2, r7
 801d93a:	dd53      	ble.n	801d9e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d93c:	9a01      	ldr	r2, [sp, #4]
 801d93e:	b22d      	sxth	r5, r5
 801d940:	fb07 2505 	mla	r5, r7, r5, r2
 801d944:	5daa      	ldrb	r2, [r5, r6]
 801d946:	9d02      	ldr	r5, [sp, #8]
 801d948:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d94c:	0e2e      	lsrs	r6, r5, #24
 801d94e:	d049      	beq.n	801d9e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d950:	f06f 0201 	mvn.w	r2, #1
 801d954:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d958:	fb02 f20e 	mul.w	r2, r2, lr
 801d95c:	f834 8002 	ldrh.w	r8, [r4, r2]
 801d960:	9203      	str	r2, [sp, #12]
 801d962:	9a05      	ldr	r2, [sp, #20]
 801d964:	ea4f 2728 	mov.w	r7, r8, asr #8
 801d968:	4356      	muls	r6, r2
 801d96a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d96e:	1c72      	adds	r2, r6, #1
 801d970:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d974:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d978:	b2ed      	uxtb	r5, r5
 801d97a:	1212      	asrs	r2, r2, #8
 801d97c:	fa1f f982 	uxth.w	r9, r2
 801d980:	43d2      	mvns	r2, r2
 801d982:	fb16 f609 	smulbb	r6, r6, r9
 801d986:	b2d2      	uxtb	r2, r2
 801d988:	fb15 f509 	smulbb	r5, r5, r9
 801d98c:	fb07 6702 	mla	r7, r7, r2, r6
 801d990:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801d994:	fb1a fa09 	smulbb	sl, sl, r9
 801d998:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d99c:	b2bf      	uxth	r7, r7
 801d99e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d9a2:	fa5f f888 	uxtb.w	r8, r8
 801d9a6:	fb06 a602 	mla	r6, r6, r2, sl
 801d9aa:	fb08 5502 	mla	r5, r8, r2, r5
 801d9ae:	1c7a      	adds	r2, r7, #1
 801d9b0:	b2b6      	uxth	r6, r6
 801d9b2:	b2ad      	uxth	r5, r5
 801d9b4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d9b8:	9a03      	ldr	r2, [sp, #12]
 801d9ba:	f105 0a01 	add.w	sl, r5, #1
 801d9be:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d9c2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d9c6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d9ca:	ea47 070a 	orr.w	r7, r7, sl
 801d9ce:	f106 0a01 	add.w	sl, r6, #1
 801d9d2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d9d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d9da:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d9de:	ea47 070a 	orr.w	r7, r7, sl
 801d9e2:	52a7      	strh	r7, [r4, r2]
 801d9e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d9e6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d9ea:	4410      	add	r0, r2
 801d9ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d9ee:	4411      	add	r1, r2
 801d9f0:	e755      	b.n	801d89e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d9f2:	f04f 0800 	mov.w	r8, #0
 801d9f6:	eba3 0208 	sub.w	r2, r3, r8
 801d9fa:	2a00      	cmp	r2, #0
 801d9fc:	f77f af53 	ble.w	801d8a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801da00:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801da04:	140a      	asrs	r2, r1, #16
 801da06:	9f01      	ldr	r7, [sp, #4]
 801da08:	1405      	asrs	r5, r0, #16
 801da0a:	fb06 7202 	mla	r2, r6, r2, r7
 801da0e:	5d52      	ldrb	r2, [r2, r5]
 801da10:	9d02      	ldr	r5, [sp, #8]
 801da12:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801da16:	0e2e      	lsrs	r6, r5, #24
 801da18:	d044      	beq.n	801daa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801da1a:	9a05      	ldr	r2, [sp, #20]
 801da1c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801da20:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801da24:	4356      	muls	r6, r2
 801da26:	ea4f 272e 	mov.w	r7, lr, asr #8
 801da2a:	1c72      	adds	r2, r6, #1
 801da2c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801da30:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801da34:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801da38:	b2ed      	uxtb	r5, r5
 801da3a:	1212      	asrs	r2, r2, #8
 801da3c:	fa1f f982 	uxth.w	r9, r2
 801da40:	43d2      	mvns	r2, r2
 801da42:	fb16 f609 	smulbb	r6, r6, r9
 801da46:	b2d2      	uxtb	r2, r2
 801da48:	fb15 f509 	smulbb	r5, r5, r9
 801da4c:	fb07 6702 	mla	r7, r7, r2, r6
 801da50:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801da54:	fb1a fa09 	smulbb	sl, sl, r9
 801da58:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801da5c:	b2bf      	uxth	r7, r7
 801da5e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801da62:	fa5f fe8e 	uxtb.w	lr, lr
 801da66:	fb06 a602 	mla	r6, r6, r2, sl
 801da6a:	fb0e 5502 	mla	r5, lr, r2, r5
 801da6e:	1c7a      	adds	r2, r7, #1
 801da70:	b2b6      	uxth	r6, r6
 801da72:	b2ad      	uxth	r5, r5
 801da74:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801da78:	f105 0a01 	add.w	sl, r5, #1
 801da7c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801da80:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801da84:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801da88:	ea47 070a 	orr.w	r7, r7, sl
 801da8c:	f106 0a01 	add.w	sl, r6, #1
 801da90:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801da94:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801da98:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801da9c:	ea47 070a 	orr.w	r7, r7, sl
 801daa0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801daa4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801daa6:	f108 0801 	add.w	r8, r8, #1
 801daaa:	4410      	add	r0, r2
 801daac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801daae:	4411      	add	r1, r2
 801dab0:	e7a1      	b.n	801d9f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801dab2:	b007      	add	sp, #28
 801dab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dab8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dabc:	b085      	sub	sp, #20
 801dabe:	468b      	mov	fp, r1
 801dac0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dac4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dac6:	9203      	str	r2, [sp, #12]
 801dac8:	6841      	ldr	r1, [r0, #4]
 801daca:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801dace:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801dad2:	fb01 2404 	mla	r4, r1, r4, r2
 801dad6:	6802      	ldr	r2, [r0, #0]
 801dad8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dadc:	f8de 2000 	ldr.w	r2, [lr]
 801dae0:	9200      	str	r2, [sp, #0]
 801dae2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801dae6:	3204      	adds	r2, #4
 801dae8:	9201      	str	r2, [sp, #4]
 801daea:	f1bb 0f00 	cmp.w	fp, #0
 801daee:	dc03      	bgt.n	801daf8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801daf0:	9a03      	ldr	r2, [sp, #12]
 801daf2:	2a00      	cmp	r2, #0
 801daf4:	f340 8153 	ble.w	801dd9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801daf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dafa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801dafe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801db02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801db04:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801db08:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	dd0e      	ble.n	801db2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801db10:	1408      	asrs	r0, r1, #16
 801db12:	d405      	bmi.n	801db20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801db14:	42b8      	cmp	r0, r7
 801db16:	da03      	bge.n	801db20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801db18:	1410      	asrs	r0, r2, #16
 801db1a:	d401      	bmi.n	801db20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801db1c:	42b0      	cmp	r0, r6
 801db1e:	db07      	blt.n	801db30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801db20:	9811      	ldr	r0, [sp, #68]	; 0x44
 801db22:	3b01      	subs	r3, #1
 801db24:	3402      	adds	r4, #2
 801db26:	4401      	add	r1, r0
 801db28:	9812      	ldr	r0, [sp, #72]	; 0x48
 801db2a:	4402      	add	r2, r0
 801db2c:	e7ee      	b.n	801db0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801db2e:	d017      	beq.n	801db60 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801db30:	1e58      	subs	r0, r3, #1
 801db32:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801db34:	fb05 1500 	mla	r5, r5, r0, r1
 801db38:	142d      	asrs	r5, r5, #16
 801db3a:	d409      	bmi.n	801db50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801db3c:	42bd      	cmp	r5, r7
 801db3e:	da07      	bge.n	801db50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801db40:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801db42:	fb05 2000 	mla	r0, r5, r0, r2
 801db46:	1400      	asrs	r0, r0, #16
 801db48:	d402      	bmi.n	801db50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801db4a:	42b0      	cmp	r0, r6
 801db4c:	f2c0 80bc 	blt.w	801dcc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801db50:	2600      	movs	r6, #0
 801db52:	1998      	adds	r0, r3, r6
 801db54:	2800      	cmp	r0, #0
 801db56:	dc3e      	bgt.n	801dbd6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801db58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801db5c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801db60:	f1bb 0f00 	cmp.w	fp, #0
 801db64:	f340 811b 	ble.w	801dd9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801db68:	ee30 0a04 	vadd.f32	s0, s0, s8
 801db6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801db72:	f1bb 0b01 	subs.w	fp, fp, #1
 801db76:	eeb0 6a62 	vmov.f32	s12, s5
 801db7a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801db7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801db82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db86:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801db8a:	eeb0 6a43 	vmov.f32	s12, s6
 801db8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db92:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801db96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dba2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dba6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dbaa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dbae:	ee12 2a90 	vmov	r2, s5
 801dbb2:	eef0 2a47 	vmov.f32	s5, s14
 801dbb6:	fb92 f3f3 	sdiv	r3, r2, r3
 801dbba:	ee13 2a10 	vmov	r2, s6
 801dbbe:	9311      	str	r3, [sp, #68]	; 0x44
 801dbc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbc2:	eeb0 3a67 	vmov.f32	s6, s15
 801dbc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801dbca:	9a03      	ldr	r2, [sp, #12]
 801dbcc:	9312      	str	r3, [sp, #72]	; 0x48
 801dbce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbd0:	bf08      	it	eq
 801dbd2:	4613      	moveq	r3, r2
 801dbd4:	e789      	b.n	801daea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801dbd6:	140f      	asrs	r7, r1, #16
 801dbd8:	d45e      	bmi.n	801dc98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dbda:	f8de 5008 	ldr.w	r5, [lr, #8]
 801dbde:	42bd      	cmp	r5, r7
 801dbe0:	dd5a      	ble.n	801dc98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dbe2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801dbe6:	d457      	bmi.n	801dc98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dbe8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801dbec:	4560      	cmp	r0, ip
 801dbee:	dd53      	ble.n	801dc98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dbf0:	9800      	ldr	r0, [sp, #0]
 801dbf2:	b22d      	sxth	r5, r5
 801dbf4:	fb0c 0505 	mla	r5, ip, r5, r0
 801dbf8:	5de8      	ldrb	r0, [r5, r7]
 801dbfa:	9d01      	ldr	r5, [sp, #4]
 801dbfc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801dc00:	0e07      	lsrs	r7, r0, #24
 801dc02:	2fff      	cmp	r7, #255	; 0xff
 801dc04:	d04e      	beq.n	801dca4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801dc06:	b2fd      	uxtb	r5, r7
 801dc08:	2f00      	cmp	r7, #0
 801dc0a:	d045      	beq.n	801dc98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dc0c:	f06f 0701 	mvn.w	r7, #1
 801dc10:	fa1f f985 	uxth.w	r9, r5
 801dc14:	43ed      	mvns	r5, r5
 801dc16:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801dc1a:	4377      	muls	r7, r6
 801dc1c:	fb1a fa09 	smulbb	sl, sl, r9
 801dc20:	b2ed      	uxtb	r5, r5
 801dc22:	f834 8007 	ldrh.w	r8, [r4, r7]
 801dc26:	9702      	str	r7, [sp, #8]
 801dc28:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801dc2c:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801dc30:	fb17 f709 	smulbb	r7, r7, r9
 801dc34:	b2c0      	uxtb	r0, r0
 801dc36:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dc3a:	fb10 f009 	smulbb	r0, r0, r9
 801dc3e:	fb0c 7c05 	mla	ip, ip, r5, r7
 801dc42:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801dc46:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801dc4a:	fa1f fc8c 	uxth.w	ip, ip
 801dc4e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801dc52:	fa5f f888 	uxtb.w	r8, r8
 801dc56:	fb07 a705 	mla	r7, r7, r5, sl
 801dc5a:	fb08 0005 	mla	r0, r8, r5, r0
 801dc5e:	f10c 0501 	add.w	r5, ip, #1
 801dc62:	b2bf      	uxth	r7, r7
 801dc64:	b280      	uxth	r0, r0
 801dc66:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801dc6a:	f100 0a01 	add.w	sl, r0, #1
 801dc6e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801dc72:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801dc76:	9802      	ldr	r0, [sp, #8]
 801dc78:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dc7c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801dc80:	f107 0a01 	add.w	sl, r7, #1
 801dc84:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801dc88:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dc8c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dc90:	ea4c 0c0a 	orr.w	ip, ip, sl
 801dc94:	f824 c000 	strh.w	ip, [r4, r0]
 801dc98:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dc9a:	3e01      	subs	r6, #1
 801dc9c:	4401      	add	r1, r0
 801dc9e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801dca0:	4402      	add	r2, r0
 801dca2:	e756      	b.n	801db52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801dca4:	f06f 0501 	mvn.w	r5, #1
 801dca8:	fb05 f706 	mul.w	r7, r5, r6
 801dcac:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801dcb0:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801dcb4:	0945      	lsrs	r5, r0, #5
 801dcb6:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801dcba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dcbe:	ea4c 0505 	orr.w	r5, ip, r5
 801dcc2:	4305      	orrs	r5, r0
 801dcc4:	53e5      	strh	r5, [r4, r7]
 801dcc6:	e7e7      	b.n	801dc98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dcc8:	f04f 0800 	mov.w	r8, #0
 801dccc:	eba3 0008 	sub.w	r0, r3, r8
 801dcd0:	2800      	cmp	r0, #0
 801dcd2:	f77f af41 	ble.w	801db58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dcd6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801dcda:	1410      	asrs	r0, r2, #16
 801dcdc:	9f00      	ldr	r7, [sp, #0]
 801dcde:	140d      	asrs	r5, r1, #16
 801dce0:	fb06 7000 	mla	r0, r6, r0, r7
 801dce4:	5d40      	ldrb	r0, [r0, r5]
 801dce6:	9d01      	ldr	r5, [sp, #4]
 801dce8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801dcec:	0e06      	lsrs	r6, r0, #24
 801dcee:	2eff      	cmp	r6, #255	; 0xff
 801dcf0:	d048      	beq.n	801dd84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801dcf2:	b2f5      	uxtb	r5, r6
 801dcf4:	2e00      	cmp	r6, #0
 801dcf6:	d03e      	beq.n	801dd76 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801dcf8:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801dcfc:	fa1f f985 	uxth.w	r9, r5
 801dd00:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801dd04:	43ed      	mvns	r5, r5
 801dd06:	ea4f 272c 	mov.w	r7, ip, asr #8
 801dd0a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801dd0e:	fb16 f609 	smulbb	r6, r6, r9
 801dd12:	b2ed      	uxtb	r5, r5
 801dd14:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dd18:	b2c0      	uxtb	r0, r0
 801dd1a:	fb1a fa09 	smulbb	sl, sl, r9
 801dd1e:	fb07 6705 	mla	r7, r7, r5, r6
 801dd22:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801dd26:	fb10 f009 	smulbb	r0, r0, r9
 801dd2a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801dd2e:	b2bf      	uxth	r7, r7
 801dd30:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dd34:	fa5f fc8c 	uxtb.w	ip, ip
 801dd38:	fb06 a605 	mla	r6, r6, r5, sl
 801dd3c:	fb0c 0005 	mla	r0, ip, r5, r0
 801dd40:	1c7d      	adds	r5, r7, #1
 801dd42:	b2b6      	uxth	r6, r6
 801dd44:	b280      	uxth	r0, r0
 801dd46:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801dd4a:	f100 0a01 	add.w	sl, r0, #1
 801dd4e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801dd52:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801dd56:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dd5a:	ea47 070a 	orr.w	r7, r7, sl
 801dd5e:	f106 0a01 	add.w	sl, r6, #1
 801dd62:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801dd66:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dd6a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dd6e:	ea47 070a 	orr.w	r7, r7, sl
 801dd72:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801dd76:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dd78:	f108 0801 	add.w	r8, r8, #1
 801dd7c:	4401      	add	r1, r0
 801dd7e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801dd80:	4402      	add	r2, r0
 801dd82:	e7a3      	b.n	801dccc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801dd84:	4d07      	ldr	r5, [pc, #28]	; (801dda4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801dd86:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801dd8a:	0945      	lsrs	r5, r0, #5
 801dd8c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801dd90:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dd94:	4335      	orrs	r5, r6
 801dd96:	4305      	orrs	r5, r0
 801dd98:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801dd9c:	e7eb      	b.n	801dd76 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801dd9e:	b005      	add	sp, #20
 801dda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dda4:	fffff800 	.word	0xfffff800

0801dda8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddac:	b087      	sub	sp, #28
 801ddae:	468b      	mov	fp, r1
 801ddb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ddb4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ddb6:	9204      	str	r2, [sp, #16]
 801ddb8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ddbc:	6861      	ldr	r1, [r4, #4]
 801ddbe:	9205      	str	r2, [sp, #20]
 801ddc0:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801ddc4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801ddc8:	fb01 2000 	mla	r0, r1, r0, r2
 801ddcc:	6822      	ldr	r2, [r4, #0]
 801ddce:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ddd2:	f8de 2000 	ldr.w	r2, [lr]
 801ddd6:	9201      	str	r2, [sp, #4]
 801ddd8:	f8de 2004 	ldr.w	r2, [lr, #4]
 801dddc:	9202      	str	r2, [sp, #8]
 801ddde:	f1bb 0f00 	cmp.w	fp, #0
 801dde2:	dc03      	bgt.n	801ddec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801dde4:	9a04      	ldr	r2, [sp, #16]
 801dde6:	2a00      	cmp	r2, #0
 801dde8:	f340 8142 	ble.w	801e070 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ddec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ddee:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ddf2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ddf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ddf8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ddfc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801de00:	2b00      	cmp	r3, #0
 801de02:	dd0e      	ble.n	801de22 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801de04:	140c      	asrs	r4, r1, #16
 801de06:	d405      	bmi.n	801de14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801de08:	42bc      	cmp	r4, r7
 801de0a:	da03      	bge.n	801de14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801de0c:	1414      	asrs	r4, r2, #16
 801de0e:	d401      	bmi.n	801de14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801de10:	42b4      	cmp	r4, r6
 801de12:	db07      	blt.n	801de24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de14:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de16:	3b01      	subs	r3, #1
 801de18:	3002      	adds	r0, #2
 801de1a:	4421      	add	r1, r4
 801de1c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801de1e:	4422      	add	r2, r4
 801de20:	e7ee      	b.n	801de00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801de22:	d019      	beq.n	801de58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801de24:	1e5c      	subs	r4, r3, #1
 801de26:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801de28:	fb05 1504 	mla	r5, r5, r4, r1
 801de2c:	142d      	asrs	r5, r5, #16
 801de2e:	d409      	bmi.n	801de44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801de30:	42bd      	cmp	r5, r7
 801de32:	da07      	bge.n	801de44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801de34:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801de36:	fb05 2404 	mla	r4, r5, r4, r2
 801de3a:	1424      	asrs	r4, r4, #16
 801de3c:	d402      	bmi.n	801de44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801de3e:	42b4      	cmp	r4, r6
 801de40:	f2c0 80b1 	blt.w	801dfa6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801de44:	f04f 0800 	mov.w	r8, #0
 801de48:	eb03 0408 	add.w	r4, r3, r8
 801de4c:	2c00      	cmp	r4, #0
 801de4e:	dc3e      	bgt.n	801dece <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801de50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801de54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801de58:	f1bb 0f00 	cmp.w	fp, #0
 801de5c:	f340 8108 	ble.w	801e070 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801de60:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de6a:	f1bb 0b01 	subs.w	fp, fp, #1
 801de6e:	eeb0 6a62 	vmov.f32	s12, s5
 801de72:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801de76:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de7e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801de82:	eeb0 6a43 	vmov.f32	s12, s6
 801de86:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de8a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801de8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de92:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de96:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dea2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dea6:	ee12 2a90 	vmov	r2, s5
 801deaa:	eef0 2a47 	vmov.f32	s5, s14
 801deae:	fb92 f3f3 	sdiv	r3, r2, r3
 801deb2:	ee13 2a10 	vmov	r2, s6
 801deb6:	9313      	str	r3, [sp, #76]	; 0x4c
 801deb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801deba:	eeb0 3a67 	vmov.f32	s6, s15
 801debe:	fb92 f3f3 	sdiv	r3, r2, r3
 801dec2:	9a04      	ldr	r2, [sp, #16]
 801dec4:	9314      	str	r3, [sp, #80]	; 0x50
 801dec6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dec8:	bf08      	it	eq
 801deca:	4613      	moveq	r3, r2
 801decc:	e787      	b.n	801ddde <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801dece:	140e      	asrs	r6, r1, #16
 801ded0:	d462      	bmi.n	801df98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ded2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ded6:	42b5      	cmp	r5, r6
 801ded8:	dd5e      	ble.n	801df98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801deda:	1417      	asrs	r7, r2, #16
 801dedc:	d45c      	bmi.n	801df98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dede:	f8de 400c 	ldr.w	r4, [lr, #12]
 801dee2:	42bc      	cmp	r4, r7
 801dee4:	dd58      	ble.n	801df98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dee6:	b22d      	sxth	r5, r5
 801dee8:	9c02      	ldr	r4, [sp, #8]
 801deea:	fb07 6505 	mla	r5, r7, r5, r6
 801deee:	5d66      	ldrb	r6, [r4, r5]
 801def0:	2e00      	cmp	r6, #0
 801def2:	d051      	beq.n	801df98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801def4:	9c01      	ldr	r4, [sp, #4]
 801def6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801defa:	f06f 0401 	mvn.w	r4, #1
 801defe:	fb04 f408 	mul.w	r4, r4, r8
 801df02:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801df06:	5b05      	ldrh	r5, [r0, r4]
 801df08:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801df0c:	9403      	str	r4, [sp, #12]
 801df0e:	9c05      	ldr	r4, [sp, #20]
 801df10:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801df14:	4366      	muls	r6, r4
 801df16:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801df1a:	1c74      	adds	r4, r6, #1
 801df1c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801df20:	122e      	asrs	r6, r5, #8
 801df22:	1224      	asrs	r4, r4, #8
 801df24:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801df28:	00ed      	lsls	r5, r5, #3
 801df2a:	b2a7      	uxth	r7, r4
 801df2c:	43e4      	mvns	r4, r4
 801df2e:	b2ed      	uxtb	r5, r5
 801df30:	b2e4      	uxtb	r4, r4
 801df32:	fb16 f604 	smulbb	r6, r6, r4
 801df36:	fb15 f504 	smulbb	r5, r5, r4
 801df3a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801df3e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801df42:	fb1a fa04 	smulbb	sl, sl, r4
 801df46:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801df4a:	fa1f fc8c 	uxth.w	ip, ip
 801df4e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801df52:	fa5f f989 	uxtb.w	r9, r9
 801df56:	fb06 a607 	mla	r6, r6, r7, sl
 801df5a:	f10c 0401 	add.w	r4, ip, #1
 801df5e:	fb09 5507 	mla	r5, r9, r7, r5
 801df62:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801df66:	9c03      	ldr	r4, [sp, #12]
 801df68:	b2ad      	uxth	r5, r5
 801df6a:	b2b6      	uxth	r6, r6
 801df6c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801df70:	f105 0a01 	add.w	sl, r5, #1
 801df74:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801df78:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801df7c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801df80:	f106 0a01 	add.w	sl, r6, #1
 801df84:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801df88:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801df8c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801df90:	ea4c 0c0a 	orr.w	ip, ip, sl
 801df94:	f820 c004 	strh.w	ip, [r0, r4]
 801df98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801df9a:	f108 38ff 	add.w	r8, r8, #4294967295
 801df9e:	4421      	add	r1, r4
 801dfa0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dfa2:	4422      	add	r2, r4
 801dfa4:	e750      	b.n	801de48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dfa6:	f04f 0900 	mov.w	r9, #0
 801dfaa:	eba3 0409 	sub.w	r4, r3, r9
 801dfae:	2c00      	cmp	r4, #0
 801dfb0:	f77f af4e 	ble.w	801de50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801dfb4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801dfb8:	140d      	asrs	r5, r1, #16
 801dfba:	1414      	asrs	r4, r2, #16
 801dfbc:	fb06 5404 	mla	r4, r6, r4, r5
 801dfc0:	9d02      	ldr	r5, [sp, #8]
 801dfc2:	5d2e      	ldrb	r6, [r5, r4]
 801dfc4:	2e00      	cmp	r6, #0
 801dfc6:	d04c      	beq.n	801e062 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801dfc8:	9d01      	ldr	r5, [sp, #4]
 801dfca:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801dfce:	9c05      	ldr	r4, [sp, #20]
 801dfd0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801dfd4:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801dfd8:	4366      	muls	r6, r4
 801dfda:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801dfde:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dfe2:	1c74      	adds	r4, r6, #1
 801dfe4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801dfe8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801dfec:	122e      	asrs	r6, r5, #8
 801dfee:	1224      	asrs	r4, r4, #8
 801dff0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801dff4:	00ed      	lsls	r5, r5, #3
 801dff6:	b2a7      	uxth	r7, r4
 801dff8:	43e4      	mvns	r4, r4
 801dffa:	b2ed      	uxtb	r5, r5
 801dffc:	b2e4      	uxtb	r4, r4
 801dffe:	fb16 f604 	smulbb	r6, r6, r4
 801e002:	fb15 f504 	smulbb	r5, r5, r4
 801e006:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e00a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e00e:	fb1a fa04 	smulbb	sl, sl, r4
 801e012:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e016:	fa1f fc8c 	uxth.w	ip, ip
 801e01a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e01e:	fa5f f888 	uxtb.w	r8, r8
 801e022:	fb06 a607 	mla	r6, r6, r7, sl
 801e026:	f10c 0401 	add.w	r4, ip, #1
 801e02a:	fb08 5507 	mla	r5, r8, r7, r5
 801e02e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e032:	b2ad      	uxth	r5, r5
 801e034:	b2b6      	uxth	r6, r6
 801e036:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e03a:	f105 0a01 	add.w	sl, r5, #1
 801e03e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e042:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e046:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e04a:	f106 0a01 	add.w	sl, r6, #1
 801e04e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e052:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e056:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e05a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e05e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e062:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e064:	f109 0901 	add.w	r9, r9, #1
 801e068:	4421      	add	r1, r4
 801e06a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e06c:	4422      	add	r2, r4
 801e06e:	e79c      	b.n	801dfaa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801e070:	b007      	add	sp, #28
 801e072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e076 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e076:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e07a:	b085      	sub	sp, #20
 801e07c:	468b      	mov	fp, r1
 801e07e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e082:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e084:	9203      	str	r2, [sp, #12]
 801e086:	6861      	ldr	r1, [r4, #4]
 801e088:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801e08c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801e090:	fb01 2000 	mla	r0, r1, r0, r2
 801e094:	6822      	ldr	r2, [r4, #0]
 801e096:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e09a:	f8d8 2000 	ldr.w	r2, [r8]
 801e09e:	9200      	str	r2, [sp, #0]
 801e0a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e0a4:	9201      	str	r2, [sp, #4]
 801e0a6:	f1bb 0f00 	cmp.w	fp, #0
 801e0aa:	dc03      	bgt.n	801e0b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e0ac:	9a03      	ldr	r2, [sp, #12]
 801e0ae:	2a00      	cmp	r2, #0
 801e0b0:	f340 8146 	ble.w	801e340 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e0b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e0b6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e0ba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e0be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e0c0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e0c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	dd0e      	ble.n	801e0ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e0cc:	140c      	asrs	r4, r1, #16
 801e0ce:	d405      	bmi.n	801e0dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e0d0:	42bc      	cmp	r4, r7
 801e0d2:	da03      	bge.n	801e0dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e0d4:	1414      	asrs	r4, r2, #16
 801e0d6:	d401      	bmi.n	801e0dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e0d8:	42b4      	cmp	r4, r6
 801e0da:	db07      	blt.n	801e0ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e0dc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e0de:	3b01      	subs	r3, #1
 801e0e0:	3002      	adds	r0, #2
 801e0e2:	4421      	add	r1, r4
 801e0e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e0e6:	4422      	add	r2, r4
 801e0e8:	e7ee      	b.n	801e0c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e0ea:	d017      	beq.n	801e11c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e0ec:	1e5c      	subs	r4, r3, #1
 801e0ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e0f0:	fb05 1504 	mla	r5, r5, r4, r1
 801e0f4:	142d      	asrs	r5, r5, #16
 801e0f6:	d409      	bmi.n	801e10c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e0f8:	42bd      	cmp	r5, r7
 801e0fa:	da07      	bge.n	801e10c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e0fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e0fe:	fb05 2404 	mla	r4, r5, r4, r2
 801e102:	1424      	asrs	r4, r4, #16
 801e104:	d402      	bmi.n	801e10c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e106:	42b4      	cmp	r4, r6
 801e108:	f2c0 80b3 	blt.w	801e272 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e10c:	2600      	movs	r6, #0
 801e10e:	199c      	adds	r4, r3, r6
 801e110:	2c00      	cmp	r4, #0
 801e112:	dc3e      	bgt.n	801e192 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e114:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e118:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e11c:	f1bb 0f00 	cmp.w	fp, #0
 801e120:	f340 810e 	ble.w	801e340 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e124:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e12a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e12e:	f1bb 0b01 	subs.w	fp, fp, #1
 801e132:	eeb0 6a62 	vmov.f32	s12, s5
 801e136:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e13a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e13e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e142:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e146:	eeb0 6a43 	vmov.f32	s12, s6
 801e14a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e14e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e152:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e156:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e15a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e15e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e162:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e166:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e16a:	ee12 2a90 	vmov	r2, s5
 801e16e:	eef0 2a47 	vmov.f32	s5, s14
 801e172:	fb92 f3f3 	sdiv	r3, r2, r3
 801e176:	ee13 2a10 	vmov	r2, s6
 801e17a:	9311      	str	r3, [sp, #68]	; 0x44
 801e17c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e17e:	eeb0 3a67 	vmov.f32	s6, s15
 801e182:	fb92 f3f3 	sdiv	r3, r2, r3
 801e186:	9a03      	ldr	r2, [sp, #12]
 801e188:	9312      	str	r3, [sp, #72]	; 0x48
 801e18a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e18c:	bf08      	it	eq
 801e18e:	4613      	moveq	r3, r2
 801e190:	e789      	b.n	801e0a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e192:	140f      	asrs	r7, r1, #16
 801e194:	d45f      	bmi.n	801e256 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e196:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e19a:	42bd      	cmp	r5, r7
 801e19c:	dd5b      	ble.n	801e256 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e19e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e1a2:	d458      	bmi.n	801e256 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e1a4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801e1a8:	4564      	cmp	r4, ip
 801e1aa:	dd54      	ble.n	801e256 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e1ac:	b22d      	sxth	r5, r5
 801e1ae:	9c01      	ldr	r4, [sp, #4]
 801e1b0:	fb0c 7505 	mla	r5, ip, r5, r7
 801e1b4:	5d64      	ldrb	r4, [r4, r5]
 801e1b6:	2cff      	cmp	r4, #255	; 0xff
 801e1b8:	d053      	beq.n	801e262 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801e1ba:	2c00      	cmp	r4, #0
 801e1bc:	d04b      	beq.n	801e256 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e1be:	9f00      	ldr	r7, [sp, #0]
 801e1c0:	fa1f fc84 	uxth.w	ip, r4
 801e1c4:	43e4      	mvns	r4, r4
 801e1c6:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801e1ca:	f06f 0501 	mvn.w	r5, #1
 801e1ce:	b2e4      	uxtb	r4, r4
 801e1d0:	4375      	muls	r5, r6
 801e1d2:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801e1d6:	9502      	str	r5, [sp, #8]
 801e1d8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e1dc:	5b45      	ldrh	r5, [r0, r5]
 801e1de:	122f      	asrs	r7, r5, #8
 801e1e0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e1e4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e1e8:	00ed      	lsls	r5, r5, #3
 801e1ea:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e1ee:	fb17 f704 	smulbb	r7, r7, r4
 801e1f2:	b2ed      	uxtb	r5, r5
 801e1f4:	fb1a fa04 	smulbb	sl, sl, r4
 801e1f8:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801e1fc:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801e200:	fb15 f504 	smulbb	r5, r5, r4
 801e204:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e208:	fa1f fe8e 	uxth.w	lr, lr
 801e20c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e210:	fa5f f989 	uxtb.w	r9, r9
 801e214:	fb07 a70c 	mla	r7, r7, ip, sl
 801e218:	f10e 0401 	add.w	r4, lr, #1
 801e21c:	fb09 550c 	mla	r5, r9, ip, r5
 801e220:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801e224:	9c02      	ldr	r4, [sp, #8]
 801e226:	b2ad      	uxth	r5, r5
 801e228:	b2bf      	uxth	r7, r7
 801e22a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801e22e:	f105 0a01 	add.w	sl, r5, #1
 801e232:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e236:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e23a:	ea4e 0e0a 	orr.w	lr, lr, sl
 801e23e:	f107 0a01 	add.w	sl, r7, #1
 801e242:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e246:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e24a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e24e:	ea4e 0e0a 	orr.w	lr, lr, sl
 801e252:	f820 e004 	strh.w	lr, [r0, r4]
 801e256:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e258:	3e01      	subs	r6, #1
 801e25a:	4421      	add	r1, r4
 801e25c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e25e:	4422      	add	r2, r4
 801e260:	e755      	b.n	801e10e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e262:	9c00      	ldr	r4, [sp, #0]
 801e264:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801e268:	f06f 0401 	mvn.w	r4, #1
 801e26c:	4374      	muls	r4, r6
 801e26e:	5305      	strh	r5, [r0, r4]
 801e270:	e7f1      	b.n	801e256 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e272:	f04f 0900 	mov.w	r9, #0
 801e276:	eba3 0409 	sub.w	r4, r3, r9
 801e27a:	2c00      	cmp	r4, #0
 801e27c:	f77f af4a 	ble.w	801e114 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e280:	1414      	asrs	r4, r2, #16
 801e282:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801e286:	140d      	asrs	r5, r1, #16
 801e288:	fb06 5504 	mla	r5, r6, r4, r5
 801e28c:	9c01      	ldr	r4, [sp, #4]
 801e28e:	5d64      	ldrb	r4, [r4, r5]
 801e290:	2cff      	cmp	r4, #255	; 0xff
 801e292:	d04f      	beq.n	801e334 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801e294:	2c00      	cmp	r4, #0
 801e296:	d046      	beq.n	801e326 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e298:	9e00      	ldr	r6, [sp, #0]
 801e29a:	b2a7      	uxth	r7, r4
 801e29c:	43e4      	mvns	r4, r4
 801e29e:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801e2a2:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e2a6:	b2e4      	uxtb	r4, r4
 801e2a8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e2ac:	122e      	asrs	r6, r5, #8
 801e2ae:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e2b2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e2b6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e2ba:	00ed      	lsls	r5, r5, #3
 801e2bc:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e2c0:	fb16 f604 	smulbb	r6, r6, r4
 801e2c4:	b2ed      	uxtb	r5, r5
 801e2c6:	fb1a fa04 	smulbb	sl, sl, r4
 801e2ca:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e2ce:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e2d2:	fb15 f504 	smulbb	r5, r5, r4
 801e2d6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e2da:	fa1f fc8c 	uxth.w	ip, ip
 801e2de:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e2e2:	fa5f fe8e 	uxtb.w	lr, lr
 801e2e6:	fb06 a607 	mla	r6, r6, r7, sl
 801e2ea:	f10c 0401 	add.w	r4, ip, #1
 801e2ee:	fb0e 5507 	mla	r5, lr, r7, r5
 801e2f2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e2f6:	b2ad      	uxth	r5, r5
 801e2f8:	b2b6      	uxth	r6, r6
 801e2fa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e2fe:	f105 0a01 	add.w	sl, r5, #1
 801e302:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e306:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e30a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e30e:	f106 0a01 	add.w	sl, r6, #1
 801e312:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e316:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e31a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e31e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e322:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e326:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e328:	f109 0901 	add.w	r9, r9, #1
 801e32c:	4421      	add	r1, r4
 801e32e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e330:	4422      	add	r2, r4
 801e332:	e7a0      	b.n	801e276 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e334:	9c00      	ldr	r4, [sp, #0]
 801e336:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801e33a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801e33e:	e7f2      	b.n	801e326 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e340:	b005      	add	sp, #20
 801e342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e346 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e34a:	b085      	sub	sp, #20
 801e34c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e34e:	9203      	str	r2, [sp, #12]
 801e350:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801e354:	9100      	str	r1, [sp, #0]
 801e356:	9201      	str	r2, [sp, #4]
 801e358:	6841      	ldr	r1, [r0, #4]
 801e35a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801e35e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e362:	fb01 2404 	mla	r4, r1, r4, r2
 801e366:	6802      	ldr	r2, [r0, #0]
 801e368:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e36c:	f8de 2000 	ldr.w	r2, [lr]
 801e370:	9202      	str	r2, [sp, #8]
 801e372:	9a01      	ldr	r2, [sp, #4]
 801e374:	43d6      	mvns	r6, r2
 801e376:	b2f6      	uxtb	r6, r6
 801e378:	9a00      	ldr	r2, [sp, #0]
 801e37a:	2a00      	cmp	r2, #0
 801e37c:	dc03      	bgt.n	801e386 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e37e:	9a03      	ldr	r2, [sp, #12]
 801e380:	2a00      	cmp	r2, #0
 801e382:	f340 8124 	ble.w	801e5ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e388:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e38c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e390:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e392:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e396:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e39a:	2b00      	cmp	r3, #0
 801e39c:	dd0e      	ble.n	801e3bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e39e:	1408      	asrs	r0, r1, #16
 801e3a0:	d405      	bmi.n	801e3ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e3a2:	4560      	cmp	r0, ip
 801e3a4:	da03      	bge.n	801e3ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e3a6:	1410      	asrs	r0, r2, #16
 801e3a8:	d401      	bmi.n	801e3ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e3aa:	42b8      	cmp	r0, r7
 801e3ac:	db07      	blt.n	801e3be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e3ae:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e3b0:	3b01      	subs	r3, #1
 801e3b2:	3402      	adds	r4, #2
 801e3b4:	4401      	add	r1, r0
 801e3b6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e3b8:	4402      	add	r2, r0
 801e3ba:	e7ee      	b.n	801e39a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e3bc:	d06e      	beq.n	801e49c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e3be:	1e58      	subs	r0, r3, #1
 801e3c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e3c2:	fb05 1500 	mla	r5, r5, r0, r1
 801e3c6:	142d      	asrs	r5, r5, #16
 801e3c8:	d45c      	bmi.n	801e484 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e3ca:	4565      	cmp	r5, ip
 801e3cc:	da5a      	bge.n	801e484 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e3ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e3d0:	fb05 2000 	mla	r0, r5, r0, r2
 801e3d4:	1400      	asrs	r0, r0, #16
 801e3d6:	d455      	bmi.n	801e484 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e3d8:	42b8      	cmp	r0, r7
 801e3da:	da53      	bge.n	801e484 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e3dc:	4699      	mov	r9, r3
 801e3de:	46a2      	mov	sl, r4
 801e3e0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801e3e4:	f1b9 0f00 	cmp.w	r9, #0
 801e3e8:	dd54      	ble.n	801e494 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e3ea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e3ee:	140d      	asrs	r5, r1, #16
 801e3f0:	1410      	asrs	r0, r2, #16
 801e3f2:	f109 39ff 	add.w	r9, r9, #4294967295
 801e3f6:	fb07 5000 	mla	r0, r7, r0, r5
 801e3fa:	9d02      	ldr	r5, [sp, #8]
 801e3fc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e400:	f8ba 5000 	ldrh.w	r5, [sl]
 801e404:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e408:	122f      	asrs	r7, r5, #8
 801e40a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e40e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e412:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e416:	00ed      	lsls	r5, r5, #3
 801e418:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e41c:	fb17 f706 	smulbb	r7, r7, r6
 801e420:	b2ed      	uxtb	r5, r5
 801e422:	fb18 f806 	smulbb	r8, r8, r6
 801e426:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e42a:	10c7      	asrs	r7, r0, #3
 801e42c:	fb15 f506 	smulbb	r5, r5, r6
 801e430:	00c0      	lsls	r0, r0, #3
 801e432:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e436:	fa1f fc8c 	uxth.w	ip, ip
 801e43a:	b2c0      	uxtb	r0, r0
 801e43c:	fb07 870b 	mla	r7, r7, fp, r8
 801e440:	fb00 500b 	mla	r0, r0, fp, r5
 801e444:	f10c 0501 	add.w	r5, ip, #1
 801e448:	b2bf      	uxth	r7, r7
 801e44a:	b280      	uxth	r0, r0
 801e44c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e450:	f107 0801 	add.w	r8, r7, #1
 801e454:	1c45      	adds	r5, r0, #1
 801e456:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e45a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e45e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e462:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e464:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e468:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e46c:	4401      	add	r1, r0
 801e46e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e472:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e474:	ea4c 0c05 	orr.w	ip, ip, r5
 801e478:	4402      	add	r2, r0
 801e47a:	ea4c 0c08 	orr.w	ip, ip, r8
 801e47e:	f82a cb02 	strh.w	ip, [sl], #2
 801e482:	e7af      	b.n	801e3e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e484:	f04f 0800 	mov.w	r8, #0
 801e488:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801e48c:	eb03 0008 	add.w	r0, r3, r8
 801e490:	2800      	cmp	r0, #0
 801e492:	dc41      	bgt.n	801e518 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e494:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e498:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e49c:	9b00      	ldr	r3, [sp, #0]
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	f340 8095 	ble.w	801e5ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e4a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e4ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e4b2:	eef0 6a62 	vmov.f32	s13, s5
 801e4b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e4ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e4be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4c2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801e4c6:	eef0 6a43 	vmov.f32	s13, s6
 801e4ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4ce:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801e4d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e4d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e4da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e4de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e4e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e4e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e4ea:	ee12 2a90 	vmov	r2, s5
 801e4ee:	eef0 2a47 	vmov.f32	s5, s14
 801e4f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4f6:	ee13 2a10 	vmov	r2, s6
 801e4fa:	9311      	str	r3, [sp, #68]	; 0x44
 801e4fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4fe:	eeb0 3a67 	vmov.f32	s6, s15
 801e502:	fb92 f3f3 	sdiv	r3, r2, r3
 801e506:	9312      	str	r3, [sp, #72]	; 0x48
 801e508:	9b00      	ldr	r3, [sp, #0]
 801e50a:	9a03      	ldr	r2, [sp, #12]
 801e50c:	3b01      	subs	r3, #1
 801e50e:	9300      	str	r3, [sp, #0]
 801e510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e512:	bf08      	it	eq
 801e514:	4613      	moveq	r3, r2
 801e516:	e72f      	b.n	801e378 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e518:	140f      	asrs	r7, r1, #16
 801e51a:	d451      	bmi.n	801e5c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e51c:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e520:	42bd      	cmp	r5, r7
 801e522:	dd4d      	ble.n	801e5c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e524:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e528:	d44a      	bmi.n	801e5c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e52a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e52e:	4560      	cmp	r0, ip
 801e530:	dd46      	ble.n	801e5c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e532:	b22d      	sxth	r5, r5
 801e534:	9802      	ldr	r0, [sp, #8]
 801e536:	fb0c 7505 	mla	r5, ip, r5, r7
 801e53a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801e53e:	f06f 0501 	mvn.w	r5, #1
 801e542:	fb05 fb08 	mul.w	fp, r5, r8
 801e546:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e54a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e54e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e552:	122f      	asrs	r7, r5, #8
 801e554:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e558:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e55c:	00ed      	lsls	r5, r5, #3
 801e55e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e562:	fb17 f706 	smulbb	r7, r7, r6
 801e566:	b2ed      	uxtb	r5, r5
 801e568:	fb19 f906 	smulbb	r9, r9, r6
 801e56c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e570:	10c7      	asrs	r7, r0, #3
 801e572:	fb15 f506 	smulbb	r5, r5, r6
 801e576:	00c0      	lsls	r0, r0, #3
 801e578:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e57c:	fa1f fc8c 	uxth.w	ip, ip
 801e580:	b2c0      	uxtb	r0, r0
 801e582:	fb07 970a 	mla	r7, r7, sl, r9
 801e586:	fb00 500a 	mla	r0, r0, sl, r5
 801e58a:	f10c 0501 	add.w	r5, ip, #1
 801e58e:	b2bf      	uxth	r7, r7
 801e590:	b280      	uxth	r0, r0
 801e592:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e596:	f107 0901 	add.w	r9, r7, #1
 801e59a:	1c45      	adds	r5, r0, #1
 801e59c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e5a0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e5a4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e5a8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e5ac:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e5b0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e5b4:	ea4c 0c05 	orr.w	ip, ip, r5
 801e5b8:	ea4c 0c09 	orr.w	ip, ip, r9
 801e5bc:	f824 c00b 	strh.w	ip, [r4, fp]
 801e5c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e5c2:	f108 38ff 	add.w	r8, r8, #4294967295
 801e5c6:	4401      	add	r1, r0
 801e5c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e5ca:	4402      	add	r2, r0
 801e5cc:	e75e      	b.n	801e48c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e5ce:	b005      	add	sp, #20
 801e5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e5d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5d8:	b085      	sub	sp, #20
 801e5da:	4693      	mov	fp, r2
 801e5dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e5e0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e5e2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e5e4:	6870      	ldr	r0, [r6, #4]
 801e5e6:	9101      	str	r1, [sp, #4]
 801e5e8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e5ec:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e5f0:	fb00 2404 	mla	r4, r0, r4, r2
 801e5f4:	6832      	ldr	r2, [r6, #0]
 801e5f6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e5fa:	682a      	ldr	r2, [r5, #0]
 801e5fc:	9202      	str	r2, [sp, #8]
 801e5fe:	9a01      	ldr	r2, [sp, #4]
 801e600:	2a00      	cmp	r2, #0
 801e602:	dc03      	bgt.n	801e60c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e604:	f1bb 0f00 	cmp.w	fp, #0
 801e608:	f340 809a 	ble.w	801e740 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e60c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e60e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e612:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e616:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e618:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e61c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e620:	2b00      	cmp	r3, #0
 801e622:	dd0c      	ble.n	801e63e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e624:	1406      	asrs	r6, r0, #16
 801e626:	d405      	bmi.n	801e634 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e628:	454e      	cmp	r6, r9
 801e62a:	da03      	bge.n	801e634 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e62c:	1416      	asrs	r6, r2, #16
 801e62e:	d401      	bmi.n	801e634 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e630:	4546      	cmp	r6, r8
 801e632:	db05      	blt.n	801e640 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e634:	4470      	add	r0, lr
 801e636:	4462      	add	r2, ip
 801e638:	3b01      	subs	r3, #1
 801e63a:	3402      	adds	r4, #2
 801e63c:	e7f0      	b.n	801e620 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e63e:	d00f      	beq.n	801e660 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e640:	1e5e      	subs	r6, r3, #1
 801e642:	fb0e 0706 	mla	r7, lr, r6, r0
 801e646:	143f      	asrs	r7, r7, #16
 801e648:	d541      	bpl.n	801e6ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e64a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e64e:	4698      	mov	r8, r3
 801e650:	9603      	str	r6, [sp, #12]
 801e652:	f1b8 0f00 	cmp.w	r8, #0
 801e656:	dc56      	bgt.n	801e706 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801e658:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e65c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e660:	9b01      	ldr	r3, [sp, #4]
 801e662:	2b00      	cmp	r3, #0
 801e664:	dd6c      	ble.n	801e740 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e666:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e66a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e66c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e670:	eeb0 6a62 	vmov.f32	s12, s5
 801e674:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e678:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e67c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e680:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e684:	eeb0 6a43 	vmov.f32	s12, s6
 801e688:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e68c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e690:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e694:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e698:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e69c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e6a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e6a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e6a8:	ee12 2a90 	vmov	r2, s5
 801e6ac:	eef0 2a47 	vmov.f32	s5, s14
 801e6b0:	fb92 fef3 	sdiv	lr, r2, r3
 801e6b4:	ee13 2a10 	vmov	r2, s6
 801e6b8:	eeb0 3a67 	vmov.f32	s6, s15
 801e6bc:	fb92 fcf3 	sdiv	ip, r2, r3
 801e6c0:	9b01      	ldr	r3, [sp, #4]
 801e6c2:	3b01      	subs	r3, #1
 801e6c4:	9301      	str	r3, [sp, #4]
 801e6c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6c8:	bf08      	it	eq
 801e6ca:	465b      	moveq	r3, fp
 801e6cc:	e797      	b.n	801e5fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e6ce:	454f      	cmp	r7, r9
 801e6d0:	dabb      	bge.n	801e64a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e6d2:	fb0c 2606 	mla	r6, ip, r6, r2
 801e6d6:	1436      	asrs	r6, r6, #16
 801e6d8:	d4b7      	bmi.n	801e64a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e6da:	4546      	cmp	r6, r8
 801e6dc:	dab5      	bge.n	801e64a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e6de:	461e      	mov	r6, r3
 801e6e0:	46a0      	mov	r8, r4
 801e6e2:	2e00      	cmp	r6, #0
 801e6e4:	ddb8      	ble.n	801e658 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e6e6:	1417      	asrs	r7, r2, #16
 801e6e8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e6ec:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e6f0:	9902      	ldr	r1, [sp, #8]
 801e6f2:	4470      	add	r0, lr
 801e6f4:	4462      	add	r2, ip
 801e6f6:	fb0a 9707 	mla	r7, sl, r7, r9
 801e6fa:	3e01      	subs	r6, #1
 801e6fc:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e700:	f828 7b02 	strh.w	r7, [r8], #2
 801e704:	e7ed      	b.n	801e6e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801e706:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e70a:	d414      	bmi.n	801e736 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e70c:	68ae      	ldr	r6, [r5, #8]
 801e70e:	454e      	cmp	r6, r9
 801e710:	dd11      	ble.n	801e736 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e712:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e716:	d40e      	bmi.n	801e736 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e718:	68ef      	ldr	r7, [r5, #12]
 801e71a:	4557      	cmp	r7, sl
 801e71c:	dd0b      	ble.n	801e736 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e71e:	b236      	sxth	r6, r6
 801e720:	f06f 0101 	mvn.w	r1, #1
 801e724:	9f02      	ldr	r7, [sp, #8]
 801e726:	fb0a 9606 	mla	r6, sl, r6, r9
 801e72a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e72e:	fb01 f608 	mul.w	r6, r1, r8
 801e732:	9903      	ldr	r1, [sp, #12]
 801e734:	538f      	strh	r7, [r1, r6]
 801e736:	4470      	add	r0, lr
 801e738:	4462      	add	r2, ip
 801e73a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e73e:	e788      	b.n	801e652 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e740:	b005      	add	sp, #20
 801e742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e746 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e746:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e74a:	b085      	sub	sp, #20
 801e74c:	468b      	mov	fp, r1
 801e74e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e752:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e754:	9202      	str	r2, [sp, #8]
 801e756:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801e75a:	6841      	ldr	r1, [r0, #4]
 801e75c:	9203      	str	r2, [sp, #12]
 801e75e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801e762:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e766:	fb01 2404 	mla	r4, r1, r4, r2
 801e76a:	6802      	ldr	r2, [r0, #0]
 801e76c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e770:	f8d8 2000 	ldr.w	r2, [r8]
 801e774:	9200      	str	r2, [sp, #0]
 801e776:	f1bb 0f00 	cmp.w	fp, #0
 801e77a:	dc03      	bgt.n	801e784 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e77c:	9a02      	ldr	r2, [sp, #8]
 801e77e:	2a00      	cmp	r2, #0
 801e780:	f340 8134 	ble.w	801e9ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e786:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e78a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e78e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e790:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e794:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e798:	2b00      	cmp	r3, #0
 801e79a:	dd0e      	ble.n	801e7ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e79c:	1402      	asrs	r2, r0, #16
 801e79e:	d405      	bmi.n	801e7ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e7a0:	42ba      	cmp	r2, r7
 801e7a2:	da03      	bge.n	801e7ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e7a4:	140a      	asrs	r2, r1, #16
 801e7a6:	d401      	bmi.n	801e7ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e7a8:	42b2      	cmp	r2, r6
 801e7aa:	db07      	blt.n	801e7bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e7ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e7ae:	3b01      	subs	r3, #1
 801e7b0:	3402      	adds	r4, #2
 801e7b2:	4410      	add	r0, r2
 801e7b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e7b6:	4411      	add	r1, r2
 801e7b8:	e7ee      	b.n	801e798 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e7ba:	d019      	beq.n	801e7f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e7bc:	1e5a      	subs	r2, r3, #1
 801e7be:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e7c0:	fb05 0502 	mla	r5, r5, r2, r0
 801e7c4:	142d      	asrs	r5, r5, #16
 801e7c6:	d409      	bmi.n	801e7dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e7c8:	42bd      	cmp	r5, r7
 801e7ca:	da07      	bge.n	801e7dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e7cc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e7ce:	fb05 1202 	mla	r2, r5, r2, r1
 801e7d2:	1412      	asrs	r2, r2, #16
 801e7d4:	d402      	bmi.n	801e7dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e7d6:	42b2      	cmp	r2, r6
 801e7d8:	f2c0 80aa 	blt.w	801e930 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e7dc:	f04f 0c00 	mov.w	ip, #0
 801e7e0:	eb03 020c 	add.w	r2, r3, ip
 801e7e4:	2a00      	cmp	r2, #0
 801e7e6:	dc3e      	bgt.n	801e866 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801e7e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e7ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e7f0:	f1bb 0f00 	cmp.w	fp, #0
 801e7f4:	f340 80fa 	ble.w	801e9ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e7f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e7fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e7fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e802:	f1bb 0b01 	subs.w	fp, fp, #1
 801e806:	eeb0 6a62 	vmov.f32	s12, s5
 801e80a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e80e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e812:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e816:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e81a:	eeb0 6a43 	vmov.f32	s12, s6
 801e81e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e822:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e826:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e82a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e82e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e832:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e836:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e83a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e83e:	ee12 2a90 	vmov	r2, s5
 801e842:	eef0 2a47 	vmov.f32	s5, s14
 801e846:	fb92 f3f3 	sdiv	r3, r2, r3
 801e84a:	ee13 2a10 	vmov	r2, s6
 801e84e:	9311      	str	r3, [sp, #68]	; 0x44
 801e850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e852:	eeb0 3a67 	vmov.f32	s6, s15
 801e856:	fb92 f3f3 	sdiv	r3, r2, r3
 801e85a:	9a02      	ldr	r2, [sp, #8]
 801e85c:	9312      	str	r3, [sp, #72]	; 0x48
 801e85e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e860:	bf08      	it	eq
 801e862:	4613      	moveq	r3, r2
 801e864:	e787      	b.n	801e776 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e866:	1406      	asrs	r6, r0, #16
 801e868:	d45b      	bmi.n	801e922 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e86a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e86e:	42b5      	cmp	r5, r6
 801e870:	dd57      	ble.n	801e922 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e872:	140f      	asrs	r7, r1, #16
 801e874:	d455      	bmi.n	801e922 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e876:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801e87a:	42ba      	cmp	r2, r7
 801e87c:	dd51      	ble.n	801e922 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e87e:	b22d      	sxth	r5, r5
 801e880:	9a00      	ldr	r2, [sp, #0]
 801e882:	fb07 6505 	mla	r5, r7, r5, r6
 801e886:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801e88a:	0e2e      	lsrs	r6, r5, #24
 801e88c:	d049      	beq.n	801e922 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e88e:	f06f 0201 	mvn.w	r2, #1
 801e892:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e896:	fb02 f20c 	mul.w	r2, r2, ip
 801e89a:	f834 e002 	ldrh.w	lr, [r4, r2]
 801e89e:	9201      	str	r2, [sp, #4]
 801e8a0:	9a03      	ldr	r2, [sp, #12]
 801e8a2:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e8a6:	4356      	muls	r6, r2
 801e8a8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e8ac:	1c72      	adds	r2, r6, #1
 801e8ae:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801e8b2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e8b6:	b2ed      	uxtb	r5, r5
 801e8b8:	1212      	asrs	r2, r2, #8
 801e8ba:	fa1f f982 	uxth.w	r9, r2
 801e8be:	43d2      	mvns	r2, r2
 801e8c0:	fb16 f609 	smulbb	r6, r6, r9
 801e8c4:	b2d2      	uxtb	r2, r2
 801e8c6:	fb15 f509 	smulbb	r5, r5, r9
 801e8ca:	fb07 6702 	mla	r7, r7, r2, r6
 801e8ce:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e8d2:	fb1a fa09 	smulbb	sl, sl, r9
 801e8d6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e8da:	b2bf      	uxth	r7, r7
 801e8dc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e8e0:	fa5f fe8e 	uxtb.w	lr, lr
 801e8e4:	fb06 a602 	mla	r6, r6, r2, sl
 801e8e8:	fb0e 5502 	mla	r5, lr, r2, r5
 801e8ec:	1c7a      	adds	r2, r7, #1
 801e8ee:	b2b6      	uxth	r6, r6
 801e8f0:	b2ad      	uxth	r5, r5
 801e8f2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e8f6:	9a01      	ldr	r2, [sp, #4]
 801e8f8:	f105 0a01 	add.w	sl, r5, #1
 801e8fc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e900:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e904:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e908:	ea47 070a 	orr.w	r7, r7, sl
 801e90c:	f106 0a01 	add.w	sl, r6, #1
 801e910:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e914:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e918:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e91c:	ea47 070a 	orr.w	r7, r7, sl
 801e920:	52a7      	strh	r7, [r4, r2]
 801e922:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e924:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e928:	4410      	add	r0, r2
 801e92a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e92c:	4411      	add	r1, r2
 801e92e:	e757      	b.n	801e7e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e930:	f04f 0e00 	mov.w	lr, #0
 801e934:	eba3 020e 	sub.w	r2, r3, lr
 801e938:	2a00      	cmp	r2, #0
 801e93a:	f77f af55 	ble.w	801e7e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e93e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801e942:	1405      	asrs	r5, r0, #16
 801e944:	140a      	asrs	r2, r1, #16
 801e946:	fb06 5202 	mla	r2, r6, r2, r5
 801e94a:	9d00      	ldr	r5, [sp, #0]
 801e94c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801e950:	0e2e      	lsrs	r6, r5, #24
 801e952:	d044      	beq.n	801e9de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801e954:	9a03      	ldr	r2, [sp, #12]
 801e956:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e95a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801e95e:	4356      	muls	r6, r2
 801e960:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e964:	1c72      	adds	r2, r6, #1
 801e966:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e96a:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801e96e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e972:	b2ed      	uxtb	r5, r5
 801e974:	1212      	asrs	r2, r2, #8
 801e976:	fa1f f982 	uxth.w	r9, r2
 801e97a:	43d2      	mvns	r2, r2
 801e97c:	fb16 f609 	smulbb	r6, r6, r9
 801e980:	b2d2      	uxtb	r2, r2
 801e982:	fb15 f509 	smulbb	r5, r5, r9
 801e986:	fb07 6702 	mla	r7, r7, r2, r6
 801e98a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801e98e:	fb1a fa09 	smulbb	sl, sl, r9
 801e992:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e996:	b2bf      	uxth	r7, r7
 801e998:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e99c:	fa5f fc8c 	uxtb.w	ip, ip
 801e9a0:	fb06 a602 	mla	r6, r6, r2, sl
 801e9a4:	fb0c 5502 	mla	r5, ip, r2, r5
 801e9a8:	1c7a      	adds	r2, r7, #1
 801e9aa:	b2b6      	uxth	r6, r6
 801e9ac:	b2ad      	uxth	r5, r5
 801e9ae:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e9b2:	f105 0a01 	add.w	sl, r5, #1
 801e9b6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e9ba:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e9be:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e9c2:	ea47 070a 	orr.w	r7, r7, sl
 801e9c6:	f106 0a01 	add.w	sl, r6, #1
 801e9ca:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e9ce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e9d2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e9d6:	ea47 070a 	orr.w	r7, r7, sl
 801e9da:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801e9de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e9e0:	f10e 0e01 	add.w	lr, lr, #1
 801e9e4:	4410      	add	r0, r2
 801e9e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e9e8:	4411      	add	r1, r2
 801e9ea:	e7a3      	b.n	801e934 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e9ec:	b005      	add	sp, #20
 801e9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e9f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9f8:	b085      	sub	sp, #20
 801e9fa:	468b      	mov	fp, r1
 801e9fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ea00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea02:	9203      	str	r2, [sp, #12]
 801ea04:	6861      	ldr	r1, [r4, #4]
 801ea06:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 801ea0a:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801ea0e:	fb01 2000 	mla	r0, r1, r0, r2
 801ea12:	6822      	ldr	r2, [r4, #0]
 801ea14:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ea18:	f8d9 2000 	ldr.w	r2, [r9]
 801ea1c:	9200      	str	r2, [sp, #0]
 801ea1e:	f1bb 0f00 	cmp.w	fp, #0
 801ea22:	dc03      	bgt.n	801ea2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ea24:	9a03      	ldr	r2, [sp, #12]
 801ea26:	2a00      	cmp	r2, #0
 801ea28:	f340 8154 	ble.w	801ecd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ea2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea2e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ea32:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ea36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ea38:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ea3c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	dd0e      	ble.n	801ea62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ea44:	140c      	asrs	r4, r1, #16
 801ea46:	d405      	bmi.n	801ea54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ea48:	42bc      	cmp	r4, r7
 801ea4a:	da03      	bge.n	801ea54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ea4c:	1414      	asrs	r4, r2, #16
 801ea4e:	d401      	bmi.n	801ea54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ea50:	42b4      	cmp	r4, r6
 801ea52:	db07      	blt.n	801ea64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ea54:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ea56:	3b01      	subs	r3, #1
 801ea58:	3002      	adds	r0, #2
 801ea5a:	4421      	add	r1, r4
 801ea5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ea5e:	4422      	add	r2, r4
 801ea60:	e7ee      	b.n	801ea40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ea62:	d017      	beq.n	801ea94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ea64:	1e5c      	subs	r4, r3, #1
 801ea66:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ea68:	fb05 1504 	mla	r5, r5, r4, r1
 801ea6c:	142d      	asrs	r5, r5, #16
 801ea6e:	d409      	bmi.n	801ea84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ea70:	42bd      	cmp	r5, r7
 801ea72:	da07      	bge.n	801ea84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ea74:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ea76:	fb05 2404 	mla	r4, r5, r4, r2
 801ea7a:	1424      	asrs	r4, r4, #16
 801ea7c:	d402      	bmi.n	801ea84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ea7e:	42b4      	cmp	r4, r6
 801ea80:	f2c0 80c0 	blt.w	801ec04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ea84:	2700      	movs	r7, #0
 801ea86:	19dc      	adds	r4, r3, r7
 801ea88:	2c00      	cmp	r4, #0
 801ea8a:	dc3e      	bgt.n	801eb0a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ea8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea90:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ea94:	f1bb 0f00 	cmp.w	fp, #0
 801ea98:	f340 811c 	ble.w	801ecd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ea9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eaa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eaa2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eaa6:	f1bb 0b01 	subs.w	fp, fp, #1
 801eaaa:	eeb0 6a62 	vmov.f32	s12, s5
 801eaae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eab2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eab6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eaba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eabe:	eeb0 6a43 	vmov.f32	s12, s6
 801eac2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eac6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eaca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eace:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ead2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ead6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eada:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eade:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eae2:	ee12 2a90 	vmov	r2, s5
 801eae6:	eef0 2a47 	vmov.f32	s5, s14
 801eaea:	fb92 f3f3 	sdiv	r3, r2, r3
 801eaee:	ee13 2a10 	vmov	r2, s6
 801eaf2:	9311      	str	r3, [sp, #68]	; 0x44
 801eaf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eaf6:	eeb0 3a67 	vmov.f32	s6, s15
 801eafa:	fb92 f3f3 	sdiv	r3, r2, r3
 801eafe:	9a03      	ldr	r2, [sp, #12]
 801eb00:	9312      	str	r3, [sp, #72]	; 0x48
 801eb02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb04:	bf08      	it	eq
 801eb06:	4613      	moveq	r3, r2
 801eb08:	e789      	b.n	801ea1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801eb0a:	140e      	asrs	r6, r1, #16
 801eb0c:	d461      	bmi.n	801ebd2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eb0e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801eb12:	42b5      	cmp	r5, r6
 801eb14:	dd5d      	ble.n	801ebd2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eb16:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801eb1a:	d45a      	bmi.n	801ebd2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eb1c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801eb20:	4564      	cmp	r4, ip
 801eb22:	dd56      	ble.n	801ebd2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eb24:	b22d      	sxth	r5, r5
 801eb26:	9c00      	ldr	r4, [sp, #0]
 801eb28:	fb0c 6505 	mla	r5, ip, r5, r6
 801eb2c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801eb30:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 801eb34:	d04d      	beq.n	801ebd2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eb36:	0a26      	lsrs	r6, r4, #8
 801eb38:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801eb3c:	fa5f f58e 	uxtb.w	r5, lr
 801eb40:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801eb44:	9601      	str	r6, [sp, #4]
 801eb46:	d04a      	beq.n	801ebde <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801eb48:	f06f 0601 	mvn.w	r6, #1
 801eb4c:	fa1f fa85 	uxth.w	sl, r5
 801eb50:	fa5f fc8c 	uxtb.w	ip, ip
 801eb54:	43ed      	mvns	r5, r5
 801eb56:	437e      	muls	r6, r7
 801eb58:	b2e4      	uxtb	r4, r4
 801eb5a:	fb1c fc0a 	smulbb	ip, ip, sl
 801eb5e:	b2ed      	uxtb	r5, r5
 801eb60:	f830 8006 	ldrh.w	r8, [r0, r6]
 801eb64:	fb14 f40a 	smulbb	r4, r4, sl
 801eb68:	9602      	str	r6, [sp, #8]
 801eb6a:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801eb6e:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801eb72:	fb16 f60a 	smulbb	r6, r6, sl
 801eb76:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801eb7a:	fb0e cc05 	mla	ip, lr, r5, ip
 801eb7e:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 801eb82:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801eb86:	fa1f fc8c 	uxth.w	ip, ip
 801eb8a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801eb8e:	fa5f f888 	uxtb.w	r8, r8
 801eb92:	fb0e 6e05 	mla	lr, lr, r5, r6
 801eb96:	fb08 4405 	mla	r4, r8, r5, r4
 801eb9a:	f10c 0501 	add.w	r5, ip, #1
 801eb9e:	fa1f fe8e 	uxth.w	lr, lr
 801eba2:	b2a4      	uxth	r4, r4
 801eba4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801eba8:	1c66      	adds	r6, r4, #1
 801ebaa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ebae:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ebb2:	9c02      	ldr	r4, [sp, #8]
 801ebb4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ebb8:	ea4c 0c06 	orr.w	ip, ip, r6
 801ebbc:	f10e 0601 	add.w	r6, lr, #1
 801ebc0:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 801ebc4:	0976      	lsrs	r6, r6, #5
 801ebc6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ebca:	ea4c 0c06 	orr.w	ip, ip, r6
 801ebce:	f820 c004 	strh.w	ip, [r0, r4]
 801ebd2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ebd4:	3f01      	subs	r7, #1
 801ebd6:	4421      	add	r1, r4
 801ebd8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ebda:	4422      	add	r2, r4
 801ebdc:	e753      	b.n	801ea86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ebde:	4e3f      	ldr	r6, [pc, #252]	; (801ecdc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801ebe0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ebe4:	f06f 0501 	mvn.w	r5, #1
 801ebe8:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 801ebec:	437d      	muls	r5, r7
 801ebee:	ea4c 0c04 	orr.w	ip, ip, r4
 801ebf2:	9c01      	ldr	r4, [sp, #4]
 801ebf4:	00e6      	lsls	r6, r4, #3
 801ebf6:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801ebfa:	ea4c 0c04 	orr.w	ip, ip, r4
 801ebfe:	f820 c005 	strh.w	ip, [r0, r5]
 801ec02:	e7e6      	b.n	801ebd2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801ec04:	f04f 0800 	mov.w	r8, #0
 801ec08:	eba3 0408 	sub.w	r4, r3, r8
 801ec0c:	2c00      	cmp	r4, #0
 801ec0e:	f77f af3d 	ble.w	801ea8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ec12:	140d      	asrs	r5, r1, #16
 801ec14:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801ec18:	1414      	asrs	r4, r2, #16
 801ec1a:	fb06 5404 	mla	r4, r6, r4, r5
 801ec1e:	9d00      	ldr	r5, [sp, #0]
 801ec20:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801ec24:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801ec28:	d042      	beq.n	801ecb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ec2a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ec2e:	fa5f f58c 	uxtb.w	r5, ip
 801ec32:	ea4f 4714 	mov.w	r7, r4, lsr #16
 801ec36:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801ec3a:	d040      	beq.n	801ecbe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ec3c:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801ec40:	fa1f fa85 	uxth.w	sl, r5
 801ec44:	b2ff      	uxtb	r7, r7
 801ec46:	43ed      	mvns	r5, r5
 801ec48:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ec4c:	fb17 f70a 	smulbb	r7, r7, sl
 801ec50:	b2ed      	uxtb	r5, r5
 801ec52:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ec56:	b2e4      	uxtb	r4, r4
 801ec58:	b2f6      	uxtb	r6, r6
 801ec5a:	fb0c 7705 	mla	r7, ip, r5, r7
 801ec5e:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801ec62:	fb14 f40a 	smulbb	r4, r4, sl
 801ec66:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ec6a:	b2bf      	uxth	r7, r7
 801ec6c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ec70:	fb16 f60a 	smulbb	r6, r6, sl
 801ec74:	fa5f fe8e 	uxtb.w	lr, lr
 801ec78:	fb0e 4405 	mla	r4, lr, r5, r4
 801ec7c:	fb0c 6c05 	mla	ip, ip, r5, r6
 801ec80:	1c7d      	adds	r5, r7, #1
 801ec82:	b2a4      	uxth	r4, r4
 801ec84:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801ec88:	1c66      	adds	r6, r4, #1
 801ec8a:	fa1f fc8c 	uxth.w	ip, ip
 801ec8e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ec92:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ec96:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ec9a:	4337      	orrs	r7, r6
 801ec9c:	f10c 0601 	add.w	r6, ip, #1
 801eca0:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801eca4:	0976      	lsrs	r6, r6, #5
 801eca6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ecaa:	4337      	orrs	r7, r6
 801ecac:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 801ecb0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ecb2:	f108 0801 	add.w	r8, r8, #1
 801ecb6:	4421      	add	r1, r4
 801ecb8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ecba:	4422      	add	r2, r4
 801ecbc:	e7a4      	b.n	801ec08 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ecbe:	4d07      	ldr	r5, [pc, #28]	; (801ecdc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801ecc0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ecc4:	00f6      	lsls	r6, r6, #3
 801ecc6:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 801ecca:	4327      	orrs	r7, r4
 801eccc:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801ecd0:	4327      	orrs	r7, r4
 801ecd2:	e7eb      	b.n	801ecac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801ecd4:	b005      	add	sp, #20
 801ecd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecda:	bf00      	nop
 801ecdc:	fffff800 	.word	0xfffff800

0801ece0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ece4:	b087      	sub	sp, #28
 801ece6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ecea:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ecec:	9204      	str	r2, [sp, #16]
 801ecee:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ecf2:	9101      	str	r1, [sp, #4]
 801ecf4:	9205      	str	r2, [sp, #20]
 801ecf6:	6841      	ldr	r1, [r0, #4]
 801ecf8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ecfc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ed00:	fb01 2404 	mla	r4, r1, r4, r2
 801ed04:	6802      	ldr	r2, [r0, #0]
 801ed06:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ed0a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801ed0e:	3201      	adds	r2, #1
 801ed10:	f022 0201 	bic.w	r2, r2, #1
 801ed14:	9202      	str	r2, [sp, #8]
 801ed16:	f8d8 2000 	ldr.w	r2, [r8]
 801ed1a:	9203      	str	r2, [sp, #12]
 801ed1c:	9a01      	ldr	r2, [sp, #4]
 801ed1e:	2a00      	cmp	r2, #0
 801ed20:	dc03      	bgt.n	801ed2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ed22:	9a04      	ldr	r2, [sp, #16]
 801ed24:	2a00      	cmp	r2, #0
 801ed26:	f340 814d 	ble.w	801efc4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801ed2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ed2c:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ed30:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ed34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ed36:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ed3a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	dd0e      	ble.n	801ed60 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ed42:	1402      	asrs	r2, r0, #16
 801ed44:	d405      	bmi.n	801ed52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ed46:	42ba      	cmp	r2, r7
 801ed48:	da03      	bge.n	801ed52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ed4a:	140a      	asrs	r2, r1, #16
 801ed4c:	d401      	bmi.n	801ed52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ed4e:	42b2      	cmp	r2, r6
 801ed50:	db07      	blt.n	801ed62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ed52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ed54:	3b01      	subs	r3, #1
 801ed56:	3402      	adds	r4, #2
 801ed58:	4410      	add	r0, r2
 801ed5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed5c:	4411      	add	r1, r2
 801ed5e:	e7ee      	b.n	801ed3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ed60:	d019      	beq.n	801ed96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ed62:	1e5a      	subs	r2, r3, #1
 801ed64:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ed66:	fb05 0502 	mla	r5, r5, r2, r0
 801ed6a:	142d      	asrs	r5, r5, #16
 801ed6c:	d409      	bmi.n	801ed82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ed6e:	42bd      	cmp	r5, r7
 801ed70:	da07      	bge.n	801ed82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ed72:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ed74:	fb05 1202 	mla	r2, r5, r2, r1
 801ed78:	1412      	asrs	r2, r2, #16
 801ed7a:	d402      	bmi.n	801ed82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ed7c:	42b2      	cmp	r2, r6
 801ed7e:	f2c0 80b7 	blt.w	801eef0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ed82:	f04f 0c00 	mov.w	ip, #0
 801ed86:	eb03 020c 	add.w	r2, r3, ip
 801ed8a:	2a00      	cmp	r2, #0
 801ed8c:	dc3f      	bgt.n	801ee0e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801ed8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed92:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ed96:	9b01      	ldr	r3, [sp, #4]
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	f340 8113 	ble.w	801efc4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801ed9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eda2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eda4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eda8:	eeb0 6a62 	vmov.f32	s12, s5
 801edac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801edb0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801edb4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edb8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801edbc:	eeb0 6a43 	vmov.f32	s12, s6
 801edc0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edc4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801edc8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801edcc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801edd0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801edd4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801edd8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eddc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ede0:	ee12 2a90 	vmov	r2, s5
 801ede4:	eef0 2a47 	vmov.f32	s5, s14
 801ede8:	fb92 f3f3 	sdiv	r3, r2, r3
 801edec:	ee13 2a10 	vmov	r2, s6
 801edf0:	9313      	str	r3, [sp, #76]	; 0x4c
 801edf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801edf4:	eeb0 3a67 	vmov.f32	s6, s15
 801edf8:	fb92 f3f3 	sdiv	r3, r2, r3
 801edfc:	9314      	str	r3, [sp, #80]	; 0x50
 801edfe:	9b01      	ldr	r3, [sp, #4]
 801ee00:	9a04      	ldr	r2, [sp, #16]
 801ee02:	3b01      	subs	r3, #1
 801ee04:	9301      	str	r3, [sp, #4]
 801ee06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee08:	bf08      	it	eq
 801ee0a:	4613      	moveq	r3, r2
 801ee0c:	e786      	b.n	801ed1c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ee0e:	1405      	asrs	r5, r0, #16
 801ee10:	d467      	bmi.n	801eee2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ee12:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801ee16:	42aa      	cmp	r2, r5
 801ee18:	dd63      	ble.n	801eee2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ee1a:	140e      	asrs	r6, r1, #16
 801ee1c:	d461      	bmi.n	801eee2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ee1e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801ee22:	42b2      	cmp	r2, r6
 801ee24:	dd5d      	ble.n	801eee2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ee26:	9a02      	ldr	r2, [sp, #8]
 801ee28:	fb06 5502 	mla	r5, r6, r2, r5
 801ee2c:	9e03      	ldr	r6, [sp, #12]
 801ee2e:	086a      	lsrs	r2, r5, #1
 801ee30:	5cb2      	ldrb	r2, [r6, r2]
 801ee32:	07ee      	lsls	r6, r5, #31
 801ee34:	bf54      	ite	pl
 801ee36:	f002 020f 	andpl.w	r2, r2, #15
 801ee3a:	1112      	asrmi	r2, r2, #4
 801ee3c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ee40:	b2d2      	uxtb	r2, r2
 801ee42:	2a00      	cmp	r2, #0
 801ee44:	d04d      	beq.n	801eee2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ee46:	f06f 0601 	mvn.w	r6, #1
 801ee4a:	4d60      	ldr	r5, [pc, #384]	; (801efcc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ee4c:	fb06 fb0c 	mul.w	fp, r6, ip
 801ee50:	9e05      	ldr	r6, [sp, #20]
 801ee52:	682d      	ldr	r5, [r5, #0]
 801ee54:	4372      	muls	r2, r6
 801ee56:	f834 e00b 	ldrh.w	lr, [r4, fp]
 801ee5a:	0a2f      	lsrs	r7, r5, #8
 801ee5c:	1c56      	adds	r6, r2, #1
 801ee5e:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801ee62:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ee66:	00ed      	lsls	r5, r5, #3
 801ee68:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ee6c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ee70:	ea4f 262e 	mov.w	r6, lr, asr #8
 801ee74:	1212      	asrs	r2, r2, #8
 801ee76:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ee7a:	b2ed      	uxtb	r5, r5
 801ee7c:	fa1f fa82 	uxth.w	sl, r2
 801ee80:	43d2      	mvns	r2, r2
 801ee82:	fb17 f70a 	smulbb	r7, r7, sl
 801ee86:	b2d2      	uxtb	r2, r2
 801ee88:	fb19 f90a 	smulbb	r9, r9, sl
 801ee8c:	fb06 7602 	mla	r6, r6, r2, r7
 801ee90:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801ee94:	fb15 f50a 	smulbb	r5, r5, sl
 801ee98:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ee9c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801eea0:	b2b6      	uxth	r6, r6
 801eea2:	fa5f fe8e 	uxtb.w	lr, lr
 801eea6:	fb07 9702 	mla	r7, r7, r2, r9
 801eeaa:	fb0e 5502 	mla	r5, lr, r2, r5
 801eeae:	b2bf      	uxth	r7, r7
 801eeb0:	b2ad      	uxth	r5, r5
 801eeb2:	f107 0901 	add.w	r9, r7, #1
 801eeb6:	f105 0e01 	add.w	lr, r5, #1
 801eeba:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801eebe:	f106 0901 	add.w	r9, r6, #1
 801eec2:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801eec6:	097f      	lsrs	r7, r7, #5
 801eec8:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801eecc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801eed0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801eed4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801eed8:	4337      	orrs	r7, r6
 801eeda:	ea47 070e 	orr.w	r7, r7, lr
 801eede:	f824 700b 	strh.w	r7, [r4, fp]
 801eee2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eee4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801eee8:	4410      	add	r0, r2
 801eeea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eeec:	4411      	add	r1, r2
 801eeee:	e74a      	b.n	801ed86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801eef0:	f04f 0e00 	mov.w	lr, #0
 801eef4:	eba3 020e 	sub.w	r2, r3, lr
 801eef8:	2a00      	cmp	r2, #0
 801eefa:	f77f af48 	ble.w	801ed8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801eefe:	1402      	asrs	r2, r0, #16
 801ef00:	9e02      	ldr	r6, [sp, #8]
 801ef02:	140d      	asrs	r5, r1, #16
 801ef04:	fb06 2505 	mla	r5, r6, r5, r2
 801ef08:	9e03      	ldr	r6, [sp, #12]
 801ef0a:	086a      	lsrs	r2, r5, #1
 801ef0c:	07ed      	lsls	r5, r5, #31
 801ef0e:	5cb2      	ldrb	r2, [r6, r2]
 801ef10:	bf54      	ite	pl
 801ef12:	f002 020f 	andpl.w	r2, r2, #15
 801ef16:	1112      	asrmi	r2, r2, #4
 801ef18:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ef1c:	b2d2      	uxtb	r2, r2
 801ef1e:	2a00      	cmp	r2, #0
 801ef20:	d049      	beq.n	801efb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ef22:	9e05      	ldr	r6, [sp, #20]
 801ef24:	4d29      	ldr	r5, [pc, #164]	; (801efcc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ef26:	4372      	muls	r2, r6
 801ef28:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ef2c:	682d      	ldr	r5, [r5, #0]
 801ef2e:	1c56      	adds	r6, r2, #1
 801ef30:	0a2f      	lsrs	r7, r5, #8
 801ef32:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ef36:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ef3a:	ea4f 262c 	mov.w	r6, ip, asr #8
 801ef3e:	1212      	asrs	r2, r2, #8
 801ef40:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801ef44:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ef48:	fa1f fa82 	uxth.w	sl, r2
 801ef4c:	43d2      	mvns	r2, r2
 801ef4e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ef52:	00ed      	lsls	r5, r5, #3
 801ef54:	fb17 f70a 	smulbb	r7, r7, sl
 801ef58:	b2d2      	uxtb	r2, r2
 801ef5a:	fb19 f90a 	smulbb	r9, r9, sl
 801ef5e:	b2ed      	uxtb	r5, r5
 801ef60:	fb06 7602 	mla	r6, r6, r2, r7
 801ef64:	ea4f 07ec 	mov.w	r7, ip, asr #3
 801ef68:	fb15 f50a 	smulbb	r5, r5, sl
 801ef6c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ef70:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ef74:	b2b6      	uxth	r6, r6
 801ef76:	fa5f fc8c 	uxtb.w	ip, ip
 801ef7a:	fb07 9702 	mla	r7, r7, r2, r9
 801ef7e:	f106 0b01 	add.w	fp, r6, #1
 801ef82:	fb0c 5502 	mla	r5, ip, r2, r5
 801ef86:	b2bf      	uxth	r7, r7
 801ef88:	b2ad      	uxth	r5, r5
 801ef8a:	f107 0901 	add.w	r9, r7, #1
 801ef8e:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801ef92:	f105 0c01 	add.w	ip, r5, #1
 801ef96:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801ef9a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ef9e:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801efa2:	097f      	lsrs	r7, r7, #5
 801efa4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801efa8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801efac:	4337      	orrs	r7, r6
 801efae:	ea47 070c 	orr.w	r7, r7, ip
 801efb2:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801efb6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801efb8:	f10e 0e01 	add.w	lr, lr, #1
 801efbc:	4410      	add	r0, r2
 801efbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801efc0:	4411      	add	r1, r2
 801efc2:	e797      	b.n	801eef4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801efc4:	b007      	add	sp, #28
 801efc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efca:	bf00      	nop
 801efcc:	200057e8 	.word	0x200057e8

0801efd0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efd4:	b087      	sub	sp, #28
 801efd6:	468b      	mov	fp, r1
 801efd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801efdc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801efde:	9205      	str	r2, [sp, #20]
 801efe0:	6841      	ldr	r1, [r0, #4]
 801efe2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801efe6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801efea:	fb01 2404 	mla	r4, r1, r4, r2
 801efee:	6802      	ldr	r2, [r0, #0]
 801eff0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eff4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801eff8:	3201      	adds	r2, #1
 801effa:	f022 0201 	bic.w	r2, r2, #1
 801effe:	9201      	str	r2, [sp, #4]
 801f000:	f8d8 2000 	ldr.w	r2, [r8]
 801f004:	9202      	str	r2, [sp, #8]
 801f006:	f1bb 0f00 	cmp.w	fp, #0
 801f00a:	dc03      	bgt.n	801f014 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f00c:	9a05      	ldr	r2, [sp, #20]
 801f00e:	2a00      	cmp	r2, #0
 801f010:	f340 8158 	ble.w	801f2c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f014:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f016:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f01a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f01e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f020:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f024:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f028:	2b00      	cmp	r3, #0
 801f02a:	dd0e      	ble.n	801f04a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f02c:	1402      	asrs	r2, r0, #16
 801f02e:	d405      	bmi.n	801f03c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f030:	42ba      	cmp	r2, r7
 801f032:	da03      	bge.n	801f03c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f034:	140a      	asrs	r2, r1, #16
 801f036:	d401      	bmi.n	801f03c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f038:	42b2      	cmp	r2, r6
 801f03a:	db07      	blt.n	801f04c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f03c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f03e:	3b01      	subs	r3, #1
 801f040:	3402      	adds	r4, #2
 801f042:	4410      	add	r0, r2
 801f044:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f046:	4411      	add	r1, r2
 801f048:	e7ee      	b.n	801f028 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f04a:	d017      	beq.n	801f07c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801f04c:	1e5a      	subs	r2, r3, #1
 801f04e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f050:	fb05 0502 	mla	r5, r5, r2, r0
 801f054:	142d      	asrs	r5, r5, #16
 801f056:	d409      	bmi.n	801f06c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f058:	42bd      	cmp	r5, r7
 801f05a:	da07      	bge.n	801f06c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f05c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f05e:	fb05 1202 	mla	r2, r5, r2, r1
 801f062:	1412      	asrs	r2, r2, #16
 801f064:	d402      	bmi.n	801f06c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f066:	42b2      	cmp	r2, r6
 801f068:	f2c0 80c0 	blt.w	801f1ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 801f06c:	2600      	movs	r6, #0
 801f06e:	199a      	adds	r2, r3, r6
 801f070:	2a00      	cmp	r2, #0
 801f072:	dc3e      	bgt.n	801f0f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f074:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f078:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f07c:	f1bb 0f00 	cmp.w	fp, #0
 801f080:	f340 8120 	ble.w	801f2c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f084:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f088:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f08a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f08e:	f1bb 0b01 	subs.w	fp, fp, #1
 801f092:	eeb0 6a62 	vmov.f32	s12, s5
 801f096:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f09a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f09e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0a2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f0a6:	eeb0 6a43 	vmov.f32	s12, s6
 801f0aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0ae:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f0b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f0b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f0ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0ca:	ee12 2a90 	vmov	r2, s5
 801f0ce:	eef0 2a47 	vmov.f32	s5, s14
 801f0d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0d6:	ee13 2a10 	vmov	r2, s6
 801f0da:	9313      	str	r3, [sp, #76]	; 0x4c
 801f0dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f0de:	eeb0 3a67 	vmov.f32	s6, s15
 801f0e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0e6:	9a05      	ldr	r2, [sp, #20]
 801f0e8:	9314      	str	r3, [sp, #80]	; 0x50
 801f0ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f0ec:	bf08      	it	eq
 801f0ee:	4613      	moveq	r3, r2
 801f0f0:	e789      	b.n	801f006 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f0f2:	1405      	asrs	r5, r0, #16
 801f0f4:	d467      	bmi.n	801f1c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f0f6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801f0fa:	42aa      	cmp	r2, r5
 801f0fc:	dd63      	ble.n	801f1c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f0fe:	140f      	asrs	r7, r1, #16
 801f100:	d461      	bmi.n	801f1c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f102:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801f106:	42ba      	cmp	r2, r7
 801f108:	dd5d      	ble.n	801f1c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f10a:	9a01      	ldr	r2, [sp, #4]
 801f10c:	fb07 5502 	mla	r5, r7, r2, r5
 801f110:	9f02      	ldr	r7, [sp, #8]
 801f112:	086a      	lsrs	r2, r5, #1
 801f114:	5cba      	ldrb	r2, [r7, r2]
 801f116:	07ef      	lsls	r7, r5, #31
 801f118:	bf54      	ite	pl
 801f11a:	f002 020f 	andpl.w	r2, r2, #15
 801f11e:	1112      	asrmi	r2, r2, #4
 801f120:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f124:	b2d2      	uxtb	r2, r2
 801f126:	2a00      	cmp	r2, #0
 801f128:	d04d      	beq.n	801f1c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f12a:	4d68      	ldr	r5, [pc, #416]	; (801f2cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801f12c:	2aff      	cmp	r2, #255	; 0xff
 801f12e:	682f      	ldr	r7, [r5, #0]
 801f130:	ea4f 05d7 	mov.w	r5, r7, lsr #3
 801f134:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801f138:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f13c:	ea4f 07c7 	mov.w	r7, r7, lsl #3
 801f140:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801f144:	9503      	str	r5, [sp, #12]
 801f146:	b2ff      	uxtb	r7, r7
 801f148:	d043      	beq.n	801f1d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f14a:	f06f 0501 	mvn.w	r5, #1
 801f14e:	fa1f fa82 	uxth.w	sl, r2
 801f152:	43d2      	mvns	r2, r2
 801f154:	fb19 f90a 	smulbb	r9, r9, sl
 801f158:	4375      	muls	r5, r6
 801f15a:	fb17 f70a 	smulbb	r7, r7, sl
 801f15e:	b2d2      	uxtb	r2, r2
 801f160:	f834 e005 	ldrh.w	lr, [r4, r5]
 801f164:	9504      	str	r5, [sp, #16]
 801f166:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f16a:	9d03      	ldr	r5, [sp, #12]
 801f16c:	fb15 f50a 	smulbb	r5, r5, sl
 801f170:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f174:	fb0c 9c02 	mla	ip, ip, r2, r9
 801f178:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801f17c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f180:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f184:	fa1f fc8c 	uxth.w	ip, ip
 801f188:	fa5f fe8e 	uxtb.w	lr, lr
 801f18c:	fb09 5502 	mla	r5, r9, r2, r5
 801f190:	fb0e 7702 	mla	r7, lr, r2, r7
 801f194:	b2ad      	uxth	r5, r5
 801f196:	b2bf      	uxth	r7, r7
 801f198:	f105 0901 	add.w	r9, r5, #1
 801f19c:	1c7a      	adds	r2, r7, #1
 801f19e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f1a2:	f10c 0901 	add.w	r9, ip, #1
 801f1a6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f1aa:	9a04      	ldr	r2, [sp, #16]
 801f1ac:	096d      	lsrs	r5, r5, #5
 801f1ae:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801f1b2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f1b6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f1ba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f1be:	ea45 050c 	orr.w	r5, r5, ip
 801f1c2:	433d      	orrs	r5, r7
 801f1c4:	52a5      	strh	r5, [r4, r2]
 801f1c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f1c8:	3e01      	subs	r6, #1
 801f1ca:	4410      	add	r0, r2
 801f1cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f1ce:	4411      	add	r1, r2
 801f1d0:	e74d      	b.n	801f06e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f1d2:	f06f 0201 	mvn.w	r2, #1
 801f1d6:	fb02 fe06 	mul.w	lr, r2, r6
 801f1da:	9a03      	ldr	r2, [sp, #12]
 801f1dc:	00d5      	lsls	r5, r2, #3
 801f1de:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801f1e2:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 801f1e6:	f824 500e 	strh.w	r5, [r4, lr]
 801f1ea:	e7ec      	b.n	801f1c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f1ec:	f04f 0e00 	mov.w	lr, #0
 801f1f0:	eba3 020e 	sub.w	r2, r3, lr
 801f1f4:	2a00      	cmp	r2, #0
 801f1f6:	f77f af3d 	ble.w	801f074 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801f1fa:	1402      	asrs	r2, r0, #16
 801f1fc:	9e01      	ldr	r6, [sp, #4]
 801f1fe:	140d      	asrs	r5, r1, #16
 801f200:	fb06 2505 	mla	r5, r6, r5, r2
 801f204:	9e02      	ldr	r6, [sp, #8]
 801f206:	086a      	lsrs	r2, r5, #1
 801f208:	07ed      	lsls	r5, r5, #31
 801f20a:	5cb2      	ldrb	r2, [r6, r2]
 801f20c:	bf54      	ite	pl
 801f20e:	f002 020f 	andpl.w	r2, r2, #15
 801f212:	1112      	asrmi	r2, r2, #4
 801f214:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f218:	b2d2      	uxtb	r2, r2
 801f21a:	2a00      	cmp	r2, #0
 801f21c:	d045      	beq.n	801f2aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801f21e:	4d2b      	ldr	r5, [pc, #172]	; (801f2cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801f220:	2aff      	cmp	r2, #255	; 0xff
 801f222:	682e      	ldr	r6, [r5, #0]
 801f224:	ea4f 2916 	mov.w	r9, r6, lsr #8
 801f228:	ea4f 05d6 	mov.w	r5, r6, lsr #3
 801f22c:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801f230:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801f234:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f238:	b2f6      	uxtb	r6, r6
 801f23a:	d03d      	beq.n	801f2b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f23c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f240:	fa1f fa82 	uxth.w	sl, r2
 801f244:	43d2      	mvns	r2, r2
 801f246:	fb19 f90a 	smulbb	r9, r9, sl
 801f24a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f24e:	fb15 f50a 	smulbb	r5, r5, sl
 801f252:	b2d2      	uxtb	r2, r2
 801f254:	fb16 f60a 	smulbb	r6, r6, sl
 801f258:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f25c:	fb07 9702 	mla	r7, r7, r2, r9
 801f260:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801f264:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f268:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f26c:	b2bf      	uxth	r7, r7
 801f26e:	fa5f fc8c 	uxtb.w	ip, ip
 801f272:	fb09 5502 	mla	r5, r9, r2, r5
 801f276:	fb0c 6602 	mla	r6, ip, r2, r6
 801f27a:	b2ad      	uxth	r5, r5
 801f27c:	b2b6      	uxth	r6, r6
 801f27e:	f105 0901 	add.w	r9, r5, #1
 801f282:	1c72      	adds	r2, r6, #1
 801f284:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f288:	f107 0901 	add.w	r9, r7, #1
 801f28c:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f290:	096d      	lsrs	r5, r5, #5
 801f292:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801f296:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f29a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f29e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f2a2:	433d      	orrs	r5, r7
 801f2a4:	4335      	orrs	r5, r6
 801f2a6:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801f2aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f2ac:	f10e 0e01 	add.w	lr, lr, #1
 801f2b0:	4410      	add	r0, r2
 801f2b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f2b4:	4411      	add	r1, r2
 801f2b6:	e79b      	b.n	801f1f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f2b8:	00ed      	lsls	r5, r5, #3
 801f2ba:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801f2be:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
 801f2c2:	e7f0      	b.n	801f2a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801f2c4:	b007      	add	sp, #28
 801f2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2ca:	bf00      	nop
 801f2cc:	200057e8 	.word	0x200057e8

0801f2d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f2d0:	4770      	bx	lr

0801f2d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f2d2:	4770      	bx	lr

0801f2d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f2d4:	4770      	bx	lr

0801f2d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f2d6:	4770      	bx	lr

0801f2d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f2d8:	4770      	bx	lr

0801f2da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f2da:	4770      	bx	lr

0801f2dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f2dc:	4770      	bx	lr

0801f2de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f2de:	4770      	bx	lr

0801f2e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f2e0:	4770      	bx	lr

0801f2e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f2e2:	4770      	bx	lr

0801f2e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f2e4:	4770      	bx	lr

0801f2e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f2e6:	4770      	bx	lr

0801f2e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f2e8:	4770      	bx	lr

0801f2ea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f2ea:	4770      	bx	lr

0801f2ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f2ec:	4770      	bx	lr

0801f2ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f2ee:	4770      	bx	lr

0801f2f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f2f0:	4770      	bx	lr

0801f2f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f2f2:	4770      	bx	lr

0801f2f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f2f4:	4770      	bx	lr

0801f2f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f2f6:	4770      	bx	lr

0801f2f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f2f8:	4770      	bx	lr

0801f2fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f2fa:	4770      	bx	lr

0801f2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f2fc:	4770      	bx	lr

0801f2fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f2fe:	4770      	bx	lr

0801f300 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f300:	4770      	bx	lr

0801f302 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f302:	4770      	bx	lr

0801f304 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f304:	4770      	bx	lr

0801f306 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f306:	4770      	bx	lr

0801f308 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801f308:	b508      	push	{r3, lr}
 801f30a:	4b06      	ldr	r3, [pc, #24]	; (801f324 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801f30c:	8818      	ldrh	r0, [r3, #0]
 801f30e:	b928      	cbnz	r0, 801f31c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801f310:	4b05      	ldr	r3, [pc, #20]	; (801f328 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801f312:	2154      	movs	r1, #84	; 0x54
 801f314:	4a05      	ldr	r2, [pc, #20]	; (801f32c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801f316:	4806      	ldr	r0, [pc, #24]	; (801f330 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801f318:	f009 f9b6 	bl	8028688 <__assert_func>
 801f31c:	0040      	lsls	r0, r0, #1
 801f31e:	b280      	uxth	r0, r0
 801f320:	bd08      	pop	{r3, pc}
 801f322:	bf00      	nop
 801f324:	200057da 	.word	0x200057da
 801f328:	0802cf49 	.word	0x0802cf49
 801f32c:	0802d4d3 	.word	0x0802d4d3
 801f330:	0802cf8b 	.word	0x0802cf8b

0801f334 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f338:	b08b      	sub	sp, #44	; 0x2c
 801f33a:	460f      	mov	r7, r1
 801f33c:	4616      	mov	r6, r2
 801f33e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801f342:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f346:	f1bb 0f00 	cmp.w	fp, #0
 801f34a:	d046      	beq.n	801f3da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801f34c:	6810      	ldr	r0, [r2, #0]
 801f34e:	ad06      	add	r5, sp, #24
 801f350:	6851      	ldr	r1, [r2, #4]
 801f352:	c503      	stmia	r5!, {r0, r1}
 801f354:	6818      	ldr	r0, [r3, #0]
 801f356:	ad08      	add	r5, sp, #32
 801f358:	6859      	ldr	r1, [r3, #4]
 801f35a:	c503      	stmia	r5!, {r0, r1}
 801f35c:	a806      	add	r0, sp, #24
 801f35e:	f7fa fc27 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f362:	4631      	mov	r1, r6
 801f364:	a808      	add	r0, sp, #32
 801f366:	f7fa fc0b 	bl	8019b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f36a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f36e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f372:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f376:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801f37a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801f37e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801f382:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801f386:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f38a:	4f5d      	ldr	r7, [pc, #372]	; (801f500 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801f38c:	440a      	add	r2, r1
 801f38e:	6838      	ldr	r0, [r7, #0]
 801f390:	46b9      	mov	r9, r7
 801f392:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f396:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f39a:	4413      	add	r3, r2
 801f39c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f3a0:	6803      	ldr	r3, [r0, #0]
 801f3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3a4:	4798      	blx	r3
 801f3a6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f3aa:	d019      	beq.n	801f3e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f3ac:	f010 0f04 	tst.w	r0, #4
 801f3b0:	d01a      	beq.n	801f3e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801f3b2:	f8d9 0000 	ldr.w	r0, [r9]
 801f3b6:	b2ad      	uxth	r5, r5
 801f3b8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f3bc:	6801      	ldr	r1, [r0, #0]
 801f3be:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f3c2:	9501      	str	r5, [sp, #4]
 801f3c4:	e9cd b403 	strd	fp, r4, [sp, #12]
 801f3c8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f3cc:	9402      	str	r4, [sp, #8]
 801f3ce:	fa1f f488 	uxth.w	r4, r8
 801f3d2:	9400      	str	r4, [sp, #0]
 801f3d4:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801f3d6:	4631      	mov	r1, r6
 801f3d8:	47a0      	blx	r4
 801f3da:	b00b      	add	sp, #44	; 0x2c
 801f3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3e0:	b914      	cbnz	r4, 801f3e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801f3e2:	f010 0f01 	tst.w	r0, #1
 801f3e6:	e7e3      	b.n	801f3b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801f3e8:	f8d9 0000 	ldr.w	r0, [r9]
 801f3ec:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801f3f0:	6803      	ldr	r3, [r0, #0]
 801f3f2:	6a1b      	ldr	r3, [r3, #32]
 801f3f4:	4798      	blx	r3
 801f3f6:	4b43      	ldr	r3, [pc, #268]	; (801f504 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 801f3f8:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801f3fc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f400:	881a      	ldrh	r2, [r3, #0]
 801f402:	469a      	mov	sl, r3
 801f404:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f408:	fb05 f502 	mul.w	r5, r5, r2
 801f40c:	fb02 1404 	mla	r4, r2, r4, r1
 801f410:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f414:	d058      	beq.n	801f4c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 801f416:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801f41a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f41e:	fa1f f28b 	uxth.w	r2, fp
 801f422:	469e      	mov	lr, r3
 801f424:	fa1f f989 	uxth.w	r9, r9
 801f428:	42ac      	cmp	r4, r5
 801f42a:	d263      	bcs.n	801f4f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801f42c:	eb04 0a07 	add.w	sl, r4, r7
 801f430:	4554      	cmp	r4, sl
 801f432:	d23c      	bcs.n	801f4ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 801f434:	8821      	ldrh	r1, [r4, #0]
 801f436:	f836 3b02 	ldrh.w	r3, [r6], #2
 801f43a:	1208      	asrs	r0, r1, #8
 801f43c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f440:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f444:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801f448:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f44c:	00c9      	lsls	r1, r1, #3
 801f44e:	fb10 f009 	smulbb	r0, r0, r9
 801f452:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f456:	b2c9      	uxtb	r1, r1
 801f458:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f45c:	10d8      	asrs	r0, r3, #3
 801f45e:	fb11 f109 	smulbb	r1, r1, r9
 801f462:	00db      	lsls	r3, r3, #3
 801f464:	fa1f fc8c 	uxth.w	ip, ip
 801f468:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f46c:	fb1b fb09 	smulbb	fp, fp, r9
 801f470:	b2db      	uxtb	r3, r3
 801f472:	fb03 1302 	mla	r3, r3, r2, r1
 801f476:	f10c 0101 	add.w	r1, ip, #1
 801f47a:	fb00 b002 	mla	r0, r0, r2, fp
 801f47e:	b29b      	uxth	r3, r3
 801f480:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801f484:	1c59      	adds	r1, r3, #1
 801f486:	b280      	uxth	r0, r0
 801f488:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f48c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f490:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f494:	ea4c 0c03 	orr.w	ip, ip, r3
 801f498:	1c43      	adds	r3, r0, #1
 801f49a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f49e:	0940      	lsrs	r0, r0, #5
 801f4a0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f4a4:	ea4c 0c00 	orr.w	ip, ip, r0
 801f4a8:	f824 cb02 	strh.w	ip, [r4], #2
 801f4ac:	e7c0      	b.n	801f430 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801f4ae:	f8be 3000 	ldrh.w	r3, [lr]
 801f4b2:	eba3 0308 	sub.w	r3, r3, r8
 801f4b6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f4ba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f4be:	eba3 0308 	sub.w	r3, r3, r8
 801f4c2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f4c6:	e7af      	b.n	801f428 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801f4c8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f4cc:	f8d9 0000 	ldr.w	r0, [r9]
 801f4d0:	42ac      	cmp	r4, r5
 801f4d2:	6803      	ldr	r3, [r0, #0]
 801f4d4:	d20e      	bcs.n	801f4f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801f4d6:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 801f4da:	4632      	mov	r2, r6
 801f4dc:	463b      	mov	r3, r7
 801f4de:	4621      	mov	r1, r4
 801f4e0:	47c0      	blx	r8
 801f4e2:	f8ba 3000 	ldrh.w	r3, [sl]
 801f4e6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f4ea:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f4ee:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f4f2:	e7eb      	b.n	801f4cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 801f4f4:	4b02      	ldr	r3, [pc, #8]	; (801f500 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801f4f6:	6818      	ldr	r0, [r3, #0]
 801f4f8:	6803      	ldr	r3, [r0, #0]
 801f4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4fc:	4798      	blx	r3
 801f4fe:	e76c      	b.n	801f3da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801f500:	200057e0 	.word	0x200057e0
 801f504:	200057da 	.word	0x200057da

0801f508 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f508:	b510      	push	{r4, lr}
 801f50a:	4604      	mov	r4, r0
 801f50c:	2104      	movs	r1, #4
 801f50e:	f009 f88c 	bl	802862a <_ZdlPvj>
 801f512:	4620      	mov	r0, r4
 801f514:	bd10      	pop	{r4, pc}

0801f516 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f516:	b510      	push	{r4, lr}
 801f518:	4604      	mov	r4, r0
 801f51a:	2104      	movs	r1, #4
 801f51c:	f009 f885 	bl	802862a <_ZdlPvj>
 801f520:	4620      	mov	r0, r4
 801f522:	bd10      	pop	{r4, pc}

0801f524 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f524:	b510      	push	{r4, lr}
 801f526:	4604      	mov	r4, r0
 801f528:	2104      	movs	r1, #4
 801f52a:	f009 f87e 	bl	802862a <_ZdlPvj>
 801f52e:	4620      	mov	r0, r4
 801f530:	bd10      	pop	{r4, pc}

0801f532 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f532:	b510      	push	{r4, lr}
 801f534:	4604      	mov	r4, r0
 801f536:	2104      	movs	r1, #4
 801f538:	f009 f877 	bl	802862a <_ZdlPvj>
 801f53c:	4620      	mov	r0, r4
 801f53e:	bd10      	pop	{r4, pc}

0801f540 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f540:	b510      	push	{r4, lr}
 801f542:	4604      	mov	r4, r0
 801f544:	2104      	movs	r1, #4
 801f546:	f009 f870 	bl	802862a <_ZdlPvj>
 801f54a:	4620      	mov	r0, r4
 801f54c:	bd10      	pop	{r4, pc}

0801f54e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f54e:	b510      	push	{r4, lr}
 801f550:	4604      	mov	r4, r0
 801f552:	2104      	movs	r1, #4
 801f554:	f009 f869 	bl	802862a <_ZdlPvj>
 801f558:	4620      	mov	r0, r4
 801f55a:	bd10      	pop	{r4, pc}

0801f55c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f55c:	b510      	push	{r4, lr}
 801f55e:	4604      	mov	r4, r0
 801f560:	2104      	movs	r1, #4
 801f562:	f009 f862 	bl	802862a <_ZdlPvj>
 801f566:	4620      	mov	r0, r4
 801f568:	bd10      	pop	{r4, pc}

0801f56a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f56a:	b510      	push	{r4, lr}
 801f56c:	4604      	mov	r4, r0
 801f56e:	2104      	movs	r1, #4
 801f570:	f009 f85b 	bl	802862a <_ZdlPvj>
 801f574:	4620      	mov	r0, r4
 801f576:	bd10      	pop	{r4, pc}

0801f578 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f578:	b510      	push	{r4, lr}
 801f57a:	4604      	mov	r4, r0
 801f57c:	2104      	movs	r1, #4
 801f57e:	f009 f854 	bl	802862a <_ZdlPvj>
 801f582:	4620      	mov	r0, r4
 801f584:	bd10      	pop	{r4, pc}

0801f586 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f586:	b510      	push	{r4, lr}
 801f588:	4604      	mov	r4, r0
 801f58a:	2104      	movs	r1, #4
 801f58c:	f009 f84d 	bl	802862a <_ZdlPvj>
 801f590:	4620      	mov	r0, r4
 801f592:	bd10      	pop	{r4, pc}

0801f594 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f594:	b510      	push	{r4, lr}
 801f596:	4604      	mov	r4, r0
 801f598:	2104      	movs	r1, #4
 801f59a:	f009 f846 	bl	802862a <_ZdlPvj>
 801f59e:	4620      	mov	r0, r4
 801f5a0:	bd10      	pop	{r4, pc}

0801f5a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f5a2:	b510      	push	{r4, lr}
 801f5a4:	4604      	mov	r4, r0
 801f5a6:	2104      	movs	r1, #4
 801f5a8:	f009 f83f 	bl	802862a <_ZdlPvj>
 801f5ac:	4620      	mov	r0, r4
 801f5ae:	bd10      	pop	{r4, pc}

0801f5b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f5b0:	b510      	push	{r4, lr}
 801f5b2:	4604      	mov	r4, r0
 801f5b4:	2104      	movs	r1, #4
 801f5b6:	f009 f838 	bl	802862a <_ZdlPvj>
 801f5ba:	4620      	mov	r0, r4
 801f5bc:	bd10      	pop	{r4, pc}

0801f5be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f5be:	b510      	push	{r4, lr}
 801f5c0:	4604      	mov	r4, r0
 801f5c2:	2104      	movs	r1, #4
 801f5c4:	f009 f831 	bl	802862a <_ZdlPvj>
 801f5c8:	4620      	mov	r0, r4
 801f5ca:	bd10      	pop	{r4, pc}

0801f5cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f5cc:	b510      	push	{r4, lr}
 801f5ce:	4604      	mov	r4, r0
 801f5d0:	2104      	movs	r1, #4
 801f5d2:	f009 f82a 	bl	802862a <_ZdlPvj>
 801f5d6:	4620      	mov	r0, r4
 801f5d8:	bd10      	pop	{r4, pc}

0801f5da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f5da:	b510      	push	{r4, lr}
 801f5dc:	4604      	mov	r4, r0
 801f5de:	2104      	movs	r1, #4
 801f5e0:	f009 f823 	bl	802862a <_ZdlPvj>
 801f5e4:	4620      	mov	r0, r4
 801f5e6:	bd10      	pop	{r4, pc}

0801f5e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f5e8:	b510      	push	{r4, lr}
 801f5ea:	4604      	mov	r4, r0
 801f5ec:	2104      	movs	r1, #4
 801f5ee:	f009 f81c 	bl	802862a <_ZdlPvj>
 801f5f2:	4620      	mov	r0, r4
 801f5f4:	bd10      	pop	{r4, pc}

0801f5f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f5f6:	b510      	push	{r4, lr}
 801f5f8:	4604      	mov	r4, r0
 801f5fa:	2104      	movs	r1, #4
 801f5fc:	f009 f815 	bl	802862a <_ZdlPvj>
 801f600:	4620      	mov	r0, r4
 801f602:	bd10      	pop	{r4, pc}

0801f604 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f604:	b510      	push	{r4, lr}
 801f606:	4604      	mov	r4, r0
 801f608:	2104      	movs	r1, #4
 801f60a:	f009 f80e 	bl	802862a <_ZdlPvj>
 801f60e:	4620      	mov	r0, r4
 801f610:	bd10      	pop	{r4, pc}

0801f612 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f612:	b510      	push	{r4, lr}
 801f614:	4604      	mov	r4, r0
 801f616:	2104      	movs	r1, #4
 801f618:	f009 f807 	bl	802862a <_ZdlPvj>
 801f61c:	4620      	mov	r0, r4
 801f61e:	bd10      	pop	{r4, pc}

0801f620 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f620:	b510      	push	{r4, lr}
 801f622:	4604      	mov	r4, r0
 801f624:	2104      	movs	r1, #4
 801f626:	f009 f800 	bl	802862a <_ZdlPvj>
 801f62a:	4620      	mov	r0, r4
 801f62c:	bd10      	pop	{r4, pc}

0801f62e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f62e:	b510      	push	{r4, lr}
 801f630:	4604      	mov	r4, r0
 801f632:	2104      	movs	r1, #4
 801f634:	f008 fff9 	bl	802862a <_ZdlPvj>
 801f638:	4620      	mov	r0, r4
 801f63a:	bd10      	pop	{r4, pc}

0801f63c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f63c:	b510      	push	{r4, lr}
 801f63e:	4604      	mov	r4, r0
 801f640:	2104      	movs	r1, #4
 801f642:	f008 fff2 	bl	802862a <_ZdlPvj>
 801f646:	4620      	mov	r0, r4
 801f648:	bd10      	pop	{r4, pc}

0801f64a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f64a:	b510      	push	{r4, lr}
 801f64c:	4604      	mov	r4, r0
 801f64e:	2104      	movs	r1, #4
 801f650:	f008 ffeb 	bl	802862a <_ZdlPvj>
 801f654:	4620      	mov	r0, r4
 801f656:	bd10      	pop	{r4, pc}

0801f658 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f658:	b510      	push	{r4, lr}
 801f65a:	4604      	mov	r4, r0
 801f65c:	2104      	movs	r1, #4
 801f65e:	f008 ffe4 	bl	802862a <_ZdlPvj>
 801f662:	4620      	mov	r0, r4
 801f664:	bd10      	pop	{r4, pc}

0801f666 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f666:	b510      	push	{r4, lr}
 801f668:	4604      	mov	r4, r0
 801f66a:	2104      	movs	r1, #4
 801f66c:	f008 ffdd 	bl	802862a <_ZdlPvj>
 801f670:	4620      	mov	r0, r4
 801f672:	bd10      	pop	{r4, pc}

0801f674 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801f674:	b510      	push	{r4, lr}
 801f676:	4604      	mov	r4, r0
 801f678:	2104      	movs	r1, #4
 801f67a:	f008 ffd6 	bl	802862a <_ZdlPvj>
 801f67e:	4620      	mov	r0, r4
 801f680:	bd10      	pop	{r4, pc}

0801f682 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801f682:	b510      	push	{r4, lr}
 801f684:	4604      	mov	r4, r0
 801f686:	2104      	movs	r1, #4
 801f688:	f008 ffcf 	bl	802862a <_ZdlPvj>
 801f68c:	4620      	mov	r0, r4
 801f68e:	bd10      	pop	{r4, pc}

0801f690 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f694:	460d      	mov	r5, r1
 801f696:	b087      	sub	sp, #28
 801f698:	4614      	mov	r4, r2
 801f69a:	4698      	mov	r8, r3
 801f69c:	b333      	cbz	r3, 801f6ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f69e:	4608      	mov	r0, r1
 801f6a0:	f7f7 fa0d 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 801f6a4:	bb10      	cbnz	r0, 801f6ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f6a6:	6828      	ldr	r0, [r5, #0]
 801f6a8:	ab04      	add	r3, sp, #16
 801f6aa:	6869      	ldr	r1, [r5, #4]
 801f6ac:	4e72      	ldr	r6, [pc, #456]	; (801f878 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 801f6ae:	c303      	stmia	r3!, {r0, r1}
 801f6b0:	a804      	add	r0, sp, #16
 801f6b2:	f7fa fa7d 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f6b6:	6830      	ldr	r0, [r6, #0]
 801f6b8:	6803      	ldr	r3, [r0, #0]
 801f6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f6bc:	4798      	blx	r3
 801f6be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f6c2:	d016      	beq.n	801f6f2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801f6c4:	f010 0f08 	tst.w	r0, #8
 801f6c8:	d016      	beq.n	801f6f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801f6ca:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 801f6ce:	6830      	ldr	r0, [r6, #0]
 801f6d0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f6d4:	6801      	ldr	r1, [r0, #0]
 801f6d6:	9501      	str	r5, [sp, #4]
 801f6d8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 801f6dc:	f8cd 8008 	str.w	r8, [sp, #8]
 801f6e0:	9500      	str	r5, [sp, #0]
 801f6e2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f6e6:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 801f6e8:	4621      	mov	r1, r4
 801f6ea:	47a8      	blx	r5
 801f6ec:	b007      	add	sp, #28
 801f6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6f2:	f010 0f02 	tst.w	r0, #2
 801f6f6:	e7e7      	b.n	801f6c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 801f6f8:	6830      	ldr	r0, [r6, #0]
 801f6fa:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801f6fe:	6803      	ldr	r3, [r0, #0]
 801f700:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801f704:	6a1b      	ldr	r3, [r3, #32]
 801f706:	4798      	blx	r3
 801f708:	495c      	ldr	r1, [pc, #368]	; (801f87c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 801f70a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801f70e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f712:	880b      	ldrh	r3, [r1, #0]
 801f714:	468e      	mov	lr, r1
 801f716:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801f71a:	fb03 c202 	mla	r2, r3, r2, ip
 801f71e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f722:	fb07 f203 	mul.w	r2, r7, r3
 801f726:	d053      	beq.n	801f7d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 801f728:	fa1f f388 	uxth.w	r3, r8
 801f72c:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 801f730:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 801f734:	ea4f 2814 	mov.w	r8, r4, lsr #8
 801f738:	00e4      	lsls	r4, r4, #3
 801f73a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f73e:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801f742:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 801f746:	b2e4      	uxtb	r4, r4
 801f748:	fb09 f903 	mul.w	r9, r9, r3
 801f74c:	fb08 f803 	mul.w	r8, r8, r3
 801f750:	006d      	lsls	r5, r5, #1
 801f752:	4363      	muls	r3, r4
 801f754:	b2bc      	uxth	r4, r7
 801f756:	4288      	cmp	r0, r1
 801f758:	f080 8088 	bcs.w	801f86c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801f75c:	eb00 0a05 	add.w	sl, r0, r5
 801f760:	4550      	cmp	r0, sl
 801f762:	d22f      	bcs.n	801f7c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 801f764:	8802      	ldrh	r2, [r0, #0]
 801f766:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801f76a:	10d7      	asrs	r7, r2, #3
 801f76c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f770:	00d2      	lsls	r2, r2, #3
 801f772:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f776:	fb1c fc04 	smulbb	ip, ip, r4
 801f77a:	b2d2      	uxtb	r2, r2
 801f77c:	fb17 f704 	smulbb	r7, r7, r4
 801f780:	fb12 f204 	smulbb	r2, r2, r4
 801f784:	44c4      	add	ip, r8
 801f786:	444f      	add	r7, r9
 801f788:	fa1f fc8c 	uxth.w	ip, ip
 801f78c:	441a      	add	r2, r3
 801f78e:	b2bf      	uxth	r7, r7
 801f790:	b292      	uxth	r2, r2
 801f792:	f10c 0b01 	add.w	fp, ip, #1
 801f796:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f79a:	f102 0b01 	add.w	fp, r2, #1
 801f79e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f7a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f7a6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f7aa:	ea4c 0202 	orr.w	r2, ip, r2
 801f7ae:	f107 0c01 	add.w	ip, r7, #1
 801f7b2:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f7b6:	097f      	lsrs	r7, r7, #5
 801f7b8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f7bc:	433a      	orrs	r2, r7
 801f7be:	f820 2b02 	strh.w	r2, [r0], #2
 801f7c2:	e7cd      	b.n	801f760 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 801f7c4:	f8be 2000 	ldrh.w	r2, [lr]
 801f7c8:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 801f7cc:	4410      	add	r0, r2
 801f7ce:	e7c2      	b.n	801f756 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 801f7d0:	07db      	lsls	r3, r3, #31
 801f7d2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f7d6:	d50e      	bpl.n	801f7f6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 801f7d8:	006d      	lsls	r5, r5, #1
 801f7da:	4290      	cmp	r0, r2
 801f7dc:	d246      	bcs.n	801f86c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801f7de:	1943      	adds	r3, r0, r5
 801f7e0:	4298      	cmp	r0, r3
 801f7e2:	d202      	bcs.n	801f7ea <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 801f7e4:	f820 4b02 	strh.w	r4, [r0], #2
 801f7e8:	e7fa      	b.n	801f7e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 801f7ea:	f8be 3000 	ldrh.w	r3, [lr]
 801f7ee:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 801f7f2:	4418      	add	r0, r3
 801f7f4:	e7f1      	b.n	801f7da <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 801f7f6:	0787      	lsls	r7, r0, #30
 801f7f8:	462b      	mov	r3, r5
 801f7fa:	d00a      	beq.n	801f812 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 801f7fc:	4603      	mov	r3, r0
 801f7fe:	4293      	cmp	r3, r2
 801f800:	d205      	bcs.n	801f80e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 801f802:	801c      	strh	r4, [r3, #0]
 801f804:	f8be 1000 	ldrh.w	r1, [lr]
 801f808:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801f80c:	e7f7      	b.n	801f7fe <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801f80e:	3002      	adds	r0, #2
 801f810:	1e6b      	subs	r3, r5, #1
 801f812:	07dd      	lsls	r5, r3, #31
 801f814:	d50d      	bpl.n	801f832 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 801f816:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801f81a:	3901      	subs	r1, #1
 801f81c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801f820:	4291      	cmp	r1, r2
 801f822:	d205      	bcs.n	801f830 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 801f824:	800c      	strh	r4, [r1, #0]
 801f826:	f8be 5000 	ldrh.w	r5, [lr]
 801f82a:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 801f82e:	e7f7      	b.n	801f820 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 801f830:	3b01      	subs	r3, #1
 801f832:	b1db      	cbz	r3, 801f86c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801f834:	b2a1      	uxth	r1, r4
 801f836:	105b      	asrs	r3, r3, #1
 801f838:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 801f83c:	009b      	lsls	r3, r3, #2
 801f83e:	4290      	cmp	r0, r2
 801f840:	d214      	bcs.n	801f86c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801f842:	0781      	lsls	r1, r0, #30
 801f844:	d006      	beq.n	801f854 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 801f846:	4b0e      	ldr	r3, [pc, #56]	; (801f880 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 801f848:	f44f 7162 	mov.w	r1, #904	; 0x388
 801f84c:	4a0d      	ldr	r2, [pc, #52]	; (801f884 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 801f84e:	480e      	ldr	r0, [pc, #56]	; (801f888 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 801f850:	f008 ff1a 	bl	8028688 <__assert_func>
 801f854:	18c5      	adds	r5, r0, r3
 801f856:	4601      	mov	r1, r0
 801f858:	42a9      	cmp	r1, r5
 801f85a:	d202      	bcs.n	801f862 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 801f85c:	f841 4b04 	str.w	r4, [r1], #4
 801f860:	e7fa      	b.n	801f858 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 801f862:	f8be 1000 	ldrh.w	r1, [lr]
 801f866:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f86a:	e7e8      	b.n	801f83e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 801f86c:	6830      	ldr	r0, [r6, #0]
 801f86e:	6803      	ldr	r3, [r0, #0]
 801f870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f872:	4798      	blx	r3
 801f874:	e73a      	b.n	801f6ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f876:	bf00      	nop
 801f878:	200057e0 	.word	0x200057e0
 801f87c:	200057da 	.word	0x200057da
 801f880:	0802cee8 	.word	0x0802cee8
 801f884:	0802d6a0 	.word	0x0802d6a0
 801f888:	0802cf17 	.word	0x0802cf17

0801f88c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f890:	4f97      	ldr	r7, [pc, #604]	; (801faf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801f892:	4616      	mov	r6, r2
 801f894:	b08f      	sub	sp, #60	; 0x3c
 801f896:	4604      	mov	r4, r0
 801f898:	683a      	ldr	r2, [r7, #0]
 801f89a:	4689      	mov	r9, r1
 801f89c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801f8a0:	2a02      	cmp	r2, #2
 801f8a2:	d106      	bne.n	801f8b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801f8a4:	4b93      	ldr	r3, [pc, #588]	; (801faf4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801f8a6:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 801f8aa:	4a93      	ldr	r2, [pc, #588]	; (801faf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801f8ac:	4893      	ldr	r0, [pc, #588]	; (801fafc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801f8ae:	f008 feeb 	bl	8028688 <__assert_func>
 801f8b2:	ad0e      	add	r5, sp, #56	; 0x38
 801f8b4:	f825 3d24 	strh.w	r3, [r5, #-36]!
 801f8b8:	4628      	mov	r0, r5
 801f8ba:	f7fd fa4d 	bl	801cd58 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f8be:	6823      	ldr	r3, [r4, #0]
 801f8c0:	4680      	mov	r8, r0
 801f8c2:	4620      	mov	r0, r4
 801f8c4:	6a1b      	ldr	r3, [r3, #32]
 801f8c6:	4798      	blx	r3
 801f8c8:	4580      	cmp	r8, r0
 801f8ca:	d004      	beq.n	801f8d6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801f8cc:	4b8c      	ldr	r3, [pc, #560]	; (801fb00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801f8ce:	f240 21ca 	movw	r1, #714	; 0x2ca
 801f8d2:	4a89      	ldr	r2, [pc, #548]	; (801faf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801f8d4:	e7ea      	b.n	801f8ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f8d6:	4628      	mov	r0, r5
 801f8d8:	f7fd f9b4 	bl	801cc44 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f8dc:	4680      	mov	r8, r0
 801f8de:	b920      	cbnz	r0, 801f8ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801f8e0:	4b88      	ldr	r3, [pc, #544]	; (801fb04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801f8e2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f8e6:	4a84      	ldr	r2, [pc, #528]	; (801faf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801f8e8:	e7e0      	b.n	801f8ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f8ea:	6830      	ldr	r0, [r6, #0]
 801f8ec:	ab06      	add	r3, sp, #24
 801f8ee:	6871      	ldr	r1, [r6, #4]
 801f8f0:	f10d 0b20 	add.w	fp, sp, #32
 801f8f4:	f9b6 a000 	ldrsh.w	sl, [r6]
 801f8f8:	c303      	stmia	r3!, {r0, r1}
 801f8fa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f8fe:	ab08      	add	r3, sp, #32
 801f900:	f8d9 0000 	ldr.w	r0, [r9]
 801f904:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801f908:	c303      	stmia	r3!, {r0, r1}
 801f90a:	4628      	mov	r0, r5
 801f90c:	f7fd f892 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f910:	4606      	mov	r6, r0
 801f912:	4628      	mov	r0, r5
 801f914:	4d7c      	ldr	r5, [pc, #496]	; (801fb08 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801f916:	f7fd f8c7 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f91a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801f91e:	a806      	add	r0, sp, #24
 801f920:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801f924:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801f928:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801f92c:	f7fa f940 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f930:	4658      	mov	r0, fp
 801f932:	f7fa f93d 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f936:	a80a      	add	r0, sp, #40	; 0x28
 801f938:	f7fa f93a 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f93c:	4b73      	ldr	r3, [pc, #460]	; (801fb0c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801f93e:	2100      	movs	r1, #0
 801f940:	f9b5 2000 	ldrsh.w	r2, [r5]
 801f944:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f948:	4658      	mov	r0, fp
 801f94a:	910c      	str	r1, [sp, #48]	; 0x30
 801f94c:	a90c      	add	r1, sp, #48	; 0x30
 801f94e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801f952:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801f956:	f7f7 f86f 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 801f95a:	4658      	mov	r0, fp
 801f95c:	f7f7 f8af 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 801f960:	2800      	cmp	r0, #0
 801f962:	f040 809a 	bne.w	801fa9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801f966:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801f96a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801f96e:	4288      	cmp	r0, r1
 801f970:	db38      	blt.n	801f9e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801f972:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801f976:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801f97a:	429a      	cmp	r2, r3
 801f97c:	db32      	blt.n	801f9e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801f97e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801f982:	4430      	add	r0, r6
 801f984:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f988:	4431      	add	r1, r6
 801f98a:	b200      	sxth	r0, r0
 801f98c:	b209      	sxth	r1, r1
 801f98e:	4288      	cmp	r0, r1
 801f990:	dc28      	bgt.n	801f9e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801f992:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801f996:	440a      	add	r2, r1
 801f998:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801f99c:	440b      	add	r3, r1
 801f99e:	b212      	sxth	r2, r2
 801f9a0:	b21b      	sxth	r3, r3
 801f9a2:	429a      	cmp	r2, r3
 801f9a4:	dc1e      	bgt.n	801f9e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801f9a6:	6823      	ldr	r3, [r4, #0]
 801f9a8:	4620      	mov	r0, r4
 801f9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f9ac:	4798      	blx	r3
 801f9ae:	4682      	mov	sl, r0
 801f9b0:	6838      	ldr	r0, [r7, #0]
 801f9b2:	6803      	ldr	r3, [r0, #0]
 801f9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f9b6:	4798      	blx	r3
 801f9b8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801f9bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f9c0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801f9c4:	1a5b      	subs	r3, r3, r1
 801f9c6:	b29b      	uxth	r3, r3
 801f9c8:	b21c      	sxth	r4, r3
 801f9ca:	2c00      	cmp	r4, #0
 801f9cc:	dc0f      	bgt.n	801f9ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 801f9ce:	bf18      	it	ne
 801f9d0:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801f9d4:	4644      	mov	r4, r8
 801f9d6:	bf1e      	ittt	ne
 801f9d8:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801f9dc:	185b      	addne	r3, r3, r1
 801f9de:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801f9e2:	e009      	b.n	801f9f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 801f9e4:	4b4a      	ldr	r3, [pc, #296]	; (801fb10 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801f9e6:	f240 21da 	movw	r1, #730	; 0x2da
 801f9ea:	4a43      	ldr	r2, [pc, #268]	; (801faf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801f9ec:	e75e      	b.n	801f8ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f9ee:	1ad3      	subs	r3, r2, r3
 801f9f0:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801f9f4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801f9f8:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801f9fc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801fa00:	1b9b      	subs	r3, r3, r6
 801fa02:	b29b      	uxth	r3, r3
 801fa04:	b219      	sxth	r1, r3
 801fa06:	2900      	cmp	r1, #0
 801fa08:	dd4b      	ble.n	801faa2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 801fa0a:	4351      	muls	r1, r2
 801fa0c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801fa10:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801fa14:	1acb      	subs	r3, r1, r3
 801fa16:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801fa1a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801fa1e:	2e00      	cmp	r6, #0
 801fa20:	dd3b      	ble.n	801fa9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801fa22:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801fa26:	2b00      	cmp	r3, #0
 801fa28:	dd37      	ble.n	801fa9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801fa2a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801fa2e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801fa32:	fb0a f90c 	mul.w	r9, sl, ip
 801fa36:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801fa3a:	4481      	add	r9, r0
 801fa3c:	8828      	ldrh	r0, [r5, #0]
 801fa3e:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801fa42:	1a41      	subs	r1, r0, r1
 801fa44:	42ae      	cmp	r6, r5
 801fa46:	bfa8      	it	ge
 801fa48:	462e      	movge	r6, r5
 801fa4a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801fa4e:	428e      	cmp	r6, r1
 801fa50:	bfa8      	it	ge
 801fa52:	460e      	movge	r6, r1
 801fa54:	429d      	cmp	r5, r3
 801fa56:	bfa8      	it	ge
 801fa58:	461d      	movge	r5, r3
 801fa5a:	4b2c      	ldr	r3, [pc, #176]	; (801fb0c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801fa5c:	881b      	ldrh	r3, [r3, #0]
 801fa5e:	eba3 030c 	sub.w	r3, r3, ip
 801fa62:	429d      	cmp	r5, r3
 801fa64:	bfa8      	it	ge
 801fa66:	461d      	movge	r5, r3
 801fa68:	42b0      	cmp	r0, r6
 801fa6a:	d12c      	bne.n	801fac6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801fa6c:	4290      	cmp	r0, r2
 801fa6e:	d12a      	bne.n	801fac6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801fa70:	6838      	ldr	r0, [r7, #0]
 801fa72:	9203      	str	r2, [sp, #12]
 801fa74:	6803      	ldr	r3, [r0, #0]
 801fa76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fa78:	4798      	blx	r3
 801fa7a:	07c3      	lsls	r3, r0, #31
 801fa7c:	d51a      	bpl.n	801fab4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fa7e:	9a03      	ldr	r2, [sp, #12]
 801fa80:	6838      	ldr	r0, [r7, #0]
 801fa82:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 801fa86:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801fa8a:	6803      	ldr	r3, [r0, #0]
 801fa8c:	9200      	str	r2, [sp, #0]
 801fa8e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801fa90:	4623      	mov	r3, r4
 801fa92:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801fa96:	47a8      	blx	r5
 801fa98:	4680      	mov	r8, r0
 801fa9a:	4640      	mov	r0, r8
 801fa9c:	b00f      	add	sp, #60	; 0x3c
 801fa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faa2:	bf1f      	itttt	ne
 801faa4:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 801faa8:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801faac:	185b      	addne	r3, r3, r1
 801faae:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801fab2:	e7b2      	b.n	801fa1a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 801fab4:	6838      	ldr	r0, [r7, #0]
 801fab6:	464a      	mov	r2, r9
 801fab8:	4621      	mov	r1, r4
 801faba:	6803      	ldr	r3, [r0, #0]
 801fabc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801fabe:	fb05 f30a 	mul.w	r3, r5, sl
 801fac2:	47b0      	blx	r6
 801fac4:	e7e9      	b.n	801fa9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801fac6:	4355      	muls	r5, r2
 801fac8:	0076      	lsls	r6, r6, #1
 801faca:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801face:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801fad2:	9303      	str	r3, [sp, #12]
 801fad4:	9b03      	ldr	r3, [sp, #12]
 801fad6:	429c      	cmp	r4, r3
 801fad8:	d2df      	bcs.n	801fa9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801fada:	6838      	ldr	r0, [r7, #0]
 801fadc:	464a      	mov	r2, r9
 801fade:	4621      	mov	r1, r4
 801fae0:	44d1      	add	r9, sl
 801fae2:	6803      	ldr	r3, [r0, #0]
 801fae4:	445c      	add	r4, fp
 801fae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fae8:	461d      	mov	r5, r3
 801faea:	4633      	mov	r3, r6
 801faec:	47a8      	blx	r5
 801faee:	e7f1      	b.n	801fad4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 801faf0:	200057e0 	.word	0x200057e0
 801faf4:	0802cd0e 	.word	0x0802cd0e
 801faf8:	0802d583 	.word	0x0802d583
 801fafc:	0802cf17 	.word	0x0802cf17
 801fb00:	0802cdc0 	.word	0x0802cdc0
 801fb04:	0802ce15 	.word	0x0802ce15
 801fb08:	200057da 	.word	0x200057da
 801fb0c:	200057dc 	.word	0x200057dc
 801fb10:	0802ce53 	.word	0x0802ce53

0801fb14 <_ZN8touchgfx8LCD16bppC1Ev>:
 801fb14:	2200      	movs	r2, #0
 801fb16:	4910      	ldr	r1, [pc, #64]	; (801fb58 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801fb18:	6042      	str	r2, [r0, #4]
 801fb1a:	6001      	str	r1, [r0, #0]
 801fb1c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801fb20:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801fb24:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801fb28:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801fb2c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801fb30:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801fb34:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801fb38:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801fb3c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801fb40:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801fb44:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801fb48:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801fb4c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801fb50:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801fb54:	4770      	bx	lr
 801fb56:	bf00      	nop
 801fb58:	0802d1f8 	.word	0x0802d1f8

0801fb5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801fb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb60:	b08b      	sub	sp, #44	; 0x2c
 801fb62:	460d      	mov	r5, r1
 801fb64:	4604      	mov	r4, r0
 801fb66:	4699      	mov	r9, r3
 801fb68:	6808      	ldr	r0, [r1, #0]
 801fb6a:	ab06      	add	r3, sp, #24
 801fb6c:	6849      	ldr	r1, [r1, #4]
 801fb6e:	c303      	stmia	r3!, {r0, r1}
 801fb70:	6810      	ldr	r0, [r2, #0]
 801fb72:	ab08      	add	r3, sp, #32
 801fb74:	6851      	ldr	r1, [r2, #4]
 801fb76:	c303      	stmia	r3!, {r0, r1}
 801fb78:	a806      	add	r0, sp, #24
 801fb7a:	f7fa f819 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fb7e:	4629      	mov	r1, r5
 801fb80:	a808      	add	r0, sp, #32
 801fb82:	4d63      	ldr	r5, [pc, #396]	; (801fd10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801fb84:	f7f9 fffc 	bl	8019b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fb88:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801fb8c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801fb90:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801fb94:	6828      	ldr	r0, [r5, #0]
 801fb96:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fb9a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801fb9e:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801fba2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801fba6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801fbaa:	440a      	add	r2, r1
 801fbac:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fbb0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801fbb4:	4413      	add	r3, r2
 801fbb6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801fbba:	6803      	ldr	r3, [r0, #0]
 801fbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fbbe:	4798      	blx	r3
 801fbc0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fbc4:	d118      	bne.n	801fbf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801fbc6:	f010 0f20 	tst.w	r0, #32
 801fbca:	6828      	ldr	r0, [r5, #0]
 801fbcc:	d017      	beq.n	801fbfe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801fbce:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801fbd2:	b2b6      	uxth	r6, r6
 801fbd4:	6801      	ldr	r1, [r0, #0]
 801fbd6:	9502      	str	r5, [sp, #8]
 801fbd8:	fa1f f588 	uxth.w	r5, r8
 801fbdc:	f8cd 900c 	str.w	r9, [sp, #12]
 801fbe0:	9601      	str	r6, [sp, #4]
 801fbe2:	9500      	str	r5, [sp, #0]
 801fbe4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801fbe8:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801fbea:	4621      	mov	r1, r4
 801fbec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fbf0:	47a8      	blx	r5
 801fbf2:	b00b      	add	sp, #44	; 0x2c
 801fbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbf8:	f010 0f40 	tst.w	r0, #64	; 0x40
 801fbfc:	e7e5      	b.n	801fbca <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801fbfe:	6803      	ldr	r3, [r0, #0]
 801fc00:	6a1b      	ldr	r3, [r3, #32]
 801fc02:	4798      	blx	r3
 801fc04:	4a43      	ldr	r2, [pc, #268]	; (801fd14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801fc06:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801fc0a:	f8b2 e000 	ldrh.w	lr, [r2]
 801fc0e:	4692      	mov	sl, r2
 801fc10:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801fc14:	fb0e 1303 	mla	r3, lr, r3, r1
 801fc18:	fb0e fe06 	mul.w	lr, lr, r6
 801fc1c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fc20:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801fc24:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801fc28:	9305      	str	r3, [sp, #20]
 801fc2a:	4570      	cmp	r0, lr
 801fc2c:	d26a      	bcs.n	801fd04 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 801fc2e:	9b05      	ldr	r3, [sp, #20]
 801fc30:	4621      	mov	r1, r4
 801fc32:	eb00 0b03 	add.w	fp, r0, r3
 801fc36:	4558      	cmp	r0, fp
 801fc38:	d257      	bcs.n	801fcea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 801fc3a:	f851 4b04 	ldr.w	r4, [r1], #4
 801fc3e:	0e22      	lsrs	r2, r4, #24
 801fc40:	d012      	beq.n	801fc68 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801fc42:	2aff      	cmp	r2, #255	; 0xff
 801fc44:	ea4f 2714 	mov.w	r7, r4, lsr #8
 801fc48:	d110      	bne.n	801fc6c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801fc4a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fc4e:	d10d      	bne.n	801fc6c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801fc50:	0963      	lsrs	r3, r4, #5
 801fc52:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801fc56:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fc5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fc5e:	f027 0707 	bic.w	r7, r7, #7
 801fc62:	431f      	orrs	r7, r3
 801fc64:	433c      	orrs	r4, r7
 801fc66:	8004      	strh	r4, [r0, #0]
 801fc68:	3002      	adds	r0, #2
 801fc6a:	e7e4      	b.n	801fc36 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 801fc6c:	fb09 f302 	mul.w	r3, r9, r2
 801fc70:	f8b0 c000 	ldrh.w	ip, [r0]
 801fc74:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801fc78:	b2ff      	uxtb	r7, r7
 801fc7a:	1c5a      	adds	r2, r3, #1
 801fc7c:	ea4f 262c 	mov.w	r6, ip, asr #8
 801fc80:	b2e4      	uxtb	r4, r4
 801fc82:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801fc86:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fc8a:	1212      	asrs	r2, r2, #8
 801fc8c:	b293      	uxth	r3, r2
 801fc8e:	43d2      	mvns	r2, r2
 801fc90:	fb15 f503 	smulbb	r5, r5, r3
 801fc94:	b2d2      	uxtb	r2, r2
 801fc96:	fb17 f703 	smulbb	r7, r7, r3
 801fc9a:	fb06 5602 	mla	r6, r6, r2, r5
 801fc9e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801fca2:	fb14 f403 	smulbb	r4, r4, r3
 801fca6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fcaa:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fcae:	b2b6      	uxth	r6, r6
 801fcb0:	fa5f fc8c 	uxtb.w	ip, ip
 801fcb4:	fb05 7702 	mla	r7, r5, r2, r7
 801fcb8:	1c73      	adds	r3, r6, #1
 801fcba:	fb0c 4202 	mla	r2, ip, r2, r4
 801fcbe:	b2bf      	uxth	r7, r7
 801fcc0:	b292      	uxth	r2, r2
 801fcc2:	1c7d      	adds	r5, r7, #1
 801fcc4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801fcc8:	f102 0c01 	add.w	ip, r2, #1
 801fccc:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801fcd0:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801fcd4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801fcd8:	097f      	lsrs	r7, r7, #5
 801fcda:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fcde:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fce2:	4316      	orrs	r6, r2
 801fce4:	433e      	orrs	r6, r7
 801fce6:	8006      	strh	r6, [r0, #0]
 801fce8:	e7be      	b.n	801fc68 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801fcea:	f8ba 3000 	ldrh.w	r3, [sl]
 801fcee:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 801fcf2:	eba3 0308 	sub.w	r3, r3, r8
 801fcf6:	eba4 0408 	sub.w	r4, r4, r8
 801fcfa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fcfe:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801fd02:	e792      	b.n	801fc2a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801fd04:	4b02      	ldr	r3, [pc, #8]	; (801fd10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801fd06:	6818      	ldr	r0, [r3, #0]
 801fd08:	6803      	ldr	r3, [r0, #0]
 801fd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd0c:	4798      	blx	r3
 801fd0e:	e770      	b.n	801fbf2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801fd10:	200057e0 	.word	0x200057e0
 801fd14:	200057da 	.word	0x200057da

0801fd18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801fd18:	b570      	push	{r4, r5, r6, lr}
 801fd1a:	9d04      	ldr	r5, [sp, #16]
 801fd1c:	460c      	mov	r4, r1
 801fd1e:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801fd22:	4619      	mov	r1, r3
 801fd24:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801fd28:	2a0d      	cmp	r2, #13
 801fd2a:	d820      	bhi.n	801fd6e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 801fd2c:	e8df f002 	tbb	[pc, r2]
 801fd30:	18121807 	.word	0x18121807
 801fd34:	18181818 	.word	0x18181818
 801fd38:	18181818 	.word	0x18181818
 801fd3c:	1818      	.short	0x1818
 801fd3e:	6802      	ldr	r2, [r0, #0]
 801fd40:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801fd44:	68d6      	ldr	r6, [r2, #12]
 801fd46:	462b      	mov	r3, r5
 801fd48:	460a      	mov	r2, r1
 801fd4a:	4621      	mov	r1, r4
 801fd4c:	46b4      	mov	ip, r6
 801fd4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fd52:	4760      	bx	ip
 801fd54:	462a      	mov	r2, r5
 801fd56:	4620      	mov	r0, r4
 801fd58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fd5c:	f7ff befe 	b.w	801fb5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801fd60:	4b03      	ldr	r3, [pc, #12]	; (801fd70 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801fd62:	f240 21c1 	movw	r1, #705	; 0x2c1
 801fd66:	4a03      	ldr	r2, [pc, #12]	; (801fd74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801fd68:	4803      	ldr	r0, [pc, #12]	; (801fd78 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801fd6a:	f008 fc8d 	bl	8028688 <__assert_func>
 801fd6e:	bd70      	pop	{r4, r5, r6, pc}
 801fd70:	0802ceb3 	.word	0x0802ceb3
 801fd74:	0802d609 	.word	0x0802d609
 801fd78:	0802cf17 	.word	0x0802cf17

0801fd7c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801fd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd80:	b093      	sub	sp, #76	; 0x4c
 801fd82:	880f      	ldrh	r7, [r1, #0]
 801fd84:	4604      	mov	r4, r0
 801fd86:	4688      	mov	r8, r1
 801fd88:	4616      	mov	r6, r2
 801fd8a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801fd8e:	b12f      	cbz	r7, 801fd9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801fd90:	4b6f      	ldr	r3, [pc, #444]	; (801ff50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801fd92:	21e2      	movs	r1, #226	; 0xe2
 801fd94:	4a6f      	ldr	r2, [pc, #444]	; (801ff54 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801fd96:	4870      	ldr	r0, [pc, #448]	; (801ff58 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801fd98:	f008 fc76 	bl	8028688 <__assert_func>
 801fd9c:	6810      	ldr	r0, [r2, #0]
 801fd9e:	ad0e      	add	r5, sp, #56	; 0x38
 801fda0:	6851      	ldr	r1, [r2, #4]
 801fda2:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801ff60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 801fda6:	c503      	stmia	r5!, {r0, r1}
 801fda8:	6818      	ldr	r0, [r3, #0]
 801fdaa:	ad10      	add	r5, sp, #64	; 0x40
 801fdac:	6859      	ldr	r1, [r3, #4]
 801fdae:	c503      	stmia	r5!, {r0, r1}
 801fdb0:	a80e      	add	r0, sp, #56	; 0x38
 801fdb2:	f7f9 fefd 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fdb6:	4631      	mov	r1, r6
 801fdb8:	a810      	add	r0, sp, #64	; 0x40
 801fdba:	4e68      	ldr	r6, [pc, #416]	; (801ff5c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801fdbc:	f7f9 fee0 	bl	8019b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fdc0:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801fdc4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801fdc8:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801fdcc:	f8db 0000 	ldr.w	r0, [fp]
 801fdd0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fdd4:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801fdd8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801fddc:	440c      	add	r4, r1
 801fdde:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801fde2:	440a      	add	r2, r1
 801fde4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801fde8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801fdec:	4413      	add	r3, r2
 801fdee:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801fdf2:	6803      	ldr	r3, [r0, #0]
 801fdf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801fdf8:	4798      	blx	r3
 801fdfa:	2801      	cmp	r0, #1
 801fdfc:	d11d      	bne.n	801fe3a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801fdfe:	220b      	movs	r2, #11
 801fe00:	9708      	str	r7, [sp, #32]
 801fe02:	b2ad      	uxth	r5, r5
 801fe04:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801fe08:	9207      	str	r2, [sp, #28]
 801fe0a:	4621      	mov	r1, r4
 801fe0c:	8832      	ldrh	r2, [r6, #0]
 801fe0e:	f8cd a010 	str.w	sl, [sp, #16]
 801fe12:	9502      	str	r5, [sp, #8]
 801fe14:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801fe18:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801fe1c:	9203      	str	r2, [sp, #12]
 801fe1e:	fa1f f289 	uxth.w	r2, r9
 801fe22:	9201      	str	r2, [sp, #4]
 801fe24:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801fe28:	9200      	str	r2, [sp, #0]
 801fe2a:	4642      	mov	r2, r8
 801fe2c:	f8db 0000 	ldr.w	r0, [fp]
 801fe30:	f7f7 fa4e 	bl	80172d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801fe34:	b013      	add	sp, #76	; 0x4c
 801fe36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe3a:	f8db 0000 	ldr.w	r0, [fp]
 801fe3e:	6803      	ldr	r3, [r0, #0]
 801fe40:	6a1b      	ldr	r3, [r3, #32]
 801fe42:	4798      	blx	r3
 801fe44:	8832      	ldrh	r2, [r6, #0]
 801fe46:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801fe4a:	f04f 0e04 	mov.w	lr, #4
 801fe4e:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801fe52:	4355      	muls	r5, r2
 801fe54:	960d      	str	r6, [sp, #52]	; 0x34
 801fe56:	fb02 1303 	mla	r3, r2, r3, r1
 801fe5a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fe5e:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 801fe62:	930c      	str	r3, [sp, #48]	; 0x30
 801fe64:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801fe68:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe6c:	4298      	cmp	r0, r3
 801fe6e:	d269      	bcs.n	801ff44 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801fe70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe72:	4621      	mov	r1, r4
 801fe74:	eb00 0b03 	add.w	fp, r0, r3
 801fe78:	4558      	cmp	r0, fp
 801fe7a:	460b      	mov	r3, r1
 801fe7c:	d256      	bcs.n	801ff2c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801fe7e:	781b      	ldrb	r3, [r3, #0]
 801fe80:	3101      	adds	r1, #1
 801fe82:	fb1e e303 	smlabb	r3, lr, r3, lr
 801fe86:	f858 2003 	ldr.w	r2, [r8, r3]
 801fe8a:	0e14      	lsrs	r4, r2, #24
 801fe8c:	d012      	beq.n	801feb4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801fe8e:	2cff      	cmp	r4, #255	; 0xff
 801fe90:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801fe94:	d110      	bne.n	801feb8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801fe96:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fe9a:	d10d      	bne.n	801feb8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801fe9c:	0953      	lsrs	r3, r2, #5
 801fe9e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fea2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fea6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801feaa:	f026 0607 	bic.w	r6, r6, #7
 801feae:	431e      	orrs	r6, r3
 801feb0:	4332      	orrs	r2, r6
 801feb2:	8002      	strh	r2, [r0, #0]
 801feb4:	3002      	adds	r0, #2
 801feb6:	e7df      	b.n	801fe78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 801feb8:	fb0a f404 	mul.w	r4, sl, r4
 801febc:	8807      	ldrh	r7, [r0, #0]
 801febe:	b2f6      	uxtb	r6, r6
 801fec0:	1c63      	adds	r3, r4, #1
 801fec2:	123d      	asrs	r5, r7, #8
 801fec4:	eb03 2324 	add.w	r3, r3, r4, asr #8
 801fec8:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801fecc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801fed0:	b2d2      	uxtb	r2, r2
 801fed2:	121b      	asrs	r3, r3, #8
 801fed4:	fa1f fc83 	uxth.w	ip, r3
 801fed8:	43db      	mvns	r3, r3
 801feda:	fb14 f40c 	smulbb	r4, r4, ip
 801fede:	b2db      	uxtb	r3, r3
 801fee0:	fb12 f20c 	smulbb	r2, r2, ip
 801fee4:	fb05 4503 	mla	r5, r5, r3, r4
 801fee8:	10fc      	asrs	r4, r7, #3
 801feea:	fb16 f60c 	smulbb	r6, r6, ip
 801feee:	00ff      	lsls	r7, r7, #3
 801fef0:	b2ad      	uxth	r5, r5
 801fef2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801fef6:	b2ff      	uxtb	r7, r7
 801fef8:	fb04 6603 	mla	r6, r4, r3, r6
 801fefc:	fb07 2203 	mla	r2, r7, r3, r2
 801ff00:	1c6b      	adds	r3, r5, #1
 801ff02:	b2b6      	uxth	r6, r6
 801ff04:	b292      	uxth	r2, r2
 801ff06:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ff0a:	1c54      	adds	r4, r2, #1
 801ff0c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ff10:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801ff14:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ff18:	4325      	orrs	r5, r4
 801ff1a:	1c74      	adds	r4, r6, #1
 801ff1c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801ff20:	0976      	lsrs	r6, r6, #5
 801ff22:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ff26:	4335      	orrs	r5, r6
 801ff28:	8005      	strh	r5, [r0, #0]
 801ff2a:	e7c3      	b.n	801feb4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801ff2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff2e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801ff32:	881b      	ldrh	r3, [r3, #0]
 801ff34:	eba4 0409 	sub.w	r4, r4, r9
 801ff38:	eba3 0309 	sub.w	r3, r3, r9
 801ff3c:	440c      	add	r4, r1
 801ff3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ff42:	e792      	b.n	801fe6a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801ff44:	4b06      	ldr	r3, [pc, #24]	; (801ff60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801ff46:	6818      	ldr	r0, [r3, #0]
 801ff48:	6803      	ldr	r3, [r0, #0]
 801ff4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff4c:	4798      	blx	r3
 801ff4e:	e771      	b.n	801fe34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801ff50:	0802ccbe 	.word	0x0802ccbe
 801ff54:	0802d3da 	.word	0x0802d3da
 801ff58:	0802cf17 	.word	0x0802cf17
 801ff5c:	200057da 	.word	0x200057da
 801ff60:	200057e0 	.word	0x200057e0

0801ff64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801ff64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff68:	4614      	mov	r4, r2
 801ff6a:	880a      	ldrh	r2, [r1, #0]
 801ff6c:	b091      	sub	sp, #68	; 0x44
 801ff6e:	4607      	mov	r7, r0
 801ff70:	2a02      	cmp	r2, #2
 801ff72:	4689      	mov	r9, r1
 801ff74:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 801ff78:	d006      	beq.n	801ff88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801ff7a:	4b77      	ldr	r3, [pc, #476]	; (8020158 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 801ff7c:	f240 113b 	movw	r1, #315	; 0x13b
 801ff80:	4a76      	ldr	r2, [pc, #472]	; (802015c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801ff82:	4877      	ldr	r0, [pc, #476]	; (8020160 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 801ff84:	f008 fb80 	bl	8028688 <__assert_func>
 801ff88:	2e00      	cmp	r6, #0
 801ff8a:	d04b      	beq.n	8020024 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801ff8c:	6820      	ldr	r0, [r4, #0]
 801ff8e:	ad0c      	add	r5, sp, #48	; 0x30
 801ff90:	6861      	ldr	r1, [r4, #4]
 801ff92:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8020168 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 801ff96:	c503      	stmia	r5!, {r0, r1}
 801ff98:	6818      	ldr	r0, [r3, #0]
 801ff9a:	ad0e      	add	r5, sp, #56	; 0x38
 801ff9c:	6859      	ldr	r1, [r3, #4]
 801ff9e:	c503      	stmia	r5!, {r0, r1}
 801ffa0:	a80c      	add	r0, sp, #48	; 0x30
 801ffa2:	f7f9 fe05 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ffa6:	4621      	mov	r1, r4
 801ffa8:	a80e      	add	r0, sp, #56	; 0x38
 801ffaa:	f7f9 fde9 	bl	8019b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ffae:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ffb2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ffb6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ffba:	f8da 0000 	ldr.w	r0, [sl]
 801ffbe:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ffc2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801ffc6:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801ffca:	187c      	adds	r4, r7, r1
 801ffcc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801ffd0:	4f64      	ldr	r7, [pc, #400]	; (8020164 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801ffd2:	440a      	add	r2, r1
 801ffd4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801ffd8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ffdc:	4413      	add	r3, r2
 801ffde:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ffe2:	6803      	ldr	r3, [r0, #0]
 801ffe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ffe8:	4798      	blx	r3
 801ffea:	2801      	cmp	r0, #1
 801ffec:	d11d      	bne.n	802002a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801ffee:	2200      	movs	r2, #0
 801fff0:	210b      	movs	r1, #11
 801fff2:	b2ad      	uxth	r5, r5
 801fff4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801fff8:	e9cd 1207 	strd	r1, r2, [sp, #28]
 801fffc:	8839      	ldrh	r1, [r7, #0]
 801fffe:	9604      	str	r6, [sp, #16]
 8020000:	9502      	str	r5, [sp, #8]
 8020002:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8020006:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802000a:	4621      	mov	r1, r4
 802000c:	9203      	str	r2, [sp, #12]
 802000e:	fa1f f288 	uxth.w	r2, r8
 8020012:	9201      	str	r2, [sp, #4]
 8020014:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020018:	9200      	str	r2, [sp, #0]
 802001a:	464a      	mov	r2, r9
 802001c:	f8da 0000 	ldr.w	r0, [sl]
 8020020:	f7f7 f956 	bl	80172d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020024:	b011      	add	sp, #68	; 0x44
 8020026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802002a:	f8da 0000 	ldr.w	r0, [sl]
 802002e:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8020032:	6803      	ldr	r3, [r0, #0]
 8020034:	6a1b      	ldr	r3, [r3, #32]
 8020036:	4798      	blx	r3
 8020038:	8839      	ldrh	r1, [r7, #0]
 802003a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802003e:	2eff      	cmp	r6, #255	; 0xff
 8020040:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020044:	fb05 f501 	mul.w	r5, r5, r1
 8020048:	fb01 2303 	mla	r3, r1, r3, r2
 802004c:	f109 0204 	add.w	r2, r9, #4
 8020050:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020054:	d05f      	beq.n	8020116 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 8020056:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 802005a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802005e:	b2b6      	uxth	r6, r6
 8020060:	970b      	str	r7, [sp, #44]	; 0x2c
 8020062:	fa1f f989 	uxth.w	r9, r9
 8020066:	42a8      	cmp	r0, r5
 8020068:	d26f      	bcs.n	802014a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 802006a:	eb00 010b 	add.w	r1, r0, fp
 802006e:	4288      	cmp	r0, r1
 8020070:	4623      	mov	r3, r4
 8020072:	d244      	bcs.n	80200fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 8020074:	8807      	ldrh	r7, [r0, #0]
 8020076:	3401      	adds	r4, #1
 8020078:	781b      	ldrb	r3, [r3, #0]
 802007a:	ea4f 2c27 	mov.w	ip, r7, asr #8
 802007e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020082:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 8020086:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802008a:	00ff      	lsls	r7, r7, #3
 802008c:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8020090:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020094:	fb1c fc09 	smulbb	ip, ip, r9
 8020098:	b2ff      	uxtb	r7, r7
 802009a:	fb1a fa09 	smulbb	sl, sl, r9
 802009e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80200a2:	fb17 f709 	smulbb	r7, r7, r9
 80200a6:	fb0e ce06 	mla	lr, lr, r6, ip
 80200aa:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 80200ae:	00db      	lsls	r3, r3, #3
 80200b0:	fa1f fe8e 	uxth.w	lr, lr
 80200b4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80200b8:	b2db      	uxtb	r3, r3
 80200ba:	fb0c ac06 	mla	ip, ip, r6, sl
 80200be:	f10e 0a01 	add.w	sl, lr, #1
 80200c2:	fb03 7306 	mla	r3, r3, r6, r7
 80200c6:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 80200ca:	b29b      	uxth	r3, r3
 80200cc:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 80200d0:	fa1f fc8c 	uxth.w	ip, ip
 80200d4:	f103 0e01 	add.w	lr, r3, #1
 80200d8:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80200dc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80200e0:	ea4a 0e03 	orr.w	lr, sl, r3
 80200e4:	f10c 0a01 	add.w	sl, ip, #1
 80200e8:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80200ec:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80200f0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80200f4:	ea4e 0e0c 	orr.w	lr, lr, ip
 80200f8:	f820 eb02 	strh.w	lr, [r0], #2
 80200fc:	e7b7      	b.n	802006e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 80200fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020100:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8020104:	881b      	ldrh	r3, [r3, #0]
 8020106:	eba1 0108 	sub.w	r1, r1, r8
 802010a:	eba3 0308 	sub.w	r3, r3, r8
 802010e:	440c      	add	r4, r1
 8020110:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020114:	e7a7      	b.n	8020066 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 8020116:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802011a:	42a8      	cmp	r0, r5
 802011c:	d215      	bcs.n	802014a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 802011e:	eb00 010b 	add.w	r1, r0, fp
 8020122:	4288      	cmp	r0, r1
 8020124:	d206      	bcs.n	8020134 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 8020126:	f814 3b01 	ldrb.w	r3, [r4], #1
 802012a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802012e:	f820 3b02 	strh.w	r3, [r0], #2
 8020132:	e7f6      	b.n	8020122 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 8020134:	883b      	ldrh	r3, [r7, #0]
 8020136:	eba3 0308 	sub.w	r3, r3, r8
 802013a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802013e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020142:	eba3 0308 	sub.w	r3, r3, r8
 8020146:	441c      	add	r4, r3
 8020148:	e7e7      	b.n	802011a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 802014a:	4b07      	ldr	r3, [pc, #28]	; (8020168 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 802014c:	6818      	ldr	r0, [r3, #0]
 802014e:	6803      	ldr	r3, [r0, #0]
 8020150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020152:	4798      	blx	r3
 8020154:	e766      	b.n	8020024 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8020156:	bf00      	nop
 8020158:	0802cb7c 	.word	0x0802cb7c
 802015c:	0802d244 	.word	0x0802d244
 8020160:	0802cf17 	.word	0x0802cf17
 8020164:	200057da 	.word	0x200057da
 8020168:	200057e0 	.word	0x200057e0

0802016c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802016c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020170:	4614      	mov	r4, r2
 8020172:	880a      	ldrh	r2, [r1, #0]
 8020174:	b091      	sub	sp, #68	; 0x44
 8020176:	4606      	mov	r6, r0
 8020178:	2a01      	cmp	r2, #1
 802017a:	4688      	mov	r8, r1
 802017c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8020180:	d006      	beq.n	8020190 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 8020182:	4b7c      	ldr	r3, [pc, #496]	; (8020374 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 8020184:	f240 1197 	movw	r1, #407	; 0x197
 8020188:	4a7b      	ldr	r2, [pc, #492]	; (8020378 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 802018a:	487c      	ldr	r0, [pc, #496]	; (802037c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 802018c:	f008 fa7c 	bl	8028688 <__assert_func>
 8020190:	2f00      	cmp	r7, #0
 8020192:	d04b      	beq.n	802022c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8020194:	6820      	ldr	r0, [r4, #0]
 8020196:	ad0c      	add	r5, sp, #48	; 0x30
 8020198:	6861      	ldr	r1, [r4, #4]
 802019a:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8020388 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 802019e:	c503      	stmia	r5!, {r0, r1}
 80201a0:	6818      	ldr	r0, [r3, #0]
 80201a2:	ad0e      	add	r5, sp, #56	; 0x38
 80201a4:	6859      	ldr	r1, [r3, #4]
 80201a6:	c503      	stmia	r5!, {r0, r1}
 80201a8:	a80c      	add	r0, sp, #48	; 0x30
 80201aa:	f7f9 fd01 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80201ae:	4621      	mov	r1, r4
 80201b0:	a80e      	add	r0, sp, #56	; 0x38
 80201b2:	f7f9 fce5 	bl	8019b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80201b6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80201ba:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80201be:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80201c2:	f8da 0000 	ldr.w	r0, [sl]
 80201c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80201ca:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 80201ce:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 80201d2:	1874      	adds	r4, r6, r1
 80201d4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80201d8:	4e69      	ldr	r6, [pc, #420]	; (8020380 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 80201da:	440a      	add	r2, r1
 80201dc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80201e0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80201e4:	4413      	add	r3, r2
 80201e6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80201ea:	6803      	ldr	r3, [r0, #0]
 80201ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80201f0:	4798      	blx	r3
 80201f2:	2801      	cmp	r0, #1
 80201f4:	d11d      	bne.n	8020232 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 80201f6:	220b      	movs	r2, #11
 80201f8:	2100      	movs	r1, #0
 80201fa:	b2ad      	uxth	r5, r5
 80201fc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020200:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8020204:	8832      	ldrh	r2, [r6, #0]
 8020206:	4621      	mov	r1, r4
 8020208:	9704      	str	r7, [sp, #16]
 802020a:	9501      	str	r5, [sp, #4]
 802020c:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8020210:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8020214:	9203      	str	r2, [sp, #12]
 8020216:	fa1f f289 	uxth.w	r2, r9
 802021a:	9202      	str	r2, [sp, #8]
 802021c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020220:	9200      	str	r2, [sp, #0]
 8020222:	4642      	mov	r2, r8
 8020224:	f8da 0000 	ldr.w	r0, [sl]
 8020228:	f7f7 f852 	bl	80172d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802022c:	b011      	add	sp, #68	; 0x44
 802022e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020232:	f8da 0000 	ldr.w	r0, [sl]
 8020236:	6803      	ldr	r3, [r0, #0]
 8020238:	6a1b      	ldr	r3, [r3, #32]
 802023a:	4798      	blx	r3
 802023c:	8832      	ldrh	r2, [r6, #0]
 802023e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020242:	2fff      	cmp	r7, #255	; 0xff
 8020244:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8020248:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 802024c:	fb09 f902 	mul.w	r9, r9, r2
 8020250:	fb02 1303 	mla	r3, r2, r3, r1
 8020254:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020258:	d056      	beq.n	8020308 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 802025a:	ea6f 0c07 	mvn.w	ip, r7
 802025e:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 8020262:	b2bb      	uxth	r3, r7
 8020264:	960b      	str	r6, [sp, #44]	; 0x2c
 8020266:	fa5f fc8c 	uxtb.w	ip, ip
 802026a:	4548      	cmp	r0, r9
 802026c:	d27b      	bcs.n	8020366 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 802026e:	eb00 0a0e 	add.w	sl, r0, lr
 8020272:	4550      	cmp	r0, sl
 8020274:	4622      	mov	r2, r4
 8020276:	d23d      	bcs.n	80202f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 8020278:	7811      	ldrb	r1, [r2, #0]
 802027a:	2604      	movs	r6, #4
 802027c:	2203      	movs	r2, #3
 802027e:	3401      	adds	r4, #1
 8020280:	fb12 6101 	smlabb	r1, r2, r1, r6
 8020284:	8802      	ldrh	r2, [r0, #0]
 8020286:	eb08 0b01 	add.w	fp, r8, r1
 802028a:	1217      	asrs	r7, r2, #8
 802028c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020290:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8020294:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020298:	f89b b001 	ldrb.w	fp, [fp, #1]
 802029c:	fb16 f603 	smulbb	r6, r6, r3
 80202a0:	fb1b fb03 	smulbb	fp, fp, r3
 80202a4:	fb07 670c 	mla	r7, r7, ip, r6
 80202a8:	10d6      	asrs	r6, r2, #3
 80202aa:	00d2      	lsls	r2, r2, #3
 80202ac:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80202b0:	b2bf      	uxth	r7, r7
 80202b2:	b2d2      	uxtb	r2, r2
 80202b4:	fb06 b60c 	mla	r6, r6, ip, fp
 80202b8:	fb12 f20c 	smulbb	r2, r2, ip
 80202bc:	b2b6      	uxth	r6, r6
 80202be:	fb01 2103 	mla	r1, r1, r3, r2
 80202c2:	1c7a      	adds	r2, r7, #1
 80202c4:	f106 0b01 	add.w	fp, r6, #1
 80202c8:	b289      	uxth	r1, r1
 80202ca:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80202ce:	1c4a      	adds	r2, r1, #1
 80202d0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80202d4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80202d8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80202dc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80202e0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80202e4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80202e8:	4317      	orrs	r7, r2
 80202ea:	ea47 070b 	orr.w	r7, r7, fp
 80202ee:	f820 7b02 	strh.w	r7, [r0], #2
 80202f2:	e7be      	b.n	8020272 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 80202f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80202f6:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 80202fa:	8812      	ldrh	r2, [r2, #0]
 80202fc:	1b49      	subs	r1, r1, r5
 80202fe:	1b52      	subs	r2, r2, r5
 8020300:	440c      	add	r4, r1
 8020302:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020306:	e7b0      	b.n	802026a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 8020308:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 802030c:	2203      	movs	r2, #3
 802030e:	2704      	movs	r7, #4
 8020310:	491c      	ldr	r1, [pc, #112]	; (8020384 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8020312:	4548      	cmp	r0, r9
 8020314:	d227      	bcs.n	8020366 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8020316:	eb00 0c0e 	add.w	ip, r0, lr
 802031a:	4560      	cmp	r0, ip
 802031c:	4623      	mov	r3, r4
 802031e:	d219      	bcs.n	8020354 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8020320:	f893 a000 	ldrb.w	sl, [r3]
 8020324:	3401      	adds	r4, #1
 8020326:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 802032a:	eb08 0b0a 	add.w	fp, r8, sl
 802032e:	f818 a00a 	ldrb.w	sl, [r8, sl]
 8020332:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020336:	f89b b001 	ldrb.w	fp, [fp, #1]
 802033a:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 802033e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8020342:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020346:	ea43 030b 	orr.w	r3, r3, fp
 802034a:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 802034e:	f820 3b02 	strh.w	r3, [r0], #2
 8020352:	e7e2      	b.n	802031a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8020354:	8833      	ldrh	r3, [r6, #0]
 8020356:	1b5b      	subs	r3, r3, r5
 8020358:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802035c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020360:	1b5b      	subs	r3, r3, r5
 8020362:	441c      	add	r4, r3
 8020364:	e7d5      	b.n	8020312 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8020366:	4b08      	ldr	r3, [pc, #32]	; (8020388 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8020368:	6818      	ldr	r0, [r3, #0]
 802036a:	6803      	ldr	r3, [r0, #0]
 802036c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802036e:	4798      	blx	r3
 8020370:	e75c      	b.n	802022c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8020372:	bf00      	nop
 8020374:	0802cbca 	.word	0x0802cbca
 8020378:	0802d2cd 	.word	0x0802d2cd
 802037c:	0802cf17 	.word	0x0802cf17
 8020380:	200057da 	.word	0x200057da
 8020384:	fffff800 	.word	0xfffff800
 8020388:	200057e0 	.word	0x200057e0

0802038c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 802038c:	b430      	push	{r4, r5}
 802038e:	780d      	ldrb	r5, [r1, #0]
 8020390:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8020394:	2d01      	cmp	r5, #1
 8020396:	d00a      	beq.n	80203ae <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8020398:	d305      	bcc.n	80203a6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 802039a:	2d02      	cmp	r5, #2
 802039c:	d10b      	bne.n	80203b6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 802039e:	9402      	str	r4, [sp, #8]
 80203a0:	bc30      	pop	{r4, r5}
 80203a2:	f7ff bddf 	b.w	801ff64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80203a6:	9402      	str	r4, [sp, #8]
 80203a8:	bc30      	pop	{r4, r5}
 80203aa:	f7ff bce7 	b.w	801fd7c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80203ae:	9402      	str	r4, [sp, #8]
 80203b0:	bc30      	pop	{r4, r5}
 80203b2:	f7ff bedb 	b.w	802016c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80203b6:	bc30      	pop	{r4, r5}
 80203b8:	4770      	bx	lr
	...

080203bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80203bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203c0:	b087      	sub	sp, #28
 80203c2:	4604      	mov	r4, r0
 80203c4:	460e      	mov	r6, r1
 80203c6:	6810      	ldr	r0, [r2, #0]
 80203c8:	6851      	ldr	r1, [r2, #4]
 80203ca:	ad02      	add	r5, sp, #8
 80203cc:	4617      	mov	r7, r2
 80203ce:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80203d2:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8020604 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80203d6:	c503      	stmia	r5!, {r0, r1}
 80203d8:	6818      	ldr	r0, [r3, #0]
 80203da:	ad04      	add	r5, sp, #16
 80203dc:	6859      	ldr	r1, [r3, #4]
 80203de:	c503      	stmia	r5!, {r0, r1}
 80203e0:	a802      	add	r0, sp, #8
 80203e2:	f7f9 fbe5 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80203e6:	4639      	mov	r1, r7
 80203e8:	a804      	add	r0, sp, #16
 80203ea:	f7f9 fbc9 	bl	8019b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80203ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80203f2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80203f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80203fa:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80203fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020402:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8020406:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802040a:	440e      	add	r6, r1
 802040c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020410:	440a      	add	r2, r1
 8020412:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020416:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802041a:	4413      	add	r3, r2
 802041c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020420:	4b77      	ldr	r3, [pc, #476]	; (8020600 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020422:	6818      	ldr	r0, [r3, #0]
 8020424:	6803      	ldr	r3, [r0, #0]
 8020426:	6a1b      	ldr	r3, [r3, #32]
 8020428:	4798      	blx	r3
 802042a:	f8b9 b000 	ldrh.w	fp, [r9]
 802042e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020432:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020436:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802043a:	fb05 f50b 	mul.w	r5, r5, fp
 802043e:	fb0b 2303 	mla	r3, fp, r3, r2
 8020442:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020446:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802044a:	9300      	str	r3, [sp, #0]
 802044c:	d068      	beq.n	8020520 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 802044e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8020452:	4558      	cmp	r0, fp
 8020454:	f080 80cc 	bcs.w	80205f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020458:	9b00      	ldr	r3, [sp, #0]
 802045a:	4631      	mov	r1, r6
 802045c:	18c3      	adds	r3, r0, r3
 802045e:	9301      	str	r3, [sp, #4]
 8020460:	9b01      	ldr	r3, [sp, #4]
 8020462:	4298      	cmp	r0, r3
 8020464:	d24e      	bcs.n	8020504 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 8020466:	f811 2b01 	ldrb.w	r2, [r1], #1
 802046a:	2a00      	cmp	r2, #0
 802046c:	d047      	beq.n	80204fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 802046e:	fb0a f202 	mul.w	r2, sl, r2
 8020472:	1c53      	adds	r3, r2, #1
 8020474:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020478:	121b      	asrs	r3, r3, #8
 802047a:	d040      	beq.n	80204fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 802047c:	8802      	ldrh	r2, [r0, #0]
 802047e:	b29e      	uxth	r6, r3
 8020480:	f8b4 c000 	ldrh.w	ip, [r4]
 8020484:	43db      	mvns	r3, r3
 8020486:	1215      	asrs	r5, r2, #8
 8020488:	b2db      	uxtb	r3, r3
 802048a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802048e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020492:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8020496:	fb15 f503 	smulbb	r5, r5, r3
 802049a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802049e:	00d2      	lsls	r2, r2, #3
 80204a0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80204a4:	fb07 5706 	mla	r7, r7, r6, r5
 80204a8:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80204ac:	b2d2      	uxtb	r2, r2
 80204ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80204b2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80204b6:	fb1e fe03 	smulbb	lr, lr, r3
 80204ba:	b2bf      	uxth	r7, r7
 80204bc:	fb12 f203 	smulbb	r2, r2, r3
 80204c0:	fa5f fc8c 	uxtb.w	ip, ip
 80204c4:	fb05 e506 	mla	r5, r5, r6, lr
 80204c8:	1c7b      	adds	r3, r7, #1
 80204ca:	fb0c 2c06 	mla	ip, ip, r6, r2
 80204ce:	b2ad      	uxth	r5, r5
 80204d0:	fa1f fc8c 	uxth.w	ip, ip
 80204d4:	f105 0e01 	add.w	lr, r5, #1
 80204d8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80204dc:	f10c 0601 	add.w	r6, ip, #1
 80204e0:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80204e4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80204e8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80204ec:	096d      	lsrs	r5, r5, #5
 80204ee:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80204f2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80204f6:	ea47 070c 	orr.w	r7, r7, ip
 80204fa:	432f      	orrs	r7, r5
 80204fc:	8007      	strh	r7, [r0, #0]
 80204fe:	3002      	adds	r0, #2
 8020500:	3402      	adds	r4, #2
 8020502:	e7ad      	b.n	8020460 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8020504:	f8b9 3000 	ldrh.w	r3, [r9]
 8020508:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802050c:	eba3 0308 	sub.w	r3, r3, r8
 8020510:	eba6 0608 	sub.w	r6, r6, r8
 8020514:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020518:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802051c:	440e      	add	r6, r1
 802051e:	e798      	b.n	8020452 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8020520:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020524:	42a8      	cmp	r0, r5
 8020526:	d263      	bcs.n	80205f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020528:	9b00      	ldr	r3, [sp, #0]
 802052a:	4631      	mov	r1, r6
 802052c:	eb00 0b03 	add.w	fp, r0, r3
 8020530:	4558      	cmp	r0, fp
 8020532:	d24f      	bcs.n	80205d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8020534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020538:	b12b      	cbz	r3, 8020546 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 802053a:	2bff      	cmp	r3, #255	; 0xff
 802053c:	f8b4 e000 	ldrh.w	lr, [r4]
 8020540:	d104      	bne.n	802054c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 8020542:	f8a0 e000 	strh.w	lr, [r0]
 8020546:	3002      	adds	r0, #2
 8020548:	3402      	adds	r4, #2
 802054a:	e7f1      	b.n	8020530 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 802054c:	8802      	ldrh	r2, [r0, #0]
 802054e:	b29f      	uxth	r7, r3
 8020550:	43db      	mvns	r3, r3
 8020552:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020556:	1216      	asrs	r6, r2, #8
 8020558:	b2db      	uxtb	r3, r3
 802055a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802055e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020562:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8020566:	00d2      	lsls	r2, r2, #3
 8020568:	fb16 f603 	smulbb	r6, r6, r3
 802056c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020570:	b2d2      	uxtb	r2, r2
 8020572:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020576:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802057a:	fb1a fa03 	smulbb	sl, sl, r3
 802057e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020582:	fb12 f303 	smulbb	r3, r2, r3
 8020586:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802058a:	fa5f fe8e 	uxtb.w	lr, lr
 802058e:	fb06 a607 	mla	r6, r6, r7, sl
 8020592:	fa1f fc8c 	uxth.w	ip, ip
 8020596:	fb0e 3e07 	mla	lr, lr, r7, r3
 802059a:	b2b6      	uxth	r6, r6
 802059c:	f10c 0201 	add.w	r2, ip, #1
 80205a0:	fa1f fe8e 	uxth.w	lr, lr
 80205a4:	f106 0a01 	add.w	sl, r6, #1
 80205a8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80205ac:	f10e 0301 	add.w	r3, lr, #1
 80205b0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80205b4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80205b8:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80205bc:	0976      	lsrs	r6, r6, #5
 80205be:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80205c2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80205c6:	ea4c 0c0e 	orr.w	ip, ip, lr
 80205ca:	ea4c 0c06 	orr.w	ip, ip, r6
 80205ce:	f8a0 c000 	strh.w	ip, [r0]
 80205d2:	e7b8      	b.n	8020546 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 80205d4:	f8b9 3000 	ldrh.w	r3, [r9]
 80205d8:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80205dc:	eba3 0308 	sub.w	r3, r3, r8
 80205e0:	eba6 0608 	sub.w	r6, r6, r8
 80205e4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80205e8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80205ec:	440e      	add	r6, r1
 80205ee:	e799      	b.n	8020524 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 80205f0:	4b03      	ldr	r3, [pc, #12]	; (8020600 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80205f2:	6818      	ldr	r0, [r3, #0]
 80205f4:	6803      	ldr	r3, [r0, #0]
 80205f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80205f8:	4798      	blx	r3
 80205fa:	b007      	add	sp, #28
 80205fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020600:	200057e0 	.word	0x200057e0
 8020604:	200057da 	.word	0x200057da

08020608 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802060c:	b089      	sub	sp, #36	; 0x24
 802060e:	4682      	mov	sl, r0
 8020610:	460d      	mov	r5, r1
 8020612:	4691      	mov	r9, r2
 8020614:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8020618:	4698      	mov	r8, r3
 802061a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802061c:	b3ae      	cbz	r6, 802068a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 802061e:	4608      	mov	r0, r1
 8020620:	f7fc fa08 	bl	801ca34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020624:	4607      	mov	r7, r0
 8020626:	4628      	mov	r0, r5
 8020628:	f7fc fa3e 	bl	801caa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802062c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020630:	4628      	mov	r0, r5
 8020632:	f8ad 9008 	strh.w	r9, [sp, #8]
 8020636:	f8ad 800a 	strh.w	r8, [sp, #10]
 802063a:	f8ad 700c 	strh.w	r7, [sp, #12]
 802063e:	f7fc fb8b 	bl	801cd58 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020642:	b178      	cbz	r0, 8020664 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020644:	4628      	mov	r0, r5
 8020646:	f7fc fb87 	bl	801cd58 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802064a:	2802      	cmp	r0, #2
 802064c:	d00a      	beq.n	8020664 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802064e:	4628      	mov	r0, r5
 8020650:	f7fc fb82 	bl	801cd58 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020654:	280b      	cmp	r0, #11
 8020656:	d005      	beq.n	8020664 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020658:	4b69      	ldr	r3, [pc, #420]	; (8020800 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 802065a:	214b      	movs	r1, #75	; 0x4b
 802065c:	4a69      	ldr	r2, [pc, #420]	; (8020804 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 802065e:	486a      	ldr	r0, [pc, #424]	; (8020808 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8020660:	f008 f812 	bl	8028688 <__assert_func>
 8020664:	4628      	mov	r0, r5
 8020666:	f7fc faed 	bl	801cc44 <_ZNK8touchgfx6Bitmap7getDataEv>
 802066a:	4607      	mov	r7, r0
 802066c:	4628      	mov	r0, r5
 802066e:	f7fc fb1b 	bl	801cca8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8020672:	4681      	mov	r9, r0
 8020674:	4628      	mov	r0, r5
 8020676:	f7fc fb6f 	bl	801cd58 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802067a:	2802      	cmp	r0, #2
 802067c:	d108      	bne.n	8020690 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 802067e:	4633      	mov	r3, r6
 8020680:	4622      	mov	r2, r4
 8020682:	a902      	add	r1, sp, #8
 8020684:	4638      	mov	r0, r7
 8020686:	f7ff fa69 	bl	801fb5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802068a:	b009      	add	sp, #36	; 0x24
 802068c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020690:	4628      	mov	r0, r5
 8020692:	f7fc fb61 	bl	801cd58 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020696:	280b      	cmp	r0, #11
 8020698:	d107      	bne.n	80206aa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 802069a:	9600      	str	r6, [sp, #0]
 802069c:	4623      	mov	r3, r4
 802069e:	aa02      	add	r2, sp, #8
 80206a0:	4649      	mov	r1, r9
 80206a2:	4638      	mov	r0, r7
 80206a4:	f7ff fe72 	bl	802038c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80206a8:	e7ef      	b.n	802068a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80206aa:	4628      	mov	r0, r5
 80206ac:	f7fc fa90 	bl	801cbd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80206b0:	b950      	cbnz	r0, 80206c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80206b2:	f8da 3000 	ldr.w	r3, [sl]
 80206b6:	aa02      	add	r2, sp, #8
 80206b8:	4639      	mov	r1, r7
 80206ba:	e9cd 6000 	strd	r6, r0, [sp]
 80206be:	4650      	mov	r0, sl
 80206c0:	68dd      	ldr	r5, [r3, #12]
 80206c2:	4623      	mov	r3, r4
 80206c4:	47a8      	blx	r5
 80206c6:	e7e0      	b.n	802068a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80206c8:	f10d 0818 	add.w	r8, sp, #24
 80206cc:	4629      	mov	r1, r5
 80206ce:	ad04      	add	r5, sp, #16
 80206d0:	4640      	mov	r0, r8
 80206d2:	f7fc fa23 	bl	801cb1c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80206d6:	e898 0003 	ldmia.w	r8, {r0, r1}
 80206da:	e885 0003 	stmia.w	r5, {r0, r1}
 80206de:	4628      	mov	r0, r5
 80206e0:	4621      	mov	r1, r4
 80206e2:	f7f6 f9a9 	bl	8016a38 <_ZN8touchgfx4RectaNERKS0_>
 80206e6:	4628      	mov	r0, r5
 80206e8:	f7f6 f9e9 	bl	8016abe <_ZNK8touchgfx4Rect7isEmptyEv>
 80206ec:	b138      	cbz	r0, 80206fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 80206ee:	4623      	mov	r3, r4
 80206f0:	9600      	str	r6, [sp, #0]
 80206f2:	aa02      	add	r2, sp, #8
 80206f4:	4649      	mov	r1, r9
 80206f6:	4638      	mov	r0, r7
 80206f8:	f7ff fe60 	bl	80203bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80206fc:	e7c5      	b.n	802068a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80206fe:	f8da 3000 	ldr.w	r3, [sl]
 8020702:	aa02      	add	r2, sp, #8
 8020704:	4639      	mov	r1, r7
 8020706:	e9cd 6000 	strd	r6, r0, [sp]
 802070a:	4650      	mov	r0, sl
 802070c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8020710:	462b      	mov	r3, r5
 8020712:	47d8      	blx	fp
 8020714:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020718:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802071c:	4293      	cmp	r3, r2
 802071e:	dd13      	ble.n	8020748 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 8020720:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020724:	1a9b      	subs	r3, r3, r2
 8020726:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802072a:	f8ad 0018 	strh.w	r0, [sp, #24]
 802072e:	4638      	mov	r0, r7
 8020730:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020734:	aa02      	add	r2, sp, #8
 8020736:	f8ad 101c 	strh.w	r1, [sp, #28]
 802073a:	4649      	mov	r1, r9
 802073c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020740:	4643      	mov	r3, r8
 8020742:	9600      	str	r6, [sp, #0]
 8020744:	f7ff fe3a 	bl	80203bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020748:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802074c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020750:	4293      	cmp	r3, r2
 8020752:	dd13      	ble.n	802077c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8020754:	1a9b      	subs	r3, r3, r2
 8020756:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802075a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802075e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020762:	aa02      	add	r2, sp, #8
 8020764:	f8ad 001a 	strh.w	r0, [sp, #26]
 8020768:	4638      	mov	r0, r7
 802076a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802076e:	4643      	mov	r3, r8
 8020770:	f8ad 101e 	strh.w	r1, [sp, #30]
 8020774:	4649      	mov	r1, r9
 8020776:	9600      	str	r6, [sp, #0]
 8020778:	f7ff fe20 	bl	80203bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802077c:	88a2      	ldrh	r2, [r4, #4]
 802077e:	8823      	ldrh	r3, [r4, #0]
 8020780:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8020784:	4413      	add	r3, r2
 8020786:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802078a:	440a      	add	r2, r1
 802078c:	b29b      	uxth	r3, r3
 802078e:	b292      	uxth	r2, r2
 8020790:	b218      	sxth	r0, r3
 8020792:	b211      	sxth	r1, r2
 8020794:	4288      	cmp	r0, r1
 8020796:	dd13      	ble.n	80207c0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 8020798:	1a9b      	subs	r3, r3, r2
 802079a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802079e:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 80207a2:	aa02      	add	r2, sp, #8
 80207a4:	f8ad 1018 	strh.w	r1, [sp, #24]
 80207a8:	4649      	mov	r1, r9
 80207aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80207ae:	4643      	mov	r3, r8
 80207b0:	f8ad 001e 	strh.w	r0, [sp, #30]
 80207b4:	4638      	mov	r0, r7
 80207b6:	9600      	str	r6, [sp, #0]
 80207b8:	f8ad 501a 	strh.w	r5, [sp, #26]
 80207bc:	f7ff fdfe 	bl	80203bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80207c0:	88e2      	ldrh	r2, [r4, #6]
 80207c2:	8863      	ldrh	r3, [r4, #2]
 80207c4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80207c8:	4413      	add	r3, r2
 80207ca:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80207ce:	440a      	add	r2, r1
 80207d0:	b29b      	uxth	r3, r3
 80207d2:	b292      	uxth	r2, r2
 80207d4:	b218      	sxth	r0, r3
 80207d6:	b211      	sxth	r1, r2
 80207d8:	4288      	cmp	r0, r1
 80207da:	f77f af56 	ble.w	802068a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80207de:	f9b4 5000 	ldrsh.w	r5, [r4]
 80207e2:	1a9b      	subs	r3, r3, r2
 80207e4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80207e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80207ec:	4643      	mov	r3, r8
 80207ee:	f8ad 5018 	strh.w	r5, [sp, #24]
 80207f2:	f8ad 101a 	strh.w	r1, [sp, #26]
 80207f6:	f8ad 001c 	strh.w	r0, [sp, #28]
 80207fa:	9600      	str	r6, [sp, #0]
 80207fc:	e779      	b.n	80206f2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 80207fe:	bf00      	nop
 8020800:	0802cc18 	.word	0x0802cc18
 8020804:	0802d356 	.word	0x0802d356
 8020808:	0802cf17 	.word	0x0802cf17

0802080c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 802080c:	b508      	push	{r3, lr}
 802080e:	b180      	cbz	r0, 8020832 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8020810:	2902      	cmp	r1, #2
 8020812:	d014      	beq.n	802083e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8020814:	2903      	cmp	r1, #3
 8020816:	d01d      	beq.n	8020854 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8020818:	2901      	cmp	r1, #1
 802081a:	d101      	bne.n	8020820 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 802081c:	2001      	movs	r0, #1
 802081e:	bd08      	pop	{r3, pc}
 8020820:	4b0e      	ldr	r3, [pc, #56]	; (802085c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020822:	8818      	ldrh	r0, [r3, #0]
 8020824:	b990      	cbnz	r0, 802084c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020826:	4b0e      	ldr	r3, [pc, #56]	; (8020860 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8020828:	2154      	movs	r1, #84	; 0x54
 802082a:	4a0e      	ldr	r2, [pc, #56]	; (8020864 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 802082c:	480e      	ldr	r0, [pc, #56]	; (8020868 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 802082e:	f007 ff2b 	bl	8028688 <__assert_func>
 8020832:	2902      	cmp	r1, #2
 8020834:	d00e      	beq.n	8020854 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8020836:	2903      	cmp	r1, #3
 8020838:	d0f2      	beq.n	8020820 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 802083a:	2901      	cmp	r1, #1
 802083c:	d1ee      	bne.n	802081c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 802083e:	4b07      	ldr	r3, [pc, #28]	; (802085c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020840:	8818      	ldrh	r0, [r3, #0]
 8020842:	2800      	cmp	r0, #0
 8020844:	d0ef      	beq.n	8020826 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8020846:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802084a:	e7e8      	b.n	802081e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 802084c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020850:	4240      	negs	r0, r0
 8020852:	e7e4      	b.n	802081e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8020854:	f04f 30ff 	mov.w	r0, #4294967295
 8020858:	e7e1      	b.n	802081e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 802085a:	bf00      	nop
 802085c:	200057da 	.word	0x200057da
 8020860:	0802cf49 	.word	0x0802cf49
 8020864:	0802d4d3 	.word	0x0802d4d3
 8020868:	0802cf8b 	.word	0x0802cf8b

0802086c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 802086c:	b508      	push	{r3, lr}
 802086e:	b180      	cbz	r0, 8020892 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8020870:	2902      	cmp	r1, #2
 8020872:	d014      	beq.n	802089e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8020874:	2903      	cmp	r1, #3
 8020876:	d018      	beq.n	80208aa <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8020878:	2901      	cmp	r1, #1
 802087a:	d001      	beq.n	8020880 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 802087c:	2001      	movs	r0, #1
 802087e:	e013      	b.n	80208a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8020880:	4b0e      	ldr	r3, [pc, #56]	; (80208bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8020882:	8818      	ldrh	r0, [r3, #0]
 8020884:	b970      	cbnz	r0, 80208a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8020886:	4b0e      	ldr	r3, [pc, #56]	; (80208c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8020888:	2154      	movs	r1, #84	; 0x54
 802088a:	4a0e      	ldr	r2, [pc, #56]	; (80208c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 802088c:	480e      	ldr	r0, [pc, #56]	; (80208c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 802088e:	f007 fefb 	bl	8028688 <__assert_func>
 8020892:	2902      	cmp	r1, #2
 8020894:	d009      	beq.n	80208aa <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8020896:	2903      	cmp	r1, #3
 8020898:	d0f0      	beq.n	802087c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 802089a:	2901      	cmp	r1, #1
 802089c:	d1f0      	bne.n	8020880 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 802089e:	f04f 30ff 	mov.w	r0, #4294967295
 80208a2:	e001      	b.n	80208a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80208a4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80208a8:	bd08      	pop	{r3, pc}
 80208aa:	4b04      	ldr	r3, [pc, #16]	; (80208bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80208ac:	8818      	ldrh	r0, [r3, #0]
 80208ae:	2800      	cmp	r0, #0
 80208b0:	d0e9      	beq.n	8020886 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 80208b2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80208b6:	4240      	negs	r0, r0
 80208b8:	e7f6      	b.n	80208a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80208ba:	bf00      	nop
 80208bc:	200057da 	.word	0x200057da
 80208c0:	0802cf49 	.word	0x0802cf49
 80208c4:	0802d4d3 	.word	0x0802d4d3
 80208c8:	0802cf8b 	.word	0x0802cf8b

080208cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80208cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208d0:	b099      	sub	sp, #100	; 0x64
 80208d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80208d4:	a914      	add	r1, sp, #80	; 0x50
 80208d6:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 80208da:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 80208de:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 80208e2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 80208e6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 80208ea:	e881 000c 	stmia.w	r1, {r2, r3}
 80208ee:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 80208f2:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 80208f6:	9308      	str	r3, [sp, #32]
 80208f8:	910c      	str	r1, [sp, #48]	; 0x30
 80208fa:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 80208fe:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8020902:	910d      	str	r1, [sp, #52]	; 0x34
 8020904:	f893 b00d 	ldrb.w	fp, [r3, #13]
 8020908:	7998      	ldrb	r0, [r3, #6]
 802090a:	ea4f 114b 	mov.w	r1, fp, lsl #5
 802090e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020912:	4301      	orrs	r1, r0
 8020914:	9109      	str	r1, [sp, #36]	; 0x24
 8020916:	f000 81e4 	beq.w	8020ce2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 802091a:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 802091e:	79d9      	ldrb	r1, [r3, #7]
 8020920:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 8020924:	ea51 0b0b 	orrs.w	fp, r1, fp
 8020928:	f000 81db 	beq.w	8020ce2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 802092c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8020930:	b29b      	uxth	r3, r3
 8020932:	2e00      	cmp	r6, #0
 8020934:	f000 80fd 	beq.w	8020b32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8020938:	1af6      	subs	r6, r6, r3
 802093a:	b2b6      	uxth	r6, r6
 802093c:	0433      	lsls	r3, r6, #16
 802093e:	d502      	bpl.n	8020946 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8020940:	1bad      	subs	r5, r5, r6
 8020942:	2600      	movs	r6, #0
 8020944:	b22d      	sxth	r5, r5
 8020946:	f9b2 1000 	ldrsh.w	r1, [r2]
 802094a:	a814      	add	r0, sp, #80	; 0x50
 802094c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8020950:	428d      	cmp	r5, r1
 8020952:	b28b      	uxth	r3, r1
 8020954:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8020958:	bfbf      	itttt	lt
 802095a:	18f6      	addlt	r6, r6, r3
 802095c:	1b75      	sublt	r5, r6, r5
 802095e:	b2ae      	uxthlt	r6, r5
 8020960:	460d      	movlt	r5, r1
 8020962:	8891      	ldrh	r1, [r2, #4]
 8020964:	440b      	add	r3, r1
 8020966:	4629      	mov	r1, r5
 8020968:	b21b      	sxth	r3, r3
 802096a:	9311      	str	r3, [sp, #68]	; 0x44
 802096c:	8853      	ldrh	r3, [r2, #2]
 802096e:	88d2      	ldrh	r2, [r2, #6]
 8020970:	4413      	add	r3, r2
 8020972:	9a08      	ldr	r2, [sp, #32]
 8020974:	b21b      	sxth	r3, r3
 8020976:	9310      	str	r3, [sp, #64]	; 0x40
 8020978:	4bb1      	ldr	r3, [pc, #708]	; (8020c40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 802097a:	f893 9000 	ldrb.w	r9, [r3]
 802097e:	f109 3cff 	add.w	ip, r9, #4294967295
 8020982:	f1dc 0300 	rsbs	r3, ip, #0
 8020986:	eb43 030c 	adc.w	r3, r3, ip
 802098a:	930f      	str	r3, [sp, #60]	; 0x3c
 802098c:	4653      	mov	r3, sl
 802098e:	f7f8 ff68 	bl	8019862 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020992:	4629      	mov	r1, r5
 8020994:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8020998:	4653      	mov	r3, sl
 802099a:	9a08      	ldr	r2, [sp, #32]
 802099c:	a814      	add	r0, sp, #80	; 0x50
 802099e:	f7f8 ff78 	bl	8019892 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80209a2:	a918      	add	r1, sp, #96	; 0x60
 80209a4:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80209a8:	a817      	add	r0, sp, #92	; 0x5c
 80209aa:	f7f9 f8d3 	bl	8019b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80209ae:	f1ba 0f00 	cmp.w	sl, #0
 80209b2:	f040 80c1 	bne.w	8020b38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 80209b6:	f1b9 0f01 	cmp.w	r9, #1
 80209ba:	f040 80c5 	bne.w	8020b48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 80209be:	2301      	movs	r3, #1
 80209c0:	f1b8 0f01 	cmp.w	r8, #1
 80209c4:	fa03 f308 	lsl.w	r3, r3, r8
 80209c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80209cc:	b2db      	uxtb	r3, r3
 80209ce:	930a      	str	r3, [sp, #40]	; 0x28
 80209d0:	f000 80e5 	beq.w	8020b9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 80209d4:	f1b8 0f02 	cmp.w	r8, #2
 80209d8:	f000 80e4 	beq.w	8020ba4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 80209dc:	f1b8 0f04 	cmp.w	r8, #4
 80209e0:	bf15      	itete	ne
 80209e2:	46c1      	movne	r9, r8
 80209e4:	f04f 0904 	moveq.w	r9, #4
 80209e8:	2301      	movne	r3, #1
 80209ea:	2311      	moveq	r3, #17
 80209ec:	9307      	str	r3, [sp, #28]
 80209ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209f0:	b153      	cbz	r3, 8020a08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 80209f2:	2408      	movs	r4, #8
 80209f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80209f6:	fb94 f3f9 	sdiv	r3, r4, r9
 80209fa:	1e5c      	subs	r4, r3, #1
 80209fc:	4414      	add	r4, r2
 80209fe:	fb94 f4f3 	sdiv	r4, r4, r3
 8020a02:	fb14 f403 	smulbb	r4, r4, r3
 8020a06:	b2a4      	uxth	r4, r4
 8020a08:	b906      	cbnz	r6, 8020a0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8020a0a:	b16f      	cbz	r7, 8020a28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 8020a0c:	fb07 6304 	mla	r3, r7, r4, r6
 8020a10:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020a12:	4639      	mov	r1, r7
 8020a14:	fb08 f303 	mul.w	r3, r8, r3
 8020a18:	f003 0707 	and.w	r7, r3, #7
 8020a1c:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8020a20:	9328      	str	r3, [sp, #160]	; 0xa0
 8020a22:	ebab 0301 	sub.w	r3, fp, r1
 8020a26:	930e      	str	r3, [sp, #56]	; 0x38
 8020a28:	4651      	mov	r1, sl
 8020a2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020a2c:	f7ff feee 	bl	802080c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8020a30:	4651      	mov	r1, sl
 8020a32:	4683      	mov	fp, r0
 8020a34:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020a36:	f7ff ff19 	bl	802086c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8020a3a:	9a08      	ldr	r2, [sp, #32]
 8020a3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a3e:	4682      	mov	sl, r0
 8020a40:	1a9b      	subs	r3, r3, r2
 8020a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a44:	429a      	cmp	r2, r3
 8020a46:	bfa8      	it	ge
 8020a48:	461a      	movge	r2, r3
 8020a4a:	2a00      	cmp	r2, #0
 8020a4c:	9208      	str	r2, [sp, #32]
 8020a4e:	f340 8148 	ble.w	8020ce2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8020a52:	1bad      	subs	r5, r5, r6
 8020a54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020a56:	1b5d      	subs	r5, r3, r5
 8020a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a5a:	429d      	cmp	r5, r3
 8020a5c:	bfd4      	ite	le
 8020a5e:	ebc6 0605 	rsble	r6, r6, r5
 8020a62:	ebc6 0603 	rsbgt	r6, r6, r3
 8020a66:	2e00      	cmp	r6, #0
 8020a68:	f340 813b 	ble.w	8020ce2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8020a6c:	1ba4      	subs	r4, r4, r6
 8020a6e:	fb09 f304 	mul.w	r3, r9, r4
 8020a72:	930e      	str	r3, [sp, #56]	; 0x38
 8020a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	f040 809d 	bne.w	8020bb6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 8020a7c:	4b71      	ldr	r3, [pc, #452]	; (8020c44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8020a7e:	6818      	ldr	r0, [r3, #0]
 8020a80:	6803      	ldr	r3, [r0, #0]
 8020a82:	6a1b      	ldr	r3, [r3, #32]
 8020a84:	4798      	blx	r3
 8020a86:	4970      	ldr	r1, [pc, #448]	; (8020c48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8020a88:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8020a8c:	880c      	ldrh	r4, [r1, #0]
 8020a8e:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8020a92:	fb04 1303 	mla	r3, r4, r3, r1
 8020a96:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8020a9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020a9e:	7819      	ldrb	r1, [r3, #0]
 8020aa0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020aa2:	4139      	asrs	r1, r7
 8020aa4:	0a1b      	lsrs	r3, r3, #8
 8020aa6:	b2c9      	uxtb	r1, r1
 8020aa8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020aac:	930f      	str	r3, [sp, #60]	; 0x3c
 8020aae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ab0:	08db      	lsrs	r3, r3, #3
 8020ab2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020ab6:	9310      	str	r3, [sp, #64]	; 0x40
 8020ab8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020aba:	00db      	lsls	r3, r3, #3
 8020abc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020ac0:	9311      	str	r3, [sp, #68]	; 0x44
 8020ac2:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8020ac6:	fb0b ab16 	mls	fp, fp, r6, sl
 8020aca:	fb03 fa06 	mul.w	sl, r3, r6
 8020ace:	930c      	str	r3, [sp, #48]	; 0x30
 8020ad0:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 8020ad4:	9312      	str	r3, [sp, #72]	; 0x48
 8020ad6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ad8:	b29b      	uxth	r3, r3
 8020ada:	9313      	str	r3, [sp, #76]	; 0x4c
 8020adc:	9b08      	ldr	r3, [sp, #32]
 8020ade:	3b01      	subs	r3, #1
 8020ae0:	9308      	str	r3, [sp, #32]
 8020ae2:	3301      	adds	r3, #1
 8020ae4:	f000 80c4 	beq.w	8020c70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8020ae8:	46b2      	mov	sl, r6
 8020aea:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8020aee:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8020af2:	f0c0 80ab 	bcc.w	8020c4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8020af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020af8:	400b      	ands	r3, r1
 8020afa:	d00a      	beq.n	8020b12 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 8020afc:	9807      	ldr	r0, [sp, #28]
 8020afe:	fb13 f300 	smulbb	r3, r3, r0
 8020b02:	2bfe      	cmp	r3, #254	; 0xfe
 8020b04:	dd59      	ble.n	8020bba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8020b06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020b08:	28ff      	cmp	r0, #255	; 0xff
 8020b0a:	d156      	bne.n	8020bba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8020b0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020b0e:	f8ae 4000 	strh.w	r4, [lr]
 8020b12:	4447      	add	r7, r8
 8020b14:	b2bf      	uxth	r7, r7
 8020b16:	2f07      	cmp	r7, #7
 8020b18:	bf89      	itett	hi
 8020b1a:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8020b1c:	fa41 f109 	asrls.w	r1, r1, r9
 8020b20:	2700      	movhi	r7, #0
 8020b22:	7859      	ldrbhi	r1, [r3, #1]
 8020b24:	bf8a      	itet	hi
 8020b26:	3301      	addhi	r3, #1
 8020b28:	b2c9      	uxtbls	r1, r1
 8020b2a:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8020b2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b2e:	449e      	add	lr, r3
 8020b30:	e7dd      	b.n	8020aee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8020b32:	441d      	add	r5, r3
 8020b34:	b22d      	sxth	r5, r5
 8020b36:	e706      	b.n	8020946 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8020b38:	f1ba 0f01 	cmp.w	sl, #1
 8020b3c:	f47f af3f 	bne.w	80209be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020b40:	f1b9 0f01 	cmp.w	r9, #1
 8020b44:	f47f af3b 	bne.w	80209be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020b48:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8020c44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8020b4c:	f8d9 0000 	ldr.w	r0, [r9]
 8020b50:	6803      	ldr	r3, [r0, #0]
 8020b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b54:	4798      	blx	r3
 8020b56:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8020b5a:	464a      	mov	r2, r9
 8020b5c:	d006      	beq.n	8020b6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8020b5e:	f1b8 0f04 	cmp.w	r8, #4
 8020b62:	d11a      	bne.n	8020b9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8020b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b66:	3300      	adds	r3, #0
 8020b68:	bf18      	it	ne
 8020b6a:	2301      	movne	r3, #1
 8020b6c:	05c0      	lsls	r0, r0, #23
 8020b6e:	f140 8088 	bpl.w	8020c82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8020b72:	f1b8 0f08 	cmp.w	r8, #8
 8020b76:	f040 8084 	bne.w	8020c82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	bf14      	ite	ne
 8020b7e:	2180      	movne	r1, #128	; 0x80
 8020b80:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8020b84:	2e00      	cmp	r6, #0
 8020b86:	f040 80af 	bne.w	8020ce8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 8020b8a:	2f00      	cmp	r7, #0
 8020b8c:	f000 8083 	beq.w	8020c96 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8020b90:	23ff      	movs	r3, #255	; 0xff
 8020b92:	46c1      	mov	r9, r8
 8020b94:	930a      	str	r3, [sp, #40]	; 0x28
 8020b96:	2301      	movs	r3, #1
 8020b98:	e728      	b.n	80209ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8020b9a:	2300      	movs	r3, #0
 8020b9c:	e7e6      	b.n	8020b6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8020b9e:	46c1      	mov	r9, r8
 8020ba0:	23ff      	movs	r3, #255	; 0xff
 8020ba2:	e723      	b.n	80209ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8020ba4:	46c1      	mov	r9, r8
 8020ba6:	2355      	movs	r3, #85	; 0x55
 8020ba8:	e720      	b.n	80209ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8020baa:	23ff      	movs	r3, #255	; 0xff
 8020bac:	46c1      	mov	r9, r8
 8020bae:	930a      	str	r3, [sp, #40]	; 0x28
 8020bb0:	2301      	movs	r3, #1
 8020bb2:	9307      	str	r3, [sp, #28]
 8020bb4:	e71d      	b.n	80209f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8020bb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020bb8:	e765      	b.n	8020a86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 8020bba:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020bbc:	f8be 5000 	ldrh.w	r5, [lr]
 8020bc0:	fb10 f303 	smulbb	r3, r0, r3
 8020bc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020bc6:	122c      	asrs	r4, r5, #8
 8020bc8:	b29b      	uxth	r3, r3
 8020bca:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020bce:	1c58      	adds	r0, r3, #1
 8020bd0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020bd4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020bd6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020bda:	fa1f fc83 	uxth.w	ip, r3
 8020bde:	43db      	mvns	r3, r3
 8020be0:	fb10 f00c 	smulbb	r0, r0, ip
 8020be4:	b2db      	uxtb	r3, r3
 8020be6:	fb1c fb02 	smulbb	fp, ip, r2
 8020bea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020bec:	fb04 0403 	mla	r4, r4, r3, r0
 8020bf0:	10e8      	asrs	r0, r5, #3
 8020bf2:	fb1c fc02 	smulbb	ip, ip, r2
 8020bf6:	00ed      	lsls	r5, r5, #3
 8020bf8:	b2a4      	uxth	r4, r4
 8020bfa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020bfe:	b2ed      	uxtb	r5, r5
 8020c00:	fb00 b003 	mla	r0, r0, r3, fp
 8020c04:	fb05 cc03 	mla	ip, r5, r3, ip
 8020c08:	1c63      	adds	r3, r4, #1
 8020c0a:	b280      	uxth	r0, r0
 8020c0c:	fa1f fc8c 	uxth.w	ip, ip
 8020c10:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020c14:	f10c 0b01 	add.w	fp, ip, #1
 8020c18:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020c1c:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8020c20:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8020c24:	ea44 040b 	orr.w	r4, r4, fp
 8020c28:	f100 0b01 	add.w	fp, r0, #1
 8020c2c:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8020c30:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8020c34:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020c38:	ea44 040b 	orr.w	r4, r4, fp
 8020c3c:	e767      	b.n	8020b0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 8020c3e:	bf00      	nop
 8020c40:	200057d8 	.word	0x200057d8
 8020c44:	200057e0 	.word	0x200057e0
 8020c48:	200057da 	.word	0x200057da
 8020c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c4e:	b153      	cbz	r3, 8020c66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8020c50:	441f      	add	r7, r3
 8020c52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c54:	b2bf      	uxth	r7, r7
 8020c56:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8020c5a:	f007 0707 	and.w	r7, r7, #7
 8020c5e:	7819      	ldrb	r1, [r3, #0]
 8020c60:	9328      	str	r3, [sp, #160]	; 0xa0
 8020c62:	4139      	asrs	r1, r7
 8020c64:	b2c9      	uxtb	r1, r1
 8020c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020c6a:	441a      	add	r2, r3
 8020c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8020c6e:	e735      	b.n	8020adc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 8020c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020c72:	2b00      	cmp	r3, #0
 8020c74:	d135      	bne.n	8020ce2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8020c76:	4b21      	ldr	r3, [pc, #132]	; (8020cfc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 8020c78:	6818      	ldr	r0, [r3, #0]
 8020c7a:	6803      	ldr	r3, [r0, #0]
 8020c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c7e:	4798      	blx	r3
 8020c80:	e02f      	b.n	8020ce2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	f43f ae9b 	beq.w	80209be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020c88:	2e00      	cmp	r6, #0
 8020c8a:	f47f ae98 	bne.w	80209be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020c8e:	2f00      	cmp	r7, #0
 8020c90:	f47f ae95 	bne.w	80209be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020c94:	2180      	movs	r1, #128	; 0x80
 8020c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020c9a:	18eb      	adds	r3, r5, r3
 8020c9c:	4283      	cmp	r3, r0
 8020c9e:	f73f ae8e 	bgt.w	80209be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020ca2:	9b08      	ldr	r3, [sp, #32]
 8020ca4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020ca6:	445b      	add	r3, fp
 8020ca8:	4283      	cmp	r3, r0
 8020caa:	f73f ae88 	bgt.w	80209be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020cae:	f1b8 0f08 	cmp.w	r8, #8
 8020cb2:	6810      	ldr	r0, [r2, #0]
 8020cb4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8020cb8:	bf18      	it	ne
 8020cba:	3401      	addne	r4, #1
 8020cbc:	6805      	ldr	r5, [r0, #0]
 8020cbe:	9105      	str	r1, [sp, #20]
 8020cc0:	bf18      	it	ne
 8020cc2:	f024 0401 	bicne.w	r4, r4, #1
 8020cc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020cc8:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8020ccc:	bf18      	it	ne
 8020cce:	b2a4      	uxthne	r4, r4
 8020cd0:	9104      	str	r1, [sp, #16]
 8020cd2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020cd4:	e9cd 4b00 	strd	r4, fp, [sp]
 8020cd8:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8020cdc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020cde:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8020ce0:	47a0      	blx	r4
 8020ce2:	b019      	add	sp, #100	; 0x64
 8020ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020cea:	2b00      	cmp	r3, #0
 8020cec:	f47f af5d 	bne.w	8020baa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8020cf0:	23ff      	movs	r3, #255	; 0xff
 8020cf2:	46c1      	mov	r9, r8
 8020cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8020cf6:	2301      	movs	r3, #1
 8020cf8:	9307      	str	r3, [sp, #28]
 8020cfa:	e687      	b.n	8020a0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8020cfc:	200057e0 	.word	0x200057e0

08020d00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8020d00:	b538      	push	{r3, r4, r5, lr}
 8020d02:	4c15      	ldr	r4, [pc, #84]	; (8020d58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8020d04:	4605      	mov	r5, r0
 8020d06:	7823      	ldrb	r3, [r4, #0]
 8020d08:	f3bf 8f5b 	dmb	ish
 8020d0c:	07da      	lsls	r2, r3, #31
 8020d0e:	d40b      	bmi.n	8020d28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8020d10:	4620      	mov	r0, r4
 8020d12:	f007 fc8c 	bl	802862e <__cxa_guard_acquire>
 8020d16:	b138      	cbz	r0, 8020d28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8020d18:	4620      	mov	r0, r4
 8020d1a:	f007 fc94 	bl	8028646 <__cxa_guard_release>
 8020d1e:	4a0f      	ldr	r2, [pc, #60]	; (8020d5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020d20:	490f      	ldr	r1, [pc, #60]	; (8020d60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8020d22:	4810      	ldr	r0, [pc, #64]	; (8020d64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020d24:	f007 fc7c 	bl	8028620 <__aeabi_atexit>
 8020d28:	4c0f      	ldr	r4, [pc, #60]	; (8020d68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8020d2a:	7823      	ldrb	r3, [r4, #0]
 8020d2c:	f3bf 8f5b 	dmb	ish
 8020d30:	07db      	lsls	r3, r3, #31
 8020d32:	d40b      	bmi.n	8020d4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020d34:	4620      	mov	r0, r4
 8020d36:	f007 fc7a 	bl	802862e <__cxa_guard_acquire>
 8020d3a:	b138      	cbz	r0, 8020d4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020d3c:	4620      	mov	r0, r4
 8020d3e:	f007 fc82 	bl	8028646 <__cxa_guard_release>
 8020d42:	4a06      	ldr	r2, [pc, #24]	; (8020d5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020d44:	4909      	ldr	r1, [pc, #36]	; (8020d6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8020d46:	480a      	ldr	r0, [pc, #40]	; (8020d70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8020d48:	f007 fc6a 	bl	8028620 <__aeabi_atexit>
 8020d4c:	4b05      	ldr	r3, [pc, #20]	; (8020d64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020d4e:	612b      	str	r3, [r5, #16]
 8020d50:	4b07      	ldr	r3, [pc, #28]	; (8020d70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8020d52:	616b      	str	r3, [r5, #20]
 8020d54:	bd38      	pop	{r3, r4, r5, pc}
 8020d56:	bf00      	nop
 8020d58:	200058ac 	.word	0x200058ac
 8020d5c:	20000000 	.word	0x20000000
 8020d60:	0801f303 	.word	0x0801f303
 8020d64:	200001b8 	.word	0x200001b8
 8020d68:	200058b0 	.word	0x200058b0
 8020d6c:	0801f301 	.word	0x0801f301
 8020d70:	200001bc 	.word	0x200001bc

08020d74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8020d74:	b538      	push	{r3, r4, r5, lr}
 8020d76:	4c15      	ldr	r4, [pc, #84]	; (8020dcc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8020d78:	4605      	mov	r5, r0
 8020d7a:	7823      	ldrb	r3, [r4, #0]
 8020d7c:	f3bf 8f5b 	dmb	ish
 8020d80:	07da      	lsls	r2, r3, #31
 8020d82:	d40b      	bmi.n	8020d9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8020d84:	4620      	mov	r0, r4
 8020d86:	f007 fc52 	bl	802862e <__cxa_guard_acquire>
 8020d8a:	b138      	cbz	r0, 8020d9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8020d8c:	4620      	mov	r0, r4
 8020d8e:	f007 fc5a 	bl	8028646 <__cxa_guard_release>
 8020d92:	4a0f      	ldr	r2, [pc, #60]	; (8020dd0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8020d94:	490f      	ldr	r1, [pc, #60]	; (8020dd4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8020d96:	4810      	ldr	r0, [pc, #64]	; (8020dd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8020d98:	f007 fc42 	bl	8028620 <__aeabi_atexit>
 8020d9c:	4c0f      	ldr	r4, [pc, #60]	; (8020ddc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8020d9e:	7823      	ldrb	r3, [r4, #0]
 8020da0:	f3bf 8f5b 	dmb	ish
 8020da4:	07db      	lsls	r3, r3, #31
 8020da6:	d40b      	bmi.n	8020dc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8020da8:	4620      	mov	r0, r4
 8020daa:	f007 fc40 	bl	802862e <__cxa_guard_acquire>
 8020dae:	b138      	cbz	r0, 8020dc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8020db0:	4620      	mov	r0, r4
 8020db2:	f007 fc48 	bl	8028646 <__cxa_guard_release>
 8020db6:	4a06      	ldr	r2, [pc, #24]	; (8020dd0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8020db8:	4909      	ldr	r1, [pc, #36]	; (8020de0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8020dba:	480a      	ldr	r0, [pc, #40]	; (8020de4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8020dbc:	f007 fc30 	bl	8028620 <__aeabi_atexit>
 8020dc0:	4b05      	ldr	r3, [pc, #20]	; (8020dd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8020dc2:	60ab      	str	r3, [r5, #8]
 8020dc4:	4b07      	ldr	r3, [pc, #28]	; (8020de4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8020dc6:	60eb      	str	r3, [r5, #12]
 8020dc8:	bd38      	pop	{r3, r4, r5, pc}
 8020dca:	bf00      	nop
 8020dcc:	20005884 	.word	0x20005884
 8020dd0:	20000000 	.word	0x20000000
 8020dd4:	0801f307 	.word	0x0801f307
 8020dd8:	20000190 	.word	0x20000190
 8020ddc:	20005888 	.word	0x20005888
 8020de0:	0801f305 	.word	0x0801f305
 8020de4:	20000194 	.word	0x20000194

08020de8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8020de8:	b510      	push	{r4, lr}
 8020dea:	4604      	mov	r4, r0
 8020dec:	f7ff ff88 	bl	8020d00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8020df0:	4620      	mov	r0, r4
 8020df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020df6:	f7ff bfbd 	b.w	8020d74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08020dfc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8020dfc:	b538      	push	{r3, r4, r5, lr}
 8020dfe:	4c15      	ldr	r4, [pc, #84]	; (8020e54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8020e00:	4605      	mov	r5, r0
 8020e02:	7823      	ldrb	r3, [r4, #0]
 8020e04:	f3bf 8f5b 	dmb	ish
 8020e08:	07da      	lsls	r2, r3, #31
 8020e0a:	d40b      	bmi.n	8020e24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020e0c:	4620      	mov	r0, r4
 8020e0e:	f007 fc0e 	bl	802862e <__cxa_guard_acquire>
 8020e12:	b138      	cbz	r0, 8020e24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020e14:	4620      	mov	r0, r4
 8020e16:	f007 fc16 	bl	8028646 <__cxa_guard_release>
 8020e1a:	4a0f      	ldr	r2, [pc, #60]	; (8020e58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020e1c:	490f      	ldr	r1, [pc, #60]	; (8020e5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8020e1e:	4810      	ldr	r0, [pc, #64]	; (8020e60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020e20:	f007 fbfe 	bl	8028620 <__aeabi_atexit>
 8020e24:	4c0f      	ldr	r4, [pc, #60]	; (8020e64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8020e26:	7823      	ldrb	r3, [r4, #0]
 8020e28:	f3bf 8f5b 	dmb	ish
 8020e2c:	07db      	lsls	r3, r3, #31
 8020e2e:	d40b      	bmi.n	8020e48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020e30:	4620      	mov	r0, r4
 8020e32:	f007 fbfc 	bl	802862e <__cxa_guard_acquire>
 8020e36:	b138      	cbz	r0, 8020e48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020e38:	4620      	mov	r0, r4
 8020e3a:	f007 fc04 	bl	8028646 <__cxa_guard_release>
 8020e3e:	4a06      	ldr	r2, [pc, #24]	; (8020e58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020e40:	4909      	ldr	r1, [pc, #36]	; (8020e68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8020e42:	480a      	ldr	r0, [pc, #40]	; (8020e6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020e44:	f007 fbec 	bl	8028620 <__aeabi_atexit>
 8020e48:	4b05      	ldr	r3, [pc, #20]	; (8020e60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020e4a:	622b      	str	r3, [r5, #32]
 8020e4c:	4b07      	ldr	r3, [pc, #28]	; (8020e6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020e4e:	626b      	str	r3, [r5, #36]	; 0x24
 8020e50:	bd38      	pop	{r3, r4, r5, pc}
 8020e52:	bf00      	nop
 8020e54:	200058b4 	.word	0x200058b4
 8020e58:	20000000 	.word	0x20000000
 8020e5c:	0801f2fb 	.word	0x0801f2fb
 8020e60:	200001c0 	.word	0x200001c0
 8020e64:	200058b8 	.word	0x200058b8
 8020e68:	0801f2f9 	.word	0x0801f2f9
 8020e6c:	200001c4 	.word	0x200001c4

08020e70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8020e70:	b538      	push	{r3, r4, r5, lr}
 8020e72:	4c15      	ldr	r4, [pc, #84]	; (8020ec8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8020e74:	4605      	mov	r5, r0
 8020e76:	7823      	ldrb	r3, [r4, #0]
 8020e78:	f3bf 8f5b 	dmb	ish
 8020e7c:	07da      	lsls	r2, r3, #31
 8020e7e:	d40b      	bmi.n	8020e98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020e80:	4620      	mov	r0, r4
 8020e82:	f007 fbd4 	bl	802862e <__cxa_guard_acquire>
 8020e86:	b138      	cbz	r0, 8020e98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020e88:	4620      	mov	r0, r4
 8020e8a:	f007 fbdc 	bl	8028646 <__cxa_guard_release>
 8020e8e:	4a0f      	ldr	r2, [pc, #60]	; (8020ecc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020e90:	490f      	ldr	r1, [pc, #60]	; (8020ed0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8020e92:	4810      	ldr	r0, [pc, #64]	; (8020ed4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020e94:	f007 fbc4 	bl	8028620 <__aeabi_atexit>
 8020e98:	4c0f      	ldr	r4, [pc, #60]	; (8020ed8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8020e9a:	7823      	ldrb	r3, [r4, #0]
 8020e9c:	f3bf 8f5b 	dmb	ish
 8020ea0:	07db      	lsls	r3, r3, #31
 8020ea2:	d40b      	bmi.n	8020ebc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020ea4:	4620      	mov	r0, r4
 8020ea6:	f007 fbc2 	bl	802862e <__cxa_guard_acquire>
 8020eaa:	b138      	cbz	r0, 8020ebc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020eac:	4620      	mov	r0, r4
 8020eae:	f007 fbca 	bl	8028646 <__cxa_guard_release>
 8020eb2:	4a06      	ldr	r2, [pc, #24]	; (8020ecc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020eb4:	4909      	ldr	r1, [pc, #36]	; (8020edc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8020eb6:	480a      	ldr	r0, [pc, #40]	; (8020ee0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020eb8:	f007 fbb2 	bl	8028620 <__aeabi_atexit>
 8020ebc:	4b05      	ldr	r3, [pc, #20]	; (8020ed4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020ebe:	61ab      	str	r3, [r5, #24]
 8020ec0:	4b07      	ldr	r3, [pc, #28]	; (8020ee0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020ec2:	61eb      	str	r3, [r5, #28]
 8020ec4:	bd38      	pop	{r3, r4, r5, pc}
 8020ec6:	bf00      	nop
 8020ec8:	2000588c 	.word	0x2000588c
 8020ecc:	20000000 	.word	0x20000000
 8020ed0:	0801f2ff 	.word	0x0801f2ff
 8020ed4:	20000198 	.word	0x20000198
 8020ed8:	20005890 	.word	0x20005890
 8020edc:	0801f2fd 	.word	0x0801f2fd
 8020ee0:	2000019c 	.word	0x2000019c

08020ee4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8020ee4:	b510      	push	{r4, lr}
 8020ee6:	4604      	mov	r4, r0
 8020ee8:	f7ff ff88 	bl	8020dfc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8020eec:	4620      	mov	r0, r4
 8020eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ef2:	f7ff bfbd 	b.w	8020e70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08020ef8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8020ef8:	b538      	push	{r3, r4, r5, lr}
 8020efa:	4c15      	ldr	r4, [pc, #84]	; (8020f50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8020efc:	4605      	mov	r5, r0
 8020efe:	7823      	ldrb	r3, [r4, #0]
 8020f00:	f3bf 8f5b 	dmb	ish
 8020f04:	07da      	lsls	r2, r3, #31
 8020f06:	d40b      	bmi.n	8020f20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020f08:	4620      	mov	r0, r4
 8020f0a:	f007 fb90 	bl	802862e <__cxa_guard_acquire>
 8020f0e:	b138      	cbz	r0, 8020f20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020f10:	4620      	mov	r0, r4
 8020f12:	f007 fb98 	bl	8028646 <__cxa_guard_release>
 8020f16:	4a0f      	ldr	r2, [pc, #60]	; (8020f54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020f18:	490f      	ldr	r1, [pc, #60]	; (8020f58 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8020f1a:	4810      	ldr	r0, [pc, #64]	; (8020f5c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020f1c:	f007 fb80 	bl	8028620 <__aeabi_atexit>
 8020f20:	4c0f      	ldr	r4, [pc, #60]	; (8020f60 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8020f22:	7823      	ldrb	r3, [r4, #0]
 8020f24:	f3bf 8f5b 	dmb	ish
 8020f28:	07db      	lsls	r3, r3, #31
 8020f2a:	d40b      	bmi.n	8020f44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020f2c:	4620      	mov	r0, r4
 8020f2e:	f007 fb7e 	bl	802862e <__cxa_guard_acquire>
 8020f32:	b138      	cbz	r0, 8020f44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020f34:	4620      	mov	r0, r4
 8020f36:	f007 fb86 	bl	8028646 <__cxa_guard_release>
 8020f3a:	4a06      	ldr	r2, [pc, #24]	; (8020f54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020f3c:	4909      	ldr	r1, [pc, #36]	; (8020f64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8020f3e:	480a      	ldr	r0, [pc, #40]	; (8020f68 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020f40:	f007 fb6e 	bl	8028620 <__aeabi_atexit>
 8020f44:	4b05      	ldr	r3, [pc, #20]	; (8020f5c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020f46:	632b      	str	r3, [r5, #48]	; 0x30
 8020f48:	4b07      	ldr	r3, [pc, #28]	; (8020f68 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020f4a:	636b      	str	r3, [r5, #52]	; 0x34
 8020f4c:	bd38      	pop	{r3, r4, r5, pc}
 8020f4e:	bf00      	nop
 8020f50:	200058c4 	.word	0x200058c4
 8020f54:	20000000 	.word	0x20000000
 8020f58:	0801f2f3 	.word	0x0801f2f3
 8020f5c:	200001d0 	.word	0x200001d0
 8020f60:	200058c8 	.word	0x200058c8
 8020f64:	0801f2f1 	.word	0x0801f2f1
 8020f68:	200001d4 	.word	0x200001d4

08020f6c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8020f6c:	b538      	push	{r3, r4, r5, lr}
 8020f6e:	4c15      	ldr	r4, [pc, #84]	; (8020fc4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8020f70:	4605      	mov	r5, r0
 8020f72:	7823      	ldrb	r3, [r4, #0]
 8020f74:	f3bf 8f5b 	dmb	ish
 8020f78:	07da      	lsls	r2, r3, #31
 8020f7a:	d40b      	bmi.n	8020f94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020f7c:	4620      	mov	r0, r4
 8020f7e:	f007 fb56 	bl	802862e <__cxa_guard_acquire>
 8020f82:	b138      	cbz	r0, 8020f94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020f84:	4620      	mov	r0, r4
 8020f86:	f007 fb5e 	bl	8028646 <__cxa_guard_release>
 8020f8a:	4a0f      	ldr	r2, [pc, #60]	; (8020fc8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020f8c:	490f      	ldr	r1, [pc, #60]	; (8020fcc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8020f8e:	4810      	ldr	r0, [pc, #64]	; (8020fd0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020f90:	f007 fb46 	bl	8028620 <__aeabi_atexit>
 8020f94:	4c0f      	ldr	r4, [pc, #60]	; (8020fd4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8020f96:	7823      	ldrb	r3, [r4, #0]
 8020f98:	f3bf 8f5b 	dmb	ish
 8020f9c:	07db      	lsls	r3, r3, #31
 8020f9e:	d40b      	bmi.n	8020fb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020fa0:	4620      	mov	r0, r4
 8020fa2:	f007 fb44 	bl	802862e <__cxa_guard_acquire>
 8020fa6:	b138      	cbz	r0, 8020fb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020fa8:	4620      	mov	r0, r4
 8020faa:	f007 fb4c 	bl	8028646 <__cxa_guard_release>
 8020fae:	4a06      	ldr	r2, [pc, #24]	; (8020fc8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020fb0:	4909      	ldr	r1, [pc, #36]	; (8020fd8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8020fb2:	480a      	ldr	r0, [pc, #40]	; (8020fdc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020fb4:	f007 fb34 	bl	8028620 <__aeabi_atexit>
 8020fb8:	4b05      	ldr	r3, [pc, #20]	; (8020fd0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020fba:	62ab      	str	r3, [r5, #40]	; 0x28
 8020fbc:	4b07      	ldr	r3, [pc, #28]	; (8020fdc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020fbe:	62eb      	str	r3, [r5, #44]	; 0x2c
 8020fc0:	bd38      	pop	{r3, r4, r5, pc}
 8020fc2:	bf00      	nop
 8020fc4:	20005894 	.word	0x20005894
 8020fc8:	20000000 	.word	0x20000000
 8020fcc:	0801f2f7 	.word	0x0801f2f7
 8020fd0:	200001a0 	.word	0x200001a0
 8020fd4:	20005898 	.word	0x20005898
 8020fd8:	0801f2f5 	.word	0x0801f2f5
 8020fdc:	200001a4 	.word	0x200001a4

08020fe0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8020fe0:	b510      	push	{r4, lr}
 8020fe2:	4604      	mov	r4, r0
 8020fe4:	f7ff ff88 	bl	8020ef8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8020fe8:	4620      	mov	r0, r4
 8020fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020fee:	f7ff bfbd 	b.w	8020f6c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08020ff4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8020ff4:	b538      	push	{r3, r4, r5, lr}
 8020ff6:	4c15      	ldr	r4, [pc, #84]	; (802104c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8020ff8:	4605      	mov	r5, r0
 8020ffa:	7823      	ldrb	r3, [r4, #0]
 8020ffc:	f3bf 8f5b 	dmb	ish
 8021000:	07da      	lsls	r2, r3, #31
 8021002:	d40b      	bmi.n	802101c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021004:	4620      	mov	r0, r4
 8021006:	f007 fb12 	bl	802862e <__cxa_guard_acquire>
 802100a:	b138      	cbz	r0, 802101c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802100c:	4620      	mov	r0, r4
 802100e:	f007 fb1a 	bl	8028646 <__cxa_guard_release>
 8021012:	4a0f      	ldr	r2, [pc, #60]	; (8021050 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021014:	490f      	ldr	r1, [pc, #60]	; (8021054 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8021016:	4810      	ldr	r0, [pc, #64]	; (8021058 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021018:	f007 fb02 	bl	8028620 <__aeabi_atexit>
 802101c:	4c0f      	ldr	r4, [pc, #60]	; (802105c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802101e:	7823      	ldrb	r3, [r4, #0]
 8021020:	f3bf 8f5b 	dmb	ish
 8021024:	07db      	lsls	r3, r3, #31
 8021026:	d40b      	bmi.n	8021040 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021028:	4620      	mov	r0, r4
 802102a:	f007 fb00 	bl	802862e <__cxa_guard_acquire>
 802102e:	b138      	cbz	r0, 8021040 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021030:	4620      	mov	r0, r4
 8021032:	f007 fb08 	bl	8028646 <__cxa_guard_release>
 8021036:	4a06      	ldr	r2, [pc, #24]	; (8021050 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021038:	4909      	ldr	r1, [pc, #36]	; (8021060 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802103a:	480a      	ldr	r0, [pc, #40]	; (8021064 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802103c:	f007 faf0 	bl	8028620 <__aeabi_atexit>
 8021040:	4b05      	ldr	r3, [pc, #20]	; (8021058 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021042:	652b      	str	r3, [r5, #80]	; 0x50
 8021044:	4b07      	ldr	r3, [pc, #28]	; (8021064 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021046:	656b      	str	r3, [r5, #84]	; 0x54
 8021048:	bd38      	pop	{r3, r4, r5, pc}
 802104a:	bf00      	nop
 802104c:	200058cc 	.word	0x200058cc
 8021050:	20000000 	.word	0x20000000
 8021054:	0801f2e3 	.word	0x0801f2e3
 8021058:	200001d8 	.word	0x200001d8
 802105c:	200058d0 	.word	0x200058d0
 8021060:	0801f2e1 	.word	0x0801f2e1
 8021064:	200001dc 	.word	0x200001dc

08021068 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8021068:	b538      	push	{r3, r4, r5, lr}
 802106a:	4c15      	ldr	r4, [pc, #84]	; (80210c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 802106c:	4605      	mov	r5, r0
 802106e:	7823      	ldrb	r3, [r4, #0]
 8021070:	f3bf 8f5b 	dmb	ish
 8021074:	07da      	lsls	r2, r3, #31
 8021076:	d40b      	bmi.n	8021090 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021078:	4620      	mov	r0, r4
 802107a:	f007 fad8 	bl	802862e <__cxa_guard_acquire>
 802107e:	b138      	cbz	r0, 8021090 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021080:	4620      	mov	r0, r4
 8021082:	f007 fae0 	bl	8028646 <__cxa_guard_release>
 8021086:	4a0f      	ldr	r2, [pc, #60]	; (80210c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021088:	490f      	ldr	r1, [pc, #60]	; (80210c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802108a:	4810      	ldr	r0, [pc, #64]	; (80210cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802108c:	f007 fac8 	bl	8028620 <__aeabi_atexit>
 8021090:	4c0f      	ldr	r4, [pc, #60]	; (80210d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8021092:	7823      	ldrb	r3, [r4, #0]
 8021094:	f3bf 8f5b 	dmb	ish
 8021098:	07db      	lsls	r3, r3, #31
 802109a:	d40b      	bmi.n	80210b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 802109c:	4620      	mov	r0, r4
 802109e:	f007 fac6 	bl	802862e <__cxa_guard_acquire>
 80210a2:	b138      	cbz	r0, 80210b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80210a4:	4620      	mov	r0, r4
 80210a6:	f007 face 	bl	8028646 <__cxa_guard_release>
 80210aa:	4a06      	ldr	r2, [pc, #24]	; (80210c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80210ac:	4909      	ldr	r1, [pc, #36]	; (80210d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80210ae:	480a      	ldr	r0, [pc, #40]	; (80210d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80210b0:	f007 fab6 	bl	8028620 <__aeabi_atexit>
 80210b4:	4b05      	ldr	r3, [pc, #20]	; (80210cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80210b6:	64ab      	str	r3, [r5, #72]	; 0x48
 80210b8:	4b07      	ldr	r3, [pc, #28]	; (80210d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80210ba:	64eb      	str	r3, [r5, #76]	; 0x4c
 80210bc:	bd38      	pop	{r3, r4, r5, pc}
 80210be:	bf00      	nop
 80210c0:	200058d4 	.word	0x200058d4
 80210c4:	20000000 	.word	0x20000000
 80210c8:	0801f2e7 	.word	0x0801f2e7
 80210cc:	200001e0 	.word	0x200001e0
 80210d0:	200058d8 	.word	0x200058d8
 80210d4:	0801f2e5 	.word	0x0801f2e5
 80210d8:	200001e4 	.word	0x200001e4

080210dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80210dc:	b538      	push	{r3, r4, r5, lr}
 80210de:	4c15      	ldr	r4, [pc, #84]	; (8021134 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80210e0:	4605      	mov	r5, r0
 80210e2:	7823      	ldrb	r3, [r4, #0]
 80210e4:	f3bf 8f5b 	dmb	ish
 80210e8:	07da      	lsls	r2, r3, #31
 80210ea:	d40b      	bmi.n	8021104 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80210ec:	4620      	mov	r0, r4
 80210ee:	f007 fa9e 	bl	802862e <__cxa_guard_acquire>
 80210f2:	b138      	cbz	r0, 8021104 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80210f4:	4620      	mov	r0, r4
 80210f6:	f007 faa6 	bl	8028646 <__cxa_guard_release>
 80210fa:	4a0f      	ldr	r2, [pc, #60]	; (8021138 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80210fc:	490f      	ldr	r1, [pc, #60]	; (802113c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80210fe:	4810      	ldr	r0, [pc, #64]	; (8021140 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021100:	f007 fa8e 	bl	8028620 <__aeabi_atexit>
 8021104:	4c0f      	ldr	r4, [pc, #60]	; (8021144 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8021106:	7823      	ldrb	r3, [r4, #0]
 8021108:	f3bf 8f5b 	dmb	ish
 802110c:	07db      	lsls	r3, r3, #31
 802110e:	d40b      	bmi.n	8021128 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021110:	4620      	mov	r0, r4
 8021112:	f007 fa8c 	bl	802862e <__cxa_guard_acquire>
 8021116:	b138      	cbz	r0, 8021128 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021118:	4620      	mov	r0, r4
 802111a:	f007 fa94 	bl	8028646 <__cxa_guard_release>
 802111e:	4a06      	ldr	r2, [pc, #24]	; (8021138 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021120:	4909      	ldr	r1, [pc, #36]	; (8021148 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8021122:	480a      	ldr	r0, [pc, #40]	; (802114c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021124:	f007 fa7c 	bl	8028620 <__aeabi_atexit>
 8021128:	4b05      	ldr	r3, [pc, #20]	; (8021140 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802112a:	642b      	str	r3, [r5, #64]	; 0x40
 802112c:	4b07      	ldr	r3, [pc, #28]	; (802114c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802112e:	646b      	str	r3, [r5, #68]	; 0x44
 8021130:	bd38      	pop	{r3, r4, r5, pc}
 8021132:	bf00      	nop
 8021134:	2000589c 	.word	0x2000589c
 8021138:	20000000 	.word	0x20000000
 802113c:	0801f2eb 	.word	0x0801f2eb
 8021140:	200001a8 	.word	0x200001a8
 8021144:	200058a0 	.word	0x200058a0
 8021148:	0801f2e9 	.word	0x0801f2e9
 802114c:	200001ac 	.word	0x200001ac

08021150 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8021150:	b538      	push	{r3, r4, r5, lr}
 8021152:	4c15      	ldr	r4, [pc, #84]	; (80211a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8021154:	4605      	mov	r5, r0
 8021156:	7823      	ldrb	r3, [r4, #0]
 8021158:	f3bf 8f5b 	dmb	ish
 802115c:	07da      	lsls	r2, r3, #31
 802115e:	d40b      	bmi.n	8021178 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021160:	4620      	mov	r0, r4
 8021162:	f007 fa64 	bl	802862e <__cxa_guard_acquire>
 8021166:	b138      	cbz	r0, 8021178 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021168:	4620      	mov	r0, r4
 802116a:	f007 fa6c 	bl	8028646 <__cxa_guard_release>
 802116e:	4a0f      	ldr	r2, [pc, #60]	; (80211ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021170:	490f      	ldr	r1, [pc, #60]	; (80211b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8021172:	4810      	ldr	r0, [pc, #64]	; (80211b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021174:	f007 fa54 	bl	8028620 <__aeabi_atexit>
 8021178:	4c0f      	ldr	r4, [pc, #60]	; (80211b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802117a:	7823      	ldrb	r3, [r4, #0]
 802117c:	f3bf 8f5b 	dmb	ish
 8021180:	07db      	lsls	r3, r3, #31
 8021182:	d40b      	bmi.n	802119c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021184:	4620      	mov	r0, r4
 8021186:	f007 fa52 	bl	802862e <__cxa_guard_acquire>
 802118a:	b138      	cbz	r0, 802119c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 802118c:	4620      	mov	r0, r4
 802118e:	f007 fa5a 	bl	8028646 <__cxa_guard_release>
 8021192:	4a06      	ldr	r2, [pc, #24]	; (80211ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021194:	4909      	ldr	r1, [pc, #36]	; (80211bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8021196:	480a      	ldr	r0, [pc, #40]	; (80211c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021198:	f007 fa42 	bl	8028620 <__aeabi_atexit>
 802119c:	4b05      	ldr	r3, [pc, #20]	; (80211b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802119e:	63ab      	str	r3, [r5, #56]	; 0x38
 80211a0:	4b07      	ldr	r3, [pc, #28]	; (80211c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80211a2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80211a4:	bd38      	pop	{r3, r4, r5, pc}
 80211a6:	bf00      	nop
 80211a8:	200058bc 	.word	0x200058bc
 80211ac:	20000000 	.word	0x20000000
 80211b0:	0801f2ef 	.word	0x0801f2ef
 80211b4:	200001c8 	.word	0x200001c8
 80211b8:	200058c0 	.word	0x200058c0
 80211bc:	0801f2ed 	.word	0x0801f2ed
 80211c0:	200001cc 	.word	0x200001cc

080211c4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80211c4:	b510      	push	{r4, lr}
 80211c6:	4604      	mov	r4, r0
 80211c8:	f7ff ff14 	bl	8020ff4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80211cc:	4620      	mov	r0, r4
 80211ce:	f7ff ff85 	bl	80210dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80211d2:	4620      	mov	r0, r4
 80211d4:	f7ff ff48 	bl	8021068 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80211d8:	4620      	mov	r0, r4
 80211da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80211de:	f7ff bfb7 	b.w	8021150 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080211e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80211e4:	b538      	push	{r3, r4, r5, lr}
 80211e6:	4c15      	ldr	r4, [pc, #84]	; (802123c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80211e8:	4605      	mov	r5, r0
 80211ea:	7823      	ldrb	r3, [r4, #0]
 80211ec:	f3bf 8f5b 	dmb	ish
 80211f0:	07da      	lsls	r2, r3, #31
 80211f2:	d40b      	bmi.n	802120c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80211f4:	4620      	mov	r0, r4
 80211f6:	f007 fa1a 	bl	802862e <__cxa_guard_acquire>
 80211fa:	b138      	cbz	r0, 802120c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80211fc:	4620      	mov	r0, r4
 80211fe:	f007 fa22 	bl	8028646 <__cxa_guard_release>
 8021202:	4a0f      	ldr	r2, [pc, #60]	; (8021240 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021204:	490f      	ldr	r1, [pc, #60]	; (8021244 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021206:	4810      	ldr	r0, [pc, #64]	; (8021248 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021208:	f007 fa0a 	bl	8028620 <__aeabi_atexit>
 802120c:	4c0f      	ldr	r4, [pc, #60]	; (802124c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802120e:	7823      	ldrb	r3, [r4, #0]
 8021210:	f3bf 8f5b 	dmb	ish
 8021214:	07db      	lsls	r3, r3, #31
 8021216:	d40b      	bmi.n	8021230 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021218:	4620      	mov	r0, r4
 802121a:	f007 fa08 	bl	802862e <__cxa_guard_acquire>
 802121e:	b138      	cbz	r0, 8021230 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021220:	4620      	mov	r0, r4
 8021222:	f007 fa10 	bl	8028646 <__cxa_guard_release>
 8021226:	4a06      	ldr	r2, [pc, #24]	; (8021240 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021228:	4909      	ldr	r1, [pc, #36]	; (8021250 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802122a:	480a      	ldr	r0, [pc, #40]	; (8021254 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802122c:	f007 f9f8 	bl	8028620 <__aeabi_atexit>
 8021230:	4b05      	ldr	r3, [pc, #20]	; (8021248 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021232:	662b      	str	r3, [r5, #96]	; 0x60
 8021234:	4b07      	ldr	r3, [pc, #28]	; (8021254 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021236:	666b      	str	r3, [r5, #100]	; 0x64
 8021238:	bd38      	pop	{r3, r4, r5, pc}
 802123a:	bf00      	nop
 802123c:	200058a4 	.word	0x200058a4
 8021240:	20000000 	.word	0x20000000
 8021244:	0801f2db 	.word	0x0801f2db
 8021248:	200001b0 	.word	0x200001b0
 802124c:	200058a8 	.word	0x200058a8
 8021250:	0801f2d9 	.word	0x0801f2d9
 8021254:	200001b4 	.word	0x200001b4

08021258 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021258:	b538      	push	{r3, r4, r5, lr}
 802125a:	4c15      	ldr	r4, [pc, #84]	; (80212b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802125c:	4605      	mov	r5, r0
 802125e:	7823      	ldrb	r3, [r4, #0]
 8021260:	f3bf 8f5b 	dmb	ish
 8021264:	07da      	lsls	r2, r3, #31
 8021266:	d40b      	bmi.n	8021280 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021268:	4620      	mov	r0, r4
 802126a:	f007 f9e0 	bl	802862e <__cxa_guard_acquire>
 802126e:	b138      	cbz	r0, 8021280 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021270:	4620      	mov	r0, r4
 8021272:	f007 f9e8 	bl	8028646 <__cxa_guard_release>
 8021276:	4a0f      	ldr	r2, [pc, #60]	; (80212b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021278:	490f      	ldr	r1, [pc, #60]	; (80212b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802127a:	4810      	ldr	r0, [pc, #64]	; (80212bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802127c:	f007 f9d0 	bl	8028620 <__aeabi_atexit>
 8021280:	4c0f      	ldr	r4, [pc, #60]	; (80212c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021282:	7823      	ldrb	r3, [r4, #0]
 8021284:	f3bf 8f5b 	dmb	ish
 8021288:	07db      	lsls	r3, r3, #31
 802128a:	d40b      	bmi.n	80212a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802128c:	4620      	mov	r0, r4
 802128e:	f007 f9ce 	bl	802862e <__cxa_guard_acquire>
 8021292:	b138      	cbz	r0, 80212a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021294:	4620      	mov	r0, r4
 8021296:	f007 f9d6 	bl	8028646 <__cxa_guard_release>
 802129a:	4a06      	ldr	r2, [pc, #24]	; (80212b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802129c:	4909      	ldr	r1, [pc, #36]	; (80212c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802129e:	480a      	ldr	r0, [pc, #40]	; (80212c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80212a0:	f007 f9be 	bl	8028620 <__aeabi_atexit>
 80212a4:	4b05      	ldr	r3, [pc, #20]	; (80212bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80212a6:	65ab      	str	r3, [r5, #88]	; 0x58
 80212a8:	4b07      	ldr	r3, [pc, #28]	; (80212c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80212aa:	65eb      	str	r3, [r5, #92]	; 0x5c
 80212ac:	bd38      	pop	{r3, r4, r5, pc}
 80212ae:	bf00      	nop
 80212b0:	2000587c 	.word	0x2000587c
 80212b4:	20000000 	.word	0x20000000
 80212b8:	0801f2df 	.word	0x0801f2df
 80212bc:	20000188 	.word	0x20000188
 80212c0:	20005880 	.word	0x20005880
 80212c4:	0801f2dd 	.word	0x0801f2dd
 80212c8:	2000018c 	.word	0x2000018c

080212cc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80212cc:	b510      	push	{r4, lr}
 80212ce:	4604      	mov	r4, r0
 80212d0:	f7ff ff88 	bl	80211e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80212d4:	4620      	mov	r0, r4
 80212d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80212da:	f7ff bfbd 	b.w	8021258 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080212e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80212e0:	b538      	push	{r3, r4, r5, lr}
 80212e2:	4c15      	ldr	r4, [pc, #84]	; (8021338 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80212e4:	4605      	mov	r5, r0
 80212e6:	7823      	ldrb	r3, [r4, #0]
 80212e8:	f3bf 8f5b 	dmb	ish
 80212ec:	07da      	lsls	r2, r3, #31
 80212ee:	d40b      	bmi.n	8021308 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80212f0:	4620      	mov	r0, r4
 80212f2:	f007 f99c 	bl	802862e <__cxa_guard_acquire>
 80212f6:	b138      	cbz	r0, 8021308 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80212f8:	4620      	mov	r0, r4
 80212fa:	f007 f9a4 	bl	8028646 <__cxa_guard_release>
 80212fe:	4a0f      	ldr	r2, [pc, #60]	; (802133c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021300:	490f      	ldr	r1, [pc, #60]	; (8021340 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021302:	4810      	ldr	r0, [pc, #64]	; (8021344 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021304:	f007 f98c 	bl	8028620 <__aeabi_atexit>
 8021308:	4c0f      	ldr	r4, [pc, #60]	; (8021348 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802130a:	7823      	ldrb	r3, [r4, #0]
 802130c:	f3bf 8f5b 	dmb	ish
 8021310:	07db      	lsls	r3, r3, #31
 8021312:	d40b      	bmi.n	802132c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021314:	4620      	mov	r0, r4
 8021316:	f007 f98a 	bl	802862e <__cxa_guard_acquire>
 802131a:	b138      	cbz	r0, 802132c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802131c:	4620      	mov	r0, r4
 802131e:	f007 f992 	bl	8028646 <__cxa_guard_release>
 8021322:	4a06      	ldr	r2, [pc, #24]	; (802133c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021324:	4909      	ldr	r1, [pc, #36]	; (802134c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021326:	480a      	ldr	r0, [pc, #40]	; (8021350 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021328:	f007 f97a 	bl	8028620 <__aeabi_atexit>
 802132c:	4b05      	ldr	r3, [pc, #20]	; (8021344 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802132e:	672b      	str	r3, [r5, #112]	; 0x70
 8021330:	4b07      	ldr	r3, [pc, #28]	; (8021350 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021332:	676b      	str	r3, [r5, #116]	; 0x74
 8021334:	bd38      	pop	{r3, r4, r5, pc}
 8021336:	bf00      	nop
 8021338:	20005874 	.word	0x20005874
 802133c:	20000000 	.word	0x20000000
 8021340:	0801f2d3 	.word	0x0801f2d3
 8021344:	20000180 	.word	0x20000180
 8021348:	20005878 	.word	0x20005878
 802134c:	0801f2d1 	.word	0x0801f2d1
 8021350:	20000184 	.word	0x20000184

08021354 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021354:	b538      	push	{r3, r4, r5, lr}
 8021356:	4c15      	ldr	r4, [pc, #84]	; (80213ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021358:	4605      	mov	r5, r0
 802135a:	7823      	ldrb	r3, [r4, #0]
 802135c:	f3bf 8f5b 	dmb	ish
 8021360:	07da      	lsls	r2, r3, #31
 8021362:	d40b      	bmi.n	802137c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021364:	4620      	mov	r0, r4
 8021366:	f007 f962 	bl	802862e <__cxa_guard_acquire>
 802136a:	b138      	cbz	r0, 802137c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802136c:	4620      	mov	r0, r4
 802136e:	f007 f96a 	bl	8028646 <__cxa_guard_release>
 8021372:	4a0f      	ldr	r2, [pc, #60]	; (80213b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021374:	490f      	ldr	r1, [pc, #60]	; (80213b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021376:	4810      	ldr	r0, [pc, #64]	; (80213b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021378:	f007 f952 	bl	8028620 <__aeabi_atexit>
 802137c:	4c0f      	ldr	r4, [pc, #60]	; (80213bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802137e:	7823      	ldrb	r3, [r4, #0]
 8021380:	f3bf 8f5b 	dmb	ish
 8021384:	07db      	lsls	r3, r3, #31
 8021386:	d40b      	bmi.n	80213a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021388:	4620      	mov	r0, r4
 802138a:	f007 f950 	bl	802862e <__cxa_guard_acquire>
 802138e:	b138      	cbz	r0, 80213a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021390:	4620      	mov	r0, r4
 8021392:	f007 f958 	bl	8028646 <__cxa_guard_release>
 8021396:	4a06      	ldr	r2, [pc, #24]	; (80213b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021398:	4909      	ldr	r1, [pc, #36]	; (80213c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802139a:	480a      	ldr	r0, [pc, #40]	; (80213c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802139c:	f007 f940 	bl	8028620 <__aeabi_atexit>
 80213a0:	4b05      	ldr	r3, [pc, #20]	; (80213b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80213a2:	66ab      	str	r3, [r5, #104]	; 0x68
 80213a4:	4b07      	ldr	r3, [pc, #28]	; (80213c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80213a6:	66eb      	str	r3, [r5, #108]	; 0x6c
 80213a8:	bd38      	pop	{r3, r4, r5, pc}
 80213aa:	bf00      	nop
 80213ac:	2000586c 	.word	0x2000586c
 80213b0:	20000000 	.word	0x20000000
 80213b4:	0801f2d7 	.word	0x0801f2d7
 80213b8:	20000178 	.word	0x20000178
 80213bc:	20005870 	.word	0x20005870
 80213c0:	0801f2d5 	.word	0x0801f2d5
 80213c4:	2000017c 	.word	0x2000017c

080213c8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80213c8:	b510      	push	{r4, lr}
 80213ca:	4604      	mov	r4, r0
 80213cc:	f7ff ff88 	bl	80212e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80213d0:	4620      	mov	r0, r4
 80213d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80213d6:	f7ff bfbd 	b.w	8021354 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080213da <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80213da:	b510      	push	{r4, lr}
 80213dc:	4604      	mov	r4, r0
 80213de:	f7ff fff3 	bl	80213c8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80213e2:	4620      	mov	r0, r4
 80213e4:	f7ff ff72 	bl	80212cc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80213e8:	4620      	mov	r0, r4
 80213ea:	f7ff fdf9 	bl	8020fe0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80213ee:	4620      	mov	r0, r4
 80213f0:	f7ff fcfa 	bl	8020de8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 80213f4:	4620      	mov	r0, r4
 80213f6:	f7ff fd75 	bl	8020ee4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 80213fa:	4620      	mov	r0, r4
 80213fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021400:	f7ff bee0 	b.w	80211c4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08021404 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8021404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021408:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 802140c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021410:	f1be 0f00 	cmp.w	lr, #0
 8021414:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8021418:	fb0e 4708 	mla	r7, lr, r8, r4
 802141c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8021420:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8021424:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8021428:	eb02 0a07 	add.w	sl, r2, r7
 802142c:	8808      	ldrh	r0, [r1, #0]
 802142e:	db37      	blt.n	80214a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8021430:	45f3      	cmp	fp, lr
 8021432:	dd35      	ble.n	80214a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8021434:	2c00      	cmp	r4, #0
 8021436:	db31      	blt.n	802149c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8021438:	45a0      	cmp	r8, r4
 802143a:	dd2f      	ble.n	802149c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 802143c:	5dd2      	ldrb	r2, [r2, r7]
 802143e:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8021442:	1c62      	adds	r2, r4, #1
 8021444:	d42f      	bmi.n	80214a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8021446:	4590      	cmp	r8, r2
 8021448:	dd2d      	ble.n	80214a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802144a:	b366      	cbz	r6, 80214a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802144c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021450:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8021454:	f11e 0e01 	adds.w	lr, lr, #1
 8021458:	d429      	bmi.n	80214ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802145a:	45f3      	cmp	fp, lr
 802145c:	dd27      	ble.n	80214ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802145e:	f1bc 0f00 	cmp.w	ip, #0
 8021462:	f000 80a0 	beq.w	80215a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 8021466:	2c00      	cmp	r4, #0
 8021468:	db1f      	blt.n	80214aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802146a:	45a0      	cmp	r8, r4
 802146c:	dd1d      	ble.n	80214aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802146e:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8021472:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8021476:	3401      	adds	r4, #1
 8021478:	d41c      	bmi.n	80214b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 802147a:	45a0      	cmp	r8, r4
 802147c:	dd1a      	ble.n	80214b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 802147e:	b1de      	cbz	r6, 80214b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8021480:	44d0      	add	r8, sl
 8021482:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021486:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802148a:	2e0f      	cmp	r6, #15
 802148c:	d915      	bls.n	80214ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 802148e:	4b49      	ldr	r3, [pc, #292]	; (80215b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8021490:	f240 11ef 	movw	r1, #495	; 0x1ef
 8021494:	4a48      	ldr	r2, [pc, #288]	; (80215b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8021496:	4849      	ldr	r0, [pc, #292]	; (80215bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8021498:	f007 f8f6 	bl	8028688 <__assert_func>
 802149c:	4681      	mov	r9, r0
 802149e:	e7d0      	b.n	8021442 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 80214a0:	4607      	mov	r7, r0
 80214a2:	4681      	mov	r9, r0
 80214a4:	e7d6      	b.n	8021454 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80214a6:	4607      	mov	r7, r0
 80214a8:	e7d4      	b.n	8021454 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80214aa:	4686      	mov	lr, r0
 80214ac:	e7e3      	b.n	8021476 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 80214ae:	4603      	mov	r3, r0
 80214b0:	4686      	mov	lr, r0
 80214b2:	e7ea      	b.n	802148a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80214b4:	4603      	mov	r3, r0
 80214b6:	e7e8      	b.n	802148a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80214b8:	4603      	mov	r3, r0
 80214ba:	f1bc 0f0f 	cmp.w	ip, #15
 80214be:	d8e6      	bhi.n	802148e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80214c0:	fb16 f80c 	smulbb	r8, r6, ip
 80214c4:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80214c8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80214cc:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80214d0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80214d4:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80214d8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80214dc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80214e0:	ea44 0909 	orr.w	r9, r4, r9
 80214e4:	f1cc 0410 	rsb	r4, ip, #16
 80214e8:	041a      	lsls	r2, r3, #16
 80214ea:	ea4a 0707 	orr.w	r7, sl, r7
 80214ee:	1ba4      	subs	r4, r4, r6
 80214f0:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80214f4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80214f8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80214fc:	4377      	muls	r7, r6
 80214fe:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8021502:	4313      	orrs	r3, r2
 8021504:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8021508:	fb04 7409 	mla	r4, r4, r9, r7
 802150c:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8021510:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021514:	b2af      	uxth	r7, r5
 8021516:	fb08 4303 	mla	r3, r8, r3, r4
 802151a:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 802151e:	43ed      	mvns	r5, r5
 8021520:	10c6      	asrs	r6, r0, #3
 8021522:	4322      	orrs	r2, r4
 8021524:	b2ed      	uxtb	r5, r5
 8021526:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802152a:	fb0c 3202 	mla	r2, ip, r2, r3
 802152e:	fb16 f605 	smulbb	r6, r6, r5
 8021532:	0d53      	lsrs	r3, r2, #21
 8021534:	0952      	lsrs	r2, r2, #5
 8021536:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802153a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802153e:	431a      	orrs	r2, r3
 8021540:	b293      	uxth	r3, r2
 8021542:	1202      	asrs	r2, r0, #8
 8021544:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021548:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802154c:	00dc      	lsls	r4, r3, #3
 802154e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021552:	fb12 f205 	smulbb	r2, r2, r5
 8021556:	b2e4      	uxtb	r4, r4
 8021558:	fb0c 2c07 	mla	ip, ip, r7, r2
 802155c:	10da      	asrs	r2, r3, #3
 802155e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021562:	fa1f fc8c 	uxth.w	ip, ip
 8021566:	fb02 6207 	mla	r2, r2, r7, r6
 802156a:	f10c 0301 	add.w	r3, ip, #1
 802156e:	b296      	uxth	r6, r2
 8021570:	00c2      	lsls	r2, r0, #3
 8021572:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8021576:	b2d2      	uxtb	r2, r2
 8021578:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802157c:	fb12 f205 	smulbb	r2, r2, r5
 8021580:	fb04 2207 	mla	r2, r4, r7, r2
 8021584:	b292      	uxth	r2, r2
 8021586:	1c50      	adds	r0, r2, #1
 8021588:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802158c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021590:	4313      	orrs	r3, r2
 8021592:	1c72      	adds	r2, r6, #1
 8021594:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8021598:	0952      	lsrs	r2, r2, #5
 802159a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802159e:	4313      	orrs	r3, r2
 80215a0:	800b      	strh	r3, [r1, #0]
 80215a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215a6:	2e0f      	cmp	r6, #15
 80215a8:	f63f af71 	bhi.w	802148e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80215ac:	4603      	mov	r3, r0
 80215ae:	4686      	mov	lr, r0
 80215b0:	e786      	b.n	80214c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 80215b2:	bf00      	nop
 80215b4:	0802cea2 	.word	0x0802cea2
 80215b8:	0802d50e 	.word	0x0802d50e
 80215bc:	0802cf8b 	.word	0x0802cf8b

080215c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80215c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215c4:	ed2d 8b08 	vpush	{d8-d11}
 80215c8:	b099      	sub	sp, #100	; 0x64
 80215ca:	eeb0 aa40 	vmov.f32	s20, s0
 80215ce:	eef0 9a60 	vmov.f32	s19, s1
 80215d2:	9215      	str	r2, [sp, #84]	; 0x54
 80215d4:	eeb0 9a41 	vmov.f32	s18, s2
 80215d8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80215da:	eeb0 8a62 	vmov.f32	s16, s5
 80215de:	9309      	str	r3, [sp, #36]	; 0x24
 80215e0:	eef0 8a43 	vmov.f32	s17, s6
 80215e4:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80215e8:	eef0 ba44 	vmov.f32	s23, s8
 80215ec:	9016      	str	r0, [sp, #88]	; 0x58
 80215ee:	eeb0 ba64 	vmov.f32	s22, s9
 80215f2:	930d      	str	r3, [sp, #52]	; 0x34
 80215f4:	eef0 aa45 	vmov.f32	s21, s10
 80215f8:	6850      	ldr	r0, [r2, #4]
 80215fa:	910c      	str	r1, [sp, #48]	; 0x30
 80215fc:	6812      	ldr	r2, [r2, #0]
 80215fe:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8021602:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8021606:	fb00 1303 	mla	r3, r0, r3, r1
 802160a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 802160e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021610:	681b      	ldr	r3, [r3, #0]
 8021612:	930b      	str	r3, [sp, #44]	; 0x2c
 8021614:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021616:	685e      	ldr	r6, [r3, #4]
 8021618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802161a:	3604      	adds	r6, #4
 802161c:	43db      	mvns	r3, r3
 802161e:	b2db      	uxtb	r3, r3
 8021620:	930a      	str	r3, [sp, #40]	; 0x28
 8021622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021624:	2b00      	cmp	r3, #0
 8021626:	dc03      	bgt.n	8021630 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802162a:	2b00      	cmp	r3, #0
 802162c:	f340 8226 	ble.w	8021a7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8021630:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021632:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021636:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802163a:	1e48      	subs	r0, r1, #1
 802163c:	1e57      	subs	r7, r2, #1
 802163e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021640:	2b00      	cmp	r3, #0
 8021642:	f340 80e4 	ble.w	802180e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8021646:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802164a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802164e:	d406      	bmi.n	802165e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021650:	4584      	cmp	ip, r0
 8021652:	da04      	bge.n	802165e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021654:	2b00      	cmp	r3, #0
 8021656:	db02      	blt.n	802165e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021658:	42bb      	cmp	r3, r7
 802165a:	f2c0 80d9 	blt.w	8021810 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802165e:	f11c 0c01 	adds.w	ip, ip, #1
 8021662:	f100 80ca 	bmi.w	80217fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021666:	4561      	cmp	r1, ip
 8021668:	f2c0 80c7 	blt.w	80217fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802166c:	3301      	adds	r3, #1
 802166e:	f100 80c4 	bmi.w	80217fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021672:	429a      	cmp	r2, r3
 8021674:	f2c0 80c1 	blt.w	80217fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021678:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802167c:	4647      	mov	r7, r8
 802167e:	f1bb 0f00 	cmp.w	fp, #0
 8021682:	f340 80e4 	ble.w	802184e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8021686:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8021688:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802168c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802168e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8021692:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021696:	ea5f 422a 	movs.w	r2, sl, asr #16
 802169a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802169e:	689b      	ldr	r3, [r3, #8]
 80216a0:	f100 8122 	bmi.w	80218e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 80216a4:	f103 39ff 	add.w	r9, r3, #4294967295
 80216a8:	454a      	cmp	r2, r9
 80216aa:	f280 811d 	bge.w	80218e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 80216ae:	f1bc 0f00 	cmp.w	ip, #0
 80216b2:	f2c0 8119 	blt.w	80218e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 80216b6:	f10e 39ff 	add.w	r9, lr, #4294967295
 80216ba:	45cc      	cmp	ip, r9
 80216bc:	f280 8114 	bge.w	80218e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 80216c0:	b21b      	sxth	r3, r3
 80216c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80216c4:	fb0c 2203 	mla	r2, ip, r3, r2
 80216c8:	eb04 0902 	add.w	r9, r4, r2
 80216cc:	5ca2      	ldrb	r2, [r4, r2]
 80216ce:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80216d2:	2800      	cmp	r0, #0
 80216d4:	f000 80ff 	beq.w	80218d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80216d8:	f899 2001 	ldrb.w	r2, [r9, #1]
 80216dc:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80216e0:	9211      	str	r2, [sp, #68]	; 0x44
 80216e2:	b151      	cbz	r1, 80216fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80216e4:	eb09 0203 	add.w	r2, r9, r3
 80216e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80216ec:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80216f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80216f2:	7853      	ldrb	r3, [r2, #1]
 80216f4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80216f8:	9312      	str	r3, [sp, #72]	; 0x48
 80216fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80216fc:	fb10 f201 	smulbb	r2, r0, r1
 8021700:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021702:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021706:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802170a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 802170e:	10d2      	asrs	r2, r2, #3
 8021710:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021714:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8021718:	ea4c 0c03 	orr.w	ip, ip, r3
 802171c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802171e:	041b      	lsls	r3, r3, #16
 8021720:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021724:	4323      	orrs	r3, r4
 8021726:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021728:	4353      	muls	r3, r2
 802172a:	fb09 330c 	mla	r3, r9, ip, r3
 802172e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8021732:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021736:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802173a:	ea4c 0e0e 	orr.w	lr, ip, lr
 802173e:	f1c1 0c10 	rsb	ip, r1, #16
 8021742:	ebac 0c00 	sub.w	ip, ip, r0
 8021746:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802174a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802174e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8021752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021754:	0418      	lsls	r0, r3, #16
 8021756:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802175a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802175e:	4318      	orrs	r0, r3
 8021760:	fb02 c200 	mla	r2, r2, r0, ip
 8021764:	f8b7 c000 	ldrh.w	ip, [r7]
 8021768:	0d53      	lsrs	r3, r2, #21
 802176a:	0952      	lsrs	r2, r2, #5
 802176c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021770:	ea4f 212c 	mov.w	r1, ip, asr #8
 8021774:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021778:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802177c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021780:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021784:	431a      	orrs	r2, r3
 8021786:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 802178a:	fb11 f104 	smulbb	r1, r1, r4
 802178e:	fa5f fc8c 	uxtb.w	ip, ip
 8021792:	b292      	uxth	r2, r2
 8021794:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021798:	fb1c fc04 	smulbb	ip, ip, r4
 802179c:	fb1e fe04 	smulbb	lr, lr, r4
 80217a0:	1210      	asrs	r0, r2, #8
 80217a2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80217a6:	fb00 1003 	mla	r0, r0, r3, r1
 80217aa:	10d1      	asrs	r1, r2, #3
 80217ac:	00d2      	lsls	r2, r2, #3
 80217ae:	b280      	uxth	r0, r0
 80217b0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80217b4:	b2d2      	uxtb	r2, r2
 80217b6:	fb01 e103 	mla	r1, r1, r3, lr
 80217ba:	fb02 c203 	mla	r2, r2, r3, ip
 80217be:	1c43      	adds	r3, r0, #1
 80217c0:	b289      	uxth	r1, r1
 80217c2:	b292      	uxth	r2, r2
 80217c4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80217c8:	f102 0c01 	add.w	ip, r2, #1
 80217cc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80217d0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80217d4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80217d8:	4313      	orrs	r3, r2
 80217da:	1c4a      	adds	r2, r1, #1
 80217dc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80217e0:	0949      	lsrs	r1, r1, #5
 80217e2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80217e6:	430b      	orrs	r3, r1
 80217e8:	803b      	strh	r3, [r7, #0]
 80217ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80217ec:	3702      	adds	r7, #2
 80217ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80217f2:	449a      	add	sl, r3
 80217f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80217f6:	441d      	add	r5, r3
 80217f8:	e741      	b.n	802167e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80217fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80217fc:	f108 0802 	add.w	r8, r8, #2
 8021800:	449a      	add	sl, r3
 8021802:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021804:	441d      	add	r5, r3
 8021806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021808:	3b01      	subs	r3, #1
 802180a:	9309      	str	r3, [sp, #36]	; 0x24
 802180c:	e717      	b.n	802163e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802180e:	d023      	beq.n	8021858 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8021810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021812:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8021814:	3b01      	subs	r3, #1
 8021816:	fb00 a003 	mla	r0, r0, r3, sl
 802181a:	1400      	asrs	r0, r0, #16
 802181c:	f53f af2c 	bmi.w	8021678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021820:	3901      	subs	r1, #1
 8021822:	4288      	cmp	r0, r1
 8021824:	f6bf af28 	bge.w	8021678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021828:	992e      	ldr	r1, [sp, #184]	; 0xb8
 802182a:	fb01 5303 	mla	r3, r1, r3, r5
 802182e:	141b      	asrs	r3, r3, #16
 8021830:	f53f af22 	bmi.w	8021678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021834:	3a01      	subs	r2, #1
 8021836:	4293      	cmp	r3, r2
 8021838:	f6bf af1e 	bge.w	8021678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802183c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021840:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8021844:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8021848:	f1be 0f00 	cmp.w	lr, #0
 802184c:	dc6c      	bgt.n	8021928 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802184e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021850:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021854:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8021858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802185a:	2b00      	cmp	r3, #0
 802185c:	f340 810e 	ble.w	8021a7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8021860:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021864:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021866:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802186a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802186e:	eef0 6a48 	vmov.f32	s13, s16
 8021872:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021876:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802187a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802187e:	ee16 aa90 	vmov	sl, s13
 8021882:	eef0 6a68 	vmov.f32	s13, s17
 8021886:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802188a:	ee16 5a90 	vmov	r5, s13
 802188e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021892:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021896:	ee37 8a48 	vsub.f32	s16, s14, s16
 802189a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802189e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80218a2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80218a6:	ee18 2a10 	vmov	r2, s16
 80218aa:	eeb0 8a47 	vmov.f32	s16, s14
 80218ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80218b2:	ee18 2a90 	vmov	r2, s17
 80218b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80218b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80218ba:	eef0 8a67 	vmov.f32	s17, s15
 80218be:	fb92 f3f3 	sdiv	r3, r2, r3
 80218c2:	932e      	str	r3, [sp, #184]	; 0xb8
 80218c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80218c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80218c8:	3b01      	subs	r3, #1
 80218ca:	930c      	str	r3, [sp, #48]	; 0x30
 80218cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80218ce:	bf08      	it	eq
 80218d0:	4613      	moveq	r3, r2
 80218d2:	9309      	str	r3, [sp, #36]	; 0x24
 80218d4:	e6a5      	b.n	8021622 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80218d6:	2900      	cmp	r1, #0
 80218d8:	f43f af0f 	beq.w	80216fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80218dc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80218e0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80218e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80218e6:	e708      	b.n	80216fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80218e8:	f112 0901 	adds.w	r9, r2, #1
 80218ec:	f53f af7d 	bmi.w	80217ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80218f0:	454b      	cmp	r3, r9
 80218f2:	f6ff af7a 	blt.w	80217ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80218f6:	f11c 0901 	adds.w	r9, ip, #1
 80218fa:	f53f af76 	bmi.w	80217ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80218fe:	45ce      	cmp	lr, r9
 8021900:	f6ff af73 	blt.w	80217ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021904:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021906:	b21b      	sxth	r3, r3
 8021908:	9202      	str	r2, [sp, #8]
 802190a:	fa0f f28e 	sxth.w	r2, lr
 802190e:	9300      	str	r3, [sp, #0]
 8021910:	4633      	mov	r3, r6
 8021912:	9201      	str	r2, [sp, #4]
 8021914:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021916:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802191a:	e9cd c003 	strd	ip, r0, [sp, #12]
 802191e:	4639      	mov	r1, r7
 8021920:	9816      	ldr	r0, [sp, #88]	; 0x58
 8021922:	f7ff fd6f 	bl	8021404 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8021926:	e760      	b.n	80217ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021928:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802192a:	ea4f 422a 	mov.w	r2, sl, asr #16
 802192e:	1429      	asrs	r1, r5, #16
 8021930:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021932:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021936:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802193a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802193e:	fb03 2101 	mla	r1, r3, r1, r2
 8021942:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021944:	440a      	add	r2, r1
 8021946:	5c61      	ldrb	r1, [r4, r1]
 8021948:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802194c:	f1bc 0f00 	cmp.w	ip, #0
 8021950:	f000 808c 	beq.w	8021a6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8021954:	7857      	ldrb	r7, [r2, #1]
 8021956:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 802195a:	9413      	str	r4, [sp, #76]	; 0x4c
 802195c:	b140      	cbz	r0, 8021970 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 802195e:	18d7      	adds	r7, r2, r3
 8021960:	5cd3      	ldrb	r3, [r2, r3]
 8021962:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021966:	9310      	str	r3, [sp, #64]	; 0x40
 8021968:	787b      	ldrb	r3, [r7, #1]
 802196a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802196e:	9314      	str	r3, [sp, #80]	; 0x50
 8021970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021972:	fb1c f200 	smulbb	r2, ip, r0
 8021976:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021978:	f10e 3eff 	add.w	lr, lr, #4294967295
 802197c:	041f      	lsls	r7, r3, #16
 802197e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021982:	10d2      	asrs	r2, r2, #3
 8021984:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8021988:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 802198c:	431f      	orrs	r7, r3
 802198e:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8021992:	9317      	str	r3, [sp, #92]	; 0x5c
 8021994:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021996:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021998:	041b      	lsls	r3, r3, #16
 802199a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802199e:	ea43 030b 	orr.w	r3, r3, fp
 80219a2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80219a6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80219aa:	4353      	muls	r3, r2
 80219ac:	fb04 3707 	mla	r7, r4, r7, r3
 80219b0:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80219b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80219b6:	ea43 0b01 	orr.w	fp, r3, r1
 80219ba:	f1c0 0110 	rsb	r1, r0, #16
 80219be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80219c0:	eba1 0c0c 	sub.w	ip, r1, ip
 80219c4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80219c8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80219cc:	fb0c 770b 	mla	r7, ip, fp, r7
 80219d0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80219d4:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 80219d8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80219dc:	ea4c 0c0b 	orr.w	ip, ip, fp
 80219e0:	fb02 770c 	mla	r7, r2, ip, r7
 80219e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80219e6:	0d79      	lsrs	r1, r7, #21
 80219e8:	8812      	ldrh	r2, [r2, #0]
 80219ea:	097f      	lsrs	r7, r7, #5
 80219ec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80219f0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80219f4:	430f      	orrs	r7, r1
 80219f6:	1211      	asrs	r1, r2, #8
 80219f8:	b2bb      	uxth	r3, r7
 80219fa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80219fe:	10d7      	asrs	r7, r2, #3
 8021a00:	fb11 f104 	smulbb	r1, r1, r4
 8021a04:	1218      	asrs	r0, r3, #8
 8021a06:	00d2      	lsls	r2, r2, #3
 8021a08:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021a0c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021a10:	fb17 f704 	smulbb	r7, r7, r4
 8021a14:	b2d2      	uxtb	r2, r2
 8021a16:	fb00 1009 	mla	r0, r0, r9, r1
 8021a1a:	10d9      	asrs	r1, r3, #3
 8021a1c:	fb12 f204 	smulbb	r2, r2, r4
 8021a20:	00db      	lsls	r3, r3, #3
 8021a22:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021a26:	b280      	uxth	r0, r0
 8021a28:	b2db      	uxtb	r3, r3
 8021a2a:	fb01 7109 	mla	r1, r1, r9, r7
 8021a2e:	fb03 2309 	mla	r3, r3, r9, r2
 8021a32:	1c42      	adds	r2, r0, #1
 8021a34:	b289      	uxth	r1, r1
 8021a36:	b29b      	uxth	r3, r3
 8021a38:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021a3c:	1c4f      	adds	r7, r1, #1
 8021a3e:	1c5a      	adds	r2, r3, #1
 8021a40:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8021a44:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8021a48:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a4e:	0949      	lsrs	r1, r1, #5
 8021a50:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021a54:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021a58:	4310      	orrs	r0, r2
 8021a5a:	4308      	orrs	r0, r1
 8021a5c:	f823 0b02 	strh.w	r0, [r3], #2
 8021a60:	930e      	str	r3, [sp, #56]	; 0x38
 8021a62:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021a64:	449a      	add	sl, r3
 8021a66:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021a68:	441d      	add	r5, r3
 8021a6a:	e6ed      	b.n	8021848 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8021a6c:	2800      	cmp	r0, #0
 8021a6e:	f43f af7f 	beq.w	8021970 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8021a72:	5cd3      	ldrb	r3, [r2, r3]
 8021a74:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021a78:	9310      	str	r3, [sp, #64]	; 0x40
 8021a7a:	e779      	b.n	8021970 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8021a7c:	b019      	add	sp, #100	; 0x64
 8021a7e:	ecbd 8b08 	vpop	{d8-d11}
 8021a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021a88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a8c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8021a90:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8021a94:	2e00      	cmp	r6, #0
 8021a96:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021a9a:	fb06 570e 	mla	r7, r6, lr, r5
 8021a9e:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8021aa2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021aa6:	eb02 0807 	add.w	r8, r2, r7
 8021aaa:	8808      	ldrh	r0, [r1, #0]
 8021aac:	db38      	blt.n	8021b20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8021aae:	45b1      	cmp	r9, r6
 8021ab0:	dd36      	ble.n	8021b20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8021ab2:	2d00      	cmp	r5, #0
 8021ab4:	db32      	blt.n	8021b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8021ab6:	45ae      	cmp	lr, r5
 8021ab8:	dd30      	ble.n	8021b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8021aba:	5dd2      	ldrb	r2, [r2, r7]
 8021abc:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8021ac0:	1c6a      	adds	r2, r5, #1
 8021ac2:	d430      	bmi.n	8021b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8021ac4:	4596      	cmp	lr, r2
 8021ac6:	dd2e      	ble.n	8021b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8021ac8:	b36c      	cbz	r4, 8021b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8021aca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021ace:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021ad2:	3601      	adds	r6, #1
 8021ad4:	d42b      	bmi.n	8021b2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8021ad6:	45b1      	cmp	r9, r6
 8021ad8:	dd29      	ble.n	8021b2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8021ada:	f1bc 0f00 	cmp.w	ip, #0
 8021ade:	d028      	beq.n	8021b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8021ae0:	2d00      	cmp	r5, #0
 8021ae2:	db22      	blt.n	8021b2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8021ae4:	45ae      	cmp	lr, r5
 8021ae6:	dd20      	ble.n	8021b2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8021ae8:	f818 600e 	ldrb.w	r6, [r8, lr]
 8021aec:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8021af0:	3501      	adds	r5, #1
 8021af2:	d407      	bmi.n	8021b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8021af4:	45ae      	cmp	lr, r5
 8021af6:	dd05      	ble.n	8021b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8021af8:	b134      	cbz	r4, 8021b08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8021afa:	44c6      	add	lr, r8
 8021afc:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8021b00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8021b04:	2c0f      	cmp	r4, #15
 8021b06:	d802      	bhi.n	8021b0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8021b08:	f1bc 0f0f 	cmp.w	ip, #15
 8021b0c:	d914      	bls.n	8021b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8021b0e:	4b26      	ldr	r3, [pc, #152]	; (8021ba8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8021b10:	f240 11ef 	movw	r1, #495	; 0x1ef
 8021b14:	4a25      	ldr	r2, [pc, #148]	; (8021bac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8021b16:	4826      	ldr	r0, [pc, #152]	; (8021bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8021b18:	f006 fdb6 	bl	8028688 <__assert_func>
 8021b1c:	4607      	mov	r7, r0
 8021b1e:	e7cf      	b.n	8021ac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8021b20:	4602      	mov	r2, r0
 8021b22:	4607      	mov	r7, r0
 8021b24:	e7d5      	b.n	8021ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8021b26:	4602      	mov	r2, r0
 8021b28:	e7d3      	b.n	8021ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8021b2a:	4606      	mov	r6, r0
 8021b2c:	e7e0      	b.n	8021af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8021b2e:	4606      	mov	r6, r0
 8021b30:	e7e8      	b.n	8021b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8021b32:	2c0f      	cmp	r4, #15
 8021b34:	d8eb      	bhi.n	8021b0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8021b36:	4606      	mov	r6, r0
 8021b38:	fb14 f30c 	smulbb	r3, r4, ip
 8021b3c:	043d      	lsls	r5, r7, #16
 8021b3e:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8021b42:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021b46:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8021b4a:	10db      	asrs	r3, r3, #3
 8021b4c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021b50:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021b54:	432f      	orrs	r7, r5
 8021b56:	f1cc 0510 	rsb	r5, ip, #16
 8021b5a:	ea4e 0202 	orr.w	r2, lr, r2
 8021b5e:	1b2d      	subs	r5, r5, r4
 8021b60:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8021b64:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8021b68:	4354      	muls	r4, r2
 8021b6a:	fb05 4507 	mla	r5, r5, r7, r4
 8021b6e:	0404      	lsls	r4, r0, #16
 8021b70:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021b74:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021b78:	4320      	orrs	r0, r4
 8021b7a:	fb03 5400 	mla	r4, r3, r0, r5
 8021b7e:	0430      	lsls	r0, r6, #16
 8021b80:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8021b84:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8021b88:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021b8c:	4330      	orrs	r0, r6
 8021b8e:	fb03 4000 	mla	r0, r3, r0, r4
 8021b92:	0d43      	lsrs	r3, r0, #21
 8021b94:	0940      	lsrs	r0, r0, #5
 8021b96:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021b9a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021b9e:	4318      	orrs	r0, r3
 8021ba0:	8008      	strh	r0, [r1, #0]
 8021ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021ba6:	bf00      	nop
 8021ba8:	0802cea2 	.word	0x0802cea2
 8021bac:	0802d50e 	.word	0x0802d50e
 8021bb0:	0802cf8b 	.word	0x0802cf8b

08021bb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bb8:	ed2d 8b0a 	vpush	{d8-d12}
 8021bbc:	b093      	sub	sp, #76	; 0x4c
 8021bbe:	eeb0 aa40 	vmov.f32	s20, s0
 8021bc2:	eef0 9a60 	vmov.f32	s19, s1
 8021bc6:	920f      	str	r2, [sp, #60]	; 0x3c
 8021bc8:	eeb0 9a41 	vmov.f32	s18, s2
 8021bcc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021bce:	eeb0 8a62 	vmov.f32	s16, s5
 8021bd2:	9010      	str	r0, [sp, #64]	; 0x40
 8021bd4:	eef0 8a43 	vmov.f32	s17, s6
 8021bd8:	6850      	ldr	r0, [r2, #4]
 8021bda:	eeb0 ca44 	vmov.f32	s24, s8
 8021bde:	9108      	str	r1, [sp, #32]
 8021be0:	eef0 ba64 	vmov.f32	s23, s9
 8021be4:	9306      	str	r3, [sp, #24]
 8021be6:	eeb0 ba45 	vmov.f32	s22, s10
 8021bea:	6812      	ldr	r2, [r2, #0]
 8021bec:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8021bf0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8021bf4:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8021bf8:	fb00 1303 	mla	r3, r0, r3, r1
 8021bfc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8021c00:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021c02:	681b      	ldr	r3, [r3, #0]
 8021c04:	9307      	str	r3, [sp, #28]
 8021c06:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021c08:	685f      	ldr	r7, [r3, #4]
 8021c0a:	3704      	adds	r7, #4
 8021c0c:	9b08      	ldr	r3, [sp, #32]
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	dc03      	bgt.n	8021c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	f340 81b2 	ble.w	8021f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8021c1a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021c1c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c20:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c24:	1e48      	subs	r0, r1, #1
 8021c26:	f102 3cff 	add.w	ip, r2, #4294967295
 8021c2a:	9b06      	ldr	r3, [sp, #24]
 8021c2c:	2b00      	cmp	r3, #0
 8021c2e:	f340 80a9 	ble.w	8021d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8021c32:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021c36:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021c3a:	d406      	bmi.n	8021c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021c3c:	4586      	cmp	lr, r0
 8021c3e:	da04      	bge.n	8021c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021c40:	2b00      	cmp	r3, #0
 8021c42:	db02      	blt.n	8021c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021c44:	4563      	cmp	r3, ip
 8021c46:	f2c0 809e 	blt.w	8021d86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021c4a:	f11e 0e01 	adds.w	lr, lr, #1
 8021c4e:	f100 808f 	bmi.w	8021d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8021c52:	4571      	cmp	r1, lr
 8021c54:	f2c0 808c 	blt.w	8021d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8021c58:	3301      	adds	r3, #1
 8021c5a:	f100 8089 	bmi.w	8021d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8021c5e:	429a      	cmp	r2, r3
 8021c60:	f2c0 8086 	blt.w	8021d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8021c64:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021c68:	46c8      	mov	r8, r9
 8021c6a:	f1bb 0f00 	cmp.w	fp, #0
 8021c6e:	f340 80a6 	ble.w	8021dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8021c72:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021c74:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021c78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021c7a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021c7e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021c82:	1422      	asrs	r2, r4, #16
 8021c84:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021c88:	689b      	ldr	r3, [r3, #8]
 8021c8a:	f100 80e3 	bmi.w	8021e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021c8e:	f103 3aff 	add.w	sl, r3, #4294967295
 8021c92:	4552      	cmp	r2, sl
 8021c94:	f280 80de 	bge.w	8021e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021c98:	f1bc 0f00 	cmp.w	ip, #0
 8021c9c:	f2c0 80da 	blt.w	8021e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021ca0:	f10e 3aff 	add.w	sl, lr, #4294967295
 8021ca4:	45d4      	cmp	ip, sl
 8021ca6:	f280 80d5 	bge.w	8021e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021caa:	b21b      	sxth	r3, r3
 8021cac:	9d07      	ldr	r5, [sp, #28]
 8021cae:	fb0c 2203 	mla	r2, ip, r3, r2
 8021cb2:	eb05 0a02 	add.w	sl, r5, r2
 8021cb6:	5caa      	ldrb	r2, [r5, r2]
 8021cb8:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8021cbc:	2800      	cmp	r0, #0
 8021cbe:	f000 80c0 	beq.w	8021e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8021cc2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021cc6:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8021cca:	920b      	str	r2, [sp, #44]	; 0x2c
 8021ccc:	b151      	cbz	r1, 8021ce4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8021cce:	eb0a 0203 	add.w	r2, sl, r3
 8021cd2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8021cd6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021cda:	9309      	str	r3, [sp, #36]	; 0x24
 8021cdc:	7853      	ldrb	r3, [r2, #1]
 8021cde:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021ce2:	930c      	str	r3, [sp, #48]	; 0x30
 8021ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ce6:	fb10 f201 	smulbb	r2, r0, r1
 8021cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021cec:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021cf0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021cf4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021cf8:	10d2      	asrs	r2, r2, #3
 8021cfa:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021cfe:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8021d02:	ea4c 0c03 	orr.w	ip, ip, r3
 8021d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d08:	041b      	lsls	r3, r3, #16
 8021d0a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021d0e:	432b      	orrs	r3, r5
 8021d10:	4353      	muls	r3, r2
 8021d12:	fb0a 330c 	mla	r3, sl, ip, r3
 8021d16:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8021d1a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021d1e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021d22:	ea4c 0e0e 	orr.w	lr, ip, lr
 8021d26:	f1c1 0c10 	rsb	ip, r1, #16
 8021d2a:	ebac 0c00 	sub.w	ip, ip, r0
 8021d2e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021d32:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8021d36:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8021d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d3c:	0418      	lsls	r0, r3, #16
 8021d3e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021d42:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021d46:	4318      	orrs	r0, r3
 8021d48:	fb02 c200 	mla	r2, r2, r0, ip
 8021d4c:	0d53      	lsrs	r3, r2, #21
 8021d4e:	0952      	lsrs	r2, r2, #5
 8021d50:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021d54:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021d58:	431a      	orrs	r2, r3
 8021d5a:	f8a8 2000 	strh.w	r2, [r8]
 8021d5e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021d60:	f108 0802 	add.w	r8, r8, #2
 8021d64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021d68:	441c      	add	r4, r3
 8021d6a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021d6c:	441e      	add	r6, r3
 8021d6e:	e77c      	b.n	8021c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021d70:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021d72:	f109 0902 	add.w	r9, r9, #2
 8021d76:	441c      	add	r4, r3
 8021d78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021d7a:	441e      	add	r6, r3
 8021d7c:	9b06      	ldr	r3, [sp, #24]
 8021d7e:	3b01      	subs	r3, #1
 8021d80:	9306      	str	r3, [sp, #24]
 8021d82:	e752      	b.n	8021c2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021d84:	d020      	beq.n	8021dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021d86:	9b06      	ldr	r3, [sp, #24]
 8021d88:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8021d8a:	3b01      	subs	r3, #1
 8021d8c:	fb00 4003 	mla	r0, r0, r3, r4
 8021d90:	1400      	asrs	r0, r0, #16
 8021d92:	f53f af67 	bmi.w	8021c64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021d96:	3901      	subs	r1, #1
 8021d98:	4288      	cmp	r0, r1
 8021d9a:	f6bf af63 	bge.w	8021c64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021d9e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021da0:	fb01 6303 	mla	r3, r1, r3, r6
 8021da4:	141b      	asrs	r3, r3, #16
 8021da6:	f53f af5d 	bmi.w	8021c64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021daa:	3a01      	subs	r2, #1
 8021dac:	4293      	cmp	r3, r2
 8021dae:	f6bf af59 	bge.w	8021c64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021db2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8021db6:	46ca      	mov	sl, r9
 8021db8:	f1b8 0f00 	cmp.w	r8, #0
 8021dbc:	dc67      	bgt.n	8021e8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8021dbe:	9b06      	ldr	r3, [sp, #24]
 8021dc0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021dc4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8021dc8:	9b08      	ldr	r3, [sp, #32]
 8021dca:	2b00      	cmp	r3, #0
 8021dcc:	f340 80d7 	ble.w	8021f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8021dd0:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021dd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021dd6:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021dda:	eef0 6a48 	vmov.f32	s13, s16
 8021dde:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021de2:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021de6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021dea:	ee16 4a90 	vmov	r4, s13
 8021dee:	eef0 6a68 	vmov.f32	s13, s17
 8021df2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021df6:	ee16 6a90 	vmov	r6, s13
 8021dfa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021dfe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021e02:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021e06:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021e0a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021e0e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021e12:	ee18 2a10 	vmov	r2, s16
 8021e16:	eeb0 8a47 	vmov.f32	s16, s14
 8021e1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e1e:	ee18 2a90 	vmov	r2, s17
 8021e22:	9329      	str	r3, [sp, #164]	; 0xa4
 8021e24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021e26:	eef0 8a67 	vmov.f32	s17, s15
 8021e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e2e:	932a      	str	r3, [sp, #168]	; 0xa8
 8021e30:	9b08      	ldr	r3, [sp, #32]
 8021e32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021e34:	3b01      	subs	r3, #1
 8021e36:	9308      	str	r3, [sp, #32]
 8021e38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021e3a:	bf08      	it	eq
 8021e3c:	4613      	moveq	r3, r2
 8021e3e:	9306      	str	r3, [sp, #24]
 8021e40:	e6e4      	b.n	8021c0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8021e42:	2900      	cmp	r1, #0
 8021e44:	f43f af4e 	beq.w	8021ce4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8021e48:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8021e4c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021e50:	9309      	str	r3, [sp, #36]	; 0x24
 8021e52:	e747      	b.n	8021ce4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8021e54:	f112 0a01 	adds.w	sl, r2, #1
 8021e58:	d481      	bmi.n	8021d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021e5a:	4553      	cmp	r3, sl
 8021e5c:	f6ff af7f 	blt.w	8021d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021e60:	f11c 0a01 	adds.w	sl, ip, #1
 8021e64:	f53f af7b 	bmi.w	8021d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021e68:	45d6      	cmp	lr, sl
 8021e6a:	f6ff af78 	blt.w	8021d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021e6e:	b21b      	sxth	r3, r3
 8021e70:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8021e74:	fa0f f28e 	sxth.w	r2, lr
 8021e78:	9300      	str	r3, [sp, #0]
 8021e7a:	463b      	mov	r3, r7
 8021e7c:	9201      	str	r2, [sp, #4]
 8021e7e:	9a07      	ldr	r2, [sp, #28]
 8021e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8021e84:	4641      	mov	r1, r8
 8021e86:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021e88:	f7ff fdfe 	bl	8021a88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8021e8c:	e767      	b.n	8021d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021e8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021e90:	1422      	asrs	r2, r4, #16
 8021e92:	1431      	asrs	r1, r6, #16
 8021e94:	9d07      	ldr	r5, [sp, #28]
 8021e96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021e9a:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8021e9e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021ea2:	fb03 2101 	mla	r1, r3, r1, r2
 8021ea6:	9a07      	ldr	r2, [sp, #28]
 8021ea8:	440a      	add	r2, r1
 8021eaa:	5c69      	ldrb	r1, [r5, r1]
 8021eac:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8021eb0:	f1be 0f00 	cmp.w	lr, #0
 8021eb4:	d05c      	beq.n	8021f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8021eb6:	f892 c001 	ldrb.w	ip, [r2, #1]
 8021eba:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8021ebe:	950d      	str	r5, [sp, #52]	; 0x34
 8021ec0:	b150      	cbz	r0, 8021ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8021ec2:	eb02 0c03 	add.w	ip, r2, r3
 8021ec6:	5cd3      	ldrb	r3, [r2, r3]
 8021ec8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8021ece:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021ed2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021ed6:	930e      	str	r3, [sp, #56]	; 0x38
 8021ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021eda:	fb1e f200 	smulbb	r2, lr, r0
 8021ede:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021ee0:	f108 38ff 	add.w	r8, r8, #4294967295
 8021ee4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021ee8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021eec:	10d2      	asrs	r2, r2, #3
 8021eee:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8021ef2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021ef6:	ea4c 0c03 	orr.w	ip, ip, r3
 8021efa:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8021efe:	9311      	str	r3, [sp, #68]	; 0x44
 8021f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f02:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021f04:	041b      	lsls	r3, r3, #16
 8021f06:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021f0a:	ea43 030b 	orr.w	r3, r3, fp
 8021f0e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021f12:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021f16:	4353      	muls	r3, r2
 8021f18:	fb05 3c0c 	mla	ip, r5, ip, r3
 8021f1c:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8021f20:	ea43 0b01 	orr.w	fp, r3, r1
 8021f24:	f1c0 0110 	rsb	r1, r0, #16
 8021f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f2a:	eba1 0e0e 	sub.w	lr, r1, lr
 8021f2e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8021f32:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8021f36:	fb0e cc0b 	mla	ip, lr, fp, ip
 8021f3a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8021f3e:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8021f42:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021f46:	ea4b 0e0e 	orr.w	lr, fp, lr
 8021f4a:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021f4e:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8021f52:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021f56:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021f5a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021f5e:	ea43 0c0c 	orr.w	ip, r3, ip
 8021f62:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021f64:	441c      	add	r4, r3
 8021f66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021f68:	f82a cb02 	strh.w	ip, [sl], #2
 8021f6c:	441e      	add	r6, r3
 8021f6e:	e723      	b.n	8021db8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021f70:	2800      	cmp	r0, #0
 8021f72:	d0b1      	beq.n	8021ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8021f74:	5cd3      	ldrb	r3, [r2, r3]
 8021f76:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8021f7c:	e7ac      	b.n	8021ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8021f7e:	b013      	add	sp, #76	; 0x4c
 8021f80:	ecbd 8b0a 	vpop	{d8-d12}
 8021f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021f88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8021f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f8c:	468b      	mov	fp, r1
 8021f8e:	8809      	ldrh	r1, [r1, #0]
 8021f90:	b089      	sub	sp, #36	; 0x24
 8021f92:	10cd      	asrs	r5, r1, #3
 8021f94:	ea4f 2921 	mov.w	r9, r1, asr #8
 8021f98:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8021f9c:	00c9      	lsls	r1, r1, #3
 8021f9e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021fa2:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8021fa6:	9202      	str	r2, [sp, #8]
 8021fa8:	b2c9      	uxtb	r1, r1
 8021faa:	9500      	str	r5, [sp, #0]
 8021fac:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8021fb0:	9101      	str	r1, [sp, #4]
 8021fb2:	9900      	ldr	r1, [sp, #0]
 8021fb4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8021fb8:	0209      	lsls	r1, r1, #8
 8021fba:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8021fbe:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8021fc2:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8021fc6:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8021fca:	fb04 650e 	mla	r5, r4, lr, r6
 8021fce:	2c00      	cmp	r4, #0
 8021fd0:	eb02 0805 	add.w	r8, r2, r5
 8021fd4:	9a01      	ldr	r2, [sp, #4]
 8021fd6:	ea41 0102 	orr.w	r1, r1, r2
 8021fda:	9107      	str	r1, [sp, #28]
 8021fdc:	db43      	blt.n	8022066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8021fde:	45a2      	cmp	sl, r4
 8021fe0:	dd41      	ble.n	8022066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8021fe2:	2e00      	cmp	r6, #0
 8021fe4:	db3d      	blt.n	8022062 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8021fe6:	45b6      	cmp	lr, r6
 8021fe8:	dd3b      	ble.n	8022062 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8021fea:	9a02      	ldr	r2, [sp, #8]
 8021fec:	5d55      	ldrb	r5, [r2, r5]
 8021fee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021ff2:	441d      	add	r5, r3
 8021ff4:	1c72      	adds	r2, r6, #1
 8021ff6:	d439      	bmi.n	802206c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8021ff8:	4596      	cmp	lr, r2
 8021ffa:	dd37      	ble.n	802206c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8021ffc:	2f00      	cmp	r7, #0
 8021ffe:	d035      	beq.n	802206c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8022000:	f898 1001 	ldrb.w	r1, [r8, #1]
 8022004:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022008:	4419      	add	r1, r3
 802200a:	3401      	adds	r4, #1
 802200c:	d432      	bmi.n	8022074 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802200e:	45a2      	cmp	sl, r4
 8022010:	dd30      	ble.n	8022074 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8022012:	b378      	cbz	r0, 8022074 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8022014:	2e00      	cmp	r6, #0
 8022016:	db2b      	blt.n	8022070 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8022018:	45b6      	cmp	lr, r6
 802201a:	dd29      	ble.n	8022070 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 802201c:	f818 400e 	ldrb.w	r4, [r8, lr]
 8022020:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022024:	441c      	add	r4, r3
 8022026:	3601      	adds	r6, #1
 8022028:	d427      	bmi.n	802207a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802202a:	45b6      	cmp	lr, r6
 802202c:	dd25      	ble.n	802207a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802202e:	b327      	cbz	r7, 802207a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8022030:	44c6      	add	lr, r8
 8022032:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022036:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802203a:	4413      	add	r3, r2
 802203c:	782a      	ldrb	r2, [r5, #0]
 802203e:	2f0f      	cmp	r7, #15
 8022040:	9202      	str	r2, [sp, #8]
 8022042:	780a      	ldrb	r2, [r1, #0]
 8022044:	9203      	str	r2, [sp, #12]
 8022046:	7822      	ldrb	r2, [r4, #0]
 8022048:	9204      	str	r2, [sp, #16]
 802204a:	781a      	ldrb	r2, [r3, #0]
 802204c:	9205      	str	r2, [sp, #20]
 802204e:	d801      	bhi.n	8022054 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 8022050:	280f      	cmp	r0, #15
 8022052:	d914      	bls.n	802207e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8022054:	4b3f      	ldr	r3, [pc, #252]	; (8022154 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8022056:	f240 210d 	movw	r1, #525	; 0x20d
 802205a:	4a3f      	ldr	r2, [pc, #252]	; (8022158 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 802205c:	483f      	ldr	r0, [pc, #252]	; (802215c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 802205e:	f006 fb13 	bl	8028688 <__assert_func>
 8022062:	ad07      	add	r5, sp, #28
 8022064:	e7c6      	b.n	8021ff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8022066:	a907      	add	r1, sp, #28
 8022068:	460d      	mov	r5, r1
 802206a:	e7ce      	b.n	802200a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 802206c:	a907      	add	r1, sp, #28
 802206e:	e7cc      	b.n	802200a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8022070:	ac07      	add	r4, sp, #28
 8022072:	e7d8      	b.n	8022026 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8022074:	ab07      	add	r3, sp, #28
 8022076:	461c      	mov	r4, r3
 8022078:	e7e0      	b.n	802203c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802207a:	ab07      	add	r3, sp, #28
 802207c:	e7de      	b.n	802203c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802207e:	b2ba      	uxth	r2, r7
 8022080:	f891 8002 	ldrb.w	r8, [r1, #2]
 8022084:	b280      	uxth	r0, r0
 8022086:	7849      	ldrb	r1, [r1, #1]
 8022088:	78ae      	ldrb	r6, [r5, #2]
 802208a:	fa1f f78c 	uxth.w	r7, ip
 802208e:	fb02 fa00 	mul.w	sl, r2, r0
 8022092:	0112      	lsls	r2, r2, #4
 8022094:	786d      	ldrb	r5, [r5, #1]
 8022096:	ea6f 0c0c 	mvn.w	ip, ip
 802209a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802209e:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80220a2:	eba2 020a 	sub.w	r2, r2, sl
 80220a6:	fa5f fc8c 	uxtb.w	ip, ip
 80220aa:	b280      	uxth	r0, r0
 80220ac:	fb19 f90c 	smulbb	r9, r9, ip
 80220b0:	b292      	uxth	r2, r2
 80220b2:	ebae 0e00 	sub.w	lr, lr, r0
 80220b6:	4351      	muls	r1, r2
 80220b8:	fa1f fe8e 	uxth.w	lr, lr
 80220bc:	fb02 f808 	mul.w	r8, r2, r8
 80220c0:	fb0e 1505 	mla	r5, lr, r5, r1
 80220c4:	7861      	ldrb	r1, [r4, #1]
 80220c6:	fb0e 8806 	mla	r8, lr, r6, r8
 80220ca:	78a6      	ldrb	r6, [r4, #2]
 80220cc:	fb00 5501 	mla	r5, r0, r1, r5
 80220d0:	7859      	ldrb	r1, [r3, #1]
 80220d2:	fb00 8806 	mla	r8, r0, r6, r8
 80220d6:	789e      	ldrb	r6, [r3, #2]
 80220d8:	9b00      	ldr	r3, [sp, #0]
 80220da:	fb0a 5101 	mla	r1, sl, r1, r5
 80220de:	fb0a 8606 	mla	r6, sl, r6, r8
 80220e2:	fb13 f50c 	smulbb	r5, r3, ip
 80220e6:	9b03      	ldr	r3, [sp, #12]
 80220e8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80220ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80220f0:	435a      	muls	r2, r3
 80220f2:	9b02      	ldr	r3, [sp, #8]
 80220f4:	fb06 9607 	mla	r6, r6, r7, r9
 80220f8:	fb0e 2203 	mla	r2, lr, r3, r2
 80220fc:	9b04      	ldr	r3, [sp, #16]
 80220fe:	fb01 5107 	mla	r1, r1, r7, r5
 8022102:	b2b6      	uxth	r6, r6
 8022104:	fb00 2003 	mla	r0, r0, r3, r2
 8022108:	9b05      	ldr	r3, [sp, #20]
 802210a:	b289      	uxth	r1, r1
 802210c:	f106 0901 	add.w	r9, r6, #1
 8022110:	fb0a 0a03 	mla	sl, sl, r3, r0
 8022114:	9b01      	ldr	r3, [sp, #4]
 8022116:	1c4d      	adds	r5, r1, #1
 8022118:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802211c:	fb13 fc0c 	smulbb	ip, r3, ip
 8022120:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8022124:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8022128:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802212c:	fb0a c707 	mla	r7, sl, r7, ip
 8022130:	0949      	lsrs	r1, r1, #5
 8022132:	b2bf      	uxth	r7, r7
 8022134:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022138:	f107 0c01 	add.w	ip, r7, #1
 802213c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8022140:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022144:	433e      	orrs	r6, r7
 8022146:	430e      	orrs	r6, r1
 8022148:	f8ab 6000 	strh.w	r6, [fp]
 802214c:	b009      	add	sp, #36	; 0x24
 802214e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022152:	bf00      	nop
 8022154:	0802cea2 	.word	0x0802cea2
 8022158:	0802d465 	.word	0x0802d465
 802215c:	0802cf8b 	.word	0x0802cf8b

08022160 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022164:	ed2d 8b08 	vpush	{d8-d11}
 8022168:	b095      	sub	sp, #84	; 0x54
 802216a:	eeb0 aa40 	vmov.f32	s20, s0
 802216e:	eef0 9a60 	vmov.f32	s19, s1
 8022172:	9212      	str	r2, [sp, #72]	; 0x48
 8022174:	eeb0 9a41 	vmov.f32	s18, s2
 8022178:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802217a:	eeb0 8a62 	vmov.f32	s16, s5
 802217e:	9309      	str	r3, [sp, #36]	; 0x24
 8022180:	eef0 8a43 	vmov.f32	s17, s6
 8022184:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8022188:	eef0 ba44 	vmov.f32	s23, s8
 802218c:	9013      	str	r0, [sp, #76]	; 0x4c
 802218e:	eeb0 ba64 	vmov.f32	s22, s9
 8022192:	930f      	str	r3, [sp, #60]	; 0x3c
 8022194:	eef0 aa45 	vmov.f32	s21, s10
 8022198:	6850      	ldr	r0, [r2, #4]
 802219a:	910e      	str	r1, [sp, #56]	; 0x38
 802219c:	6812      	ldr	r2, [r2, #0]
 802219e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80221a2:	fb00 1303 	mla	r3, r0, r3, r1
 80221a6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80221aa:	930a      	str	r3, [sp, #40]	; 0x28
 80221ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80221ae:	681b      	ldr	r3, [r3, #0]
 80221b0:	930d      	str	r3, [sp, #52]	; 0x34
 80221b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80221b4:	685c      	ldr	r4, [r3, #4]
 80221b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80221b8:	3404      	adds	r4, #4
 80221ba:	43db      	mvns	r3, r3
 80221bc:	b2db      	uxtb	r3, r3
 80221be:	930b      	str	r3, [sp, #44]	; 0x2c
 80221c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221c2:	2b00      	cmp	r3, #0
 80221c4:	dc03      	bgt.n	80221ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80221c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	f340 8258 	ble.w	802267e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80221ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80221d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80221d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80221d8:	1e48      	subs	r0, r1, #1
 80221da:	1e55      	subs	r5, r2, #1
 80221dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221de:	2b00      	cmp	r3, #0
 80221e0:	f340 80fc 	ble.w	80223dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80221e4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80221e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221e8:	1436      	asrs	r6, r6, #16
 80221ea:	ea4f 4323 	mov.w	r3, r3, asr #16
 80221ee:	d406      	bmi.n	80221fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80221f0:	4286      	cmp	r6, r0
 80221f2:	da04      	bge.n	80221fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80221f4:	2b00      	cmp	r3, #0
 80221f6:	db02      	blt.n	80221fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80221f8:	42ab      	cmp	r3, r5
 80221fa:	f2c0 80f0 	blt.w	80223de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80221fe:	3601      	adds	r6, #1
 8022200:	f100 80dd 	bmi.w	80223be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022204:	42b1      	cmp	r1, r6
 8022206:	f2c0 80da 	blt.w	80223be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802220a:	3301      	adds	r3, #1
 802220c:	f100 80d7 	bmi.w	80223be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022210:	429a      	cmp	r2, r3
 8022212:	f2c0 80d4 	blt.w	80223be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022218:	9311      	str	r3, [sp, #68]	; 0x44
 802221a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802221c:	930c      	str	r3, [sp, #48]	; 0x30
 802221e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022220:	2b00      	cmp	r3, #0
 8022222:	f340 80fd 	ble.w	8022420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8022226:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8022228:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802222a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802222c:	68c6      	ldr	r6, [r0, #12]
 802222e:	141d      	asrs	r5, r3, #16
 8022230:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022232:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022236:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022238:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802223a:	1400      	asrs	r0, r0, #16
 802223c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022240:	6892      	ldr	r2, [r2, #8]
 8022242:	f100 8141 	bmi.w	80224c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022246:	1e57      	subs	r7, r2, #1
 8022248:	42b8      	cmp	r0, r7
 802224a:	f280 813d 	bge.w	80224c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802224e:	2d00      	cmp	r5, #0
 8022250:	f2c0 813a 	blt.w	80224c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022254:	1e77      	subs	r7, r6, #1
 8022256:	42bd      	cmp	r5, r7
 8022258:	f280 8136 	bge.w	80224c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802225c:	b212      	sxth	r2, r2
 802225e:	fb05 0002 	mla	r0, r5, r2, r0
 8022262:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022264:	f815 a000 	ldrb.w	sl, [r5, r0]
 8022268:	182e      	adds	r6, r5, r0
 802226a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802226e:	eb04 050a 	add.w	r5, r4, sl
 8022272:	2b00      	cmp	r3, #0
 8022274:	f000 811a 	beq.w	80224ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8022278:	f896 c001 	ldrb.w	ip, [r6, #1]
 802227c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022280:	44a4      	add	ip, r4
 8022282:	2900      	cmp	r1, #0
 8022284:	f000 811a 	beq.w	80224bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8022288:	18b0      	adds	r0, r6, r2
 802228a:	5cb2      	ldrb	r2, [r6, r2]
 802228c:	7840      	ldrb	r0, [r0, #1]
 802228e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022292:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022296:	4422      	add	r2, r4
 8022298:	4420      	add	r0, r4
 802229a:	b29b      	uxth	r3, r3
 802229c:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80222a0:	b289      	uxth	r1, r1
 80222a2:	f895 b002 	ldrb.w	fp, [r5, #2]
 80222a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80222a8:	fb03 f901 	mul.w	r9, r3, r1
 80222ac:	011b      	lsls	r3, r3, #4
 80222ae:	f8b6 e000 	ldrh.w	lr, [r6]
 80222b2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80222b6:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80222ba:	eba3 0309 	sub.w	r3, r3, r9
 80222be:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80222c2:	b289      	uxth	r1, r1
 80222c4:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80222c8:	b29b      	uxth	r3, r3
 80222ca:	eba8 0801 	sub.w	r8, r8, r1
 80222ce:	435f      	muls	r7, r3
 80222d0:	fa1f f888 	uxth.w	r8, r8
 80222d4:	9310      	str	r3, [sp, #64]	; 0x40
 80222d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80222d8:	fb08 770b 	mla	r7, r8, fp, r7
 80222dc:	f892 b002 	ldrb.w	fp, [r2, #2]
 80222e0:	fb01 770b 	mla	r7, r1, fp, r7
 80222e4:	f890 b002 	ldrb.w	fp, [r0, #2]
 80222e8:	fb09 770b 	mla	r7, r9, fp, r7
 80222ec:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80222f0:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80222f4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80222f8:	fb1b fb03 	smulbb	fp, fp, r3
 80222fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80222fe:	fb07 b706 	mla	r7, r7, r6, fp
 8022302:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022306:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802230a:	f89c c000 	ldrb.w	ip, [ip]
 802230e:	b2bf      	uxth	r7, r7
 8022310:	435d      	muls	r5, r3
 8022312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022314:	fb08 550b 	mla	r5, r8, fp, r5
 8022318:	f892 b001 	ldrb.w	fp, [r2, #1]
 802231c:	fb01 550b 	mla	r5, r1, fp, r5
 8022320:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022324:	fb09 550b 	mla	r5, r9, fp, r5
 8022328:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802232c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022330:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022334:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022338:	fa5f fe8e 	uxtb.w	lr, lr
 802233c:	fb1b fb03 	smulbb	fp, fp, r3
 8022340:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022342:	fb03 f30c 	mul.w	r3, r3, ip
 8022346:	f892 c000 	ldrb.w	ip, [r2]
 802234a:	fb05 b506 	mla	r5, r5, r6, fp
 802234e:	1c7a      	adds	r2, r7, #1
 8022350:	fb08 330a 	mla	r3, r8, sl, r3
 8022354:	b2ad      	uxth	r5, r5
 8022356:	fb01 330c 	mla	r3, r1, ip, r3
 802235a:	f890 c000 	ldrb.w	ip, [r0]
 802235e:	f105 0b01 	add.w	fp, r5, #1
 8022362:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022366:	fb09 3c0c 	mla	ip, r9, ip, r3
 802236a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802236c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022370:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022374:	fb1e fe03 	smulbb	lr, lr, r3
 8022378:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802237c:	096d      	lsrs	r5, r5, #5
 802237e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022380:	fb0c ee06 	mla	lr, ip, r6, lr
 8022384:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022388:	fa1f fe8e 	uxth.w	lr, lr
 802238c:	f10e 0c01 	add.w	ip, lr, #1
 8022390:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
 8022394:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022398:	ea47 070e 	orr.w	r7, r7, lr
 802239c:	433d      	orrs	r5, r7
 802239e:	801d      	strh	r5, [r3, #0]
 80223a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80223a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80223a4:	3302      	adds	r3, #2
 80223a6:	930c      	str	r3, [sp, #48]	; 0x30
 80223a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80223aa:	4413      	add	r3, r2
 80223ac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80223ae:	9327      	str	r3, [sp, #156]	; 0x9c
 80223b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80223b2:	4413      	add	r3, r2
 80223b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80223b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80223b8:	3b01      	subs	r3, #1
 80223ba:	9311      	str	r3, [sp, #68]	; 0x44
 80223bc:	e72f      	b.n	802221e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80223be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80223c0:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80223c2:	4433      	add	r3, r6
 80223c4:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80223c6:	9327      	str	r3, [sp, #156]	; 0x9c
 80223c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80223ca:	4433      	add	r3, r6
 80223cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80223ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223d0:	3b01      	subs	r3, #1
 80223d2:	9309      	str	r3, [sp, #36]	; 0x24
 80223d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223d6:	3302      	adds	r3, #2
 80223d8:	930a      	str	r3, [sp, #40]	; 0x28
 80223da:	e6ff      	b.n	80221dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80223dc:	d027      	beq.n	802242e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 80223de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223e0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80223e2:	3b01      	subs	r3, #1
 80223e4:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80223e6:	fb00 5003 	mla	r0, r0, r3, r5
 80223ea:	1400      	asrs	r0, r0, #16
 80223ec:	f53f af13 	bmi.w	8022216 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80223f0:	3901      	subs	r1, #1
 80223f2:	4288      	cmp	r0, r1
 80223f4:	f6bf af0f 	bge.w	8022216 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80223f8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80223fa:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80223fc:	fb01 0303 	mla	r3, r1, r3, r0
 8022400:	141b      	asrs	r3, r3, #16
 8022402:	f53f af08 	bmi.w	8022216 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022406:	3a01      	subs	r2, #1
 8022408:	4293      	cmp	r3, r2
 802240a:	f6bf af04 	bge.w	8022216 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802240e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022410:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8022414:	9311      	str	r3, [sp, #68]	; 0x44
 8022416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022418:	930c      	str	r3, [sp, #48]	; 0x30
 802241a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802241c:	2b00      	cmp	r3, #0
 802241e:	dc70      	bgt.n	8022502 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8022420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022424:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022428:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802242c:	930a      	str	r3, [sp, #40]	; 0x28
 802242e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022430:	2b00      	cmp	r3, #0
 8022432:	f340 8124 	ble.w	802267e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8022436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802243a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802243c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022440:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022444:	eef0 6a48 	vmov.f32	s13, s16
 8022448:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802244c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022450:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022454:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8022458:	eef0 6a68 	vmov.f32	s13, s17
 802245c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022460:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8022464:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022468:	ee69 7a27 	vmul.f32	s15, s18, s15
 802246c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022470:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022474:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022478:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802247c:	ee18 2a10 	vmov	r2, s16
 8022480:	eeb0 8a47 	vmov.f32	s16, s14
 8022484:	fb92 f3f3 	sdiv	r3, r2, r3
 8022488:	ee18 2a90 	vmov	r2, s17
 802248c:	9329      	str	r3, [sp, #164]	; 0xa4
 802248e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022490:	eef0 8a67 	vmov.f32	s17, s15
 8022494:	fb92 f3f3 	sdiv	r3, r2, r3
 8022498:	932a      	str	r3, [sp, #168]	; 0xa8
 802249a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802249c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802249e:	3b01      	subs	r3, #1
 80224a0:	930e      	str	r3, [sp, #56]	; 0x38
 80224a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80224a4:	bf08      	it	eq
 80224a6:	4613      	moveq	r3, r2
 80224a8:	9309      	str	r3, [sp, #36]	; 0x24
 80224aa:	e689      	b.n	80221c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80224ac:	b149      	cbz	r1, 80224c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80224ae:	5cb2      	ldrb	r2, [r6, r2]
 80224b0:	4628      	mov	r0, r5
 80224b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80224b6:	4422      	add	r2, r4
 80224b8:	46ac      	mov	ip, r5
 80224ba:	e6ee      	b.n	802229a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80224bc:	4628      	mov	r0, r5
 80224be:	462a      	mov	r2, r5
 80224c0:	e6eb      	b.n	802229a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80224c2:	4628      	mov	r0, r5
 80224c4:	462a      	mov	r2, r5
 80224c6:	e7f7      	b.n	80224b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80224c8:	1c47      	adds	r7, r0, #1
 80224ca:	f53f af69 	bmi.w	80223a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80224ce:	42ba      	cmp	r2, r7
 80224d0:	f6ff af66 	blt.w	80223a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80224d4:	1c6f      	adds	r7, r5, #1
 80224d6:	f53f af63 	bmi.w	80223a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80224da:	42be      	cmp	r6, r7
 80224dc:	f6ff af60 	blt.w	80223a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80224e0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80224e2:	b236      	sxth	r6, r6
 80224e4:	b212      	sxth	r2, r2
 80224e6:	9002      	str	r0, [sp, #8]
 80224e8:	9601      	str	r6, [sp, #4]
 80224ea:	9200      	str	r2, [sp, #0]
 80224ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80224ee:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80224f2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80224f6:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80224fa:	4623      	mov	r3, r4
 80224fc:	f7ff fd44 	bl	8021f88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8022500:	e74e      	b.n	80223a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022502:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8022504:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8022506:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802250a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 802250c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802250e:	1400      	asrs	r0, r0, #16
 8022510:	142d      	asrs	r5, r5, #16
 8022512:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022514:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022518:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802251c:	fb02 5000 	mla	r0, r2, r0, r5
 8022520:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022522:	f815 9000 	ldrb.w	r9, [r5, r0]
 8022526:	182e      	adds	r6, r5, r0
 8022528:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802252c:	eb04 0509 	add.w	r5, r4, r9
 8022530:	2b00      	cmp	r3, #0
 8022532:	f000 8096 	beq.w	8022662 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 8022536:	7877      	ldrb	r7, [r6, #1]
 8022538:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802253c:	4427      	add	r7, r4
 802253e:	2900      	cmp	r1, #0
 8022540:	f000 8097 	beq.w	8022672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8022544:	18b0      	adds	r0, r6, r2
 8022546:	5cb2      	ldrb	r2, [r6, r2]
 8022548:	7840      	ldrb	r0, [r0, #1]
 802254a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802254e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022552:	4422      	add	r2, r4
 8022554:	4420      	add	r0, r4
 8022556:	b29b      	uxth	r3, r3
 8022558:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802255a:	b289      	uxth	r1, r1
 802255c:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022560:	f8b6 c000 	ldrh.w	ip, [r6]
 8022564:	fb03 f801 	mul.w	r8, r3, r1
 8022568:	011b      	lsls	r3, r3, #4
 802256a:	78be      	ldrb	r6, [r7, #2]
 802256c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8022570:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022574:	eba3 0308 	sub.w	r3, r3, r8
 8022578:	f814 9009 	ldrb.w	r9, [r4, r9]
 802257c:	b289      	uxth	r1, r1
 802257e:	b29b      	uxth	r3, r3
 8022580:	ebae 0e01 	sub.w	lr, lr, r1
 8022584:	435e      	muls	r6, r3
 8022586:	fa1f fe8e 	uxth.w	lr, lr
 802258a:	9310      	str	r3, [sp, #64]	; 0x40
 802258c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802258e:	fb0e 660b 	mla	r6, lr, fp, r6
 8022592:	f892 b002 	ldrb.w	fp, [r2, #2]
 8022596:	fb01 660b 	mla	r6, r1, fp, r6
 802259a:	f890 b002 	ldrb.w	fp, [r0, #2]
 802259e:	fb08 660b 	mla	r6, r8, fp, r6
 80225a2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80225a6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80225aa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80225ae:	fb1b fb03 	smulbb	fp, fp, r3
 80225b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80225b4:	fb06 b60a 	mla	r6, r6, sl, fp
 80225b8:	f895 b001 	ldrb.w	fp, [r5, #1]
 80225bc:	787d      	ldrb	r5, [r7, #1]
 80225be:	783f      	ldrb	r7, [r7, #0]
 80225c0:	b2b6      	uxth	r6, r6
 80225c2:	435d      	muls	r5, r3
 80225c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80225c6:	fb0e 550b 	mla	r5, lr, fp, r5
 80225ca:	f892 b001 	ldrb.w	fp, [r2, #1]
 80225ce:	fb01 550b 	mla	r5, r1, fp, r5
 80225d2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80225d6:	fb08 550b 	mla	r5, r8, fp, r5
 80225da:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80225de:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80225e2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80225e6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80225ea:	fa5f fc8c 	uxtb.w	ip, ip
 80225ee:	fb1b fb03 	smulbb	fp, fp, r3
 80225f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80225f4:	437b      	muls	r3, r7
 80225f6:	7817      	ldrb	r7, [r2, #0]
 80225f8:	fb05 b50a 	mla	r5, r5, sl, fp
 80225fc:	fb0e 3309 	mla	r3, lr, r9, r3
 8022600:	b2ad      	uxth	r5, r5
 8022602:	fb01 3307 	mla	r3, r1, r7, r3
 8022606:	7807      	ldrb	r7, [r0, #0]
 8022608:	f105 0b01 	add.w	fp, r5, #1
 802260c:	fb08 3707 	mla	r7, r8, r7, r3
 8022610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022612:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022616:	fb1c fc03 	smulbb	ip, ip, r3
 802261a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802261e:	1c73      	adds	r3, r6, #1
 8022620:	096d      	lsrs	r5, r5, #5
 8022622:	fb07 c70a 	mla	r7, r7, sl, ip
 8022626:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802262a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802262e:	b2bf      	uxth	r7, r7
 8022630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022632:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8022636:	1c7a      	adds	r2, r7, #1
 8022638:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802263c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022640:	4316      	orrs	r6, r2
 8022642:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022644:	432e      	orrs	r6, r5
 8022646:	f823 6b02 	strh.w	r6, [r3], #2
 802264a:	930c      	str	r3, [sp, #48]	; 0x30
 802264c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802264e:	4413      	add	r3, r2
 8022650:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022652:	9327      	str	r3, [sp, #156]	; 0x9c
 8022654:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022656:	4413      	add	r3, r2
 8022658:	9328      	str	r3, [sp, #160]	; 0xa0
 802265a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802265c:	3b01      	subs	r3, #1
 802265e:	9311      	str	r3, [sp, #68]	; 0x44
 8022660:	e6db      	b.n	802241a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8022662:	b149      	cbz	r1, 8022678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8022664:	5cb2      	ldrb	r2, [r6, r2]
 8022666:	4628      	mov	r0, r5
 8022668:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802266c:	4422      	add	r2, r4
 802266e:	462f      	mov	r7, r5
 8022670:	e771      	b.n	8022556 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8022672:	4628      	mov	r0, r5
 8022674:	462a      	mov	r2, r5
 8022676:	e76e      	b.n	8022556 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8022678:	4628      	mov	r0, r5
 802267a:	462a      	mov	r2, r5
 802267c:	e7f7      	b.n	802266e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 802267e:	b015      	add	sp, #84	; 0x54
 8022680:	ecbd 8b08 	vpop	{d8-d11}
 8022684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022688 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8022688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802268c:	880e      	ldrh	r6, [r1, #0]
 802268e:	b085      	sub	sp, #20
 8022690:	4691      	mov	r9, r2
 8022692:	0230      	lsls	r0, r6, #8
 8022694:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8022698:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802269c:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 80226a0:	0170      	lsls	r0, r6, #5
 80226a2:	00f6      	lsls	r6, r6, #3
 80226a4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80226a8:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80226ac:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80226b0:	b2f6      	uxtb	r6, r6
 80226b2:	ea4b 0000 	orr.w	r0, fp, r0
 80226b6:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80226ba:	4306      	orrs	r6, r0
 80226bc:	fb05 7a0c 	mla	sl, r5, ip, r7
 80226c0:	2d00      	cmp	r5, #0
 80226c2:	9603      	str	r6, [sp, #12]
 80226c4:	eb09 0e0a 	add.w	lr, r9, sl
 80226c8:	db42      	blt.n	8022750 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 80226ca:	45a8      	cmp	r8, r5
 80226cc:	dd40      	ble.n	8022750 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 80226ce:	2f00      	cmp	r7, #0
 80226d0:	db3c      	blt.n	802274c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 80226d2:	45bc      	cmp	ip, r7
 80226d4:	dd3a      	ble.n	802274c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 80226d6:	f819 600a 	ldrb.w	r6, [r9, sl]
 80226da:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80226de:	441e      	add	r6, r3
 80226e0:	1c78      	adds	r0, r7, #1
 80226e2:	d438      	bmi.n	8022756 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80226e4:	4584      	cmp	ip, r0
 80226e6:	dd36      	ble.n	8022756 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80226e8:	b3aa      	cbz	r2, 8022756 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80226ea:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80226ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80226f2:	4418      	add	r0, r3
 80226f4:	3501      	adds	r5, #1
 80226f6:	d432      	bmi.n	802275e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80226f8:	45a8      	cmp	r8, r5
 80226fa:	dd30      	ble.n	802275e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80226fc:	b37c      	cbz	r4, 802275e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80226fe:	2f00      	cmp	r7, #0
 8022700:	db2b      	blt.n	802275a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8022702:	45bc      	cmp	ip, r7
 8022704:	dd29      	ble.n	802275a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8022706:	f81e 500c 	ldrb.w	r5, [lr, ip]
 802270a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802270e:	441d      	add	r5, r3
 8022710:	3701      	adds	r7, #1
 8022712:	d427      	bmi.n	8022764 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8022714:	45bc      	cmp	ip, r7
 8022716:	dd25      	ble.n	8022764 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8022718:	b322      	cbz	r2, 8022764 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 802271a:	44f4      	add	ip, lr
 802271c:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8022720:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022724:	443b      	add	r3, r7
 8022726:	781f      	ldrb	r7, [r3, #0]
 8022728:	2a0f      	cmp	r2, #15
 802272a:	f896 a000 	ldrb.w	sl, [r6]
 802272e:	f890 b000 	ldrb.w	fp, [r0]
 8022732:	f895 9000 	ldrb.w	r9, [r5]
 8022736:	9700      	str	r7, [sp, #0]
 8022738:	d801      	bhi.n	802273e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 802273a:	2c0f      	cmp	r4, #15
 802273c:	d914      	bls.n	8022768 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 802273e:	4b2c      	ldr	r3, [pc, #176]	; (80227f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 8022740:	f240 210d 	movw	r1, #525	; 0x20d
 8022744:	4a2b      	ldr	r2, [pc, #172]	; (80227f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8022746:	482c      	ldr	r0, [pc, #176]	; (80227f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8022748:	f005 ff9e 	bl	8028688 <__assert_func>
 802274c:	ae03      	add	r6, sp, #12
 802274e:	e7c7      	b.n	80226e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 8022750:	a803      	add	r0, sp, #12
 8022752:	4606      	mov	r6, r0
 8022754:	e7ce      	b.n	80226f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 8022756:	a803      	add	r0, sp, #12
 8022758:	e7cc      	b.n	80226f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 802275a:	ad03      	add	r5, sp, #12
 802275c:	e7d8      	b.n	8022710 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 802275e:	ab03      	add	r3, sp, #12
 8022760:	461d      	mov	r5, r3
 8022762:	e7e0      	b.n	8022726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8022764:	ab03      	add	r3, sp, #12
 8022766:	e7de      	b.n	8022726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8022768:	b292      	uxth	r2, r2
 802276a:	f890 e002 	ldrb.w	lr, [r0, #2]
 802276e:	b2a4      	uxth	r4, r4
 8022770:	78b7      	ldrb	r7, [r6, #2]
 8022772:	7840      	ldrb	r0, [r0, #1]
 8022774:	fb02 f804 	mul.w	r8, r2, r4
 8022778:	0112      	lsls	r2, r2, #4
 802277a:	7876      	ldrb	r6, [r6, #1]
 802277c:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8022780:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8022784:	eba2 0208 	sub.w	r2, r2, r8
 8022788:	b2a4      	uxth	r4, r4
 802278a:	b292      	uxth	r2, r2
 802278c:	ebac 0c04 	sub.w	ip, ip, r4
 8022790:	fb02 fe0e 	mul.w	lr, r2, lr
 8022794:	fa1f fc8c 	uxth.w	ip, ip
 8022798:	fb0c ee07 	mla	lr, ip, r7, lr
 802279c:	78af      	ldrb	r7, [r5, #2]
 802279e:	fb04 ee07 	mla	lr, r4, r7, lr
 80227a2:	789f      	ldrb	r7, [r3, #2]
 80227a4:	785b      	ldrb	r3, [r3, #1]
 80227a6:	fb08 e707 	mla	r7, r8, r7, lr
 80227aa:	fb02 fe0b 	mul.w	lr, r2, fp
 80227ae:	4342      	muls	r2, r0
 80227b0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80227b4:	7868      	ldrb	r0, [r5, #1]
 80227b6:	fb0c ee0a 	mla	lr, ip, sl, lr
 80227ba:	fb0c 2206 	mla	r2, ip, r6, r2
 80227be:	9701      	str	r7, [sp, #4]
 80227c0:	fb04 ee09 	mla	lr, r4, r9, lr
 80227c4:	9f00      	ldr	r7, [sp, #0]
 80227c6:	fb04 2400 	mla	r4, r4, r0, r2
 80227ca:	fb08 ee07 	mla	lr, r8, r7, lr
 80227ce:	9f01      	ldr	r7, [sp, #4]
 80227d0:	fb08 4803 	mla	r8, r8, r3, r4
 80227d4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80227d8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80227dc:	ea47 070e 	orr.w	r7, r7, lr
 80227e0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80227e4:	ea47 0708 	orr.w	r7, r7, r8
 80227e8:	800f      	strh	r7, [r1, #0]
 80227ea:	b005      	add	sp, #20
 80227ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227f0:	0802cea2 	.word	0x0802cea2
 80227f4:	0802d465 	.word	0x0802d465
 80227f8:	0802cf8b 	.word	0x0802cf8b

080227fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80227fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022800:	ed2d 8b08 	vpush	{d8-d11}
 8022804:	b08f      	sub	sp, #60	; 0x3c
 8022806:	eeb0 aa40 	vmov.f32	s20, s0
 802280a:	eef0 9a60 	vmov.f32	s19, s1
 802280e:	920c      	str	r2, [sp, #48]	; 0x30
 8022810:	eeb0 9a41 	vmov.f32	s18, s2
 8022814:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022816:	eeb0 8a62 	vmov.f32	s16, s5
 802281a:	900d      	str	r0, [sp, #52]	; 0x34
 802281c:	eef0 8a43 	vmov.f32	s17, s6
 8022820:	6850      	ldr	r0, [r2, #4]
 8022822:	eef0 ba44 	vmov.f32	s23, s8
 8022826:	910a      	str	r1, [sp, #40]	; 0x28
 8022828:	eeb0 ba64 	vmov.f32	s22, s9
 802282c:	9306      	str	r3, [sp, #24]
 802282e:	eef0 aa45 	vmov.f32	s21, s10
 8022832:	6812      	ldr	r2, [r2, #0]
 8022834:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8022838:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 802283c:	fb00 1303 	mla	r3, r0, r3, r1
 8022840:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022844:	9307      	str	r3, [sp, #28]
 8022846:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	9308      	str	r3, [sp, #32]
 802284c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802284e:	685c      	ldr	r4, [r3, #4]
 8022850:	3404      	adds	r4, #4
 8022852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022854:	2b00      	cmp	r3, #0
 8022856:	dc03      	bgt.n	8022860 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802285a:	2b00      	cmp	r3, #0
 802285c:	f340 81d5 	ble.w	8022c0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8022860:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022862:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022866:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802286a:	1e48      	subs	r0, r1, #1
 802286c:	1e56      	subs	r6, r2, #1
 802286e:	9b06      	ldr	r3, [sp, #24]
 8022870:	2b00      	cmp	r3, #0
 8022872:	f340 80b6 	ble.w	80229e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022876:	ea5f 472b 	movs.w	r7, fp, asr #16
 802287a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802287e:	d406      	bmi.n	802288e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022880:	4287      	cmp	r7, r0
 8022882:	da04      	bge.n	802288e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022884:	2b00      	cmp	r3, #0
 8022886:	db02      	blt.n	802288e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022888:	42b3      	cmp	r3, r6
 802288a:	f2c0 80ab 	blt.w	80229e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802288e:	3701      	adds	r7, #1
 8022890:	f100 809c 	bmi.w	80229cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8022894:	42b9      	cmp	r1, r7
 8022896:	f2c0 8099 	blt.w	80229cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 802289a:	3301      	adds	r3, #1
 802289c:	f100 8096 	bmi.w	80229cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80228a0:	429a      	cmp	r2, r3
 80228a2:	f2c0 8093 	blt.w	80229cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80228a6:	9b06      	ldr	r3, [sp, #24]
 80228a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80228aa:	9b07      	ldr	r3, [sp, #28]
 80228ac:	9309      	str	r3, [sp, #36]	; 0x24
 80228ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80228b0:	2b00      	cmp	r3, #0
 80228b2:	f340 80b4 	ble.w	8022a1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80228b6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80228b8:	142e      	asrs	r6, r5, #16
 80228ba:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80228bc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80228c0:	68c7      	ldr	r7, [r0, #12]
 80228c2:	ea5f 402b 	movs.w	r0, fp, asr #16
 80228c6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80228ca:	6892      	ldr	r2, [r2, #8]
 80228cc:	f100 80fb 	bmi.w	8022ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80228d0:	f102 3cff 	add.w	ip, r2, #4294967295
 80228d4:	4560      	cmp	r0, ip
 80228d6:	f280 80f6 	bge.w	8022ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80228da:	2e00      	cmp	r6, #0
 80228dc:	f2c0 80f3 	blt.w	8022ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80228e0:	f107 3cff 	add.w	ip, r7, #4294967295
 80228e4:	4566      	cmp	r6, ip
 80228e6:	f280 80ee 	bge.w	8022ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80228ea:	b212      	sxth	r2, r2
 80228ec:	fb06 0002 	mla	r0, r6, r2, r0
 80228f0:	9e08      	ldr	r6, [sp, #32]
 80228f2:	1837      	adds	r7, r6, r0
 80228f4:	5c30      	ldrb	r0, [r6, r0]
 80228f6:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80228fa:	eb04 0c08 	add.w	ip, r4, r8
 80228fe:	2b00      	cmp	r3, #0
 8022900:	f000 80d3 	beq.w	8022aaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8022904:	787e      	ldrb	r6, [r7, #1]
 8022906:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802290a:	4426      	add	r6, r4
 802290c:	2900      	cmp	r1, #0
 802290e:	f000 80d4 	beq.w	8022aba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8022912:	18b8      	adds	r0, r7, r2
 8022914:	5cba      	ldrb	r2, [r7, r2]
 8022916:	7840      	ldrb	r0, [r0, #1]
 8022918:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802291c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022920:	4422      	add	r2, r4
 8022922:	4420      	add	r0, r4
 8022924:	b29b      	uxth	r3, r3
 8022926:	78b7      	ldrb	r7, [r6, #2]
 8022928:	b289      	uxth	r1, r1
 802292a:	f89c a002 	ldrb.w	sl, [ip, #2]
 802292e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022932:	fb03 f901 	mul.w	r9, r3, r1
 8022936:	011b      	lsls	r3, r3, #4
 8022938:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802293c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022940:	eba3 0309 	sub.w	r3, r3, r9
 8022944:	b289      	uxth	r1, r1
 8022946:	b29b      	uxth	r3, r3
 8022948:	ebae 0e01 	sub.w	lr, lr, r1
 802294c:	435f      	muls	r7, r3
 802294e:	fa1f fe8e 	uxth.w	lr, lr
 8022952:	fb0e 770a 	mla	r7, lr, sl, r7
 8022956:	f892 a002 	ldrb.w	sl, [r2, #2]
 802295a:	fb01 770a 	mla	r7, r1, sl, r7
 802295e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022962:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022966:	f814 7008 	ldrb.w	r7, [r4, r8]
 802296a:	f896 8000 	ldrb.w	r8, [r6]
 802296e:	7876      	ldrb	r6, [r6, #1]
 8022970:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8022974:	fb03 f808 	mul.w	r8, r3, r8
 8022978:	4373      	muls	r3, r6
 802297a:	fb0e 8807 	mla	r8, lr, r7, r8
 802297e:	7817      	ldrb	r7, [r2, #0]
 8022980:	fb0e 330c 	mla	r3, lr, ip, r3
 8022984:	fb01 8807 	mla	r8, r1, r7, r8
 8022988:	7807      	ldrb	r7, [r0, #0]
 802298a:	fb09 8707 	mla	r7, r9, r7, r8
 802298e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022992:	ea4a 0707 	orr.w	r7, sl, r7
 8022996:	f892 a001 	ldrb.w	sl, [r2, #1]
 802299a:	fb01 310a 	mla	r1, r1, sl, r3
 802299e:	f890 a001 	ldrb.w	sl, [r0, #1]
 80229a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229a4:	fb09 1a0a 	mla	sl, r9, sl, r1
 80229a8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80229ac:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80229b0:	ea47 070a 	orr.w	r7, r7, sl
 80229b4:	801f      	strh	r7, [r3, #0]
 80229b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229b8:	3302      	adds	r3, #2
 80229ba:	9309      	str	r3, [sp, #36]	; 0x24
 80229bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80229be:	449b      	add	fp, r3
 80229c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229c2:	441d      	add	r5, r3
 80229c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80229c6:	3b01      	subs	r3, #1
 80229c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80229ca:	e770      	b.n	80228ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80229cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80229ce:	449b      	add	fp, r3
 80229d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229d2:	441d      	add	r5, r3
 80229d4:	9b06      	ldr	r3, [sp, #24]
 80229d6:	3b01      	subs	r3, #1
 80229d8:	9306      	str	r3, [sp, #24]
 80229da:	9b07      	ldr	r3, [sp, #28]
 80229dc:	3302      	adds	r3, #2
 80229de:	9307      	str	r3, [sp, #28]
 80229e0:	e745      	b.n	802286e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80229e2:	d023      	beq.n	8022a2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80229e4:	9b06      	ldr	r3, [sp, #24]
 80229e6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80229e8:	3b01      	subs	r3, #1
 80229ea:	fb00 b003 	mla	r0, r0, r3, fp
 80229ee:	1400      	asrs	r0, r0, #16
 80229f0:	f53f af59 	bmi.w	80228a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80229f4:	3901      	subs	r1, #1
 80229f6:	4288      	cmp	r0, r1
 80229f8:	f6bf af55 	bge.w	80228a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80229fc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80229fe:	fb01 5303 	mla	r3, r1, r3, r5
 8022a02:	141b      	asrs	r3, r3, #16
 8022a04:	f53f af4f 	bmi.w	80228a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022a08:	3a01      	subs	r2, #1
 8022a0a:	4293      	cmp	r3, r2
 8022a0c:	f6bf af4b 	bge.w	80228a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022a10:	9b06      	ldr	r3, [sp, #24]
 8022a12:	9309      	str	r3, [sp, #36]	; 0x24
 8022a14:	9b07      	ldr	r3, [sp, #28]
 8022a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8022a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	dc70      	bgt.n	8022b00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8022a1e:	9b06      	ldr	r3, [sp, #24]
 8022a20:	9a07      	ldr	r2, [sp, #28]
 8022a22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022a26:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022a2a:	9307      	str	r3, [sp, #28]
 8022a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a2e:	2b00      	cmp	r3, #0
 8022a30:	f340 80eb 	ble.w	8022c0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8022a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022a38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022a3a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022a3e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022a42:	eef0 6a48 	vmov.f32	s13, s16
 8022a46:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022a4a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022a4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a52:	ee16 ba90 	vmov	fp, s13
 8022a56:	eef0 6a68 	vmov.f32	s13, s17
 8022a5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a5e:	ee16 5a90 	vmov	r5, s13
 8022a62:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022a66:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022a6a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022a6e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022a72:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022a76:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022a7a:	ee18 2a10 	vmov	r2, s16
 8022a7e:	eeb0 8a47 	vmov.f32	s16, s14
 8022a82:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a86:	ee18 2a90 	vmov	r2, s17
 8022a8a:	9323      	str	r3, [sp, #140]	; 0x8c
 8022a8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022a8e:	eef0 8a67 	vmov.f32	s17, s15
 8022a92:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a96:	9324      	str	r3, [sp, #144]	; 0x90
 8022a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022a9c:	3b01      	subs	r3, #1
 8022a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8022aa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022aa2:	bf08      	it	eq
 8022aa4:	4613      	moveq	r3, r2
 8022aa6:	9306      	str	r3, [sp, #24]
 8022aa8:	e6d3      	b.n	8022852 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022aaa:	b149      	cbz	r1, 8022ac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8022aac:	5cba      	ldrb	r2, [r7, r2]
 8022aae:	4660      	mov	r0, ip
 8022ab0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ab4:	4422      	add	r2, r4
 8022ab6:	4666      	mov	r6, ip
 8022ab8:	e734      	b.n	8022924 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8022aba:	4660      	mov	r0, ip
 8022abc:	4662      	mov	r2, ip
 8022abe:	e731      	b.n	8022924 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8022ac0:	4660      	mov	r0, ip
 8022ac2:	4662      	mov	r2, ip
 8022ac4:	e7f7      	b.n	8022ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8022ac6:	f110 0c01 	adds.w	ip, r0, #1
 8022aca:	f53f af74 	bmi.w	80229b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022ace:	4562      	cmp	r2, ip
 8022ad0:	f6ff af71 	blt.w	80229b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022ad4:	f116 0c01 	adds.w	ip, r6, #1
 8022ad8:	f53f af6d 	bmi.w	80229b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022adc:	4567      	cmp	r7, ip
 8022ade:	f6ff af6a 	blt.w	80229b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022ae2:	b23f      	sxth	r7, r7
 8022ae4:	b212      	sxth	r2, r2
 8022ae6:	9701      	str	r7, [sp, #4]
 8022ae8:	9200      	str	r2, [sp, #0]
 8022aea:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022aee:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8022af2:	4623      	mov	r3, r4
 8022af4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022af6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8022afa:	f7ff fdc5 	bl	8022688 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8022afe:	e75a      	b.n	80229b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022b00:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8022b02:	ea4f 462b 	mov.w	r6, fp, asr #16
 8022b06:	1428      	asrs	r0, r5, #16
 8022b08:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022b0c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022b10:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022b14:	fb02 6000 	mla	r0, r2, r0, r6
 8022b18:	9e08      	ldr	r6, [sp, #32]
 8022b1a:	f816 8000 	ldrb.w	r8, [r6, r0]
 8022b1e:	1837      	adds	r7, r6, r0
 8022b20:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022b24:	eb04 0c08 	add.w	ip, r4, r8
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	d060      	beq.n	8022bee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8022b2c:	787e      	ldrb	r6, [r7, #1]
 8022b2e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022b32:	4426      	add	r6, r4
 8022b34:	2900      	cmp	r1, #0
 8022b36:	d062      	beq.n	8022bfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8022b38:	18b8      	adds	r0, r7, r2
 8022b3a:	5cba      	ldrb	r2, [r7, r2]
 8022b3c:	7840      	ldrb	r0, [r0, #1]
 8022b3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022b42:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022b46:	4422      	add	r2, r4
 8022b48:	4420      	add	r0, r4
 8022b4a:	b29b      	uxth	r3, r3
 8022b4c:	78b7      	ldrb	r7, [r6, #2]
 8022b4e:	b289      	uxth	r1, r1
 8022b50:	f89c a002 	ldrb.w	sl, [ip, #2]
 8022b54:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022b58:	fb03 f901 	mul.w	r9, r3, r1
 8022b5c:	011b      	lsls	r3, r3, #4
 8022b5e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022b62:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022b66:	eba3 0309 	sub.w	r3, r3, r9
 8022b6a:	b289      	uxth	r1, r1
 8022b6c:	b29b      	uxth	r3, r3
 8022b6e:	ebae 0e01 	sub.w	lr, lr, r1
 8022b72:	435f      	muls	r7, r3
 8022b74:	fa1f fe8e 	uxth.w	lr, lr
 8022b78:	fb0e 770a 	mla	r7, lr, sl, r7
 8022b7c:	f892 a002 	ldrb.w	sl, [r2, #2]
 8022b80:	fb01 770a 	mla	r7, r1, sl, r7
 8022b84:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022b88:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022b8c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8022b90:	f896 8000 	ldrb.w	r8, [r6]
 8022b94:	7876      	ldrb	r6, [r6, #1]
 8022b96:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8022b9a:	fb03 f808 	mul.w	r8, r3, r8
 8022b9e:	4373      	muls	r3, r6
 8022ba0:	7856      	ldrb	r6, [r2, #1]
 8022ba2:	fb0e 8807 	mla	r8, lr, r7, r8
 8022ba6:	7817      	ldrb	r7, [r2, #0]
 8022ba8:	fb0e 330c 	mla	r3, lr, ip, r3
 8022bac:	fb01 8807 	mla	r8, r1, r7, r8
 8022bb0:	7807      	ldrb	r7, [r0, #0]
 8022bb2:	fb01 3306 	mla	r3, r1, r6, r3
 8022bb6:	fb09 8707 	mla	r7, r9, r7, r8
 8022bba:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022bbe:	ea4a 0707 	orr.w	r7, sl, r7
 8022bc2:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022bc6:	fb09 3a0a 	mla	sl, r9, sl, r3
 8022bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022bcc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022bd0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022bd4:	ea47 070a 	orr.w	r7, r7, sl
 8022bd8:	f823 7b02 	strh.w	r7, [r3], #2
 8022bdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8022bde:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022be0:	449b      	add	fp, r3
 8022be2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022be4:	441d      	add	r5, r3
 8022be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022be8:	3b01      	subs	r3, #1
 8022bea:	9309      	str	r3, [sp, #36]	; 0x24
 8022bec:	e714      	b.n	8022a18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8022bee:	b149      	cbz	r1, 8022c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8022bf0:	5cba      	ldrb	r2, [r7, r2]
 8022bf2:	4660      	mov	r0, ip
 8022bf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022bf8:	4422      	add	r2, r4
 8022bfa:	4666      	mov	r6, ip
 8022bfc:	e7a5      	b.n	8022b4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8022bfe:	4660      	mov	r0, ip
 8022c00:	4662      	mov	r2, ip
 8022c02:	e7a2      	b.n	8022b4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8022c04:	4660      	mov	r0, ip
 8022c06:	4662      	mov	r2, ip
 8022c08:	e7f7      	b.n	8022bfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8022c0a:	b00f      	add	sp, #60	; 0x3c
 8022c0c:	ecbd 8b08 	vpop	{d8-d11}
 8022c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8022c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c18:	880e      	ldrh	r6, [r1, #0]
 8022c1a:	b085      	sub	sp, #20
 8022c1c:	4691      	mov	r9, r2
 8022c1e:	ea4f 2e26 	mov.w	lr, r6, asr #8
 8022c22:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8022c26:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022c2a:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8022c2e:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 8022c32:	00f6      	lsls	r6, r6, #3
 8022c34:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022c38:	9200      	str	r2, [sp, #0]
 8022c3a:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8022c3e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8022c42:	9201      	str	r2, [sp, #4]
 8022c44:	b2f2      	uxtb	r2, r6
 8022c46:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8022c4a:	9202      	str	r2, [sp, #8]
 8022c4c:	fb04 560c 	mla	r6, r4, ip, r5
 8022c50:	2c00      	cmp	r4, #0
 8022c52:	eb09 0e06 	add.w	lr, r9, r6
 8022c56:	db3e      	blt.n	8022cd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8022c58:	45a0      	cmp	r8, r4
 8022c5a:	dd3c      	ble.n	8022cd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8022c5c:	2d00      	cmp	r5, #0
 8022c5e:	db38      	blt.n	8022cd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8022c60:	45ac      	cmp	ip, r5
 8022c62:	dd36      	ble.n	8022cd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8022c64:	f819 2006 	ldrb.w	r2, [r9, r6]
 8022c68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022c6c:	1c6e      	adds	r6, r5, #1
 8022c6e:	d435      	bmi.n	8022cdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8022c70:	45b4      	cmp	ip, r6
 8022c72:	dd33      	ble.n	8022cdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8022c74:	b3a0      	cbz	r0, 8022ce0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 8022c76:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8022c7a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8022c7e:	3401      	adds	r4, #1
 8022c80:	d432      	bmi.n	8022ce8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8022c82:	45a0      	cmp	r8, r4
 8022c84:	dd30      	ble.n	8022ce8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8022c86:	b397      	cbz	r7, 8022cee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8022c88:	2d00      	cmp	r5, #0
 8022c8a:	db2b      	blt.n	8022ce4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8022c8c:	45ac      	cmp	ip, r5
 8022c8e:	dd29      	ble.n	8022ce4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8022c90:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8022c94:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8022c98:	3501      	adds	r5, #1
 8022c9a:	d42b      	bmi.n	8022cf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8022c9c:	45ac      	cmp	ip, r5
 8022c9e:	dd29      	ble.n	8022cf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8022ca0:	b350      	cbz	r0, 8022cf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 8022ca2:	44f4      	add	ip, lr
 8022ca4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022ca8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8022cac:	280f      	cmp	r0, #15
 8022cae:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022cb2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022cb6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022cba:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022cbe:	d801      	bhi.n	8022cc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 8022cc0:	2f0f      	cmp	r7, #15
 8022cc2:	d91b      	bls.n	8022cfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 8022cc4:	4b85      	ldr	r3, [pc, #532]	; (8022edc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8022cc6:	f240 210d 	movw	r1, #525	; 0x20d
 8022cca:	4a85      	ldr	r2, [pc, #532]	; (8022ee0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8022ccc:	4885      	ldr	r0, [pc, #532]	; (8022ee4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d0>)
 8022cce:	f005 fcdb 	bl	8028688 <__assert_func>
 8022cd2:	2200      	movs	r2, #0
 8022cd4:	e7ca      	b.n	8022c6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 8022cd6:	2600      	movs	r6, #0
 8022cd8:	4632      	mov	r2, r6
 8022cda:	e7d0      	b.n	8022c7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8022cdc:	2600      	movs	r6, #0
 8022cde:	e7ce      	b.n	8022c7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8022ce0:	4606      	mov	r6, r0
 8022ce2:	e7cc      	b.n	8022c7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8022ce4:	2400      	movs	r4, #0
 8022ce6:	e7d7      	b.n	8022c98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 8022ce8:	2300      	movs	r3, #0
 8022cea:	461c      	mov	r4, r3
 8022cec:	e7de      	b.n	8022cac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8022cee:	463b      	mov	r3, r7
 8022cf0:	463c      	mov	r4, r7
 8022cf2:	e7db      	b.n	8022cac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8022cf4:	2300      	movs	r3, #0
 8022cf6:	e7d9      	b.n	8022cac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8022cf8:	4603      	mov	r3, r0
 8022cfa:	e7d7      	b.n	8022cac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8022cfc:	b280      	uxth	r0, r0
 8022cfe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022d02:	b2bf      	uxth	r7, r7
 8022d04:	fb00 fe07 	mul.w	lr, r0, r7
 8022d08:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8022d0c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022d10:	eba0 0c0e 	sub.w	ip, r0, lr
 8022d14:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8022d18:	b2bf      	uxth	r7, r7
 8022d1a:	fa1f fc8c 	uxth.w	ip, ip
 8022d1e:	eba5 0507 	sub.w	r5, r5, r7
 8022d22:	fb0c f00a 	mul.w	r0, ip, sl
 8022d26:	b2ad      	uxth	r5, r5
 8022d28:	fb05 000b 	mla	r0, r5, fp, r0
 8022d2c:	fb07 0009 	mla	r0, r7, r9, r0
 8022d30:	fb0e 0008 	mla	r0, lr, r8, r0
 8022d34:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022d38:	9003      	str	r0, [sp, #12]
 8022d3a:	d018      	beq.n	8022d6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x15a>
 8022d3c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022d40:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022d44:	fb0b f000 	mul.w	r0, fp, r0
 8022d48:	fb0b fb02 	mul.w	fp, fp, r2
 8022d4c:	0a02      	lsrs	r2, r0, #8
 8022d4e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022d52:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022d56:	4402      	add	r2, r0
 8022d58:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022d5c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022d60:	0a12      	lsrs	r2, r2, #8
 8022d62:	0a00      	lsrs	r0, r0, #8
 8022d64:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022d68:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022d6c:	4302      	orrs	r2, r0
 8022d6e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022d72:	d019      	beq.n	8022da8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x194>
 8022d74:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8022d78:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022d7c:	fb0a fb0b 	mul.w	fp, sl, fp
 8022d80:	fb0a fa06 	mul.w	sl, sl, r6
 8022d84:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022d88:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022d8c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022d90:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022d94:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022d98:	445e      	add	r6, fp
 8022d9a:	0a00      	lsrs	r0, r0, #8
 8022d9c:	0a36      	lsrs	r6, r6, #8
 8022d9e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022da2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022da6:	4306      	orrs	r6, r0
 8022da8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022dac:	d019      	beq.n	8022de2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ce>
 8022dae:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022db2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022db6:	fb09 fa0a 	mul.w	sl, r9, sl
 8022dba:	fb09 f904 	mul.w	r9, r9, r4
 8022dbe:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022dc2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022dc6:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8022dca:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022dce:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8022dd2:	4454      	add	r4, sl
 8022dd4:	0a00      	lsrs	r0, r0, #8
 8022dd6:	0a24      	lsrs	r4, r4, #8
 8022dd8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022ddc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022de0:	4304      	orrs	r4, r0
 8022de2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022de6:	d019      	beq.n	8022e1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x208>
 8022de8:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022dec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022df0:	fb08 f909 	mul.w	r9, r8, r9
 8022df4:	fb08 f803 	mul.w	r8, r8, r3
 8022df8:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022dfc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022e00:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8022e04:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e08:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022e0c:	444b      	add	r3, r9
 8022e0e:	0a00      	lsrs	r0, r0, #8
 8022e10:	0a1b      	lsrs	r3, r3, #8
 8022e12:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022e16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e1a:	4303      	orrs	r3, r0
 8022e1c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022e20:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022e24:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022e28:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022e2c:	fb0c f808 	mul.w	r8, ip, r8
 8022e30:	fb0c f606 	mul.w	r6, ip, r6
 8022e34:	fb05 8800 	mla	r8, r5, r0, r8
 8022e38:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022e3c:	fb05 6202 	mla	r2, r5, r2, r6
 8022e40:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8022e44:	fb07 8800 	mla	r8, r7, r0, r8
 8022e48:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022e4c:	b2ad      	uxth	r5, r5
 8022e4e:	fb0e 8000 	mla	r0, lr, r0, r8
 8022e52:	0a00      	lsrs	r0, r0, #8
 8022e54:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8022e58:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8022e5c:	9c00      	ldr	r4, [sp, #0]
 8022e5e:	fb07 2700 	mla	r7, r7, r0, r2
 8022e62:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8022e66:	9b03      	ldr	r3, [sp, #12]
 8022e68:	fb0e 7000 	mla	r0, lr, r0, r7
 8022e6c:	436b      	muls	r3, r5
 8022e6e:	0a00      	lsrs	r0, r0, #8
 8022e70:	1c5a      	adds	r2, r3, #1
 8022e72:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022e76:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022e7a:	ea48 0000 	orr.w	r0, r8, r0
 8022e7e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8022e82:	0c03      	lsrs	r3, r0, #16
 8022e84:	b2d2      	uxtb	r2, r2
 8022e86:	fb14 f602 	smulbb	r6, r4, r2
 8022e8a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8022e8e:	b2c0      	uxtb	r0, r0
 8022e90:	fb03 6305 	mla	r3, r3, r5, r6
 8022e94:	b29e      	uxth	r6, r3
 8022e96:	9b01      	ldr	r3, [sp, #4]
 8022e98:	fb13 f302 	smulbb	r3, r3, r2
 8022e9c:	fb04 3405 	mla	r4, r4, r5, r3
 8022ea0:	9b02      	ldr	r3, [sp, #8]
 8022ea2:	fb13 f202 	smulbb	r2, r3, r2
 8022ea6:	b2a4      	uxth	r4, r4
 8022ea8:	1c73      	adds	r3, r6, #1
 8022eaa:	fb00 2005 	mla	r0, r0, r5, r2
 8022eae:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8022eb2:	b280      	uxth	r0, r0
 8022eb4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022eb8:	1c42      	adds	r2, r0, #1
 8022eba:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022ebe:	1c62      	adds	r2, r4, #1
 8022ec0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022ec4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8022ec8:	0952      	lsrs	r2, r2, #5
 8022eca:	4303      	orrs	r3, r0
 8022ecc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022ed0:	4313      	orrs	r3, r2
 8022ed2:	800b      	strh	r3, [r1, #0]
 8022ed4:	b005      	add	sp, #20
 8022ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eda:	bf00      	nop
 8022edc:	0802cea2 	.word	0x0802cea2
 8022ee0:	0802d465 	.word	0x0802d465
 8022ee4:	0802cf8b 	.word	0x0802cf8b

08022ee8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eec:	ed2d 8b08 	vpush	{d8-d11}
 8022ef0:	b09f      	sub	sp, #124	; 0x7c
 8022ef2:	eeb0 aa40 	vmov.f32	s20, s0
 8022ef6:	eef0 9a60 	vmov.f32	s19, s1
 8022efa:	921b      	str	r2, [sp, #108]	; 0x6c
 8022efc:	eeb0 9a41 	vmov.f32	s18, s2
 8022f00:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8022f02:	eeb0 8a62 	vmov.f32	s16, s5
 8022f06:	9309      	str	r3, [sp, #36]	; 0x24
 8022f08:	eef0 8a43 	vmov.f32	s17, s6
 8022f0c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8022f10:	eef0 ba44 	vmov.f32	s23, s8
 8022f14:	901d      	str	r0, [sp, #116]	; 0x74
 8022f16:	eeb0 ba64 	vmov.f32	s22, s9
 8022f1a:	931c      	str	r3, [sp, #112]	; 0x70
 8022f1c:	eef0 aa45 	vmov.f32	s21, s10
 8022f20:	6850      	ldr	r0, [r2, #4]
 8022f22:	9119      	str	r1, [sp, #100]	; 0x64
 8022f24:	6812      	ldr	r2, [r2, #0]
 8022f26:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8022f28:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8022f2c:	fb00 1303 	mla	r3, r0, r3, r1
 8022f30:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022f34:	930c      	str	r3, [sp, #48]	; 0x30
 8022f36:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022f38:	681b      	ldr	r3, [r3, #0]
 8022f3a:	9312      	str	r3, [sp, #72]	; 0x48
 8022f3c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022f3e:	685e      	ldr	r6, [r3, #4]
 8022f40:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8022f44:	3604      	adds	r6, #4
 8022f46:	930d      	str	r3, [sp, #52]	; 0x34
 8022f48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022f4a:	2b00      	cmp	r3, #0
 8022f4c:	dc03      	bgt.n	8022f56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022f4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022f50:	2b00      	cmp	r3, #0
 8022f52:	f340 838d 	ble.w	8023670 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 8022f56:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022f58:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022f5c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022f60:	1e48      	subs	r0, r1, #1
 8022f62:	1e57      	subs	r7, r2, #1
 8022f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f66:	2b00      	cmp	r3, #0
 8022f68:	f340 819a 	ble.w	80232a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8022f6c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8022f6e:	142b      	asrs	r3, r5, #16
 8022f70:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022f74:	d406      	bmi.n	8022f84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022f76:	4584      	cmp	ip, r0
 8022f78:	da04      	bge.n	8022f84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022f7a:	2b00      	cmp	r3, #0
 8022f7c:	db02      	blt.n	8022f84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022f7e:	42bb      	cmp	r3, r7
 8022f80:	f2c0 818f 	blt.w	80232a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8022f84:	f11c 0c01 	adds.w	ip, ip, #1
 8022f88:	f100 817d 	bmi.w	8023286 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8022f8c:	4561      	cmp	r1, ip
 8022f8e:	f2c0 817a 	blt.w	8023286 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8022f92:	3301      	adds	r3, #1
 8022f94:	f100 8177 	bmi.w	8023286 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8022f98:	429a      	cmp	r2, r3
 8022f9a:	f2c0 8174 	blt.w	8023286 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8022f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fa0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8022fa4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	f340 8199 	ble.w	80232de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8022fac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022fae:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022fb2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022fb6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022fba:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022fbc:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8022fc0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022fc2:	141b      	asrs	r3, r3, #16
 8022fc4:	f100 81dc 	bmi.w	8023380 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8022fc8:	f100 38ff 	add.w	r8, r0, #4294967295
 8022fcc:	4543      	cmp	r3, r8
 8022fce:	f280 81d7 	bge.w	8023380 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8022fd2:	f1bc 0f00 	cmp.w	ip, #0
 8022fd6:	f2c0 81d3 	blt.w	8023380 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8022fda:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022fde:	45c4      	cmp	ip, r8
 8022fe0:	f280 81ce 	bge.w	8023380 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8022fe4:	b200      	sxth	r0, r0
 8022fe6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022fe8:	fb0c 3300 	mla	r3, ip, r0, r3
 8022fec:	eb04 0803 	add.w	r8, r4, r3
 8022ff0:	5ce3      	ldrb	r3, [r4, r3]
 8022ff2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022ff6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022ffa:	2a00      	cmp	r2, #0
 8022ffc:	f000 81b5 	beq.w	802336a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8023000:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023004:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023008:	940e      	str	r4, [sp, #56]	; 0x38
 802300a:	0e24      	lsrs	r4, r4, #24
 802300c:	9415      	str	r4, [sp, #84]	; 0x54
 802300e:	b179      	cbz	r1, 8023030 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023010:	eb08 0c00 	add.w	ip, r8, r0
 8023014:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023018:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802301c:	900a      	str	r0, [sp, #40]	; 0x28
 802301e:	0e00      	lsrs	r0, r0, #24
 8023020:	9013      	str	r0, [sp, #76]	; 0x4c
 8023022:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023026:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802302a:	900f      	str	r0, [sp, #60]	; 0x3c
 802302c:	0e00      	lsrs	r0, r0, #24
 802302e:	9016      	str	r0, [sp, #88]	; 0x58
 8023030:	b292      	uxth	r2, r2
 8023032:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023034:	b289      	uxth	r1, r1
 8023036:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023038:	fb02 f901 	mul.w	r9, r2, r1
 802303c:	0112      	lsls	r2, r2, #4
 802303e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023042:	eba2 0809 	sub.w	r8, r2, r9
 8023046:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802304a:	b289      	uxth	r1, r1
 802304c:	fa1f f888 	uxth.w	r8, r8
 8023050:	1a52      	subs	r2, r2, r1
 8023052:	fb08 f000 	mul.w	r0, r8, r0
 8023056:	b292      	uxth	r2, r2
 8023058:	fb02 000e 	mla	r0, r2, lr, r0
 802305c:	fb01 0004 	mla	r0, r1, r4, r0
 8023060:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023062:	fb09 0004 	mla	r0, r9, r4, r0
 8023066:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802306a:	2800      	cmp	r0, #0
 802306c:	f000 8100 	beq.w	8023270 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023070:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023074:	d01b      	beq.n	80230ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023076:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802307a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802307e:	fb0e fa0a 	mul.w	sl, lr, sl
 8023082:	fb0e fe03 	mul.w	lr, lr, r3
 8023086:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802308a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802308e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023092:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023096:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802309a:	4453      	add	r3, sl
 802309c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230a0:	0a1b      	lsrs	r3, r3, #8
 80230a2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80230a6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80230aa:	ea43 030c 	orr.w	r3, r3, ip
 80230ae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80230b0:	2cff      	cmp	r4, #255	; 0xff
 80230b2:	d021      	beq.n	80230f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80230b4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80230b6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80230ba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80230bc:	fb04 fb0b 	mul.w	fp, r4, fp
 80230c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80230c2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80230c6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80230c8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80230cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80230d0:	fb04 fa0a 	mul.w	sl, r4, sl
 80230d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230d8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80230dc:	44de      	add	lr, fp
 80230de:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80230e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80230e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80230f2:	ea4e 040a 	orr.w	r4, lr, sl
 80230f6:	940e      	str	r4, [sp, #56]	; 0x38
 80230f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80230fa:	2cff      	cmp	r4, #255	; 0xff
 80230fc:	d021      	beq.n	8023142 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80230fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023100:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023104:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023106:	fb04 fb0b 	mul.w	fp, r4, fp
 802310a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802310c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023110:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023112:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023116:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802311a:	fb04 fa0a 	mul.w	sl, r4, sl
 802311e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023122:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023126:	44de      	add	lr, fp
 8023128:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802312c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023130:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023134:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023138:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802313c:	ea4e 040a 	orr.w	r4, lr, sl
 8023140:	940a      	str	r4, [sp, #40]	; 0x28
 8023142:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023144:	2cff      	cmp	r4, #255	; 0xff
 8023146:	d021      	beq.n	802318c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8023148:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802314a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802314e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023150:	fb04 fb0b 	mul.w	fp, r4, fp
 8023154:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023156:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802315a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802315c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023160:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023164:	fb04 fa0a 	mul.w	sl, r4, sl
 8023168:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802316c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023170:	44de      	add	lr, fp
 8023172:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023176:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802317a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802317e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023182:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023186:	ea4e 040a 	orr.w	r4, lr, sl
 802318a:	940f      	str	r4, [sp, #60]	; 0x3c
 802318c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802318e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023192:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023196:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802319a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802319c:	fb08 fc0c 	mul.w	ip, r8, ip
 80231a0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80231a4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80231a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80231aa:	fb01 cc0e 	mla	ip, r1, lr, ip
 80231ae:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80231b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80231b4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80231b8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80231bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80231be:	fb08 f80e 	mul.w	r8, r8, lr
 80231c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231c6:	f8b7 e000 	ldrh.w	lr, [r7]
 80231ca:	fb02 8303 	mla	r3, r2, r3, r8
 80231ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80231d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80231d4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80231d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80231da:	fb01 330a 	mla	r3, r1, sl, r3
 80231de:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80231e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80231e4:	fb09 3901 	mla	r9, r9, r1, r3
 80231e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80231ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80231ee:	4343      	muls	r3, r0
 80231f0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80231f4:	1c58      	adds	r0, r3, #1
 80231f6:	ea4c 0c09 	orr.w	ip, ip, r9
 80231fa:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80231fe:	ea4f 232e 	mov.w	r3, lr, asr #8
 8023202:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8023206:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802320a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802320e:	fb11 f102 	smulbb	r1, r1, r2
 8023212:	b2c0      	uxtb	r0, r0
 8023214:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8023218:	fb03 1300 	mla	r3, r3, r0, r1
 802321c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023220:	b299      	uxth	r1, r3
 8023222:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023226:	fa5f fc8c 	uxtb.w	ip, ip
 802322a:	fb13 f304 	smulbb	r3, r3, r4
 802322e:	fb1c fc04 	smulbb	ip, ip, r4
 8023232:	fb02 3200 	mla	r2, r2, r0, r3
 8023236:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 802323a:	b2db      	uxtb	r3, r3
 802323c:	b292      	uxth	r2, r2
 802323e:	fb03 cc00 	mla	ip, r3, r0, ip
 8023242:	1c4b      	adds	r3, r1, #1
 8023244:	fa1f fc8c 	uxth.w	ip, ip
 8023248:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802324c:	1c51      	adds	r1, r2, #1
 802324e:	f10c 0001 	add.w	r0, ip, #1
 8023252:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023256:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802325a:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 802325e:	0952      	lsrs	r2, r2, #5
 8023260:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023264:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023268:	ea43 030c 	orr.w	r3, r3, ip
 802326c:	4313      	orrs	r3, r2
 802326e:	803b      	strh	r3, [r7, #0]
 8023270:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023272:	3702      	adds	r7, #2
 8023274:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8023276:	441a      	add	r2, r3
 8023278:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802327a:	441d      	add	r5, r3
 802327c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802327e:	9231      	str	r2, [sp, #196]	; 0xc4
 8023280:	3b01      	subs	r3, #1
 8023282:	931a      	str	r3, [sp, #104]	; 0x68
 8023284:	e68e      	b.n	8022fa4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8023286:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023288:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802328a:	441c      	add	r4, r3
 802328c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802328e:	441d      	add	r5, r3
 8023290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023292:	9431      	str	r4, [sp, #196]	; 0xc4
 8023294:	3b01      	subs	r3, #1
 8023296:	9309      	str	r3, [sp, #36]	; 0x24
 8023298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802329a:	3302      	adds	r3, #2
 802329c:	930c      	str	r3, [sp, #48]	; 0x30
 802329e:	e661      	b.n	8022f64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80232a0:	d024      	beq.n	80232ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80232a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232a4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80232a6:	3b01      	subs	r3, #1
 80232a8:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80232aa:	fb00 4003 	mla	r0, r0, r3, r4
 80232ae:	1400      	asrs	r0, r0, #16
 80232b0:	f53f ae75 	bmi.w	8022f9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80232b4:	3901      	subs	r1, #1
 80232b6:	4288      	cmp	r0, r1
 80232b8:	f6bf ae71 	bge.w	8022f9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80232bc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80232be:	fb01 5303 	mla	r3, r1, r3, r5
 80232c2:	141b      	asrs	r3, r3, #16
 80232c4:	f53f ae6b 	bmi.w	8022f9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80232c8:	3a01      	subs	r2, #1
 80232ca:	4293      	cmp	r3, r2
 80232cc:	f6bf ae67 	bge.w	8022f9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80232d0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80232d4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80232d8:	f1bb 0f00 	cmp.w	fp, #0
 80232dc:	dc70      	bgt.n	80233c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80232de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232e0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80232e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80232e6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80232ea:	930c      	str	r3, [sp, #48]	; 0x30
 80232ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	f340 81be 	ble.w	8023670 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 80232f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80232f8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80232fa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80232fe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023302:	eef0 6a48 	vmov.f32	s13, s16
 8023306:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802330a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802330e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023312:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8023316:	eef0 6a68 	vmov.f32	s13, s17
 802331a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802331e:	ee16 5a90 	vmov	r5, s13
 8023322:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023326:	ee69 7a27 	vmul.f32	s15, s18, s15
 802332a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802332e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023332:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023336:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802333a:	ee18 2a10 	vmov	r2, s16
 802333e:	eeb0 8a47 	vmov.f32	s16, s14
 8023342:	fb92 f3f3 	sdiv	r3, r2, r3
 8023346:	ee18 2a90 	vmov	r2, s17
 802334a:	9333      	str	r3, [sp, #204]	; 0xcc
 802334c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802334e:	eef0 8a67 	vmov.f32	s17, s15
 8023352:	fb92 f3f3 	sdiv	r3, r2, r3
 8023356:	9334      	str	r3, [sp, #208]	; 0xd0
 8023358:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802335a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802335c:	3b01      	subs	r3, #1
 802335e:	9319      	str	r3, [sp, #100]	; 0x64
 8023360:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023362:	bf08      	it	eq
 8023364:	4613      	moveq	r3, r2
 8023366:	9309      	str	r3, [sp, #36]	; 0x24
 8023368:	e5ee      	b.n	8022f48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802336a:	2900      	cmp	r1, #0
 802336c:	f43f ae60 	beq.w	8023030 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023370:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023374:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023378:	900a      	str	r0, [sp, #40]	; 0x28
 802337a:	0e00      	lsrs	r0, r0, #24
 802337c:	9013      	str	r0, [sp, #76]	; 0x4c
 802337e:	e657      	b.n	8023030 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023380:	f113 0801 	adds.w	r8, r3, #1
 8023384:	f53f af74 	bmi.w	8023270 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023388:	4540      	cmp	r0, r8
 802338a:	f6ff af71 	blt.w	8023270 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 802338e:	f11c 0801 	adds.w	r8, ip, #1
 8023392:	f53f af6d 	bmi.w	8023270 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023396:	45c6      	cmp	lr, r8
 8023398:	f6ff af6a 	blt.w	8023270 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 802339c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802339e:	b200      	sxth	r0, r0
 80233a0:	9302      	str	r3, [sp, #8]
 80233a2:	fa0f f38e 	sxth.w	r3, lr
 80233a6:	9000      	str	r0, [sp, #0]
 80233a8:	9301      	str	r3, [sp, #4]
 80233aa:	4633      	mov	r3, r6
 80233ac:	981d      	ldr	r0, [sp, #116]	; 0x74
 80233ae:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80233b2:	e9cd c203 	strd	ip, r2, [sp, #12]
 80233b6:	4639      	mov	r1, r7
 80233b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80233ba:	f7ff fc2b 	bl	8022c14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80233be:	e757      	b.n	8023270 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80233c0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80233c2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80233c6:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80233c8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80233cc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80233ce:	1427      	asrs	r7, r4, #16
 80233d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80233d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80233d6:	142b      	asrs	r3, r5, #16
 80233d8:	fb01 7303 	mla	r3, r1, r3, r7
 80233dc:	18e7      	adds	r7, r4, r3
 80233de:	5ce3      	ldrb	r3, [r4, r3]
 80233e0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80233e4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80233e8:	2a00      	cmp	r2, #0
 80233ea:	f000 8137 	beq.w	802365c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 80233ee:	f897 e001 	ldrb.w	lr, [r7, #1]
 80233f2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80233f6:	9410      	str	r4, [sp, #64]	; 0x40
 80233f8:	0e24      	lsrs	r4, r4, #24
 80233fa:	9417      	str	r4, [sp, #92]	; 0x5c
 80233fc:	b170      	cbz	r0, 802341c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 80233fe:	eb07 0e01 	add.w	lr, r7, r1
 8023402:	5c79      	ldrb	r1, [r7, r1]
 8023404:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023408:	910b      	str	r1, [sp, #44]	; 0x2c
 802340a:	0e09      	lsrs	r1, r1, #24
 802340c:	9114      	str	r1, [sp, #80]	; 0x50
 802340e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8023412:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023416:	9111      	str	r1, [sp, #68]	; 0x44
 8023418:	0e09      	lsrs	r1, r1, #24
 802341a:	9118      	str	r1, [sp, #96]	; 0x60
 802341c:	b292      	uxth	r2, r2
 802341e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023420:	b280      	uxth	r0, r0
 8023422:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023424:	fb02 f800 	mul.w	r8, r2, r0
 8023428:	0112      	lsls	r2, r2, #4
 802342a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802342e:	eba2 0e08 	sub.w	lr, r2, r8
 8023432:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023436:	b280      	uxth	r0, r0
 8023438:	fa1f fe8e 	uxth.w	lr, lr
 802343c:	1a12      	subs	r2, r2, r0
 802343e:	fb0e f101 	mul.w	r1, lr, r1
 8023442:	b292      	uxth	r2, r2
 8023444:	fb02 110c 	mla	r1, r2, ip, r1
 8023448:	fb00 1104 	mla	r1, r0, r4, r1
 802344c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802344e:	fb08 1104 	mla	r1, r8, r4, r1
 8023452:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023456:	2900      	cmp	r1, #0
 8023458:	f000 80f5 	beq.w	8023646 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 802345c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023460:	d019      	beq.n	8023496 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ae>
 8023462:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023466:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802346a:	fb0c fa0a 	mul.w	sl, ip, sl
 802346e:	fb0c fc03 	mul.w	ip, ip, r3
 8023472:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023476:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802347a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802347e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023482:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023486:	4453      	add	r3, sl
 8023488:	0a3f      	lsrs	r7, r7, #8
 802348a:	0a1b      	lsrs	r3, r3, #8
 802348c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023490:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023494:	433b      	orrs	r3, r7
 8023496:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023498:	2cff      	cmp	r4, #255	; 0xff
 802349a:	d020      	beq.n	80234de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 802349c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802349e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80234a2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80234a4:	4367      	muls	r7, r4
 80234a6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80234a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80234ac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80234b0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80234b2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80234b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80234be:	44bc      	add	ip, r7
 80234c0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80234c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80234cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80234d8:	ea4c 040a 	orr.w	r4, ip, sl
 80234dc:	9410      	str	r4, [sp, #64]	; 0x40
 80234de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80234e0:	2cff      	cmp	r4, #255	; 0xff
 80234e2:	d020      	beq.n	8023526 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x63e>
 80234e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80234e6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80234ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80234ec:	4367      	muls	r7, r4
 80234ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80234f0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80234f4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80234f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80234fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80234fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023502:	fb04 fa0a 	mul.w	sl, r4, sl
 8023506:	44bc      	add	ip, r7
 8023508:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802350c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023510:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023514:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023518:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802351c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023520:	ea4c 040a 	orr.w	r4, ip, sl
 8023524:	940b      	str	r4, [sp, #44]	; 0x2c
 8023526:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023528:	2cff      	cmp	r4, #255	; 0xff
 802352a:	d020      	beq.n	802356e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x686>
 802352c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802352e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023532:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023534:	4367      	muls	r7, r4
 8023536:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023538:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802353c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023540:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023542:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023546:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802354a:	fb04 fa0a 	mul.w	sl, r4, sl
 802354e:	44bc      	add	ip, r7
 8023550:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023554:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023558:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802355c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023560:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023564:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023568:	ea4c 040a 	orr.w	r4, ip, sl
 802356c:	9411      	str	r4, [sp, #68]	; 0x44
 802356e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023570:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023574:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023578:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802357c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802357e:	fb0e f707 	mul.w	r7, lr, r7
 8023582:	fb02 770c 	mla	r7, r2, ip, r7
 8023586:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802358a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802358c:	fb00 770c 	mla	r7, r0, ip, r7
 8023590:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023594:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023596:	fb08 770c 	mla	r7, r8, ip, r7
 802359a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802359e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80235a0:	fb0e fe0c 	mul.w	lr, lr, ip
 80235a4:	0a3f      	lsrs	r7, r7, #8
 80235a6:	fb02 e303 	mla	r3, r2, r3, lr
 80235aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80235ac:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80235b0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80235b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80235b6:	fb00 330a 	mla	r3, r0, sl, r3
 80235ba:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80235be:	f8b9 0000 	ldrh.w	r0, [r9]
 80235c2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80235c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80235c8:	1202      	asrs	r2, r0, #8
 80235ca:	434b      	muls	r3, r1
 80235cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80235d0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80235d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80235d8:	1c59      	adds	r1, r3, #1
 80235da:	ea47 070c 	orr.w	r7, r7, ip
 80235de:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80235e2:	0c3b      	lsrs	r3, r7, #16
 80235e4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80235e8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80235ec:	b2ff      	uxtb	r7, r7
 80235ee:	fb13 f304 	smulbb	r3, r3, r4
 80235f2:	b2c9      	uxtb	r1, r1
 80235f4:	fb1c fc04 	smulbb	ip, ip, r4
 80235f8:	fb02 3201 	mla	r2, r2, r1, r3
 80235fc:	10c3      	asrs	r3, r0, #3
 80235fe:	fb17 f704 	smulbb	r7, r7, r4
 8023602:	00c0      	lsls	r0, r0, #3
 8023604:	b292      	uxth	r2, r2
 8023606:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802360a:	b2c0      	uxtb	r0, r0
 802360c:	fb03 c301 	mla	r3, r3, r1, ip
 8023610:	f102 0c01 	add.w	ip, r2, #1
 8023614:	fb00 7001 	mla	r0, r0, r1, r7
 8023618:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802361c:	b280      	uxth	r0, r0
 802361e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8023622:	b29b      	uxth	r3, r3
 8023624:	1c42      	adds	r2, r0, #1
 8023626:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802362a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802362e:	ea4c 0200 	orr.w	r2, ip, r0
 8023632:	f103 0c01 	add.w	ip, r3, #1
 8023636:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802363a:	095b      	lsrs	r3, r3, #5
 802363c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023640:	431a      	orrs	r2, r3
 8023642:	f8a9 2000 	strh.w	r2, [r9]
 8023646:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023648:	f109 0902 	add.w	r9, r9, #2
 802364c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802364e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023652:	441a      	add	r2, r3
 8023654:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023656:	9231      	str	r2, [sp, #196]	; 0xc4
 8023658:	441d      	add	r5, r3
 802365a:	e63d      	b.n	80232d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802365c:	2800      	cmp	r0, #0
 802365e:	f43f aedd 	beq.w	802341c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8023662:	5c79      	ldrb	r1, [r7, r1]
 8023664:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023668:	910b      	str	r1, [sp, #44]	; 0x2c
 802366a:	0e09      	lsrs	r1, r1, #24
 802366c:	9114      	str	r1, [sp, #80]	; 0x50
 802366e:	e6d5      	b.n	802341c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8023670:	b01f      	add	sp, #124	; 0x7c
 8023672:	ecbd 8b08 	vpop	{d8-d11}
 8023676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802367c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 802367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023680:	880e      	ldrh	r6, [r1, #0]
 8023682:	b085      	sub	sp, #20
 8023684:	4691      	mov	r9, r2
 8023686:	ea4f 2e26 	mov.w	lr, r6, asr #8
 802368a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802368e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8023692:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8023696:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 802369a:	00f6      	lsls	r6, r6, #3
 802369c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80236a0:	9200      	str	r2, [sp, #0]
 80236a2:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 80236a6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80236aa:	9201      	str	r2, [sp, #4]
 80236ac:	b2f2      	uxtb	r2, r6
 80236ae:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80236b2:	9202      	str	r2, [sp, #8]
 80236b4:	fb04 560c 	mla	r6, r4, ip, r5
 80236b8:	2c00      	cmp	r4, #0
 80236ba:	eb09 0e06 	add.w	lr, r9, r6
 80236be:	db3e      	blt.n	802373e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 80236c0:	45a0      	cmp	r8, r4
 80236c2:	dd3c      	ble.n	802373e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 80236c4:	2d00      	cmp	r5, #0
 80236c6:	db38      	blt.n	802373a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 80236c8:	45ac      	cmp	ip, r5
 80236ca:	dd36      	ble.n	802373a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 80236cc:	f819 2006 	ldrb.w	r2, [r9, r6]
 80236d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80236d4:	1c6e      	adds	r6, r5, #1
 80236d6:	d435      	bmi.n	8023744 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 80236d8:	45b4      	cmp	ip, r6
 80236da:	dd33      	ble.n	8023744 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 80236dc:	b3a0      	cbz	r0, 8023748 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 80236de:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80236e2:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80236e6:	3401      	adds	r4, #1
 80236e8:	d432      	bmi.n	8023750 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 80236ea:	45a0      	cmp	r8, r4
 80236ec:	dd30      	ble.n	8023750 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 80236ee:	b397      	cbz	r7, 8023756 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 80236f0:	2d00      	cmp	r5, #0
 80236f2:	db2b      	blt.n	802374c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 80236f4:	45ac      	cmp	ip, r5
 80236f6:	dd29      	ble.n	802374c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 80236f8:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80236fc:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8023700:	3501      	adds	r5, #1
 8023702:	d42b      	bmi.n	802375c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8023704:	45ac      	cmp	ip, r5
 8023706:	dd29      	ble.n	802375c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8023708:	b350      	cbz	r0, 8023760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
 802370a:	44f4      	add	ip, lr
 802370c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023710:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8023714:	280f      	cmp	r0, #15
 8023716:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802371a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802371e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023722:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8023726:	d801      	bhi.n	802372c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
 8023728:	2f0f      	cmp	r7, #15
 802372a:	d91b      	bls.n	8023764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
 802372c:	4b7e      	ldr	r3, [pc, #504]	; (8023928 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 802372e:	f240 210d 	movw	r1, #525	; 0x20d
 8023732:	4a7e      	ldr	r2, [pc, #504]	; (802392c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8023734:	487e      	ldr	r0, [pc, #504]	; (8023930 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8023736:	f004 ffa7 	bl	8028688 <__assert_func>
 802373a:	2200      	movs	r2, #0
 802373c:	e7ca      	b.n	80236d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 802373e:	2600      	movs	r6, #0
 8023740:	4632      	mov	r2, r6
 8023742:	e7d0      	b.n	80236e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8023744:	2600      	movs	r6, #0
 8023746:	e7ce      	b.n	80236e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8023748:	4606      	mov	r6, r0
 802374a:	e7cc      	b.n	80236e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802374c:	2400      	movs	r4, #0
 802374e:	e7d7      	b.n	8023700 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
 8023750:	2300      	movs	r3, #0
 8023752:	461c      	mov	r4, r3
 8023754:	e7de      	b.n	8023714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8023756:	463b      	mov	r3, r7
 8023758:	463c      	mov	r4, r7
 802375a:	e7db      	b.n	8023714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 802375c:	2300      	movs	r3, #0
 802375e:	e7d9      	b.n	8023714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8023760:	4603      	mov	r3, r0
 8023762:	e7d7      	b.n	8023714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8023764:	b280      	uxth	r0, r0
 8023766:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802376a:	b2bf      	uxth	r7, r7
 802376c:	fb00 fe07 	mul.w	lr, r0, r7
 8023770:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8023774:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023778:	eba0 0c0e 	sub.w	ip, r0, lr
 802377c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8023780:	b2bf      	uxth	r7, r7
 8023782:	fa1f fc8c 	uxth.w	ip, ip
 8023786:	eba5 0507 	sub.w	r5, r5, r7
 802378a:	fb0c f00a 	mul.w	r0, ip, sl
 802378e:	b2ad      	uxth	r5, r5
 8023790:	fb05 000b 	mla	r0, r5, fp, r0
 8023794:	fb07 0009 	mla	r0, r7, r9, r0
 8023798:	fb0e 0008 	mla	r0, lr, r8, r0
 802379c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80237a0:	9003      	str	r0, [sp, #12]
 80237a2:	d018      	beq.n	80237d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15a>
 80237a4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80237a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80237ac:	fb0b f000 	mul.w	r0, fp, r0
 80237b0:	fb0b fb02 	mul.w	fp, fp, r2
 80237b4:	0a02      	lsrs	r2, r0, #8
 80237b6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80237ba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80237be:	4402      	add	r2, r0
 80237c0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80237c4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80237c8:	0a12      	lsrs	r2, r2, #8
 80237ca:	0a00      	lsrs	r0, r0, #8
 80237cc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80237d0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80237d4:	4302      	orrs	r2, r0
 80237d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80237da:	d019      	beq.n	8023810 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x194>
 80237dc:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80237e0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80237e4:	fb0a fb0b 	mul.w	fp, sl, fp
 80237e8:	fb0a fa06 	mul.w	sl, sl, r6
 80237ec:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80237f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80237f4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80237f8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80237fc:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8023800:	445e      	add	r6, fp
 8023802:	0a00      	lsrs	r0, r0, #8
 8023804:	0a36      	lsrs	r6, r6, #8
 8023806:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802380a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802380e:	4306      	orrs	r6, r0
 8023810:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023814:	d019      	beq.n	802384a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ce>
 8023816:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802381a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802381e:	fb09 fa0a 	mul.w	sl, r9, sl
 8023822:	fb09 f904 	mul.w	r9, r9, r4
 8023826:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802382a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802382e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8023832:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023836:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 802383a:	4454      	add	r4, sl
 802383c:	0a00      	lsrs	r0, r0, #8
 802383e:	0a24      	lsrs	r4, r4, #8
 8023840:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023844:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023848:	4304      	orrs	r4, r0
 802384a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802384e:	d019      	beq.n	8023884 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x208>
 8023850:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8023854:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023858:	fb08 f909 	mul.w	r9, r8, r9
 802385c:	fb08 f803 	mul.w	r8, r8, r3
 8023860:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8023864:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023868:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802386c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023870:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8023874:	444b      	add	r3, r9
 8023876:	0a00      	lsrs	r0, r0, #8
 8023878:	0a1b      	lsrs	r3, r3, #8
 802387a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802387e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023882:	4303      	orrs	r3, r0
 8023884:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023888:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802388c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023890:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023894:	fb0c f808 	mul.w	r8, ip, r8
 8023898:	fb0c f606 	mul.w	r6, ip, r6
 802389c:	fb05 8800 	mla	r8, r5, r0, r8
 80238a0:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80238a4:	fb05 6202 	mla	r2, r5, r2, r6
 80238a8:	9d01      	ldr	r5, [sp, #4]
 80238aa:	fb07 8800 	mla	r8, r7, r0, r8
 80238ae:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80238b2:	fb0e 8000 	mla	r0, lr, r0, r8
 80238b6:	0a00      	lsrs	r0, r0, #8
 80238b8:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80238bc:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80238c0:	9c02      	ldr	r4, [sp, #8]
 80238c2:	fb07 2700 	mla	r7, r7, r0, r2
 80238c6:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80238ca:	9b03      	ldr	r3, [sp, #12]
 80238cc:	fb0e 7000 	mla	r0, lr, r0, r7
 80238d0:	43da      	mvns	r2, r3
 80238d2:	9b00      	ldr	r3, [sp, #0]
 80238d4:	0a00      	lsrs	r0, r0, #8
 80238d6:	b2d2      	uxtb	r2, r2
 80238d8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80238dc:	4353      	muls	r3, r2
 80238de:	4354      	muls	r4, r2
 80238e0:	ea48 0000 	orr.w	r0, r8, r0
 80238e4:	4355      	muls	r5, r2
 80238e6:	4622      	mov	r2, r4
 80238e8:	1c5c      	adds	r4, r3, #1
 80238ea:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80238ee:	0c03      	lsrs	r3, r0, #16
 80238f0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80238f4:	4b0f      	ldr	r3, [pc, #60]	; (8023934 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b8>)
 80238f6:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 80238fa:	1c54      	adds	r4, r2, #1
 80238fc:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8023900:	b2c2      	uxtb	r2, r0
 8023902:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023906:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802390a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 802390e:	1c6a      	adds	r2, r5, #1
 8023910:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8023914:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023918:	00c0      	lsls	r0, r0, #3
 802391a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802391e:	4318      	orrs	r0, r3
 8023920:	8008      	strh	r0, [r1, #0]
 8023922:	b005      	add	sp, #20
 8023924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023928:	0802cea2 	.word	0x0802cea2
 802392c:	0802d465 	.word	0x0802d465
 8023930:	0802cf8b 	.word	0x0802cf8b
 8023934:	fffff800 	.word	0xfffff800

08023938 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802393c:	ed2d 8b08 	vpush	{d8-d11}
 8023940:	b09b      	sub	sp, #108	; 0x6c
 8023942:	eeb0 aa40 	vmov.f32	s20, s0
 8023946:	eef0 9a60 	vmov.f32	s19, s1
 802394a:	9218      	str	r2, [sp, #96]	; 0x60
 802394c:	eeb0 9a41 	vmov.f32	s18, s2
 8023950:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8023952:	eeb0 8a62 	vmov.f32	s16, s5
 8023956:	9019      	str	r0, [sp, #100]	; 0x64
 8023958:	eef0 8a43 	vmov.f32	s17, s6
 802395c:	6850      	ldr	r0, [r2, #4]
 802395e:	eef0 ba44 	vmov.f32	s23, s8
 8023962:	9116      	str	r1, [sp, #88]	; 0x58
 8023964:	eeb0 ba64 	vmov.f32	s22, s9
 8023968:	9307      	str	r3, [sp, #28]
 802396a:	eef0 aa45 	vmov.f32	s21, s10
 802396e:	6812      	ldr	r2, [r2, #0]
 8023970:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8023972:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8023976:	fb00 1303 	mla	r3, r0, r3, r1
 802397a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802397e:	930a      	str	r3, [sp, #40]	; 0x28
 8023980:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023982:	681b      	ldr	r3, [r3, #0]
 8023984:	930f      	str	r3, [sp, #60]	; 0x3c
 8023986:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023988:	685e      	ldr	r6, [r3, #4]
 802398a:	3604      	adds	r6, #4
 802398c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802398e:	2b00      	cmp	r3, #0
 8023990:	dc03      	bgt.n	802399a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8023992:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023994:	2b00      	cmp	r3, #0
 8023996:	f340 836f 	ble.w	8024078 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 802399a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802399c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80239a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80239a4:	1e48      	subs	r0, r1, #1
 80239a6:	1e57      	subs	r7, r2, #1
 80239a8:	9b07      	ldr	r3, [sp, #28]
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	f340 8188 	ble.w	8023cc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80239b0:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80239b2:	142b      	asrs	r3, r5, #16
 80239b4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80239b8:	d406      	bmi.n	80239c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239ba:	4584      	cmp	ip, r0
 80239bc:	da04      	bge.n	80239c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239be:	2b00      	cmp	r3, #0
 80239c0:	db02      	blt.n	80239c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239c2:	42bb      	cmp	r3, r7
 80239c4:	f2c0 817d 	blt.w	8023cc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80239c8:	f11c 0c01 	adds.w	ip, ip, #1
 80239cc:	f100 816b 	bmi.w	8023ca6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80239d0:	4561      	cmp	r1, ip
 80239d2:	f2c0 8168 	blt.w	8023ca6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80239d6:	3301      	adds	r3, #1
 80239d8:	f100 8165 	bmi.w	8023ca6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80239dc:	429a      	cmp	r2, r3
 80239de:	f2c0 8162 	blt.w	8023ca6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80239e2:	9b07      	ldr	r3, [sp, #28]
 80239e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80239e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80239e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	f340 8187 	ble.w	8023cfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80239f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80239f2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80239f6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80239fa:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80239fe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023a00:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8023a04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023a06:	141b      	asrs	r3, r3, #16
 8023a08:	f100 81ca 	bmi.w	8023da0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a0c:	f101 38ff 	add.w	r8, r1, #4294967295
 8023a10:	4543      	cmp	r3, r8
 8023a12:	f280 81c5 	bge.w	8023da0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a16:	f1bc 0f00 	cmp.w	ip, #0
 8023a1a:	f2c0 81c1 	blt.w	8023da0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a1e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023a22:	45c4      	cmp	ip, r8
 8023a24:	f280 81bc 	bge.w	8023da0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a28:	b209      	sxth	r1, r1
 8023a2a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023a2c:	fb0c 3301 	mla	r3, ip, r1, r3
 8023a30:	eb04 0803 	add.w	r8, r4, r3
 8023a34:	5ce3      	ldrb	r3, [r4, r3]
 8023a36:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023a3a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023a3e:	2a00      	cmp	r2, #0
 8023a40:	f000 81a3 	beq.w	8023d8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023a44:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023a48:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023a4c:	940b      	str	r4, [sp, #44]	; 0x2c
 8023a4e:	0e24      	lsrs	r4, r4, #24
 8023a50:	9412      	str	r4, [sp, #72]	; 0x48
 8023a52:	b178      	cbz	r0, 8023a74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8023a54:	eb08 0c01 	add.w	ip, r8, r1
 8023a58:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023a5c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023a60:	9108      	str	r1, [sp, #32]
 8023a62:	0e09      	lsrs	r1, r1, #24
 8023a64:	9110      	str	r1, [sp, #64]	; 0x40
 8023a66:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8023a6a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023a6e:	910c      	str	r1, [sp, #48]	; 0x30
 8023a70:	0e09      	lsrs	r1, r1, #24
 8023a72:	9113      	str	r1, [sp, #76]	; 0x4c
 8023a74:	b292      	uxth	r2, r2
 8023a76:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023a78:	b280      	uxth	r0, r0
 8023a7a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023a7c:	fb02 f900 	mul.w	r9, r2, r0
 8023a80:	0112      	lsls	r2, r2, #4
 8023a82:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023a86:	eba2 0809 	sub.w	r8, r2, r9
 8023a8a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023a8e:	b280      	uxth	r0, r0
 8023a90:	fa1f f888 	uxth.w	r8, r8
 8023a94:	1a12      	subs	r2, r2, r0
 8023a96:	fb08 f101 	mul.w	r1, r8, r1
 8023a9a:	b292      	uxth	r2, r2
 8023a9c:	fb02 110e 	mla	r1, r2, lr, r1
 8023aa0:	fb00 1104 	mla	r1, r0, r4, r1
 8023aa4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023aa6:	fb09 1104 	mla	r1, r9, r4, r1
 8023aaa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023aae:	2900      	cmp	r1, #0
 8023ab0:	f000 80ee 	beq.w	8023c90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023ab4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023ab8:	d01b      	beq.n	8023af2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023aba:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023abe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023ac2:	fb0e fa0a 	mul.w	sl, lr, sl
 8023ac6:	fb0e fe03 	mul.w	lr, lr, r3
 8023aca:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023ace:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023ad2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023ad6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023ada:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023ade:	4453      	add	r3, sl
 8023ae0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ae4:	0a1b      	lsrs	r3, r3, #8
 8023ae6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023aea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023aee:	ea43 030c 	orr.w	r3, r3, ip
 8023af2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023af4:	2cff      	cmp	r4, #255	; 0xff
 8023af6:	d021      	beq.n	8023b3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023af8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023afa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023afe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b00:	fb04 fb0b 	mul.w	fp, r4, fp
 8023b04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b06:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023b0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b0c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023b10:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b14:	fb04 fa0a 	mul.w	sl, r4, sl
 8023b18:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b1c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023b20:	44de      	add	lr, fp
 8023b22:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023b26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b2e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b36:	ea4e 040a 	orr.w	r4, lr, sl
 8023b3a:	940b      	str	r4, [sp, #44]	; 0x2c
 8023b3c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023b3e:	2cff      	cmp	r4, #255	; 0xff
 8023b40:	d021      	beq.n	8023b86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023b42:	9c08      	ldr	r4, [sp, #32]
 8023b44:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023b48:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023b4a:	fb04 fb0b 	mul.w	fp, r4, fp
 8023b4e:	9c08      	ldr	r4, [sp, #32]
 8023b50:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023b54:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023b56:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023b5a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b5e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023b62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b66:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023b6a:	44de      	add	lr, fp
 8023b6c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023b70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b78:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b7c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b80:	ea4e 040a 	orr.w	r4, lr, sl
 8023b84:	9408      	str	r4, [sp, #32]
 8023b86:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023b88:	2cff      	cmp	r4, #255	; 0xff
 8023b8a:	d021      	beq.n	8023bd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8023b8c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023b8e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023b92:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023b94:	fb04 fb0b 	mul.w	fp, r4, fp
 8023b98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023b9a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023b9e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023ba0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ba4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023ba8:	fb04 fa0a 	mul.w	sl, r4, sl
 8023bac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bb0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023bb4:	44de      	add	lr, fp
 8023bb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023bba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023bbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023bc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bc6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023bca:	ea4e 040a 	orr.w	r4, lr, sl
 8023bce:	940c      	str	r4, [sp, #48]	; 0x30
 8023bd0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023bd2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023bd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023bda:	43c9      	mvns	r1, r1
 8023bdc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023be0:	9c08      	ldr	r4, [sp, #32]
 8023be2:	b2c9      	uxtb	r1, r1
 8023be4:	fb08 fc0c 	mul.w	ip, r8, ip
 8023be8:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023bec:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023bf0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023bf2:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023bf6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023bfa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023bfc:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023c00:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023c04:	fb08 f80e 	mul.w	r8, r8, lr
 8023c08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c0c:	fb02 8303 	mla	r3, r2, r3, r8
 8023c10:	9a08      	ldr	r2, [sp, #32]
 8023c12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c16:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023c1c:	fb00 330a 	mla	r3, r0, sl, r3
 8023c20:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8023c24:	fb09 3900 	mla	r9, r9, r0, r3
 8023c28:	883b      	ldrh	r3, [r7, #0]
 8023c2a:	1218      	asrs	r0, r3, #8
 8023c2c:	10da      	asrs	r2, r3, #3
 8023c2e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023c32:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023c36:	00db      	lsls	r3, r3, #3
 8023c38:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023c3c:	4348      	muls	r0, r1
 8023c3e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023c42:	b2db      	uxtb	r3, r3
 8023c44:	434a      	muls	r2, r1
 8023c46:	ea4c 0c09 	orr.w	ip, ip, r9
 8023c4a:	434b      	muls	r3, r1
 8023c4c:	1c41      	adds	r1, r0, #1
 8023c4e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023c52:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8023c56:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8023c5a:	4960      	ldr	r1, [pc, #384]	; (8023ddc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8023c5c:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8023c60:	1c59      	adds	r1, r3, #1
 8023c62:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023c66:	fa5f f38c 	uxtb.w	r3, ip
 8023c6a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023c6e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023c72:	1c51      	adds	r1, r2, #1
 8023c74:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023c78:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 8023c7c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8023c80:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023c84:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023c88:	ea43 0c0c 	orr.w	ip, r3, ip
 8023c8c:	f8a7 c000 	strh.w	ip, [r7]
 8023c90:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8023c92:	3702      	adds	r7, #2
 8023c94:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023c96:	441a      	add	r2, r3
 8023c98:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023c9a:	441d      	add	r5, r3
 8023c9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023c9e:	922d      	str	r2, [sp, #180]	; 0xb4
 8023ca0:	3b01      	subs	r3, #1
 8023ca2:	9317      	str	r3, [sp, #92]	; 0x5c
 8023ca4:	e6a0      	b.n	80239e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023ca6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8023ca8:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8023caa:	441c      	add	r4, r3
 8023cac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023cae:	441d      	add	r5, r3
 8023cb0:	9b07      	ldr	r3, [sp, #28]
 8023cb2:	942d      	str	r4, [sp, #180]	; 0xb4
 8023cb4:	3b01      	subs	r3, #1
 8023cb6:	9307      	str	r3, [sp, #28]
 8023cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023cba:	3302      	adds	r3, #2
 8023cbc:	930a      	str	r3, [sp, #40]	; 0x28
 8023cbe:	e673      	b.n	80239a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023cc0:	d024      	beq.n	8023d0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8023cc2:	9b07      	ldr	r3, [sp, #28]
 8023cc4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8023cc6:	3b01      	subs	r3, #1
 8023cc8:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8023cca:	fb00 4003 	mla	r0, r0, r3, r4
 8023cce:	1400      	asrs	r0, r0, #16
 8023cd0:	f53f ae87 	bmi.w	80239e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023cd4:	3901      	subs	r1, #1
 8023cd6:	4288      	cmp	r0, r1
 8023cd8:	f6bf ae83 	bge.w	80239e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023cdc:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8023cde:	fb01 5303 	mla	r3, r1, r3, r5
 8023ce2:	141b      	asrs	r3, r3, #16
 8023ce4:	f53f ae7d 	bmi.w	80239e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023ce8:	3a01      	subs	r2, #1
 8023cea:	4293      	cmp	r3, r2
 8023cec:	f6bf ae79 	bge.w	80239e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023cf0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023cf4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023cf8:	f1bb 0f00 	cmp.w	fp, #0
 8023cfc:	dc70      	bgt.n	8023de0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8023cfe:	9b07      	ldr	r3, [sp, #28]
 8023d00:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d06:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8023d0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023d0e:	2b00      	cmp	r3, #0
 8023d10:	f340 81b2 	ble.w	8024078 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8023d14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d18:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d1a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023d1e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023d22:	eef0 6a48 	vmov.f32	s13, s16
 8023d26:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023d2a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023d2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d32:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8023d36:	eef0 6a68 	vmov.f32	s13, s17
 8023d3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d3e:	ee16 5a90 	vmov	r5, s13
 8023d42:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023d46:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023d4a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023d4e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023d52:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023d56:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023d5a:	ee18 2a10 	vmov	r2, s16
 8023d5e:	eeb0 8a47 	vmov.f32	s16, s14
 8023d62:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d66:	ee18 2a90 	vmov	r2, s17
 8023d6a:	932f      	str	r3, [sp, #188]	; 0xbc
 8023d6c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d6e:	eef0 8a67 	vmov.f32	s17, s15
 8023d72:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d76:	9330      	str	r3, [sp, #192]	; 0xc0
 8023d78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023d7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023d7c:	3b01      	subs	r3, #1
 8023d7e:	9316      	str	r3, [sp, #88]	; 0x58
 8023d80:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d82:	bf08      	it	eq
 8023d84:	4613      	moveq	r3, r2
 8023d86:	9307      	str	r3, [sp, #28]
 8023d88:	e600      	b.n	802398c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8023d8a:	2800      	cmp	r0, #0
 8023d8c:	f43f ae72 	beq.w	8023a74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8023d90:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023d94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023d98:	9108      	str	r1, [sp, #32]
 8023d9a:	0e09      	lsrs	r1, r1, #24
 8023d9c:	9110      	str	r1, [sp, #64]	; 0x40
 8023d9e:	e669      	b.n	8023a74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8023da0:	f113 0801 	adds.w	r8, r3, #1
 8023da4:	f53f af74 	bmi.w	8023c90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023da8:	4541      	cmp	r1, r8
 8023daa:	f6ff af71 	blt.w	8023c90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023dae:	f11c 0801 	adds.w	r8, ip, #1
 8023db2:	f53f af6d 	bmi.w	8023c90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023db6:	45c6      	cmp	lr, r8
 8023db8:	f6ff af6a 	blt.w	8023c90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023dbc:	b209      	sxth	r1, r1
 8023dbe:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8023dc2:	fa0f f38e 	sxth.w	r3, lr
 8023dc6:	9100      	str	r1, [sp, #0]
 8023dc8:	4639      	mov	r1, r7
 8023dca:	9301      	str	r3, [sp, #4]
 8023dcc:	4633      	mov	r3, r6
 8023dce:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8023dd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023dd4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023dd6:	f7ff fc51 	bl	802367c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8023dda:	e759      	b.n	8023c90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023ddc:	fffff800 	.word	0xfffff800
 8023de0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023de2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023de6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8023de8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023dec:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023dee:	1427      	asrs	r7, r4, #16
 8023df0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023df2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023df6:	142b      	asrs	r3, r5, #16
 8023df8:	fb01 7303 	mla	r3, r1, r3, r7
 8023dfc:	18e7      	adds	r7, r4, r3
 8023dfe:	5ce3      	ldrb	r3, [r4, r3]
 8023e00:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023e04:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023e08:	2a00      	cmp	r2, #0
 8023e0a:	f000 812b 	beq.w	8024064 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8023e0e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8023e12:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023e16:	940d      	str	r4, [sp, #52]	; 0x34
 8023e18:	0e24      	lsrs	r4, r4, #24
 8023e1a:	9414      	str	r4, [sp, #80]	; 0x50
 8023e1c:	b170      	cbz	r0, 8023e3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8023e1e:	eb07 0e01 	add.w	lr, r7, r1
 8023e22:	5c79      	ldrb	r1, [r7, r1]
 8023e24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e28:	9109      	str	r1, [sp, #36]	; 0x24
 8023e2a:	0e09      	lsrs	r1, r1, #24
 8023e2c:	9111      	str	r1, [sp, #68]	; 0x44
 8023e2e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8023e32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e36:	910e      	str	r1, [sp, #56]	; 0x38
 8023e38:	0e09      	lsrs	r1, r1, #24
 8023e3a:	9115      	str	r1, [sp, #84]	; 0x54
 8023e3c:	b292      	uxth	r2, r2
 8023e3e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023e40:	b280      	uxth	r0, r0
 8023e42:	fb02 f800 	mul.w	r8, r2, r0
 8023e46:	0112      	lsls	r2, r2, #4
 8023e48:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023e4c:	eba2 0e08 	sub.w	lr, r2, r8
 8023e50:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023e54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023e56:	b280      	uxth	r0, r0
 8023e58:	fa1f fe8e 	uxth.w	lr, lr
 8023e5c:	1a09      	subs	r1, r1, r0
 8023e5e:	fb0e f202 	mul.w	r2, lr, r2
 8023e62:	b289      	uxth	r1, r1
 8023e64:	fb01 220c 	mla	r2, r1, ip, r2
 8023e68:	fb00 2204 	mla	r2, r0, r4, r2
 8023e6c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023e6e:	fb08 2204 	mla	r2, r8, r4, r2
 8023e72:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023e76:	2a00      	cmp	r2, #0
 8023e78:	f000 80e9 	beq.w	802404e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8023e7c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023e80:	d019      	beq.n	8023eb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8023e82:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023e86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e8a:	fb0c fa0a 	mul.w	sl, ip, sl
 8023e8e:	fb0c fc03 	mul.w	ip, ip, r3
 8023e92:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023e96:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023e9a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023e9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023ea2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023ea6:	4453      	add	r3, sl
 8023ea8:	0a3f      	lsrs	r7, r7, #8
 8023eaa:	0a1b      	lsrs	r3, r3, #8
 8023eac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023eb0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023eb4:	433b      	orrs	r3, r7
 8023eb6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023eb8:	2cff      	cmp	r4, #255	; 0xff
 8023eba:	d020      	beq.n	8023efe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8023ebc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023ebe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023ec2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023ec4:	4367      	muls	r7, r4
 8023ec6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023ec8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023ecc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023ed0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023ed2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023ed6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023eda:	fb04 fa0a 	mul.w	sl, r4, sl
 8023ede:	44bc      	add	ip, r7
 8023ee0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023ee4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ee8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023eec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023ef0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ef4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ef8:	ea4c 040a 	orr.w	r4, ip, sl
 8023efc:	940d      	str	r4, [sp, #52]	; 0x34
 8023efe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023f00:	2cff      	cmp	r4, #255	; 0xff
 8023f02:	d020      	beq.n	8023f46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8023f04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023f06:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023f0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023f0c:	4367      	muls	r7, r4
 8023f0e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023f10:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023f14:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023f18:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023f1a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023f1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f22:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f26:	44bc      	add	ip, r7
 8023f28:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023f2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023f34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f3c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f40:	ea4c 040a 	orr.w	r4, ip, sl
 8023f44:	9409      	str	r4, [sp, #36]	; 0x24
 8023f46:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023f48:	2cff      	cmp	r4, #255	; 0xff
 8023f4a:	d020      	beq.n	8023f8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8023f4c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023f4e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023f52:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023f54:	4367      	muls	r7, r4
 8023f56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023f58:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023f5c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023f60:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023f62:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023f66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f6a:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f6e:	44bc      	add	ip, r7
 8023f70:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023f74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023f7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f84:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f88:	ea4c 040a 	orr.w	r4, ip, sl
 8023f8c:	940e      	str	r4, [sp, #56]	; 0x38
 8023f8e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023f90:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023f94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023f98:	43d2      	mvns	r2, r2
 8023f9a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023f9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023fa0:	b2d2      	uxtb	r2, r2
 8023fa2:	fb0e f707 	mul.w	r7, lr, r7
 8023fa6:	fb01 770c 	mla	r7, r1, ip, r7
 8023faa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023fae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023fb0:	fb00 770c 	mla	r7, r0, ip, r7
 8023fb4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023fb8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023fba:	fb08 770c 	mla	r7, r8, ip, r7
 8023fbe:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8023fc2:	fb0e fe0c 	mul.w	lr, lr, ip
 8023fc6:	0a3f      	lsrs	r7, r7, #8
 8023fc8:	fb01 e303 	mla	r3, r1, r3, lr
 8023fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023fce:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023fd2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023fd6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023fd8:	fb00 330a 	mla	r3, r0, sl, r3
 8023fdc:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023fe0:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023fe4:	f8b9 3000 	ldrh.w	r3, [r9]
 8023fe8:	1218      	asrs	r0, r3, #8
 8023fea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023fee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023ff2:	10d9      	asrs	r1, r3, #3
 8023ff4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023ff8:	00db      	lsls	r3, r3, #3
 8023ffa:	4350      	muls	r0, r2
 8023ffc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024000:	ea47 070c 	orr.w	r7, r7, ip
 8024004:	b2db      	uxtb	r3, r3
 8024006:	f100 0c01 	add.w	ip, r0, #1
 802400a:	4351      	muls	r1, r2
 802400c:	4353      	muls	r3, r2
 802400e:	4a1d      	ldr	r2, [pc, #116]	; (8024084 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8024010:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8024014:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8024018:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802401c:	f103 0c01 	add.w	ip, r3, #1
 8024020:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024024:	fa5f fc87 	uxtb.w	ip, r7
 8024028:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802402c:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8024030:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024034:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8024038:	1c4b      	adds	r3, r1, #1
 802403a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802403e:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8024042:	00ff      	lsls	r7, r7, #3
 8024044:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024048:	4338      	orrs	r0, r7
 802404a:	f8a9 0000 	strh.w	r0, [r9]
 802404e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024050:	f109 0902 	add.w	r9, r9, #2
 8024054:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024056:	f10b 3bff 	add.w	fp, fp, #4294967295
 802405a:	441a      	add	r2, r3
 802405c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802405e:	922d      	str	r2, [sp, #180]	; 0xb4
 8024060:	441d      	add	r5, r3
 8024062:	e649      	b.n	8023cf8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024064:	2800      	cmp	r0, #0
 8024066:	f43f aee9 	beq.w	8023e3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802406a:	5c79      	ldrb	r1, [r7, r1]
 802406c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024070:	9109      	str	r1, [sp, #36]	; 0x24
 8024072:	0e09      	lsrs	r1, r1, #24
 8024074:	9111      	str	r1, [sp, #68]	; 0x44
 8024076:	e6e1      	b.n	8023e3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024078:	b01b      	add	sp, #108	; 0x6c
 802407a:	ecbd 8b08 	vpop	{d8-d11}
 802407e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024082:	bf00      	nop
 8024084:	fffff800 	.word	0xfffff800

08024088 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8024088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802408c:	b085      	sub	sp, #20
 802408e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8024092:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8024096:	9103      	str	r1, [sp, #12]
 8024098:	2d00      	cmp	r5, #0
 802409a:	fb05 7106 	mla	r1, r5, r6, r7
 802409e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80240a2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80240a6:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80240aa:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80240ae:	eb03 0901 	add.w	r9, r3, r1
 80240b2:	9401      	str	r4, [sp, #4]
 80240b4:	f2c0 80c0 	blt.w	8024238 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80240b8:	45a8      	cmp	r8, r5
 80240ba:	f340 80bd 	ble.w	8024238 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80240be:	2f00      	cmp	r7, #0
 80240c0:	f2c0 80b6 	blt.w	8024230 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80240c4:	42be      	cmp	r6, r7
 80240c6:	f340 80b3 	ble.w	8024230 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80240ca:	f813 c001 	ldrb.w	ip, [r3, r1]
 80240ce:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80240d2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80240d6:	d019      	beq.n	802410c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 80240d8:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80240dc:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80240e0:	435a      	muls	r2, r3
 80240e2:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80240e6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80240ea:	fb0c f403 	mul.w	r4, ip, r3
 80240ee:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80240f2:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80240f6:	441a      	add	r2, r3
 80240f8:	f104 0320 	add.w	r3, r4, #32
 80240fc:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8024100:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8024104:	0a1b      	lsrs	r3, r3, #8
 8024106:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802410a:	4319      	orrs	r1, r3
 802410c:	b289      	uxth	r1, r1
 802410e:	1c7b      	adds	r3, r7, #1
 8024110:	f100 8097 	bmi.w	8024242 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8024114:	429e      	cmp	r6, r3
 8024116:	f340 8094 	ble.w	8024242 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 802411a:	2800      	cmp	r0, #0
 802411c:	f000 8094 	beq.w	8024248 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8024120:	f899 4001 	ldrb.w	r4, [r9, #1]
 8024124:	9b01      	ldr	r3, [sp, #4]
 8024126:	2cff      	cmp	r4, #255	; 0xff
 8024128:	885b      	ldrh	r3, [r3, #2]
 802412a:	d01b      	beq.n	8024164 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 802412c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8024130:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8024134:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024138:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802413c:	fb0a f202 	mul.w	r2, sl, r2
 8024140:	fb04 fa03 	mul.w	sl, r4, r3
 8024144:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8024148:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802414c:	441a      	add	r2, r3
 802414e:	f10a 0320 	add.w	r3, sl, #32
 8024152:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024156:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802415a:	0a1b      	lsrs	r3, r3, #8
 802415c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024160:	ea4b 0303 	orr.w	r3, fp, r3
 8024164:	b29b      	uxth	r3, r3
 8024166:	3501      	adds	r5, #1
 8024168:	d474      	bmi.n	8024254 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802416a:	45a8      	cmp	r8, r5
 802416c:	dd72      	ble.n	8024254 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802416e:	f1be 0f00 	cmp.w	lr, #0
 8024172:	f000 8120 	beq.w	80243b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8024176:	2f00      	cmp	r7, #0
 8024178:	db69      	blt.n	802424e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802417a:	42be      	cmp	r6, r7
 802417c:	dd67      	ble.n	802424e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802417e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024182:	9a01      	ldr	r2, [sp, #4]
 8024184:	2dff      	cmp	r5, #255	; 0xff
 8024186:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802418a:	d01c      	beq.n	80241c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 802418c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8024190:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8024194:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8024198:	fb08 f802 	mul.w	r8, r8, r2
 802419c:	fb05 fa0b 	mul.w	sl, r5, fp
 80241a0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80241a4:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80241a8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80241ac:	4490      	add	r8, r2
 80241ae:	f10a 0220 	add.w	r2, sl, #32
 80241b2:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80241b6:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80241ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80241be:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80241c2:	ea4b 0b0a 	orr.w	fp, fp, sl
 80241c6:	fa1f fb8b 	uxth.w	fp, fp
 80241ca:	3701      	adds	r7, #1
 80241cc:	d447      	bmi.n	802425e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80241ce:	42be      	cmp	r6, r7
 80241d0:	dd45      	ble.n	802425e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80241d2:	2800      	cmp	r0, #0
 80241d4:	d046      	beq.n	8024264 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 80241d6:	3601      	adds	r6, #1
 80241d8:	9a01      	ldr	r2, [sp, #4]
 80241da:	f819 7006 	ldrb.w	r7, [r9, r6]
 80241de:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80241e2:	2fff      	cmp	r7, #255	; 0xff
 80241e4:	d01a      	beq.n	802421c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 80241e6:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80241ea:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80241ee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80241f2:	fb08 f806 	mul.w	r8, r8, r6
 80241f6:	fb07 f902 	mul.w	r9, r7, r2
 80241fa:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80241fe:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8024202:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024206:	44b0      	add	r8, r6
 8024208:	f109 0620 	add.w	r6, r9, #32
 802420c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8024210:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024214:	0a36      	lsrs	r6, r6, #8
 8024216:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802421a:	4332      	orrs	r2, r6
 802421c:	b292      	uxth	r2, r2
 802421e:	280f      	cmp	r0, #15
 8024220:	d922      	bls.n	8024268 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8024222:	4b69      	ldr	r3, [pc, #420]	; (80243c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8024224:	f240 210d 	movw	r1, #525	; 0x20d
 8024228:	4a68      	ldr	r2, [pc, #416]	; (80243cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 802422a:	4869      	ldr	r0, [pc, #420]	; (80243d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 802422c:	f004 fa2c 	bl	8028688 <__assert_func>
 8024230:	f04f 0c00 	mov.w	ip, #0
 8024234:	4661      	mov	r1, ip
 8024236:	e76a      	b.n	802410e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8024238:	2400      	movs	r4, #0
 802423a:	46a4      	mov	ip, r4
 802423c:	4623      	mov	r3, r4
 802423e:	4621      	mov	r1, r4
 8024240:	e791      	b.n	8024166 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8024242:	2400      	movs	r4, #0
 8024244:	4623      	mov	r3, r4
 8024246:	e78e      	b.n	8024166 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8024248:	4604      	mov	r4, r0
 802424a:	4603      	mov	r3, r0
 802424c:	e78b      	b.n	8024166 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802424e:	2500      	movs	r5, #0
 8024250:	46ab      	mov	fp, r5
 8024252:	e7ba      	b.n	80241ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8024254:	2700      	movs	r7, #0
 8024256:	463d      	mov	r5, r7
 8024258:	463a      	mov	r2, r7
 802425a:	46bb      	mov	fp, r7
 802425c:	e7df      	b.n	802421e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 802425e:	2700      	movs	r7, #0
 8024260:	463a      	mov	r2, r7
 8024262:	e7dc      	b.n	802421e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8024264:	4607      	mov	r7, r0
 8024266:	4602      	mov	r2, r0
 8024268:	f1be 0f0f 	cmp.w	lr, #15
 802426c:	d8d9      	bhi.n	8024222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802426e:	b286      	uxth	r6, r0
 8024270:	fa1f f98e 	uxth.w	r9, lr
 8024274:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024278:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802427c:	fb06 f809 	mul.w	r8, r6, r9
 8024280:	0136      	lsls	r6, r6, #4
 8024282:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024286:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802428a:	9601      	str	r6, [sp, #4]
 802428c:	ea4a 0101 	orr.w	r1, sl, r1
 8024290:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8024294:	fa1f f689 	uxth.w	r6, r9
 8024298:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802429c:	fb10 f90e 	smulbb	r9, r0, lr
 80242a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80242a4:	9602      	str	r6, [sp, #8]
 80242a6:	460e      	mov	r6, r1
 80242a8:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80242ac:	f1ce 0110 	rsb	r1, lr, #16
 80242b0:	ea4a 0303 	orr.w	r3, sl, r3
 80242b4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80242b8:	1a09      	subs	r1, r1, r0
 80242ba:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80242be:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80242c2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80242c6:	4343      	muls	r3, r0
 80242c8:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80242cc:	9801      	ldr	r0, [sp, #4]
 80242ce:	ea4a 0202 	orr.w	r2, sl, r2
 80242d2:	fb01 3106 	mla	r1, r1, r6, r3
 80242d6:	9e02      	ldr	r6, [sp, #8]
 80242d8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80242dc:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80242e0:	fb09 1302 	mla	r3, r9, r2, r1
 80242e4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80242e8:	1b80      	subs	r0, r0, r6
 80242ea:	9e01      	ldr	r6, [sp, #4]
 80242ec:	9a03      	ldr	r2, [sp, #12]
 80242ee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80242f2:	eba6 0608 	sub.w	r6, r6, r8
 80242f6:	b280      	uxth	r0, r0
 80242f8:	8811      	ldrh	r1, [r2, #0]
 80242fa:	ea4a 0b0b 	orr.w	fp, sl, fp
 80242fe:	b2b6      	uxth	r6, r6
 8024300:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8024304:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024308:	4374      	muls	r4, r6
 802430a:	b292      	uxth	r2, r2
 802430c:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8024310:	fb0c 4400 	mla	r4, ip, r0, r4
 8024314:	9802      	ldr	r0, [sp, #8]
 8024316:	ea4f 535e 	mov.w	r3, lr, lsr #21
 802431a:	fb00 4505 	mla	r5, r0, r5, r4
 802431e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024322:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024326:	1208      	asrs	r0, r1, #8
 8024328:	fb08 5707 	mla	r7, r8, r7, r5
 802432c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024330:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024334:	10cd      	asrs	r5, r1, #3
 8024336:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802433a:	ea43 0e0e 	orr.w	lr, r3, lr
 802433e:	00c9      	lsls	r1, r1, #3
 8024340:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024344:	4357      	muls	r7, r2
 8024346:	fa1f f38e 	uxth.w	r3, lr
 802434a:	b2c9      	uxtb	r1, r1
 802434c:	f107 0801 	add.w	r8, r7, #1
 8024350:	121c      	asrs	r4, r3, #8
 8024352:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8024356:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802435a:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802435e:	b2ff      	uxtb	r7, r7
 8024360:	fb10 f007 	smulbb	r0, r0, r7
 8024364:	fb11 f107 	smulbb	r1, r1, r7
 8024368:	fb04 0402 	mla	r4, r4, r2, r0
 802436c:	10d8      	asrs	r0, r3, #3
 802436e:	fb15 f507 	smulbb	r5, r5, r7
 8024372:	00db      	lsls	r3, r3, #3
 8024374:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024378:	b2a4      	uxth	r4, r4
 802437a:	b2db      	uxtb	r3, r3
 802437c:	fb00 5002 	mla	r0, r0, r2, r5
 8024380:	fb03 1202 	mla	r2, r3, r2, r1
 8024384:	1c63      	adds	r3, r4, #1
 8024386:	b280      	uxth	r0, r0
 8024388:	b292      	uxth	r2, r2
 802438a:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 802438e:	1c51      	adds	r1, r2, #1
 8024390:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024394:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024398:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802439c:	4313      	orrs	r3, r2
 802439e:	1c42      	adds	r2, r0, #1
 80243a0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80243a4:	9a03      	ldr	r2, [sp, #12]
 80243a6:	0940      	lsrs	r0, r0, #5
 80243a8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80243ac:	4303      	orrs	r3, r0
 80243ae:	8013      	strh	r3, [r2, #0]
 80243b0:	b005      	add	sp, #20
 80243b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243b6:	280f      	cmp	r0, #15
 80243b8:	f63f af33 	bhi.w	8024222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80243bc:	4677      	mov	r7, lr
 80243be:	4675      	mov	r5, lr
 80243c0:	4672      	mov	r2, lr
 80243c2:	46f3      	mov	fp, lr
 80243c4:	e753      	b.n	802426e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 80243c6:	bf00      	nop
 80243c8:	0802cea2 	.word	0x0802cea2
 80243cc:	0802d465 	.word	0x0802d465
 80243d0:	0802cf8b 	.word	0x0802cf8b

080243d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80243d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243d8:	ed2d 8b08 	vpush	{d8-d11}
 80243dc:	b097      	sub	sp, #92	; 0x5c
 80243de:	eeb0 aa40 	vmov.f32	s20, s0
 80243e2:	eef0 9a60 	vmov.f32	s19, s1
 80243e6:	9214      	str	r2, [sp, #80]	; 0x50
 80243e8:	eeb0 9a41 	vmov.f32	s18, s2
 80243ec:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80243ee:	eeb0 8a62 	vmov.f32	s16, s5
 80243f2:	9308      	str	r3, [sp, #32]
 80243f4:	eef0 8a43 	vmov.f32	s17, s6
 80243f8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80243fc:	eef0 ba44 	vmov.f32	s23, s8
 8024400:	9015      	str	r0, [sp, #84]	; 0x54
 8024402:	eeb0 ba64 	vmov.f32	s22, s9
 8024406:	9312      	str	r3, [sp, #72]	; 0x48
 8024408:	eef0 aa45 	vmov.f32	s21, s10
 802440c:	6850      	ldr	r0, [r2, #4]
 802440e:	9111      	str	r1, [sp, #68]	; 0x44
 8024410:	6812      	ldr	r2, [r2, #0]
 8024412:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024416:	fb00 1303 	mla	r3, r0, r3, r1
 802441a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802441e:	9309      	str	r3, [sp, #36]	; 0x24
 8024420:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024422:	681b      	ldr	r3, [r3, #0]
 8024424:	930b      	str	r3, [sp, #44]	; 0x2c
 8024426:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024428:	685b      	ldr	r3, [r3, #4]
 802442a:	930c      	str	r3, [sp, #48]	; 0x30
 802442c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8024430:	930a      	str	r3, [sp, #40]	; 0x28
 8024432:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024434:	2b00      	cmp	r3, #0
 8024436:	dc03      	bgt.n	8024440 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024438:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802443a:	2b00      	cmp	r3, #0
 802443c:	f340 83cd 	ble.w	8024bda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8024440:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024442:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024446:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802444a:	1e48      	subs	r0, r1, #1
 802444c:	1e55      	subs	r5, r2, #1
 802444e:	9b08      	ldr	r3, [sp, #32]
 8024450:	2b00      	cmp	r3, #0
 8024452:	f340 81a5 	ble.w	80247a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024456:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8024458:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802445a:	1436      	asrs	r6, r6, #16
 802445c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024460:	d406      	bmi.n	8024470 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024462:	4286      	cmp	r6, r0
 8024464:	da04      	bge.n	8024470 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024466:	2b00      	cmp	r3, #0
 8024468:	db02      	blt.n	8024470 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802446a:	42ab      	cmp	r3, r5
 802446c:	f2c0 8199 	blt.w	80247a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8024470:	3601      	adds	r6, #1
 8024472:	f100 8186 	bmi.w	8024782 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024476:	42b1      	cmp	r1, r6
 8024478:	f2c0 8183 	blt.w	8024782 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802447c:	3301      	adds	r3, #1
 802447e:	f100 8180 	bmi.w	8024782 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024482:	429a      	cmp	r2, r3
 8024484:	f2c0 817d 	blt.w	8024782 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024488:	9b08      	ldr	r3, [sp, #32]
 802448a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802448e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024490:	9313      	str	r3, [sp, #76]	; 0x4c
 8024492:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024494:	2b00      	cmp	r3, #0
 8024496:	f340 81a6 	ble.w	80247e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802449a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802449c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 802449e:	1418      	asrs	r0, r3, #16
 80244a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80244a2:	142d      	asrs	r5, r5, #16
 80244a4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80244a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80244aa:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80244ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80244b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80244b4:	f100 81fa 	bmi.w	80248ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80244b8:	f102 3eff 	add.w	lr, r2, #4294967295
 80244bc:	4575      	cmp	r5, lr
 80244be:	f280 81f5 	bge.w	80248ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80244c2:	2800      	cmp	r0, #0
 80244c4:	f2c0 81f2 	blt.w	80248ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80244c8:	f103 3eff 	add.w	lr, r3, #4294967295
 80244cc:	4570      	cmp	r0, lr
 80244ce:	f280 81ed 	bge.w	80248ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80244d2:	b212      	sxth	r2, r2
 80244d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80244d6:	fa1f fe81 	uxth.w	lr, r1
 80244da:	fb00 5002 	mla	r0, r0, r2, r5
 80244de:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80244e2:	eb03 0a00 	add.w	sl, r3, r0
 80244e6:	f813 9000 	ldrb.w	r9, [r3, r0]
 80244ea:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80244ee:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80244f2:	b29b      	uxth	r3, r3
 80244f4:	f1bc 0f00 	cmp.w	ip, #0
 80244f8:	f000 81bb 	beq.w	8024872 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80244fc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024500:	eb0a 0b02 	add.w	fp, sl, r2
 8024504:	fa1f fa8c 	uxth.w	sl, ip
 8024508:	940d      	str	r4, [sp, #52]	; 0x34
 802450a:	fb0a fe0e 	mul.w	lr, sl, lr
 802450e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024512:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024516:	eba5 050e 	sub.w	r5, r5, lr
 802451a:	940e      	str	r4, [sp, #56]	; 0x38
 802451c:	fa1f fa8a 	uxth.w	sl, sl
 8024520:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024522:	b2ad      	uxth	r5, r5
 8024524:	eba3 030a 	sub.w	r3, r3, sl
 8024528:	fb08 f505 	mul.w	r5, r8, r5
 802452c:	b29b      	uxth	r3, r3
 802452e:	fb09 5303 	mla	r3, r9, r3, r5
 8024532:	fb0a 3304 	mla	r3, sl, r4, r3
 8024536:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024538:	fb0e 3304 	mla	r3, lr, r4, r3
 802453c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024540:	2b00      	cmp	r3, #0
 8024542:	f000 8111 	beq.w	8024768 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8024546:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024548:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802454c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8024550:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024554:	f000 8192 	beq.w	802487c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8024558:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802455c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024560:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024564:	fb0a fe0e 	mul.w	lr, sl, lr
 8024568:	fb09 f000 	mul.w	r0, r9, r0
 802456c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8024570:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024574:	f100 0b20 	add.w	fp, r0, #32
 8024578:	44ce      	add	lr, r9
 802457a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802457e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024582:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024586:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802458a:	ea4e 0909 	orr.w	r9, lr, r9
 802458e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024592:	8868      	ldrh	r0, [r5, #2]
 8024594:	d019      	beq.n	80245ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8024596:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802459a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802459e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80245a2:	fb0a fe0e 	mul.w	lr, sl, lr
 80245a6:	fb08 f800 	mul.w	r8, r8, r0
 80245aa:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80245ae:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80245b2:	f108 0b20 	add.w	fp, r8, #32
 80245b6:	4486      	add	lr, r0
 80245b8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80245bc:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80245c0:	0a00      	lsrs	r0, r0, #8
 80245c2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80245c6:	ea4e 0000 	orr.w	r0, lr, r0
 80245ca:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80245ce:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80245d2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80245d6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80245da:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80245de:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80245e2:	ea4e 0909 	orr.w	r9, lr, r9
 80245e6:	ea4a 0000 	orr.w	r0, sl, r0
 80245ea:	f1bc 0f00 	cmp.w	ip, #0
 80245ee:	f000 8147 	beq.w	8024880 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80245f2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80245f6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80245f8:	3a01      	subs	r2, #1
 80245fa:	2cff      	cmp	r4, #255	; 0xff
 80245fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024600:	f102 0202 	add.w	r2, r2, #2
 8024604:	eb05 0e02 	add.w	lr, r5, r2
 8024608:	5aaa      	ldrh	r2, [r5, r2]
 802460a:	d018      	beq.n	802463e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802460c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8024610:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024614:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024618:	fb04 fa02 	mul.w	sl, r4, r2
 802461c:	fb08 f805 	mul.w	r8, r8, r5
 8024620:	f10a 0520 	add.w	r5, sl, #32
 8024624:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8024628:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802462c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8024630:	4442      	add	r2, r8
 8024632:	0a2d      	lsrs	r5, r5, #8
 8024634:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8024638:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802463c:	432a      	orrs	r2, r5
 802463e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024640:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024644:	2cff      	cmp	r4, #255	; 0xff
 8024646:	d01a      	beq.n	802467e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8024648:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802464c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024650:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024654:	fb04 fa05 	mul.w	sl, r4, r5
 8024658:	fb08 f80e 	mul.w	r8, r8, lr
 802465c:	f10a 0e20 	add.w	lr, sl, #32
 8024660:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8024664:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024668:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802466c:	4445      	add	r5, r8
 802466e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024672:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8024676:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802467a:	ea45 050e 	orr.w	r5, r5, lr
 802467e:	fb1c fe01 	smulbb	lr, ip, r1
 8024682:	f1cc 0810 	rsb	r8, ip, #16
 8024686:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802468a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802468e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8024692:	eba8 0801 	sub.w	r8, r8, r1
 8024696:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802469a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802469e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80246a2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80246a6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80246aa:	ea4a 0202 	orr.w	r2, sl, r2
 80246ae:	4341      	muls	r1, r0
 80246b0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80246b4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80246b8:	fb09 1108 	mla	r1, r9, r8, r1
 80246bc:	ea4b 0505 	orr.w	r5, fp, r5
 80246c0:	fb0c 1102 	mla	r1, ip, r2, r1
 80246c4:	fb0e 1e05 	mla	lr, lr, r5, r1
 80246c8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80246cc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80246d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80246d4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80246d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80246dc:	fa1f f28e 	uxth.w	r2, lr
 80246e0:	2bff      	cmp	r3, #255	; 0xff
 80246e2:	d103      	bne.n	80246ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80246e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80246e6:	29ff      	cmp	r1, #255	; 0xff
 80246e8:	f000 80de 	beq.w	80248a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80246ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80246ee:	8838      	ldrh	r0, [r7, #0]
 80246f0:	434b      	muls	r3, r1
 80246f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80246f4:	1205      	asrs	r5, r0, #8
 80246f6:	f103 0c01 	add.w	ip, r3, #1
 80246fa:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80246fe:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8024702:	ea6f 2c23 	mvn.w	ip, r3, asr #8
 8024706:	1213      	asrs	r3, r2, #8
 8024708:	fa5f fc8c 	uxtb.w	ip, ip
 802470c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024710:	fb15 f50c 	smulbb	r5, r5, ip
 8024714:	fb03 5301 	mla	r3, r3, r1, r5
 8024718:	10d1      	asrs	r1, r2, #3
 802471a:	00d2      	lsls	r2, r2, #3
 802471c:	b29d      	uxth	r5, r3
 802471e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024722:	10c3      	asrs	r3, r0, #3
 8024724:	00c0      	lsls	r0, r0, #3
 8024726:	b2d2      	uxtb	r2, r2
 8024728:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802472c:	b2c0      	uxtb	r0, r0
 802472e:	fb13 f30c 	smulbb	r3, r3, ip
 8024732:	fb10 f00c 	smulbb	r0, r0, ip
 8024736:	fb01 3104 	mla	r1, r1, r4, r3
 802473a:	1c6b      	adds	r3, r5, #1
 802473c:	fb02 0204 	mla	r2, r2, r4, r0
 8024740:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8024744:	b292      	uxth	r2, r2
 8024746:	b289      	uxth	r1, r1
 8024748:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802474c:	1c50      	adds	r0, r2, #1
 802474e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024752:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024756:	4313      	orrs	r3, r2
 8024758:	1c4a      	adds	r2, r1, #1
 802475a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802475e:	0949      	lsrs	r1, r1, #5
 8024760:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024764:	430b      	orrs	r3, r1
 8024766:	803b      	strh	r3, [r7, #0]
 8024768:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802476a:	3702      	adds	r7, #2
 802476c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802476e:	4413      	add	r3, r2
 8024770:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024772:	9329      	str	r3, [sp, #164]	; 0xa4
 8024774:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024776:	441a      	add	r2, r3
 8024778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802477a:	3b01      	subs	r3, #1
 802477c:	922a      	str	r2, [sp, #168]	; 0xa8
 802477e:	9313      	str	r3, [sp, #76]	; 0x4c
 8024780:	e687      	b.n	8024492 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024782:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024784:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8024786:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8024788:	4433      	add	r3, r6
 802478a:	9329      	str	r3, [sp, #164]	; 0xa4
 802478c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802478e:	441c      	add	r4, r3
 8024790:	9b08      	ldr	r3, [sp, #32]
 8024792:	3b01      	subs	r3, #1
 8024794:	942a      	str	r4, [sp, #168]	; 0xa8
 8024796:	9308      	str	r3, [sp, #32]
 8024798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802479a:	3302      	adds	r3, #2
 802479c:	9309      	str	r3, [sp, #36]	; 0x24
 802479e:	e656      	b.n	802444e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80247a0:	d028      	beq.n	80247f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80247a2:	9b08      	ldr	r3, [sp, #32]
 80247a4:	982b      	ldr	r0, [sp, #172]	; 0xac
 80247a6:	3b01      	subs	r3, #1
 80247a8:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80247aa:	fb00 5003 	mla	r0, r0, r3, r5
 80247ae:	1400      	asrs	r0, r0, #16
 80247b0:	f53f ae6a 	bmi.w	8024488 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247b4:	3901      	subs	r1, #1
 80247b6:	4288      	cmp	r0, r1
 80247b8:	f6bf ae66 	bge.w	8024488 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247bc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80247be:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80247c0:	fb01 0303 	mla	r3, r1, r3, r0
 80247c4:	141b      	asrs	r3, r3, #16
 80247c6:	f53f ae5f 	bmi.w	8024488 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247ca:	3a01      	subs	r2, #1
 80247cc:	4293      	cmp	r3, r2
 80247ce:	f6bf ae5b 	bge.w	8024488 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247d2:	9b08      	ldr	r3, [sp, #32]
 80247d4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80247d8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80247dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80247de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80247e0:	2b00      	cmp	r3, #0
 80247e2:	f300 8082 	bgt.w	80248ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80247e6:	9b08      	ldr	r3, [sp, #32]
 80247e8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80247ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247ee:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80247f2:	9309      	str	r3, [sp, #36]	; 0x24
 80247f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80247f6:	2b00      	cmp	r3, #0
 80247f8:	f340 81ef 	ble.w	8024bda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 80247fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024800:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024802:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024806:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802480a:	eef0 6a48 	vmov.f32	s13, s16
 802480e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024812:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024816:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802481a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802481e:	eef0 6a68 	vmov.f32	s13, s17
 8024822:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024826:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 802482a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802482e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024832:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024836:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802483a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802483e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024842:	ee18 2a10 	vmov	r2, s16
 8024846:	eeb0 8a47 	vmov.f32	s16, s14
 802484a:	fb92 f3f3 	sdiv	r3, r2, r3
 802484e:	ee18 2a90 	vmov	r2, s17
 8024852:	932b      	str	r3, [sp, #172]	; 0xac
 8024854:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024856:	eef0 8a67 	vmov.f32	s17, s15
 802485a:	fb92 f3f3 	sdiv	r3, r2, r3
 802485e:	932c      	str	r3, [sp, #176]	; 0xb0
 8024860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024862:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024864:	3b01      	subs	r3, #1
 8024866:	9311      	str	r3, [sp, #68]	; 0x44
 8024868:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802486a:	bf08      	it	eq
 802486c:	4613      	moveq	r3, r2
 802486e:	9308      	str	r3, [sp, #32]
 8024870:	e5df      	b.n	8024432 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024872:	fb08 f505 	mul.w	r5, r8, r5
 8024876:	fb09 5303 	mla	r3, r9, r3, r5
 802487a:	e65f      	b.n	802453c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 802487c:	4681      	mov	r9, r0
 802487e:	e686      	b.n	802458e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024880:	f1c1 0210 	rsb	r2, r1, #16
 8024884:	4341      	muls	r1, r0
 8024886:	fb09 1902 	mla	r9, r9, r2, r1
 802488a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802488e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8024892:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8024896:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802489a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802489e:	ea42 0909 	orr.w	r9, r2, r9
 80248a2:	fa1f f289 	uxth.w	r2, r9
 80248a6:	e71b      	b.n	80246e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80248a8:	803a      	strh	r2, [r7, #0]
 80248aa:	e75d      	b.n	8024768 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248ac:	f115 0e01 	adds.w	lr, r5, #1
 80248b0:	f53f af5a 	bmi.w	8024768 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248b4:	4572      	cmp	r2, lr
 80248b6:	f6ff af57 	blt.w	8024768 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248ba:	f110 0e01 	adds.w	lr, r0, #1
 80248be:	f53f af53 	bmi.w	8024768 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248c2:	4573      	cmp	r3, lr
 80248c4:	f6ff af50 	blt.w	8024768 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80248ca:	b21b      	sxth	r3, r3
 80248cc:	b212      	sxth	r2, r2
 80248ce:	9502      	str	r5, [sp, #8]
 80248d0:	9301      	str	r3, [sp, #4]
 80248d2:	9200      	str	r2, [sp, #0]
 80248d4:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80248d8:	e9cd c405 	strd	ip, r4, [sp, #20]
 80248dc:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80248e0:	4639      	mov	r1, r7
 80248e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80248e4:	f7ff fbd0 	bl	8024088 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80248e8:	e73e      	b.n	8024768 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80248ec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80248f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80248f2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80248f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80248f8:	fa1f fc82 	uxth.w	ip, r2
 80248fc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024900:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024902:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8024906:	141f      	asrs	r7, r3, #16
 8024908:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802490a:	141b      	asrs	r3, r3, #16
 802490c:	fb01 3707 	mla	r7, r1, r7, r3
 8024910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024912:	eb03 0a07 	add.w	sl, r3, r7
 8024916:	f813 9007 	ldrb.w	r9, [r3, r7]
 802491a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802491e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024922:	b29b      	uxth	r3, r3
 8024924:	2d00      	cmp	r5, #0
 8024926:	f000 813d 	beq.w	8024ba4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 802492a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802492e:	eb0a 0b01 	add.w	fp, sl, r1
 8024932:	fa1f fa85 	uxth.w	sl, r5
 8024936:	940f      	str	r4, [sp, #60]	; 0x3c
 8024938:	fb0a fc0c 	mul.w	ip, sl, ip
 802493c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024940:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8024944:	eba0 000c 	sub.w	r0, r0, ip
 8024948:	9410      	str	r4, [sp, #64]	; 0x40
 802494a:	fa1f fa8a 	uxth.w	sl, sl
 802494e:	b280      	uxth	r0, r0
 8024950:	eba3 030a 	sub.w	r3, r3, sl
 8024954:	fb08 f000 	mul.w	r0, r8, r0
 8024958:	b29b      	uxth	r3, r3
 802495a:	fb09 0303 	mla	r3, r9, r3, r0
 802495e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024960:	fb0a 3300 	mla	r3, sl, r0, r3
 8024964:	fb0c 3304 	mla	r3, ip, r4, r3
 8024968:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802496c:	2b00      	cmp	r3, #0
 802496e:	f000 810b 	beq.w	8024b88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8024972:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024974:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024978:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802497a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802497e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8024982:	f000 8114 	beq.w	8024bae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8024986:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802498a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802498e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024992:	fb0a fc0c 	mul.w	ip, sl, ip
 8024996:	fb09 f707 	mul.w	r7, r9, r7
 802499a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802499e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80249a2:	f107 0b20 	add.w	fp, r7, #32
 80249a6:	44cc      	add	ip, r9
 80249a8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80249ac:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80249b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80249b4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80249b8:	ea4c 0909 	orr.w	r9, ip, r9
 80249bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80249c0:	8847      	ldrh	r7, [r0, #2]
 80249c2:	d019      	beq.n	80249f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 80249c4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80249c8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80249cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80249d0:	fb0a fc0c 	mul.w	ip, sl, ip
 80249d4:	fb08 f807 	mul.w	r8, r8, r7
 80249d8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80249dc:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80249e0:	f108 0b20 	add.w	fp, r8, #32
 80249e4:	44bc      	add	ip, r7
 80249e6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80249ea:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80249ee:	0a3f      	lsrs	r7, r7, #8
 80249f0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80249f4:	ea4c 0707 	orr.w	r7, ip, r7
 80249f8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80249fc:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024a00:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024a04:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024a08:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024a0c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024a10:	ea4c 0909 	orr.w	r9, ip, r9
 8024a14:	ea4a 0707 	orr.w	r7, sl, r7
 8024a18:	2d00      	cmp	r5, #0
 8024a1a:	f000 80ca 	beq.w	8024bb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8024a1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8024a22:	3901      	subs	r1, #1
 8024a24:	0049      	lsls	r1, r1, #1
 8024a26:	3102      	adds	r1, #2
 8024a28:	eb00 0c01 	add.w	ip, r0, r1
 8024a2c:	5a41      	ldrh	r1, [r0, r1]
 8024a2e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024a30:	28ff      	cmp	r0, #255	; 0xff
 8024a32:	d019      	beq.n	8024a68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8024a34:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8024a38:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024a3a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024a3e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024a42:	fb04 fa01 	mul.w	sl, r4, r1
 8024a46:	fb08 f800 	mul.w	r8, r8, r0
 8024a4a:	f10a 0020 	add.w	r0, sl, #32
 8024a4e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8024a52:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024a56:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024a5a:	4441      	add	r1, r8
 8024a5c:	0a00      	lsrs	r0, r0, #8
 8024a5e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8024a62:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a66:	4301      	orrs	r1, r0
 8024a68:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024a6a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8024a6e:	2cff      	cmp	r4, #255	; 0xff
 8024a70:	d01a      	beq.n	8024aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8024a72:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8024a76:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a7a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024a7e:	fb04 fa00 	mul.w	sl, r4, r0
 8024a82:	fb08 f80c 	mul.w	r8, r8, ip
 8024a86:	f10a 0c20 	add.w	ip, sl, #32
 8024a8a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8024a8e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024a92:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8024a96:	4440      	add	r0, r8
 8024a98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a9c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8024aa0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024aa4:	ea40 000c 	orr.w	r0, r0, ip
 8024aa8:	fb15 fc02 	smulbb	ip, r5, r2
 8024aac:	f1c5 0810 	rsb	r8, r5, #16
 8024ab0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024ab4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024ab8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8024abc:	eba8 0802 	sub.w	r8, r8, r2
 8024ac0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024ac4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024ac8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8024acc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024ad0:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8024ad4:	ea4a 0101 	orr.w	r1, sl, r1
 8024ad8:	437a      	muls	r2, r7
 8024ada:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8024ade:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024ae2:	fb09 2208 	mla	r2, r9, r8, r2
 8024ae6:	ea4b 0000 	orr.w	r0, fp, r0
 8024aea:	fb05 2201 	mla	r2, r5, r1, r2
 8024aee:	fb0c 2200 	mla	r2, ip, r0, r2
 8024af2:	0d57      	lsrs	r7, r2, #21
 8024af4:	0952      	lsrs	r2, r2, #5
 8024af6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024afa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024afe:	433a      	orrs	r2, r7
 8024b00:	2bff      	cmp	r3, #255	; 0xff
 8024b02:	b292      	uxth	r2, r2
 8024b04:	d102      	bne.n	8024b0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8024b06:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024b08:	29ff      	cmp	r1, #255	; 0xff
 8024b0a:	d063      	beq.n	8024bd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8024b0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024b0e:	1215      	asrs	r5, r2, #8
 8024b10:	f8be 1000 	ldrh.w	r1, [lr]
 8024b14:	4343      	muls	r3, r0
 8024b16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024b18:	10cf      	asrs	r7, r1, #3
 8024b1a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024b1e:	1c58      	adds	r0, r3, #1
 8024b20:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024b24:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8024b28:	1208      	asrs	r0, r1, #8
 8024b2a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8024b2e:	00c9      	lsls	r1, r1, #3
 8024b30:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024b34:	b2db      	uxtb	r3, r3
 8024b36:	b2c9      	uxtb	r1, r1
 8024b38:	fb10 f003 	smulbb	r0, r0, r3
 8024b3c:	fb11 f103 	smulbb	r1, r1, r3
 8024b40:	fb05 0504 	mla	r5, r5, r4, r0
 8024b44:	10d0      	asrs	r0, r2, #3
 8024b46:	fb17 f703 	smulbb	r7, r7, r3
 8024b4a:	00d2      	lsls	r2, r2, #3
 8024b4c:	b2ad      	uxth	r5, r5
 8024b4e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024b52:	b2d2      	uxtb	r2, r2
 8024b54:	fb00 7004 	mla	r0, r0, r4, r7
 8024b58:	1c6b      	adds	r3, r5, #1
 8024b5a:	fb02 1204 	mla	r2, r2, r4, r1
 8024b5e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024b62:	b292      	uxth	r2, r2
 8024b64:	b280      	uxth	r0, r0
 8024b66:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024b6a:	1c57      	adds	r7, r2, #1
 8024b6c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024b70:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024b74:	433d      	orrs	r5, r7
 8024b76:	1c47      	adds	r7, r0, #1
 8024b78:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024b7c:	097f      	lsrs	r7, r7, #5
 8024b7e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024b82:	433d      	orrs	r5, r7
 8024b84:	f8ae 5000 	strh.w	r5, [lr]
 8024b88:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024b8a:	f10e 0e02 	add.w	lr, lr, #2
 8024b8e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024b90:	4413      	add	r3, r2
 8024b92:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024b94:	9329      	str	r3, [sp, #164]	; 0xa4
 8024b96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024b98:	441a      	add	r2, r3
 8024b9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024b9c:	3b01      	subs	r3, #1
 8024b9e:	922a      	str	r2, [sp, #168]	; 0xa8
 8024ba0:	9313      	str	r3, [sp, #76]	; 0x4c
 8024ba2:	e61c      	b.n	80247de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8024ba4:	fb08 f000 	mul.w	r0, r8, r0
 8024ba8:	fb09 0303 	mla	r3, r9, r3, r0
 8024bac:	e6dc      	b.n	8024968 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8024bae:	46b9      	mov	r9, r7
 8024bb0:	e704      	b.n	80249bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 8024bb2:	f1c2 0110 	rsb	r1, r2, #16
 8024bb6:	437a      	muls	r2, r7
 8024bb8:	fb09 2901 	mla	r9, r9, r1, r2
 8024bbc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024bc0:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8024bc4:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8024bc8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024bcc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024bd0:	4302      	orrs	r2, r0
 8024bd2:	e795      	b.n	8024b00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8024bd4:	f8ae 2000 	strh.w	r2, [lr]
 8024bd8:	e7d6      	b.n	8024b88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8024bda:	b017      	add	sp, #92	; 0x5c
 8024bdc:	ecbd 8b08 	vpop	{d8-d11}
 8024be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024be4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8024be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024be8:	b085      	sub	sp, #20
 8024bea:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8024bee:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8024bf2:	9103      	str	r1, [sp, #12]
 8024bf4:	2d00      	cmp	r5, #0
 8024bf6:	fb05 7106 	mla	r1, r5, r6, r7
 8024bfa:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8024bfe:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8024c02:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8024c06:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8024c0a:	eb02 0901 	add.w	r9, r2, r1
 8024c0e:	9401      	str	r4, [sp, #4]
 8024c10:	f2c0 80c0 	blt.w	8024d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8024c14:	45a8      	cmp	r8, r5
 8024c16:	f340 80bd 	ble.w	8024d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8024c1a:	2f00      	cmp	r7, #0
 8024c1c:	f2c0 80b6 	blt.w	8024d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8024c20:	42be      	cmp	r6, r7
 8024c22:	f340 80b3 	ble.w	8024d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8024c26:	f812 c001 	ldrb.w	ip, [r2, r1]
 8024c2a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8024c2e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024c32:	d019      	beq.n	8024c68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8024c34:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8024c38:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024c3c:	435a      	muls	r2, r3
 8024c3e:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8024c42:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8024c46:	fb0c f403 	mul.w	r4, ip, r3
 8024c4a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8024c4e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8024c52:	441a      	add	r2, r3
 8024c54:	f104 0320 	add.w	r3, r4, #32
 8024c58:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8024c5c:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8024c60:	0a1b      	lsrs	r3, r3, #8
 8024c62:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c66:	4319      	orrs	r1, r3
 8024c68:	b289      	uxth	r1, r1
 8024c6a:	1c7b      	adds	r3, r7, #1
 8024c6c:	f100 8097 	bmi.w	8024d9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8024c70:	429e      	cmp	r6, r3
 8024c72:	f340 8094 	ble.w	8024d9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8024c76:	2800      	cmp	r0, #0
 8024c78:	f000 8094 	beq.w	8024da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8024c7c:	f899 4001 	ldrb.w	r4, [r9, #1]
 8024c80:	9b01      	ldr	r3, [sp, #4]
 8024c82:	2cff      	cmp	r4, #255	; 0xff
 8024c84:	885b      	ldrh	r3, [r3, #2]
 8024c86:	d01b      	beq.n	8024cc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8024c88:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8024c8c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8024c90:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c94:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024c98:	fb0a f202 	mul.w	r2, sl, r2
 8024c9c:	fb04 fa03 	mul.w	sl, r4, r3
 8024ca0:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8024ca4:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8024ca8:	441a      	add	r2, r3
 8024caa:	f10a 0320 	add.w	r3, sl, #32
 8024cae:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024cb2:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8024cb6:	0a1b      	lsrs	r3, r3, #8
 8024cb8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024cbc:	ea4b 0303 	orr.w	r3, fp, r3
 8024cc0:	b29b      	uxth	r3, r3
 8024cc2:	3501      	adds	r5, #1
 8024cc4:	d474      	bmi.n	8024db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8024cc6:	45a8      	cmp	r8, r5
 8024cc8:	dd72      	ble.n	8024db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8024cca:	f1be 0f00 	cmp.w	lr, #0
 8024cce:	f000 8111 	beq.w	8024ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
 8024cd2:	2f00      	cmp	r7, #0
 8024cd4:	db69      	blt.n	8024daa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8024cd6:	42be      	cmp	r6, r7
 8024cd8:	dd67      	ble.n	8024daa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8024cda:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024cde:	9a01      	ldr	r2, [sp, #4]
 8024ce0:	2dff      	cmp	r5, #255	; 0xff
 8024ce2:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8024ce6:	d01c      	beq.n	8024d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8024ce8:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8024cec:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8024cf0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8024cf4:	fb08 f802 	mul.w	r8, r8, r2
 8024cf8:	fb05 fa0b 	mul.w	sl, r5, fp
 8024cfc:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024d00:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8024d04:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024d08:	4490      	add	r8, r2
 8024d0a:	f10a 0220 	add.w	r2, sl, #32
 8024d0e:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8024d12:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8024d16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024d1a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024d1e:	ea4b 0b0a 	orr.w	fp, fp, sl
 8024d22:	fa1f fb8b 	uxth.w	fp, fp
 8024d26:	3701      	adds	r7, #1
 8024d28:	d447      	bmi.n	8024dba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8024d2a:	42be      	cmp	r6, r7
 8024d2c:	dd45      	ble.n	8024dba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8024d2e:	2800      	cmp	r0, #0
 8024d30:	d046      	beq.n	8024dc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8024d32:	3601      	adds	r6, #1
 8024d34:	9a01      	ldr	r2, [sp, #4]
 8024d36:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024d3a:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8024d3e:	2fff      	cmp	r7, #255	; 0xff
 8024d40:	d01a      	beq.n	8024d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8024d42:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8024d46:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8024d4a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024d4e:	fb08 f806 	mul.w	r8, r8, r6
 8024d52:	fb07 f902 	mul.w	r9, r7, r2
 8024d56:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8024d5a:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8024d5e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024d62:	44b0      	add	r8, r6
 8024d64:	f109 0620 	add.w	r6, r9, #32
 8024d68:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8024d6c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024d70:	0a36      	lsrs	r6, r6, #8
 8024d72:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8024d76:	4332      	orrs	r2, r6
 8024d78:	b292      	uxth	r2, r2
 8024d7a:	280f      	cmp	r0, #15
 8024d7c:	d922      	bls.n	8024dc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8024d7e:	4b61      	ldr	r3, [pc, #388]	; (8024f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8024d80:	f240 210d 	movw	r1, #525	; 0x20d
 8024d84:	4a60      	ldr	r2, [pc, #384]	; (8024f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8024d86:	4861      	ldr	r0, [pc, #388]	; (8024f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8024d88:	f003 fc7e 	bl	8028688 <__assert_func>
 8024d8c:	f04f 0c00 	mov.w	ip, #0
 8024d90:	4661      	mov	r1, ip
 8024d92:	e76a      	b.n	8024c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8024d94:	2400      	movs	r4, #0
 8024d96:	46a4      	mov	ip, r4
 8024d98:	4623      	mov	r3, r4
 8024d9a:	4621      	mov	r1, r4
 8024d9c:	e791      	b.n	8024cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8024d9e:	2400      	movs	r4, #0
 8024da0:	4623      	mov	r3, r4
 8024da2:	e78e      	b.n	8024cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8024da4:	4604      	mov	r4, r0
 8024da6:	4603      	mov	r3, r0
 8024da8:	e78b      	b.n	8024cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8024daa:	2500      	movs	r5, #0
 8024dac:	46ab      	mov	fp, r5
 8024dae:	e7ba      	b.n	8024d26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8024db0:	2700      	movs	r7, #0
 8024db2:	463d      	mov	r5, r7
 8024db4:	463a      	mov	r2, r7
 8024db6:	46bb      	mov	fp, r7
 8024db8:	e7df      	b.n	8024d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8024dba:	2700      	movs	r7, #0
 8024dbc:	463a      	mov	r2, r7
 8024dbe:	e7dc      	b.n	8024d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8024dc0:	4607      	mov	r7, r0
 8024dc2:	4602      	mov	r2, r0
 8024dc4:	f1be 0f0f 	cmp.w	lr, #15
 8024dc8:	d8d9      	bhi.n	8024d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8024dca:	b286      	uxth	r6, r0
 8024dcc:	fa1f f98e 	uxth.w	r9, lr
 8024dd0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024dd4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024dd8:	fb06 f809 	mul.w	r8, r6, r9
 8024ddc:	0136      	lsls	r6, r6, #4
 8024dde:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024de2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8024de6:	9601      	str	r6, [sp, #4]
 8024de8:	ea4a 0101 	orr.w	r1, sl, r1
 8024dec:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8024df0:	fa1f f689 	uxth.w	r6, r9
 8024df4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024df8:	fb10 f90e 	smulbb	r9, r0, lr
 8024dfc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024e00:	9602      	str	r6, [sp, #8]
 8024e02:	460e      	mov	r6, r1
 8024e04:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8024e08:	f1ce 0110 	rsb	r1, lr, #16
 8024e0c:	ea4a 0303 	orr.w	r3, sl, r3
 8024e10:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024e14:	1a09      	subs	r1, r1, r0
 8024e16:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8024e1a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024e1e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024e22:	4343      	muls	r3, r0
 8024e24:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8024e28:	ea4a 0202 	orr.w	r2, sl, r2
 8024e2c:	9802      	ldr	r0, [sp, #8]
 8024e2e:	fb01 3106 	mla	r1, r1, r6, r3
 8024e32:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8024e36:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024e3a:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024e3e:	fb09 1302 	mla	r3, r9, r2, r1
 8024e42:	9901      	ldr	r1, [sp, #4]
 8024e44:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024e48:	9a03      	ldr	r2, [sp, #12]
 8024e4a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8024e4e:	ea4a 0b0b 	orr.w	fp, sl, fp
 8024e52:	8812      	ldrh	r2, [r2, #0]
 8024e54:	1a09      	subs	r1, r1, r0
 8024e56:	9801      	ldr	r0, [sp, #4]
 8024e58:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8024e5c:	eba0 0608 	sub.w	r6, r0, r8
 8024e60:	b289      	uxth	r1, r1
 8024e62:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8024e66:	b2b6      	uxth	r6, r6
 8024e68:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024e6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e70:	4374      	muls	r4, r6
 8024e72:	10d0      	asrs	r0, r2, #3
 8024e74:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024e78:	fb0c 4401 	mla	r4, ip, r1, r4
 8024e7c:	9902      	ldr	r1, [sp, #8]
 8024e7e:	ea43 0e0e 	orr.w	lr, r3, lr
 8024e82:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024e86:	fb01 4505 	mla	r5, r1, r5, r4
 8024e8a:	1211      	asrs	r1, r2, #8
 8024e8c:	00d2      	lsls	r2, r2, #3
 8024e8e:	fb08 5707 	mla	r7, r8, r7, r5
 8024e92:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024e96:	b2d2      	uxtb	r2, r2
 8024e98:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8024e9c:	fa1f f38e 	uxth.w	r3, lr
 8024ea0:	b2ff      	uxtb	r7, r7
 8024ea2:	4379      	muls	r1, r7
 8024ea4:	4378      	muls	r0, r7
 8024ea6:	4357      	muls	r7, r2
 8024ea8:	1c4a      	adds	r2, r1, #1
 8024eaa:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024eae:	1219      	asrs	r1, r3, #8
 8024eb0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024eb4:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8024eb8:	4a15      	ldr	r2, [pc, #84]	; (8024f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
 8024eba:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8024ebe:	1c42      	adds	r2, r0, #1
 8024ec0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024ec4:	10da      	asrs	r2, r3, #3
 8024ec6:	00db      	lsls	r3, r3, #3
 8024ec8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024ecc:	b2db      	uxtb	r3, r3
 8024ece:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024ed2:	00d2      	lsls	r2, r2, #3
 8024ed4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024ed8:	430a      	orrs	r2, r1
 8024eda:	1c79      	adds	r1, r7, #1
 8024edc:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8024ee0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024ee4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8024ee8:	4313      	orrs	r3, r2
 8024eea:	9a03      	ldr	r2, [sp, #12]
 8024eec:	8013      	strh	r3, [r2, #0]
 8024eee:	b005      	add	sp, #20
 8024ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ef4:	280f      	cmp	r0, #15
 8024ef6:	f63f af42 	bhi.w	8024d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8024efa:	4677      	mov	r7, lr
 8024efc:	4675      	mov	r5, lr
 8024efe:	4672      	mov	r2, lr
 8024f00:	46f3      	mov	fp, lr
 8024f02:	e762      	b.n	8024dca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8024f04:	0802cea2 	.word	0x0802cea2
 8024f08:	0802d465 	.word	0x0802d465
 8024f0c:	0802cf8b 	.word	0x0802cf8b
 8024f10:	fffff800 	.word	0xfffff800

08024f14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f18:	ed2d 8b08 	vpush	{d8-d11}
 8024f1c:	b093      	sub	sp, #76	; 0x4c
 8024f1e:	eeb0 aa40 	vmov.f32	s20, s0
 8024f22:	eef0 9a60 	vmov.f32	s19, s1
 8024f26:	9210      	str	r2, [sp, #64]	; 0x40
 8024f28:	eeb0 9a41 	vmov.f32	s18, s2
 8024f2c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024f2e:	eeb0 8a62 	vmov.f32	s16, s5
 8024f32:	9011      	str	r0, [sp, #68]	; 0x44
 8024f34:	eef0 8a43 	vmov.f32	s17, s6
 8024f38:	6850      	ldr	r0, [r2, #4]
 8024f3a:	eef0 ba44 	vmov.f32	s23, s8
 8024f3e:	910e      	str	r1, [sp, #56]	; 0x38
 8024f40:	eeb0 ba64 	vmov.f32	s22, s9
 8024f44:	9306      	str	r3, [sp, #24]
 8024f46:	eef0 aa45 	vmov.f32	s21, s10
 8024f4a:	6812      	ldr	r2, [r2, #0]
 8024f4c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024f50:	fb00 1303 	mla	r3, r0, r3, r1
 8024f54:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024f58:	9307      	str	r3, [sp, #28]
 8024f5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f5c:	681b      	ldr	r3, [r3, #0]
 8024f5e:	9308      	str	r3, [sp, #32]
 8024f60:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f62:	685b      	ldr	r3, [r3, #4]
 8024f64:	9309      	str	r3, [sp, #36]	; 0x24
 8024f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f68:	2b00      	cmp	r3, #0
 8024f6a:	dc03      	bgt.n	8024f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024f6e:	2b00      	cmp	r3, #0
 8024f70:	f340 83b8 	ble.w	80256e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8024f74:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024f7e:	1e48      	subs	r0, r1, #1
 8024f80:	1e55      	subs	r5, r2, #1
 8024f82:	9b06      	ldr	r3, [sp, #24]
 8024f84:	2b00      	cmp	r3, #0
 8024f86:	f340 819b 	ble.w	80252c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8024f8a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8024f8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024f8e:	1436      	asrs	r6, r6, #16
 8024f90:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024f94:	d406      	bmi.n	8024fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024f96:	4286      	cmp	r6, r0
 8024f98:	da04      	bge.n	8024fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024f9a:	2b00      	cmp	r3, #0
 8024f9c:	db02      	blt.n	8024fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024f9e:	42ab      	cmp	r3, r5
 8024fa0:	f2c0 818f 	blt.w	80252c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024fa4:	3601      	adds	r6, #1
 8024fa6:	f100 817c 	bmi.w	80252a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024faa:	42b1      	cmp	r1, r6
 8024fac:	f2c0 8179 	blt.w	80252a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024fb0:	3301      	adds	r3, #1
 8024fb2:	f100 8176 	bmi.w	80252a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024fb6:	429a      	cmp	r2, r3
 8024fb8:	f2c0 8173 	blt.w	80252a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024fbc:	9b06      	ldr	r3, [sp, #24]
 8024fbe:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8024fc2:	9f07      	ldr	r7, [sp, #28]
 8024fc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8024fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024fc8:	2b00      	cmp	r3, #0
 8024fca:	f340 819c 	ble.w	8025306 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8024fce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024fd0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8024fd2:	1418      	asrs	r0, r3, #16
 8024fd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024fd6:	142d      	asrs	r5, r5, #16
 8024fd8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024fdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024fde:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024fe2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024fe4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024fe8:	f100 81f0 	bmi.w	80253cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8024fec:	f102 3eff 	add.w	lr, r2, #4294967295
 8024ff0:	4575      	cmp	r5, lr
 8024ff2:	f280 81eb 	bge.w	80253cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8024ff6:	2800      	cmp	r0, #0
 8024ff8:	f2c0 81e8 	blt.w	80253cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8024ffc:	f103 3eff 	add.w	lr, r3, #4294967295
 8025000:	4570      	cmp	r0, lr
 8025002:	f280 81e3 	bge.w	80253cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8025006:	b212      	sxth	r2, r2
 8025008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802500a:	fa1f fe81 	uxth.w	lr, r1
 802500e:	fb00 5002 	mla	r0, r0, r2, r5
 8025012:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025016:	eb03 0a00 	add.w	sl, r3, r0
 802501a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802501e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025022:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025026:	b29b      	uxth	r3, r3
 8025028:	f1bc 0f00 	cmp.w	ip, #0
 802502c:	f000 81b1 	beq.w	8025392 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47e>
 8025030:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025034:	eb0a 0b02 	add.w	fp, sl, r2
 8025038:	fa1f fa8c 	uxth.w	sl, ip
 802503c:	940a      	str	r4, [sp, #40]	; 0x28
 802503e:	fb0a fe0e 	mul.w	lr, sl, lr
 8025042:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025046:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802504a:	eba5 050e 	sub.w	r5, r5, lr
 802504e:	940b      	str	r4, [sp, #44]	; 0x2c
 8025050:	fa1f fa8a 	uxth.w	sl, sl
 8025054:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025056:	b2ad      	uxth	r5, r5
 8025058:	eba3 030a 	sub.w	r3, r3, sl
 802505c:	fb08 f505 	mul.w	r5, r8, r5
 8025060:	b29b      	uxth	r3, r3
 8025062:	fb09 5303 	mla	r3, r9, r3, r5
 8025066:	fb0a 3304 	mla	r3, sl, r4, r3
 802506a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802506c:	fb0e 3304 	mla	r3, lr, r4, r3
 8025070:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025074:	2b00      	cmp	r3, #0
 8025076:	f000 8107 	beq.w	8025288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802507a:	9c08      	ldr	r4, [sp, #32]
 802507c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025080:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025084:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025088:	f000 8188 	beq.w	802539c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802508c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025090:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025094:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025098:	fb0a fe0e 	mul.w	lr, sl, lr
 802509c:	fb09 f000 	mul.w	r0, r9, r0
 80250a0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80250a4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80250a8:	f100 0b20 	add.w	fp, r0, #32
 80250ac:	44ce      	add	lr, r9
 80250ae:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80250b2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80250b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80250ba:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80250be:	ea4e 0909 	orr.w	r9, lr, r9
 80250c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80250c6:	8868      	ldrh	r0, [r5, #2]
 80250c8:	d019      	beq.n	80250fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80250ca:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80250ce:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80250d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80250d6:	fb0a fe0e 	mul.w	lr, sl, lr
 80250da:	fb08 f800 	mul.w	r8, r8, r0
 80250de:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80250e2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80250e6:	f108 0b20 	add.w	fp, r8, #32
 80250ea:	4486      	add	lr, r0
 80250ec:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80250f0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80250f4:	0a00      	lsrs	r0, r0, #8
 80250f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80250fa:	ea4e 0000 	orr.w	r0, lr, r0
 80250fe:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025102:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025106:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802510a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802510e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025112:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025116:	ea4e 0909 	orr.w	r9, lr, r9
 802511a:	ea4a 0000 	orr.w	r0, sl, r0
 802511e:	f1bc 0f00 	cmp.w	ip, #0
 8025122:	f000 813d 	beq.w	80253a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025126:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802512a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802512c:	3a01      	subs	r2, #1
 802512e:	2cff      	cmp	r4, #255	; 0xff
 8025130:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025134:	f102 0202 	add.w	r2, r2, #2
 8025138:	eb05 0e02 	add.w	lr, r5, r2
 802513c:	5aaa      	ldrh	r2, [r5, r2]
 802513e:	d018      	beq.n	8025172 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8025140:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025144:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025148:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802514c:	fb04 fa02 	mul.w	sl, r4, r2
 8025150:	fb08 f805 	mul.w	r8, r8, r5
 8025154:	f10a 0520 	add.w	r5, sl, #32
 8025158:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802515c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025160:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025164:	4442      	add	r2, r8
 8025166:	0a2d      	lsrs	r5, r5, #8
 8025168:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802516c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025170:	432a      	orrs	r2, r5
 8025172:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025174:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025178:	2cff      	cmp	r4, #255	; 0xff
 802517a:	d01a      	beq.n	80251b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802517c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025180:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025184:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025188:	fb04 fa05 	mul.w	sl, r4, r5
 802518c:	fb08 f80e 	mul.w	r8, r8, lr
 8025190:	f10a 0e20 	add.w	lr, sl, #32
 8025194:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025198:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802519c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80251a0:	4445      	add	r5, r8
 80251a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251a6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80251aa:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80251ae:	ea45 050e 	orr.w	r5, r5, lr
 80251b2:	fb1c fe01 	smulbb	lr, ip, r1
 80251b6:	f1cc 0810 	rsb	r8, ip, #16
 80251ba:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80251be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80251c2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80251c6:	eba8 0801 	sub.w	r8, r8, r1
 80251ca:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80251ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80251d2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80251d6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80251da:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80251de:	ea4a 0202 	orr.w	r2, sl, r2
 80251e2:	4341      	muls	r1, r0
 80251e4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80251e8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80251ec:	fb09 1108 	mla	r1, r9, r8, r1
 80251f0:	ea4b 0505 	orr.w	r5, fp, r5
 80251f4:	fb0c 1102 	mla	r1, ip, r2, r1
 80251f8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80251fc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025200:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025204:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025208:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802520c:	ea42 0e0e 	orr.w	lr, r2, lr
 8025210:	fa1f f28e 	uxth.w	r2, lr
 8025214:	2bff      	cmp	r3, #255	; 0xff
 8025216:	f000 80d7 	beq.w	80253c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802521a:	f8b7 c000 	ldrh.w	ip, [r7]
 802521e:	43db      	mvns	r3, r3
 8025220:	ea4f 202c 	mov.w	r0, ip, asr #8
 8025224:	fa5f fe83 	uxtb.w	lr, r3
 8025228:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802522c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8025230:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8025234:	fb00 f00e 	mul.w	r0, r0, lr
 8025238:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802523c:	b2db      	uxtb	r3, r3
 802523e:	1c41      	adds	r1, r0, #1
 8025240:	fb05 f50e 	mul.w	r5, r5, lr
 8025244:	fb03 f30e 	mul.w	r3, r3, lr
 8025248:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802524c:	1210      	asrs	r0, r2, #8
 802524e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025252:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8025256:	496c      	ldr	r1, [pc, #432]	; (8025408 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>)
 8025258:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 802525c:	1c69      	adds	r1, r5, #1
 802525e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025262:	10d1      	asrs	r1, r2, #3
 8025264:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025268:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802526c:	00c9      	lsls	r1, r1, #3
 802526e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025272:	4301      	orrs	r1, r0
 8025274:	1c58      	adds	r0, r3, #1
 8025276:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802527a:	00d3      	lsls	r3, r2, #3
 802527c:	b2db      	uxtb	r3, r3
 802527e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025282:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8025286:	803b      	strh	r3, [r7, #0]
 8025288:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802528a:	3702      	adds	r7, #2
 802528c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802528e:	4413      	add	r3, r2
 8025290:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8025292:	9325      	str	r3, [sp, #148]	; 0x94
 8025294:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025296:	441a      	add	r2, r3
 8025298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802529a:	3b01      	subs	r3, #1
 802529c:	9226      	str	r2, [sp, #152]	; 0x98
 802529e:	930f      	str	r3, [sp, #60]	; 0x3c
 80252a0:	e691      	b.n	8024fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80252a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80252a4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80252a6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80252a8:	4433      	add	r3, r6
 80252aa:	9325      	str	r3, [sp, #148]	; 0x94
 80252ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80252ae:	441c      	add	r4, r3
 80252b0:	9b06      	ldr	r3, [sp, #24]
 80252b2:	3b01      	subs	r3, #1
 80252b4:	9426      	str	r4, [sp, #152]	; 0x98
 80252b6:	9306      	str	r3, [sp, #24]
 80252b8:	9b07      	ldr	r3, [sp, #28]
 80252ba:	3302      	adds	r3, #2
 80252bc:	9307      	str	r3, [sp, #28]
 80252be:	e660      	b.n	8024f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80252c0:	d028      	beq.n	8025314 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80252c2:	9b06      	ldr	r3, [sp, #24]
 80252c4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80252c6:	3b01      	subs	r3, #1
 80252c8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80252ca:	fb00 5003 	mla	r0, r0, r3, r5
 80252ce:	1400      	asrs	r0, r0, #16
 80252d0:	f53f ae74 	bmi.w	8024fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80252d4:	3901      	subs	r1, #1
 80252d6:	4288      	cmp	r0, r1
 80252d8:	f6bf ae70 	bge.w	8024fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80252dc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80252de:	9826      	ldr	r0, [sp, #152]	; 0x98
 80252e0:	fb01 0303 	mla	r3, r1, r3, r0
 80252e4:	141b      	asrs	r3, r3, #16
 80252e6:	f53f ae69 	bmi.w	8024fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80252ea:	3a01      	subs	r2, #1
 80252ec:	4293      	cmp	r3, r2
 80252ee:	f6bf ae65 	bge.w	8024fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80252f2:	9b06      	ldr	r3, [sp, #24]
 80252f4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80252f8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80252fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80252fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025300:	2b00      	cmp	r3, #0
 8025302:	f300 8083 	bgt.w	802540c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 8025306:	9b06      	ldr	r3, [sp, #24]
 8025308:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802530c:	9b07      	ldr	r3, [sp, #28]
 802530e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025312:	9307      	str	r3, [sp, #28]
 8025314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025316:	2b00      	cmp	r3, #0
 8025318:	f340 81e4 	ble.w	80256e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 802531c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025320:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025322:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025326:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802532a:	eef0 6a48 	vmov.f32	s13, s16
 802532e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025332:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025336:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802533a:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802533e:	eef0 6a68 	vmov.f32	s13, s17
 8025342:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025346:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 802534a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802534e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025352:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025356:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802535a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802535e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025362:	ee18 2a10 	vmov	r2, s16
 8025366:	eeb0 8a47 	vmov.f32	s16, s14
 802536a:	fb92 f3f3 	sdiv	r3, r2, r3
 802536e:	ee18 2a90 	vmov	r2, s17
 8025372:	9327      	str	r3, [sp, #156]	; 0x9c
 8025374:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025376:	eef0 8a67 	vmov.f32	s17, s15
 802537a:	fb92 f3f3 	sdiv	r3, r2, r3
 802537e:	9328      	str	r3, [sp, #160]	; 0xa0
 8025380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025382:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025384:	3b01      	subs	r3, #1
 8025386:	930e      	str	r3, [sp, #56]	; 0x38
 8025388:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802538a:	bf08      	it	eq
 802538c:	4613      	moveq	r3, r2
 802538e:	9306      	str	r3, [sp, #24]
 8025390:	e5e9      	b.n	8024f66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025392:	fb08 f505 	mul.w	r5, r8, r5
 8025396:	fb09 5303 	mla	r3, r9, r3, r5
 802539a:	e669      	b.n	8025070 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 802539c:	4681      	mov	r9, r0
 802539e:	e690      	b.n	80250c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80253a0:	f1c1 0210 	rsb	r2, r1, #16
 80253a4:	4341      	muls	r1, r0
 80253a6:	fb09 1902 	mla	r9, r9, r2, r1
 80253aa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80253ae:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80253b2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80253b6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80253ba:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80253be:	ea42 0909 	orr.w	r9, r2, r9
 80253c2:	fa1f f289 	uxth.w	r2, r9
 80253c6:	e725      	b.n	8025214 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80253c8:	803a      	strh	r2, [r7, #0]
 80253ca:	e75d      	b.n	8025288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80253cc:	f115 0e01 	adds.w	lr, r5, #1
 80253d0:	f53f af5a 	bmi.w	8025288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80253d4:	4572      	cmp	r2, lr
 80253d6:	f6ff af57 	blt.w	8025288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80253da:	f110 0e01 	adds.w	lr, r0, #1
 80253de:	f53f af53 	bmi.w	8025288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80253e2:	4573      	cmp	r3, lr
 80253e4:	f6ff af50 	blt.w	8025288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80253e8:	b21b      	sxth	r3, r3
 80253ea:	b212      	sxth	r2, r2
 80253ec:	9301      	str	r3, [sp, #4]
 80253ee:	9200      	str	r2, [sp, #0]
 80253f0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80253f4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80253f8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80253fc:	4639      	mov	r1, r7
 80253fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025400:	f7ff fbf0 	bl	8024be4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8025404:	e740      	b.n	8025288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025406:	bf00      	nop
 8025408:	fffff800 	.word	0xfffff800
 802540c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802540e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025412:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025414:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025418:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802541a:	fa1f fc82 	uxth.w	ip, r2
 802541e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025422:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025424:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025428:	141f      	asrs	r7, r3, #16
 802542a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802542c:	141b      	asrs	r3, r3, #16
 802542e:	fb01 3707 	mla	r7, r1, r7, r3
 8025432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025434:	eb03 0a07 	add.w	sl, r3, r7
 8025438:	f813 9007 	ldrb.w	r9, [r3, r7]
 802543c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025440:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025444:	b29b      	uxth	r3, r3
 8025446:	2d00      	cmp	r5, #0
 8025448:	f000 8131 	beq.w	80256ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 802544c:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025450:	eb0a 0b01 	add.w	fp, sl, r1
 8025454:	fa1f fa85 	uxth.w	sl, r5
 8025458:	940c      	str	r4, [sp, #48]	; 0x30
 802545a:	fb0a fc0c 	mul.w	ip, sl, ip
 802545e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025462:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025466:	eba0 000c 	sub.w	r0, r0, ip
 802546a:	940d      	str	r4, [sp, #52]	; 0x34
 802546c:	fa1f fa8a 	uxth.w	sl, sl
 8025470:	b280      	uxth	r0, r0
 8025472:	eba3 030a 	sub.w	r3, r3, sl
 8025476:	fb08 f000 	mul.w	r0, r8, r0
 802547a:	b29b      	uxth	r3, r3
 802547c:	fb09 0303 	mla	r3, r9, r3, r0
 8025480:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025482:	fb0a 3300 	mla	r3, sl, r0, r3
 8025486:	fb0c 3304 	mla	r3, ip, r4, r3
 802548a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802548e:	2b00      	cmp	r3, #0
 8025490:	f000 80ff 	beq.w	8025692 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8025494:	9808      	ldr	r0, [sp, #32]
 8025496:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802549a:	9c08      	ldr	r4, [sp, #32]
 802549c:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80254a0:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80254a4:	f000 8108 	beq.w	80256b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80254a8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80254ac:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80254b0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80254b4:	fb0a fc0c 	mul.w	ip, sl, ip
 80254b8:	fb09 f707 	mul.w	r7, r9, r7
 80254bc:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80254c0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80254c4:	f107 0b20 	add.w	fp, r7, #32
 80254c8:	44cc      	add	ip, r9
 80254ca:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80254ce:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80254d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80254d6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80254da:	ea4c 0909 	orr.w	r9, ip, r9
 80254de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80254e2:	8847      	ldrh	r7, [r0, #2]
 80254e4:	d019      	beq.n	802551a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x606>
 80254e6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80254ea:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80254ee:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80254f2:	fb0a fc0c 	mul.w	ip, sl, ip
 80254f6:	fb08 f807 	mul.w	r8, r8, r7
 80254fa:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80254fe:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025502:	f108 0b20 	add.w	fp, r8, #32
 8025506:	44bc      	add	ip, r7
 8025508:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802550c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025510:	0a3f      	lsrs	r7, r7, #8
 8025512:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025516:	ea4c 0707 	orr.w	r7, ip, r7
 802551a:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802551e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025522:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025526:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802552a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802552e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025532:	ea4c 0909 	orr.w	r9, ip, r9
 8025536:	ea4a 0707 	orr.w	r7, sl, r7
 802553a:	2d00      	cmp	r5, #0
 802553c:	f000 80be 	beq.w	80256bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025540:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025544:	3901      	subs	r1, #1
 8025546:	0049      	lsls	r1, r1, #1
 8025548:	3102      	adds	r1, #2
 802554a:	eb00 0c01 	add.w	ip, r0, r1
 802554e:	5a41      	ldrh	r1, [r0, r1]
 8025550:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025552:	28ff      	cmp	r0, #255	; 0xff
 8025554:	d019      	beq.n	802558a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8025556:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802555a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802555c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025560:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025564:	fb04 fa01 	mul.w	sl, r4, r1
 8025568:	fb08 f800 	mul.w	r8, r8, r0
 802556c:	f10a 0020 	add.w	r0, sl, #32
 8025570:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025574:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025578:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802557c:	4441      	add	r1, r8
 802557e:	0a00      	lsrs	r0, r0, #8
 8025580:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025584:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025588:	4301      	orrs	r1, r0
 802558a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802558c:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025590:	2cff      	cmp	r4, #255	; 0xff
 8025592:	d01a      	beq.n	80255ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8025594:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8025598:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802559c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80255a0:	fb04 fa00 	mul.w	sl, r4, r0
 80255a4:	fb08 f80c 	mul.w	r8, r8, ip
 80255a8:	f10a 0c20 	add.w	ip, sl, #32
 80255ac:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80255b0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80255b4:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80255b8:	4440      	add	r0, r8
 80255ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80255be:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80255c2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80255c6:	ea40 000c 	orr.w	r0, r0, ip
 80255ca:	fb15 fc02 	smulbb	ip, r5, r2
 80255ce:	f1c5 0810 	rsb	r8, r5, #16
 80255d2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80255d6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80255da:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80255de:	eba8 0802 	sub.w	r8, r8, r2
 80255e2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80255e6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80255ea:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80255ee:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80255f2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80255f6:	ea4a 0101 	orr.w	r1, sl, r1
 80255fa:	437a      	muls	r2, r7
 80255fc:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025600:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025604:	fb09 2208 	mla	r2, r9, r8, r2
 8025608:	ea4b 0000 	orr.w	r0, fp, r0
 802560c:	fb05 2201 	mla	r2, r5, r1, r2
 8025610:	fb0c 2200 	mla	r2, ip, r0, r2
 8025614:	0d57      	lsrs	r7, r2, #21
 8025616:	0952      	lsrs	r2, r2, #5
 8025618:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802561c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025620:	433a      	orrs	r2, r7
 8025622:	2bff      	cmp	r3, #255	; 0xff
 8025624:	b292      	uxth	r2, r2
 8025626:	d05a      	beq.n	80256de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ca>
 8025628:	f8be 7000 	ldrh.w	r7, [lr]
 802562c:	43db      	mvns	r3, r3
 802562e:	4c30      	ldr	r4, [pc, #192]	; (80256f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>)
 8025630:	1238      	asrs	r0, r7, #8
 8025632:	fa5f fc83 	uxtb.w	ip, r3
 8025636:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802563a:	10fd      	asrs	r5, r7, #3
 802563c:	00fb      	lsls	r3, r7, #3
 802563e:	fb00 f00c 	mul.w	r0, r0, ip
 8025642:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025646:	b2db      	uxtb	r3, r3
 8025648:	fb05 f10c 	mul.w	r1, r5, ip
 802564c:	1c45      	adds	r5, r0, #1
 802564e:	fb03 f30c 	mul.w	r3, r3, ip
 8025652:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025656:	1215      	asrs	r5, r2, #8
 8025658:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802565c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025660:	1c4d      	adds	r5, r1, #1
 8025662:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8025666:	10d1      	asrs	r1, r2, #3
 8025668:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802566c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025670:	00d2      	lsls	r2, r2, #3
 8025672:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025676:	00c9      	lsls	r1, r1, #3
 8025678:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802567c:	4308      	orrs	r0, r1
 802567e:	1c59      	adds	r1, r3, #1
 8025680:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025684:	b2d1      	uxtb	r1, r2
 8025686:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802568a:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 802568e:	f8ae 0000 	strh.w	r0, [lr]
 8025692:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025694:	f10e 0e02 	add.w	lr, lr, #2
 8025698:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802569a:	4413      	add	r3, r2
 802569c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802569e:	9325      	str	r3, [sp, #148]	; 0x94
 80256a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80256a2:	441a      	add	r2, r3
 80256a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80256a6:	3b01      	subs	r3, #1
 80256a8:	9226      	str	r2, [sp, #152]	; 0x98
 80256aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80256ac:	e627      	b.n	80252fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80256ae:	fb08 f000 	mul.w	r0, r8, r0
 80256b2:	fb09 0303 	mla	r3, r9, r3, r0
 80256b6:	e6e8      	b.n	802548a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x576>
 80256b8:	46b9      	mov	r9, r7
 80256ba:	e710      	b.n	80254de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 80256bc:	f1c2 0110 	rsb	r1, r2, #16
 80256c0:	437a      	muls	r2, r7
 80256c2:	fb09 2901 	mla	r9, r9, r1, r2
 80256c6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80256ca:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80256ce:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80256d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80256d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80256da:	4302      	orrs	r2, r0
 80256dc:	e7a1      	b.n	8025622 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 80256de:	f8ae 2000 	strh.w	r2, [lr]
 80256e2:	e7d6      	b.n	8025692 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 80256e4:	b013      	add	sp, #76	; 0x4c
 80256e6:	ecbd 8b08 	vpop	{d8-d11}
 80256ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256ee:	bf00      	nop
 80256f0:	fffff800 	.word	0xfffff800

080256f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80256f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80256f8:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 80256fc:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8025700:	fb0c 4e03 	mla	lr, ip, r3, r4
 8025704:	f1bc 0f00 	cmp.w	ip, #0
 8025708:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 802570c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8025710:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8025714:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8025718:	8808      	ldrh	r0, [r1, #0]
 802571a:	db2f      	blt.n	802577c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802571c:	45e2      	cmp	sl, ip
 802571e:	dd2d      	ble.n	802577c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8025720:	2c00      	cmp	r4, #0
 8025722:	db29      	blt.n	8025778 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8025724:	42a3      	cmp	r3, r4
 8025726:	dd27      	ble.n	8025778 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8025728:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 802572c:	1c62      	adds	r2, r4, #1
 802572e:	d428      	bmi.n	8025782 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8025730:	4293      	cmp	r3, r2
 8025732:	dd26      	ble.n	8025782 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8025734:	b32f      	cbz	r7, 8025782 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8025736:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 802573a:	f11c 0c01 	adds.w	ip, ip, #1
 802573e:	d424      	bmi.n	802578a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8025740:	45e2      	cmp	sl, ip
 8025742:	dd22      	ble.n	802578a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8025744:	2e00      	cmp	r6, #0
 8025746:	f000 809c 	beq.w	8025882 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 802574a:	2c00      	cmp	r4, #0
 802574c:	db1b      	blt.n	8025786 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802574e:	42a3      	cmp	r3, r4
 8025750:	dd19      	ble.n	8025786 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8025752:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8025756:	3401      	adds	r4, #1
 8025758:	d41a      	bmi.n	8025790 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802575a:	42a3      	cmp	r3, r4
 802575c:	dd18      	ble.n	8025790 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802575e:	b1cf      	cbz	r7, 8025794 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8025760:	3301      	adds	r3, #1
 8025762:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8025766:	2f0f      	cmp	r7, #15
 8025768:	d915      	bls.n	8025796 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 802576a:	4b49      	ldr	r3, [pc, #292]	; (8025890 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 802576c:	f240 11ef 	movw	r1, #495	; 0x1ef
 8025770:	4a48      	ldr	r2, [pc, #288]	; (8025894 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8025772:	4849      	ldr	r0, [pc, #292]	; (8025898 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8025774:	f002 ff88 	bl	8028688 <__assert_func>
 8025778:	4681      	mov	r9, r0
 802577a:	e7d7      	b.n	802572c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 802577c:	4686      	mov	lr, r0
 802577e:	4681      	mov	r9, r0
 8025780:	e7db      	b.n	802573a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8025782:	4686      	mov	lr, r0
 8025784:	e7d9      	b.n	802573a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8025786:	4684      	mov	ip, r0
 8025788:	e7e5      	b.n	8025756 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 802578a:	4603      	mov	r3, r0
 802578c:	4684      	mov	ip, r0
 802578e:	e7ea      	b.n	8025766 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8025790:	4603      	mov	r3, r0
 8025792:	e7e8      	b.n	8025766 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8025794:	4603      	mov	r3, r0
 8025796:	2e0f      	cmp	r6, #15
 8025798:	d8e7      	bhi.n	802576a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802579a:	fb17 f806 	smulbb	r8, r7, r6
 802579e:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80257a2:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 80257a6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80257aa:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80257ae:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80257b2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80257b6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80257ba:	ea44 0909 	orr.w	r9, r4, r9
 80257be:	f1c6 0410 	rsb	r4, r6, #16
 80257c2:	041a      	lsls	r2, r3, #16
 80257c4:	ea4a 0e0e 	orr.w	lr, sl, lr
 80257c8:	1be4      	subs	r4, r4, r7
 80257ca:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 80257ce:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80257d2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80257d6:	fb07 fe0e 	mul.w	lr, r7, lr
 80257da:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80257de:	4313      	orrs	r3, r2
 80257e0:	ea4f 420c 	mov.w	r2, ip, lsl #16
 80257e4:	fb04 e409 	mla	r4, r4, r9, lr
 80257e8:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80257ec:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80257f0:	b2af      	uxth	r7, r5
 80257f2:	fb08 4303 	mla	r3, r8, r3, r4
 80257f6:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 80257fa:	43ed      	mvns	r5, r5
 80257fc:	4322      	orrs	r2, r4
 80257fe:	b2ed      	uxtb	r5, r5
 8025800:	fb06 3202 	mla	r2, r6, r2, r3
 8025804:	10c6      	asrs	r6, r0, #3
 8025806:	0d53      	lsrs	r3, r2, #21
 8025808:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802580c:	0952      	lsrs	r2, r2, #5
 802580e:	fb16 f605 	smulbb	r6, r6, r5
 8025812:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025816:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802581a:	431a      	orrs	r2, r3
 802581c:	b293      	uxth	r3, r2
 802581e:	1202      	asrs	r2, r0, #8
 8025820:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8025824:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025828:	00dc      	lsls	r4, r3, #3
 802582a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802582e:	fb12 f205 	smulbb	r2, r2, r5
 8025832:	b2e4      	uxtb	r4, r4
 8025834:	fb0c 2c07 	mla	ip, ip, r7, r2
 8025838:	10da      	asrs	r2, r3, #3
 802583a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802583e:	fa1f fc8c 	uxth.w	ip, ip
 8025842:	fb02 6207 	mla	r2, r2, r7, r6
 8025846:	f10c 0301 	add.w	r3, ip, #1
 802584a:	b296      	uxth	r6, r2
 802584c:	00c2      	lsls	r2, r0, #3
 802584e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025852:	b2d2      	uxtb	r2, r2
 8025854:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8025858:	fb12 f205 	smulbb	r2, r2, r5
 802585c:	fb04 2207 	mla	r2, r4, r7, r2
 8025860:	b292      	uxth	r2, r2
 8025862:	1c50      	adds	r0, r2, #1
 8025864:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025868:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802586c:	4313      	orrs	r3, r2
 802586e:	1c72      	adds	r2, r6, #1
 8025870:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8025874:	0952      	lsrs	r2, r2, #5
 8025876:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802587a:	4313      	orrs	r3, r2
 802587c:	800b      	strh	r3, [r1, #0]
 802587e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025882:	2f0f      	cmp	r7, #15
 8025884:	f63f af71 	bhi.w	802576a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8025888:	4603      	mov	r3, r0
 802588a:	4684      	mov	ip, r0
 802588c:	e785      	b.n	802579a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 802588e:	bf00      	nop
 8025890:	0802cea2 	.word	0x0802cea2
 8025894:	0802d50e 	.word	0x0802d50e
 8025898:	0802cf8b 	.word	0x0802cf8b

0802589c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258a0:	ed2d 8b08 	vpush	{d8-d11}
 80258a4:	b093      	sub	sp, #76	; 0x4c
 80258a6:	461d      	mov	r5, r3
 80258a8:	eeb0 aa40 	vmov.f32	s20, s0
 80258ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80258ae:	eef0 9a60 	vmov.f32	s19, s1
 80258b2:	9210      	str	r2, [sp, #64]	; 0x40
 80258b4:	eeb0 9a41 	vmov.f32	s18, s2
 80258b8:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80258bc:	eeb0 8a62 	vmov.f32	s16, s5
 80258c0:	910a      	str	r1, [sp, #40]	; 0x28
 80258c2:	eef0 8a43 	vmov.f32	s17, s6
 80258c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80258c8:	eef0 ba44 	vmov.f32	s23, s8
 80258cc:	6859      	ldr	r1, [r3, #4]
 80258ce:	eeb0 ba64 	vmov.f32	s22, s9
 80258d2:	681b      	ldr	r3, [r3, #0]
 80258d4:	eef0 aa45 	vmov.f32	s21, s10
 80258d8:	9011      	str	r0, [sp, #68]	; 0x44
 80258da:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 80258de:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80258e2:	fb01 2707 	mla	r7, r1, r7, r2
 80258e6:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80258ea:	9307      	str	r3, [sp, #28]
 80258ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80258ee:	681b      	ldr	r3, [r3, #0]
 80258f0:	9309      	str	r3, [sp, #36]	; 0x24
 80258f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80258f4:	43db      	mvns	r3, r3
 80258f6:	b2db      	uxtb	r3, r3
 80258f8:	9308      	str	r3, [sp, #32]
 80258fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80258fc:	2b00      	cmp	r3, #0
 80258fe:	dc03      	bgt.n	8025908 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025900:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025902:	2b00      	cmp	r3, #0
 8025904:	f340 8205 	ble.w	8025d12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025908:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802590a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802590e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025912:	1e48      	subs	r0, r1, #1
 8025914:	f102 3cff 	add.w	ip, r2, #4294967295
 8025918:	2d00      	cmp	r5, #0
 802591a:	f340 80da 	ble.w	8025ad2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802591e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025922:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025926:	d406      	bmi.n	8025936 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025928:	4586      	cmp	lr, r0
 802592a:	da04      	bge.n	8025936 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802592c:	2b00      	cmp	r3, #0
 802592e:	db02      	blt.n	8025936 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025930:	4563      	cmp	r3, ip
 8025932:	f2c0 80cf 	blt.w	8025ad4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8025936:	f11e 0e01 	adds.w	lr, lr, #1
 802593a:	f100 80c1 	bmi.w	8025ac0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802593e:	4571      	cmp	r1, lr
 8025940:	f2c0 80be 	blt.w	8025ac0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025944:	3301      	adds	r3, #1
 8025946:	f100 80bb 	bmi.w	8025ac0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802594a:	429a      	cmp	r2, r3
 802594c:	f2c0 80b8 	blt.w	8025ac0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025950:	46a9      	mov	r9, r5
 8025952:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8025956:	f1b9 0f00 	cmp.w	r9, #0
 802595a:	f340 80d8 	ble.w	8025b0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802595e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025960:	1421      	asrs	r1, r4, #16
 8025962:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025966:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802596a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802596e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025972:	f100 8112 	bmi.w	8025b9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025976:	f10e 3aff 	add.w	sl, lr, #4294967295
 802597a:	4551      	cmp	r1, sl
 802597c:	f280 810d 	bge.w	8025b9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025980:	2800      	cmp	r0, #0
 8025982:	f2c0 810a 	blt.w	8025b9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025986:	f103 3aff 	add.w	sl, r3, #4294967295
 802598a:	4550      	cmp	r0, sl
 802598c:	f280 8105 	bge.w	8025b9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025990:	fa0f f38e 	sxth.w	r3, lr
 8025994:	fb00 1103 	mla	r1, r0, r3, r1
 8025998:	9809      	ldr	r0, [sp, #36]	; 0x24
 802599a:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 802599e:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80259a2:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80259a6:	f1bc 0f00 	cmp.w	ip, #0
 80259aa:	d007      	beq.n	80259bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80259ac:	005b      	lsls	r3, r3, #1
 80259ae:	eb0a 0003 	add.w	r0, sl, r3
 80259b2:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80259b6:	930c      	str	r3, [sp, #48]	; 0x30
 80259b8:	8843      	ldrh	r3, [r0, #2]
 80259ba:	930d      	str	r3, [sp, #52]	; 0x34
 80259bc:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80259c0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80259c4:	fb12 f30c 	smulbb	r3, r2, ip
 80259c8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80259cc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80259d0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80259d4:	10db      	asrs	r3, r3, #3
 80259d6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80259da:	ea40 000e 	orr.w	r0, r0, lr
 80259de:	f1cc 0e10 	rsb	lr, ip, #16
 80259e2:	ea4a 0101 	orr.w	r1, sl, r1
 80259e6:	9f08      	ldr	r7, [sp, #32]
 80259e8:	ebae 0e02 	sub.w	lr, lr, r2
 80259ec:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80259f0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80259f4:	4351      	muls	r1, r2
 80259f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80259f8:	fb0e 1e00 	mla	lr, lr, r0, r1
 80259fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80259fe:	0410      	lsls	r0, r2, #16
 8025a00:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025a04:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025a08:	4310      	orrs	r0, r2
 8025a0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025a0c:	0412      	lsls	r2, r2, #16
 8025a0e:	fb03 e000 	mla	r0, r3, r0, lr
 8025a12:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8025a16:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025a1a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025a1e:	f8b8 c000 	ldrh.w	ip, [r8]
 8025a22:	ea42 020e 	orr.w	r2, r2, lr
 8025a26:	ea4f 212c 	mov.w	r1, ip, asr #8
 8025a2a:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8025a2e:	fb03 0302 	mla	r3, r3, r2, r0
 8025a32:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025a36:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025a3a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8025a3e:	fb11 f107 	smulbb	r1, r1, r7
 8025a42:	0d5a      	lsrs	r2, r3, #21
 8025a44:	095b      	lsrs	r3, r3, #5
 8025a46:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025a4a:	fa5f fc8c 	uxtb.w	ip, ip
 8025a4e:	fb1e fe07 	smulbb	lr, lr, r7
 8025a52:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025a56:	fb1c fc07 	smulbb	ip, ip, r7
 8025a5a:	4313      	orrs	r3, r2
 8025a5c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8025a60:	b29b      	uxth	r3, r3
 8025a62:	1218      	asrs	r0, r3, #8
 8025a64:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025a68:	fb00 1002 	mla	r0, r0, r2, r1
 8025a6c:	10d9      	asrs	r1, r3, #3
 8025a6e:	00db      	lsls	r3, r3, #3
 8025a70:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025a74:	b280      	uxth	r0, r0
 8025a76:	b2db      	uxtb	r3, r3
 8025a78:	fb01 e102 	mla	r1, r1, r2, lr
 8025a7c:	fb03 c202 	mla	r2, r3, r2, ip
 8025a80:	1c43      	adds	r3, r0, #1
 8025a82:	b289      	uxth	r1, r1
 8025a84:	b292      	uxth	r2, r2
 8025a86:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025a8a:	f102 0c01 	add.w	ip, r2, #1
 8025a8e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8025a92:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025a96:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025a9a:	4313      	orrs	r3, r2
 8025a9c:	1c4a      	adds	r2, r1, #1
 8025a9e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025aa2:	0949      	lsrs	r1, r1, #5
 8025aa4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025aa8:	430b      	orrs	r3, r1
 8025aaa:	f8a8 3000 	strh.w	r3, [r8]
 8025aae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025ab0:	f108 0802 	add.w	r8, r8, #2
 8025ab4:	f109 39ff 	add.w	r9, r9, #4294967295
 8025ab8:	441c      	add	r4, r3
 8025aba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025abc:	441e      	add	r6, r3
 8025abe:	e74a      	b.n	8025956 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025ac0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025ac2:	3d01      	subs	r5, #1
 8025ac4:	441c      	add	r4, r3
 8025ac6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ac8:	441e      	add	r6, r3
 8025aca:	9b07      	ldr	r3, [sp, #28]
 8025acc:	3302      	adds	r3, #2
 8025ace:	9307      	str	r3, [sp, #28]
 8025ad0:	e722      	b.n	8025918 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025ad2:	d022      	beq.n	8025b1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025ad4:	1e6b      	subs	r3, r5, #1
 8025ad6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025ad8:	fb00 4003 	mla	r0, r0, r3, r4
 8025adc:	1400      	asrs	r0, r0, #16
 8025ade:	f53f af37 	bmi.w	8025950 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025ae2:	3901      	subs	r1, #1
 8025ae4:	4288      	cmp	r0, r1
 8025ae6:	f6bf af33 	bge.w	8025950 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025aea:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025aec:	fb01 6303 	mla	r3, r1, r3, r6
 8025af0:	141b      	asrs	r3, r3, #16
 8025af2:	f53f af2d 	bmi.w	8025950 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025af6:	3a01      	subs	r2, #1
 8025af8:	4293      	cmp	r3, r2
 8025afa:	f6bf af29 	bge.w	8025950 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025afe:	46a8      	mov	r8, r5
 8025b00:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8025b04:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8025b08:	f1b8 0f00 	cmp.w	r8, #0
 8025b0c:	dc60      	bgt.n	8025bd0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8025b0e:	9b07      	ldr	r3, [sp, #28]
 8025b10:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025b14:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025b18:	9307      	str	r3, [sp, #28]
 8025b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b1c:	2b00      	cmp	r3, #0
 8025b1e:	f340 80f8 	ble.w	8025d12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025b26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025b28:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025b2c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025b30:	eef0 6a48 	vmov.f32	s13, s16
 8025b34:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025b38:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025b3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b40:	ee16 4a90 	vmov	r4, s13
 8025b44:	eef0 6a68 	vmov.f32	s13, s17
 8025b48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b4c:	ee16 6a90 	vmov	r6, s13
 8025b50:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025b54:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025b58:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025b5c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025b60:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025b64:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025b68:	ee18 2a10 	vmov	r2, s16
 8025b6c:	eeb0 8a47 	vmov.f32	s16, s14
 8025b70:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b74:	ee18 2a90 	vmov	r2, s17
 8025b78:	9327      	str	r3, [sp, #156]	; 0x9c
 8025b7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025b7c:	eef0 8a67 	vmov.f32	s17, s15
 8025b80:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b84:	9328      	str	r3, [sp, #160]	; 0xa0
 8025b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025b8a:	3b01      	subs	r3, #1
 8025b8c:	930a      	str	r3, [sp, #40]	; 0x28
 8025b8e:	bf08      	it	eq
 8025b90:	4615      	moveq	r5, r2
 8025b92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025b94:	bf18      	it	ne
 8025b96:	461d      	movne	r5, r3
 8025b98:	e6af      	b.n	80258fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8025b9a:	f111 0a01 	adds.w	sl, r1, #1
 8025b9e:	d486      	bmi.n	8025aae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025ba0:	45d6      	cmp	lr, sl
 8025ba2:	db84      	blt.n	8025aae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025ba4:	f110 0a01 	adds.w	sl, r0, #1
 8025ba8:	d481      	bmi.n	8025aae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025baa:	4553      	cmp	r3, sl
 8025bac:	f6ff af7f 	blt.w	8025aae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025bb0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025bb2:	b21b      	sxth	r3, r3
 8025bb4:	9101      	str	r1, [sp, #4]
 8025bb6:	4641      	mov	r1, r8
 8025bb8:	9300      	str	r3, [sp, #0]
 8025bba:	fa0f f38e 	sxth.w	r3, lr
 8025bbe:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8025bc2:	e9cd c704 	strd	ip, r7, [sp, #16]
 8025bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025bc8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025bca:	f7ff fd93 	bl	80256f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8025bce:	e76e      	b.n	8025aae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025bd0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025bd2:	1430      	asrs	r0, r6, #16
 8025bd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025bd6:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8025bda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025bde:	1423      	asrs	r3, r4, #16
 8025be0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025be4:	fb01 3000 	mla	r0, r1, r0, r3
 8025be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025bea:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8025bee:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8025bf2:	8858      	ldrh	r0, [r3, #2]
 8025bf4:	f1be 0f00 	cmp.w	lr, #0
 8025bf8:	d00b      	beq.n	8025c12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8025bfa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025bfe:	3901      	subs	r1, #1
 8025c00:	0049      	lsls	r1, r1, #1
 8025c02:	3102      	adds	r1, #2
 8025c04:	eb03 0b01 	add.w	fp, r3, r1
 8025c08:	5a5b      	ldrh	r3, [r3, r1]
 8025c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8025c0c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8025c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8025c12:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8025c16:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025c1a:	fb12 f30e 	smulbb	r3, r2, lr
 8025c1e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025c22:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8025c26:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025c2a:	10db      	asrs	r3, r3, #3
 8025c2c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025c30:	ea41 010c 	orr.w	r1, r1, ip
 8025c34:	f1ce 0c10 	rsb	ip, lr, #16
 8025c38:	ea4b 0000 	orr.w	r0, fp, r0
 8025c3c:	9f08      	ldr	r7, [sp, #32]
 8025c3e:	ebac 0c02 	sub.w	ip, ip, r2
 8025c42:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025c46:	f108 38ff 	add.w	r8, r8, #4294967295
 8025c4a:	4350      	muls	r0, r2
 8025c4c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8025c50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025c52:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025c56:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025c58:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8025c5c:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8025c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025c62:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025c66:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025c6a:	0412      	lsls	r2, r2, #16
 8025c6c:	ea4b 0101 	orr.w	r1, fp, r1
 8025c70:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025c74:	fb03 c101 	mla	r1, r3, r1, ip
 8025c78:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8025c7c:	4302      	orrs	r2, r0
 8025c7e:	fb03 1202 	mla	r2, r3, r2, r1
 8025c82:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8025c86:	0952      	lsrs	r2, r2, #5
 8025c88:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8025c8c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8025c90:	f8b9 2000 	ldrh.w	r2, [r9]
 8025c94:	ea4b 0303 	orr.w	r3, fp, r3
 8025c98:	1211      	asrs	r1, r2, #8
 8025c9a:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8025c9e:	b29b      	uxth	r3, r3
 8025ca0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025ca4:	00d2      	lsls	r2, r2, #3
 8025ca6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8025caa:	fb11 f107 	smulbb	r1, r1, r7
 8025cae:	1218      	asrs	r0, r3, #8
 8025cb0:	fb1c fc07 	smulbb	ip, ip, r7
 8025cb4:	b2d2      	uxtb	r2, r2
 8025cb6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025cba:	fb12 f207 	smulbb	r2, r2, r7
 8025cbe:	fb00 100a 	mla	r0, r0, sl, r1
 8025cc2:	10d9      	asrs	r1, r3, #3
 8025cc4:	00db      	lsls	r3, r3, #3
 8025cc6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025cca:	b280      	uxth	r0, r0
 8025ccc:	b2db      	uxtb	r3, r3
 8025cce:	fb01 c10a 	mla	r1, r1, sl, ip
 8025cd2:	fb03 230a 	mla	r3, r3, sl, r2
 8025cd6:	1c42      	adds	r2, r0, #1
 8025cd8:	b289      	uxth	r1, r1
 8025cda:	b29b      	uxth	r3, r3
 8025cdc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025ce0:	f101 0c01 	add.w	ip, r1, #1
 8025ce4:	1c5a      	adds	r2, r3, #1
 8025ce6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025cea:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025cee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025cf2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025cf4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025cf8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025cfc:	441c      	add	r4, r3
 8025cfe:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025d02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025d04:	4310      	orrs	r0, r2
 8025d06:	441e      	add	r6, r3
 8025d08:	ea40 000c 	orr.w	r0, r0, ip
 8025d0c:	f829 0b02 	strh.w	r0, [r9], #2
 8025d10:	e6fa      	b.n	8025b08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025d12:	b013      	add	sp, #76	; 0x4c
 8025d14:	ecbd 8b08 	vpop	{d8-d11}
 8025d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025d1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8025d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d20:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8025d24:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8025d28:	fb06 5c03 	mla	ip, r6, r3, r5
 8025d2c:	2e00      	cmp	r6, #0
 8025d2e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8025d32:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8025d36:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8025d3a:	8808      	ldrh	r0, [r1, #0]
 8025d3c:	db2e      	blt.n	8025d9c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8025d3e:	45b0      	cmp	r8, r6
 8025d40:	dd2c      	ble.n	8025d9c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8025d42:	2d00      	cmp	r5, #0
 8025d44:	db28      	blt.n	8025d98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8025d46:	42ab      	cmp	r3, r5
 8025d48:	dd26      	ble.n	8025d98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8025d4a:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8025d4e:	1c6a      	adds	r2, r5, #1
 8025d50:	d427      	bmi.n	8025da2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8025d52:	4293      	cmp	r3, r2
 8025d54:	dd25      	ble.n	8025da2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8025d56:	b324      	cbz	r4, 8025da2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8025d58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8025d5c:	3601      	adds	r6, #1
 8025d5e:	d424      	bmi.n	8025daa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8025d60:	45b0      	cmp	r8, r6
 8025d62:	dd22      	ble.n	8025daa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8025d64:	b31f      	cbz	r7, 8025dae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8025d66:	2d00      	cmp	r5, #0
 8025d68:	db1d      	blt.n	8025da6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8025d6a:	42ab      	cmp	r3, r5
 8025d6c:	dd1b      	ble.n	8025da6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8025d6e:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8025d72:	3501      	adds	r5, #1
 8025d74:	d405      	bmi.n	8025d82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8025d76:	42ab      	cmp	r3, r5
 8025d78:	dd03      	ble.n	8025d82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8025d7a:	b124      	cbz	r4, 8025d86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8025d7c:	3301      	adds	r3, #1
 8025d7e:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8025d82:	2c0f      	cmp	r4, #15
 8025d84:	d801      	bhi.n	8025d8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025d86:	2f0f      	cmp	r7, #15
 8025d88:	d914      	bls.n	8025db4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8025d8a:	4b27      	ldr	r3, [pc, #156]	; (8025e28 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8025d8c:	f240 11ef 	movw	r1, #495	; 0x1ef
 8025d90:	4a26      	ldr	r2, [pc, #152]	; (8025e2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8025d92:	4827      	ldr	r0, [pc, #156]	; (8025e30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8025d94:	f002 fc78 	bl	8028688 <__assert_func>
 8025d98:	4684      	mov	ip, r0
 8025d9a:	e7d8      	b.n	8025d4e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8025d9c:	4602      	mov	r2, r0
 8025d9e:	4684      	mov	ip, r0
 8025da0:	e7dc      	b.n	8025d5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8025da2:	4602      	mov	r2, r0
 8025da4:	e7da      	b.n	8025d5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8025da6:	4606      	mov	r6, r0
 8025da8:	e7e3      	b.n	8025d72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8025daa:	4606      	mov	r6, r0
 8025dac:	e7e9      	b.n	8025d82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8025dae:	2c0f      	cmp	r4, #15
 8025db0:	d8eb      	bhi.n	8025d8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025db2:	4606      	mov	r6, r0
 8025db4:	fb14 f307 	smulbb	r3, r4, r7
 8025db8:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8025dbc:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8025dc0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025dc4:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8025dc8:	10db      	asrs	r3, r3, #3
 8025dca:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025dce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025dd2:	ea45 0c0c 	orr.w	ip, r5, ip
 8025dd6:	f1c7 0510 	rsb	r5, r7, #16
 8025dda:	ea4e 0202 	orr.w	r2, lr, r2
 8025dde:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8025de2:	1b2d      	subs	r5, r5, r4
 8025de4:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8025de8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8025dec:	4354      	muls	r4, r2
 8025dee:	fb05 450c 	mla	r5, r5, ip, r4
 8025df2:	0404      	lsls	r4, r0, #16
 8025df4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025df8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8025dfc:	4320      	orrs	r0, r4
 8025dfe:	fb03 5400 	mla	r4, r3, r0, r5
 8025e02:	0430      	lsls	r0, r6, #16
 8025e04:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8025e08:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025e0c:	4330      	orrs	r0, r6
 8025e0e:	fb07 4000 	mla	r0, r7, r0, r4
 8025e12:	0d43      	lsrs	r3, r0, #21
 8025e14:	0940      	lsrs	r0, r0, #5
 8025e16:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025e1a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025e1e:	4318      	orrs	r0, r3
 8025e20:	8008      	strh	r0, [r1, #0]
 8025e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e26:	bf00      	nop
 8025e28:	0802cea2 	.word	0x0802cea2
 8025e2c:	0802d50e 	.word	0x0802d50e
 8025e30:	0802cf8b 	.word	0x0802cf8b

08025e34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e38:	ed2d 8b08 	vpush	{d8-d11}
 8025e3c:	b08f      	sub	sp, #60	; 0x3c
 8025e3e:	461d      	mov	r5, r3
 8025e40:	eeb0 aa40 	vmov.f32	s20, s0
 8025e44:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025e46:	eef0 9a60 	vmov.f32	s19, s1
 8025e4a:	9107      	str	r1, [sp, #28]
 8025e4c:	eeb0 9a41 	vmov.f32	s18, s2
 8025e50:	6859      	ldr	r1, [r3, #4]
 8025e52:	eeb0 8a62 	vmov.f32	s16, s5
 8025e56:	920c      	str	r2, [sp, #48]	; 0x30
 8025e58:	eef0 8a43 	vmov.f32	s17, s6
 8025e5c:	681b      	ldr	r3, [r3, #0]
 8025e5e:	eef0 ba44 	vmov.f32	s23, s8
 8025e62:	eeb0 ba64 	vmov.f32	s22, s9
 8025e66:	900d      	str	r0, [sp, #52]	; 0x34
 8025e68:	eef0 aa45 	vmov.f32	s21, s10
 8025e6c:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8025e70:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8025e74:	fb01 2707 	mla	r7, r1, r7, r2
 8025e78:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8025e7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e7e:	f8d3 8000 	ldr.w	r8, [r3]
 8025e82:	9b07      	ldr	r3, [sp, #28]
 8025e84:	2b00      	cmp	r3, #0
 8025e86:	dc03      	bgt.n	8025e90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8025e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025e8a:	2b00      	cmp	r3, #0
 8025e8c:	f340 8182 	ble.w	8026194 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8025e90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025e96:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025e9a:	1e48      	subs	r0, r1, #1
 8025e9c:	f102 3cff 	add.w	ip, r2, #4294967295
 8025ea0:	2d00      	cmp	r5, #0
 8025ea2:	f340 809b 	ble.w	8025fdc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8025ea6:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025eaa:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025eae:	d406      	bmi.n	8025ebe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025eb0:	4586      	cmp	lr, r0
 8025eb2:	da04      	bge.n	8025ebe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025eb4:	2b00      	cmp	r3, #0
 8025eb6:	db02      	blt.n	8025ebe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025eb8:	4563      	cmp	r3, ip
 8025eba:	f2c0 8090 	blt.w	8025fde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025ebe:	f11e 0e01 	adds.w	lr, lr, #1
 8025ec2:	f100 8084 	bmi.w	8025fce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025ec6:	4571      	cmp	r1, lr
 8025ec8:	f2c0 8081 	blt.w	8025fce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025ecc:	3301      	adds	r3, #1
 8025ece:	d47e      	bmi.n	8025fce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025ed0:	429a      	cmp	r2, r3
 8025ed2:	db7c      	blt.n	8025fce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025ed4:	46aa      	mov	sl, r5
 8025ed6:	46b9      	mov	r9, r7
 8025ed8:	f1ba 0f00 	cmp.w	sl, #0
 8025edc:	f340 8099 	ble.w	8026012 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8025ee0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ee2:	1421      	asrs	r1, r4, #16
 8025ee4:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025ee8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025eec:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025ef0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025ef4:	f100 80d1 	bmi.w	802609a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8025ef8:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025efc:	4559      	cmp	r1, fp
 8025efe:	f280 80cc 	bge.w	802609a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8025f02:	2800      	cmp	r0, #0
 8025f04:	f2c0 80c9 	blt.w	802609a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8025f08:	f103 3bff 	add.w	fp, r3, #4294967295
 8025f0c:	4558      	cmp	r0, fp
 8025f0e:	f280 80c4 	bge.w	802609a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8025f12:	fa0f fe8e 	sxth.w	lr, lr
 8025f16:	fb00 110e 	mla	r1, r0, lr, r1
 8025f1a:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8025f1e:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8025f22:	8841      	ldrh	r1, [r0, #2]
 8025f24:	f1bc 0f00 	cmp.w	ip, #0
 8025f28:	d00b      	beq.n	8025f42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8025f2a:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8025f2e:	3b01      	subs	r3, #1
 8025f30:	005b      	lsls	r3, r3, #1
 8025f32:	3302      	adds	r3, #2
 8025f34:	eb00 0e03 	add.w	lr, r0, r3
 8025f38:	5ac3      	ldrh	r3, [r0, r3]
 8025f3a:	9308      	str	r3, [sp, #32]
 8025f3c:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8025f40:	9309      	str	r3, [sp, #36]	; 0x24
 8025f42:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8025f46:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025f4a:	fb12 f30c 	smulbb	r3, r2, ip
 8025f4e:	f1cc 0e10 	rsb	lr, ip, #16
 8025f52:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025f56:	10db      	asrs	r3, r3, #3
 8025f58:	ebae 0e02 	sub.w	lr, lr, r2
 8025f5c:	ea40 000b 	orr.w	r0, r0, fp
 8025f60:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025f64:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025f68:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025f6c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025f70:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8025f74:	ea4b 0101 	orr.w	r1, fp, r1
 8025f78:	4351      	muls	r1, r2
 8025f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025f7c:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025f80:	0410      	lsls	r0, r2, #16
 8025f82:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025f86:	9908      	ldr	r1, [sp, #32]
 8025f88:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025f8c:	4310      	orrs	r0, r2
 8025f8e:	9a08      	ldr	r2, [sp, #32]
 8025f90:	0412      	lsls	r2, r2, #16
 8025f92:	fb03 e000 	mla	r0, r3, r0, lr
 8025f96:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8025f9a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025f9e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025fa2:	ea42 020e 	orr.w	r2, r2, lr
 8025fa6:	fb03 0302 	mla	r3, r3, r2, r0
 8025faa:	0d5a      	lsrs	r2, r3, #21
 8025fac:	095b      	lsrs	r3, r3, #5
 8025fae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025fb2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025fb6:	4313      	orrs	r3, r2
 8025fb8:	f8a9 3000 	strh.w	r3, [r9]
 8025fbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025fbe:	f109 0902 	add.w	r9, r9, #2
 8025fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025fc6:	441c      	add	r4, r3
 8025fc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025fca:	441e      	add	r6, r3
 8025fcc:	e784      	b.n	8025ed8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8025fce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025fd0:	3d01      	subs	r5, #1
 8025fd2:	3702      	adds	r7, #2
 8025fd4:	441c      	add	r4, r3
 8025fd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025fd8:	441e      	add	r6, r3
 8025fda:	e761      	b.n	8025ea0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025fdc:	d01d      	beq.n	802601a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025fde:	1e6b      	subs	r3, r5, #1
 8025fe0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025fe2:	fb00 4003 	mla	r0, r0, r3, r4
 8025fe6:	1400      	asrs	r0, r0, #16
 8025fe8:	f53f af74 	bmi.w	8025ed4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025fec:	3901      	subs	r1, #1
 8025fee:	4288      	cmp	r0, r1
 8025ff0:	f6bf af70 	bge.w	8025ed4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025ff4:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025ff6:	fb01 6303 	mla	r3, r1, r3, r6
 8025ffa:	141b      	asrs	r3, r3, #16
 8025ffc:	f53f af6a 	bmi.w	8025ed4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026000:	3a01      	subs	r2, #1
 8026002:	4293      	cmp	r3, r2
 8026004:	f6bf af66 	bge.w	8025ed4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026008:	46a9      	mov	r9, r5
 802600a:	46ba      	mov	sl, r7
 802600c:	f1b9 0f00 	cmp.w	r9, #0
 8026010:	dc5b      	bgt.n	80260ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8026012:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026016:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802601a:	9b07      	ldr	r3, [sp, #28]
 802601c:	2b00      	cmp	r3, #0
 802601e:	f340 80b9 	ble.w	8026194 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8026022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026026:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026028:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802602c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026030:	eef0 6a48 	vmov.f32	s13, s16
 8026034:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026038:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802603c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026040:	ee16 4a90 	vmov	r4, s13
 8026044:	eef0 6a68 	vmov.f32	s13, s17
 8026048:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802604c:	ee16 6a90 	vmov	r6, s13
 8026050:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026054:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026058:	ee37 8a48 	vsub.f32	s16, s14, s16
 802605c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026060:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026064:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026068:	ee18 2a10 	vmov	r2, s16
 802606c:	eeb0 8a47 	vmov.f32	s16, s14
 8026070:	fb92 f3f3 	sdiv	r3, r2, r3
 8026074:	ee18 2a90 	vmov	r2, s17
 8026078:	9323      	str	r3, [sp, #140]	; 0x8c
 802607a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802607c:	eef0 8a67 	vmov.f32	s17, s15
 8026080:	fb92 f3f3 	sdiv	r3, r2, r3
 8026084:	9324      	str	r3, [sp, #144]	; 0x90
 8026086:	9b07      	ldr	r3, [sp, #28]
 8026088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802608a:	3b01      	subs	r3, #1
 802608c:	9307      	str	r3, [sp, #28]
 802608e:	bf08      	it	eq
 8026090:	4615      	moveq	r5, r2
 8026092:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026094:	bf18      	it	ne
 8026096:	461d      	movne	r5, r3
 8026098:	e6f3      	b.n	8025e82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802609a:	f111 0b01 	adds.w	fp, r1, #1
 802609e:	d48d      	bmi.n	8025fbc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80260a0:	45de      	cmp	lr, fp
 80260a2:	db8b      	blt.n	8025fbc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80260a4:	f110 0b01 	adds.w	fp, r0, #1
 80260a8:	d488      	bmi.n	8025fbc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80260aa:	455b      	cmp	r3, fp
 80260ac:	db86      	blt.n	8025fbc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80260ae:	b21b      	sxth	r3, r3
 80260b0:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80260b4:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80260b8:	9300      	str	r3, [sp, #0]
 80260ba:	4642      	mov	r2, r8
 80260bc:	fa0f f38e 	sxth.w	r3, lr
 80260c0:	4649      	mov	r1, r9
 80260c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80260c4:	f7ff fe2a 	bl	8025d1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80260c8:	e778      	b.n	8025fbc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80260ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80260cc:	1420      	asrs	r0, r4, #16
 80260ce:	1431      	asrs	r1, r6, #16
 80260d0:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80260d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80260d8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80260dc:	fb03 0101 	mla	r1, r3, r1, r0
 80260e0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80260e4:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80260e8:	8841      	ldrh	r1, [r0, #2]
 80260ea:	f1be 0f00 	cmp.w	lr, #0
 80260ee:	d00b      	beq.n	8026108 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80260f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80260f4:	3b01      	subs	r3, #1
 80260f6:	005b      	lsls	r3, r3, #1
 80260f8:	3302      	adds	r3, #2
 80260fa:	eb00 0b03 	add.w	fp, r0, r3
 80260fe:	5ac3      	ldrh	r3, [r0, r3]
 8026100:	930a      	str	r3, [sp, #40]	; 0x28
 8026102:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026106:	930b      	str	r3, [sp, #44]	; 0x2c
 8026108:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802610c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026110:	fb12 f30e 	smulbb	r3, r2, lr
 8026114:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026118:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802611c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026120:	10db      	asrs	r3, r3, #3
 8026122:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026126:	ea40 000c 	orr.w	r0, r0, ip
 802612a:	f1ce 0c10 	rsb	ip, lr, #16
 802612e:	ea4b 0101 	orr.w	r1, fp, r1
 8026132:	f109 39ff 	add.w	r9, r9, #4294967295
 8026136:	ebac 0c02 	sub.w	ip, ip, r2
 802613a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802613e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026142:	4351      	muls	r1, r2
 8026144:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026146:	fb0c 1c00 	mla	ip, ip, r0, r1
 802614a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802614c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026150:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8026154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026156:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802615a:	0412      	lsls	r2, r2, #16
 802615c:	ea4b 0000 	orr.w	r0, fp, r0
 8026160:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8026164:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026168:	fb03 c000 	mla	r0, r3, r0, ip
 802616c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026170:	ea42 0b0b 	orr.w	fp, r2, fp
 8026174:	fb03 000b 	mla	r0, r3, fp, r0
 8026178:	0d43      	lsrs	r3, r0, #21
 802617a:	0940      	lsrs	r0, r0, #5
 802617c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026180:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026184:	4318      	orrs	r0, r3
 8026186:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026188:	441c      	add	r4, r3
 802618a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802618c:	f82a 0b02 	strh.w	r0, [sl], #2
 8026190:	441e      	add	r6, r3
 8026192:	e73b      	b.n	802600c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8026194:	b00f      	add	sp, #60	; 0x3c
 8026196:	ecbd 8b08 	vpop	{d8-d11}
 802619a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080261a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80261a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261a4:	880e      	ldrh	r6, [r1, #0]
 80261a6:	b085      	sub	sp, #20
 80261a8:	4690      	mov	r8, r2
 80261aa:	ea4f 2c26 	mov.w	ip, r6, asr #8
 80261ae:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80261b2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80261b6:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 80261ba:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 80261be:	00f6      	lsls	r6, r6, #3
 80261c0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80261c4:	9200      	str	r2, [sp, #0]
 80261c6:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 80261ca:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 80261ce:	9201      	str	r2, [sp, #4]
 80261d0:	b2f2      	uxtb	r2, r6
 80261d2:	2c00      	cmp	r4, #0
 80261d4:	fb04 5603 	mla	r6, r4, r3, r5
 80261d8:	9202      	str	r2, [sp, #8]
 80261da:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 80261de:	db36      	blt.n	802624e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 80261e0:	45a6      	cmp	lr, r4
 80261e2:	dd34      	ble.n	802624e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 80261e4:	2d00      	cmp	r5, #0
 80261e6:	db30      	blt.n	802624a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 80261e8:	42ab      	cmp	r3, r5
 80261ea:	dd2e      	ble.n	802624a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 80261ec:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 80261f0:	1c6e      	adds	r6, r5, #1
 80261f2:	d42f      	bmi.n	8026254 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 80261f4:	42b3      	cmp	r3, r6
 80261f6:	dd2d      	ble.n	8026254 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 80261f8:	b370      	cbz	r0, 8026258 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 80261fa:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80261fe:	3401      	adds	r4, #1
 8026200:	d42e      	bmi.n	8026260 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8026202:	45a6      	cmp	lr, r4
 8026204:	dd2c      	ble.n	8026260 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8026206:	b377      	cbz	r7, 8026266 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 8026208:	2d00      	cmp	r5, #0
 802620a:	db27      	blt.n	802625c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 802620c:	42ab      	cmp	r3, r5
 802620e:	dd25      	ble.n	802625c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8026210:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026214:	3501      	adds	r5, #1
 8026216:	d429      	bmi.n	802626c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8026218:	42ab      	cmp	r3, r5
 802621a:	dd27      	ble.n	802626c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 802621c:	b340      	cbz	r0, 8026270 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 802621e:	3301      	adds	r3, #1
 8026220:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8026224:	280f      	cmp	r0, #15
 8026226:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802622a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802622e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026232:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026236:	d801      	bhi.n	802623c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8026238:	2f0f      	cmp	r7, #15
 802623a:	d91b      	bls.n	8026274 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 802623c:	4b85      	ldr	r3, [pc, #532]	; (8026454 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 802623e:	f240 210d 	movw	r1, #525	; 0x20d
 8026242:	4a85      	ldr	r2, [pc, #532]	; (8026458 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8026244:	4885      	ldr	r0, [pc, #532]	; (802645c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8026246:	f002 fa1f 	bl	8028688 <__assert_func>
 802624a:	2200      	movs	r2, #0
 802624c:	e7d0      	b.n	80261f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 802624e:	2600      	movs	r6, #0
 8026250:	4632      	mov	r2, r6
 8026252:	e7d4      	b.n	80261fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8026254:	2600      	movs	r6, #0
 8026256:	e7d2      	b.n	80261fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8026258:	4606      	mov	r6, r0
 802625a:	e7d0      	b.n	80261fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 802625c:	2400      	movs	r4, #0
 802625e:	e7d9      	b.n	8026214 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8026260:	2300      	movs	r3, #0
 8026262:	461c      	mov	r4, r3
 8026264:	e7de      	b.n	8026224 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026266:	463b      	mov	r3, r7
 8026268:	463c      	mov	r4, r7
 802626a:	e7db      	b.n	8026224 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 802626c:	2300      	movs	r3, #0
 802626e:	e7d9      	b.n	8026224 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026270:	4603      	mov	r3, r0
 8026272:	e7d7      	b.n	8026224 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026274:	b280      	uxth	r0, r0
 8026276:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802627a:	b2bf      	uxth	r7, r7
 802627c:	fb00 fe07 	mul.w	lr, r0, r7
 8026280:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8026284:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026288:	eba0 0c0e 	sub.w	ip, r0, lr
 802628c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8026290:	b2bf      	uxth	r7, r7
 8026292:	fa1f fc8c 	uxth.w	ip, ip
 8026296:	eba5 0507 	sub.w	r5, r5, r7
 802629a:	fb0c f00a 	mul.w	r0, ip, sl
 802629e:	b2ad      	uxth	r5, r5
 80262a0:	fb05 000b 	mla	r0, r5, fp, r0
 80262a4:	fb07 0009 	mla	r0, r7, r9, r0
 80262a8:	fb0e 0008 	mla	r0, lr, r8, r0
 80262ac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80262b0:	9003      	str	r0, [sp, #12]
 80262b2:	d018      	beq.n	80262e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x146>
 80262b4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80262b8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80262bc:	fb0b f000 	mul.w	r0, fp, r0
 80262c0:	fb0b fb02 	mul.w	fp, fp, r2
 80262c4:	0a02      	lsrs	r2, r0, #8
 80262c6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80262ca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80262ce:	4402      	add	r2, r0
 80262d0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80262d4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80262d8:	0a12      	lsrs	r2, r2, #8
 80262da:	0a00      	lsrs	r0, r0, #8
 80262dc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80262e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80262e4:	4302      	orrs	r2, r0
 80262e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80262ea:	d019      	beq.n	8026320 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x180>
 80262ec:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80262f0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80262f4:	fb0a fb0b 	mul.w	fp, sl, fp
 80262f8:	fb0a fa06 	mul.w	sl, sl, r6
 80262fc:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026300:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026304:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026308:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802630c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026310:	445e      	add	r6, fp
 8026312:	0a00      	lsrs	r0, r0, #8
 8026314:	0a36      	lsrs	r6, r6, #8
 8026316:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802631a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802631e:	4306      	orrs	r6, r0
 8026320:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026324:	d019      	beq.n	802635a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1ba>
 8026326:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802632a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802632e:	fb09 fa0a 	mul.w	sl, r9, sl
 8026332:	fb09 f904 	mul.w	r9, r9, r4
 8026336:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802633a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802633e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026342:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026346:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 802634a:	4454      	add	r4, sl
 802634c:	0a00      	lsrs	r0, r0, #8
 802634e:	0a24      	lsrs	r4, r4, #8
 8026350:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026354:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026358:	4304      	orrs	r4, r0
 802635a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802635e:	d019      	beq.n	8026394 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f4>
 8026360:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8026364:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026368:	fb08 f909 	mul.w	r9, r8, r9
 802636c:	fb08 f803 	mul.w	r8, r8, r3
 8026370:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8026374:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026378:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802637c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026380:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026384:	444b      	add	r3, r9
 8026386:	0a00      	lsrs	r0, r0, #8
 8026388:	0a1b      	lsrs	r3, r3, #8
 802638a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802638e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026392:	4303      	orrs	r3, r0
 8026394:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026398:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802639c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80263a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80263a4:	fb0c f808 	mul.w	r8, ip, r8
 80263a8:	fb0c f606 	mul.w	r6, ip, r6
 80263ac:	fb05 8800 	mla	r8, r5, r0, r8
 80263b0:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80263b4:	fb05 6202 	mla	r2, r5, r2, r6
 80263b8:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 80263bc:	fb07 8800 	mla	r8, r7, r0, r8
 80263c0:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80263c4:	b2ad      	uxth	r5, r5
 80263c6:	fb0e 8000 	mla	r0, lr, r0, r8
 80263ca:	0a00      	lsrs	r0, r0, #8
 80263cc:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80263d0:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80263d4:	9c00      	ldr	r4, [sp, #0]
 80263d6:	fb07 2700 	mla	r7, r7, r0, r2
 80263da:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80263de:	9b03      	ldr	r3, [sp, #12]
 80263e0:	fb0e 7000 	mla	r0, lr, r0, r7
 80263e4:	436b      	muls	r3, r5
 80263e6:	0a00      	lsrs	r0, r0, #8
 80263e8:	1c5a      	adds	r2, r3, #1
 80263ea:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80263ee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80263f2:	ea48 0000 	orr.w	r0, r8, r0
 80263f6:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80263fa:	0c03      	lsrs	r3, r0, #16
 80263fc:	b2d2      	uxtb	r2, r2
 80263fe:	fb14 f602 	smulbb	r6, r4, r2
 8026402:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8026406:	b2c0      	uxtb	r0, r0
 8026408:	fb03 6305 	mla	r3, r3, r5, r6
 802640c:	b29e      	uxth	r6, r3
 802640e:	9b01      	ldr	r3, [sp, #4]
 8026410:	fb13 f302 	smulbb	r3, r3, r2
 8026414:	fb04 3405 	mla	r4, r4, r5, r3
 8026418:	9b02      	ldr	r3, [sp, #8]
 802641a:	fb13 f202 	smulbb	r2, r3, r2
 802641e:	b2a4      	uxth	r4, r4
 8026420:	1c73      	adds	r3, r6, #1
 8026422:	fb00 2005 	mla	r0, r0, r5, r2
 8026426:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802642a:	b280      	uxth	r0, r0
 802642c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026430:	1c42      	adds	r2, r0, #1
 8026432:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026436:	1c62      	adds	r2, r4, #1
 8026438:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802643c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8026440:	0952      	lsrs	r2, r2, #5
 8026442:	4303      	orrs	r3, r0
 8026444:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026448:	4313      	orrs	r3, r2
 802644a:	800b      	strh	r3, [r1, #0]
 802644c:	b005      	add	sp, #20
 802644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026452:	bf00      	nop
 8026454:	0802cea2 	.word	0x0802cea2
 8026458:	0802d465 	.word	0x0802d465
 802645c:	0802cf8b 	.word	0x0802cf8b

08026460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026464:	ed2d 8b08 	vpush	{d8-d11}
 8026468:	b09d      	sub	sp, #116	; 0x74
 802646a:	eeb0 aa40 	vmov.f32	s20, s0
 802646e:	eef0 9a60 	vmov.f32	s19, s1
 8026472:	9219      	str	r2, [sp, #100]	; 0x64
 8026474:	eeb0 9a41 	vmov.f32	s18, s2
 8026478:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802647a:	eeb0 8a62 	vmov.f32	s16, s5
 802647e:	9307      	str	r3, [sp, #28]
 8026480:	eef0 8a43 	vmov.f32	s17, s6
 8026484:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8026488:	eef0 ba44 	vmov.f32	s23, s8
 802648c:	901b      	str	r0, [sp, #108]	; 0x6c
 802648e:	eeb0 ba64 	vmov.f32	s22, s9
 8026492:	931a      	str	r3, [sp, #104]	; 0x68
 8026494:	eef0 aa45 	vmov.f32	s21, s10
 8026498:	6850      	ldr	r0, [r2, #4]
 802649a:	9117      	str	r1, [sp, #92]	; 0x5c
 802649c:	6812      	ldr	r2, [r2, #0]
 802649e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 80264a2:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 80264a6:	fb00 1303 	mla	r3, r0, r3, r1
 80264aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80264ae:	930a      	str	r3, [sp, #40]	; 0x28
 80264b0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80264b2:	681b      	ldr	r3, [r3, #0]
 80264b4:	9310      	str	r3, [sp, #64]	; 0x40
 80264b6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80264ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80264bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80264be:	2b00      	cmp	r3, #0
 80264c0:	dc03      	bgt.n	80264ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80264c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80264c4:	2b00      	cmp	r3, #0
 80264c6:	f340 837b 	ble.w	8026bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80264ca:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80264cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80264d0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80264d4:	1e48      	subs	r0, r1, #1
 80264d6:	1e57      	subs	r7, r2, #1
 80264d8:	9b07      	ldr	r3, [sp, #28]
 80264da:	2b00      	cmp	r3, #0
 80264dc:	f340 8194 	ble.w	8026808 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80264e0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80264e4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80264e8:	d406      	bmi.n	80264f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80264ea:	4584      	cmp	ip, r0
 80264ec:	da04      	bge.n	80264f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80264ee:	2b00      	cmp	r3, #0
 80264f0:	db02      	blt.n	80264f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80264f2:	42bb      	cmp	r3, r7
 80264f4:	f2c0 8189 	blt.w	802680a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80264f8:	f11c 0c01 	adds.w	ip, ip, #1
 80264fc:	f100 8179 	bmi.w	80267f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026500:	4561      	cmp	r1, ip
 8026502:	f2c0 8176 	blt.w	80267f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026506:	3301      	adds	r3, #1
 8026508:	f100 8173 	bmi.w	80267f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802650c:	429a      	cmp	r2, r3
 802650e:	f2c0 8170 	blt.w	80267f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026512:	9b07      	ldr	r3, [sp, #28]
 8026514:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026516:	9318      	str	r3, [sp, #96]	; 0x60
 8026518:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802651a:	2b00      	cmp	r3, #0
 802651c:	f340 8192 	ble.w	8026844 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8026520:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8026522:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026526:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026528:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802652c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026530:	1422      	asrs	r2, r4, #16
 8026532:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026536:	689b      	ldr	r3, [r3, #8]
 8026538:	f100 81d3 	bmi.w	80268e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802653c:	f103 38ff 	add.w	r8, r3, #4294967295
 8026540:	4542      	cmp	r2, r8
 8026542:	f280 81ce 	bge.w	80268e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8026546:	f1bc 0f00 	cmp.w	ip, #0
 802654a:	f2c0 81ca 	blt.w	80268e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802654e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026552:	45c4      	cmp	ip, r8
 8026554:	f280 81c5 	bge.w	80268e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8026558:	b21b      	sxth	r3, r3
 802655a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802655c:	fb0c 2203 	mla	r2, ip, r3, r2
 8026560:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8026564:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026568:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802656c:	2800      	cmp	r0, #0
 802656e:	f000 81af 	beq.w	80268d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8026572:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026576:	950c      	str	r5, [sp, #48]	; 0x30
 8026578:	0e2d      	lsrs	r5, r5, #24
 802657a:	9513      	str	r5, [sp, #76]	; 0x4c
 802657c:	b181      	cbz	r1, 80265a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802657e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026582:	3b01      	subs	r3, #1
 8026584:	009b      	lsls	r3, r3, #2
 8026586:	3304      	adds	r3, #4
 8026588:	eb08 0c03 	add.w	ip, r8, r3
 802658c:	f858 3003 	ldr.w	r3, [r8, r3]
 8026590:	9308      	str	r3, [sp, #32]
 8026592:	0e1b      	lsrs	r3, r3, #24
 8026594:	9311      	str	r3, [sp, #68]	; 0x44
 8026596:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802659a:	930d      	str	r3, [sp, #52]	; 0x34
 802659c:	0e1b      	lsrs	r3, r3, #24
 802659e:	9314      	str	r3, [sp, #80]	; 0x50
 80265a0:	b280      	uxth	r0, r0
 80265a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80265a4:	b289      	uxth	r1, r1
 80265a6:	fb00 f901 	mul.w	r9, r0, r1
 80265aa:	0100      	lsls	r0, r0, #4
 80265ac:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80265b0:	eba0 0809 	sub.w	r8, r0, r9
 80265b4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80265b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80265ba:	b289      	uxth	r1, r1
 80265bc:	fa1f f888 	uxth.w	r8, r8
 80265c0:	1a5b      	subs	r3, r3, r1
 80265c2:	fb08 f000 	mul.w	r0, r8, r0
 80265c6:	b29b      	uxth	r3, r3
 80265c8:	fb03 000e 	mla	r0, r3, lr, r0
 80265cc:	fb01 0005 	mla	r0, r1, r5, r0
 80265d0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80265d2:	fb09 0005 	mla	r0, r9, r5, r0
 80265d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80265da:	2800      	cmp	r0, #0
 80265dc:	f000 8100 	beq.w	80267e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80265e0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80265e4:	d01b      	beq.n	802661e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80265e6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80265ea:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80265ee:	fb0e fa0a 	mul.w	sl, lr, sl
 80265f2:	fb0e fe02 	mul.w	lr, lr, r2
 80265f6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80265fa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80265fe:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026602:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026606:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802660a:	4452      	add	r2, sl
 802660c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026610:	0a12      	lsrs	r2, r2, #8
 8026612:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026616:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802661a:	ea42 020c 	orr.w	r2, r2, ip
 802661e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026620:	2dff      	cmp	r5, #255	; 0xff
 8026622:	d021      	beq.n	8026668 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8026624:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026626:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802662a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802662c:	fb05 fb0b 	mul.w	fp, r5, fp
 8026630:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026632:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026636:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026638:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802663c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026640:	fb05 fa0a 	mul.w	sl, r5, sl
 8026644:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026648:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802664c:	44de      	add	lr, fp
 802664e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026652:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026656:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802665a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802665e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026662:	ea4e 050a 	orr.w	r5, lr, sl
 8026666:	950c      	str	r5, [sp, #48]	; 0x30
 8026668:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802666a:	2dff      	cmp	r5, #255	; 0xff
 802666c:	d021      	beq.n	80266b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802666e:	9d08      	ldr	r5, [sp, #32]
 8026670:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026674:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026676:	fb05 fb0b 	mul.w	fp, r5, fp
 802667a:	9d08      	ldr	r5, [sp, #32]
 802667c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026680:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026682:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026686:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802668a:	fb05 fa0a 	mul.w	sl, r5, sl
 802668e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026692:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026696:	44de      	add	lr, fp
 8026698:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802669c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80266a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80266ac:	ea4e 050a 	orr.w	r5, lr, sl
 80266b0:	9508      	str	r5, [sp, #32]
 80266b2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80266b4:	2dff      	cmp	r5, #255	; 0xff
 80266b6:	d021      	beq.n	80266fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80266b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80266ba:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80266be:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80266c0:	fb05 fb0b 	mul.w	fp, r5, fp
 80266c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80266c6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80266ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80266cc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80266d0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80266d4:	fb05 fa0a 	mul.w	sl, r5, sl
 80266d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80266e0:	44de      	add	lr, fp
 80266e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80266e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80266ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80266f6:	ea4e 050a 	orr.w	r5, lr, sl
 80266fa:	950d      	str	r5, [sp, #52]	; 0x34
 80266fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80266fe:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026702:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026706:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802670a:	9d08      	ldr	r5, [sp, #32]
 802670c:	fb08 fc0c 	mul.w	ip, r8, ip
 8026710:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026714:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026718:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802671a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802671e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026724:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026728:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802672c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802672e:	fb08 f80e 	mul.w	r8, r8, lr
 8026732:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026736:	f8b7 e000 	ldrh.w	lr, [r7]
 802673a:	fb03 8202 	mla	r2, r3, r2, r8
 802673e:	9b08      	ldr	r3, [sp, #32]
 8026740:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026744:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8026748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802674a:	fb01 220a 	mla	r2, r1, sl, r2
 802674e:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8026752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026754:	fb09 2901 	mla	r9, r9, r1, r2
 8026758:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802675a:	4343      	muls	r3, r0
 802675c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026760:	1c58      	adds	r0, r3, #1
 8026762:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026766:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802676a:	ea4c 0c09 	orr.w	ip, ip, r9
 802676e:	ea4f 232e 	mov.w	r3, lr, asr #8
 8026772:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026776:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802677a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802677e:	b2c0      	uxtb	r0, r0
 8026780:	fb11 f102 	smulbb	r1, r1, r2
 8026784:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8026788:	fb03 1300 	mla	r3, r3, r0, r1
 802678c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026790:	b299      	uxth	r1, r3
 8026792:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8026796:	fa5f fc8c 	uxtb.w	ip, ip
 802679a:	fb13 f305 	smulbb	r3, r3, r5
 802679e:	fb1c fc05 	smulbb	ip, ip, r5
 80267a2:	fb02 3200 	mla	r2, r2, r0, r3
 80267a6:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80267aa:	b2db      	uxtb	r3, r3
 80267ac:	b292      	uxth	r2, r2
 80267ae:	fb03 cc00 	mla	ip, r3, r0, ip
 80267b2:	1c4b      	adds	r3, r1, #1
 80267b4:	fa1f fc8c 	uxth.w	ip, ip
 80267b8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80267bc:	1c51      	adds	r1, r2, #1
 80267be:	f10c 0001 	add.w	r0, ip, #1
 80267c2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80267c6:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80267ca:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 80267ce:	0952      	lsrs	r2, r2, #5
 80267d0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80267d4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80267d8:	ea43 030c 	orr.w	r3, r3, ip
 80267dc:	4313      	orrs	r3, r2
 80267de:	803b      	strh	r3, [r7, #0]
 80267e0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80267e2:	3702      	adds	r7, #2
 80267e4:	441c      	add	r4, r3
 80267e6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80267e8:	441e      	add	r6, r3
 80267ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80267ec:	3b01      	subs	r3, #1
 80267ee:	9318      	str	r3, [sp, #96]	; 0x60
 80267f0:	e692      	b.n	8026518 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80267f2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80267f4:	441c      	add	r4, r3
 80267f6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80267f8:	441e      	add	r6, r3
 80267fa:	9b07      	ldr	r3, [sp, #28]
 80267fc:	3b01      	subs	r3, #1
 80267fe:	9307      	str	r3, [sp, #28]
 8026800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026802:	3302      	adds	r3, #2
 8026804:	930a      	str	r3, [sp, #40]	; 0x28
 8026806:	e667      	b.n	80264d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026808:	d023      	beq.n	8026852 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802680a:	9b07      	ldr	r3, [sp, #28]
 802680c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802680e:	3b01      	subs	r3, #1
 8026810:	fb00 4003 	mla	r0, r0, r3, r4
 8026814:	1400      	asrs	r0, r0, #16
 8026816:	f53f ae7c 	bmi.w	8026512 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802681a:	3901      	subs	r1, #1
 802681c:	4288      	cmp	r0, r1
 802681e:	f6bf ae78 	bge.w	8026512 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026822:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8026824:	fb01 6303 	mla	r3, r1, r3, r6
 8026828:	141b      	asrs	r3, r3, #16
 802682a:	f53f ae72 	bmi.w	8026512 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802682e:	3a01      	subs	r2, #1
 8026830:	4293      	cmp	r3, r2
 8026832:	f6bf ae6e 	bge.w	8026512 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026836:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802683a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802683e:	f1bb 0f00 	cmp.w	fp, #0
 8026842:	dc6c      	bgt.n	802691e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 8026844:	9b07      	ldr	r3, [sp, #28]
 8026846:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802684a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802684c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026850:	930a      	str	r3, [sp, #40]	; 0x28
 8026852:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026854:	2b00      	cmp	r3, #0
 8026856:	f340 81b3 	ble.w	8026bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 802685a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802685e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026860:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026864:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026868:	eef0 6a48 	vmov.f32	s13, s16
 802686c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026870:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026874:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026878:	ee16 4a90 	vmov	r4, s13
 802687c:	eef0 6a68 	vmov.f32	s13, s17
 8026880:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026884:	ee16 6a90 	vmov	r6, s13
 8026888:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802688c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026890:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026894:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026898:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802689c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80268a0:	ee18 2a10 	vmov	r2, s16
 80268a4:	eeb0 8a47 	vmov.f32	s16, s14
 80268a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80268ac:	ee18 2a90 	vmov	r2, s17
 80268b0:	9331      	str	r3, [sp, #196]	; 0xc4
 80268b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80268b4:	eef0 8a67 	vmov.f32	s17, s15
 80268b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80268bc:	9332      	str	r3, [sp, #200]	; 0xc8
 80268be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80268c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80268c2:	3b01      	subs	r3, #1
 80268c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80268c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80268c8:	bf08      	it	eq
 80268ca:	4613      	moveq	r3, r2
 80268cc:	9307      	str	r3, [sp, #28]
 80268ce:	e5f5      	b.n	80264bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80268d0:	2900      	cmp	r1, #0
 80268d2:	f43f ae65 	beq.w	80265a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80268d6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80268da:	9308      	str	r3, [sp, #32]
 80268dc:	0e1b      	lsrs	r3, r3, #24
 80268de:	9311      	str	r3, [sp, #68]	; 0x44
 80268e0:	e65e      	b.n	80265a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80268e2:	f112 0801 	adds.w	r8, r2, #1
 80268e6:	f53f af7b 	bmi.w	80267e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80268ea:	4543      	cmp	r3, r8
 80268ec:	f6ff af78 	blt.w	80267e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80268f0:	f11c 0801 	adds.w	r8, ip, #1
 80268f4:	f53f af74 	bmi.w	80267e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80268f8:	45c6      	cmp	lr, r8
 80268fa:	f6ff af71 	blt.w	80267e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80268fe:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8026900:	b21b      	sxth	r3, r3
 8026902:	9201      	str	r2, [sp, #4]
 8026904:	fa0f f28e 	sxth.w	r2, lr
 8026908:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802690c:	e9cd c002 	strd	ip, r0, [sp, #8]
 8026910:	9200      	str	r2, [sp, #0]
 8026912:	4639      	mov	r1, r7
 8026914:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026916:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026918:	f7ff fc42 	bl	80261a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802691c:	e760      	b.n	80267e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802691e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026920:	1427      	asrs	r7, r4, #16
 8026922:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026924:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026928:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802692c:	1433      	asrs	r3, r6, #16
 802692e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026932:	fb01 7303 	mla	r3, r1, r3, r7
 8026936:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802693a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802693e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026942:	2a00      	cmp	r2, #0
 8026944:	f000 8133 	beq.w	8026bae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
 8026948:	687d      	ldr	r5, [r7, #4]
 802694a:	950e      	str	r5, [sp, #56]	; 0x38
 802694c:	0e2d      	lsrs	r5, r5, #24
 802694e:	9515      	str	r5, [sp, #84]	; 0x54
 8026950:	b178      	cbz	r0, 8026972 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8026952:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8026956:	3901      	subs	r1, #1
 8026958:	0089      	lsls	r1, r1, #2
 802695a:	3104      	adds	r1, #4
 802695c:	eb07 0e01 	add.w	lr, r7, r1
 8026960:	5879      	ldr	r1, [r7, r1]
 8026962:	9109      	str	r1, [sp, #36]	; 0x24
 8026964:	0e09      	lsrs	r1, r1, #24
 8026966:	9112      	str	r1, [sp, #72]	; 0x48
 8026968:	f8de 1004 	ldr.w	r1, [lr, #4]
 802696c:	910f      	str	r1, [sp, #60]	; 0x3c
 802696e:	0e09      	lsrs	r1, r1, #24
 8026970:	9116      	str	r1, [sp, #88]	; 0x58
 8026972:	b292      	uxth	r2, r2
 8026974:	9915      	ldr	r1, [sp, #84]	; 0x54
 8026976:	b280      	uxth	r0, r0
 8026978:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802697a:	fb02 f800 	mul.w	r8, r2, r0
 802697e:	0112      	lsls	r2, r2, #4
 8026980:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026984:	eba2 0e08 	sub.w	lr, r2, r8
 8026988:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802698c:	b280      	uxth	r0, r0
 802698e:	fa1f fe8e 	uxth.w	lr, lr
 8026992:	1a12      	subs	r2, r2, r0
 8026994:	fb0e f101 	mul.w	r1, lr, r1
 8026998:	b292      	uxth	r2, r2
 802699a:	fb02 110c 	mla	r1, r2, ip, r1
 802699e:	fb00 1105 	mla	r1, r0, r5, r1
 80269a2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80269a4:	fb08 1105 	mla	r1, r8, r5, r1
 80269a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80269ac:	2900      	cmp	r1, #0
 80269ae:	f000 80f5 	beq.w	8026b9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80269b2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80269b6:	d019      	beq.n	80269ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 80269b8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80269bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80269c0:	fb0c fa0a 	mul.w	sl, ip, sl
 80269c4:	fb0c fc03 	mul.w	ip, ip, r3
 80269c8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80269cc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80269d0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80269d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80269d8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80269dc:	4453      	add	r3, sl
 80269de:	0a3f      	lsrs	r7, r7, #8
 80269e0:	0a1b      	lsrs	r3, r3, #8
 80269e2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80269e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80269ea:	433b      	orrs	r3, r7
 80269ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80269ee:	2dff      	cmp	r5, #255	; 0xff
 80269f0:	d020      	beq.n	8026a34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 80269f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80269f4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80269f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80269fa:	436f      	muls	r7, r5
 80269fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80269fe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a02:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026a06:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026a08:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026a0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a10:	fb05 fa0a 	mul.w	sl, r5, sl
 8026a14:	44bc      	add	ip, r7
 8026a16:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026a1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a1e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026a22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026a2e:	ea4c 050a 	orr.w	r5, ip, sl
 8026a32:	950e      	str	r5, [sp, #56]	; 0x38
 8026a34:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026a36:	2dff      	cmp	r5, #255	; 0xff
 8026a38:	d020      	beq.n	8026a7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8026a3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026a3c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8026a40:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026a42:	436f      	muls	r7, r5
 8026a44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026a46:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a4a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026a4e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026a50:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026a54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a58:	fb05 fa0a 	mul.w	sl, r5, sl
 8026a5c:	44bc      	add	ip, r7
 8026a5e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026a62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a66:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026a6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a72:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026a76:	ea4c 050a 	orr.w	r5, ip, sl
 8026a7a:	9509      	str	r5, [sp, #36]	; 0x24
 8026a7c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8026a7e:	2dff      	cmp	r5, #255	; 0xff
 8026a80:	d020      	beq.n	8026ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 8026a82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026a84:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8026a88:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8026a8a:	436f      	muls	r7, r5
 8026a8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026a8e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a92:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026a96:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8026a98:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026a9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026aa0:	fb05 fa0a 	mul.w	sl, r5, sl
 8026aa4:	44bc      	add	ip, r7
 8026aa6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026aaa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026aae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026ab2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ab6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026aba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026abe:	ea4c 050a 	orr.w	r5, ip, sl
 8026ac2:	950f      	str	r5, [sp, #60]	; 0x3c
 8026ac4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026ac6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026aca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026ace:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8026ad2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026ad4:	fb0e f707 	mul.w	r7, lr, r7
 8026ad8:	fb02 770c 	mla	r7, r2, ip, r7
 8026adc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026ae0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026ae2:	fb00 770c 	mla	r7, r0, ip, r7
 8026ae6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026aea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026aec:	fb08 770c 	mla	r7, r8, ip, r7
 8026af0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8026af4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026af6:	fb0e fe0c 	mul.w	lr, lr, ip
 8026afa:	0a3f      	lsrs	r7, r7, #8
 8026afc:	fb02 e303 	mla	r3, r2, r3, lr
 8026b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026b02:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026b06:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026b0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026b0c:	fb00 330a 	mla	r3, r0, sl, r3
 8026b10:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026b14:	f8b9 0000 	ldrh.w	r0, [r9]
 8026b18:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026b1e:	1202      	asrs	r2, r0, #8
 8026b20:	4359      	muls	r1, r3
 8026b22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b26:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026b2a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026b2e:	1c4b      	adds	r3, r1, #1
 8026b30:	ea47 070c 	orr.w	r7, r7, ip
 8026b34:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026b38:	0c3b      	lsrs	r3, r7, #16
 8026b3a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026b3e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026b42:	b2ff      	uxtb	r7, r7
 8026b44:	fb13 f305 	smulbb	r3, r3, r5
 8026b48:	b2c9      	uxtb	r1, r1
 8026b4a:	fb17 f705 	smulbb	r7, r7, r5
 8026b4e:	fb02 3201 	mla	r2, r2, r1, r3
 8026b52:	10c3      	asrs	r3, r0, #3
 8026b54:	fb1c fc05 	smulbb	ip, ip, r5
 8026b58:	00c0      	lsls	r0, r0, #3
 8026b5a:	b292      	uxth	r2, r2
 8026b5c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026b60:	b2c0      	uxtb	r0, r0
 8026b62:	fb03 c301 	mla	r3, r3, r1, ip
 8026b66:	fb00 7001 	mla	r0, r0, r1, r7
 8026b6a:	1c51      	adds	r1, r2, #1
 8026b6c:	b29b      	uxth	r3, r3
 8026b6e:	b280      	uxth	r0, r0
 8026b70:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026b74:	f100 0c01 	add.w	ip, r0, #1
 8026b78:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026b7c:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8026b80:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8026b84:	ea42 020c 	orr.w	r2, r2, ip
 8026b88:	f103 0c01 	add.w	ip, r3, #1
 8026b8c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026b90:	095b      	lsrs	r3, r3, #5
 8026b92:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026b96:	431a      	orrs	r2, r3
 8026b98:	f8a9 2000 	strh.w	r2, [r9]
 8026b9c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8026b9e:	f109 0902 	add.w	r9, r9, #2
 8026ba2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026ba6:	441c      	add	r4, r3
 8026ba8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8026baa:	441e      	add	r6, r3
 8026bac:	e647      	b.n	802683e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8026bae:	2800      	cmp	r0, #0
 8026bb0:	f43f aedf 	beq.w	8026972 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8026bb4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8026bb8:	9109      	str	r1, [sp, #36]	; 0x24
 8026bba:	0e09      	lsrs	r1, r1, #24
 8026bbc:	9112      	str	r1, [sp, #72]	; 0x48
 8026bbe:	e6d8      	b.n	8026972 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8026bc0:	b01d      	add	sp, #116	; 0x74
 8026bc2:	ecbd 8b08 	vpop	{d8-d11}
 8026bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08026bcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8026bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bd0:	880e      	ldrh	r6, [r1, #0]
 8026bd2:	b085      	sub	sp, #20
 8026bd4:	4690      	mov	r8, r2
 8026bd6:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8026bda:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8026bde:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8026be2:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8026be6:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8026bea:	00f6      	lsls	r6, r6, #3
 8026bec:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8026bf0:	9200      	str	r2, [sp, #0]
 8026bf2:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8026bf6:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8026bfa:	9201      	str	r2, [sp, #4]
 8026bfc:	b2f2      	uxtb	r2, r6
 8026bfe:	2c00      	cmp	r4, #0
 8026c00:	fb04 5603 	mla	r6, r4, r3, r5
 8026c04:	9202      	str	r2, [sp, #8]
 8026c06:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8026c0a:	db36      	blt.n	8026c7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8026c0c:	45a6      	cmp	lr, r4
 8026c0e:	dd34      	ble.n	8026c7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8026c10:	2d00      	cmp	r5, #0
 8026c12:	db30      	blt.n	8026c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8026c14:	42ab      	cmp	r3, r5
 8026c16:	dd2e      	ble.n	8026c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8026c18:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8026c1c:	1c6e      	adds	r6, r5, #1
 8026c1e:	d42f      	bmi.n	8026c80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8026c20:	42b3      	cmp	r3, r6
 8026c22:	dd2d      	ble.n	8026c80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8026c24:	b370      	cbz	r0, 8026c84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
 8026c26:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8026c2a:	3401      	adds	r4, #1
 8026c2c:	d42e      	bmi.n	8026c8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8026c2e:	45a6      	cmp	lr, r4
 8026c30:	dd2c      	ble.n	8026c8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8026c32:	b377      	cbz	r7, 8026c92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
 8026c34:	2d00      	cmp	r5, #0
 8026c36:	db27      	blt.n	8026c88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8026c38:	42ab      	cmp	r3, r5
 8026c3a:	dd25      	ble.n	8026c88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8026c3c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026c40:	3501      	adds	r5, #1
 8026c42:	d429      	bmi.n	8026c98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8026c44:	42ab      	cmp	r3, r5
 8026c46:	dd27      	ble.n	8026c98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8026c48:	b340      	cbz	r0, 8026c9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8026c4a:	3301      	adds	r3, #1
 8026c4c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8026c50:	280f      	cmp	r0, #15
 8026c52:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8026c56:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026c5a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026c5e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026c62:	d801      	bhi.n	8026c68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
 8026c64:	2f0f      	cmp	r7, #15
 8026c66:	d91b      	bls.n	8026ca0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 8026c68:	4b7e      	ldr	r3, [pc, #504]	; (8026e64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 8026c6a:	f240 210d 	movw	r1, #525	; 0x20d
 8026c6e:	4a7e      	ldr	r2, [pc, #504]	; (8026e68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8026c70:	487e      	ldr	r0, [pc, #504]	; (8026e6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8026c72:	f001 fd09 	bl	8028688 <__assert_func>
 8026c76:	2200      	movs	r2, #0
 8026c78:	e7d0      	b.n	8026c1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 8026c7a:	2600      	movs	r6, #0
 8026c7c:	4632      	mov	r2, r6
 8026c7e:	e7d4      	b.n	8026c2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8026c80:	2600      	movs	r6, #0
 8026c82:	e7d2      	b.n	8026c2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8026c84:	4606      	mov	r6, r0
 8026c86:	e7d0      	b.n	8026c2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8026c88:	2400      	movs	r4, #0
 8026c8a:	e7d9      	b.n	8026c40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
 8026c8c:	2300      	movs	r3, #0
 8026c8e:	461c      	mov	r4, r3
 8026c90:	e7de      	b.n	8026c50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8026c92:	463b      	mov	r3, r7
 8026c94:	463c      	mov	r4, r7
 8026c96:	e7db      	b.n	8026c50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8026c98:	2300      	movs	r3, #0
 8026c9a:	e7d9      	b.n	8026c50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8026c9c:	4603      	mov	r3, r0
 8026c9e:	e7d7      	b.n	8026c50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8026ca0:	b280      	uxth	r0, r0
 8026ca2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026ca6:	b2bf      	uxth	r7, r7
 8026ca8:	fb00 fe07 	mul.w	lr, r0, r7
 8026cac:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8026cb0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026cb4:	eba0 0c0e 	sub.w	ip, r0, lr
 8026cb8:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8026cbc:	b2bf      	uxth	r7, r7
 8026cbe:	fa1f fc8c 	uxth.w	ip, ip
 8026cc2:	eba5 0507 	sub.w	r5, r5, r7
 8026cc6:	fb0c f00a 	mul.w	r0, ip, sl
 8026cca:	b2ad      	uxth	r5, r5
 8026ccc:	fb05 000b 	mla	r0, r5, fp, r0
 8026cd0:	fb07 0009 	mla	r0, r7, r9, r0
 8026cd4:	fb0e 0008 	mla	r0, lr, r8, r0
 8026cd8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026cdc:	9003      	str	r0, [sp, #12]
 8026cde:	d018      	beq.n	8026d12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x146>
 8026ce0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026ce4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026ce8:	fb0b f000 	mul.w	r0, fp, r0
 8026cec:	fb0b fb02 	mul.w	fp, fp, r2
 8026cf0:	0a02      	lsrs	r2, r0, #8
 8026cf2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026cf6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026cfa:	4402      	add	r2, r0
 8026cfc:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026d00:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8026d04:	0a12      	lsrs	r2, r2, #8
 8026d06:	0a00      	lsrs	r0, r0, #8
 8026d08:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026d0c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d10:	4302      	orrs	r2, r0
 8026d12:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026d16:	d019      	beq.n	8026d4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x180>
 8026d18:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026d1c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026d20:	fb0a fb0b 	mul.w	fp, sl, fp
 8026d24:	fb0a fa06 	mul.w	sl, sl, r6
 8026d28:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026d2c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026d30:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026d34:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026d38:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026d3c:	445e      	add	r6, fp
 8026d3e:	0a00      	lsrs	r0, r0, #8
 8026d40:	0a36      	lsrs	r6, r6, #8
 8026d42:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d46:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026d4a:	4306      	orrs	r6, r0
 8026d4c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026d50:	d019      	beq.n	8026d86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1ba>
 8026d52:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026d56:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026d5a:	fb09 fa0a 	mul.w	sl, r9, sl
 8026d5e:	fb09 f904 	mul.w	r9, r9, r4
 8026d62:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026d66:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026d6a:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026d6e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026d72:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8026d76:	4454      	add	r4, sl
 8026d78:	0a00      	lsrs	r0, r0, #8
 8026d7a:	0a24      	lsrs	r4, r4, #8
 8026d7c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d80:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026d84:	4304      	orrs	r4, r0
 8026d86:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026d8a:	d019      	beq.n	8026dc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f4>
 8026d8c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8026d90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026d94:	fb08 f909 	mul.w	r9, r8, r9
 8026d98:	fb08 f803 	mul.w	r8, r8, r3
 8026d9c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8026da0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026da4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026da8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026dac:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026db0:	444b      	add	r3, r9
 8026db2:	0a00      	lsrs	r0, r0, #8
 8026db4:	0a1b      	lsrs	r3, r3, #8
 8026db6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026dba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026dbe:	4303      	orrs	r3, r0
 8026dc0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026dc4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026dc8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026dcc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026dd0:	fb0c f808 	mul.w	r8, ip, r8
 8026dd4:	fb0c f606 	mul.w	r6, ip, r6
 8026dd8:	fb05 8800 	mla	r8, r5, r0, r8
 8026ddc:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026de0:	fb05 6202 	mla	r2, r5, r2, r6
 8026de4:	9d01      	ldr	r5, [sp, #4]
 8026de6:	fb07 8800 	mla	r8, r7, r0, r8
 8026dea:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8026dee:	fb0e 8000 	mla	r0, lr, r0, r8
 8026df2:	0a00      	lsrs	r0, r0, #8
 8026df4:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8026df8:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8026dfc:	9c02      	ldr	r4, [sp, #8]
 8026dfe:	fb07 2700 	mla	r7, r7, r0, r2
 8026e02:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8026e06:	9b03      	ldr	r3, [sp, #12]
 8026e08:	fb0e 7000 	mla	r0, lr, r0, r7
 8026e0c:	43da      	mvns	r2, r3
 8026e0e:	9b00      	ldr	r3, [sp, #0]
 8026e10:	0a00      	lsrs	r0, r0, #8
 8026e12:	b2d2      	uxtb	r2, r2
 8026e14:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026e18:	4353      	muls	r3, r2
 8026e1a:	4354      	muls	r4, r2
 8026e1c:	ea48 0000 	orr.w	r0, r8, r0
 8026e20:	4355      	muls	r5, r2
 8026e22:	4622      	mov	r2, r4
 8026e24:	1c5c      	adds	r4, r3, #1
 8026e26:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8026e2a:	0c03      	lsrs	r3, r0, #16
 8026e2c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026e30:	4b0f      	ldr	r3, [pc, #60]	; (8026e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8026e32:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8026e36:	1c54      	adds	r4, r2, #1
 8026e38:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8026e3c:	b2c2      	uxtb	r2, r0
 8026e3e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026e42:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026e46:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8026e4a:	1c6a      	adds	r2, r5, #1
 8026e4c:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8026e50:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026e54:	00c0      	lsls	r0, r0, #3
 8026e56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026e5a:	4318      	orrs	r0, r3
 8026e5c:	8008      	strh	r0, [r1, #0]
 8026e5e:	b005      	add	sp, #20
 8026e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e64:	0802cea2 	.word	0x0802cea2
 8026e68:	0802d465 	.word	0x0802d465
 8026e6c:	0802cf8b 	.word	0x0802cf8b
 8026e70:	fffff800 	.word	0xfffff800

08026e74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e78:	ed2d 8b08 	vpush	{d8-d11}
 8026e7c:	b09b      	sub	sp, #108	; 0x6c
 8026e7e:	eeb0 aa40 	vmov.f32	s20, s0
 8026e82:	eef0 9a60 	vmov.f32	s19, s1
 8026e86:	9218      	str	r2, [sp, #96]	; 0x60
 8026e88:	eeb0 9a41 	vmov.f32	s18, s2
 8026e8c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026e8e:	eeb0 8a62 	vmov.f32	s16, s5
 8026e92:	9019      	str	r0, [sp, #100]	; 0x64
 8026e94:	eef0 8a43 	vmov.f32	s17, s6
 8026e98:	6850      	ldr	r0, [r2, #4]
 8026e9a:	eef0 ba44 	vmov.f32	s23, s8
 8026e9e:	9116      	str	r1, [sp, #88]	; 0x58
 8026ea0:	eeb0 ba64 	vmov.f32	s22, s9
 8026ea4:	9307      	str	r3, [sp, #28]
 8026ea6:	eef0 aa45 	vmov.f32	s21, s10
 8026eaa:	6812      	ldr	r2, [r2, #0]
 8026eac:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8026eb0:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8026eb4:	fb00 1303 	mla	r3, r0, r3, r1
 8026eb8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026ebc:	930a      	str	r3, [sp, #40]	; 0x28
 8026ebe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026ec0:	681b      	ldr	r3, [r3, #0]
 8026ec2:	930f      	str	r3, [sp, #60]	; 0x3c
 8026ec4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026ec6:	2b00      	cmp	r3, #0
 8026ec8:	dc03      	bgt.n	8026ed2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8026eca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026ecc:	2b00      	cmp	r3, #0
 8026ece:	f340 838b 	ble.w	80275e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 8026ed2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026ed4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026ed8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026edc:	1e48      	subs	r0, r1, #1
 8026ede:	1e57      	subs	r7, r2, #1
 8026ee0:	9b07      	ldr	r3, [sp, #28]
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	f340 818b 	ble.w	80271fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026ee8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026eec:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026ef0:	d406      	bmi.n	8026f00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026ef2:	4584      	cmp	ip, r0
 8026ef4:	da04      	bge.n	8026f00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026ef6:	2b00      	cmp	r3, #0
 8026ef8:	db02      	blt.n	8026f00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026efa:	42bb      	cmp	r3, r7
 8026efc:	f2c0 8180 	blt.w	8027200 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026f00:	f11c 0c01 	adds.w	ip, ip, #1
 8026f04:	f100 8170 	bmi.w	80271e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026f08:	4561      	cmp	r1, ip
 8026f0a:	f2c0 816d 	blt.w	80271e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026f0e:	3301      	adds	r3, #1
 8026f10:	f100 816a 	bmi.w	80271e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026f14:	429a      	cmp	r2, r3
 8026f16:	f2c0 8167 	blt.w	80271e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026f1a:	9b07      	ldr	r3, [sp, #28]
 8026f1c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026f1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8026f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026f22:	2b00      	cmp	r3, #0
 8026f24:	f340 8189 	ble.w	802723a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8026f28:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8026f2a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026f2e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026f30:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8026f34:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026f38:	1422      	asrs	r2, r4, #16
 8026f3a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026f3e:	689b      	ldr	r3, [r3, #8]
 8026f40:	f100 81d8 	bmi.w	80272f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026f44:	f103 38ff 	add.w	r8, r3, #4294967295
 8026f48:	4542      	cmp	r2, r8
 8026f4a:	f280 81d3 	bge.w	80272f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026f4e:	f1bc 0f00 	cmp.w	ip, #0
 8026f52:	f2c0 81cf 	blt.w	80272f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026f56:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026f5a:	45c4      	cmp	ip, r8
 8026f5c:	f280 81ca 	bge.w	80272f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026f60:	b21b      	sxth	r3, r3
 8026f62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026f64:	fb0c 2203 	mla	r2, ip, r3, r2
 8026f68:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8026f6c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026f70:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026f74:	2900      	cmp	r1, #0
 8026f76:	f000 81a6 	beq.w	80272c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026f7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026f7e:	950b      	str	r5, [sp, #44]	; 0x2c
 8026f80:	0e2d      	lsrs	r5, r5, #24
 8026f82:	9512      	str	r5, [sp, #72]	; 0x48
 8026f84:	b180      	cbz	r0, 8026fa8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8026f86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026f8a:	3b01      	subs	r3, #1
 8026f8c:	009b      	lsls	r3, r3, #2
 8026f8e:	3304      	adds	r3, #4
 8026f90:	eb08 0c03 	add.w	ip, r8, r3
 8026f94:	f858 3003 	ldr.w	r3, [r8, r3]
 8026f98:	9308      	str	r3, [sp, #32]
 8026f9a:	0e1b      	lsrs	r3, r3, #24
 8026f9c:	9310      	str	r3, [sp, #64]	; 0x40
 8026f9e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026fa2:	930c      	str	r3, [sp, #48]	; 0x30
 8026fa4:	0e1b      	lsrs	r3, r3, #24
 8026fa6:	9313      	str	r3, [sp, #76]	; 0x4c
 8026fa8:	b289      	uxth	r1, r1
 8026faa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026fac:	b280      	uxth	r0, r0
 8026fae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026fb0:	fb01 f900 	mul.w	r9, r1, r0
 8026fb4:	0109      	lsls	r1, r1, #4
 8026fb6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026fba:	eba1 0809 	sub.w	r8, r1, r9
 8026fbe:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8026fc2:	b280      	uxth	r0, r0
 8026fc4:	fa1f f888 	uxth.w	r8, r8
 8026fc8:	1a09      	subs	r1, r1, r0
 8026fca:	fb08 f303 	mul.w	r3, r8, r3
 8026fce:	b289      	uxth	r1, r1
 8026fd0:	fb01 330e 	mla	r3, r1, lr, r3
 8026fd4:	fb00 3305 	mla	r3, r0, r5, r3
 8026fd8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026fda:	fb09 3305 	mla	r3, r9, r5, r3
 8026fde:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026fe2:	2b00      	cmp	r3, #0
 8026fe4:	f000 80f7 	beq.w	80271d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026fe8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026fec:	d01b      	beq.n	8027026 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8026fee:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8026ff2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026ff6:	fb0e fa0a 	mul.w	sl, lr, sl
 8026ffa:	fb0e fe02 	mul.w	lr, lr, r2
 8026ffe:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027002:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027006:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802700a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802700e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027012:	4452      	add	r2, sl
 8027014:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027018:	0a12      	lsrs	r2, r2, #8
 802701a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802701e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027022:	ea42 020c 	orr.w	r2, r2, ip
 8027026:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027028:	2dff      	cmp	r5, #255	; 0xff
 802702a:	d021      	beq.n	8027070 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802702c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802702e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027032:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027034:	fb05 fb0b 	mul.w	fp, r5, fp
 8027038:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802703a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802703e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027040:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027044:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027048:	fb05 fa0a 	mul.w	sl, r5, sl
 802704c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027050:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027054:	44de      	add	lr, fp
 8027056:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802705a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802705e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027062:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027066:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802706a:	ea4e 050a 	orr.w	r5, lr, sl
 802706e:	950b      	str	r5, [sp, #44]	; 0x2c
 8027070:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027072:	2dff      	cmp	r5, #255	; 0xff
 8027074:	d021      	beq.n	80270ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027076:	9d08      	ldr	r5, [sp, #32]
 8027078:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802707c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802707e:	fb05 fb0b 	mul.w	fp, r5, fp
 8027082:	9d08      	ldr	r5, [sp, #32]
 8027084:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027088:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802708a:	fb05 fa0e 	mul.w	sl, r5, lr
 802708e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027092:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027096:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802709a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802709e:	44de      	add	lr, fp
 80270a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80270a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80270b4:	ea4e 050a 	orr.w	r5, lr, sl
 80270b8:	9508      	str	r5, [sp, #32]
 80270ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80270bc:	2dff      	cmp	r5, #255	; 0xff
 80270be:	d021      	beq.n	8027104 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80270c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80270c2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80270c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80270c8:	fb05 fb0b 	mul.w	fp, r5, fp
 80270cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80270ce:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80270d2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80270d4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80270d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80270dc:	fb05 fa0a 	mul.w	sl, r5, sl
 80270e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270e4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80270e8:	44de      	add	lr, fp
 80270ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80270ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80270fe:	ea4e 050a 	orr.w	r5, lr, sl
 8027102:	950c      	str	r5, [sp, #48]	; 0x30
 8027104:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027106:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802710a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802710e:	2bff      	cmp	r3, #255	; 0xff
 8027110:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027114:	9d08      	ldr	r5, [sp, #32]
 8027116:	fb08 fc0c 	mul.w	ip, r8, ip
 802711a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802711e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027124:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027128:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802712c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802712e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027132:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027136:	fb08 f80e 	mul.w	r8, r8, lr
 802713a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802713e:	fb01 8202 	mla	r2, r1, r2, r8
 8027142:	9908      	ldr	r1, [sp, #32]
 8027144:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027148:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802714c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802714e:	fb00 220a 	mla	r2, r0, sl, r2
 8027152:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8027156:	fb09 2900 	mla	r9, r9, r0, r2
 802715a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802715e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027162:	ea4c 0c09 	orr.w	ip, ip, r9
 8027166:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802716a:	f000 80b5 	beq.w	80272d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 802716e:	8839      	ldrh	r1, [r7, #0]
 8027170:	43db      	mvns	r3, r3
 8027172:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8027176:	fa5f f883 	uxtb.w	r8, r3
 802717a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802717e:	10c8      	asrs	r0, r1, #3
 8027180:	00cb      	lsls	r3, r1, #3
 8027182:	fb0e fe08 	mul.w	lr, lr, r8
 8027186:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802718a:	b2db      	uxtb	r3, r3
 802718c:	f10e 0101 	add.w	r1, lr, #1
 8027190:	fb00 f008 	mul.w	r0, r0, r8
 8027194:	fb03 f308 	mul.w	r3, r3, r8
 8027198:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802719c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80271a0:	fa5f fc8c 	uxtb.w	ip, ip
 80271a4:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 80271a8:	4960      	ldr	r1, [pc, #384]	; (802732c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
 80271aa:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
 80271ae:	1c59      	adds	r1, r3, #1
 80271b0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80271b4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80271b8:	1c43      	adds	r3, r0, #1
 80271ba:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80271be:	b2d3      	uxtb	r3, r2
 80271c0:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
 80271c4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80271c8:	00db      	lsls	r3, r3, #3
 80271ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80271ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80271d2:	f8a7 c000 	strh.w	ip, [r7]
 80271d6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80271d8:	3702      	adds	r7, #2
 80271da:	441c      	add	r4, r3
 80271dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80271de:	441e      	add	r6, r3
 80271e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80271e2:	3b01      	subs	r3, #1
 80271e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80271e6:	e69b      	b.n	8026f20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80271e8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80271ea:	441c      	add	r4, r3
 80271ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80271ee:	441e      	add	r6, r3
 80271f0:	9b07      	ldr	r3, [sp, #28]
 80271f2:	3b01      	subs	r3, #1
 80271f4:	9307      	str	r3, [sp, #28]
 80271f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80271f8:	3302      	adds	r3, #2
 80271fa:	930a      	str	r3, [sp, #40]	; 0x28
 80271fc:	e670      	b.n	8026ee0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80271fe:	d023      	beq.n	8027248 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8027200:	9b07      	ldr	r3, [sp, #28]
 8027202:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8027204:	3b01      	subs	r3, #1
 8027206:	fb00 4003 	mla	r0, r0, r3, r4
 802720a:	1400      	asrs	r0, r0, #16
 802720c:	f53f ae85 	bmi.w	8026f1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027210:	3901      	subs	r1, #1
 8027212:	4288      	cmp	r0, r1
 8027214:	f6bf ae81 	bge.w	8026f1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027218:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802721a:	fb01 6303 	mla	r3, r1, r3, r6
 802721e:	141b      	asrs	r3, r3, #16
 8027220:	f53f ae7b 	bmi.w	8026f1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027224:	3a01      	subs	r2, #1
 8027226:	4293      	cmp	r3, r2
 8027228:	f6bf ae77 	bge.w	8026f1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802722c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027230:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8027234:	f1bb 0f00 	cmp.w	fp, #0
 8027238:	dc7a      	bgt.n	8027330 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802723a:	9b07      	ldr	r3, [sp, #28]
 802723c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027242:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027246:	930a      	str	r3, [sp, #40]	; 0x28
 8027248:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802724a:	2b00      	cmp	r3, #0
 802724c:	f340 81cc 	ble.w	80275e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 8027250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027254:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027256:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802725a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802725e:	eef0 6a48 	vmov.f32	s13, s16
 8027262:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027266:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802726a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802726e:	ee16 4a90 	vmov	r4, s13
 8027272:	eef0 6a68 	vmov.f32	s13, s17
 8027276:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802727a:	ee16 6a90 	vmov	r6, s13
 802727e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027282:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027286:	ee37 8a48 	vsub.f32	s16, s14, s16
 802728a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802728e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027292:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027296:	ee18 2a10 	vmov	r2, s16
 802729a:	eeb0 8a47 	vmov.f32	s16, s14
 802729e:	fb92 f3f3 	sdiv	r3, r2, r3
 80272a2:	ee18 2a90 	vmov	r2, s17
 80272a6:	932f      	str	r3, [sp, #188]	; 0xbc
 80272a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80272aa:	eef0 8a67 	vmov.f32	s17, s15
 80272ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80272b2:	9330      	str	r3, [sp, #192]	; 0xc0
 80272b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80272b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80272b8:	3b01      	subs	r3, #1
 80272ba:	9316      	str	r3, [sp, #88]	; 0x58
 80272bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80272be:	bf08      	it	eq
 80272c0:	4613      	moveq	r3, r2
 80272c2:	9307      	str	r3, [sp, #28]
 80272c4:	e5fe      	b.n	8026ec4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80272c6:	2800      	cmp	r0, #0
 80272c8:	f43f ae6e 	beq.w	8026fa8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80272cc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80272d0:	9308      	str	r3, [sp, #32]
 80272d2:	0e1b      	lsrs	r3, r3, #24
 80272d4:	9310      	str	r3, [sp, #64]	; 0x40
 80272d6:	e667      	b.n	8026fa8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80272d8:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80272dc:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80272e0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80272e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80272e8:	f022 0207 	bic.w	r2, r2, #7
 80272ec:	431a      	orrs	r2, r3
 80272ee:	ea42 0c0c 	orr.w	ip, r2, ip
 80272f2:	e76e      	b.n	80271d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80272f4:	f112 0801 	adds.w	r8, r2, #1
 80272f8:	f53f af6d 	bmi.w	80271d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80272fc:	4543      	cmp	r3, r8
 80272fe:	f6ff af6a 	blt.w	80271d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027302:	f11c 0801 	adds.w	r8, ip, #1
 8027306:	f53f af66 	bmi.w	80271d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802730a:	45c6      	cmp	lr, r8
 802730c:	f6ff af63 	blt.w	80271d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027310:	b21b      	sxth	r3, r3
 8027312:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8027316:	fa0f f28e 	sxth.w	r2, lr
 802731a:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802731e:	9200      	str	r2, [sp, #0]
 8027320:	4639      	mov	r1, r7
 8027322:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027324:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027326:	f7ff fc51 	bl	8026bcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802732a:	e754      	b.n	80271d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802732c:	fffff800 	.word	0xfffff800
 8027330:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027332:	1421      	asrs	r1, r4, #16
 8027334:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027336:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802733a:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802733e:	1433      	asrs	r3, r6, #16
 8027340:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027344:	fb07 1303 	mla	r3, r7, r3, r1
 8027348:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802734a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802734e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027352:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027356:	2a00      	cmp	r2, #0
 8027358:	f000 812f 	beq.w	80275ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 802735c:	684d      	ldr	r5, [r1, #4]
 802735e:	950d      	str	r5, [sp, #52]	; 0x34
 8027360:	0e2d      	lsrs	r5, r5, #24
 8027362:	9514      	str	r5, [sp, #80]	; 0x50
 8027364:	b178      	cbz	r0, 8027386 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027366:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802736a:	3f01      	subs	r7, #1
 802736c:	00bf      	lsls	r7, r7, #2
 802736e:	3704      	adds	r7, #4
 8027370:	eb01 0e07 	add.w	lr, r1, r7
 8027374:	59c9      	ldr	r1, [r1, r7]
 8027376:	9109      	str	r1, [sp, #36]	; 0x24
 8027378:	0e09      	lsrs	r1, r1, #24
 802737a:	9111      	str	r1, [sp, #68]	; 0x44
 802737c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027380:	910e      	str	r1, [sp, #56]	; 0x38
 8027382:	0e09      	lsrs	r1, r1, #24
 8027384:	9115      	str	r1, [sp, #84]	; 0x54
 8027386:	b292      	uxth	r2, r2
 8027388:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802738a:	b280      	uxth	r0, r0
 802738c:	fb02 f900 	mul.w	r9, r2, r0
 8027390:	0112      	lsls	r2, r2, #4
 8027392:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027396:	eba2 0e09 	sub.w	lr, r2, r9
 802739a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802739e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80273a0:	b280      	uxth	r0, r0
 80273a2:	fa1f fe8e 	uxth.w	lr, lr
 80273a6:	1a09      	subs	r1, r1, r0
 80273a8:	fb0e f202 	mul.w	r2, lr, r2
 80273ac:	b289      	uxth	r1, r1
 80273ae:	fb01 220c 	mla	r2, r1, ip, r2
 80273b2:	fb00 2205 	mla	r2, r0, r5, r2
 80273b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80273b8:	fb09 2205 	mla	r2, r9, r5, r2
 80273bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80273c0:	2a00      	cmp	r2, #0
 80273c2:	f000 80f1 	beq.w	80275a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80273c6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80273ca:	d019      	beq.n	8027400 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 80273cc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80273d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80273d4:	fb0c fa0a 	mul.w	sl, ip, sl
 80273d8:	fb0c fc03 	mul.w	ip, ip, r3
 80273dc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80273e0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80273e4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80273e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80273ec:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80273f0:	4453      	add	r3, sl
 80273f2:	0a3f      	lsrs	r7, r7, #8
 80273f4:	0a1b      	lsrs	r3, r3, #8
 80273f6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80273fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80273fe:	433b      	orrs	r3, r7
 8027400:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027402:	2dff      	cmp	r5, #255	; 0xff
 8027404:	d020      	beq.n	8027448 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8027406:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027408:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802740c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802740e:	436f      	muls	r7, r5
 8027410:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027412:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027416:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802741a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802741c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027420:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027424:	fb05 fa0a 	mul.w	sl, r5, sl
 8027428:	44bc      	add	ip, r7
 802742a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802742e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027432:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027436:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802743a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802743e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027442:	ea4c 050a 	orr.w	r5, ip, sl
 8027446:	950d      	str	r5, [sp, #52]	; 0x34
 8027448:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802744a:	2dff      	cmp	r5, #255	; 0xff
 802744c:	d020      	beq.n	8027490 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 802744e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027450:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027454:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027456:	436f      	muls	r7, r5
 8027458:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802745a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802745e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027460:	fb05 fa0c 	mul.w	sl, r5, ip
 8027464:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027468:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802746c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027470:	44bc      	add	ip, r7
 8027472:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027476:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802747a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802747e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027482:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027486:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802748a:	ea4c 050a 	orr.w	r5, ip, sl
 802748e:	9509      	str	r5, [sp, #36]	; 0x24
 8027490:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027492:	2dff      	cmp	r5, #255	; 0xff
 8027494:	d020      	beq.n	80274d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 8027496:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027498:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802749c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802749e:	436f      	muls	r7, r5
 80274a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80274a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80274a6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80274aa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80274ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80274b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80274b4:	fb05 fa0a 	mul.w	sl, r5, sl
 80274b8:	44bc      	add	ip, r7
 80274ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80274be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80274c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80274c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80274ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80274ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80274d2:	ea4c 050a 	orr.w	r5, ip, sl
 80274d6:	950e      	str	r5, [sp, #56]	; 0x38
 80274d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80274da:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80274de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80274e2:	2aff      	cmp	r2, #255	; 0xff
 80274e4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80274e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80274ea:	fb0e f707 	mul.w	r7, lr, r7
 80274ee:	fb01 770c 	mla	r7, r1, ip, r7
 80274f2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80274f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80274f8:	fb00 770c 	mla	r7, r0, ip, r7
 80274fc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027500:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027502:	fb09 770c 	mla	r7, r9, ip, r7
 8027506:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802750a:	fb0e fe0c 	mul.w	lr, lr, ip
 802750e:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8027512:	fb01 e303 	mla	r3, r1, r3, lr
 8027516:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027518:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802751c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027520:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027522:	fb00 330a 	mla	r3, r0, sl, r3
 8027526:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802752a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802752e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027532:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027536:	ea47 070c 	orr.w	r7, r7, ip
 802753a:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802753e:	d045      	beq.n	80275cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8027540:	f8b8 1000 	ldrh.w	r1, [r8]
 8027544:	43d2      	mvns	r2, r2
 8027546:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802754a:	fa5f fe82 	uxtb.w	lr, r2
 802754e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027552:	10c8      	asrs	r0, r1, #3
 8027554:	00ca      	lsls	r2, r1, #3
 8027556:	fb0c fc0e 	mul.w	ip, ip, lr
 802755a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802755e:	b2d2      	uxtb	r2, r2
 8027560:	f10c 0101 	add.w	r1, ip, #1
 8027564:	fb00 f00e 	mul.w	r0, r0, lr
 8027568:	fb02 f20e 	mul.w	r2, r2, lr
 802756c:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8027570:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8027574:	b2ff      	uxtb	r7, r7
 8027576:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802757a:	491e      	ldr	r1, [pc, #120]	; (80275f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x780>)
 802757c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8027580:	1c51      	adds	r1, r2, #1
 8027582:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027586:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802758a:	1c42      	adds	r2, r0, #1
 802758c:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
 8027590:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027594:	b2df      	uxtb	r7, r3
 8027596:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802759a:	00ff      	lsls	r7, r7, #3
 802759c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80275a0:	ea4c 0c07 	orr.w	ip, ip, r7
 80275a4:	f8a8 c000 	strh.w	ip, [r8]
 80275a8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80275aa:	f108 0802 	add.w	r8, r8, #2
 80275ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80275b2:	441c      	add	r4, r3
 80275b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80275b6:	441e      	add	r6, r3
 80275b8:	e63c      	b.n	8027234 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80275ba:	2800      	cmp	r0, #0
 80275bc:	f43f aee3 	beq.w	8027386 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80275c0:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80275c4:	9109      	str	r1, [sp, #36]	; 0x24
 80275c6:	0e09      	lsrs	r1, r1, #24
 80275c8:	9111      	str	r1, [sp, #68]	; 0x44
 80275ca:	e6dc      	b.n	8027386 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80275cc:	097a      	lsrs	r2, r7, #5
 80275ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80275d2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80275d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80275da:	f023 0307 	bic.w	r3, r3, #7
 80275de:	4313      	orrs	r3, r2
 80275e0:	431f      	orrs	r7, r3
 80275e2:	f8a8 7000 	strh.w	r7, [r8]
 80275e6:	e7df      	b.n	80275a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80275e8:	b01b      	add	sp, #108	; 0x6c
 80275ea:	ecbd 8b08 	vpop	{d8-d11}
 80275ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275f2:	bf00      	nop
 80275f4:	fffff800 	.word	0xfffff800

080275f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80275f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80275fc:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8027600:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027604:	2c00      	cmp	r4, #0
 8027606:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802760a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802760e:	fb04 ce03 	mla	lr, r4, r3, ip
 8027612:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8027616:	db60      	blt.n	80276da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8027618:	45a1      	cmp	r9, r4
 802761a:	dd5e      	ble.n	80276da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802761c:	f1bc 0f00 	cmp.w	ip, #0
 8027620:	db59      	blt.n	80276d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8027622:	45e0      	cmp	r8, ip
 8027624:	dd57      	ble.n	80276d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8027626:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802762a:	f01e 0f01 	tst.w	lr, #1
 802762e:	5c16      	ldrb	r6, [r2, r0]
 8027630:	bf0c      	ite	eq
 8027632:	f006 060f 	andeq.w	r6, r6, #15
 8027636:	1136      	asrne	r6, r6, #4
 8027638:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802763c:	b2f6      	uxtb	r6, r6
 802763e:	f11c 0001 	adds.w	r0, ip, #1
 8027642:	d44d      	bmi.n	80276e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8027644:	4580      	cmp	r8, r0
 8027646:	dd4b      	ble.n	80276e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8027648:	2d00      	cmp	r5, #0
 802764a:	d04b      	beq.n	80276e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 802764c:	f10e 0a01 	add.w	sl, lr, #1
 8027650:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8027654:	f01a 0f01 	tst.w	sl, #1
 8027658:	5c10      	ldrb	r0, [r2, r0]
 802765a:	bf0c      	ite	eq
 802765c:	f000 000f 	andeq.w	r0, r0, #15
 8027660:	1100      	asrne	r0, r0, #4
 8027662:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027666:	b2c0      	uxtb	r0, r0
 8027668:	3401      	adds	r4, #1
 802766a:	d43f      	bmi.n	80276ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802766c:	45a1      	cmp	r9, r4
 802766e:	dd3d      	ble.n	80276ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8027670:	2f00      	cmp	r7, #0
 8027672:	f000 809e 	beq.w	80277b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 8027676:	f1bc 0f00 	cmp.w	ip, #0
 802767a:	db35      	blt.n	80276e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802767c:	45e0      	cmp	r8, ip
 802767e:	dd33      	ble.n	80276e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8027680:	eb03 090e 	add.w	r9, r3, lr
 8027684:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8027688:	f019 0f01 	tst.w	r9, #1
 802768c:	5d14      	ldrb	r4, [r2, r4]
 802768e:	bf0c      	ite	eq
 8027690:	f004 040f 	andeq.w	r4, r4, #15
 8027694:	1124      	asrne	r4, r4, #4
 8027696:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802769a:	b2e4      	uxtb	r4, r4
 802769c:	f11c 0c01 	adds.w	ip, ip, #1
 80276a0:	d427      	bmi.n	80276f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 80276a2:	45e0      	cmp	r8, ip
 80276a4:	dd25      	ble.n	80276f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 80276a6:	b335      	cbz	r5, 80276f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 80276a8:	3301      	adds	r3, #1
 80276aa:	449e      	add	lr, r3
 80276ac:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80276b0:	f01e 0f01 	tst.w	lr, #1
 80276b4:	5cd2      	ldrb	r2, [r2, r3]
 80276b6:	bf0c      	ite	eq
 80276b8:	f002 020f 	andeq.w	r2, r2, #15
 80276bc:	1112      	asrne	r2, r2, #4
 80276be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80276c2:	b2d3      	uxtb	r3, r2
 80276c4:	2d0f      	cmp	r5, #15
 80276c6:	d917      	bls.n	80276f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 80276c8:	4b3c      	ldr	r3, [pc, #240]	; (80277bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 80276ca:	f240 210d 	movw	r1, #525	; 0x20d
 80276ce:	4a3c      	ldr	r2, [pc, #240]	; (80277c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80276d0:	483c      	ldr	r0, [pc, #240]	; (80277c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80276d2:	f000 ffd9 	bl	8028688 <__assert_func>
 80276d6:	2600      	movs	r6, #0
 80276d8:	e7b1      	b.n	802763e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 80276da:	2000      	movs	r0, #0
 80276dc:	4606      	mov	r6, r0
 80276de:	e7c3      	b.n	8027668 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80276e0:	2000      	movs	r0, #0
 80276e2:	e7c1      	b.n	8027668 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80276e4:	4628      	mov	r0, r5
 80276e6:	e7bf      	b.n	8027668 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80276e8:	2400      	movs	r4, #0
 80276ea:	e7d7      	b.n	802769c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 80276ec:	2300      	movs	r3, #0
 80276ee:	461c      	mov	r4, r3
 80276f0:	e7e8      	b.n	80276c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80276f2:	2300      	movs	r3, #0
 80276f4:	e7e6      	b.n	80276c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80276f6:	462b      	mov	r3, r5
 80276f8:	2f0f      	cmp	r7, #15
 80276fa:	d8e5      	bhi.n	80276c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80276fc:	b2ad      	uxth	r5, r5
 80276fe:	b2bf      	uxth	r7, r7
 8027700:	fb05 fc07 	mul.w	ip, r5, r7
 8027704:	012d      	lsls	r5, r5, #4
 8027706:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802770a:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802770e:	eba5 050c 	sub.w	r5, r5, ip
 8027712:	b2bf      	uxth	r7, r7
 8027714:	b2ad      	uxth	r5, r5
 8027716:	1bd2      	subs	r2, r2, r7
 8027718:	4368      	muls	r0, r5
 802771a:	b292      	uxth	r2, r2
 802771c:	fb06 0002 	mla	r0, r6, r2, r0
 8027720:	fb07 0404 	mla	r4, r7, r4, r0
 8027724:	fb0c 4303 	mla	r3, ip, r3, r4
 8027728:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802772c:	2b00      	cmp	r3, #0
 802772e:	d03e      	beq.n	80277ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 8027730:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8027734:	4a24      	ldr	r2, [pc, #144]	; (80277c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 8027736:	4343      	muls	r3, r0
 8027738:	6816      	ldr	r6, [r2, #0]
 802773a:	1c58      	adds	r0, r3, #1
 802773c:	880a      	ldrh	r2, [r1, #0]
 802773e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027742:	1215      	asrs	r5, r2, #8
 8027744:	1200      	asrs	r0, r0, #8
 8027746:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802774a:	10d7      	asrs	r7, r2, #3
 802774c:	b284      	uxth	r4, r0
 802774e:	43c0      	mvns	r0, r0
 8027750:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027754:	00d2      	lsls	r2, r2, #3
 8027756:	b2c3      	uxtb	r3, r0
 8027758:	0a30      	lsrs	r0, r6, #8
 802775a:	fb15 f503 	smulbb	r5, r5, r3
 802775e:	b2d2      	uxtb	r2, r2
 8027760:	fb17 f703 	smulbb	r7, r7, r3
 8027764:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027768:	fb12 f303 	smulbb	r3, r2, r3
 802776c:	fb00 5004 	mla	r0, r0, r4, r5
 8027770:	08f5      	lsrs	r5, r6, #3
 8027772:	00f6      	lsls	r6, r6, #3
 8027774:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027778:	b280      	uxth	r0, r0
 802777a:	b2f6      	uxtb	r6, r6
 802777c:	fb05 7504 	mla	r5, r5, r4, r7
 8027780:	fb06 3304 	mla	r3, r6, r4, r3
 8027784:	1c44      	adds	r4, r0, #1
 8027786:	b2ad      	uxth	r5, r5
 8027788:	b29a      	uxth	r2, r3
 802778a:	1c6b      	adds	r3, r5, #1
 802778c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8027790:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8027794:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027798:	095b      	lsrs	r3, r3, #5
 802779a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802779e:	4303      	orrs	r3, r0
 80277a0:	1c50      	adds	r0, r2, #1
 80277a2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80277a6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80277aa:	4313      	orrs	r3, r2
 80277ac:	800b      	strh	r3, [r1, #0]
 80277ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80277b2:	2d0f      	cmp	r5, #15
 80277b4:	d888      	bhi.n	80276c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80277b6:	463b      	mov	r3, r7
 80277b8:	463c      	mov	r4, r7
 80277ba:	e79f      	b.n	80276fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 80277bc:	0802cea2 	.word	0x0802cea2
 80277c0:	0802d465 	.word	0x0802d465
 80277c4:	0802cf8b 	.word	0x0802cf8b
 80277c8:	200057e8 	.word	0x200057e8

080277cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80277cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277d0:	ed2d 8b08 	vpush	{d8-d11}
 80277d4:	b097      	sub	sp, #92	; 0x5c
 80277d6:	eeb0 aa40 	vmov.f32	s20, s0
 80277da:	eef0 9a60 	vmov.f32	s19, s1
 80277de:	9214      	str	r2, [sp, #80]	; 0x50
 80277e0:	eeb0 9a41 	vmov.f32	s18, s2
 80277e4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80277e6:	eeb0 8a62 	vmov.f32	s16, s5
 80277ea:	9309      	str	r3, [sp, #36]	; 0x24
 80277ec:	eef0 8a43 	vmov.f32	s17, s6
 80277f0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80277f4:	eef0 ba44 	vmov.f32	s23, s8
 80277f8:	9015      	str	r0, [sp, #84]	; 0x54
 80277fa:	eeb0 ba64 	vmov.f32	s22, s9
 80277fe:	6850      	ldr	r0, [r2, #4]
 8027800:	eef0 aa45 	vmov.f32	s21, s10
 8027804:	910d      	str	r1, [sp, #52]	; 0x34
 8027806:	930e      	str	r3, [sp, #56]	; 0x38
 8027808:	6812      	ldr	r2, [r2, #0]
 802780a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802780e:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8027812:	fb00 1303 	mla	r3, r0, r3, r1
 8027816:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 802781a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802781c:	689b      	ldr	r3, [r3, #8]
 802781e:	3301      	adds	r3, #1
 8027820:	f023 0301 	bic.w	r3, r3, #1
 8027824:	930a      	str	r3, [sp, #40]	; 0x28
 8027826:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027828:	681f      	ldr	r7, [r3, #0]
 802782a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802782c:	2b00      	cmp	r3, #0
 802782e:	dc03      	bgt.n	8027838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027830:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027832:	2b00      	cmp	r3, #0
 8027834:	f340 826b 	ble.w	8027d0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 8027838:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802783a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802783e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027842:	1e48      	subs	r0, r1, #1
 8027844:	f102 3cff 	add.w	ip, r2, #4294967295
 8027848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802784a:	2b00      	cmp	r3, #0
 802784c:	f340 80f4 	ble.w	8027a38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8027850:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027854:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027858:	d406      	bmi.n	8027868 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802785a:	4586      	cmp	lr, r0
 802785c:	da04      	bge.n	8027868 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802785e:	2b00      	cmp	r3, #0
 8027860:	db02      	blt.n	8027868 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027862:	4563      	cmp	r3, ip
 8027864:	f2c0 80e9 	blt.w	8027a3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8027868:	f11e 0e01 	adds.w	lr, lr, #1
 802786c:	f100 80da 	bmi.w	8027a24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8027870:	4571      	cmp	r1, lr
 8027872:	f2c0 80d7 	blt.w	8027a24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8027876:	3301      	adds	r3, #1
 8027878:	f100 80d4 	bmi.w	8027a24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802787c:	429a      	cmp	r2, r3
 802787e:	f2c0 80d1 	blt.w	8027a24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8027882:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8027886:	46d0      	mov	r8, sl
 8027888:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802788c:	930f      	str	r3, [sp, #60]	; 0x3c
 802788e:	f1b9 0f00 	cmp.w	r9, #0
 8027892:	f340 80f1 	ble.w	8027a78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8027896:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027898:	1430      	asrs	r0, r6, #16
 802789a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802789e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80278a2:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80278a6:	1423      	asrs	r3, r4, #16
 80278a8:	f100 813b 	bmi.w	8027b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80278ac:	f10c 3bff 	add.w	fp, ip, #4294967295
 80278b0:	455b      	cmp	r3, fp
 80278b2:	f280 8136 	bge.w	8027b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80278b6:	2800      	cmp	r0, #0
 80278b8:	f2c0 8133 	blt.w	8027b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80278bc:	f10e 3bff 	add.w	fp, lr, #4294967295
 80278c0:	4558      	cmp	r0, fp
 80278c2:	f280 812e 	bge.w	8027b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80278c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80278c8:	fb00 3305 	mla	r3, r0, r5, r3
 80278cc:	0858      	lsrs	r0, r3, #1
 80278ce:	07dd      	lsls	r5, r3, #31
 80278d0:	f817 c000 	ldrb.w	ip, [r7, r0]
 80278d4:	bf54      	ite	pl
 80278d6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80278da:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80278de:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80278e2:	fa5f fc8c 	uxtb.w	ip, ip
 80278e6:	2a00      	cmp	r2, #0
 80278e8:	f000 810a 	beq.w	8027b00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80278ec:	1c58      	adds	r0, r3, #1
 80278ee:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80278f2:	07c0      	lsls	r0, r0, #31
 80278f4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80278f8:	bf54      	ite	pl
 80278fa:	f00e 0e0f 	andpl.w	lr, lr, #15
 80278fe:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027902:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027906:	fa5f f08e 	uxtb.w	r0, lr
 802790a:	9010      	str	r0, [sp, #64]	; 0x40
 802790c:	b1e1      	cbz	r1, 8027948 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802790e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027910:	4403      	add	r3, r0
 8027912:	0858      	lsrs	r0, r3, #1
 8027914:	07dd      	lsls	r5, r3, #31
 8027916:	f103 0301 	add.w	r3, r3, #1
 802791a:	5c38      	ldrb	r0, [r7, r0]
 802791c:	bf54      	ite	pl
 802791e:	f000 000f 	andpl.w	r0, r0, #15
 8027922:	1100      	asrmi	r0, r0, #4
 8027924:	07dd      	lsls	r5, r3, #31
 8027926:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802792a:	b2c0      	uxtb	r0, r0
 802792c:	900b      	str	r0, [sp, #44]	; 0x2c
 802792e:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027932:	f817 e000 	ldrb.w	lr, [r7, r0]
 8027936:	bf54      	ite	pl
 8027938:	f00e 030f 	andpl.w	r3, lr, #15
 802793c:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027940:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027944:	b2db      	uxtb	r3, r3
 8027946:	9311      	str	r3, [sp, #68]	; 0x44
 8027948:	b292      	uxth	r2, r2
 802794a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802794c:	b289      	uxth	r1, r1
 802794e:	fb02 f301 	mul.w	r3, r2, r1
 8027952:	0112      	lsls	r2, r2, #4
 8027954:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027958:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802795c:	1ad2      	subs	r2, r2, r3
 802795e:	b289      	uxth	r1, r1
 8027960:	b292      	uxth	r2, r2
 8027962:	1a40      	subs	r0, r0, r1
 8027964:	436a      	muls	r2, r5
 8027966:	b280      	uxth	r0, r0
 8027968:	fb0c 2c00 	mla	ip, ip, r0, r2
 802796c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802796e:	fb01 c102 	mla	r1, r1, r2, ip
 8027972:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027974:	fb03 1302 	mla	r3, r3, r2, r1
 8027978:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802797c:	2b00      	cmp	r3, #0
 802797e:	d048      	beq.n	8027a12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027980:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027982:	4a78      	ldr	r2, [pc, #480]	; (8027b64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 8027984:	434b      	muls	r3, r1
 8027986:	f8d2 e000 	ldr.w	lr, [r2]
 802798a:	1c59      	adds	r1, r3, #1
 802798c:	f8b8 2000 	ldrh.w	r2, [r8]
 8027990:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8027994:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027998:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802799c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80279a0:	121b      	asrs	r3, r3, #8
 80279a2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80279a6:	ea4f 0be2 	mov.w	fp, r2, asr #3
 80279aa:	b299      	uxth	r1, r3
 80279ac:	43db      	mvns	r3, r3
 80279ae:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80279b2:	00d2      	lsls	r2, r2, #3
 80279b4:	b2db      	uxtb	r3, r3
 80279b6:	b2d2      	uxtb	r2, r2
 80279b8:	fb1c fc03 	smulbb	ip, ip, r3
 80279bc:	fb1b fb03 	smulbb	fp, fp, r3
 80279c0:	fb00 c001 	mla	r0, r0, r1, ip
 80279c4:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 80279c8:	fb12 f303 	smulbb	r3, r2, r3
 80279cc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80279d0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80279d4:	b280      	uxth	r0, r0
 80279d6:	fa5f fe8e 	uxtb.w	lr, lr
 80279da:	fb0c bc01 	mla	ip, ip, r1, fp
 80279de:	fb0e 3101 	mla	r1, lr, r1, r3
 80279e2:	1c43      	adds	r3, r0, #1
 80279e4:	fa1f fc8c 	uxth.w	ip, ip
 80279e8:	b289      	uxth	r1, r1
 80279ea:	f10c 0201 	add.w	r2, ip, #1
 80279ee:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80279f2:	1c4b      	adds	r3, r1, #1
 80279f4:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 80279f8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80279fc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027a00:	0952      	lsrs	r2, r2, #5
 8027a02:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8027a06:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027a0a:	4310      	orrs	r0, r2
 8027a0c:	4308      	orrs	r0, r1
 8027a0e:	f8a8 0000 	strh.w	r0, [r8]
 8027a12:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027a14:	f108 0802 	add.w	r8, r8, #2
 8027a18:	f109 39ff 	add.w	r9, r9, #4294967295
 8027a1c:	441c      	add	r4, r3
 8027a1e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027a20:	441e      	add	r6, r3
 8027a22:	e734      	b.n	802788e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027a24:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027a26:	f10a 0a02 	add.w	sl, sl, #2
 8027a2a:	441c      	add	r4, r3
 8027a2c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027a2e:	441e      	add	r6, r3
 8027a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a32:	3b01      	subs	r3, #1
 8027a34:	9309      	str	r3, [sp, #36]	; 0x24
 8027a36:	e707      	b.n	8027848 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027a38:	d023      	beq.n	8027a82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8027a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a3c:	982b      	ldr	r0, [sp, #172]	; 0xac
 8027a3e:	3b01      	subs	r3, #1
 8027a40:	fb00 4003 	mla	r0, r0, r3, r4
 8027a44:	1400      	asrs	r0, r0, #16
 8027a46:	f53f af1c 	bmi.w	8027882 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027a4a:	3901      	subs	r1, #1
 8027a4c:	4288      	cmp	r0, r1
 8027a4e:	f6bf af18 	bge.w	8027882 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027a52:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8027a54:	fb01 6303 	mla	r3, r1, r3, r6
 8027a58:	141b      	asrs	r3, r3, #16
 8027a5a:	f53f af12 	bmi.w	8027882 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027a5e:	3a01      	subs	r2, #1
 8027a60:	4293      	cmp	r3, r2
 8027a62:	f6bf af0e 	bge.w	8027882 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027a66:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8027a6a:	46d1      	mov	r9, sl
 8027a6c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8027a70:	930f      	str	r3, [sp, #60]	; 0x3c
 8027a72:	f1bb 0f00 	cmp.w	fp, #0
 8027a76:	dc77      	bgt.n	8027b68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8027a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a7a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027a7e:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8027a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027a84:	2b00      	cmp	r3, #0
 8027a86:	f340 8142 	ble.w	8027d0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 8027a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027a8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027a90:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027a94:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027a98:	eef0 6a48 	vmov.f32	s13, s16
 8027a9c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027aa0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027aa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027aa8:	ee16 4a90 	vmov	r4, s13
 8027aac:	eef0 6a68 	vmov.f32	s13, s17
 8027ab0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ab4:	ee16 6a90 	vmov	r6, s13
 8027ab8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027abc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027ac0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027ac4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027ac8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027acc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027ad0:	ee18 2a10 	vmov	r2, s16
 8027ad4:	eeb0 8a47 	vmov.f32	s16, s14
 8027ad8:	fb92 f3f3 	sdiv	r3, r2, r3
 8027adc:	ee18 2a90 	vmov	r2, s17
 8027ae0:	932b      	str	r3, [sp, #172]	; 0xac
 8027ae2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027ae4:	eef0 8a67 	vmov.f32	s17, s15
 8027ae8:	fb92 f3f3 	sdiv	r3, r2, r3
 8027aec:	932c      	str	r3, [sp, #176]	; 0xb0
 8027aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027af0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027af2:	3b01      	subs	r3, #1
 8027af4:	930d      	str	r3, [sp, #52]	; 0x34
 8027af6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027af8:	bf08      	it	eq
 8027afa:	4613      	moveq	r3, r2
 8027afc:	9309      	str	r3, [sp, #36]	; 0x24
 8027afe:	e694      	b.n	802782a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027b00:	2900      	cmp	r1, #0
 8027b02:	f43f af21 	beq.w	8027948 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8027b06:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027b08:	4418      	add	r0, r3
 8027b0a:	0843      	lsrs	r3, r0, #1
 8027b0c:	07c0      	lsls	r0, r0, #31
 8027b0e:	5cfb      	ldrb	r3, [r7, r3]
 8027b10:	bf54      	ite	pl
 8027b12:	f003 030f 	andpl.w	r3, r3, #15
 8027b16:	111b      	asrmi	r3, r3, #4
 8027b18:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027b1c:	b2db      	uxtb	r3, r3
 8027b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027b20:	e712      	b.n	8027948 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8027b22:	f113 0b01 	adds.w	fp, r3, #1
 8027b26:	f53f af74 	bmi.w	8027a12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027b2a:	45dc      	cmp	ip, fp
 8027b2c:	f6ff af71 	blt.w	8027a12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027b30:	f110 0b01 	adds.w	fp, r0, #1
 8027b34:	f53f af6d 	bmi.w	8027a12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027b38:	45de      	cmp	lr, fp
 8027b3a:	f6ff af6a 	blt.w	8027a12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027b3e:	9302      	str	r3, [sp, #8]
 8027b40:	fa0f f38e 	sxth.w	r3, lr
 8027b44:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027b46:	9301      	str	r3, [sp, #4]
 8027b48:	fa0f f38c 	sxth.w	r3, ip
 8027b4c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027b50:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8027b54:	9300      	str	r3, [sp, #0]
 8027b56:	463a      	mov	r2, r7
 8027b58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027b5a:	4641      	mov	r1, r8
 8027b5c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027b5e:	f7ff fd4b 	bl	80275f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8027b62:	e756      	b.n	8027a12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027b64:	200057e8 	.word	0x200057e8
 8027b68:	1422      	asrs	r2, r4, #16
 8027b6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027b6c:	1433      	asrs	r3, r6, #16
 8027b6e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027b72:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027b76:	fb05 2303 	mla	r3, r5, r3, r2
 8027b7a:	085a      	lsrs	r2, r3, #1
 8027b7c:	07dd      	lsls	r5, r3, #31
 8027b7e:	5cba      	ldrb	r2, [r7, r2]
 8027b80:	bf54      	ite	pl
 8027b82:	f002 020f 	andpl.w	r2, r2, #15
 8027b86:	1112      	asrmi	r2, r2, #4
 8027b88:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027b8c:	b2d2      	uxtb	r2, r2
 8027b8e:	2900      	cmp	r1, #0
 8027b90:	f000 80a9 	beq.w	8027ce6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 8027b94:	f103 0e01 	add.w	lr, r3, #1
 8027b98:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8027b9c:	f01e 0f01 	tst.w	lr, #1
 8027ba0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027ba4:	bf0c      	ite	eq
 8027ba6:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027baa:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8027bae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027bb2:	fa5f f58c 	uxtb.w	r5, ip
 8027bb6:	9512      	str	r5, [sp, #72]	; 0x48
 8027bb8:	b308      	cbz	r0, 8027bfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8027bba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027bbc:	442b      	add	r3, r5
 8027bbe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027bc2:	07dd      	lsls	r5, r3, #31
 8027bc4:	f103 0301 	add.w	r3, r3, #1
 8027bc8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027bcc:	bf54      	ite	pl
 8027bce:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027bd2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027bd6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027bda:	fa5f f58c 	uxtb.w	r5, ip
 8027bde:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027be2:	950c      	str	r5, [sp, #48]	; 0x30
 8027be4:	07dd      	lsls	r5, r3, #31
 8027be6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027bea:	bf54      	ite	pl
 8027bec:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027bf0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027bf4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027bf8:	fa5f f38c 	uxtb.w	r3, ip
 8027bfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8027bfe:	b289      	uxth	r1, r1
 8027c00:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027c02:	b280      	uxth	r0, r0
 8027c04:	fb01 f300 	mul.w	r3, r1, r0
 8027c08:	0109      	lsls	r1, r1, #4
 8027c0a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8027c0e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8027c12:	1ac9      	subs	r1, r1, r3
 8027c14:	b280      	uxth	r0, r0
 8027c16:	b289      	uxth	r1, r1
 8027c18:	ebac 0c00 	sub.w	ip, ip, r0
 8027c1c:	4369      	muls	r1, r5
 8027c1e:	fa1f fc8c 	uxth.w	ip, ip
 8027c22:	fb02 120c 	mla	r2, r2, ip, r1
 8027c26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027c28:	fb00 2001 	mla	r0, r0, r1, r2
 8027c2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027c2e:	fb03 0302 	mla	r3, r3, r2, r0
 8027c32:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c36:	2b00      	cmp	r3, #0
 8027c38:	d04c      	beq.n	8027cd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8027c3a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027c3c:	4a36      	ldr	r2, [pc, #216]	; (8027d18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
 8027c3e:	434b      	muls	r3, r1
 8027c40:	f8d2 e000 	ldr.w	lr, [r2]
 8027c44:	1c59      	adds	r1, r3, #1
 8027c46:	f8b9 2000 	ldrh.w	r2, [r9]
 8027c4a:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8027c4e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027c52:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8027c56:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027c5a:	121b      	asrs	r3, r3, #8
 8027c5c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027c60:	ea4f 08e2 	mov.w	r8, r2, asr #3
 8027c64:	b299      	uxth	r1, r3
 8027c66:	43db      	mvns	r3, r3
 8027c68:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8027c6c:	00d2      	lsls	r2, r2, #3
 8027c6e:	b2db      	uxtb	r3, r3
 8027c70:	b2d2      	uxtb	r2, r2
 8027c72:	fb1c fc03 	smulbb	ip, ip, r3
 8027c76:	fb18 f803 	smulbb	r8, r8, r3
 8027c7a:	fb00 c001 	mla	r0, r0, r1, ip
 8027c7e:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 8027c82:	fb12 f203 	smulbb	r2, r2, r3
 8027c86:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027c8a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8027c8e:	b280      	uxth	r0, r0
 8027c90:	fa5f fe8e 	uxtb.w	lr, lr
 8027c94:	fb0c 8c01 	mla	ip, ip, r1, r8
 8027c98:	fb0e 2201 	mla	r2, lr, r1, r2
 8027c9c:	fa1f fc8c 	uxth.w	ip, ip
 8027ca0:	b292      	uxth	r2, r2
 8027ca2:	f10c 0801 	add.w	r8, ip, #1
 8027ca6:	1c51      	adds	r1, r2, #1
 8027ca8:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 8027cac:	f100 0801 	add.w	r8, r0, #1
 8027cb0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027cb4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027cb8:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 8027cbc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027cc0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027cc4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027cc8:	ea4c 0c00 	orr.w	ip, ip, r0
 8027ccc:	ea4c 0c02 	orr.w	ip, ip, r2
 8027cd0:	f8a9 c000 	strh.w	ip, [r9]
 8027cd4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027cd6:	f109 0902 	add.w	r9, r9, #2
 8027cda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027cde:	441c      	add	r4, r3
 8027ce0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027ce2:	441e      	add	r6, r3
 8027ce4:	e6c5      	b.n	8027a72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8027ce6:	2800      	cmp	r0, #0
 8027ce8:	d089      	beq.n	8027bfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8027cea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027cec:	442b      	add	r3, r5
 8027cee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027cf2:	07db      	lsls	r3, r3, #31
 8027cf4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027cf8:	bf54      	ite	pl
 8027cfa:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027cfe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027d02:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027d06:	fa5f f38c 	uxtb.w	r3, ip
 8027d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8027d0c:	e777      	b.n	8027bfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8027d0e:	b017      	add	sp, #92	; 0x5c
 8027d10:	ecbd 8b08 	vpop	{d8-d11}
 8027d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d18:	200057e8 	.word	0x200057e8

08027d1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8027d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027d20:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8027d24:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027d28:	2c00      	cmp	r4, #0
 8027d2a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027d2e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8027d32:	fb04 ce03 	mla	lr, r4, r3, ip
 8027d36:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8027d3a:	db60      	blt.n	8027dfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8027d3c:	45a1      	cmp	r9, r4
 8027d3e:	dd5e      	ble.n	8027dfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8027d40:	f1bc 0f00 	cmp.w	ip, #0
 8027d44:	db59      	blt.n	8027dfa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8027d46:	45e0      	cmp	r8, ip
 8027d48:	dd57      	ble.n	8027dfa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8027d4a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8027d4e:	f01e 0f01 	tst.w	lr, #1
 8027d52:	5c16      	ldrb	r6, [r2, r0]
 8027d54:	bf0c      	ite	eq
 8027d56:	f006 060f 	andeq.w	r6, r6, #15
 8027d5a:	1136      	asrne	r6, r6, #4
 8027d5c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027d60:	b2f6      	uxtb	r6, r6
 8027d62:	f11c 0001 	adds.w	r0, ip, #1
 8027d66:	d44d      	bmi.n	8027e04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8027d68:	4580      	cmp	r8, r0
 8027d6a:	dd4b      	ble.n	8027e04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8027d6c:	2d00      	cmp	r5, #0
 8027d6e:	d04b      	beq.n	8027e08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8027d70:	f10e 0a01 	add.w	sl, lr, #1
 8027d74:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8027d78:	f01a 0f01 	tst.w	sl, #1
 8027d7c:	5c10      	ldrb	r0, [r2, r0]
 8027d7e:	bf0c      	ite	eq
 8027d80:	f000 000f 	andeq.w	r0, r0, #15
 8027d84:	1100      	asrne	r0, r0, #4
 8027d86:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027d8a:	b2c0      	uxtb	r0, r0
 8027d8c:	3401      	adds	r4, #1
 8027d8e:	d43f      	bmi.n	8027e10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8027d90:	45a1      	cmp	r9, r4
 8027d92:	dd3d      	ble.n	8027e10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8027d94:	2f00      	cmp	r7, #0
 8027d96:	f000 8097 	beq.w	8027ec8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 8027d9a:	f1bc 0f00 	cmp.w	ip, #0
 8027d9e:	db35      	blt.n	8027e0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8027da0:	45e0      	cmp	r8, ip
 8027da2:	dd33      	ble.n	8027e0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8027da4:	eb03 090e 	add.w	r9, r3, lr
 8027da8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8027dac:	f019 0f01 	tst.w	r9, #1
 8027db0:	5d14      	ldrb	r4, [r2, r4]
 8027db2:	bf0c      	ite	eq
 8027db4:	f004 040f 	andeq.w	r4, r4, #15
 8027db8:	1124      	asrne	r4, r4, #4
 8027dba:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027dbe:	b2e4      	uxtb	r4, r4
 8027dc0:	f11c 0c01 	adds.w	ip, ip, #1
 8027dc4:	d427      	bmi.n	8027e16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8027dc6:	45e0      	cmp	r8, ip
 8027dc8:	dd25      	ble.n	8027e16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8027dca:	b335      	cbz	r5, 8027e1a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8027dcc:	3301      	adds	r3, #1
 8027dce:	449e      	add	lr, r3
 8027dd0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027dd4:	f01e 0f01 	tst.w	lr, #1
 8027dd8:	5cd2      	ldrb	r2, [r2, r3]
 8027dda:	bf0c      	ite	eq
 8027ddc:	f002 020f 	andeq.w	r2, r2, #15
 8027de0:	1112      	asrne	r2, r2, #4
 8027de2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027de6:	b2d3      	uxtb	r3, r2
 8027de8:	2d0f      	cmp	r5, #15
 8027dea:	d917      	bls.n	8027e1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8027dec:	4b39      	ldr	r3, [pc, #228]	; (8027ed4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8027dee:	f240 210d 	movw	r1, #525	; 0x20d
 8027df2:	4a39      	ldr	r2, [pc, #228]	; (8027ed8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8027df4:	4839      	ldr	r0, [pc, #228]	; (8027edc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 8027df6:	f000 fc47 	bl	8028688 <__assert_func>
 8027dfa:	2600      	movs	r6, #0
 8027dfc:	e7b1      	b.n	8027d62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8027dfe:	2000      	movs	r0, #0
 8027e00:	4606      	mov	r6, r0
 8027e02:	e7c3      	b.n	8027d8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8027e04:	2000      	movs	r0, #0
 8027e06:	e7c1      	b.n	8027d8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8027e08:	4628      	mov	r0, r5
 8027e0a:	e7bf      	b.n	8027d8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8027e0c:	2400      	movs	r4, #0
 8027e0e:	e7d7      	b.n	8027dc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8027e10:	2300      	movs	r3, #0
 8027e12:	461c      	mov	r4, r3
 8027e14:	e7e8      	b.n	8027de8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8027e16:	2300      	movs	r3, #0
 8027e18:	e7e6      	b.n	8027de8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8027e1a:	462b      	mov	r3, r5
 8027e1c:	2f0f      	cmp	r7, #15
 8027e1e:	d8e5      	bhi.n	8027dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8027e20:	b2ad      	uxth	r5, r5
 8027e22:	b2bf      	uxth	r7, r7
 8027e24:	fb05 fc07 	mul.w	ip, r5, r7
 8027e28:	012d      	lsls	r5, r5, #4
 8027e2a:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8027e2e:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8027e32:	eba5 050c 	sub.w	r5, r5, ip
 8027e36:	b2bf      	uxth	r7, r7
 8027e38:	b2ad      	uxth	r5, r5
 8027e3a:	1bd2      	subs	r2, r2, r7
 8027e3c:	4368      	muls	r0, r5
 8027e3e:	b292      	uxth	r2, r2
 8027e40:	fb06 0002 	mla	r0, r6, r2, r0
 8027e44:	fb07 0404 	mla	r4, r7, r4, r0
 8027e48:	fb0c 4303 	mla	r3, ip, r3, r4
 8027e4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027e50:	2b00      	cmp	r3, #0
 8027e52:	d037      	beq.n	8027ec4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 8027e54:	4a22      	ldr	r2, [pc, #136]	; (8027ee0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 8027e56:	b298      	uxth	r0, r3
 8027e58:	43db      	mvns	r3, r3
 8027e5a:	6816      	ldr	r6, [r2, #0]
 8027e5c:	880a      	ldrh	r2, [r1, #0]
 8027e5e:	b2db      	uxtb	r3, r3
 8027e60:	0a34      	lsrs	r4, r6, #8
 8027e62:	1215      	asrs	r5, r2, #8
 8027e64:	10d7      	asrs	r7, r2, #3
 8027e66:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8027e6a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027e6e:	00d2      	lsls	r2, r2, #3
 8027e70:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027e74:	fb15 f503 	smulbb	r5, r5, r3
 8027e78:	b2d2      	uxtb	r2, r2
 8027e7a:	fb17 f703 	smulbb	r7, r7, r3
 8027e7e:	fb04 5400 	mla	r4, r4, r0, r5
 8027e82:	08f5      	lsrs	r5, r6, #3
 8027e84:	fb12 f303 	smulbb	r3, r2, r3
 8027e88:	00f6      	lsls	r6, r6, #3
 8027e8a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027e8e:	b2a4      	uxth	r4, r4
 8027e90:	b2f6      	uxtb	r6, r6
 8027e92:	fb05 7500 	mla	r5, r5, r0, r7
 8027e96:	1c62      	adds	r2, r4, #1
 8027e98:	fb06 3000 	mla	r0, r6, r0, r3
 8027e9c:	b2ad      	uxth	r5, r5
 8027e9e:	b280      	uxth	r0, r0
 8027ea0:	1c6b      	adds	r3, r5, #1
 8027ea2:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8027ea6:	1c42      	adds	r2, r0, #1
 8027ea8:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8027eac:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8027eb0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027eb4:	095b      	lsrs	r3, r3, #5
 8027eb6:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8027eba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027ebe:	4323      	orrs	r3, r4
 8027ec0:	4303      	orrs	r3, r0
 8027ec2:	800b      	strh	r3, [r1, #0]
 8027ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027ec8:	2d0f      	cmp	r5, #15
 8027eca:	d88f      	bhi.n	8027dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8027ecc:	463b      	mov	r3, r7
 8027ece:	463c      	mov	r4, r7
 8027ed0:	e7a6      	b.n	8027e20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8027ed2:	bf00      	nop
 8027ed4:	0802cea2 	.word	0x0802cea2
 8027ed8:	0802d465 	.word	0x0802d465
 8027edc:	0802cf8b 	.word	0x0802cf8b
 8027ee0:	200057e8 	.word	0x200057e8

08027ee4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ee8:	ed2d 8b08 	vpush	{d8-d11}
 8027eec:	b093      	sub	sp, #76	; 0x4c
 8027eee:	461d      	mov	r5, r3
 8027ef0:	eeb0 aa40 	vmov.f32	s20, s0
 8027ef4:	920c      	str	r2, [sp, #48]	; 0x30
 8027ef6:	eef0 9a60 	vmov.f32	s19, s1
 8027efa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027efc:	eeb0 9a41 	vmov.f32	s18, s2
 8027f00:	9011      	str	r0, [sp, #68]	; 0x44
 8027f02:	eeb0 8a62 	vmov.f32	s16, s5
 8027f06:	6850      	ldr	r0, [r2, #4]
 8027f08:	eef0 8a43 	vmov.f32	s17, s6
 8027f0c:	9107      	str	r1, [sp, #28]
 8027f0e:	eef0 ba44 	vmov.f32	s23, s8
 8027f12:	6812      	ldr	r2, [r2, #0]
 8027f14:	eeb0 ba64 	vmov.f32	s22, s9
 8027f18:	eef0 aa45 	vmov.f32	s21, s10
 8027f1c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8027f20:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8027f24:	fb00 1303 	mla	r3, r0, r3, r1
 8027f28:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8027f2c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f2e:	689b      	ldr	r3, [r3, #8]
 8027f30:	3301      	adds	r3, #1
 8027f32:	f023 0301 	bic.w	r3, r3, #1
 8027f36:	9306      	str	r3, [sp, #24]
 8027f38:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f3a:	681f      	ldr	r7, [r3, #0]
 8027f3c:	9b07      	ldr	r3, [sp, #28]
 8027f3e:	2b00      	cmp	r3, #0
 8027f40:	dc03      	bgt.n	8027f4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027f44:	2b00      	cmp	r3, #0
 8027f46:	f340 8262 	ble.w	802840e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8027f4a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f4c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027f50:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027f54:	1e48      	subs	r0, r1, #1
 8027f56:	f102 3cff 	add.w	ip, r2, #4294967295
 8027f5a:	2d00      	cmp	r5, #0
 8027f5c:	f340 80ee 	ble.w	802813c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8027f60:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027f64:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027f68:	d406      	bmi.n	8027f78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027f6a:	4586      	cmp	lr, r0
 8027f6c:	da04      	bge.n	8027f78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027f6e:	2b00      	cmp	r3, #0
 8027f70:	db02      	blt.n	8027f78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027f72:	4563      	cmp	r3, ip
 8027f74:	f2c0 80e3 	blt.w	802813e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8027f78:	f11e 0e01 	adds.w	lr, lr, #1
 8027f7c:	f100 80d6 	bmi.w	802812c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027f80:	4571      	cmp	r1, lr
 8027f82:	f2c0 80d3 	blt.w	802812c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027f86:	3301      	adds	r3, #1
 8027f88:	f100 80d0 	bmi.w	802812c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027f8c:	429a      	cmp	r2, r3
 8027f8e:	f2c0 80cd 	blt.w	802812c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027f92:	46c8      	mov	r8, r9
 8027f94:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8027f98:	9509      	str	r5, [sp, #36]	; 0x24
 8027f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027f9c:	2b00      	cmp	r3, #0
 8027f9e:	f340 80eb 	ble.w	8028178 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8027fa2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8027fa6:	1430      	asrs	r0, r6, #16
 8027fa8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027fac:	9308      	str	r3, [sp, #32]
 8027fae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027fb0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027fb4:	1423      	asrs	r3, r4, #16
 8027fb6:	f100 813c 	bmi.w	8028232 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8027fba:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027fbe:	455b      	cmp	r3, fp
 8027fc0:	f280 8137 	bge.w	8028232 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8027fc4:	2800      	cmp	r0, #0
 8027fc6:	f2c0 8134 	blt.w	8028232 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8027fca:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027fce:	4558      	cmp	r0, fp
 8027fd0:	f280 812f 	bge.w	8028232 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8027fd4:	9a06      	ldr	r2, [sp, #24]
 8027fd6:	fb00 3302 	mla	r3, r0, r2, r3
 8027fda:	0858      	lsrs	r0, r3, #1
 8027fdc:	07da      	lsls	r2, r3, #31
 8027fde:	9a08      	ldr	r2, [sp, #32]
 8027fe0:	f817 c000 	ldrb.w	ip, [r7, r0]
 8027fe4:	bf54      	ite	pl
 8027fe6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027fea:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027fee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027ff2:	fa5f fc8c 	uxtb.w	ip, ip
 8027ff6:	2a00      	cmp	r2, #0
 8027ff8:	f000 8102 	beq.w	8028200 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8027ffc:	1c58      	adds	r0, r3, #1
 8027ffe:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028002:	07c0      	lsls	r0, r0, #31
 8028004:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028008:	bf54      	ite	pl
 802800a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802800e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028012:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028016:	fa5f fe8e 	uxtb.w	lr, lr
 802801a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802801e:	b1b9      	cbz	r1, 8028050 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8028020:	4453      	add	r3, sl
 8028022:	0858      	lsrs	r0, r3, #1
 8028024:	07da      	lsls	r2, r3, #31
 8028026:	5c38      	ldrb	r0, [r7, r0]
 8028028:	bf54      	ite	pl
 802802a:	f000 000f 	andpl.w	r0, r0, #15
 802802e:	1100      	asrmi	r0, r0, #4
 8028030:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028034:	b2c0      	uxtb	r0, r0
 8028036:	900a      	str	r0, [sp, #40]	; 0x28
 8028038:	1c58      	adds	r0, r3, #1
 802803a:	0843      	lsrs	r3, r0, #1
 802803c:	07c2      	lsls	r2, r0, #31
 802803e:	5cfb      	ldrb	r3, [r7, r3]
 8028040:	bf54      	ite	pl
 8028042:	f003 030f 	andpl.w	r3, r3, #15
 8028046:	111b      	asrmi	r3, r3, #4
 8028048:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802804c:	b2db      	uxtb	r3, r3
 802804e:	930e      	str	r3, [sp, #56]	; 0x38
 8028050:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028054:	b289      	uxth	r1, r1
 8028056:	fb02 f301 	mul.w	r3, r2, r1
 802805a:	0112      	lsls	r2, r2, #4
 802805c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028060:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8028064:	1ad2      	subs	r2, r2, r3
 8028066:	b289      	uxth	r1, r1
 8028068:	b292      	uxth	r2, r2
 802806a:	1a40      	subs	r0, r0, r1
 802806c:	fa1f fe80 	uxth.w	lr, r0
 8028070:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028072:	4342      	muls	r2, r0
 8028074:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802807a:	fb01 c102 	mla	r1, r1, r2, ip
 802807e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028080:	fb03 1302 	mla	r3, r3, r2, r1
 8028084:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028088:	2b00      	cmp	r3, #0
 802808a:	d045      	beq.n	8028118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802808c:	4a79      	ldr	r2, [pc, #484]	; (8028274 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
 802808e:	2bff      	cmp	r3, #255	; 0xff
 8028090:	6811      	ldr	r1, [r2, #0]
 8028092:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8028096:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 802809a:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 802809e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80280a2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80280a6:	b2c9      	uxtb	r1, r1
 80280a8:	f000 80bb 	beq.w	8028222 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80280ac:	f8b8 c000 	ldrh.w	ip, [r8]
 80280b0:	fa1f fb83 	uxth.w	fp, r3
 80280b4:	43db      	mvns	r3, r3
 80280b6:	fb1e fe0b 	smulbb	lr, lr, fp
 80280ba:	ea4f 202c 	mov.w	r0, ip, asr #8
 80280be:	fb12 f20b 	smulbb	r2, r2, fp
 80280c2:	b2db      	uxtb	r3, r3
 80280c4:	fb11 f10b 	smulbb	r1, r1, fp
 80280c8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80280cc:	fb00 e003 	mla	r0, r0, r3, lr
 80280d0:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80280d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80280d8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80280dc:	b280      	uxth	r0, r0
 80280de:	fa5f fc8c 	uxtb.w	ip, ip
 80280e2:	fb0e 2203 	mla	r2, lr, r3, r2
 80280e6:	fb0c 1303 	mla	r3, ip, r3, r1
 80280ea:	1c41      	adds	r1, r0, #1
 80280ec:	b292      	uxth	r2, r2
 80280ee:	b29b      	uxth	r3, r3
 80280f0:	f102 0e01 	add.w	lr, r2, #1
 80280f4:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80280f8:	1c59      	adds	r1, r3, #1
 80280fa:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80280fe:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028102:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028106:	0952      	lsrs	r2, r2, #5
 8028108:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802810c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028110:	4310      	orrs	r0, r2
 8028112:	4318      	orrs	r0, r3
 8028114:	f8a8 0000 	strh.w	r0, [r8]
 8028118:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802811a:	f108 0802 	add.w	r8, r8, #2
 802811e:	441c      	add	r4, r3
 8028120:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028122:	441e      	add	r6, r3
 8028124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028126:	3b01      	subs	r3, #1
 8028128:	9309      	str	r3, [sp, #36]	; 0x24
 802812a:	e736      	b.n	8027f9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802812c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802812e:	3d01      	subs	r5, #1
 8028130:	f109 0902 	add.w	r9, r9, #2
 8028134:	441c      	add	r4, r3
 8028136:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028138:	441e      	add	r6, r3
 802813a:	e70e      	b.n	8027f5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802813c:	d020      	beq.n	8028180 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802813e:	1e6b      	subs	r3, r5, #1
 8028140:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028142:	fb00 4003 	mla	r0, r0, r3, r4
 8028146:	1400      	asrs	r0, r0, #16
 8028148:	f53f af23 	bmi.w	8027f92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802814c:	3901      	subs	r1, #1
 802814e:	4288      	cmp	r0, r1
 8028150:	f6bf af1f 	bge.w	8027f92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028154:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028156:	fb01 6303 	mla	r3, r1, r3, r6
 802815a:	141b      	asrs	r3, r3, #16
 802815c:	f53f af19 	bmi.w	8027f92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028160:	3a01      	subs	r2, #1
 8028162:	4293      	cmp	r3, r2
 8028164:	f6bf af15 	bge.w	8027f92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028168:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802816c:	46aa      	mov	sl, r5
 802816e:	46c8      	mov	r8, r9
 8028170:	9308      	str	r3, [sp, #32]
 8028172:	f1ba 0f00 	cmp.w	sl, #0
 8028176:	dc7f      	bgt.n	8028278 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8028178:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802817c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028180:	9b07      	ldr	r3, [sp, #28]
 8028182:	2b00      	cmp	r3, #0
 8028184:	f340 8143 	ble.w	802840e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8028188:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802818c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802818e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028192:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028196:	eef0 6a48 	vmov.f32	s13, s16
 802819a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802819e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80281a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80281a6:	ee16 4a90 	vmov	r4, s13
 80281aa:	eef0 6a68 	vmov.f32	s13, s17
 80281ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80281b2:	ee16 6a90 	vmov	r6, s13
 80281b6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80281ba:	ee69 7a27 	vmul.f32	s15, s18, s15
 80281be:	ee37 8a48 	vsub.f32	s16, s14, s16
 80281c2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80281c6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80281ca:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80281ce:	ee18 2a10 	vmov	r2, s16
 80281d2:	eeb0 8a47 	vmov.f32	s16, s14
 80281d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80281da:	ee18 2a90 	vmov	r2, s17
 80281de:	9327      	str	r3, [sp, #156]	; 0x9c
 80281e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80281e2:	eef0 8a67 	vmov.f32	s17, s15
 80281e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80281ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80281ec:	9b07      	ldr	r3, [sp, #28]
 80281ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80281f0:	3b01      	subs	r3, #1
 80281f2:	9307      	str	r3, [sp, #28]
 80281f4:	bf08      	it	eq
 80281f6:	4615      	moveq	r5, r2
 80281f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80281fa:	bf18      	it	ne
 80281fc:	461d      	movne	r5, r3
 80281fe:	e69d      	b.n	8027f3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028200:	2900      	cmp	r1, #0
 8028202:	f43f af25 	beq.w	8028050 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8028206:	eb0a 0003 	add.w	r0, sl, r3
 802820a:	0843      	lsrs	r3, r0, #1
 802820c:	07c0      	lsls	r0, r0, #31
 802820e:	5cfb      	ldrb	r3, [r7, r3]
 8028210:	bf54      	ite	pl
 8028212:	f003 030f 	andpl.w	r3, r3, #15
 8028216:	111b      	asrmi	r3, r3, #4
 8028218:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802821c:	b2db      	uxtb	r3, r3
 802821e:	930a      	str	r3, [sp, #40]	; 0x28
 8028220:	e716      	b.n	8028050 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8028222:	00d2      	lsls	r2, r2, #3
 8028224:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8028228:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 802822c:	f8a8 1000 	strh.w	r1, [r8]
 8028230:	e772      	b.n	8028118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028232:	f113 0b01 	adds.w	fp, r3, #1
 8028236:	f53f af6f 	bmi.w	8028118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802823a:	45dc      	cmp	ip, fp
 802823c:	f6ff af6c 	blt.w	8028118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028240:	f110 0b01 	adds.w	fp, r0, #1
 8028244:	f53f af68 	bmi.w	8028118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028248:	45de      	cmp	lr, fp
 802824a:	f6ff af65 	blt.w	8028118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802824e:	9302      	str	r3, [sp, #8]
 8028250:	fa0f f38e 	sxth.w	r3, lr
 8028254:	9a08      	ldr	r2, [sp, #32]
 8028256:	9301      	str	r3, [sp, #4]
 8028258:	fa0f f38c 	sxth.w	r3, ip
 802825c:	9105      	str	r1, [sp, #20]
 802825e:	4641      	mov	r1, r8
 8028260:	9300      	str	r3, [sp, #0]
 8028262:	4653      	mov	r3, sl
 8028264:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028268:	463a      	mov	r2, r7
 802826a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802826c:	f7ff fd56 	bl	8027d1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8028270:	e752      	b.n	8028118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028272:	bf00      	nop
 8028274:	200057e8 	.word	0x200057e8
 8028278:	1422      	asrs	r2, r4, #16
 802827a:	9906      	ldr	r1, [sp, #24]
 802827c:	1433      	asrs	r3, r6, #16
 802827e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028282:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028286:	fb01 2303 	mla	r3, r1, r3, r2
 802828a:	085a      	lsrs	r2, r3, #1
 802828c:	07d9      	lsls	r1, r3, #31
 802828e:	5cba      	ldrb	r2, [r7, r2]
 8028290:	bf54      	ite	pl
 8028292:	f002 020f 	andpl.w	r2, r2, #15
 8028296:	1112      	asrmi	r2, r2, #4
 8028298:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802829c:	b2d2      	uxtb	r2, r2
 802829e:	2800      	cmp	r0, #0
 80282a0:	f000 809c 	beq.w	80283dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 80282a4:	f103 0e01 	add.w	lr, r3, #1
 80282a8:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80282ac:	f01e 0f01 	tst.w	lr, #1
 80282b0:	5c79      	ldrb	r1, [r7, r1]
 80282b2:	bf0c      	ite	eq
 80282b4:	f001 010f 	andeq.w	r1, r1, #15
 80282b8:	1109      	asrne	r1, r1, #4
 80282ba:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80282be:	b2c9      	uxtb	r1, r1
 80282c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80282c2:	f1bc 0f00 	cmp.w	ip, #0
 80282c6:	d01a      	beq.n	80282fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 80282c8:	9908      	ldr	r1, [sp, #32]
 80282ca:	440b      	add	r3, r1
 80282cc:	0859      	lsrs	r1, r3, #1
 80282ce:	f013 0f01 	tst.w	r3, #1
 80282d2:	f103 0301 	add.w	r3, r3, #1
 80282d6:	5c79      	ldrb	r1, [r7, r1]
 80282d8:	bf0c      	ite	eq
 80282da:	f001 010f 	andeq.w	r1, r1, #15
 80282de:	1109      	asrne	r1, r1, #4
 80282e0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80282e4:	b2c9      	uxtb	r1, r1
 80282e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80282e8:	0859      	lsrs	r1, r3, #1
 80282ea:	07db      	lsls	r3, r3, #31
 80282ec:	5c79      	ldrb	r1, [r7, r1]
 80282ee:	bf54      	ite	pl
 80282f0:	f001 010f 	andpl.w	r1, r1, #15
 80282f4:	1109      	asrmi	r1, r1, #4
 80282f6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80282fa:	b2c9      	uxtb	r1, r1
 80282fc:	9110      	str	r1, [sp, #64]	; 0x40
 80282fe:	b280      	uxth	r0, r0
 8028300:	fa1f fc8c 	uxth.w	ip, ip
 8028304:	fb00 f30c 	mul.w	r3, r0, ip
 8028308:	0100      	lsls	r0, r0, #4
 802830a:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802830e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8028312:	1ac0      	subs	r0, r0, r3
 8028314:	fa1f fc8c 	uxth.w	ip, ip
 8028318:	b280      	uxth	r0, r0
 802831a:	eba1 010c 	sub.w	r1, r1, ip
 802831e:	fa1f fe81 	uxth.w	lr, r1
 8028322:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028324:	4348      	muls	r0, r1
 8028326:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8028328:	fb02 020e 	mla	r2, r2, lr, r0
 802832c:	fb0c 2c01 	mla	ip, ip, r1, r2
 8028330:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028332:	fb03 c302 	mla	r3, r3, r2, ip
 8028336:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802833a:	2b00      	cmp	r3, #0
 802833c:	d045      	beq.n	80283ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802833e:	4a36      	ldr	r2, [pc, #216]	; (8028418 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
 8028340:	2bff      	cmp	r3, #255	; 0xff
 8028342:	6811      	ldr	r1, [r2, #0]
 8028344:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8028348:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 802834c:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8028350:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8028354:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028358:	b2c9      	uxtb	r1, r1
 802835a:	d050      	beq.n	80283fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 802835c:	f8b8 c000 	ldrh.w	ip, [r8]
 8028360:	fa1f fb83 	uxth.w	fp, r3
 8028364:	43db      	mvns	r3, r3
 8028366:	fb1e fe0b 	smulbb	lr, lr, fp
 802836a:	ea4f 202c 	mov.w	r0, ip, asr #8
 802836e:	fb12 f20b 	smulbb	r2, r2, fp
 8028372:	b2db      	uxtb	r3, r3
 8028374:	fb11 f10b 	smulbb	r1, r1, fp
 8028378:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802837c:	fb00 e003 	mla	r0, r0, r3, lr
 8028380:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8028384:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028388:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802838c:	b280      	uxth	r0, r0
 802838e:	fa5f fc8c 	uxtb.w	ip, ip
 8028392:	fb0e 2203 	mla	r2, lr, r3, r2
 8028396:	fb0c 1103 	mla	r1, ip, r3, r1
 802839a:	b292      	uxth	r2, r2
 802839c:	b289      	uxth	r1, r1
 802839e:	f102 0e01 	add.w	lr, r2, #1
 80283a2:	1c4b      	adds	r3, r1, #1
 80283a4:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80283a8:	f100 0e01 	add.w	lr, r0, #1
 80283ac:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80283b0:	0952      	lsrs	r2, r2, #5
 80283b2:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80283b6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80283ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80283be:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80283c2:	4302      	orrs	r2, r0
 80283c4:	430a      	orrs	r2, r1
 80283c6:	f8a8 2000 	strh.w	r2, [r8]
 80283ca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80283cc:	f108 0802 	add.w	r8, r8, #2
 80283d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80283d4:	441c      	add	r4, r3
 80283d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80283d8:	441e      	add	r6, r3
 80283da:	e6ca      	b.n	8028172 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 80283dc:	f1bc 0f00 	cmp.w	ip, #0
 80283e0:	d08d      	beq.n	80282fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 80283e2:	9908      	ldr	r1, [sp, #32]
 80283e4:	440b      	add	r3, r1
 80283e6:	0859      	lsrs	r1, r3, #1
 80283e8:	07db      	lsls	r3, r3, #31
 80283ea:	5c79      	ldrb	r1, [r7, r1]
 80283ec:	bf54      	ite	pl
 80283ee:	f001 010f 	andpl.w	r1, r1, #15
 80283f2:	1109      	asrmi	r1, r1, #4
 80283f4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80283f8:	b2c9      	uxtb	r1, r1
 80283fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80283fc:	e77f      	b.n	80282fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 80283fe:	00d2      	lsls	r2, r2, #3
 8028400:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8028404:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8028408:	f8a8 1000 	strh.w	r1, [r8]
 802840c:	e7dd      	b.n	80283ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802840e:	b013      	add	sp, #76	; 0x4c
 8028410:	ecbd 8b08 	vpop	{d8-d11}
 8028414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028418:	200057e8 	.word	0x200057e8

0802841c <CRC_Lock>:
 802841c:	4a1d      	ldr	r2, [pc, #116]	; (8028494 <CRC_Lock+0x78>)
 802841e:	b530      	push	{r4, r5, lr}
 8028420:	6813      	ldr	r3, [r2, #0]
 8028422:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8028426:	f24c 2540 	movw	r5, #49728	; 0xc240
 802842a:	f023 0301 	bic.w	r3, r3, #1
 802842e:	6013      	str	r3, [r2, #0]
 8028430:	4b19      	ldr	r3, [pc, #100]	; (8028498 <CRC_Lock+0x7c>)
 8028432:	681a      	ldr	r2, [r3, #0]
 8028434:	4022      	ands	r2, r4
 8028436:	42aa      	cmp	r2, r5
 8028438:	d005      	beq.n	8028446 <CRC_Lock+0x2a>
 802843a:	681b      	ldr	r3, [r3, #0]
 802843c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8028440:	4023      	ands	r3, r4
 8028442:	4293      	cmp	r3, r2
 8028444:	d11d      	bne.n	8028482 <CRC_Lock+0x66>
 8028446:	4b15      	ldr	r3, [pc, #84]	; (802849c <CRC_Lock+0x80>)
 8028448:	681b      	ldr	r3, [r3, #0]
 802844a:	b9d3      	cbnz	r3, 8028482 <CRC_Lock+0x66>
 802844c:	4a14      	ldr	r2, [pc, #80]	; (80284a0 <CRC_Lock+0x84>)
 802844e:	6813      	ldr	r3, [r2, #0]
 8028450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028454:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8028458:	d006      	beq.n	8028468 <CRC_Lock+0x4c>
 802845a:	6813      	ldr	r3, [r2, #0]
 802845c:	f240 4283 	movw	r2, #1155	; 0x483
 8028460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028464:	4293      	cmp	r3, r2
 8028466:	d10c      	bne.n	8028482 <CRC_Lock+0x66>
 8028468:	4b0e      	ldr	r3, [pc, #56]	; (80284a4 <CRC_Lock+0x88>)
 802846a:	2201      	movs	r2, #1
 802846c:	601a      	str	r2, [r3, #0]
 802846e:	681a      	ldr	r2, [r3, #0]
 8028470:	2a00      	cmp	r2, #0
 8028472:	d1fc      	bne.n	802846e <CRC_Lock+0x52>
 8028474:	4b0c      	ldr	r3, [pc, #48]	; (80284a8 <CRC_Lock+0x8c>)
 8028476:	6018      	str	r0, [r3, #0]
 8028478:	6818      	ldr	r0, [r3, #0]
 802847a:	1a43      	subs	r3, r0, r1
 802847c:	4258      	negs	r0, r3
 802847e:	4158      	adcs	r0, r3
 8028480:	bd30      	pop	{r4, r5, pc}
 8028482:	4b0a      	ldr	r3, [pc, #40]	; (80284ac <CRC_Lock+0x90>)
 8028484:	2201      	movs	r2, #1
 8028486:	601a      	str	r2, [r3, #0]
 8028488:	681a      	ldr	r2, [r3, #0]
 802848a:	2a00      	cmp	r2, #0
 802848c:	d1fc      	bne.n	8028488 <CRC_Lock+0x6c>
 802848e:	4b08      	ldr	r3, [pc, #32]	; (80284b0 <CRC_Lock+0x94>)
 8028490:	e7f1      	b.n	8028476 <CRC_Lock+0x5a>
 8028492:	bf00      	nop
 8028494:	e0002000 	.word	0xe0002000
 8028498:	e000ed00 	.word	0xe000ed00
 802849c:	e0042000 	.word	0xe0042000
 80284a0:	5c001000 	.word	0x5c001000
 80284a4:	58024c08 	.word	0x58024c08
 80284a8:	58024c00 	.word	0x58024c00
 80284ac:	40023008 	.word	0x40023008
 80284b0:	40023000 	.word	0x40023000

080284b4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80284b4:	6101      	str	r1, [r0, #16]
 80284b6:	4770      	bx	lr

080284b8 <_ZN8touchgfx8Gestures4tickEv>:
 80284b8:	7b83      	ldrb	r3, [r0, #14]
 80284ba:	b14b      	cbz	r3, 80284d0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80284bc:	8903      	ldrh	r3, [r0, #8]
 80284be:	3301      	adds	r3, #1
 80284c0:	b29b      	uxth	r3, r3
 80284c2:	2b07      	cmp	r3, #7
 80284c4:	8103      	strh	r3, [r0, #8]
 80284c6:	bf81      	itttt	hi
 80284c8:	2300      	movhi	r3, #0
 80284ca:	8143      	strhhi	r3, [r0, #10]
 80284cc:	8183      	strhhi	r3, [r0, #12]
 80284ce:	7383      	strbhi	r3, [r0, #14]
 80284d0:	4770      	bx	lr
	...

080284d4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80284d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80284d8:	4604      	mov	r4, r0
 80284da:	4698      	mov	r8, r3
 80284dc:	8880      	ldrh	r0, [r0, #4]
 80284de:	4617      	mov	r7, r2
 80284e0:	4b1d      	ldr	r3, [pc, #116]	; (8028558 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80284e2:	460e      	mov	r6, r1
 80284e4:	f8ad 0006 	strh.w	r0, [sp, #6]
 80284e8:	eba8 0000 	sub.w	r0, r8, r0
 80284ec:	9300      	str	r3, [sp, #0]
 80284ee:	2300      	movs	r3, #0
 80284f0:	b280      	uxth	r0, r0
 80284f2:	8aa2      	ldrh	r2, [r4, #20]
 80284f4:	f88d 3004 	strb.w	r3, [sp, #4]
 80284f8:	b203      	sxth	r3, r0
 80284fa:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80284fe:	88e1      	ldrh	r1, [r4, #6]
 8028500:	2b00      	cmp	r3, #0
 8028502:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028506:	f8ad 1008 	strh.w	r1, [sp, #8]
 802850a:	bfb8      	it	lt
 802850c:	4240      	neglt	r0, r0
 802850e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028512:	bfb8      	it	lt
 8028514:	b203      	sxthlt	r3, r0
 8028516:	4293      	cmp	r3, r2
 8028518:	dc08      	bgt.n	802852c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802851a:	1a69      	subs	r1, r5, r1
 802851c:	b289      	uxth	r1, r1
 802851e:	b20b      	sxth	r3, r1
 8028520:	2b00      	cmp	r3, #0
 8028522:	bfbc      	itt	lt
 8028524:	4249      	neglt	r1, r1
 8028526:	b20b      	sxthlt	r3, r1
 8028528:	429a      	cmp	r2, r3
 802852a:	da13      	bge.n	8028554 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802852c:	6920      	ldr	r0, [r4, #16]
 802852e:	4669      	mov	r1, sp
 8028530:	eba8 0606 	sub.w	r6, r8, r6
 8028534:	1bef      	subs	r7, r5, r7
 8028536:	6803      	ldr	r3, [r0, #0]
 8028538:	685b      	ldr	r3, [r3, #4]
 802853a:	4798      	blx	r3
 802853c:	2300      	movs	r3, #0
 802853e:	2001      	movs	r0, #1
 8028540:	8166      	strh	r6, [r4, #10]
 8028542:	8123      	strh	r3, [r4, #8]
 8028544:	81a7      	strh	r7, [r4, #12]
 8028546:	f8a4 8004 	strh.w	r8, [r4, #4]
 802854a:	80e5      	strh	r5, [r4, #6]
 802854c:	73a0      	strb	r0, [r4, #14]
 802854e:	b004      	add	sp, #16
 8028550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028554:	2000      	movs	r0, #0
 8028556:	e7fa      	b.n	802854e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8028558:	0802c320 	.word	0x0802c320

0802855c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802855c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802855e:	461e      	mov	r6, r3
 8028560:	1e4b      	subs	r3, r1, #1
 8028562:	b085      	sub	sp, #20
 8028564:	4604      	mov	r4, r0
 8028566:	2b01      	cmp	r3, #1
 8028568:	460d      	mov	r5, r1
 802856a:	4617      	mov	r7, r2
 802856c:	d84b      	bhi.n	8028606 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802856e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028572:	1cd3      	adds	r3, r2, #3
 8028574:	b29b      	uxth	r3, r3
 8028576:	2b06      	cmp	r3, #6
 8028578:	d916      	bls.n	80285a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802857a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802861c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802857e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028582:	f8cd c004 	str.w	ip, [sp, #4]
 8028586:	f04f 0c00 	mov.w	ip, #0
 802858a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802858e:	6900      	ldr	r0, [r0, #16]
 8028590:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028594:	a901      	add	r1, sp, #4
 8028596:	f88d c008 	strb.w	ip, [sp, #8]
 802859a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802859e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80285a2:	6803      	ldr	r3, [r0, #0]
 80285a4:	689b      	ldr	r3, [r3, #8]
 80285a6:	4798      	blx	r3
 80285a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80285ac:	1cd3      	adds	r3, r2, #3
 80285ae:	b29b      	uxth	r3, r3
 80285b0:	2b06      	cmp	r3, #6
 80285b2:	d916      	bls.n	80285e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80285b4:	f8df c064 	ldr.w	ip, [pc, #100]	; 802861c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80285b8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80285bc:	f8cd c004 	str.w	ip, [sp, #4]
 80285c0:	f04f 0c01 	mov.w	ip, #1
 80285c4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80285c8:	6920      	ldr	r0, [r4, #16]
 80285ca:	f8ad 100c 	strh.w	r1, [sp, #12]
 80285ce:	a901      	add	r1, sp, #4
 80285d0:	f88d c008 	strb.w	ip, [sp, #8]
 80285d4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80285d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80285dc:	6803      	ldr	r3, [r0, #0]
 80285de:	689b      	ldr	r3, [r3, #8]
 80285e0:	4798      	blx	r3
 80285e2:	4b0d      	ldr	r3, [pc, #52]	; (8028618 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80285e4:	a901      	add	r1, sp, #4
 80285e6:	6920      	ldr	r0, [r4, #16]
 80285e8:	9301      	str	r3, [sp, #4]
 80285ea:	2300      	movs	r3, #0
 80285ec:	f88d 5008 	strb.w	r5, [sp, #8]
 80285f0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80285f4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80285f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80285fc:	6803      	ldr	r3, [r0, #0]
 80285fe:	681b      	ldr	r3, [r3, #0]
 8028600:	4798      	blx	r3
 8028602:	b005      	add	sp, #20
 8028604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028606:	2900      	cmp	r1, #0
 8028608:	d1eb      	bne.n	80285e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802860a:	80a2      	strh	r2, [r4, #4]
 802860c:	80c6      	strh	r6, [r0, #6]
 802860e:	60a1      	str	r1, [r4, #8]
 8028610:	81a1      	strh	r1, [r4, #12]
 8028612:	73a1      	strb	r1, [r4, #14]
 8028614:	e7e5      	b.n	80285e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028616:	bf00      	nop
 8028618:	0802c30c 	.word	0x0802c30c
 802861c:	0802c334 	.word	0x0802c334

08028620 <__aeabi_atexit>:
 8028620:	460b      	mov	r3, r1
 8028622:	4601      	mov	r1, r0
 8028624:	4618      	mov	r0, r3
 8028626:	f000 b853 	b.w	80286d0 <__cxa_atexit>

0802862a <_ZdlPvj>:
 802862a:	f000 b812 	b.w	8028652 <_ZdlPv>

0802862e <__cxa_guard_acquire>:
 802862e:	6803      	ldr	r3, [r0, #0]
 8028630:	07db      	lsls	r3, r3, #31
 8028632:	d406      	bmi.n	8028642 <__cxa_guard_acquire+0x14>
 8028634:	7843      	ldrb	r3, [r0, #1]
 8028636:	b103      	cbz	r3, 802863a <__cxa_guard_acquire+0xc>
 8028638:	deff      	udf	#255	; 0xff
 802863a:	2301      	movs	r3, #1
 802863c:	7043      	strb	r3, [r0, #1]
 802863e:	4618      	mov	r0, r3
 8028640:	4770      	bx	lr
 8028642:	2000      	movs	r0, #0
 8028644:	4770      	bx	lr

08028646 <__cxa_guard_release>:
 8028646:	2301      	movs	r3, #1
 8028648:	6003      	str	r3, [r0, #0]
 802864a:	4770      	bx	lr

0802864c <__cxa_pure_virtual>:
 802864c:	b508      	push	{r3, lr}
 802864e:	f000 f80f 	bl	8028670 <_ZSt9terminatev>

08028652 <_ZdlPv>:
 8028652:	f000 b989 	b.w	8028968 <free>

08028656 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028656:	b508      	push	{r3, lr}
 8028658:	4780      	blx	r0
 802865a:	f000 f80e 	bl	802867a <abort>
	...

08028660 <_ZSt13get_terminatev>:
 8028660:	4b02      	ldr	r3, [pc, #8]	; (802866c <_ZSt13get_terminatev+0xc>)
 8028662:	6818      	ldr	r0, [r3, #0]
 8028664:	f3bf 8f5b 	dmb	ish
 8028668:	4770      	bx	lr
 802866a:	bf00      	nop
 802866c:	200001e8 	.word	0x200001e8

08028670 <_ZSt9terminatev>:
 8028670:	b508      	push	{r3, lr}
 8028672:	f7ff fff5 	bl	8028660 <_ZSt13get_terminatev>
 8028676:	f7ff ffee 	bl	8028656 <_ZN10__cxxabiv111__terminateEPFvvE>

0802867a <abort>:
 802867a:	b508      	push	{r3, lr}
 802867c:	2006      	movs	r0, #6
 802867e:	f000 fe01 	bl	8029284 <raise>
 8028682:	2001      	movs	r0, #1
 8028684:	f7db fa9a 	bl	8003bbc <_exit>

08028688 <__assert_func>:
 8028688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802868a:	4614      	mov	r4, r2
 802868c:	461a      	mov	r2, r3
 802868e:	4b09      	ldr	r3, [pc, #36]	; (80286b4 <__assert_func+0x2c>)
 8028690:	681b      	ldr	r3, [r3, #0]
 8028692:	4605      	mov	r5, r0
 8028694:	68d8      	ldr	r0, [r3, #12]
 8028696:	b14c      	cbz	r4, 80286ac <__assert_func+0x24>
 8028698:	4b07      	ldr	r3, [pc, #28]	; (80286b8 <__assert_func+0x30>)
 802869a:	9100      	str	r1, [sp, #0]
 802869c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80286a0:	4906      	ldr	r1, [pc, #24]	; (80286bc <__assert_func+0x34>)
 80286a2:	462b      	mov	r3, r5
 80286a4:	f000 f8fe 	bl	80288a4 <fiprintf>
 80286a8:	f7ff ffe7 	bl	802867a <abort>
 80286ac:	4b04      	ldr	r3, [pc, #16]	; (80286c0 <__assert_func+0x38>)
 80286ae:	461c      	mov	r4, r3
 80286b0:	e7f3      	b.n	802869a <__assert_func+0x12>
 80286b2:	bf00      	nop
 80286b4:	200001ec 	.word	0x200001ec
 80286b8:	0802d6ff 	.word	0x0802d6ff
 80286bc:	0802d70c 	.word	0x0802d70c
 80286c0:	0802d73a 	.word	0x0802d73a

080286c4 <atexit>:
 80286c4:	2300      	movs	r3, #0
 80286c6:	4601      	mov	r1, r0
 80286c8:	461a      	mov	r2, r3
 80286ca:	4618      	mov	r0, r3
 80286cc:	f000 bf0c 	b.w	80294e8 <__register_exitproc>

080286d0 <__cxa_atexit>:
 80286d0:	b510      	push	{r4, lr}
 80286d2:	4c05      	ldr	r4, [pc, #20]	; (80286e8 <__cxa_atexit+0x18>)
 80286d4:	4613      	mov	r3, r2
 80286d6:	b12c      	cbz	r4, 80286e4 <__cxa_atexit+0x14>
 80286d8:	460a      	mov	r2, r1
 80286da:	4601      	mov	r1, r0
 80286dc:	2002      	movs	r0, #2
 80286de:	f000 ff03 	bl	80294e8 <__register_exitproc>
 80286e2:	bd10      	pop	{r4, pc}
 80286e4:	4620      	mov	r0, r4
 80286e6:	e7fc      	b.n	80286e2 <__cxa_atexit+0x12>
 80286e8:	080294e9 	.word	0x080294e9

080286ec <__errno>:
 80286ec:	4b01      	ldr	r3, [pc, #4]	; (80286f4 <__errno+0x8>)
 80286ee:	6818      	ldr	r0, [r3, #0]
 80286f0:	4770      	bx	lr
 80286f2:	bf00      	nop
 80286f4:	200001ec 	.word	0x200001ec

080286f8 <std>:
 80286f8:	2300      	movs	r3, #0
 80286fa:	b510      	push	{r4, lr}
 80286fc:	4604      	mov	r4, r0
 80286fe:	e9c0 3300 	strd	r3, r3, [r0]
 8028702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028706:	6083      	str	r3, [r0, #8]
 8028708:	8181      	strh	r1, [r0, #12]
 802870a:	6643      	str	r3, [r0, #100]	; 0x64
 802870c:	81c2      	strh	r2, [r0, #14]
 802870e:	6183      	str	r3, [r0, #24]
 8028710:	4619      	mov	r1, r3
 8028712:	2208      	movs	r2, #8
 8028714:	305c      	adds	r0, #92	; 0x5c
 8028716:	f000 f93d 	bl	8028994 <memset>
 802871a:	4b05      	ldr	r3, [pc, #20]	; (8028730 <std+0x38>)
 802871c:	6263      	str	r3, [r4, #36]	; 0x24
 802871e:	4b05      	ldr	r3, [pc, #20]	; (8028734 <std+0x3c>)
 8028720:	62a3      	str	r3, [r4, #40]	; 0x28
 8028722:	4b05      	ldr	r3, [pc, #20]	; (8028738 <std+0x40>)
 8028724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028726:	4b05      	ldr	r3, [pc, #20]	; (802873c <std+0x44>)
 8028728:	6224      	str	r4, [r4, #32]
 802872a:	6323      	str	r3, [r4, #48]	; 0x30
 802872c:	bd10      	pop	{r4, pc}
 802872e:	bf00      	nop
 8028730:	080292bd 	.word	0x080292bd
 8028734:	080292df 	.word	0x080292df
 8028738:	08029317 	.word	0x08029317
 802873c:	0802933b 	.word	0x0802933b

08028740 <_cleanup_r>:
 8028740:	4901      	ldr	r1, [pc, #4]	; (8028748 <_cleanup_r+0x8>)
 8028742:	f000 b8c1 	b.w	80288c8 <_fwalk_reent>
 8028746:	bf00      	nop
 8028748:	080296d9 	.word	0x080296d9

0802874c <__sfmoreglue>:
 802874c:	b570      	push	{r4, r5, r6, lr}
 802874e:	2268      	movs	r2, #104	; 0x68
 8028750:	1e4d      	subs	r5, r1, #1
 8028752:	4355      	muls	r5, r2
 8028754:	460e      	mov	r6, r1
 8028756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802875a:	f000 f98f 	bl	8028a7c <_malloc_r>
 802875e:	4604      	mov	r4, r0
 8028760:	b140      	cbz	r0, 8028774 <__sfmoreglue+0x28>
 8028762:	2100      	movs	r1, #0
 8028764:	e9c0 1600 	strd	r1, r6, [r0]
 8028768:	300c      	adds	r0, #12
 802876a:	60a0      	str	r0, [r4, #8]
 802876c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028770:	f000 f910 	bl	8028994 <memset>
 8028774:	4620      	mov	r0, r4
 8028776:	bd70      	pop	{r4, r5, r6, pc}

08028778 <__sfp_lock_acquire>:
 8028778:	4801      	ldr	r0, [pc, #4]	; (8028780 <__sfp_lock_acquire+0x8>)
 802877a:	f000 b8ea 	b.w	8028952 <__retarget_lock_acquire_recursive>
 802877e:	bf00      	nop
 8028780:	200058de 	.word	0x200058de

08028784 <__sfp_lock_release>:
 8028784:	4801      	ldr	r0, [pc, #4]	; (802878c <__sfp_lock_release+0x8>)
 8028786:	f000 b8e6 	b.w	8028956 <__retarget_lock_release_recursive>
 802878a:	bf00      	nop
 802878c:	200058de 	.word	0x200058de

08028790 <__sinit_lock_acquire>:
 8028790:	4801      	ldr	r0, [pc, #4]	; (8028798 <__sinit_lock_acquire+0x8>)
 8028792:	f000 b8de 	b.w	8028952 <__retarget_lock_acquire_recursive>
 8028796:	bf00      	nop
 8028798:	200058df 	.word	0x200058df

0802879c <__sinit_lock_release>:
 802879c:	4801      	ldr	r0, [pc, #4]	; (80287a4 <__sinit_lock_release+0x8>)
 802879e:	f000 b8da 	b.w	8028956 <__retarget_lock_release_recursive>
 80287a2:	bf00      	nop
 80287a4:	200058df 	.word	0x200058df

080287a8 <__sinit>:
 80287a8:	b510      	push	{r4, lr}
 80287aa:	4604      	mov	r4, r0
 80287ac:	f7ff fff0 	bl	8028790 <__sinit_lock_acquire>
 80287b0:	69a3      	ldr	r3, [r4, #24]
 80287b2:	b11b      	cbz	r3, 80287bc <__sinit+0x14>
 80287b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80287b8:	f7ff bff0 	b.w	802879c <__sinit_lock_release>
 80287bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80287c0:	6523      	str	r3, [r4, #80]	; 0x50
 80287c2:	4b13      	ldr	r3, [pc, #76]	; (8028810 <__sinit+0x68>)
 80287c4:	4a13      	ldr	r2, [pc, #76]	; (8028814 <__sinit+0x6c>)
 80287c6:	681b      	ldr	r3, [r3, #0]
 80287c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80287ca:	42a3      	cmp	r3, r4
 80287cc:	bf04      	itt	eq
 80287ce:	2301      	moveq	r3, #1
 80287d0:	61a3      	streq	r3, [r4, #24]
 80287d2:	4620      	mov	r0, r4
 80287d4:	f000 f820 	bl	8028818 <__sfp>
 80287d8:	6060      	str	r0, [r4, #4]
 80287da:	4620      	mov	r0, r4
 80287dc:	f000 f81c 	bl	8028818 <__sfp>
 80287e0:	60a0      	str	r0, [r4, #8]
 80287e2:	4620      	mov	r0, r4
 80287e4:	f000 f818 	bl	8028818 <__sfp>
 80287e8:	2200      	movs	r2, #0
 80287ea:	60e0      	str	r0, [r4, #12]
 80287ec:	2104      	movs	r1, #4
 80287ee:	6860      	ldr	r0, [r4, #4]
 80287f0:	f7ff ff82 	bl	80286f8 <std>
 80287f4:	68a0      	ldr	r0, [r4, #8]
 80287f6:	2201      	movs	r2, #1
 80287f8:	2109      	movs	r1, #9
 80287fa:	f7ff ff7d 	bl	80286f8 <std>
 80287fe:	68e0      	ldr	r0, [r4, #12]
 8028800:	2202      	movs	r2, #2
 8028802:	2112      	movs	r1, #18
 8028804:	f7ff ff78 	bl	80286f8 <std>
 8028808:	2301      	movs	r3, #1
 802880a:	61a3      	str	r3, [r4, #24]
 802880c:	e7d2      	b.n	80287b4 <__sinit+0xc>
 802880e:	bf00      	nop
 8028810:	0802d79c 	.word	0x0802d79c
 8028814:	08028741 	.word	0x08028741

08028818 <__sfp>:
 8028818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802881a:	4607      	mov	r7, r0
 802881c:	f7ff ffac 	bl	8028778 <__sfp_lock_acquire>
 8028820:	4b1e      	ldr	r3, [pc, #120]	; (802889c <__sfp+0x84>)
 8028822:	681e      	ldr	r6, [r3, #0]
 8028824:	69b3      	ldr	r3, [r6, #24]
 8028826:	b913      	cbnz	r3, 802882e <__sfp+0x16>
 8028828:	4630      	mov	r0, r6
 802882a:	f7ff ffbd 	bl	80287a8 <__sinit>
 802882e:	3648      	adds	r6, #72	; 0x48
 8028830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028834:	3b01      	subs	r3, #1
 8028836:	d503      	bpl.n	8028840 <__sfp+0x28>
 8028838:	6833      	ldr	r3, [r6, #0]
 802883a:	b30b      	cbz	r3, 8028880 <__sfp+0x68>
 802883c:	6836      	ldr	r6, [r6, #0]
 802883e:	e7f7      	b.n	8028830 <__sfp+0x18>
 8028840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028844:	b9d5      	cbnz	r5, 802887c <__sfp+0x64>
 8028846:	4b16      	ldr	r3, [pc, #88]	; (80288a0 <__sfp+0x88>)
 8028848:	60e3      	str	r3, [r4, #12]
 802884a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802884e:	6665      	str	r5, [r4, #100]	; 0x64
 8028850:	f000 f87e 	bl	8028950 <__retarget_lock_init_recursive>
 8028854:	f7ff ff96 	bl	8028784 <__sfp_lock_release>
 8028858:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802885c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8028860:	6025      	str	r5, [r4, #0]
 8028862:	61a5      	str	r5, [r4, #24]
 8028864:	2208      	movs	r2, #8
 8028866:	4629      	mov	r1, r5
 8028868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802886c:	f000 f892 	bl	8028994 <memset>
 8028870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8028874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8028878:	4620      	mov	r0, r4
 802887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802887c:	3468      	adds	r4, #104	; 0x68
 802887e:	e7d9      	b.n	8028834 <__sfp+0x1c>
 8028880:	2104      	movs	r1, #4
 8028882:	4638      	mov	r0, r7
 8028884:	f7ff ff62 	bl	802874c <__sfmoreglue>
 8028888:	4604      	mov	r4, r0
 802888a:	6030      	str	r0, [r6, #0]
 802888c:	2800      	cmp	r0, #0
 802888e:	d1d5      	bne.n	802883c <__sfp+0x24>
 8028890:	f7ff ff78 	bl	8028784 <__sfp_lock_release>
 8028894:	230c      	movs	r3, #12
 8028896:	603b      	str	r3, [r7, #0]
 8028898:	e7ee      	b.n	8028878 <__sfp+0x60>
 802889a:	bf00      	nop
 802889c:	0802d79c 	.word	0x0802d79c
 80288a0:	ffff0001 	.word	0xffff0001

080288a4 <fiprintf>:
 80288a4:	b40e      	push	{r1, r2, r3}
 80288a6:	b503      	push	{r0, r1, lr}
 80288a8:	4601      	mov	r1, r0
 80288aa:	ab03      	add	r3, sp, #12
 80288ac:	4805      	ldr	r0, [pc, #20]	; (80288c4 <fiprintf+0x20>)
 80288ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80288b2:	6800      	ldr	r0, [r0, #0]
 80288b4:	9301      	str	r3, [sp, #4]
 80288b6:	f000 f97f 	bl	8028bb8 <_vfiprintf_r>
 80288ba:	b002      	add	sp, #8
 80288bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80288c0:	b003      	add	sp, #12
 80288c2:	4770      	bx	lr
 80288c4:	200001ec 	.word	0x200001ec

080288c8 <_fwalk_reent>:
 80288c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80288cc:	4606      	mov	r6, r0
 80288ce:	4688      	mov	r8, r1
 80288d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80288d4:	2700      	movs	r7, #0
 80288d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80288da:	f1b9 0901 	subs.w	r9, r9, #1
 80288de:	d505      	bpl.n	80288ec <_fwalk_reent+0x24>
 80288e0:	6824      	ldr	r4, [r4, #0]
 80288e2:	2c00      	cmp	r4, #0
 80288e4:	d1f7      	bne.n	80288d6 <_fwalk_reent+0xe>
 80288e6:	4638      	mov	r0, r7
 80288e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80288ec:	89ab      	ldrh	r3, [r5, #12]
 80288ee:	2b01      	cmp	r3, #1
 80288f0:	d907      	bls.n	8028902 <_fwalk_reent+0x3a>
 80288f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80288f6:	3301      	adds	r3, #1
 80288f8:	d003      	beq.n	8028902 <_fwalk_reent+0x3a>
 80288fa:	4629      	mov	r1, r5
 80288fc:	4630      	mov	r0, r6
 80288fe:	47c0      	blx	r8
 8028900:	4307      	orrs	r7, r0
 8028902:	3568      	adds	r5, #104	; 0x68
 8028904:	e7e9      	b.n	80288da <_fwalk_reent+0x12>
	...

08028908 <__libc_init_array>:
 8028908:	b570      	push	{r4, r5, r6, lr}
 802890a:	4d0d      	ldr	r5, [pc, #52]	; (8028940 <__libc_init_array+0x38>)
 802890c:	4c0d      	ldr	r4, [pc, #52]	; (8028944 <__libc_init_array+0x3c>)
 802890e:	1b64      	subs	r4, r4, r5
 8028910:	10a4      	asrs	r4, r4, #2
 8028912:	2600      	movs	r6, #0
 8028914:	42a6      	cmp	r6, r4
 8028916:	d109      	bne.n	802892c <__libc_init_array+0x24>
 8028918:	4d0b      	ldr	r5, [pc, #44]	; (8028948 <__libc_init_array+0x40>)
 802891a:	4c0c      	ldr	r4, [pc, #48]	; (802894c <__libc_init_array+0x44>)
 802891c:	f000 ffd0 	bl	80298c0 <_init>
 8028920:	1b64      	subs	r4, r4, r5
 8028922:	10a4      	asrs	r4, r4, #2
 8028924:	2600      	movs	r6, #0
 8028926:	42a6      	cmp	r6, r4
 8028928:	d105      	bne.n	8028936 <__libc_init_array+0x2e>
 802892a:	bd70      	pop	{r4, r5, r6, pc}
 802892c:	f855 3b04 	ldr.w	r3, [r5], #4
 8028930:	4798      	blx	r3
 8028932:	3601      	adds	r6, #1
 8028934:	e7ee      	b.n	8028914 <__libc_init_array+0xc>
 8028936:	f855 3b04 	ldr.w	r3, [r5], #4
 802893a:	4798      	blx	r3
 802893c:	3601      	adds	r6, #1
 802893e:	e7f2      	b.n	8028926 <__libc_init_array+0x1e>
 8028940:	080448ac 	.word	0x080448ac
 8028944:	080448ac 	.word	0x080448ac
 8028948:	080448ac 	.word	0x080448ac
 802894c:	080448c0 	.word	0x080448c0

08028950 <__retarget_lock_init_recursive>:
 8028950:	4770      	bx	lr

08028952 <__retarget_lock_acquire_recursive>:
 8028952:	4770      	bx	lr

08028954 <__retarget_lock_release>:
 8028954:	4770      	bx	lr

08028956 <__retarget_lock_release_recursive>:
 8028956:	4770      	bx	lr

08028958 <malloc>:
 8028958:	4b02      	ldr	r3, [pc, #8]	; (8028964 <malloc+0xc>)
 802895a:	4601      	mov	r1, r0
 802895c:	6818      	ldr	r0, [r3, #0]
 802895e:	f000 b88d 	b.w	8028a7c <_malloc_r>
 8028962:	bf00      	nop
 8028964:	200001ec 	.word	0x200001ec

08028968 <free>:
 8028968:	4b02      	ldr	r3, [pc, #8]	; (8028974 <free+0xc>)
 802896a:	4601      	mov	r1, r0
 802896c:	6818      	ldr	r0, [r3, #0]
 802896e:	f000 b819 	b.w	80289a4 <_free_r>
 8028972:	bf00      	nop
 8028974:	200001ec 	.word	0x200001ec

08028978 <memcpy>:
 8028978:	440a      	add	r2, r1
 802897a:	4291      	cmp	r1, r2
 802897c:	f100 33ff 	add.w	r3, r0, #4294967295
 8028980:	d100      	bne.n	8028984 <memcpy+0xc>
 8028982:	4770      	bx	lr
 8028984:	b510      	push	{r4, lr}
 8028986:	f811 4b01 	ldrb.w	r4, [r1], #1
 802898a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802898e:	4291      	cmp	r1, r2
 8028990:	d1f9      	bne.n	8028986 <memcpy+0xe>
 8028992:	bd10      	pop	{r4, pc}

08028994 <memset>:
 8028994:	4402      	add	r2, r0
 8028996:	4603      	mov	r3, r0
 8028998:	4293      	cmp	r3, r2
 802899a:	d100      	bne.n	802899e <memset+0xa>
 802899c:	4770      	bx	lr
 802899e:	f803 1b01 	strb.w	r1, [r3], #1
 80289a2:	e7f9      	b.n	8028998 <memset+0x4>

080289a4 <_free_r>:
 80289a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80289a6:	2900      	cmp	r1, #0
 80289a8:	d044      	beq.n	8028a34 <_free_r+0x90>
 80289aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80289ae:	9001      	str	r0, [sp, #4]
 80289b0:	2b00      	cmp	r3, #0
 80289b2:	f1a1 0404 	sub.w	r4, r1, #4
 80289b6:	bfb8      	it	lt
 80289b8:	18e4      	addlt	r4, r4, r3
 80289ba:	f000 ff41 	bl	8029840 <__malloc_lock>
 80289be:	4a1e      	ldr	r2, [pc, #120]	; (8028a38 <_free_r+0x94>)
 80289c0:	9801      	ldr	r0, [sp, #4]
 80289c2:	6813      	ldr	r3, [r2, #0]
 80289c4:	b933      	cbnz	r3, 80289d4 <_free_r+0x30>
 80289c6:	6063      	str	r3, [r4, #4]
 80289c8:	6014      	str	r4, [r2, #0]
 80289ca:	b003      	add	sp, #12
 80289cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80289d0:	f000 bf3c 	b.w	802984c <__malloc_unlock>
 80289d4:	42a3      	cmp	r3, r4
 80289d6:	d908      	bls.n	80289ea <_free_r+0x46>
 80289d8:	6825      	ldr	r5, [r4, #0]
 80289da:	1961      	adds	r1, r4, r5
 80289dc:	428b      	cmp	r3, r1
 80289de:	bf01      	itttt	eq
 80289e0:	6819      	ldreq	r1, [r3, #0]
 80289e2:	685b      	ldreq	r3, [r3, #4]
 80289e4:	1949      	addeq	r1, r1, r5
 80289e6:	6021      	streq	r1, [r4, #0]
 80289e8:	e7ed      	b.n	80289c6 <_free_r+0x22>
 80289ea:	461a      	mov	r2, r3
 80289ec:	685b      	ldr	r3, [r3, #4]
 80289ee:	b10b      	cbz	r3, 80289f4 <_free_r+0x50>
 80289f0:	42a3      	cmp	r3, r4
 80289f2:	d9fa      	bls.n	80289ea <_free_r+0x46>
 80289f4:	6811      	ldr	r1, [r2, #0]
 80289f6:	1855      	adds	r5, r2, r1
 80289f8:	42a5      	cmp	r5, r4
 80289fa:	d10b      	bne.n	8028a14 <_free_r+0x70>
 80289fc:	6824      	ldr	r4, [r4, #0]
 80289fe:	4421      	add	r1, r4
 8028a00:	1854      	adds	r4, r2, r1
 8028a02:	42a3      	cmp	r3, r4
 8028a04:	6011      	str	r1, [r2, #0]
 8028a06:	d1e0      	bne.n	80289ca <_free_r+0x26>
 8028a08:	681c      	ldr	r4, [r3, #0]
 8028a0a:	685b      	ldr	r3, [r3, #4]
 8028a0c:	6053      	str	r3, [r2, #4]
 8028a0e:	4421      	add	r1, r4
 8028a10:	6011      	str	r1, [r2, #0]
 8028a12:	e7da      	b.n	80289ca <_free_r+0x26>
 8028a14:	d902      	bls.n	8028a1c <_free_r+0x78>
 8028a16:	230c      	movs	r3, #12
 8028a18:	6003      	str	r3, [r0, #0]
 8028a1a:	e7d6      	b.n	80289ca <_free_r+0x26>
 8028a1c:	6825      	ldr	r5, [r4, #0]
 8028a1e:	1961      	adds	r1, r4, r5
 8028a20:	428b      	cmp	r3, r1
 8028a22:	bf04      	itt	eq
 8028a24:	6819      	ldreq	r1, [r3, #0]
 8028a26:	685b      	ldreq	r3, [r3, #4]
 8028a28:	6063      	str	r3, [r4, #4]
 8028a2a:	bf04      	itt	eq
 8028a2c:	1949      	addeq	r1, r1, r5
 8028a2e:	6021      	streq	r1, [r4, #0]
 8028a30:	6054      	str	r4, [r2, #4]
 8028a32:	e7ca      	b.n	80289ca <_free_r+0x26>
 8028a34:	b003      	add	sp, #12
 8028a36:	bd30      	pop	{r4, r5, pc}
 8028a38:	200058e0 	.word	0x200058e0

08028a3c <sbrk_aligned>:
 8028a3c:	b570      	push	{r4, r5, r6, lr}
 8028a3e:	4e0e      	ldr	r6, [pc, #56]	; (8028a78 <sbrk_aligned+0x3c>)
 8028a40:	460c      	mov	r4, r1
 8028a42:	6831      	ldr	r1, [r6, #0]
 8028a44:	4605      	mov	r5, r0
 8028a46:	b911      	cbnz	r1, 8028a4e <sbrk_aligned+0x12>
 8028a48:	f000 fbe4 	bl	8029214 <_sbrk_r>
 8028a4c:	6030      	str	r0, [r6, #0]
 8028a4e:	4621      	mov	r1, r4
 8028a50:	4628      	mov	r0, r5
 8028a52:	f000 fbdf 	bl	8029214 <_sbrk_r>
 8028a56:	1c43      	adds	r3, r0, #1
 8028a58:	d00a      	beq.n	8028a70 <sbrk_aligned+0x34>
 8028a5a:	1cc4      	adds	r4, r0, #3
 8028a5c:	f024 0403 	bic.w	r4, r4, #3
 8028a60:	42a0      	cmp	r0, r4
 8028a62:	d007      	beq.n	8028a74 <sbrk_aligned+0x38>
 8028a64:	1a21      	subs	r1, r4, r0
 8028a66:	4628      	mov	r0, r5
 8028a68:	f000 fbd4 	bl	8029214 <_sbrk_r>
 8028a6c:	3001      	adds	r0, #1
 8028a6e:	d101      	bne.n	8028a74 <sbrk_aligned+0x38>
 8028a70:	f04f 34ff 	mov.w	r4, #4294967295
 8028a74:	4620      	mov	r0, r4
 8028a76:	bd70      	pop	{r4, r5, r6, pc}
 8028a78:	200058e4 	.word	0x200058e4

08028a7c <_malloc_r>:
 8028a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028a80:	1ccd      	adds	r5, r1, #3
 8028a82:	f025 0503 	bic.w	r5, r5, #3
 8028a86:	3508      	adds	r5, #8
 8028a88:	2d0c      	cmp	r5, #12
 8028a8a:	bf38      	it	cc
 8028a8c:	250c      	movcc	r5, #12
 8028a8e:	2d00      	cmp	r5, #0
 8028a90:	4607      	mov	r7, r0
 8028a92:	db01      	blt.n	8028a98 <_malloc_r+0x1c>
 8028a94:	42a9      	cmp	r1, r5
 8028a96:	d905      	bls.n	8028aa4 <_malloc_r+0x28>
 8028a98:	230c      	movs	r3, #12
 8028a9a:	603b      	str	r3, [r7, #0]
 8028a9c:	2600      	movs	r6, #0
 8028a9e:	4630      	mov	r0, r6
 8028aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028aa4:	4e2e      	ldr	r6, [pc, #184]	; (8028b60 <_malloc_r+0xe4>)
 8028aa6:	f000 fecb 	bl	8029840 <__malloc_lock>
 8028aaa:	6833      	ldr	r3, [r6, #0]
 8028aac:	461c      	mov	r4, r3
 8028aae:	bb34      	cbnz	r4, 8028afe <_malloc_r+0x82>
 8028ab0:	4629      	mov	r1, r5
 8028ab2:	4638      	mov	r0, r7
 8028ab4:	f7ff ffc2 	bl	8028a3c <sbrk_aligned>
 8028ab8:	1c43      	adds	r3, r0, #1
 8028aba:	4604      	mov	r4, r0
 8028abc:	d14d      	bne.n	8028b5a <_malloc_r+0xde>
 8028abe:	6834      	ldr	r4, [r6, #0]
 8028ac0:	4626      	mov	r6, r4
 8028ac2:	2e00      	cmp	r6, #0
 8028ac4:	d140      	bne.n	8028b48 <_malloc_r+0xcc>
 8028ac6:	6823      	ldr	r3, [r4, #0]
 8028ac8:	4631      	mov	r1, r6
 8028aca:	4638      	mov	r0, r7
 8028acc:	eb04 0803 	add.w	r8, r4, r3
 8028ad0:	f000 fba0 	bl	8029214 <_sbrk_r>
 8028ad4:	4580      	cmp	r8, r0
 8028ad6:	d13a      	bne.n	8028b4e <_malloc_r+0xd2>
 8028ad8:	6821      	ldr	r1, [r4, #0]
 8028ada:	3503      	adds	r5, #3
 8028adc:	1a6d      	subs	r5, r5, r1
 8028ade:	f025 0503 	bic.w	r5, r5, #3
 8028ae2:	3508      	adds	r5, #8
 8028ae4:	2d0c      	cmp	r5, #12
 8028ae6:	bf38      	it	cc
 8028ae8:	250c      	movcc	r5, #12
 8028aea:	4629      	mov	r1, r5
 8028aec:	4638      	mov	r0, r7
 8028aee:	f7ff ffa5 	bl	8028a3c <sbrk_aligned>
 8028af2:	3001      	adds	r0, #1
 8028af4:	d02b      	beq.n	8028b4e <_malloc_r+0xd2>
 8028af6:	6823      	ldr	r3, [r4, #0]
 8028af8:	442b      	add	r3, r5
 8028afa:	6023      	str	r3, [r4, #0]
 8028afc:	e00e      	b.n	8028b1c <_malloc_r+0xa0>
 8028afe:	6822      	ldr	r2, [r4, #0]
 8028b00:	1b52      	subs	r2, r2, r5
 8028b02:	d41e      	bmi.n	8028b42 <_malloc_r+0xc6>
 8028b04:	2a0b      	cmp	r2, #11
 8028b06:	d916      	bls.n	8028b36 <_malloc_r+0xba>
 8028b08:	1961      	adds	r1, r4, r5
 8028b0a:	42a3      	cmp	r3, r4
 8028b0c:	6025      	str	r5, [r4, #0]
 8028b0e:	bf18      	it	ne
 8028b10:	6059      	strne	r1, [r3, #4]
 8028b12:	6863      	ldr	r3, [r4, #4]
 8028b14:	bf08      	it	eq
 8028b16:	6031      	streq	r1, [r6, #0]
 8028b18:	5162      	str	r2, [r4, r5]
 8028b1a:	604b      	str	r3, [r1, #4]
 8028b1c:	4638      	mov	r0, r7
 8028b1e:	f104 060b 	add.w	r6, r4, #11
 8028b22:	f000 fe93 	bl	802984c <__malloc_unlock>
 8028b26:	f026 0607 	bic.w	r6, r6, #7
 8028b2a:	1d23      	adds	r3, r4, #4
 8028b2c:	1af2      	subs	r2, r6, r3
 8028b2e:	d0b6      	beq.n	8028a9e <_malloc_r+0x22>
 8028b30:	1b9b      	subs	r3, r3, r6
 8028b32:	50a3      	str	r3, [r4, r2]
 8028b34:	e7b3      	b.n	8028a9e <_malloc_r+0x22>
 8028b36:	6862      	ldr	r2, [r4, #4]
 8028b38:	42a3      	cmp	r3, r4
 8028b3a:	bf0c      	ite	eq
 8028b3c:	6032      	streq	r2, [r6, #0]
 8028b3e:	605a      	strne	r2, [r3, #4]
 8028b40:	e7ec      	b.n	8028b1c <_malloc_r+0xa0>
 8028b42:	4623      	mov	r3, r4
 8028b44:	6864      	ldr	r4, [r4, #4]
 8028b46:	e7b2      	b.n	8028aae <_malloc_r+0x32>
 8028b48:	4634      	mov	r4, r6
 8028b4a:	6876      	ldr	r6, [r6, #4]
 8028b4c:	e7b9      	b.n	8028ac2 <_malloc_r+0x46>
 8028b4e:	230c      	movs	r3, #12
 8028b50:	603b      	str	r3, [r7, #0]
 8028b52:	4638      	mov	r0, r7
 8028b54:	f000 fe7a 	bl	802984c <__malloc_unlock>
 8028b58:	e7a1      	b.n	8028a9e <_malloc_r+0x22>
 8028b5a:	6025      	str	r5, [r4, #0]
 8028b5c:	e7de      	b.n	8028b1c <_malloc_r+0xa0>
 8028b5e:	bf00      	nop
 8028b60:	200058e0 	.word	0x200058e0

08028b64 <__sfputc_r>:
 8028b64:	6893      	ldr	r3, [r2, #8]
 8028b66:	3b01      	subs	r3, #1
 8028b68:	2b00      	cmp	r3, #0
 8028b6a:	b410      	push	{r4}
 8028b6c:	6093      	str	r3, [r2, #8]
 8028b6e:	da08      	bge.n	8028b82 <__sfputc_r+0x1e>
 8028b70:	6994      	ldr	r4, [r2, #24]
 8028b72:	42a3      	cmp	r3, r4
 8028b74:	db01      	blt.n	8028b7a <__sfputc_r+0x16>
 8028b76:	290a      	cmp	r1, #10
 8028b78:	d103      	bne.n	8028b82 <__sfputc_r+0x1e>
 8028b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028b7e:	f000 bbe1 	b.w	8029344 <__swbuf_r>
 8028b82:	6813      	ldr	r3, [r2, #0]
 8028b84:	1c58      	adds	r0, r3, #1
 8028b86:	6010      	str	r0, [r2, #0]
 8028b88:	7019      	strb	r1, [r3, #0]
 8028b8a:	4608      	mov	r0, r1
 8028b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028b90:	4770      	bx	lr

08028b92 <__sfputs_r>:
 8028b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028b94:	4606      	mov	r6, r0
 8028b96:	460f      	mov	r7, r1
 8028b98:	4614      	mov	r4, r2
 8028b9a:	18d5      	adds	r5, r2, r3
 8028b9c:	42ac      	cmp	r4, r5
 8028b9e:	d101      	bne.n	8028ba4 <__sfputs_r+0x12>
 8028ba0:	2000      	movs	r0, #0
 8028ba2:	e007      	b.n	8028bb4 <__sfputs_r+0x22>
 8028ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028ba8:	463a      	mov	r2, r7
 8028baa:	4630      	mov	r0, r6
 8028bac:	f7ff ffda 	bl	8028b64 <__sfputc_r>
 8028bb0:	1c43      	adds	r3, r0, #1
 8028bb2:	d1f3      	bne.n	8028b9c <__sfputs_r+0xa>
 8028bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028bb8 <_vfiprintf_r>:
 8028bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028bbc:	460d      	mov	r5, r1
 8028bbe:	b09d      	sub	sp, #116	; 0x74
 8028bc0:	4614      	mov	r4, r2
 8028bc2:	4698      	mov	r8, r3
 8028bc4:	4606      	mov	r6, r0
 8028bc6:	b118      	cbz	r0, 8028bd0 <_vfiprintf_r+0x18>
 8028bc8:	6983      	ldr	r3, [r0, #24]
 8028bca:	b90b      	cbnz	r3, 8028bd0 <_vfiprintf_r+0x18>
 8028bcc:	f7ff fdec 	bl	80287a8 <__sinit>
 8028bd0:	4b89      	ldr	r3, [pc, #548]	; (8028df8 <_vfiprintf_r+0x240>)
 8028bd2:	429d      	cmp	r5, r3
 8028bd4:	d11b      	bne.n	8028c0e <_vfiprintf_r+0x56>
 8028bd6:	6875      	ldr	r5, [r6, #4]
 8028bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028bda:	07d9      	lsls	r1, r3, #31
 8028bdc:	d405      	bmi.n	8028bea <_vfiprintf_r+0x32>
 8028bde:	89ab      	ldrh	r3, [r5, #12]
 8028be0:	059a      	lsls	r2, r3, #22
 8028be2:	d402      	bmi.n	8028bea <_vfiprintf_r+0x32>
 8028be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028be6:	f7ff feb4 	bl	8028952 <__retarget_lock_acquire_recursive>
 8028bea:	89ab      	ldrh	r3, [r5, #12]
 8028bec:	071b      	lsls	r3, r3, #28
 8028bee:	d501      	bpl.n	8028bf4 <_vfiprintf_r+0x3c>
 8028bf0:	692b      	ldr	r3, [r5, #16]
 8028bf2:	b9eb      	cbnz	r3, 8028c30 <_vfiprintf_r+0x78>
 8028bf4:	4629      	mov	r1, r5
 8028bf6:	4630      	mov	r0, r6
 8028bf8:	f000 fc08 	bl	802940c <__swsetup_r>
 8028bfc:	b1c0      	cbz	r0, 8028c30 <_vfiprintf_r+0x78>
 8028bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028c00:	07dc      	lsls	r4, r3, #31
 8028c02:	d50e      	bpl.n	8028c22 <_vfiprintf_r+0x6a>
 8028c04:	f04f 30ff 	mov.w	r0, #4294967295
 8028c08:	b01d      	add	sp, #116	; 0x74
 8028c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c0e:	4b7b      	ldr	r3, [pc, #492]	; (8028dfc <_vfiprintf_r+0x244>)
 8028c10:	429d      	cmp	r5, r3
 8028c12:	d101      	bne.n	8028c18 <_vfiprintf_r+0x60>
 8028c14:	68b5      	ldr	r5, [r6, #8]
 8028c16:	e7df      	b.n	8028bd8 <_vfiprintf_r+0x20>
 8028c18:	4b79      	ldr	r3, [pc, #484]	; (8028e00 <_vfiprintf_r+0x248>)
 8028c1a:	429d      	cmp	r5, r3
 8028c1c:	bf08      	it	eq
 8028c1e:	68f5      	ldreq	r5, [r6, #12]
 8028c20:	e7da      	b.n	8028bd8 <_vfiprintf_r+0x20>
 8028c22:	89ab      	ldrh	r3, [r5, #12]
 8028c24:	0598      	lsls	r0, r3, #22
 8028c26:	d4ed      	bmi.n	8028c04 <_vfiprintf_r+0x4c>
 8028c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028c2a:	f7ff fe94 	bl	8028956 <__retarget_lock_release_recursive>
 8028c2e:	e7e9      	b.n	8028c04 <_vfiprintf_r+0x4c>
 8028c30:	2300      	movs	r3, #0
 8028c32:	9309      	str	r3, [sp, #36]	; 0x24
 8028c34:	2320      	movs	r3, #32
 8028c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8028c3e:	2330      	movs	r3, #48	; 0x30
 8028c40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028e04 <_vfiprintf_r+0x24c>
 8028c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028c48:	f04f 0901 	mov.w	r9, #1
 8028c4c:	4623      	mov	r3, r4
 8028c4e:	469a      	mov	sl, r3
 8028c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028c54:	b10a      	cbz	r2, 8028c5a <_vfiprintf_r+0xa2>
 8028c56:	2a25      	cmp	r2, #37	; 0x25
 8028c58:	d1f9      	bne.n	8028c4e <_vfiprintf_r+0x96>
 8028c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8028c5e:	d00b      	beq.n	8028c78 <_vfiprintf_r+0xc0>
 8028c60:	465b      	mov	r3, fp
 8028c62:	4622      	mov	r2, r4
 8028c64:	4629      	mov	r1, r5
 8028c66:	4630      	mov	r0, r6
 8028c68:	f7ff ff93 	bl	8028b92 <__sfputs_r>
 8028c6c:	3001      	adds	r0, #1
 8028c6e:	f000 80aa 	beq.w	8028dc6 <_vfiprintf_r+0x20e>
 8028c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028c74:	445a      	add	r2, fp
 8028c76:	9209      	str	r2, [sp, #36]	; 0x24
 8028c78:	f89a 3000 	ldrb.w	r3, [sl]
 8028c7c:	2b00      	cmp	r3, #0
 8028c7e:	f000 80a2 	beq.w	8028dc6 <_vfiprintf_r+0x20e>
 8028c82:	2300      	movs	r3, #0
 8028c84:	f04f 32ff 	mov.w	r2, #4294967295
 8028c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028c8c:	f10a 0a01 	add.w	sl, sl, #1
 8028c90:	9304      	str	r3, [sp, #16]
 8028c92:	9307      	str	r3, [sp, #28]
 8028c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028c98:	931a      	str	r3, [sp, #104]	; 0x68
 8028c9a:	4654      	mov	r4, sl
 8028c9c:	2205      	movs	r2, #5
 8028c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028ca2:	4858      	ldr	r0, [pc, #352]	; (8028e04 <_vfiprintf_r+0x24c>)
 8028ca4:	f7d7 fb1c 	bl	80002e0 <memchr>
 8028ca8:	9a04      	ldr	r2, [sp, #16]
 8028caa:	b9d8      	cbnz	r0, 8028ce4 <_vfiprintf_r+0x12c>
 8028cac:	06d1      	lsls	r1, r2, #27
 8028cae:	bf44      	itt	mi
 8028cb0:	2320      	movmi	r3, #32
 8028cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028cb6:	0713      	lsls	r3, r2, #28
 8028cb8:	bf44      	itt	mi
 8028cba:	232b      	movmi	r3, #43	; 0x2b
 8028cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8028cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8028cc6:	d015      	beq.n	8028cf4 <_vfiprintf_r+0x13c>
 8028cc8:	9a07      	ldr	r2, [sp, #28]
 8028cca:	4654      	mov	r4, sl
 8028ccc:	2000      	movs	r0, #0
 8028cce:	f04f 0c0a 	mov.w	ip, #10
 8028cd2:	4621      	mov	r1, r4
 8028cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028cd8:	3b30      	subs	r3, #48	; 0x30
 8028cda:	2b09      	cmp	r3, #9
 8028cdc:	d94e      	bls.n	8028d7c <_vfiprintf_r+0x1c4>
 8028cde:	b1b0      	cbz	r0, 8028d0e <_vfiprintf_r+0x156>
 8028ce0:	9207      	str	r2, [sp, #28]
 8028ce2:	e014      	b.n	8028d0e <_vfiprintf_r+0x156>
 8028ce4:	eba0 0308 	sub.w	r3, r0, r8
 8028ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8028cec:	4313      	orrs	r3, r2
 8028cee:	9304      	str	r3, [sp, #16]
 8028cf0:	46a2      	mov	sl, r4
 8028cf2:	e7d2      	b.n	8028c9a <_vfiprintf_r+0xe2>
 8028cf4:	9b03      	ldr	r3, [sp, #12]
 8028cf6:	1d19      	adds	r1, r3, #4
 8028cf8:	681b      	ldr	r3, [r3, #0]
 8028cfa:	9103      	str	r1, [sp, #12]
 8028cfc:	2b00      	cmp	r3, #0
 8028cfe:	bfbb      	ittet	lt
 8028d00:	425b      	neglt	r3, r3
 8028d02:	f042 0202 	orrlt.w	r2, r2, #2
 8028d06:	9307      	strge	r3, [sp, #28]
 8028d08:	9307      	strlt	r3, [sp, #28]
 8028d0a:	bfb8      	it	lt
 8028d0c:	9204      	strlt	r2, [sp, #16]
 8028d0e:	7823      	ldrb	r3, [r4, #0]
 8028d10:	2b2e      	cmp	r3, #46	; 0x2e
 8028d12:	d10c      	bne.n	8028d2e <_vfiprintf_r+0x176>
 8028d14:	7863      	ldrb	r3, [r4, #1]
 8028d16:	2b2a      	cmp	r3, #42	; 0x2a
 8028d18:	d135      	bne.n	8028d86 <_vfiprintf_r+0x1ce>
 8028d1a:	9b03      	ldr	r3, [sp, #12]
 8028d1c:	1d1a      	adds	r2, r3, #4
 8028d1e:	681b      	ldr	r3, [r3, #0]
 8028d20:	9203      	str	r2, [sp, #12]
 8028d22:	2b00      	cmp	r3, #0
 8028d24:	bfb8      	it	lt
 8028d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8028d2a:	3402      	adds	r4, #2
 8028d2c:	9305      	str	r3, [sp, #20]
 8028d2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028e14 <_vfiprintf_r+0x25c>
 8028d32:	7821      	ldrb	r1, [r4, #0]
 8028d34:	2203      	movs	r2, #3
 8028d36:	4650      	mov	r0, sl
 8028d38:	f7d7 fad2 	bl	80002e0 <memchr>
 8028d3c:	b140      	cbz	r0, 8028d50 <_vfiprintf_r+0x198>
 8028d3e:	2340      	movs	r3, #64	; 0x40
 8028d40:	eba0 000a 	sub.w	r0, r0, sl
 8028d44:	fa03 f000 	lsl.w	r0, r3, r0
 8028d48:	9b04      	ldr	r3, [sp, #16]
 8028d4a:	4303      	orrs	r3, r0
 8028d4c:	3401      	adds	r4, #1
 8028d4e:	9304      	str	r3, [sp, #16]
 8028d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028d54:	482c      	ldr	r0, [pc, #176]	; (8028e08 <_vfiprintf_r+0x250>)
 8028d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028d5a:	2206      	movs	r2, #6
 8028d5c:	f7d7 fac0 	bl	80002e0 <memchr>
 8028d60:	2800      	cmp	r0, #0
 8028d62:	d03f      	beq.n	8028de4 <_vfiprintf_r+0x22c>
 8028d64:	4b29      	ldr	r3, [pc, #164]	; (8028e0c <_vfiprintf_r+0x254>)
 8028d66:	bb1b      	cbnz	r3, 8028db0 <_vfiprintf_r+0x1f8>
 8028d68:	9b03      	ldr	r3, [sp, #12]
 8028d6a:	3307      	adds	r3, #7
 8028d6c:	f023 0307 	bic.w	r3, r3, #7
 8028d70:	3308      	adds	r3, #8
 8028d72:	9303      	str	r3, [sp, #12]
 8028d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d76:	443b      	add	r3, r7
 8028d78:	9309      	str	r3, [sp, #36]	; 0x24
 8028d7a:	e767      	b.n	8028c4c <_vfiprintf_r+0x94>
 8028d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8028d80:	460c      	mov	r4, r1
 8028d82:	2001      	movs	r0, #1
 8028d84:	e7a5      	b.n	8028cd2 <_vfiprintf_r+0x11a>
 8028d86:	2300      	movs	r3, #0
 8028d88:	3401      	adds	r4, #1
 8028d8a:	9305      	str	r3, [sp, #20]
 8028d8c:	4619      	mov	r1, r3
 8028d8e:	f04f 0c0a 	mov.w	ip, #10
 8028d92:	4620      	mov	r0, r4
 8028d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028d98:	3a30      	subs	r2, #48	; 0x30
 8028d9a:	2a09      	cmp	r2, #9
 8028d9c:	d903      	bls.n	8028da6 <_vfiprintf_r+0x1ee>
 8028d9e:	2b00      	cmp	r3, #0
 8028da0:	d0c5      	beq.n	8028d2e <_vfiprintf_r+0x176>
 8028da2:	9105      	str	r1, [sp, #20]
 8028da4:	e7c3      	b.n	8028d2e <_vfiprintf_r+0x176>
 8028da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8028daa:	4604      	mov	r4, r0
 8028dac:	2301      	movs	r3, #1
 8028dae:	e7f0      	b.n	8028d92 <_vfiprintf_r+0x1da>
 8028db0:	ab03      	add	r3, sp, #12
 8028db2:	9300      	str	r3, [sp, #0]
 8028db4:	462a      	mov	r2, r5
 8028db6:	4b16      	ldr	r3, [pc, #88]	; (8028e10 <_vfiprintf_r+0x258>)
 8028db8:	a904      	add	r1, sp, #16
 8028dba:	4630      	mov	r0, r6
 8028dbc:	f3af 8000 	nop.w
 8028dc0:	4607      	mov	r7, r0
 8028dc2:	1c78      	adds	r0, r7, #1
 8028dc4:	d1d6      	bne.n	8028d74 <_vfiprintf_r+0x1bc>
 8028dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028dc8:	07d9      	lsls	r1, r3, #31
 8028dca:	d405      	bmi.n	8028dd8 <_vfiprintf_r+0x220>
 8028dcc:	89ab      	ldrh	r3, [r5, #12]
 8028dce:	059a      	lsls	r2, r3, #22
 8028dd0:	d402      	bmi.n	8028dd8 <_vfiprintf_r+0x220>
 8028dd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028dd4:	f7ff fdbf 	bl	8028956 <__retarget_lock_release_recursive>
 8028dd8:	89ab      	ldrh	r3, [r5, #12]
 8028dda:	065b      	lsls	r3, r3, #25
 8028ddc:	f53f af12 	bmi.w	8028c04 <_vfiprintf_r+0x4c>
 8028de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028de2:	e711      	b.n	8028c08 <_vfiprintf_r+0x50>
 8028de4:	ab03      	add	r3, sp, #12
 8028de6:	9300      	str	r3, [sp, #0]
 8028de8:	462a      	mov	r2, r5
 8028dea:	4b09      	ldr	r3, [pc, #36]	; (8028e10 <_vfiprintf_r+0x258>)
 8028dec:	a904      	add	r1, sp, #16
 8028dee:	4630      	mov	r0, r6
 8028df0:	f000 f880 	bl	8028ef4 <_printf_i>
 8028df4:	e7e4      	b.n	8028dc0 <_vfiprintf_r+0x208>
 8028df6:	bf00      	nop
 8028df8:	0802d75c 	.word	0x0802d75c
 8028dfc:	0802d77c 	.word	0x0802d77c
 8028e00:	0802d73c 	.word	0x0802d73c
 8028e04:	0802d7a0 	.word	0x0802d7a0
 8028e08:	0802d7aa 	.word	0x0802d7aa
 8028e0c:	00000000 	.word	0x00000000
 8028e10:	08028b93 	.word	0x08028b93
 8028e14:	0802d7a6 	.word	0x0802d7a6

08028e18 <_printf_common>:
 8028e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028e1c:	4616      	mov	r6, r2
 8028e1e:	4699      	mov	r9, r3
 8028e20:	688a      	ldr	r2, [r1, #8]
 8028e22:	690b      	ldr	r3, [r1, #16]
 8028e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028e28:	4293      	cmp	r3, r2
 8028e2a:	bfb8      	it	lt
 8028e2c:	4613      	movlt	r3, r2
 8028e2e:	6033      	str	r3, [r6, #0]
 8028e30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028e34:	4607      	mov	r7, r0
 8028e36:	460c      	mov	r4, r1
 8028e38:	b10a      	cbz	r2, 8028e3e <_printf_common+0x26>
 8028e3a:	3301      	adds	r3, #1
 8028e3c:	6033      	str	r3, [r6, #0]
 8028e3e:	6823      	ldr	r3, [r4, #0]
 8028e40:	0699      	lsls	r1, r3, #26
 8028e42:	bf42      	ittt	mi
 8028e44:	6833      	ldrmi	r3, [r6, #0]
 8028e46:	3302      	addmi	r3, #2
 8028e48:	6033      	strmi	r3, [r6, #0]
 8028e4a:	6825      	ldr	r5, [r4, #0]
 8028e4c:	f015 0506 	ands.w	r5, r5, #6
 8028e50:	d106      	bne.n	8028e60 <_printf_common+0x48>
 8028e52:	f104 0a19 	add.w	sl, r4, #25
 8028e56:	68e3      	ldr	r3, [r4, #12]
 8028e58:	6832      	ldr	r2, [r6, #0]
 8028e5a:	1a9b      	subs	r3, r3, r2
 8028e5c:	42ab      	cmp	r3, r5
 8028e5e:	dc26      	bgt.n	8028eae <_printf_common+0x96>
 8028e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8028e64:	1e13      	subs	r3, r2, #0
 8028e66:	6822      	ldr	r2, [r4, #0]
 8028e68:	bf18      	it	ne
 8028e6a:	2301      	movne	r3, #1
 8028e6c:	0692      	lsls	r2, r2, #26
 8028e6e:	d42b      	bmi.n	8028ec8 <_printf_common+0xb0>
 8028e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028e74:	4649      	mov	r1, r9
 8028e76:	4638      	mov	r0, r7
 8028e78:	47c0      	blx	r8
 8028e7a:	3001      	adds	r0, #1
 8028e7c:	d01e      	beq.n	8028ebc <_printf_common+0xa4>
 8028e7e:	6823      	ldr	r3, [r4, #0]
 8028e80:	68e5      	ldr	r5, [r4, #12]
 8028e82:	6832      	ldr	r2, [r6, #0]
 8028e84:	f003 0306 	and.w	r3, r3, #6
 8028e88:	2b04      	cmp	r3, #4
 8028e8a:	bf08      	it	eq
 8028e8c:	1aad      	subeq	r5, r5, r2
 8028e8e:	68a3      	ldr	r3, [r4, #8]
 8028e90:	6922      	ldr	r2, [r4, #16]
 8028e92:	bf0c      	ite	eq
 8028e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028e98:	2500      	movne	r5, #0
 8028e9a:	4293      	cmp	r3, r2
 8028e9c:	bfc4      	itt	gt
 8028e9e:	1a9b      	subgt	r3, r3, r2
 8028ea0:	18ed      	addgt	r5, r5, r3
 8028ea2:	2600      	movs	r6, #0
 8028ea4:	341a      	adds	r4, #26
 8028ea6:	42b5      	cmp	r5, r6
 8028ea8:	d11a      	bne.n	8028ee0 <_printf_common+0xc8>
 8028eaa:	2000      	movs	r0, #0
 8028eac:	e008      	b.n	8028ec0 <_printf_common+0xa8>
 8028eae:	2301      	movs	r3, #1
 8028eb0:	4652      	mov	r2, sl
 8028eb2:	4649      	mov	r1, r9
 8028eb4:	4638      	mov	r0, r7
 8028eb6:	47c0      	blx	r8
 8028eb8:	3001      	adds	r0, #1
 8028eba:	d103      	bne.n	8028ec4 <_printf_common+0xac>
 8028ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8028ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028ec4:	3501      	adds	r5, #1
 8028ec6:	e7c6      	b.n	8028e56 <_printf_common+0x3e>
 8028ec8:	18e1      	adds	r1, r4, r3
 8028eca:	1c5a      	adds	r2, r3, #1
 8028ecc:	2030      	movs	r0, #48	; 0x30
 8028ece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8028ed2:	4422      	add	r2, r4
 8028ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8028ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8028edc:	3302      	adds	r3, #2
 8028ede:	e7c7      	b.n	8028e70 <_printf_common+0x58>
 8028ee0:	2301      	movs	r3, #1
 8028ee2:	4622      	mov	r2, r4
 8028ee4:	4649      	mov	r1, r9
 8028ee6:	4638      	mov	r0, r7
 8028ee8:	47c0      	blx	r8
 8028eea:	3001      	adds	r0, #1
 8028eec:	d0e6      	beq.n	8028ebc <_printf_common+0xa4>
 8028eee:	3601      	adds	r6, #1
 8028ef0:	e7d9      	b.n	8028ea6 <_printf_common+0x8e>
	...

08028ef4 <_printf_i>:
 8028ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028ef8:	7e0f      	ldrb	r7, [r1, #24]
 8028efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028efc:	2f78      	cmp	r7, #120	; 0x78
 8028efe:	4691      	mov	r9, r2
 8028f00:	4680      	mov	r8, r0
 8028f02:	460c      	mov	r4, r1
 8028f04:	469a      	mov	sl, r3
 8028f06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8028f0a:	d807      	bhi.n	8028f1c <_printf_i+0x28>
 8028f0c:	2f62      	cmp	r7, #98	; 0x62
 8028f0e:	d80a      	bhi.n	8028f26 <_printf_i+0x32>
 8028f10:	2f00      	cmp	r7, #0
 8028f12:	f000 80d8 	beq.w	80290c6 <_printf_i+0x1d2>
 8028f16:	2f58      	cmp	r7, #88	; 0x58
 8028f18:	f000 80a3 	beq.w	8029062 <_printf_i+0x16e>
 8028f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028f20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8028f24:	e03a      	b.n	8028f9c <_printf_i+0xa8>
 8028f26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8028f2a:	2b15      	cmp	r3, #21
 8028f2c:	d8f6      	bhi.n	8028f1c <_printf_i+0x28>
 8028f2e:	a101      	add	r1, pc, #4	; (adr r1, 8028f34 <_printf_i+0x40>)
 8028f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028f34:	08028f8d 	.word	0x08028f8d
 8028f38:	08028fa1 	.word	0x08028fa1
 8028f3c:	08028f1d 	.word	0x08028f1d
 8028f40:	08028f1d 	.word	0x08028f1d
 8028f44:	08028f1d 	.word	0x08028f1d
 8028f48:	08028f1d 	.word	0x08028f1d
 8028f4c:	08028fa1 	.word	0x08028fa1
 8028f50:	08028f1d 	.word	0x08028f1d
 8028f54:	08028f1d 	.word	0x08028f1d
 8028f58:	08028f1d 	.word	0x08028f1d
 8028f5c:	08028f1d 	.word	0x08028f1d
 8028f60:	080290ad 	.word	0x080290ad
 8028f64:	08028fd1 	.word	0x08028fd1
 8028f68:	0802908f 	.word	0x0802908f
 8028f6c:	08028f1d 	.word	0x08028f1d
 8028f70:	08028f1d 	.word	0x08028f1d
 8028f74:	080290cf 	.word	0x080290cf
 8028f78:	08028f1d 	.word	0x08028f1d
 8028f7c:	08028fd1 	.word	0x08028fd1
 8028f80:	08028f1d 	.word	0x08028f1d
 8028f84:	08028f1d 	.word	0x08028f1d
 8028f88:	08029097 	.word	0x08029097
 8028f8c:	682b      	ldr	r3, [r5, #0]
 8028f8e:	1d1a      	adds	r2, r3, #4
 8028f90:	681b      	ldr	r3, [r3, #0]
 8028f92:	602a      	str	r2, [r5, #0]
 8028f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028f9c:	2301      	movs	r3, #1
 8028f9e:	e0a3      	b.n	80290e8 <_printf_i+0x1f4>
 8028fa0:	6820      	ldr	r0, [r4, #0]
 8028fa2:	6829      	ldr	r1, [r5, #0]
 8028fa4:	0606      	lsls	r6, r0, #24
 8028fa6:	f101 0304 	add.w	r3, r1, #4
 8028faa:	d50a      	bpl.n	8028fc2 <_printf_i+0xce>
 8028fac:	680e      	ldr	r6, [r1, #0]
 8028fae:	602b      	str	r3, [r5, #0]
 8028fb0:	2e00      	cmp	r6, #0
 8028fb2:	da03      	bge.n	8028fbc <_printf_i+0xc8>
 8028fb4:	232d      	movs	r3, #45	; 0x2d
 8028fb6:	4276      	negs	r6, r6
 8028fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028fbc:	485e      	ldr	r0, [pc, #376]	; (8029138 <_printf_i+0x244>)
 8028fbe:	230a      	movs	r3, #10
 8028fc0:	e019      	b.n	8028ff6 <_printf_i+0x102>
 8028fc2:	680e      	ldr	r6, [r1, #0]
 8028fc4:	602b      	str	r3, [r5, #0]
 8028fc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8028fca:	bf18      	it	ne
 8028fcc:	b236      	sxthne	r6, r6
 8028fce:	e7ef      	b.n	8028fb0 <_printf_i+0xbc>
 8028fd0:	682b      	ldr	r3, [r5, #0]
 8028fd2:	6820      	ldr	r0, [r4, #0]
 8028fd4:	1d19      	adds	r1, r3, #4
 8028fd6:	6029      	str	r1, [r5, #0]
 8028fd8:	0601      	lsls	r1, r0, #24
 8028fda:	d501      	bpl.n	8028fe0 <_printf_i+0xec>
 8028fdc:	681e      	ldr	r6, [r3, #0]
 8028fde:	e002      	b.n	8028fe6 <_printf_i+0xf2>
 8028fe0:	0646      	lsls	r6, r0, #25
 8028fe2:	d5fb      	bpl.n	8028fdc <_printf_i+0xe8>
 8028fe4:	881e      	ldrh	r6, [r3, #0]
 8028fe6:	4854      	ldr	r0, [pc, #336]	; (8029138 <_printf_i+0x244>)
 8028fe8:	2f6f      	cmp	r7, #111	; 0x6f
 8028fea:	bf0c      	ite	eq
 8028fec:	2308      	moveq	r3, #8
 8028fee:	230a      	movne	r3, #10
 8028ff0:	2100      	movs	r1, #0
 8028ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8028ff6:	6865      	ldr	r5, [r4, #4]
 8028ff8:	60a5      	str	r5, [r4, #8]
 8028ffa:	2d00      	cmp	r5, #0
 8028ffc:	bfa2      	ittt	ge
 8028ffe:	6821      	ldrge	r1, [r4, #0]
 8029000:	f021 0104 	bicge.w	r1, r1, #4
 8029004:	6021      	strge	r1, [r4, #0]
 8029006:	b90e      	cbnz	r6, 802900c <_printf_i+0x118>
 8029008:	2d00      	cmp	r5, #0
 802900a:	d04d      	beq.n	80290a8 <_printf_i+0x1b4>
 802900c:	4615      	mov	r5, r2
 802900e:	fbb6 f1f3 	udiv	r1, r6, r3
 8029012:	fb03 6711 	mls	r7, r3, r1, r6
 8029016:	5dc7      	ldrb	r7, [r0, r7]
 8029018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802901c:	4637      	mov	r7, r6
 802901e:	42bb      	cmp	r3, r7
 8029020:	460e      	mov	r6, r1
 8029022:	d9f4      	bls.n	802900e <_printf_i+0x11a>
 8029024:	2b08      	cmp	r3, #8
 8029026:	d10b      	bne.n	8029040 <_printf_i+0x14c>
 8029028:	6823      	ldr	r3, [r4, #0]
 802902a:	07de      	lsls	r6, r3, #31
 802902c:	d508      	bpl.n	8029040 <_printf_i+0x14c>
 802902e:	6923      	ldr	r3, [r4, #16]
 8029030:	6861      	ldr	r1, [r4, #4]
 8029032:	4299      	cmp	r1, r3
 8029034:	bfde      	ittt	le
 8029036:	2330      	movle	r3, #48	; 0x30
 8029038:	f805 3c01 	strble.w	r3, [r5, #-1]
 802903c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8029040:	1b52      	subs	r2, r2, r5
 8029042:	6122      	str	r2, [r4, #16]
 8029044:	f8cd a000 	str.w	sl, [sp]
 8029048:	464b      	mov	r3, r9
 802904a:	aa03      	add	r2, sp, #12
 802904c:	4621      	mov	r1, r4
 802904e:	4640      	mov	r0, r8
 8029050:	f7ff fee2 	bl	8028e18 <_printf_common>
 8029054:	3001      	adds	r0, #1
 8029056:	d14c      	bne.n	80290f2 <_printf_i+0x1fe>
 8029058:	f04f 30ff 	mov.w	r0, #4294967295
 802905c:	b004      	add	sp, #16
 802905e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029062:	4835      	ldr	r0, [pc, #212]	; (8029138 <_printf_i+0x244>)
 8029064:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8029068:	6829      	ldr	r1, [r5, #0]
 802906a:	6823      	ldr	r3, [r4, #0]
 802906c:	f851 6b04 	ldr.w	r6, [r1], #4
 8029070:	6029      	str	r1, [r5, #0]
 8029072:	061d      	lsls	r5, r3, #24
 8029074:	d514      	bpl.n	80290a0 <_printf_i+0x1ac>
 8029076:	07df      	lsls	r7, r3, #31
 8029078:	bf44      	itt	mi
 802907a:	f043 0320 	orrmi.w	r3, r3, #32
 802907e:	6023      	strmi	r3, [r4, #0]
 8029080:	b91e      	cbnz	r6, 802908a <_printf_i+0x196>
 8029082:	6823      	ldr	r3, [r4, #0]
 8029084:	f023 0320 	bic.w	r3, r3, #32
 8029088:	6023      	str	r3, [r4, #0]
 802908a:	2310      	movs	r3, #16
 802908c:	e7b0      	b.n	8028ff0 <_printf_i+0xfc>
 802908e:	6823      	ldr	r3, [r4, #0]
 8029090:	f043 0320 	orr.w	r3, r3, #32
 8029094:	6023      	str	r3, [r4, #0]
 8029096:	2378      	movs	r3, #120	; 0x78
 8029098:	4828      	ldr	r0, [pc, #160]	; (802913c <_printf_i+0x248>)
 802909a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802909e:	e7e3      	b.n	8029068 <_printf_i+0x174>
 80290a0:	0659      	lsls	r1, r3, #25
 80290a2:	bf48      	it	mi
 80290a4:	b2b6      	uxthmi	r6, r6
 80290a6:	e7e6      	b.n	8029076 <_printf_i+0x182>
 80290a8:	4615      	mov	r5, r2
 80290aa:	e7bb      	b.n	8029024 <_printf_i+0x130>
 80290ac:	682b      	ldr	r3, [r5, #0]
 80290ae:	6826      	ldr	r6, [r4, #0]
 80290b0:	6961      	ldr	r1, [r4, #20]
 80290b2:	1d18      	adds	r0, r3, #4
 80290b4:	6028      	str	r0, [r5, #0]
 80290b6:	0635      	lsls	r5, r6, #24
 80290b8:	681b      	ldr	r3, [r3, #0]
 80290ba:	d501      	bpl.n	80290c0 <_printf_i+0x1cc>
 80290bc:	6019      	str	r1, [r3, #0]
 80290be:	e002      	b.n	80290c6 <_printf_i+0x1d2>
 80290c0:	0670      	lsls	r0, r6, #25
 80290c2:	d5fb      	bpl.n	80290bc <_printf_i+0x1c8>
 80290c4:	8019      	strh	r1, [r3, #0]
 80290c6:	2300      	movs	r3, #0
 80290c8:	6123      	str	r3, [r4, #16]
 80290ca:	4615      	mov	r5, r2
 80290cc:	e7ba      	b.n	8029044 <_printf_i+0x150>
 80290ce:	682b      	ldr	r3, [r5, #0]
 80290d0:	1d1a      	adds	r2, r3, #4
 80290d2:	602a      	str	r2, [r5, #0]
 80290d4:	681d      	ldr	r5, [r3, #0]
 80290d6:	6862      	ldr	r2, [r4, #4]
 80290d8:	2100      	movs	r1, #0
 80290da:	4628      	mov	r0, r5
 80290dc:	f7d7 f900 	bl	80002e0 <memchr>
 80290e0:	b108      	cbz	r0, 80290e6 <_printf_i+0x1f2>
 80290e2:	1b40      	subs	r0, r0, r5
 80290e4:	6060      	str	r0, [r4, #4]
 80290e6:	6863      	ldr	r3, [r4, #4]
 80290e8:	6123      	str	r3, [r4, #16]
 80290ea:	2300      	movs	r3, #0
 80290ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80290f0:	e7a8      	b.n	8029044 <_printf_i+0x150>
 80290f2:	6923      	ldr	r3, [r4, #16]
 80290f4:	462a      	mov	r2, r5
 80290f6:	4649      	mov	r1, r9
 80290f8:	4640      	mov	r0, r8
 80290fa:	47d0      	blx	sl
 80290fc:	3001      	adds	r0, #1
 80290fe:	d0ab      	beq.n	8029058 <_printf_i+0x164>
 8029100:	6823      	ldr	r3, [r4, #0]
 8029102:	079b      	lsls	r3, r3, #30
 8029104:	d413      	bmi.n	802912e <_printf_i+0x23a>
 8029106:	68e0      	ldr	r0, [r4, #12]
 8029108:	9b03      	ldr	r3, [sp, #12]
 802910a:	4298      	cmp	r0, r3
 802910c:	bfb8      	it	lt
 802910e:	4618      	movlt	r0, r3
 8029110:	e7a4      	b.n	802905c <_printf_i+0x168>
 8029112:	2301      	movs	r3, #1
 8029114:	4632      	mov	r2, r6
 8029116:	4649      	mov	r1, r9
 8029118:	4640      	mov	r0, r8
 802911a:	47d0      	blx	sl
 802911c:	3001      	adds	r0, #1
 802911e:	d09b      	beq.n	8029058 <_printf_i+0x164>
 8029120:	3501      	adds	r5, #1
 8029122:	68e3      	ldr	r3, [r4, #12]
 8029124:	9903      	ldr	r1, [sp, #12]
 8029126:	1a5b      	subs	r3, r3, r1
 8029128:	42ab      	cmp	r3, r5
 802912a:	dcf2      	bgt.n	8029112 <_printf_i+0x21e>
 802912c:	e7eb      	b.n	8029106 <_printf_i+0x212>
 802912e:	2500      	movs	r5, #0
 8029130:	f104 0619 	add.w	r6, r4, #25
 8029134:	e7f5      	b.n	8029122 <_printf_i+0x22e>
 8029136:	bf00      	nop
 8029138:	0802d7b1 	.word	0x0802d7b1
 802913c:	0802d7c2 	.word	0x0802d7c2

08029140 <cleanup_glue>:
 8029140:	b538      	push	{r3, r4, r5, lr}
 8029142:	460c      	mov	r4, r1
 8029144:	6809      	ldr	r1, [r1, #0]
 8029146:	4605      	mov	r5, r0
 8029148:	b109      	cbz	r1, 802914e <cleanup_glue+0xe>
 802914a:	f7ff fff9 	bl	8029140 <cleanup_glue>
 802914e:	4621      	mov	r1, r4
 8029150:	4628      	mov	r0, r5
 8029152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029156:	f7ff bc25 	b.w	80289a4 <_free_r>
	...

0802915c <_reclaim_reent>:
 802915c:	4b2c      	ldr	r3, [pc, #176]	; (8029210 <_reclaim_reent+0xb4>)
 802915e:	681b      	ldr	r3, [r3, #0]
 8029160:	4283      	cmp	r3, r0
 8029162:	b570      	push	{r4, r5, r6, lr}
 8029164:	4604      	mov	r4, r0
 8029166:	d051      	beq.n	802920c <_reclaim_reent+0xb0>
 8029168:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802916a:	b143      	cbz	r3, 802917e <_reclaim_reent+0x22>
 802916c:	68db      	ldr	r3, [r3, #12]
 802916e:	2b00      	cmp	r3, #0
 8029170:	d14a      	bne.n	8029208 <_reclaim_reent+0xac>
 8029172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029174:	6819      	ldr	r1, [r3, #0]
 8029176:	b111      	cbz	r1, 802917e <_reclaim_reent+0x22>
 8029178:	4620      	mov	r0, r4
 802917a:	f7ff fc13 	bl	80289a4 <_free_r>
 802917e:	6961      	ldr	r1, [r4, #20]
 8029180:	b111      	cbz	r1, 8029188 <_reclaim_reent+0x2c>
 8029182:	4620      	mov	r0, r4
 8029184:	f7ff fc0e 	bl	80289a4 <_free_r>
 8029188:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802918a:	b111      	cbz	r1, 8029192 <_reclaim_reent+0x36>
 802918c:	4620      	mov	r0, r4
 802918e:	f7ff fc09 	bl	80289a4 <_free_r>
 8029192:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8029194:	b111      	cbz	r1, 802919c <_reclaim_reent+0x40>
 8029196:	4620      	mov	r0, r4
 8029198:	f7ff fc04 	bl	80289a4 <_free_r>
 802919c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802919e:	b111      	cbz	r1, 80291a6 <_reclaim_reent+0x4a>
 80291a0:	4620      	mov	r0, r4
 80291a2:	f7ff fbff 	bl	80289a4 <_free_r>
 80291a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80291a8:	b111      	cbz	r1, 80291b0 <_reclaim_reent+0x54>
 80291aa:	4620      	mov	r0, r4
 80291ac:	f7ff fbfa 	bl	80289a4 <_free_r>
 80291b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80291b2:	b111      	cbz	r1, 80291ba <_reclaim_reent+0x5e>
 80291b4:	4620      	mov	r0, r4
 80291b6:	f7ff fbf5 	bl	80289a4 <_free_r>
 80291ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80291bc:	b111      	cbz	r1, 80291c4 <_reclaim_reent+0x68>
 80291be:	4620      	mov	r0, r4
 80291c0:	f7ff fbf0 	bl	80289a4 <_free_r>
 80291c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80291c6:	b111      	cbz	r1, 80291ce <_reclaim_reent+0x72>
 80291c8:	4620      	mov	r0, r4
 80291ca:	f7ff fbeb 	bl	80289a4 <_free_r>
 80291ce:	69a3      	ldr	r3, [r4, #24]
 80291d0:	b1e3      	cbz	r3, 802920c <_reclaim_reent+0xb0>
 80291d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80291d4:	4620      	mov	r0, r4
 80291d6:	4798      	blx	r3
 80291d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80291da:	b1b9      	cbz	r1, 802920c <_reclaim_reent+0xb0>
 80291dc:	4620      	mov	r0, r4
 80291de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80291e2:	f7ff bfad 	b.w	8029140 <cleanup_glue>
 80291e6:	5949      	ldr	r1, [r1, r5]
 80291e8:	b941      	cbnz	r1, 80291fc <_reclaim_reent+0xa0>
 80291ea:	3504      	adds	r5, #4
 80291ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80291ee:	2d80      	cmp	r5, #128	; 0x80
 80291f0:	68d9      	ldr	r1, [r3, #12]
 80291f2:	d1f8      	bne.n	80291e6 <_reclaim_reent+0x8a>
 80291f4:	4620      	mov	r0, r4
 80291f6:	f7ff fbd5 	bl	80289a4 <_free_r>
 80291fa:	e7ba      	b.n	8029172 <_reclaim_reent+0x16>
 80291fc:	680e      	ldr	r6, [r1, #0]
 80291fe:	4620      	mov	r0, r4
 8029200:	f7ff fbd0 	bl	80289a4 <_free_r>
 8029204:	4631      	mov	r1, r6
 8029206:	e7ef      	b.n	80291e8 <_reclaim_reent+0x8c>
 8029208:	2500      	movs	r5, #0
 802920a:	e7ef      	b.n	80291ec <_reclaim_reent+0x90>
 802920c:	bd70      	pop	{r4, r5, r6, pc}
 802920e:	bf00      	nop
 8029210:	200001ec 	.word	0x200001ec

08029214 <_sbrk_r>:
 8029214:	b538      	push	{r3, r4, r5, lr}
 8029216:	4d06      	ldr	r5, [pc, #24]	; (8029230 <_sbrk_r+0x1c>)
 8029218:	2300      	movs	r3, #0
 802921a:	4604      	mov	r4, r0
 802921c:	4608      	mov	r0, r1
 802921e:	602b      	str	r3, [r5, #0]
 8029220:	f7da fd44 	bl	8003cac <_sbrk>
 8029224:	1c43      	adds	r3, r0, #1
 8029226:	d102      	bne.n	802922e <_sbrk_r+0x1a>
 8029228:	682b      	ldr	r3, [r5, #0]
 802922a:	b103      	cbz	r3, 802922e <_sbrk_r+0x1a>
 802922c:	6023      	str	r3, [r4, #0]
 802922e:	bd38      	pop	{r3, r4, r5, pc}
 8029230:	200059f0 	.word	0x200059f0

08029234 <_raise_r>:
 8029234:	291f      	cmp	r1, #31
 8029236:	b538      	push	{r3, r4, r5, lr}
 8029238:	4604      	mov	r4, r0
 802923a:	460d      	mov	r5, r1
 802923c:	d904      	bls.n	8029248 <_raise_r+0x14>
 802923e:	2316      	movs	r3, #22
 8029240:	6003      	str	r3, [r0, #0]
 8029242:	f04f 30ff 	mov.w	r0, #4294967295
 8029246:	bd38      	pop	{r3, r4, r5, pc}
 8029248:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802924a:	b112      	cbz	r2, 8029252 <_raise_r+0x1e>
 802924c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029250:	b94b      	cbnz	r3, 8029266 <_raise_r+0x32>
 8029252:	4620      	mov	r0, r4
 8029254:	f000 f830 	bl	80292b8 <_getpid_r>
 8029258:	462a      	mov	r2, r5
 802925a:	4601      	mov	r1, r0
 802925c:	4620      	mov	r0, r4
 802925e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029262:	f000 b817 	b.w	8029294 <_kill_r>
 8029266:	2b01      	cmp	r3, #1
 8029268:	d00a      	beq.n	8029280 <_raise_r+0x4c>
 802926a:	1c59      	adds	r1, r3, #1
 802926c:	d103      	bne.n	8029276 <_raise_r+0x42>
 802926e:	2316      	movs	r3, #22
 8029270:	6003      	str	r3, [r0, #0]
 8029272:	2001      	movs	r0, #1
 8029274:	e7e7      	b.n	8029246 <_raise_r+0x12>
 8029276:	2400      	movs	r4, #0
 8029278:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802927c:	4628      	mov	r0, r5
 802927e:	4798      	blx	r3
 8029280:	2000      	movs	r0, #0
 8029282:	e7e0      	b.n	8029246 <_raise_r+0x12>

08029284 <raise>:
 8029284:	4b02      	ldr	r3, [pc, #8]	; (8029290 <raise+0xc>)
 8029286:	4601      	mov	r1, r0
 8029288:	6818      	ldr	r0, [r3, #0]
 802928a:	f7ff bfd3 	b.w	8029234 <_raise_r>
 802928e:	bf00      	nop
 8029290:	200001ec 	.word	0x200001ec

08029294 <_kill_r>:
 8029294:	b538      	push	{r3, r4, r5, lr}
 8029296:	4d07      	ldr	r5, [pc, #28]	; (80292b4 <_kill_r+0x20>)
 8029298:	2300      	movs	r3, #0
 802929a:	4604      	mov	r4, r0
 802929c:	4608      	mov	r0, r1
 802929e:	4611      	mov	r1, r2
 80292a0:	602b      	str	r3, [r5, #0]
 80292a2:	f7da fc7b 	bl	8003b9c <_kill>
 80292a6:	1c43      	adds	r3, r0, #1
 80292a8:	d102      	bne.n	80292b0 <_kill_r+0x1c>
 80292aa:	682b      	ldr	r3, [r5, #0]
 80292ac:	b103      	cbz	r3, 80292b0 <_kill_r+0x1c>
 80292ae:	6023      	str	r3, [r4, #0]
 80292b0:	bd38      	pop	{r3, r4, r5, pc}
 80292b2:	bf00      	nop
 80292b4:	200059f0 	.word	0x200059f0

080292b8 <_getpid_r>:
 80292b8:	f7da bc68 	b.w	8003b8c <_getpid>

080292bc <__sread>:
 80292bc:	b510      	push	{r4, lr}
 80292be:	460c      	mov	r4, r1
 80292c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292c4:	f000 fac8 	bl	8029858 <_read_r>
 80292c8:	2800      	cmp	r0, #0
 80292ca:	bfab      	itete	ge
 80292cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80292ce:	89a3      	ldrhlt	r3, [r4, #12]
 80292d0:	181b      	addge	r3, r3, r0
 80292d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80292d6:	bfac      	ite	ge
 80292d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80292da:	81a3      	strhlt	r3, [r4, #12]
 80292dc:	bd10      	pop	{r4, pc}

080292de <__swrite>:
 80292de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292e2:	461f      	mov	r7, r3
 80292e4:	898b      	ldrh	r3, [r1, #12]
 80292e6:	05db      	lsls	r3, r3, #23
 80292e8:	4605      	mov	r5, r0
 80292ea:	460c      	mov	r4, r1
 80292ec:	4616      	mov	r6, r2
 80292ee:	d505      	bpl.n	80292fc <__swrite+0x1e>
 80292f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292f4:	2302      	movs	r3, #2
 80292f6:	2200      	movs	r2, #0
 80292f8:	f000 fa2a 	bl	8029750 <_lseek_r>
 80292fc:	89a3      	ldrh	r3, [r4, #12]
 80292fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029306:	81a3      	strh	r3, [r4, #12]
 8029308:	4632      	mov	r2, r6
 802930a:	463b      	mov	r3, r7
 802930c:	4628      	mov	r0, r5
 802930e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029312:	f000 b869 	b.w	80293e8 <_write_r>

08029316 <__sseek>:
 8029316:	b510      	push	{r4, lr}
 8029318:	460c      	mov	r4, r1
 802931a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802931e:	f000 fa17 	bl	8029750 <_lseek_r>
 8029322:	1c43      	adds	r3, r0, #1
 8029324:	89a3      	ldrh	r3, [r4, #12]
 8029326:	bf15      	itete	ne
 8029328:	6560      	strne	r0, [r4, #84]	; 0x54
 802932a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802932e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8029332:	81a3      	strheq	r3, [r4, #12]
 8029334:	bf18      	it	ne
 8029336:	81a3      	strhne	r3, [r4, #12]
 8029338:	bd10      	pop	{r4, pc}

0802933a <__sclose>:
 802933a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802933e:	f000 b935 	b.w	80295ac <_close_r>
	...

08029344 <__swbuf_r>:
 8029344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029346:	460e      	mov	r6, r1
 8029348:	4614      	mov	r4, r2
 802934a:	4605      	mov	r5, r0
 802934c:	b118      	cbz	r0, 8029356 <__swbuf_r+0x12>
 802934e:	6983      	ldr	r3, [r0, #24]
 8029350:	b90b      	cbnz	r3, 8029356 <__swbuf_r+0x12>
 8029352:	f7ff fa29 	bl	80287a8 <__sinit>
 8029356:	4b21      	ldr	r3, [pc, #132]	; (80293dc <__swbuf_r+0x98>)
 8029358:	429c      	cmp	r4, r3
 802935a:	d12b      	bne.n	80293b4 <__swbuf_r+0x70>
 802935c:	686c      	ldr	r4, [r5, #4]
 802935e:	69a3      	ldr	r3, [r4, #24]
 8029360:	60a3      	str	r3, [r4, #8]
 8029362:	89a3      	ldrh	r3, [r4, #12]
 8029364:	071a      	lsls	r2, r3, #28
 8029366:	d52f      	bpl.n	80293c8 <__swbuf_r+0x84>
 8029368:	6923      	ldr	r3, [r4, #16]
 802936a:	b36b      	cbz	r3, 80293c8 <__swbuf_r+0x84>
 802936c:	6923      	ldr	r3, [r4, #16]
 802936e:	6820      	ldr	r0, [r4, #0]
 8029370:	1ac0      	subs	r0, r0, r3
 8029372:	6963      	ldr	r3, [r4, #20]
 8029374:	b2f6      	uxtb	r6, r6
 8029376:	4283      	cmp	r3, r0
 8029378:	4637      	mov	r7, r6
 802937a:	dc04      	bgt.n	8029386 <__swbuf_r+0x42>
 802937c:	4621      	mov	r1, r4
 802937e:	4628      	mov	r0, r5
 8029380:	f000 f9aa 	bl	80296d8 <_fflush_r>
 8029384:	bb30      	cbnz	r0, 80293d4 <__swbuf_r+0x90>
 8029386:	68a3      	ldr	r3, [r4, #8]
 8029388:	3b01      	subs	r3, #1
 802938a:	60a3      	str	r3, [r4, #8]
 802938c:	6823      	ldr	r3, [r4, #0]
 802938e:	1c5a      	adds	r2, r3, #1
 8029390:	6022      	str	r2, [r4, #0]
 8029392:	701e      	strb	r6, [r3, #0]
 8029394:	6963      	ldr	r3, [r4, #20]
 8029396:	3001      	adds	r0, #1
 8029398:	4283      	cmp	r3, r0
 802939a:	d004      	beq.n	80293a6 <__swbuf_r+0x62>
 802939c:	89a3      	ldrh	r3, [r4, #12]
 802939e:	07db      	lsls	r3, r3, #31
 80293a0:	d506      	bpl.n	80293b0 <__swbuf_r+0x6c>
 80293a2:	2e0a      	cmp	r6, #10
 80293a4:	d104      	bne.n	80293b0 <__swbuf_r+0x6c>
 80293a6:	4621      	mov	r1, r4
 80293a8:	4628      	mov	r0, r5
 80293aa:	f000 f995 	bl	80296d8 <_fflush_r>
 80293ae:	b988      	cbnz	r0, 80293d4 <__swbuf_r+0x90>
 80293b0:	4638      	mov	r0, r7
 80293b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80293b4:	4b0a      	ldr	r3, [pc, #40]	; (80293e0 <__swbuf_r+0x9c>)
 80293b6:	429c      	cmp	r4, r3
 80293b8:	d101      	bne.n	80293be <__swbuf_r+0x7a>
 80293ba:	68ac      	ldr	r4, [r5, #8]
 80293bc:	e7cf      	b.n	802935e <__swbuf_r+0x1a>
 80293be:	4b09      	ldr	r3, [pc, #36]	; (80293e4 <__swbuf_r+0xa0>)
 80293c0:	429c      	cmp	r4, r3
 80293c2:	bf08      	it	eq
 80293c4:	68ec      	ldreq	r4, [r5, #12]
 80293c6:	e7ca      	b.n	802935e <__swbuf_r+0x1a>
 80293c8:	4621      	mov	r1, r4
 80293ca:	4628      	mov	r0, r5
 80293cc:	f000 f81e 	bl	802940c <__swsetup_r>
 80293d0:	2800      	cmp	r0, #0
 80293d2:	d0cb      	beq.n	802936c <__swbuf_r+0x28>
 80293d4:	f04f 37ff 	mov.w	r7, #4294967295
 80293d8:	e7ea      	b.n	80293b0 <__swbuf_r+0x6c>
 80293da:	bf00      	nop
 80293dc:	0802d75c 	.word	0x0802d75c
 80293e0:	0802d77c 	.word	0x0802d77c
 80293e4:	0802d73c 	.word	0x0802d73c

080293e8 <_write_r>:
 80293e8:	b538      	push	{r3, r4, r5, lr}
 80293ea:	4d07      	ldr	r5, [pc, #28]	; (8029408 <_write_r+0x20>)
 80293ec:	4604      	mov	r4, r0
 80293ee:	4608      	mov	r0, r1
 80293f0:	4611      	mov	r1, r2
 80293f2:	2200      	movs	r2, #0
 80293f4:	602a      	str	r2, [r5, #0]
 80293f6:	461a      	mov	r2, r3
 80293f8:	f7da fc07 	bl	8003c0a <_write>
 80293fc:	1c43      	adds	r3, r0, #1
 80293fe:	d102      	bne.n	8029406 <_write_r+0x1e>
 8029400:	682b      	ldr	r3, [r5, #0]
 8029402:	b103      	cbz	r3, 8029406 <_write_r+0x1e>
 8029404:	6023      	str	r3, [r4, #0]
 8029406:	bd38      	pop	{r3, r4, r5, pc}
 8029408:	200059f0 	.word	0x200059f0

0802940c <__swsetup_r>:
 802940c:	4b32      	ldr	r3, [pc, #200]	; (80294d8 <__swsetup_r+0xcc>)
 802940e:	b570      	push	{r4, r5, r6, lr}
 8029410:	681d      	ldr	r5, [r3, #0]
 8029412:	4606      	mov	r6, r0
 8029414:	460c      	mov	r4, r1
 8029416:	b125      	cbz	r5, 8029422 <__swsetup_r+0x16>
 8029418:	69ab      	ldr	r3, [r5, #24]
 802941a:	b913      	cbnz	r3, 8029422 <__swsetup_r+0x16>
 802941c:	4628      	mov	r0, r5
 802941e:	f7ff f9c3 	bl	80287a8 <__sinit>
 8029422:	4b2e      	ldr	r3, [pc, #184]	; (80294dc <__swsetup_r+0xd0>)
 8029424:	429c      	cmp	r4, r3
 8029426:	d10f      	bne.n	8029448 <__swsetup_r+0x3c>
 8029428:	686c      	ldr	r4, [r5, #4]
 802942a:	89a3      	ldrh	r3, [r4, #12]
 802942c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029430:	0719      	lsls	r1, r3, #28
 8029432:	d42c      	bmi.n	802948e <__swsetup_r+0x82>
 8029434:	06dd      	lsls	r5, r3, #27
 8029436:	d411      	bmi.n	802945c <__swsetup_r+0x50>
 8029438:	2309      	movs	r3, #9
 802943a:	6033      	str	r3, [r6, #0]
 802943c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029440:	81a3      	strh	r3, [r4, #12]
 8029442:	f04f 30ff 	mov.w	r0, #4294967295
 8029446:	e03e      	b.n	80294c6 <__swsetup_r+0xba>
 8029448:	4b25      	ldr	r3, [pc, #148]	; (80294e0 <__swsetup_r+0xd4>)
 802944a:	429c      	cmp	r4, r3
 802944c:	d101      	bne.n	8029452 <__swsetup_r+0x46>
 802944e:	68ac      	ldr	r4, [r5, #8]
 8029450:	e7eb      	b.n	802942a <__swsetup_r+0x1e>
 8029452:	4b24      	ldr	r3, [pc, #144]	; (80294e4 <__swsetup_r+0xd8>)
 8029454:	429c      	cmp	r4, r3
 8029456:	bf08      	it	eq
 8029458:	68ec      	ldreq	r4, [r5, #12]
 802945a:	e7e6      	b.n	802942a <__swsetup_r+0x1e>
 802945c:	0758      	lsls	r0, r3, #29
 802945e:	d512      	bpl.n	8029486 <__swsetup_r+0x7a>
 8029460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029462:	b141      	cbz	r1, 8029476 <__swsetup_r+0x6a>
 8029464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029468:	4299      	cmp	r1, r3
 802946a:	d002      	beq.n	8029472 <__swsetup_r+0x66>
 802946c:	4630      	mov	r0, r6
 802946e:	f7ff fa99 	bl	80289a4 <_free_r>
 8029472:	2300      	movs	r3, #0
 8029474:	6363      	str	r3, [r4, #52]	; 0x34
 8029476:	89a3      	ldrh	r3, [r4, #12]
 8029478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802947c:	81a3      	strh	r3, [r4, #12]
 802947e:	2300      	movs	r3, #0
 8029480:	6063      	str	r3, [r4, #4]
 8029482:	6923      	ldr	r3, [r4, #16]
 8029484:	6023      	str	r3, [r4, #0]
 8029486:	89a3      	ldrh	r3, [r4, #12]
 8029488:	f043 0308 	orr.w	r3, r3, #8
 802948c:	81a3      	strh	r3, [r4, #12]
 802948e:	6923      	ldr	r3, [r4, #16]
 8029490:	b94b      	cbnz	r3, 80294a6 <__swsetup_r+0x9a>
 8029492:	89a3      	ldrh	r3, [r4, #12]
 8029494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8029498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802949c:	d003      	beq.n	80294a6 <__swsetup_r+0x9a>
 802949e:	4621      	mov	r1, r4
 80294a0:	4630      	mov	r0, r6
 80294a2:	f000 f98d 	bl	80297c0 <__smakebuf_r>
 80294a6:	89a0      	ldrh	r0, [r4, #12]
 80294a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80294ac:	f010 0301 	ands.w	r3, r0, #1
 80294b0:	d00a      	beq.n	80294c8 <__swsetup_r+0xbc>
 80294b2:	2300      	movs	r3, #0
 80294b4:	60a3      	str	r3, [r4, #8]
 80294b6:	6963      	ldr	r3, [r4, #20]
 80294b8:	425b      	negs	r3, r3
 80294ba:	61a3      	str	r3, [r4, #24]
 80294bc:	6923      	ldr	r3, [r4, #16]
 80294be:	b943      	cbnz	r3, 80294d2 <__swsetup_r+0xc6>
 80294c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80294c4:	d1ba      	bne.n	802943c <__swsetup_r+0x30>
 80294c6:	bd70      	pop	{r4, r5, r6, pc}
 80294c8:	0781      	lsls	r1, r0, #30
 80294ca:	bf58      	it	pl
 80294cc:	6963      	ldrpl	r3, [r4, #20]
 80294ce:	60a3      	str	r3, [r4, #8]
 80294d0:	e7f4      	b.n	80294bc <__swsetup_r+0xb0>
 80294d2:	2000      	movs	r0, #0
 80294d4:	e7f7      	b.n	80294c6 <__swsetup_r+0xba>
 80294d6:	bf00      	nop
 80294d8:	200001ec 	.word	0x200001ec
 80294dc:	0802d75c 	.word	0x0802d75c
 80294e0:	0802d77c 	.word	0x0802d77c
 80294e4:	0802d73c 	.word	0x0802d73c

080294e8 <__register_exitproc>:
 80294e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80294ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80295a8 <__register_exitproc+0xc0>
 80294f0:	4606      	mov	r6, r0
 80294f2:	f8d8 0000 	ldr.w	r0, [r8]
 80294f6:	461f      	mov	r7, r3
 80294f8:	460d      	mov	r5, r1
 80294fa:	4691      	mov	r9, r2
 80294fc:	f7ff fa29 	bl	8028952 <__retarget_lock_acquire_recursive>
 8029500:	4b25      	ldr	r3, [pc, #148]	; (8029598 <__register_exitproc+0xb0>)
 8029502:	681c      	ldr	r4, [r3, #0]
 8029504:	b934      	cbnz	r4, 8029514 <__register_exitproc+0x2c>
 8029506:	4c25      	ldr	r4, [pc, #148]	; (802959c <__register_exitproc+0xb4>)
 8029508:	601c      	str	r4, [r3, #0]
 802950a:	4b25      	ldr	r3, [pc, #148]	; (80295a0 <__register_exitproc+0xb8>)
 802950c:	b113      	cbz	r3, 8029514 <__register_exitproc+0x2c>
 802950e:	681b      	ldr	r3, [r3, #0]
 8029510:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8029514:	6863      	ldr	r3, [r4, #4]
 8029516:	2b1f      	cmp	r3, #31
 8029518:	dd07      	ble.n	802952a <__register_exitproc+0x42>
 802951a:	f8d8 0000 	ldr.w	r0, [r8]
 802951e:	f7ff fa1a 	bl	8028956 <__retarget_lock_release_recursive>
 8029522:	f04f 30ff 	mov.w	r0, #4294967295
 8029526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802952a:	b34e      	cbz	r6, 8029580 <__register_exitproc+0x98>
 802952c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8029530:	b988      	cbnz	r0, 8029556 <__register_exitproc+0x6e>
 8029532:	4b1c      	ldr	r3, [pc, #112]	; (80295a4 <__register_exitproc+0xbc>)
 8029534:	b923      	cbnz	r3, 8029540 <__register_exitproc+0x58>
 8029536:	f8d8 0000 	ldr.w	r0, [r8]
 802953a:	f7ff fa0b 	bl	8028954 <__retarget_lock_release>
 802953e:	e7f0      	b.n	8029522 <__register_exitproc+0x3a>
 8029540:	f44f 7084 	mov.w	r0, #264	; 0x108
 8029544:	f7ff fa08 	bl	8028958 <malloc>
 8029548:	2800      	cmp	r0, #0
 802954a:	d0f4      	beq.n	8029536 <__register_exitproc+0x4e>
 802954c:	2300      	movs	r3, #0
 802954e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8029552:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8029556:	6863      	ldr	r3, [r4, #4]
 8029558:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802955c:	2201      	movs	r2, #1
 802955e:	409a      	lsls	r2, r3
 8029560:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029564:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8029568:	4313      	orrs	r3, r2
 802956a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802956e:	2e02      	cmp	r6, #2
 8029570:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8029574:	bf02      	ittt	eq
 8029576:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802957a:	4313      	orreq	r3, r2
 802957c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8029580:	6863      	ldr	r3, [r4, #4]
 8029582:	f8d8 0000 	ldr.w	r0, [r8]
 8029586:	1c5a      	adds	r2, r3, #1
 8029588:	3302      	adds	r3, #2
 802958a:	6062      	str	r2, [r4, #4]
 802958c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8029590:	f7ff f9e1 	bl	8028956 <__retarget_lock_release_recursive>
 8029594:	2000      	movs	r0, #0
 8029596:	e7c6      	b.n	8029526 <__register_exitproc+0x3e>
 8029598:	20005a80 	.word	0x20005a80
 802959c:	200059f4 	.word	0x200059f4
 80295a0:	0802d7d4 	.word	0x0802d7d4
 80295a4:	08028959 	.word	0x08028959
 80295a8:	20000250 	.word	0x20000250

080295ac <_close_r>:
 80295ac:	b538      	push	{r3, r4, r5, lr}
 80295ae:	4d06      	ldr	r5, [pc, #24]	; (80295c8 <_close_r+0x1c>)
 80295b0:	2300      	movs	r3, #0
 80295b2:	4604      	mov	r4, r0
 80295b4:	4608      	mov	r0, r1
 80295b6:	602b      	str	r3, [r5, #0]
 80295b8:	f7da fb43 	bl	8003c42 <_close>
 80295bc:	1c43      	adds	r3, r0, #1
 80295be:	d102      	bne.n	80295c6 <_close_r+0x1a>
 80295c0:	682b      	ldr	r3, [r5, #0]
 80295c2:	b103      	cbz	r3, 80295c6 <_close_r+0x1a>
 80295c4:	6023      	str	r3, [r4, #0]
 80295c6:	bd38      	pop	{r3, r4, r5, pc}
 80295c8:	200059f0 	.word	0x200059f0

080295cc <__sflush_r>:
 80295cc:	898a      	ldrh	r2, [r1, #12]
 80295ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80295d2:	4605      	mov	r5, r0
 80295d4:	0710      	lsls	r0, r2, #28
 80295d6:	460c      	mov	r4, r1
 80295d8:	d458      	bmi.n	802968c <__sflush_r+0xc0>
 80295da:	684b      	ldr	r3, [r1, #4]
 80295dc:	2b00      	cmp	r3, #0
 80295de:	dc05      	bgt.n	80295ec <__sflush_r+0x20>
 80295e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80295e2:	2b00      	cmp	r3, #0
 80295e4:	dc02      	bgt.n	80295ec <__sflush_r+0x20>
 80295e6:	2000      	movs	r0, #0
 80295e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80295ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80295ee:	2e00      	cmp	r6, #0
 80295f0:	d0f9      	beq.n	80295e6 <__sflush_r+0x1a>
 80295f2:	2300      	movs	r3, #0
 80295f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80295f8:	682f      	ldr	r7, [r5, #0]
 80295fa:	602b      	str	r3, [r5, #0]
 80295fc:	d032      	beq.n	8029664 <__sflush_r+0x98>
 80295fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029600:	89a3      	ldrh	r3, [r4, #12]
 8029602:	075a      	lsls	r2, r3, #29
 8029604:	d505      	bpl.n	8029612 <__sflush_r+0x46>
 8029606:	6863      	ldr	r3, [r4, #4]
 8029608:	1ac0      	subs	r0, r0, r3
 802960a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802960c:	b10b      	cbz	r3, 8029612 <__sflush_r+0x46>
 802960e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029610:	1ac0      	subs	r0, r0, r3
 8029612:	2300      	movs	r3, #0
 8029614:	4602      	mov	r2, r0
 8029616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029618:	6a21      	ldr	r1, [r4, #32]
 802961a:	4628      	mov	r0, r5
 802961c:	47b0      	blx	r6
 802961e:	1c43      	adds	r3, r0, #1
 8029620:	89a3      	ldrh	r3, [r4, #12]
 8029622:	d106      	bne.n	8029632 <__sflush_r+0x66>
 8029624:	6829      	ldr	r1, [r5, #0]
 8029626:	291d      	cmp	r1, #29
 8029628:	d82c      	bhi.n	8029684 <__sflush_r+0xb8>
 802962a:	4a2a      	ldr	r2, [pc, #168]	; (80296d4 <__sflush_r+0x108>)
 802962c:	40ca      	lsrs	r2, r1
 802962e:	07d6      	lsls	r6, r2, #31
 8029630:	d528      	bpl.n	8029684 <__sflush_r+0xb8>
 8029632:	2200      	movs	r2, #0
 8029634:	6062      	str	r2, [r4, #4]
 8029636:	04d9      	lsls	r1, r3, #19
 8029638:	6922      	ldr	r2, [r4, #16]
 802963a:	6022      	str	r2, [r4, #0]
 802963c:	d504      	bpl.n	8029648 <__sflush_r+0x7c>
 802963e:	1c42      	adds	r2, r0, #1
 8029640:	d101      	bne.n	8029646 <__sflush_r+0x7a>
 8029642:	682b      	ldr	r3, [r5, #0]
 8029644:	b903      	cbnz	r3, 8029648 <__sflush_r+0x7c>
 8029646:	6560      	str	r0, [r4, #84]	; 0x54
 8029648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802964a:	602f      	str	r7, [r5, #0]
 802964c:	2900      	cmp	r1, #0
 802964e:	d0ca      	beq.n	80295e6 <__sflush_r+0x1a>
 8029650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029654:	4299      	cmp	r1, r3
 8029656:	d002      	beq.n	802965e <__sflush_r+0x92>
 8029658:	4628      	mov	r0, r5
 802965a:	f7ff f9a3 	bl	80289a4 <_free_r>
 802965e:	2000      	movs	r0, #0
 8029660:	6360      	str	r0, [r4, #52]	; 0x34
 8029662:	e7c1      	b.n	80295e8 <__sflush_r+0x1c>
 8029664:	6a21      	ldr	r1, [r4, #32]
 8029666:	2301      	movs	r3, #1
 8029668:	4628      	mov	r0, r5
 802966a:	47b0      	blx	r6
 802966c:	1c41      	adds	r1, r0, #1
 802966e:	d1c7      	bne.n	8029600 <__sflush_r+0x34>
 8029670:	682b      	ldr	r3, [r5, #0]
 8029672:	2b00      	cmp	r3, #0
 8029674:	d0c4      	beq.n	8029600 <__sflush_r+0x34>
 8029676:	2b1d      	cmp	r3, #29
 8029678:	d001      	beq.n	802967e <__sflush_r+0xb2>
 802967a:	2b16      	cmp	r3, #22
 802967c:	d101      	bne.n	8029682 <__sflush_r+0xb6>
 802967e:	602f      	str	r7, [r5, #0]
 8029680:	e7b1      	b.n	80295e6 <__sflush_r+0x1a>
 8029682:	89a3      	ldrh	r3, [r4, #12]
 8029684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029688:	81a3      	strh	r3, [r4, #12]
 802968a:	e7ad      	b.n	80295e8 <__sflush_r+0x1c>
 802968c:	690f      	ldr	r7, [r1, #16]
 802968e:	2f00      	cmp	r7, #0
 8029690:	d0a9      	beq.n	80295e6 <__sflush_r+0x1a>
 8029692:	0793      	lsls	r3, r2, #30
 8029694:	680e      	ldr	r6, [r1, #0]
 8029696:	bf08      	it	eq
 8029698:	694b      	ldreq	r3, [r1, #20]
 802969a:	600f      	str	r7, [r1, #0]
 802969c:	bf18      	it	ne
 802969e:	2300      	movne	r3, #0
 80296a0:	eba6 0807 	sub.w	r8, r6, r7
 80296a4:	608b      	str	r3, [r1, #8]
 80296a6:	f1b8 0f00 	cmp.w	r8, #0
 80296aa:	dd9c      	ble.n	80295e6 <__sflush_r+0x1a>
 80296ac:	6a21      	ldr	r1, [r4, #32]
 80296ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80296b0:	4643      	mov	r3, r8
 80296b2:	463a      	mov	r2, r7
 80296b4:	4628      	mov	r0, r5
 80296b6:	47b0      	blx	r6
 80296b8:	2800      	cmp	r0, #0
 80296ba:	dc06      	bgt.n	80296ca <__sflush_r+0xfe>
 80296bc:	89a3      	ldrh	r3, [r4, #12]
 80296be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80296c2:	81a3      	strh	r3, [r4, #12]
 80296c4:	f04f 30ff 	mov.w	r0, #4294967295
 80296c8:	e78e      	b.n	80295e8 <__sflush_r+0x1c>
 80296ca:	4407      	add	r7, r0
 80296cc:	eba8 0800 	sub.w	r8, r8, r0
 80296d0:	e7e9      	b.n	80296a6 <__sflush_r+0xda>
 80296d2:	bf00      	nop
 80296d4:	20400001 	.word	0x20400001

080296d8 <_fflush_r>:
 80296d8:	b538      	push	{r3, r4, r5, lr}
 80296da:	690b      	ldr	r3, [r1, #16]
 80296dc:	4605      	mov	r5, r0
 80296de:	460c      	mov	r4, r1
 80296e0:	b913      	cbnz	r3, 80296e8 <_fflush_r+0x10>
 80296e2:	2500      	movs	r5, #0
 80296e4:	4628      	mov	r0, r5
 80296e6:	bd38      	pop	{r3, r4, r5, pc}
 80296e8:	b118      	cbz	r0, 80296f2 <_fflush_r+0x1a>
 80296ea:	6983      	ldr	r3, [r0, #24]
 80296ec:	b90b      	cbnz	r3, 80296f2 <_fflush_r+0x1a>
 80296ee:	f7ff f85b 	bl	80287a8 <__sinit>
 80296f2:	4b14      	ldr	r3, [pc, #80]	; (8029744 <_fflush_r+0x6c>)
 80296f4:	429c      	cmp	r4, r3
 80296f6:	d11b      	bne.n	8029730 <_fflush_r+0x58>
 80296f8:	686c      	ldr	r4, [r5, #4]
 80296fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80296fe:	2b00      	cmp	r3, #0
 8029700:	d0ef      	beq.n	80296e2 <_fflush_r+0xa>
 8029702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029704:	07d0      	lsls	r0, r2, #31
 8029706:	d404      	bmi.n	8029712 <_fflush_r+0x3a>
 8029708:	0599      	lsls	r1, r3, #22
 802970a:	d402      	bmi.n	8029712 <_fflush_r+0x3a>
 802970c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802970e:	f7ff f920 	bl	8028952 <__retarget_lock_acquire_recursive>
 8029712:	4628      	mov	r0, r5
 8029714:	4621      	mov	r1, r4
 8029716:	f7ff ff59 	bl	80295cc <__sflush_r>
 802971a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802971c:	07da      	lsls	r2, r3, #31
 802971e:	4605      	mov	r5, r0
 8029720:	d4e0      	bmi.n	80296e4 <_fflush_r+0xc>
 8029722:	89a3      	ldrh	r3, [r4, #12]
 8029724:	059b      	lsls	r3, r3, #22
 8029726:	d4dd      	bmi.n	80296e4 <_fflush_r+0xc>
 8029728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802972a:	f7ff f914 	bl	8028956 <__retarget_lock_release_recursive>
 802972e:	e7d9      	b.n	80296e4 <_fflush_r+0xc>
 8029730:	4b05      	ldr	r3, [pc, #20]	; (8029748 <_fflush_r+0x70>)
 8029732:	429c      	cmp	r4, r3
 8029734:	d101      	bne.n	802973a <_fflush_r+0x62>
 8029736:	68ac      	ldr	r4, [r5, #8]
 8029738:	e7df      	b.n	80296fa <_fflush_r+0x22>
 802973a:	4b04      	ldr	r3, [pc, #16]	; (802974c <_fflush_r+0x74>)
 802973c:	429c      	cmp	r4, r3
 802973e:	bf08      	it	eq
 8029740:	68ec      	ldreq	r4, [r5, #12]
 8029742:	e7da      	b.n	80296fa <_fflush_r+0x22>
 8029744:	0802d75c 	.word	0x0802d75c
 8029748:	0802d77c 	.word	0x0802d77c
 802974c:	0802d73c 	.word	0x0802d73c

08029750 <_lseek_r>:
 8029750:	b538      	push	{r3, r4, r5, lr}
 8029752:	4d07      	ldr	r5, [pc, #28]	; (8029770 <_lseek_r+0x20>)
 8029754:	4604      	mov	r4, r0
 8029756:	4608      	mov	r0, r1
 8029758:	4611      	mov	r1, r2
 802975a:	2200      	movs	r2, #0
 802975c:	602a      	str	r2, [r5, #0]
 802975e:	461a      	mov	r2, r3
 8029760:	f7da fa96 	bl	8003c90 <_lseek>
 8029764:	1c43      	adds	r3, r0, #1
 8029766:	d102      	bne.n	802976e <_lseek_r+0x1e>
 8029768:	682b      	ldr	r3, [r5, #0]
 802976a:	b103      	cbz	r3, 802976e <_lseek_r+0x1e>
 802976c:	6023      	str	r3, [r4, #0]
 802976e:	bd38      	pop	{r3, r4, r5, pc}
 8029770:	200059f0 	.word	0x200059f0

08029774 <__swhatbuf_r>:
 8029774:	b570      	push	{r4, r5, r6, lr}
 8029776:	460e      	mov	r6, r1
 8029778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802977c:	2900      	cmp	r1, #0
 802977e:	b096      	sub	sp, #88	; 0x58
 8029780:	4614      	mov	r4, r2
 8029782:	461d      	mov	r5, r3
 8029784:	da08      	bge.n	8029798 <__swhatbuf_r+0x24>
 8029786:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802978a:	2200      	movs	r2, #0
 802978c:	602a      	str	r2, [r5, #0]
 802978e:	061a      	lsls	r2, r3, #24
 8029790:	d410      	bmi.n	80297b4 <__swhatbuf_r+0x40>
 8029792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029796:	e00e      	b.n	80297b6 <__swhatbuf_r+0x42>
 8029798:	466a      	mov	r2, sp
 802979a:	f000 f86f 	bl	802987c <_fstat_r>
 802979e:	2800      	cmp	r0, #0
 80297a0:	dbf1      	blt.n	8029786 <__swhatbuf_r+0x12>
 80297a2:	9a01      	ldr	r2, [sp, #4]
 80297a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80297a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80297ac:	425a      	negs	r2, r3
 80297ae:	415a      	adcs	r2, r3
 80297b0:	602a      	str	r2, [r5, #0]
 80297b2:	e7ee      	b.n	8029792 <__swhatbuf_r+0x1e>
 80297b4:	2340      	movs	r3, #64	; 0x40
 80297b6:	2000      	movs	r0, #0
 80297b8:	6023      	str	r3, [r4, #0]
 80297ba:	b016      	add	sp, #88	; 0x58
 80297bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080297c0 <__smakebuf_r>:
 80297c0:	898b      	ldrh	r3, [r1, #12]
 80297c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80297c4:	079d      	lsls	r5, r3, #30
 80297c6:	4606      	mov	r6, r0
 80297c8:	460c      	mov	r4, r1
 80297ca:	d507      	bpl.n	80297dc <__smakebuf_r+0x1c>
 80297cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80297d0:	6023      	str	r3, [r4, #0]
 80297d2:	6123      	str	r3, [r4, #16]
 80297d4:	2301      	movs	r3, #1
 80297d6:	6163      	str	r3, [r4, #20]
 80297d8:	b002      	add	sp, #8
 80297da:	bd70      	pop	{r4, r5, r6, pc}
 80297dc:	ab01      	add	r3, sp, #4
 80297de:	466a      	mov	r2, sp
 80297e0:	f7ff ffc8 	bl	8029774 <__swhatbuf_r>
 80297e4:	9900      	ldr	r1, [sp, #0]
 80297e6:	4605      	mov	r5, r0
 80297e8:	4630      	mov	r0, r6
 80297ea:	f7ff f947 	bl	8028a7c <_malloc_r>
 80297ee:	b948      	cbnz	r0, 8029804 <__smakebuf_r+0x44>
 80297f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80297f4:	059a      	lsls	r2, r3, #22
 80297f6:	d4ef      	bmi.n	80297d8 <__smakebuf_r+0x18>
 80297f8:	f023 0303 	bic.w	r3, r3, #3
 80297fc:	f043 0302 	orr.w	r3, r3, #2
 8029800:	81a3      	strh	r3, [r4, #12]
 8029802:	e7e3      	b.n	80297cc <__smakebuf_r+0xc>
 8029804:	4b0d      	ldr	r3, [pc, #52]	; (802983c <__smakebuf_r+0x7c>)
 8029806:	62b3      	str	r3, [r6, #40]	; 0x28
 8029808:	89a3      	ldrh	r3, [r4, #12]
 802980a:	6020      	str	r0, [r4, #0]
 802980c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029810:	81a3      	strh	r3, [r4, #12]
 8029812:	9b00      	ldr	r3, [sp, #0]
 8029814:	6163      	str	r3, [r4, #20]
 8029816:	9b01      	ldr	r3, [sp, #4]
 8029818:	6120      	str	r0, [r4, #16]
 802981a:	b15b      	cbz	r3, 8029834 <__smakebuf_r+0x74>
 802981c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029820:	4630      	mov	r0, r6
 8029822:	f000 f83d 	bl	80298a0 <_isatty_r>
 8029826:	b128      	cbz	r0, 8029834 <__smakebuf_r+0x74>
 8029828:	89a3      	ldrh	r3, [r4, #12]
 802982a:	f023 0303 	bic.w	r3, r3, #3
 802982e:	f043 0301 	orr.w	r3, r3, #1
 8029832:	81a3      	strh	r3, [r4, #12]
 8029834:	89a0      	ldrh	r0, [r4, #12]
 8029836:	4305      	orrs	r5, r0
 8029838:	81a5      	strh	r5, [r4, #12]
 802983a:	e7cd      	b.n	80297d8 <__smakebuf_r+0x18>
 802983c:	08028741 	.word	0x08028741

08029840 <__malloc_lock>:
 8029840:	4801      	ldr	r0, [pc, #4]	; (8029848 <__malloc_lock+0x8>)
 8029842:	f7ff b886 	b.w	8028952 <__retarget_lock_acquire_recursive>
 8029846:	bf00      	nop
 8029848:	200058dd 	.word	0x200058dd

0802984c <__malloc_unlock>:
 802984c:	4801      	ldr	r0, [pc, #4]	; (8029854 <__malloc_unlock+0x8>)
 802984e:	f7ff b882 	b.w	8028956 <__retarget_lock_release_recursive>
 8029852:	bf00      	nop
 8029854:	200058dd 	.word	0x200058dd

08029858 <_read_r>:
 8029858:	b538      	push	{r3, r4, r5, lr}
 802985a:	4d07      	ldr	r5, [pc, #28]	; (8029878 <_read_r+0x20>)
 802985c:	4604      	mov	r4, r0
 802985e:	4608      	mov	r0, r1
 8029860:	4611      	mov	r1, r2
 8029862:	2200      	movs	r2, #0
 8029864:	602a      	str	r2, [r5, #0]
 8029866:	461a      	mov	r2, r3
 8029868:	f7da f9b2 	bl	8003bd0 <_read>
 802986c:	1c43      	adds	r3, r0, #1
 802986e:	d102      	bne.n	8029876 <_read_r+0x1e>
 8029870:	682b      	ldr	r3, [r5, #0]
 8029872:	b103      	cbz	r3, 8029876 <_read_r+0x1e>
 8029874:	6023      	str	r3, [r4, #0]
 8029876:	bd38      	pop	{r3, r4, r5, pc}
 8029878:	200059f0 	.word	0x200059f0

0802987c <_fstat_r>:
 802987c:	b538      	push	{r3, r4, r5, lr}
 802987e:	4d07      	ldr	r5, [pc, #28]	; (802989c <_fstat_r+0x20>)
 8029880:	2300      	movs	r3, #0
 8029882:	4604      	mov	r4, r0
 8029884:	4608      	mov	r0, r1
 8029886:	4611      	mov	r1, r2
 8029888:	602b      	str	r3, [r5, #0]
 802988a:	f7da f9e6 	bl	8003c5a <_fstat>
 802988e:	1c43      	adds	r3, r0, #1
 8029890:	d102      	bne.n	8029898 <_fstat_r+0x1c>
 8029892:	682b      	ldr	r3, [r5, #0]
 8029894:	b103      	cbz	r3, 8029898 <_fstat_r+0x1c>
 8029896:	6023      	str	r3, [r4, #0]
 8029898:	bd38      	pop	{r3, r4, r5, pc}
 802989a:	bf00      	nop
 802989c:	200059f0 	.word	0x200059f0

080298a0 <_isatty_r>:
 80298a0:	b538      	push	{r3, r4, r5, lr}
 80298a2:	4d06      	ldr	r5, [pc, #24]	; (80298bc <_isatty_r+0x1c>)
 80298a4:	2300      	movs	r3, #0
 80298a6:	4604      	mov	r4, r0
 80298a8:	4608      	mov	r0, r1
 80298aa:	602b      	str	r3, [r5, #0]
 80298ac:	f7da f9e5 	bl	8003c7a <_isatty>
 80298b0:	1c43      	adds	r3, r0, #1
 80298b2:	d102      	bne.n	80298ba <_isatty_r+0x1a>
 80298b4:	682b      	ldr	r3, [r5, #0]
 80298b6:	b103      	cbz	r3, 80298ba <_isatty_r+0x1a>
 80298b8:	6023      	str	r3, [r4, #0]
 80298ba:	bd38      	pop	{r3, r4, r5, pc}
 80298bc:	200059f0 	.word	0x200059f0

080298c0 <_init>:
 80298c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80298c2:	bf00      	nop
 80298c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80298c6:	bc08      	pop	{r3}
 80298c8:	469e      	mov	lr, r3
 80298ca:	4770      	bx	lr

080298cc <_fini>:
 80298cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80298ce:	bf00      	nop
 80298d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80298d2:	bc08      	pop	{r3}
 80298d4:	469e      	mov	lr, r3
 80298d6:	4770      	bx	lr
