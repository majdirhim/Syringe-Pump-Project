
openh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a684  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000041f4  0802a924  0802a924  0003a924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000009c6  0802eb18  0802eb18  0003eb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000014  0802f4e0  0802f4e0  0003f4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00018490  0802f4f4  0802f4f4  0003f4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000038  08047984  08047984  00057984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  080479bc  080479bc  000579bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  080479c4  080479c4  000579c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  080479d8  080479d8  000579d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000228  20000000  080479e0  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000059c0  20000228  08047c08  00060228  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005be8  08047c08  00065be8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00060228  2**0
                  CONTENTS, READONLY
 14 .debug_info   000b402f  00000000  00000000  00060256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001404c  00000000  00000000  00114285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000046c8  00000000  00000000  001282d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004188  00000000  00000000  0012c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004a0e4  00000000  00000000  00130b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000504cb  00000000  00000000  0017ac0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001ab7f7  00000000  00000000  001cb0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000cf  00000000  00000000  003768ce  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00013388  00000000  00000000  003769a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000228 	.word	0x20000228
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802a90c 	.word	0x0802a90c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000022c 	.word	0x2000022c
 80002dc:	0802a90c 	.word	0x0802a90c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08e      	sub	sp, #56	; 0x38
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
 800069a:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
 80006aa:	615a      	str	r2, [r3, #20]
 80006ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80006ae:	4b37      	ldr	r3, [pc, #220]	; (800078c <MX_ADC3_Init+0x108>)
 80006b0:	4a37      	ldr	r2, [pc, #220]	; (8000790 <MX_ADC3_Init+0x10c>)
 80006b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006b4:	4b35      	ldr	r3, [pc, #212]	; (800078c <MX_ADC3_Init+0x108>)
 80006b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006ba:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <MX_ADC3_Init+0x108>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c2:	4b32      	ldr	r3, [pc, #200]	; (800078c <MX_ADC3_Init+0x108>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <MX_ADC3_Init+0x108>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <MX_ADC3_Init+0x108>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	; (800078c <MX_ADC3_Init+0x108>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <MX_ADC3_Init+0x108>)
 80006dc:	2201      	movs	r2, #1
 80006de:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006e0:	4b2a      	ldr	r3, [pc, #168]	; (800078c <MX_ADC3_Init+0x108>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <MX_ADC3_Init+0x108>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <MX_ADC3_Init+0x108>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_ADC3_Init+0x108>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <MX_ADC3_Init+0x108>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_ADC3_Init+0x108>)
 8000700:	2200      	movs	r2, #0
 8000702:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC3_Init+0x108>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800070c:	481f      	ldr	r0, [pc, #124]	; (800078c <MX_ADC3_Init+0x108>)
 800070e:	f004 fb2f 	bl	8004d70 <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8000718:	f003 f80c 	bl	8003734 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC3_Init+0x110>)
 800071e:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000720:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC3_Init+0x114>)
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 800072a:	2301      	movs	r3, #1
 800072c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 1374;
 8000730:	f240 535e 	movw	r3, #1374	; 0x55e
 8000734:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4619      	mov	r1, r3
 8000740:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_ADC3_Init+0x108>)
 8000742:	f005 fc21 	bl	8005f88 <HAL_ADC_AnalogWDGConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 800074c:	f002 fff2 	bl	8003734 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ADC3_Init+0x114>)
 8000752:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000754:	2306      	movs	r3, #6
 8000756:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000758:	2306      	movs	r3, #6
 800075a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800075c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000760:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000762:	2304      	movs	r3, #4
 8000764:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_ADC3_Init+0x108>)
 8000774:	f005 f8b8 	bl	80058e8 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 800077e:	f002 ffd9 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3738      	adds	r7, #56	; 0x38
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000244 	.word	0x20000244
 8000790:	58026000 	.word	0x58026000
 8000794:	7dc00000 	.word	0x7dc00000
 8000798:	cb840000 	.word	0xcb840000

0800079c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0b2      	sub	sp, #200	; 0xc8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	22bc      	movs	r2, #188	; 0xbc
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f029 f917 	bl	80299e0 <memset>
  if(adcHandle->Instance==ADC3)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a1f      	ldr	r2, [pc, #124]	; (8000834 <HAL_ADC_MspInit+0x98>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d137      	bne.n	800082c <HAL_ADC_MspInit+0x90>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 80007c6:	2312      	movs	r3, #18
 80007c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007d6:	23c0      	movs	r3, #192	; 0xc0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007da:	2320      	movs	r3, #32
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80007de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4618      	mov	r0, r3
 80007f0:	f008 f926 	bl	8008a40 <HAL_RCCEx_PeriphCLKConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_ADC_MspInit+0x62>
    {
      Error_Handler();
 80007fa:	f002 ff9b 	bl	8003734 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 8000806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2105      	movs	r1, #5
 8000820:	207f      	movs	r0, #127	; 0x7f
 8000822:	f006 f951 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000826:	207f      	movs	r0, #127	; 0x7f
 8000828:	f006 f968 	bl	8006afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800082c:	bf00      	nop
 800082e:	37c8      	adds	r7, #200	; 0xc8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	58026000 	.word	0x58026000
 8000838:	58024400 	.word	0x58024400

0800083c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_CRC_Init+0x3c>)
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <MX_CRC_Init+0x40>)
 8000844:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_CRC_Init+0x3c>)
 8000848:	2200      	movs	r2, #0
 800084a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_CRC_Init+0x3c>)
 800084e:	2200      	movs	r2, #0
 8000850:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_CRC_Init+0x3c>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_CRC_Init+0x3c>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_CRC_Init+0x3c>)
 8000860:	2201      	movs	r2, #1
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_CRC_Init+0x3c>)
 8000866:	f006 f957 	bl	8006b18 <HAL_CRC_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000870:	f002 ff60 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200002a8 	.word	0x200002a8
 800087c:	58024c00 	.word	0x58024c00

08000880 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <HAL_CRC_MspInit+0x3c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d10e      	bne.n	80008b0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_CRC_MspInit+0x40>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <HAL_CRC_MspInit+0x40>)
 800089a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <HAL_CRC_MspInit+0x40>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	58024c00 	.word	0x58024c00
 80008c0:	58024400 	.word	0x58024400

080008c4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008ca:	4a1a      	ldr	r2, [pc, #104]	; (8000934 <MX_DMA2D_Init+0x70>)
 80008cc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_DMA2D_Init+0x6c>)
 8000900:	2200      	movs	r2, #0
 8000902:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_DMA2D_Init+0x6c>)
 8000906:	2200      	movs	r2, #0
 8000908:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <MX_DMA2D_Init+0x6c>)
 800090c:	f006 f9ee 	bl	8006cec <HAL_DMA2D_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000916:	f002 ff0d 	bl	8003734 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800091a:	2101      	movs	r1, #1
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_DMA2D_Init+0x6c>)
 800091e:	f006 fa49 	bl	8006db4 <HAL_DMA2D_ConfigLayer>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000928:	f002 ff04 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200002cc 	.word	0x200002cc
 8000934:	52001000 	.word	0x52001000

08000938 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <HAL_DMA2D_MspInit+0x3c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10e      	bne.n	8000968 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_DMA2D_MspInit+0x40>)
 800094c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000950:	4a09      	ldr	r2, [pc, #36]	; (8000978 <HAL_DMA2D_MspInit+0x40>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <HAL_DMA2D_MspInit+0x40>)
 800095c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	52001000 	.word	0x52001000
 8000978:	58024400 	.word	0x58024400

0800097c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of battery_manage */
  battery_manageHandle = osThreadNew(StartBatteryManage, NULL, &battery_manage_attributes);
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <MX_FREERTOS_Init+0x58>)
 8000982:	2100      	movs	r1, #0
 8000984:	4814      	ldr	r0, [pc, #80]	; (80009d8 <MX_FREERTOS_Init+0x5c>)
 8000986:	f00d fa7f 	bl	800de88 <osThreadNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_FREERTOS_Init+0x60>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of Stepper */
  StepperHandle = osThreadNew(Stepper_motor, NULL, &Stepper_attributes);
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <MX_FREERTOS_Init+0x64>)
 8000992:	2100      	movs	r1, #0
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_FREERTOS_Init+0x68>)
 8000996:	f00d fa77 	bl	800de88 <osThreadNew>
 800099a:	4603      	mov	r3, r0
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_FREERTOS_Init+0x6c>)
 800099e:	6013      	str	r3, [r2, #0]

  /* creation of Connectivity */
  ConnectivityHandle = osThreadNew(Cloud_Connectivity, NULL, &Connectivity_attributes);
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_FREERTOS_Init+0x70>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_FREERTOS_Init+0x74>)
 80009a6:	f00d fa6f 	bl	800de88 <osThreadNew>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <MX_FREERTOS_Init+0x78>)
 80009ae:	6013      	str	r3, [r2, #0]

  /* creation of Sensors */
  SensorsHandle = osThreadNew(Sensors_measurements, NULL, &Sensors_attributes);
 80009b0:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <MX_FREERTOS_Init+0x7c>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_FREERTOS_Init+0x80>)
 80009b6:	f00d fa67 	bl	800de88 <osThreadNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <MX_FREERTOS_Init+0x84>)
 80009be:	6013      	str	r3, [r2, #0]

  /* creation of IHM */
  IHMHandle = osThreadNew(Interface, NULL, &IHM_attributes);
 80009c0:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <MX_FREERTOS_Init+0x88>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4810      	ldr	r0, [pc, #64]	; (8000a08 <MX_FREERTOS_Init+0x8c>)
 80009c6:	f00d fa5f 	bl	800de88 <osThreadNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_FREERTOS_Init+0x90>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	0802b550 	.word	0x0802b550
 80009d8:	08000a11 	.word	0x08000a11
 80009dc:	20000338 	.word	0x20000338
 80009e0:	0802b574 	.word	0x0802b574
 80009e4:	08000a21 	.word	0x08000a21
 80009e8:	2000033c 	.word	0x2000033c
 80009ec:	0802b598 	.word	0x0802b598
 80009f0:	08000a7d 	.word	0x08000a7d
 80009f4:	20000340 	.word	0x20000340
 80009f8:	0802b5bc 	.word	0x0802b5bc
 80009fc:	08000a91 	.word	0x08000a91
 8000a00:	20000344 	.word	0x20000344
 8000a04:	0802b5e0 	.word	0x0802b5e0
 8000a08:	08000b01 	.word	0x08000b01
 8000a0c:	20000348 	.word	0x20000348

08000a10 <StartBatteryManage>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBatteryManage */
void StartBatteryManage(void *argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryManage */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f00d fac7 	bl	800dfac <osDelay>
 8000a1e:	e7fb      	b.n	8000a18 <StartBatteryManage+0x8>

08000a20 <Stepper_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Stepper_motor */
void Stepper_motor(void *argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_motor */
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <Stepper_motor+0x58>)
 8000a2a:	f002 fea1 	bl	8003770 <BSP_MotorControl_AttachFlagInterrupt>
  /* Infinite loop */
  for(;;)
  {
	L6474_SetMaxSpeed(0, 1000);
 8000a2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a32:	2000      	movs	r0, #0
 8000a34:	f001 fa84 	bl	8001f40 <L6474_SetMaxSpeed>
	L6474_SetMinSpeed(0, 1000);
 8000a38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f001 facb 	bl	8001fd8 <L6474_SetMinSpeed>
	L6474_Move(0, BACKWARD, 16000);
 8000a42:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000a46:	2100      	movs	r1, #0
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 ff3f 	bl	80018cc <L6474_Move>
	L6474_WaitWhileActive(0);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f001 fb50 	bl	80020f4 <L6474_WaitWhileActive>
	osDelay(1000);
 8000a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a58:	f00d faa8 	bl	800dfac <osDelay>
	L6474_Move(0, FORWARD, 16000);
 8000a5c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000a60:	2101      	movs	r1, #1
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 ff32 	bl	80018cc <L6474_Move>
	L6474_WaitWhileActive(0);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 fb43 	bl	80020f4 <L6474_WaitWhileActive>
	osDelay(1000);
 8000a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a72:	f00d fa9b 	bl	800dfac <osDelay>
	L6474_SetMaxSpeed(0, 1000);
 8000a76:	e7da      	b.n	8000a2e <Stepper_motor+0xe>
 8000a78:	080036e5 	.word	0x080036e5

08000a7c <Cloud_Connectivity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Cloud_Connectivity */
void Cloud_Connectivity(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Cloud_Connectivity */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f00d fa91 	bl	800dfac <osDelay>
 8000a8a:	e7fb      	b.n	8000a84 <Cloud_Connectivity+0x8>
 8000a8c:	0000      	movs	r0, r0
	...

08000a90 <Sensors_measurements>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensors_measurements */
void Sensors_measurements(void *argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensors_measurements */
	uint16_t readValue;
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc3); // temp
 8000a98:	4817      	ldr	r0, [pc, #92]	; (8000af8 <Sensors_measurements+0x68>)
 8000a9a:	f004 fb0b 	bl	80050b4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, 10000);
 8000a9e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000aa2:	4815      	ldr	r0, [pc, #84]	; (8000af8 <Sensors_measurements+0x68>)
 8000aa4:	f004 fbd0 	bl	8005248 <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc3);
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <Sensors_measurements+0x68>)
 8000aaa:	f004 fcc1 	bl	8005430 <HAL_ADC_GetValue>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	81fb      	strh	r3, [r7, #14]
	  tCelsius = 357.558 - 0.187364 * readValue;
 8000ab2:	89fb      	ldrh	r3, [r7, #14]
 8000ab4:	ee07 3a90 	vmov	s15, r3
 8000ab8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000abc:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000ae8 <Sensors_measurements+0x58>
 8000ac0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ac4:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000af0 <Sensors_measurements+0x60>
 8000ac8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000acc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ad0:	ee17 2a90 	vmov	r2, s15
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <Sensors_measurements+0x6c>)
 8000ad6:	601a      	str	r2, [r3, #0]
	  osDelay(1000);
 8000ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000adc:	f00d fa66 	bl	800dfac <osDelay>
	  HAL_ADC_Start(&hadc3); // temp
 8000ae0:	e7da      	b.n	8000a98 <Sensors_measurements+0x8>
 8000ae2:	bf00      	nop
 8000ae4:	f3af 8000 	nop.w
 8000ae8:	26394fad 	.word	0x26394fad
 8000aec:	3fc7fb8b 	.word	0x3fc7fb8b
 8000af0:	916872b0 	.word	0x916872b0
 8000af4:	407658ed 	.word	0x407658ed
 8000af8:	20000244 	.word	0x20000244
 8000afc:	20000334 	.word	0x20000334

08000b00 <Interface>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Interface */
void Interface(void *argument)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Interface */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f00d fa4f 	bl	800dfac <osDelay>
 8000b0e:	e7fb      	b.n	8000b08 <Interface+0x8>

08000b10 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b26:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a5d      	ldr	r2, [pc, #372]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0310 	and.w	r3, r3, #16
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b44:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a56      	ldr	r2, [pc, #344]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b53      	ldr	r3, [pc, #332]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b62:	4b50      	ldr	r3, [pc, #320]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a4e      	ldr	r2, [pc, #312]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b6a:	f043 0320 	orr.w	r3, r3, #32
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b4c      	ldr	r3, [pc, #304]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0320 	and.w	r3, r3, #32
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b80:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a47      	ldr	r2, [pc, #284]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b44      	ldr	r3, [pc, #272]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b41      	ldr	r3, [pc, #260]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a3f      	ldr	r2, [pc, #252]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	4a38      	ldr	r2, [pc, #224]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bcc:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a30      	ldr	r2, [pc, #192]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000be2:	f043 0302 	orr.w	r3, r3, #2
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	4a29      	ldr	r2, [pc, #164]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_GPIO_Init+0x194>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, STBY_RST_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000c3a:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <MX_GPIO_Init+0x198>)
 8000c3c:	f006 fb18 	bl	8007270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	21c0      	movs	r1, #192	; 0xc0
 8000c44:	4819      	ldr	r0, [pc, #100]	; (8000cac <MX_GPIO_Init+0x19c>)
 8000c46:	f006 fb13 	bl	8007270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = STBY_RST_Pin|DIR1_Pin;
 8000c4a:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <MX_GPIO_Init+0x198>)
 8000c64:	f006 f954 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLAG_Pin;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FLAG_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_GPIO_Init+0x1a0>)
 8000c7c:	f006 f948 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000c80:	23c0      	movs	r3, #192	; 0xc0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_GPIO_Init+0x19c>)
 8000c98:	f006 f93a 	bl	8006f10 <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3738      	adds	r7, #56	; 0x38
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	58022000 	.word	0x58022000
 8000cac:	58020400 	.word	0x58020400
 8000cb0:	58021c00 	.word	0x58021c00

08000cb4 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cba:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <MX_I2C1_SMBUS_Init+0x80>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10C0ECFF;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <MX_I2C1_SMBUS_Init+0x84>)
 8000cc2:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000084C4;
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000d02:	f248 42c4 	movw	r2, #33988	; 0x84c4
 8000d06:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000d0a:	f00a f825 	bl	800ad58 <HAL_SMBUS_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000d14:	f002 fd0e 	bl	8003734 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_SMBUS_ConfigDigitalFilter(&hsmbus1, 0) != HAL_OK)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_I2C1_SMBUS_Init+0x7c>)
 8000d1c:	f00a f8d4 	bl	800aec8 <HAL_SMBUS_ConfigDigitalFilter>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_I2C1_SMBUS_Init+0x76>
  {
    Error_Handler();
 8000d26:	f002 fd05 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000034c 	.word	0x2000034c
 8000d34:	40005400 	.word	0x40005400
 8000d38:	10c0ecff 	.word	0x10c0ecff

08000d3c <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0b8      	sub	sp, #224	; 0xe0
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	22bc      	movs	r2, #188	; 0xbc
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f028 fe3f 	bl	80299e0 <memset>
  if(smbusHandle->Instance==I2C1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a25      	ldr	r2, [pc, #148]	; (8000dfc <HAL_SMBUS_MspInit+0xc0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d142      	bne.n	8000df2 <HAL_SMBUS_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f007 fe60 	bl	8008a40 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 8000d86:	f002 fcd5 	bl	8003734 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_SMBUS_MspInit+0xc4>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <HAL_SMBUS_MspInit+0xc4>)
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_SMBUS_MspInit+0xc4>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000da8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <HAL_SMBUS_MspInit+0xc8>)
 8000dd0:	f006 f89e 	bl	8006f10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_SMBUS_MspInit+0xc4>)
 8000dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dda:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <HAL_SMBUS_MspInit+0xc4>)
 8000ddc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_SMBUS_MspInit+0xc4>)
 8000de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000df2:	bf00      	nop
 8000df4:	37e0      	adds	r7, #224	; 0xe0
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	58024400 	.word	0x58024400
 8000e04:	58020400 	.word	0x58020400

08000e08 <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <L6474_AttachErrorHandler+0x1c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	200003a0 	.word	0x200003a0

08000e28 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <L6474_AttachFlagInterrupt+0x1c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2000039c 	.word	0x2000039c

08000e48 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	21a8      	movs	r1, #168	; 0xa8
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 faa8 	bl	80023ac <L6474_SendCommand>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	21b8      	movs	r1, #184	; 0xb8
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 fa9a 	bl	80023ac <L6474_SendCommand>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000e90:	4b70      	ldr	r3, [pc, #448]	; (8001054 <L6474_CmdGetParam+0x1d4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000ea4:	4b6c      	ldr	r3, [pc, #432]	; (8001058 <L6474_CmdGetParam+0x1d8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000eaa:	7cbb      	ldrb	r3, [r7, #18]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <L6474_CmdGetParam+0x34>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      //L6474_Board_EnableIrq();
      //__enable_irq();
      itDisable = FALSE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e02b      	b.n	8000f12 <L6474_CmdGetParam+0x92>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000eba:	4a68      	ldr	r2, [pc, #416]	; (800105c <L6474_CmdGetParam+0x1dc>)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8000ec4:	4a65      	ldr	r2, [pc, #404]	; (800105c <L6474_CmdGetParam+0x1dc>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	4413      	add	r3, r2
 8000eca:	3303      	adds	r3, #3
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8000ed0:	4a62      	ldr	r2, [pc, #392]	; (800105c <L6474_CmdGetParam+0x1dc>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3306      	adds	r3, #6
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8000edc:	4a5f      	ldr	r2, [pc, #380]	; (800105c <L6474_CmdGetParam+0x1dc>)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3309      	adds	r3, #9
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 8000ee8:	4a5d      	ldr	r2, [pc, #372]	; (8001060 <L6474_CmdGetParam+0x1e0>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	4413      	add	r3, r2
 8000eee:	3303      	adds	r3, #3
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 8000ef4:	4a5a      	ldr	r2, [pc, #360]	; (8001060 <L6474_CmdGetParam+0x1e0>)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	3306      	adds	r3, #6
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 8000f00:	4a57      	ldr	r2, [pc, #348]	; (8001060 <L6474_CmdGetParam+0x1e0>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	4413      	add	r3, r2
 8000f06:	3309      	adds	r3, #9
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	4b50      	ldr	r3, [pc, #320]	; (8001054 <L6474_CmdGetParam+0x1d4>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d3cc      	bcc.n	8000eba <L6474_CmdGetParam+0x3a>
    }
    switch (param)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	2b18      	cmp	r3, #24
 8000f26:	d84d      	bhi.n	8000fc4 <L6474_CmdGetParam+0x144>
 8000f28:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <L6474_CmdGetParam+0xb0>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f95 	.word	0x08000f95
 8000f34:	08000fab 	.word	0x08000fab
 8000f38:	08000f95 	.word	0x08000f95
 8000f3c:	08000fc5 	.word	0x08000fc5
 8000f40:	08000fc5 	.word	0x08000fc5
 8000f44:	08000fc5 	.word	0x08000fc5
 8000f48:	08000fc5 	.word	0x08000fc5
 8000f4c:	08000fc5 	.word	0x08000fc5
 8000f50:	08000fc5 	.word	0x08000fc5
 8000f54:	08000fc5 	.word	0x08000fc5
 8000f58:	08000fc5 	.word	0x08000fc5
 8000f5c:	08000fc5 	.word	0x08000fc5
 8000f60:	08000fc5 	.word	0x08000fc5
 8000f64:	08000fc5 	.word	0x08000fc5
 8000f68:	08000fc5 	.word	0x08000fc5
 8000f6c:	08000fc5 	.word	0x08000fc5
 8000f70:	08000fc5 	.word	0x08000fc5
 8000f74:	08000fc5 	.word	0x08000fc5
 8000f78:	08000fc5 	.word	0x08000fc5
 8000f7c:	08000fc5 	.word	0x08000fc5
 8000f80:	08000fc5 	.word	0x08000fc5
 8000f84:	08000fc5 	.word	0x08000fc5
 8000f88:	08000fc5 	.word	0x08000fc5
 8000f8c:	08000fab 	.word	0x08000fab
 8000f90:	08000fab 	.word	0x08000fab
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	7c7b      	ldrb	r3, [r7, #17]
 8000f9a:	f042 0220 	orr.w	r2, r2, #32
 8000f9e:	b2d1      	uxtb	r1, r2
 8000fa0:	4a2e      	ldr	r2, [pc, #184]	; (800105c <L6474_CmdGetParam+0x1dc>)
 8000fa2:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	74fb      	strb	r3, [r7, #19]
        break;
 8000fa8:	e018      	b.n	8000fdc <L6474_CmdGetParam+0x15c>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	7c7b      	ldrb	r3, [r7, #17]
 8000fb0:	f042 0220 	orr.w	r2, r2, #32
 8000fb4:	b2d1      	uxtb	r1, r2
 8000fb6:	4a29      	ldr	r2, [pc, #164]	; (800105c <L6474_CmdGetParam+0x1dc>)
 8000fb8:	4413      	add	r3, r2
 8000fba:	460a      	mov	r2, r1
 8000fbc:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	74fb      	strb	r3, [r7, #19]
        break;
 8000fc2:	e00b      	b.n	8000fdc <L6474_CmdGetParam+0x15c>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	7c7b      	ldrb	r3, [r7, #17]
 8000fca:	f042 0220 	orr.w	r2, r2, #32
 8000fce:	b2d1      	uxtb	r1, r2
 8000fd0:	4a22      	ldr	r2, [pc, #136]	; (800105c <L6474_CmdGetParam+0x1dc>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8000fdc:	f003 f8dd 	bl	800419a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <L6474_CmdGetParam+0x1d8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f47f af5a 	bne.w	8000ea4 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000ff0:	7cfb      	ldrb	r3, [r7, #19]
 8000ff2:	f1c3 0303 	rsb	r3, r3, #3
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e011      	b.n	800101e <L6474_CmdGetParam+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <L6474_CmdGetParam+0x1dc>)
 8001004:	1898      	adds	r0, r3, r2
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <L6474_CmdGetParam+0x1e0>)
 8001010:	4413      	add	r3, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f002 f86c 	bl	80030f0 <L6474_WriteBytes>
       i++)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b03      	cmp	r3, #3
 8001022:	d9ea      	bls.n	8000ffa <L6474_CmdGetParam+0x17a>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001024:	7c7b      	ldrb	r3, [r7, #17]
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <L6474_CmdGetParam+0x1e0>)
 8001028:	4413      	add	r3, r2
 800102a:	78db      	ldrb	r3, [r3, #3]
 800102c:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 800102e:	7c7a      	ldrb	r2, [r7, #17]
 8001030:	490b      	ldr	r1, [pc, #44]	; (8001060 <L6474_CmdGetParam+0x1e0>)
 8001032:	440a      	add	r2, r1
 8001034:	7992      	ldrb	r2, [r2, #6]
 8001036:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001038:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 800103a:	7c7a      	ldrb	r2, [r7, #17]
 800103c:	4908      	ldr	r1, [pc, #32]	; (8001060 <L6474_CmdGetParam+0x1e0>)
 800103e:	440a      	add	r2, r1
 8001040:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001042:	4313      	orrs	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001046:	f003 f8b1 	bl	80041ac <L6474_Board_EnableIrq>
    
  return (spiRxData);
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200003a4 	.word	0x200003a4
 8001058:	200003c0 	.word	0x200003c0
 800105c:	200003a8 	.word	0x200003a8
 8001060:	200003b4 	.word	0x200003b4

08001064 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800106e:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <L6474_CmdGetStatus+0xfc>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	3b01      	subs	r3, #1
 800107c:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 800107e:	2300      	movs	r3, #0
 8001080:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <L6474_CmdGetStatus+0x100>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 800108e:	f003 f88d 	bl	80041ac <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001092:	2300      	movs	r3, #0
 8001094:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e01f      	b.n	80010dc <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 800109c:	4a32      	ldr	r2, [pc, #200]	; (8001168 <L6474_CmdGetStatus+0x104>)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4413      	add	r3, r2
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 80010a6:	4a30      	ldr	r2, [pc, #192]	; (8001168 <L6474_CmdGetStatus+0x104>)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	3303      	adds	r3, #3
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 80010b2:	4a2d      	ldr	r2, [pc, #180]	; (8001168 <L6474_CmdGetStatus+0x104>)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	3306      	adds	r3, #6
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 80010be:	4a2b      	ldr	r2, [pc, #172]	; (800116c <L6474_CmdGetStatus+0x108>)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	3303      	adds	r3, #3
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 80010ca:	4a28      	ldr	r2, [pc, #160]	; (800116c <L6474_CmdGetStatus+0x108>)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	3306      	adds	r3, #6
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3301      	adds	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <L6474_CmdGetStatus+0xfc>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d3d8      	bcc.n	800109c <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 80010ea:	7abb      	ldrb	r3, [r7, #10]
 80010ec:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <L6474_CmdGetStatus+0x104>)
 80010ee:	21d0      	movs	r1, #208	; 0xd0
 80010f0:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80010f2:	f003 f852 	bl	800419a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <L6474_CmdGetStatus+0x100>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1be      	bne.n	8001082 <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e011      	b.n	800112e <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	4a15      	ldr	r2, [pc, #84]	; (8001168 <L6474_CmdGetStatus+0x104>)
 8001114:	1898      	adds	r0, r3, r2
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <L6474_CmdGetStatus+0x108>)
 8001120:	4413      	add	r3, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f001 ffe4 	bl	80030f0 <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3301      	adds	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d9ea      	bls.n	800110a <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001134:	7abb      	ldrb	r3, [r7, #10]
 8001136:	4a0d      	ldr	r2, [pc, #52]	; (800116c <L6474_CmdGetStatus+0x108>)
 8001138:	4413      	add	r3, r2
 800113a:	78db      	ldrb	r3, [r3, #3]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7abb      	ldrb	r3, [r7, #10]
 8001142:	490a      	ldr	r1, [pc, #40]	; (800116c <L6474_CmdGetStatus+0x108>)
 8001144:	440b      	add	r3, r1
 8001146:	799b      	ldrb	r3, [r3, #6]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21b      	sxth	r3, r3
 800114e:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001150:	f003 f82c 	bl	80041ac <L6474_Board_EnableIrq>
  
  return (status);
 8001154:	893b      	ldrh	r3, [r7, #8]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200003a4 	.word	0x200003a4
 8001164:	200003c0 	.word	0x200003c0
 8001168:	200003a8 	.word	0x200003a8
 800116c:	200003b4 	.word	0x200003b4

08001170 <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f914 	bl	80023ac <L6474_SendCommand>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800119e:	4b69      	ldr	r3, [pc, #420]	; (8001344 <L6474_CmdSetParam+0x1b8>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	3b01      	subs	r3, #1
 80011ac:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80011ae:	2300      	movs	r3, #0
 80011b0:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 80011b2:	4b65      	ldr	r3, [pc, #404]	; (8001348 <L6474_CmdSetParam+0x1bc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80011b8:	7cbb      	ldrb	r3, [r7, #18]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80011be:	f002 fff5 	bl	80041ac <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e019      	b.n	8001200 <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80011cc:	4a5f      	ldr	r2, [pc, #380]	; (800134c <L6474_CmdSetParam+0x1c0>)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	4413      	add	r3, r2
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80011d6:	4a5d      	ldr	r2, [pc, #372]	; (800134c <L6474_CmdSetParam+0x1c0>)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	4413      	add	r3, r2
 80011dc:	3303      	adds	r3, #3
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80011e2:	4a5a      	ldr	r2, [pc, #360]	; (800134c <L6474_CmdSetParam+0x1c0>)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	4413      	add	r3, r2
 80011e8:	3306      	adds	r3, #6
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80011ee:	4a57      	ldr	r2, [pc, #348]	; (800134c <L6474_CmdSetParam+0x1c0>)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	3309      	adds	r3, #9
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	4b50      	ldr	r3, [pc, #320]	; (8001344 <L6474_CmdSetParam+0x1b8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	4293      	cmp	r3, r2
 800120c:	d3de      	bcc.n	80011cc <L6474_CmdSetParam+0x40>
    }
    switch (param)
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	3b01      	subs	r3, #1
 8001212:	2b17      	cmp	r3, #23
 8001214:	d85c      	bhi.n	80012d0 <L6474_CmdSetParam+0x144>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <L6474_CmdSetParam+0x90>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	0800127d 	.word	0x0800127d
 8001220:	080012ad 	.word	0x080012ad
 8001224:	0800127d 	.word	0x0800127d
 8001228:	080012d1 	.word	0x080012d1
 800122c:	080012d1 	.word	0x080012d1
 8001230:	080012d1 	.word	0x080012d1
 8001234:	080012d1 	.word	0x080012d1
 8001238:	080012d1 	.word	0x080012d1
 800123c:	080012d1 	.word	0x080012d1
 8001240:	080012d1 	.word	0x080012d1
 8001244:	080012d1 	.word	0x080012d1
 8001248:	080012d1 	.word	0x080012d1
 800124c:	080012d1 	.word	0x080012d1
 8001250:	080012d1 	.word	0x080012d1
 8001254:	080012d1 	.word	0x080012d1
 8001258:	080012d1 	.word	0x080012d1
 800125c:	080012d1 	.word	0x080012d1
 8001260:	080012d1 	.word	0x080012d1
 8001264:	080012d1 	.word	0x080012d1
 8001268:	080012d1 	.word	0x080012d1
 800126c:	080012d1 	.word	0x080012d1
 8001270:	080012d1 	.word	0x080012d1
 8001274:	080012d1 	.word	0x080012d1
 8001278:	080012ad 	.word	0x080012ad
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 800127c:	7c7b      	ldrb	r3, [r7, #17]
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	b2d1      	uxtb	r1, r2
 8001282:	4a32      	ldr	r2, [pc, #200]	; (800134c <L6474_CmdSetParam+0x1c0>)
 8001284:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	0c1a      	lsrs	r2, r3, #16
 800128a:	7c7b      	ldrb	r3, [r7, #17]
 800128c:	b2d1      	uxtb	r1, r2
 800128e:	4a2f      	ldr	r2, [pc, #188]	; (800134c <L6474_CmdSetParam+0x1c0>)
 8001290:	4413      	add	r3, r2
 8001292:	460a      	mov	r2, r1
 8001294:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	0a1a      	lsrs	r2, r3, #8
 800129a:	7c7b      	ldrb	r3, [r7, #17]
 800129c:	b2d1      	uxtb	r1, r2
 800129e:	4a2b      	ldr	r2, [pc, #172]	; (800134c <L6474_CmdSetParam+0x1c0>)
 80012a0:	4413      	add	r3, r2
 80012a2:	460a      	mov	r2, r1
 80012a4:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 80012a6:	2303      	movs	r3, #3
 80012a8:	74fb      	strb	r3, [r7, #19]
        break;
 80012aa:	e01a      	b.n	80012e2 <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 80012ac:	7c7b      	ldrb	r3, [r7, #17]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	b2d1      	uxtb	r1, r2
 80012b2:	4a26      	ldr	r2, [pc, #152]	; (800134c <L6474_CmdSetParam+0x1c0>)
 80012b4:	4413      	add	r3, r2
 80012b6:	460a      	mov	r2, r1
 80012b8:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	0a1a      	lsrs	r2, r3, #8
 80012be:	7c7b      	ldrb	r3, [r7, #17]
 80012c0:	b2d1      	uxtb	r1, r2
 80012c2:	4a22      	ldr	r2, [pc, #136]	; (800134c <L6474_CmdSetParam+0x1c0>)
 80012c4:	4413      	add	r3, r2
 80012c6:	460a      	mov	r2, r1
 80012c8:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 80012ca:	2302      	movs	r3, #2
 80012cc:	74fb      	strb	r3, [r7, #19]
        break;
 80012ce:	e008      	b.n	80012e2 <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 80012d0:	7c7b      	ldrb	r3, [r7, #17]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	b2d1      	uxtb	r1, r2
 80012d6:	4a1d      	ldr	r2, [pc, #116]	; (800134c <L6474_CmdSetParam+0x1c0>)
 80012d8:	4413      	add	r3, r2
 80012da:	460a      	mov	r2, r1
 80012dc:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80012e2:	7c7b      	ldrb	r3, [r7, #17]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	b2d1      	uxtb	r1, r2
 80012e8:	4a18      	ldr	r2, [pc, #96]	; (800134c <L6474_CmdSetParam+0x1c0>)
 80012ea:	4413      	add	r3, r2
 80012ec:	460a      	mov	r2, r1
 80012ee:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80012f0:	f002 ff53 	bl	800419a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <L6474_CmdSetParam+0x1bc>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f47f af57 	bne.w	80011b2 <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001304:	7cfb      	ldrb	r3, [r7, #19]
 8001306:	f1c3 0303 	rsb	r3, r3, #3
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e011      	b.n	8001332 <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	4a0d      	ldr	r2, [pc, #52]	; (800134c <L6474_CmdSetParam+0x1c0>)
 8001318:	1898      	adds	r0, r3, r2
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <L6474_CmdSetParam+0x1c4>)
 8001324:	4413      	add	r3, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f001 fee2 	bl	80030f0 <L6474_WriteBytes>
       i++)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d9ea      	bls.n	800130e <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001338:	f002 ff38 	bl	80041ac <L6474_Board_EnableIrq>
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200003a4 	.word	0x200003a4
 8001348:	200003c0 	.word	0x200003c0
 800134c:	200003a8 	.word	0x200003a8
 8001350:	200003b4 	.word	0x200003b4

08001354 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <L6474_Init+0x94>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f002 ff2c 	bl	80041c0 <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 8001368:	f003 f928 	bl	80045bc <L6474_Board_SpiInit>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 8001372:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001376:	f000 ffed 	bl	8002354 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <L6474_Init+0x94>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f003 f847 	bl	8004414 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <L6474_Init+0x94>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	f003 f8c1 	bl	8004514 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 8001392:	2001      	movs	r0, #1
 8001394:	f002 fef6 	bl	8004184 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <L6474_Init+0x94>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 f8f7 	bl	8002598 <L6474_SetDeviceParamsToPredefinedValues>
 80013aa:	e006      	b.n	80013ba <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <L6474_Init+0x94>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 f84b 	bl	8002450 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <L6474_Init+0x94>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fd41 	bl	8000e48 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <L6474_Init+0x94>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fe49 	bl	8001064 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <L6474_Init+0x94>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <L6474_Init+0x94>)
 80013dc:	801a      	strh	r2, [r3, #0]
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003c2 	.word	0x200003c2

080013ec <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 80013f6:	79fa      	ldrb	r2, [r7, #7]
 80013f8:	4907      	ldr	r1, [pc, #28]	; (8001418 <L6474_GetAcceleration+0x2c>)
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	3318      	adds	r3, #24
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
}            
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	200003c4 	.word	0x200003c4

0800141c <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 8001426:	79fa      	ldrb	r2, [r7, #7]
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <L6474_GetCurrentSpeed+0x2c>)
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	440b      	add	r3, r1
 8001434:	3320      	adds	r3, #32
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b29b      	uxth	r3, r3
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	200003c4 	.word	0x200003c4

0800144c <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	4907      	ldr	r1, [pc, #28]	; (8001478 <L6474_GetDeceleration+0x2c>)
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	331a      	adds	r3, #26
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
}          
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	200003c4 	.word	0x200003c4

0800147c <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	4907      	ldr	r1, [pc, #28]	; (80014a8 <L6474_GetDeviceState+0x2c>)
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	3324      	adds	r3, #36	; 0x24
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b2db      	uxtb	r3, r3
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	200003c4 	.word	0x200003c4

080014ac <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 80014b6:	79fa      	ldrb	r2, [r7, #7]
 80014b8:	4907      	ldr	r1, [pc, #28]	; (80014d8 <L6474_GetDirection+0x2c>)
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	440b      	add	r3, r1
 80014c4:	3323      	adds	r3, #35	; 0x23
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	200003c4 	.word	0x200003c4

080014dc <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 80014e0:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <L6474_GetMotorHandle+0x10>)
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	20000004 	.word	0x20000004

08001504 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2103      	movs	r1, #3
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fcb4 	bl	8000e80 <L6474_CmdGetParam>
 8001518:	4603      	mov	r3, r0
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fefa 	bl	8002314 <L6474_ConvertPosition>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 8001536:	79fa      	ldrb	r2, [r7, #7]
 8001538:	4907      	ldr	r1, [pc, #28]	; (8001558 <L6474_GetMaxSpeed+0x2c>)
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	331c      	adds	r3, #28
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b29b      	uxth	r3, r3
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	200003c4 	.word	0x200003c4

0800155c <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 8001566:	79fa      	ldrb	r2, [r7, #7]
 8001568:	4907      	ldr	r1, [pc, #28]	; (8001588 <L6474_GetMinSpeed+0x2c>)
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	331e      	adds	r3, #30
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b29b      	uxth	r3, r3
}                                                     
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200003c4 	.word	0x200003c4

0800158c <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <L6474_GetNbDevices+0x14>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	200003a4 	.word	0x200003a4

080015a4 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fc64 	bl	8000e80 <L6474_CmdGetParam>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 feaa 	bl	8002314 <L6474_ConvertPosition>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	2116      	movs	r1, #22
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fc50 	bl	8000e80 <L6474_CmdGetParam>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 80015f0:	7bbb      	ldrb	r3, [r7, #14]
 80015f2:	3b08      	subs	r3, #8
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d81c      	bhi.n	8001632 <L6474_GetStepMode+0x66>
 80015f8:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <L6474_GetStepMode+0x34>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	08001615 	.word	0x08001615
 8001604:	0800161b 	.word	0x0800161b
 8001608:	08001621 	.word	0x08001621
 800160c:	08001627 	.word	0x08001627
 8001610:	0800162d 	.word	0x0800162d
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
      break;
 8001618:	e00e      	b.n	8001638 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 800161a:	2301      	movs	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
      break;    
 800161e:	e00b      	b.n	8001638 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 8001620:	2302      	movs	r3, #2
 8001622:	73fb      	strb	r3, [r7, #15]
      break;        
 8001624:	e008      	b.n	8001638 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 8001626:	2303      	movs	r3, #3
 8001628:	73fb      	strb	r3, [r7, #15]
      break;       
 800162a:	e005      	b.n	8001638 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 800162c:	2304      	movs	r3, #4
 800162e:	73fb      	strb	r3, [r7, #15]
      break;
 8001630:	e002      	b.n	8001638 <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 8001632:	23fe      	movs	r3, #254	; 0xfe
 8001634:	73fb      	strb	r3, [r7, #15]
      break;       
 8001636:	bf00      	nop
  }
  
  return stepMode;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop

08001644 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	4907      	ldr	r1, [pc, #28]	; (8001670 <L6474_GetStopMode+0x2c>)
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	3325      	adds	r3, #37	; 0x25
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	200003c4 	.word	0x200003c4

08001674 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f81e 	bl	80016c4 <L6474_GoTo>
} 
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2103      	movs	r1, #3
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fbee 	bl	8000e80 <L6474_CmdGetParam>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fe34 	bl	8002314 <L6474_ConvertPosition>
 80016ac:	4603      	mov	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f804 	bl	80016c4 <L6474_GoTo>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80016d0:	79fa      	ldrb	r2, [r7, #7]
 80016d2:	493a      	ldr	r1, [pc, #232]	; (80017bc <L6474_GoTo+0xf8>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3324      	adds	r3, #36	; 0x24
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d003      	beq.n	80016f0 <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f868 	bl	80017c0 <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fbc3 	bl	8000e80 <L6474_CmdGetParam>
 80016fa:	4603      	mov	r3, r0
 80016fc:	79fc      	ldrb	r4, [r7, #7]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fe08 	bl	8002314 <L6474_ConvertPosition>
 8001704:	4602      	mov	r2, r0
 8001706:	492d      	ldr	r1, [pc, #180]	; (80017bc <L6474_GoTo+0xf8>)
 8001708:	4623      	mov	r3, r4
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4423      	add	r3, r4
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	3304      	adds	r3, #4
 8001714:	601a      	str	r2, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 8001716:	79fa      	ldrb	r2, [r7, #7]
 8001718:	4928      	ldr	r1, [pc, #160]	; (80017bc <L6474_GoTo+0xf8>)
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	3304      	adds	r3, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	60bb      	str	r3, [r7, #8]
  
  if (steps >= 0) 
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0c      	blt.n	800174e <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 8001734:	79fa      	ldrb	r2, [r7, #7]
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	4820      	ldr	r0, [pc, #128]	; (80017bc <L6474_GoTo+0xf8>)
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4403      	add	r3, r0
 8001744:	3314      	adds	r3, #20
 8001746:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e00d      	b.n	800176a <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	425b      	negs	r3, r3
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	4919      	ldr	r1, [pc, #100]	; (80017bc <L6474_GoTo+0xf8>)
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3314      	adds	r3, #20
 8001764:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d021      	beq.n	80017b4 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	4912      	ldr	r1, [pc, #72]	; (80017bc <L6474_GoTo+0xf8>)
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	3322      	adds	r3, #34	; 0x22
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fb48 	bl	8001e20 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 8001790:	79fa      	ldrb	r2, [r7, #7]
 8001792:	490a      	ldr	r1, [pc, #40]	; (80017bc <L6474_GoTo+0xf8>)
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	440b      	add	r3, r1
 800179e:	3314      	adds	r3, #20
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 fcf6 	bl	8002198 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 f906 	bl	80029c0 <L6474_StartMovement>
  }  
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}
 80017bc:	200003c4 	.word	0x200003c4

080017c0 <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 80017ca:	79fa      	ldrb	r2, [r7, #7]
 80017cc:	4920      	ldr	r1, [pc, #128]	; (8001850 <L6474_HardStop+0x90>)
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	440b      	add	r3, r1
 80017d8:	3325      	adds	r3, #37	; 0x25
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d12d      	bne.n	800183e <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 fe6b 	bl	80044c0 <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	4918      	ldr	r1, [pc, #96]	; (8001850 <L6474_HardStop+0x90>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	3324      	adds	r3, #36	; 0x24
 80017fa:	2208      	movs	r2, #8
 80017fc:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 80017fe:	79fa      	ldrb	r2, [r7, #7]
 8001800:	4913      	ldr	r1, [pc, #76]	; (8001850 <L6474_HardStop+0x90>)
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	3322      	adds	r3, #34	; 0x22
 800180e:	2203      	movs	r2, #3
 8001810:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001812:	79fa      	ldrb	r2, [r7, #7]
 8001814:	490e      	ldr	r1, [pc, #56]	; (8001850 <L6474_HardStop+0x90>)
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	3314      	adds	r3, #20
 8001822:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001826:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8001828:	79fa      	ldrb	r2, [r7, #7]
 800182a:	4909      	ldr	r1, [pc, #36]	; (8001850 <L6474_HardStop+0x90>)
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	3320      	adds	r3, #32
 8001838:	2200      	movs	r2, #0
 800183a:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 800183c:	e003      	b.n	8001846 <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f807 	bl	8001854 <L6474_HizStop>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200003c4 	.word	0x200003c4

08001854 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f002 fe2d 	bl	80044c0 <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff faed 	bl	8000e48 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	4915      	ldr	r1, [pc, #84]	; (80018c8 <L6474_HizStop+0x74>)
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	3324      	adds	r3, #36	; 0x24
 800187e:	2208      	movs	r2, #8
 8001880:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	4910      	ldr	r1, [pc, #64]	; (80018c8 <L6474_HizStop+0x74>)
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	3322      	adds	r3, #34	; 0x22
 8001892:	2203      	movs	r2, #3
 8001894:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001896:	79fa      	ldrb	r2, [r7, #7]
 8001898:	490b      	ldr	r1, [pc, #44]	; (80018c8 <L6474_HizStop+0x74>)
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	3314      	adds	r3, #20
 80018a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018aa:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	4906      	ldr	r1, [pc, #24]	; (80018c8 <L6474_HizStop+0x74>)
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	3320      	adds	r3, #32
 80018bc:	2200      	movs	r2, #0
 80018be:	801a      	strh	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200003c4 	.word	0x200003c4

080018cc <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	603a      	str	r2, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	460b      	mov	r3, r1
 80018da:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	4926      	ldr	r1, [pc, #152]	; (8001978 <L6474_Move+0xac>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	3324      	adds	r3, #36	; 0x24
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d003      	beq.n	80018fc <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff62 	bl	80017c0 <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d035      	beq.n	800196e <L6474_Move+0xa2>
  {
    devicePrm[deviceId].stepsToTake = stepCount;
 8001902:	79fa      	ldrb	r2, [r7, #7]
 8001904:	491c      	ldr	r1, [pc, #112]	; (8001978 <L6474_Move+0xac>)
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	3314      	adds	r3, #20
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001916:	79fa      	ldrb	r2, [r7, #7]
 8001918:	4917      	ldr	r1, [pc, #92]	; (8001978 <L6474_Move+0xac>)
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	3322      	adds	r3, #34	; 0x22
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2101      	movs	r1, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff faa6 	bl	8000e80 <L6474_CmdGetParam>
 8001934:	4603      	mov	r3, r0
 8001936:	79fc      	ldrb	r4, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fceb 	bl	8002314 <L6474_ConvertPosition>
 800193e:	4602      	mov	r2, r0
 8001940:	490d      	ldr	r1, [pc, #52]	; (8001978 <L6474_Move+0xac>)
 8001942:	4623      	mov	r3, r4
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4423      	add	r3, r4
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	3304      	adds	r3, #4
 800194e:	601a      	str	r2, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001950:	79ba      	ldrb	r2, [r7, #6]
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fa62 	bl	8001e20 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fc19 	bl	8002198 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4618      	mov	r0, r3
 800196a:	f001 f829 	bl	80029c0 <L6474_StartMovement>
  }  
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bd90      	pop	{r4, r7, pc}
 8001976:	bf00      	nop
 8001978:	200003c4 	.word	0x200003c4

0800197c <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <L6474_ReadId+0x14>)
 8001982:	881b      	ldrh	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200003c2 	.word	0x200003c2

08001994 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2119      	movs	r1, #25
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fa6c 	bl	8000e80 <L6474_CmdGetParam>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b29b      	uxth	r3, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fda7 	bl	8004514 <L6474_Board_ReleaseReset>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fdac 	bl	8004538 <L6474_Board_Reset>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	e014      	b.n	8001a1e <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff2c 	bl	8001854 <L6474_HizStop>
    L6474_Reset(loop);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ffe5 	bl	80019ce <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 8001a04:	2001      	movs	r0, #1
 8001a06:	f002 fbbd 	bl	8004184 <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 fd81 	bl	8004514 <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 8001a12:	2001      	movs	r0, #1
 8001a14:	f002 fbb6 	bl	8004184 <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <L6474_ResetAllDevices+0x4c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	79fa      	ldrb	r2, [r7, #7]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3e4      	bcc.n	80019f4 <L6474_ResetAllDevices+0xc>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200003a4 	.word	0x200003a4

08001a38 <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	460a      	mov	r2, r1
 8001a42:	71fb      	strb	r3, [r7, #7]
 8001a44:	4613      	mov	r3, r2
 8001a46:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001a48:	79fa      	ldrb	r2, [r7, #7]
 8001a4a:	4913      	ldr	r1, [pc, #76]	; (8001a98 <L6474_Run+0x60>)
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	3324      	adds	r3, #36	; 0x24
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d003      	beq.n	8001a68 <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff feac 	bl	80017c0 <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001a68:	79ba      	ldrb	r2, [r7, #6]
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f9d6 	bl	8001e20 <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001a74:	79fa      	ldrb	r2, [r7, #7]
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <L6474_Run+0x60>)
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	440b      	add	r3, r1
 8001a82:	3322      	adds	r3, #34	; 0x22
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 ff98 	bl	80029c0 <L6474_StartMovement>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200003c4 	.word	0x200003c4

08001a9c <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d816      	bhi.n	8001ae0 <L6474_SelectStepMode+0x44>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <L6474_SelectStepMode+0x1c>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001acf 	.word	0x08001acf
 8001ac0:	08001ad5 	.word	0x08001ad5
 8001ac4:	08001adb 	.word	0x08001adb
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001ac8:	2308      	movs	r3, #8
 8001aca:	73fb      	strb	r3, [r7, #15]
      break;
 8001acc:	e00b      	b.n	8001ae6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001ace:	2309      	movs	r3, #9
 8001ad0:	73fb      	strb	r3, [r7, #15]
      break;    
 8001ad2:	e008      	b.n	8001ae6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001ad4:	230a      	movs	r3, #10
 8001ad6:	73fb      	strb	r3, [r7, #15]
      break;        
 8001ad8:	e005      	b.n	8001ae6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001ada:	230b      	movs	r3, #11
 8001adc:	73fb      	strb	r3, [r7, #15]
      break;       
 8001ade:	e002      	b.n	8001ae6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	73fb      	strb	r3, [r7, #15]
      break;       
 8001ae4:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff feb3 	bl	8001854 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2116      	movs	r1, #22
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f9c4 	bl	8000e80 <L6474_CmdGetParam>
 8001af8:	4603      	mov	r3, r0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f023 0307 	bic.w	r3, r3, #7
 8001b00:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001b02:	7bba      	ldrb	r2, [r7, #14]
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2116      	movs	r1, #22
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fb3b 	bl	800118c <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fb35 	bl	800118c <L6474_CmdSetParam>
  
  return (1);
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	460a      	mov	r2, r1
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001b40:	88bb      	ldrh	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d023      	beq.n	8001b8e <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001b46:	79fa      	ldrb	r2, [r7, #7]
 8001b48:	4914      	ldr	r1, [pc, #80]	; (8001b9c <L6474_SetAcceleration+0x70>)
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	3324      	adds	r3, #36	; 0x24
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d00b      	beq.n	8001b76 <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	490e      	ldr	r1, [pc, #56]	; (8001b9c <L6474_SetAcceleration+0x70>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3322      	adds	r3, #34	; 0x22
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10b      	bne.n	8001b8e <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8001b76:	79fa      	ldrb	r2, [r7, #7]
 8001b78:	4908      	ldr	r1, [pc, #32]	; (8001b9c <L6474_SetAcceleration+0x70>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	3318      	adds	r3, #24
 8001b86:	88ba      	ldrh	r2, [r7, #4]
 8001b88:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	200003c4 	.word	0x200003c4

08001ba0 <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bae:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001bb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d508      	bpl.n	8001bd4 <L6474_SetAnalogValue+0x34>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d005      	beq.n	8001bd4 <L6474_SetAnalogValue+0x34>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d002      	beq.n	8001bd4 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	74fb      	strb	r3, [r7, #19]
 8001bd2:	e0d9      	b.n	8001d88 <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	2b12      	cmp	r3, #18
 8001bda:	f200 80ca 	bhi.w	8001d72 <L6474_SetAnalogValue+0x1d2>
 8001bde:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <L6474_SetAnalogValue+0x44>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001c97 	.word	0x08001c97
 8001be8:	08001c31 	.word	0x08001c31
 8001bec:	08001c97 	.word	0x08001c97
 8001bf0:	08001d73 	.word	0x08001d73
 8001bf4:	08001d73 	.word	0x08001d73
 8001bf8:	08001d73 	.word	0x08001d73
 8001bfc:	08001d73 	.word	0x08001d73
 8001c00:	08001d73 	.word	0x08001d73
 8001c04:	08001d01 	.word	0x08001d01
 8001c08:	08001d73 	.word	0x08001d73
 8001c0c:	08001d73 	.word	0x08001d73
 8001c10:	08001d73 	.word	0x08001d73
 8001c14:	08001d73 	.word	0x08001d73
 8001c18:	08001d73 	.word	0x08001d73
 8001c1c:	08001d4d 	.word	0x08001d4d
 8001c20:	08001d4d 	.word	0x08001d4d
 8001c24:	08001d73 	.word	0x08001d73
 8001c28:	08001d73 	.word	0x08001d73
 8001c2c:	08001d27 	.word	0x08001d27
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001c30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	d021      	beq.n	8001c82 <L6474_SetAnalogValue+0xe2>
 8001c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c42:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001d94 <L6474_SetAnalogValue+0x1f4>
 8001c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	dc15      	bgt.n	8001c7c <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001c50:	2116      	movs	r1, #22
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff f914 	bl	8000e80 <L6474_CmdGetParam>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	2201      	movs	r2, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001c6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7a:	d502      	bpl.n	8001c82 <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001c80:	e079      	b.n	8001d76 <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001c82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8a:	ee17 3a90 	vmov	r3, s15
 8001c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c92:	617b      	str	r3, [r7, #20]
        break;
 8001c94:	e06f      	b.n	8001d76 <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001c96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c9a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001d98 <L6474_SetAnalogValue+0x1f8>
 8001c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	db27      	blt.n	8001cf8 <L6474_SetAnalogValue+0x158>
 8001ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001d9c <L6474_SetAnalogValue+0x1fc>
 8001cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	d81e      	bhi.n	8001cf8 <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	db09      	blt.n	8001cdc <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001cc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd0:	ee17 3a90 	vmov	r3, s15
 8001cd4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001cd8:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001cda:	e010      	b.n	8001cfe <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001cdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ce0:	eef1 7a67 	vneg.f32	s15, s15
 8001ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce8:	ee17 3a90 	vmov	r3, s15
 8001cec:	43db      	mvns	r3, r3
 8001cee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001cf6:	e002      	b.n	8001cfe <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001cfc:	e03b      	b.n	8001d76 <L6474_SetAnalogValue+0x1d6>
 8001cfe:	e03a      	b.n	8001d76 <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d04:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001da0 <L6474_SetAnalogValue+0x200>
 8001d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d10:	dd02      	ble.n	8001d18 <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001d16:	e02e      	b.n	8001d76 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001d18:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d1c:	f001 f9a6 	bl	800306c <L6474_Tval_Current_to_Par>
 8001d20:	4603      	mov	r3, r0
 8001d22:	617b      	str	r3, [r7, #20]
        break;
 8001d24:	e027      	b.n	8001d76 <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001d26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001da4 <L6474_SetAnalogValue+0x204>
 8001d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	dd02      	ble.n	8001d3e <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001d3c:	e01b      	b.n	8001d76 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001d3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d42:	f001 f96f 	bl	8003024 <L6474_Ocd_Th_to_Par>
 8001d46:	4603      	mov	r3, r0
 8001d48:	617b      	str	r3, [r7, #20]
        break;
 8001d4a:	e014      	b.n	8001d76 <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001d4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d50:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001da8 <L6474_SetAnalogValue+0x208>
 8001d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5c:	dd02      	ble.n	8001d64 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001d62:	e008      	b.n	8001d76 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001d64:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d68:	f001 f9a4 	bl	80030b4 <L6474_Tmin_Time_to_Par>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	617b      	str	r3, [r7, #20]
        break;    
 8001d70:	e001      	b.n	8001d76 <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fa02 	bl	800118c <L6474_CmdSetParam>
    }
  }
  return result;
 8001d88:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	43ff8000 	.word	0x43ff8000
 8001d98:	ca000000 	.word	0xca000000
 8001d9c:	49fffff8 	.word	0x49fffff8
 8001da0:	457a0000 	.word	0x457a0000
 8001da4:	45bb8000 	.word	0x45bb8000
 8001da8:	42800000 	.word	0x42800000

08001dac <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 8001dc0:	88bb      	ldrh	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d023      	beq.n	8001e0e <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001dc6:	79fa      	ldrb	r2, [r7, #7]
 8001dc8:	4914      	ldr	r1, [pc, #80]	; (8001e1c <L6474_SetDeceleration+0x70>)
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3324      	adds	r3, #36	; 0x24
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d00b      	beq.n	8001df6 <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001dde:	79fa      	ldrb	r2, [r7, #7]
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <L6474_SetDeceleration+0x70>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	3322      	adds	r3, #34	; 0x22
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10b      	bne.n	8001e0e <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	4908      	ldr	r1, [pc, #32]	; (8001e1c <L6474_SetDeceleration+0x70>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	331a      	adds	r3, #26
 8001e06:	88ba      	ldrh	r2, [r7, #4]
 8001e08:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
}        
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	200003c4 	.word	0x200003c4

08001e20 <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	460a      	mov	r2, r1
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8001e30:	79fa      	ldrb	r2, [r7, #7]
 8001e32:	490f      	ldr	r1, [pc, #60]	; (8001e70 <L6474_SetDirection+0x50>)
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3324      	adds	r3, #36	; 0x24
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d10f      	bne.n	8001e68 <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8001e48:	79fa      	ldrb	r2, [r7, #7]
 8001e4a:	4909      	ldr	r1, [pc, #36]	; (8001e70 <L6474_SetDirection+0x50>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	3323      	adds	r3, #35	; 0x23
 8001e58:	79ba      	ldrb	r2, [r7, #6]
 8001e5a:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8001e5c:	79ba      	ldrb	r2, [r7, #6]
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 fb7a 	bl	800455c <L6474_Board_SetDirectionGpio>
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	200003c4 	.word	0x200003c4

08001e74 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	2101      	movs	r1, #1
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fffb 	bl	8000e80 <L6474_CmdGetParam>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fa41 	bl	8002314 <L6474_ConvertPosition>
 8001e92:	4602      	mov	r2, r0
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db04      	blt.n	8001eaa <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e005      	b.n	8001eb6 <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	2101      	movs	r1, #1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f965 	bl	800118c <L6474_CmdSetParam>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <L6474_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool L6474_SetNbDevices(uint8_t nbDevices)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d807      	bhi.n	8001eec <L6474_SetNbDevices+0x20>
  {
    l6474DriverInstance = 0;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <L6474_SetNbDevices+0x30>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	801a      	strh	r2, [r3, #0]
    numberOfDevices = nbDevices;
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <L6474_SetNbDevices+0x34>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <L6474_SetNbDevices+0x22>
  }
  else
  {
    return FALSE;
 8001eec:	2300      	movs	r3, #0
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	200003c2 	.word	0x200003c2
 8001f00:	200003a4 	.word	0x200003a4

08001f04 <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db04      	blt.n	8001f20 <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e005      	b.n	8001f2c <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	2103      	movs	r1, #3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f92a 	bl	800118c <L6474_CmdSetParam>
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	460a      	mov	r2, r1
 8001f4a:	71fb      	strb	r3, [r7, #7]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001f54:	88bb      	ldrh	r3, [r7, #4]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d935      	bls.n	8001fc6 <L6474_SetMaxSpeed+0x86>
 8001f5a:	88bb      	ldrh	r3, [r7, #4]
 8001f5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d830      	bhi.n	8001fc6 <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	491b      	ldr	r1, [pc, #108]	; (8001fd4 <L6474_SetMaxSpeed+0x94>)
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	331e      	adds	r3, #30
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8001f78:	88ba      	ldrh	r2, [r7, #4]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d323      	bcc.n	8001fc6 <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f7e:	79fa      	ldrb	r2, [r7, #7]
 8001f80:	4914      	ldr	r1, [pc, #80]	; (8001fd4 <L6474_SetMaxSpeed+0x94>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3324      	adds	r3, #36	; 0x24
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d00b      	beq.n	8001fae <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001f96:	79fa      	ldrb	r2, [r7, #7]
 8001f98:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <L6474_SetMaxSpeed+0x94>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3322      	adds	r3, #34	; 0x22
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10b      	bne.n	8001fc6 <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 8001fae:	79fa      	ldrb	r2, [r7, #7]
 8001fb0:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <L6474_SetMaxSpeed+0x94>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	331c      	adds	r3, #28
 8001fbe:	88ba      	ldrh	r2, [r7, #4]
 8001fc0:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	200003c4 	.word	0x200003c4

08001fd8 <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	71fb      	strb	r3, [r7, #7]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001fec:	88bb      	ldrh	r3, [r7, #4]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d935      	bls.n	800205e <L6474_SetMinSpeed+0x86>
 8001ff2:	88bb      	ldrh	r3, [r7, #4]
 8001ff4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d830      	bhi.n	800205e <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001ffc:	79fa      	ldrb	r2, [r7, #7]
 8001ffe:	491b      	ldr	r1, [pc, #108]	; (800206c <L6474_SetMinSpeed+0x94>)
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	331c      	adds	r3, #28
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8002010:	88ba      	ldrh	r2, [r7, #4]
 8002012:	429a      	cmp	r2, r3
 8002014:	d823      	bhi.n	800205e <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8002016:	79fa      	ldrb	r2, [r7, #7]
 8002018:	4914      	ldr	r1, [pc, #80]	; (800206c <L6474_SetMinSpeed+0x94>)
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	3324      	adds	r3, #36	; 0x24
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 800202a:	2b08      	cmp	r3, #8
 800202c:	d00b      	beq.n	8002046 <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 800202e:	79fa      	ldrb	r2, [r7, #7]
 8002030:	490e      	ldr	r1, [pc, #56]	; (800206c <L6474_SetMinSpeed+0x94>)
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	3322      	adds	r3, #34	; 0x22
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10b      	bne.n	800205e <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 8002046:	79fa      	ldrb	r2, [r7, #7]
 8002048:	4908      	ldr	r1, [pc, #32]	; (800206c <L6474_SetMinSpeed+0x94>)
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	331e      	adds	r3, #30
 8002056:	88ba      	ldrh	r2, [r7, #4]
 8002058:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	200003c4 	.word	0x200003c4

08002070 <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	460a      	mov	r2, r1
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	4613      	mov	r3, r2
 800207e:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 8002080:	79fa      	ldrb	r2, [r7, #7]
 8002082:	4907      	ldr	r1, [pc, #28]	; (80020a0 <L6474_SetStopMode+0x30>)
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	3325      	adds	r3, #37	; 0x25
 8002090:	79ba      	ldrb	r2, [r7, #6]
 8002092:	701a      	strb	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	200003c4 	.word	0x200003c4

080020a4 <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 80020b2:	79fa      	ldrb	r2, [r7, #7]
 80020b4:	490e      	ldr	r1, [pc, #56]	; (80020f0 <L6474_SoftStop+0x4c>)
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	440b      	add	r3, r1
 80020c0:	3324      	adds	r3, #36	; 0x24
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d00b      	beq.n	80020e2 <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 80020ca:	79fa      	ldrb	r2, [r7, #7]
 80020cc:	4908      	ldr	r1, [pc, #32]	; (80020f0 <L6474_SoftStop+0x4c>)
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	3322      	adds	r3, #34	; 0x22
 80020da:	2202      	movs	r2, #2
 80020dc:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	200003c4 	.word	0x200003c4

080020f4 <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 80020fe:	bf00      	nop
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f9ba 	bl	800147c <L6474_GetDeviceState>
 8002108:	4603      	mov	r3, r0
 800210a:	2b08      	cmp	r3, #8
 800210c:	d1f8      	bne.n	8002100 <L6474_WaitWhileActive+0xc>
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	460a      	mov	r2, r1
 8002122:	71fb      	strb	r3, [r7, #7]
 8002124:	4613      	mov	r3, r2
 8002126:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 8002128:	88bb      	ldrh	r3, [r7, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d801      	bhi.n	8002132 <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 800212e:	2302      	movs	r3, #2
 8002130:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 8002132:	88bb      	ldrh	r3, [r7, #4]
 8002134:	f242 7210 	movw	r2, #10000	; 0x2710
 8002138:	4293      	cmp	r3, r2
 800213a:	d902      	bls.n	8002142 <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 800213c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002140:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 8002142:	79fa      	ldrb	r2, [r7, #7]
 8002144:	4913      	ldr	r1, [pc, #76]	; (8002194 <L6474_ApplySpeed+0x7c>)
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	3320      	adds	r3, #32
 8002152:	88ba      	ldrh	r2, [r7, #4]
 8002154:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d010      	beq.n	800217e <L6474_ApplySpeed+0x66>
 800215c:	2b02      	cmp	r3, #2
 800215e:	dc13      	bgt.n	8002188 <L6474_ApplySpeed+0x70>
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <L6474_ApplySpeed+0x52>
 8002164:	2b01      	cmp	r3, #1
 8002166:	d005      	beq.n	8002174 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 8002168:	e00e      	b.n	8002188 <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 800216a:	88bb      	ldrh	r3, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	f002 f8df 	bl	8004330 <L6474_Board_Pwm1SetFreq>
      break;
 8002172:	e00a      	b.n	800218a <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8002174:	88bb      	ldrh	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	f002 f900 	bl	800437c <L6474_Board_Pwm2SetFreq>
      break;
 800217c:	e005      	b.n	800218a <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 800217e:	88bb      	ldrh	r3, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	f002 f921 	bl	80043c8 <L6474_Board_Pwm3SetFreq>
      break;
 8002186:	e000      	b.n	800218a <L6474_ApplySpeed+0x72>
      break; //ignore error
 8002188:	bf00      	nop
  }
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200003c4 	.word	0x200003c4

08002198 <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
  uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 80021a4:	79fa      	ldrb	r2, [r7, #7]
 80021a6:	495a      	ldr	r1, [pc, #360]	; (8002310 <L6474_ComputeSpeedProfile+0x178>)
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	331e      	adds	r3, #30
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 80021b8:	79fa      	ldrb	r2, [r7, #7]
 80021ba:	4955      	ldr	r1, [pc, #340]	; (8002310 <L6474_ComputeSpeedProfile+0x178>)
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	331c      	adds	r3, #28
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	8b7b      	ldrh	r3, [r7, #26]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 80021d4:	79fa      	ldrb	r2, [r7, #7]
 80021d6:	494e      	ldr	r1, [pc, #312]	; (8002310 <L6474_ComputeSpeedProfile+0x178>)
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	440b      	add	r3, r1
 80021e2:	331c      	adds	r3, #28
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	8b7b      	ldrh	r3, [r7, #26]
 80021ec:	4413      	add	r3, r2
 80021ee:	461a      	mov	r2, r3
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 80021fc:	79fa      	ldrb	r2, [r7, #7]
 80021fe:	4944      	ldr	r1, [pc, #272]	; (8002310 <L6474_ComputeSpeedProfile+0x178>)
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	3318      	adds	r3, #24
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fbb3 f3f2 	udiv	r3, r3, r2
 8002218:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 8002220:	79fa      	ldrb	r2, [r7, #7]
 8002222:	493b      	ldr	r1, [pc, #236]	; (8002310 <L6474_ComputeSpeedProfile+0x178>)
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	331a      	adds	r3, #26
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fbb3 f3f2 	udiv	r3, r3, r2
 800223c:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4413      	add	r3, r2
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d242      	bcs.n	80022d6 <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 8002250:	79fa      	ldrb	r2, [r7, #7]
 8002252:	492f      	ldr	r1, [pc, #188]	; (8002310 <L6474_ComputeSpeedProfile+0x178>)
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	331a      	adds	r3, #26
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 8002266:	79fa      	ldrb	r2, [r7, #7]
 8002268:	4929      	ldr	r1, [pc, #164]	; (8002310 <L6474_ComputeSpeedProfile+0x178>)
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	3318      	adds	r3, #24
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	fb03 f202 	mul.w	r2, r3, r2
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	440b      	add	r3, r1
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d908      	bls.n	80022a8 <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3b01      	subs	r3, #1
 800229a:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d104      	bne.n	80022ac <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e001      	b.n	80022ac <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 80022ac:	79fa      	ldrb	r2, [r7, #7]
 80022ae:	4918      	ldr	r1, [pc, #96]	; (8002310 <L6474_ComputeSpeedProfile+0x178>)
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	3308      	adds	r3, #8
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 80022c0:	79fa      	ldrb	r2, [r7, #7]
 80022c2:	4913      	ldr	r1, [pc, #76]	; (8002310 <L6474_ComputeSpeedProfile+0x178>)
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	3310      	adds	r3, #16
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 80022d4:	e016      	b.n	8002304 <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 80022d6:	79fa      	ldrb	r2, [r7, #7]
 80022d8:	490d      	ldr	r1, [pc, #52]	; (8002310 <L6474_ComputeSpeedProfile+0x178>)
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	3308      	adds	r3, #8
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	79fa      	ldrb	r2, [r7, #7]
 80022f2:	1e59      	subs	r1, r3, #1
 80022f4:	4806      	ldr	r0, [pc, #24]	; (8002310 <L6474_ComputeSpeedProfile+0x178>)
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4403      	add	r3, r0
 8002300:	3310      	adds	r3, #16
 8002302:	6019      	str	r1, [r3, #0]
}
 8002304:	bf00      	nop
 8002306:	3724      	adds	r7, #36	; 0x24
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	200003c4 	.word	0x200003c4

08002314 <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00d      	beq.n	8002342 <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	43db      	mvns	r3, r3
 800232a:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3301      	adds	r3, #1
 8002330:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002338:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	425b      	negs	r3, r3
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e001      	b.n	8002346 <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 800235e:	4b07      	ldr	r3, [pc, #28]	; (800237c <L6474_ErrorHandler+0x28>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <L6474_ErrorHandler+0x28>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	4610      	mov	r0, r2
 800236e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8002370:	e000      	b.n	8002374 <L6474_ErrorHandler+0x20>
    while(1)
 8002372:	e7fe      	b.n	8002372 <L6474_ErrorHandler+0x1e>
}
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200003a0 	.word	0x200003a0

08002380 <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <L6474_FlagInterruptHandler+0x24>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <L6474_FlagInterruptHandler+0x28>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <L6474_FlagInterruptHandler+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <L6474_FlagInterruptHandler+0x28>)
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
  }
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000039c 	.word	0x2000039c
 80023a8:	200003c1 	.word	0x200003c1

080023ac <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	460a      	mov	r2, r1
 80023b6:	71fb      	strb	r3, [r7, #7]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <L6474_SendCommand+0x90>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 80023cc:	2300      	movs	r3, #0
 80023ce:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <L6474_SendCommand+0x94>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80023d6:	7afb      	ldrb	r3, [r7, #11]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80023dc:	f001 fee6 	bl	80041ac <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e008      	b.n	80023fc <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 80023ea:	4a16      	ldr	r2, [pc, #88]	; (8002444 <L6474_SendCommand+0x98>)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	3309      	adds	r3, #9
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <L6474_SendCommand+0x90>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4293      	cmp	r3, r2
 8002408:	d3ef      	bcc.n	80023ea <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 800240a:	7abb      	ldrb	r3, [r7, #10]
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <L6474_SendCommand+0x98>)
 800240e:	4413      	add	r3, r2
 8002410:	79ba      	ldrb	r2, [r7, #6]
 8002412:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8002414:	f001 fec1 	bl	800419a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8002418:	2301      	movs	r3, #1
 800241a:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <L6474_SendCommand+0x94>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1d4      	bne.n	80023d0 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 8002426:	4908      	ldr	r1, [pc, #32]	; (8002448 <L6474_SendCommand+0x9c>)
 8002428:	4808      	ldr	r0, [pc, #32]	; (800244c <L6474_SendCommand+0xa0>)
 800242a:	f000 fe61 	bl	80030f0 <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800242e:	f001 febd 	bl	80041ac <L6474_Board_EnableIrq>
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200003a4 	.word	0x200003a4
 8002440:	200003c0 	.word	0x200003c0
 8002444:	200003a8 	.word	0x200003a8
 8002448:	200003bd 	.word	0x200003bd
 800244c:	200003b1 	.word	0x200003b1

08002450 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	8818      	ldrh	r0, [r3, #0]
 8002462:	494c      	ldr	r1, [pc, #304]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	440b      	add	r3, r1
 800246e:	3318      	adds	r3, #24
 8002470:	4602      	mov	r2, r0
 8002472:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 8002474:	79fa      	ldrb	r2, [r7, #7]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	8858      	ldrh	r0, [r3, #2]
 800247a:	4946      	ldr	r1, [pc, #280]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	331a      	adds	r3, #26
 8002488:	4602      	mov	r2, r0
 800248a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 800248c:	79fa      	ldrb	r2, [r7, #7]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	8898      	ldrh	r0, [r3, #4]
 8002492:	4940      	ldr	r1, [pc, #256]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	440b      	add	r3, r1
 800249e:	331c      	adds	r3, #28
 80024a0:	4602      	mov	r2, r0
 80024a2:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	88d8      	ldrh	r0, [r3, #6]
 80024aa:	493a      	ldr	r1, [pc, #232]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	331e      	adds	r3, #30
 80024b8:	4602      	mov	r2, r0
 80024ba:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80024bc:	79fa      	ldrb	r2, [r7, #7]
 80024be:	4935      	ldr	r1, [pc, #212]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80024ce:	79fa      	ldrb	r2, [r7, #7]
 80024d0:	4930      	ldr	r1, [pc, #192]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	3304      	adds	r3, #4
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80024e2:	79fa      	ldrb	r2, [r7, #7]
 80024e4:	492b      	ldr	r1, [pc, #172]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	3308      	adds	r3, #8
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80024f6:	79fa      	ldrb	r2, [r7, #7]
 80024f8:	4926      	ldr	r1, [pc, #152]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	330c      	adds	r3, #12
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 800250a:	79fa      	ldrb	r2, [r7, #7]
 800250c:	4921      	ldr	r1, [pc, #132]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	440b      	add	r3, r1
 8002518:	3310      	adds	r3, #16
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	491c      	ldr	r1, [pc, #112]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	440b      	add	r3, r1
 800252c:	3314      	adds	r3, #20
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002532:	79fa      	ldrb	r2, [r7, #7]
 8002534:	4917      	ldr	r1, [pc, #92]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	3320      	adds	r3, #32
 8002542:	2200      	movs	r2, #0
 8002544:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002546:	79fa      	ldrb	r2, [r7, #7]
 8002548:	4912      	ldr	r1, [pc, #72]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	3322      	adds	r3, #34	; 0x22
 8002556:	2203      	movs	r2, #3
 8002558:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 800255a:	79fa      	ldrb	r2, [r7, #7]
 800255c:	490d      	ldr	r1, [pc, #52]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	3323      	adds	r3, #35	; 0x23
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 800256e:	79fa      	ldrb	r2, [r7, #7]
 8002570:	4908      	ldr	r1, [pc, #32]	; (8002594 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	440b      	add	r3, r1
 800257c:	3324      	adds	r3, #36	; 0x24
 800257e:	2208      	movs	r2, #8
 8002580:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	6839      	ldr	r1, [r7, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f8a2 	bl	80026d0 <L6474_SetRegisterToGivenValues>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200003c4 	.word	0x200003c4

08002598 <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 80025a2:	79fa      	ldrb	r2, [r7, #7]
 80025a4:	4949      	ldr	r1, [pc, #292]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	3318      	adds	r3, #24
 80025b2:	22a0      	movs	r2, #160	; 0xa0
 80025b4:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 80025b6:	79fa      	ldrb	r2, [r7, #7]
 80025b8:	4944      	ldr	r1, [pc, #272]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	331a      	adds	r3, #26
 80025c6:	22a0      	movs	r2, #160	; 0xa0
 80025c8:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 80025ca:	79fa      	ldrb	r2, [r7, #7]
 80025cc:	493f      	ldr	r1, [pc, #252]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	331c      	adds	r3, #28
 80025da:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80025de:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 80025e0:	79fa      	ldrb	r2, [r7, #7]
 80025e2:	493a      	ldr	r1, [pc, #232]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	331e      	adds	r3, #30
 80025f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80025f4:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80025f6:	79fa      	ldrb	r2, [r7, #7]
 80025f8:	4934      	ldr	r1, [pc, #208]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 8002608:	79fa      	ldrb	r2, [r7, #7]
 800260a:	4930      	ldr	r1, [pc, #192]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	3304      	adds	r3, #4
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 800261c:	79fa      	ldrb	r2, [r7, #7]
 800261e:	492b      	ldr	r1, [pc, #172]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	440b      	add	r3, r1
 800262a:	3308      	adds	r3, #8
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002630:	79fa      	ldrb	r2, [r7, #7]
 8002632:	4926      	ldr	r1, [pc, #152]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	330c      	adds	r3, #12
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002644:	79fa      	ldrb	r2, [r7, #7]
 8002646:	4921      	ldr	r1, [pc, #132]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	3310      	adds	r3, #16
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002658:	79fa      	ldrb	r2, [r7, #7]
 800265a:	491c      	ldr	r1, [pc, #112]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	3314      	adds	r3, #20
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 800266c:	79fa      	ldrb	r2, [r7, #7]
 800266e:	4917      	ldr	r1, [pc, #92]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	440b      	add	r3, r1
 800267a:	3320      	adds	r3, #32
 800267c:	2200      	movs	r2, #0
 800267e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002680:	79fa      	ldrb	r2, [r7, #7]
 8002682:	4912      	ldr	r1, [pc, #72]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	3322      	adds	r3, #34	; 0x22
 8002690:	2203      	movs	r2, #3
 8002692:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002694:	79fa      	ldrb	r2, [r7, #7]
 8002696:	490d      	ldr	r1, [pc, #52]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	3323      	adds	r3, #35	; 0x23
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	4908      	ldr	r1, [pc, #32]	; (80026cc <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	3324      	adds	r3, #36	; 0x24
 80026b8:	2208      	movs	r2, #8
 80026ba:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f882 	bl	80027c8 <L6474_SetRegisterToPredefinedValues>

}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	200003c4 	.word	0x200003c4

080026d0 <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	2200      	movs	r2, #0
 80026e0:	2101      	movs	r1, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fd52 	bl	800118c <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	2200      	movs	r2, #0
 80026ec:	2102      	movs	r1, #2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fd4c 	bl	800118c <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2200      	movs	r2, #0
 80026f8:	2103      	movs	r1, #3
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fd46 	bl	800118c <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	edd3 7a02 	vldr	s15, [r3, #8]
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	eeb0 0a67 	vmov.f32	s0, s15
 800270c:	2109      	movs	r1, #9
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fa46 	bl	8001ba0 <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 800271c:	4313      	orrs	r3, r2
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	210e      	movs	r1, #14
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fd30 	bl	800118c <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	eeb0 0a67 	vmov.f32	s0, s15
 8002738:	210f      	movs	r1, #15
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fa30 	bl	8001ba0 <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	edd3 7a07 	vldr	s15, [r3, #28]
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	eeb0 0a67 	vmov.f32	s0, s15
 800274c:	2110      	movs	r1, #16
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fa26 	bl	8001ba0 <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	edd3 7a03 	vldr	s15, [r3, #12]
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	eeb0 0a67 	vmov.f32	s0, s15
 8002760:	2113      	movs	r1, #19
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fa1c 	bl	8001ba0 <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 8002770:	4313      	orrs	r3, r2
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	2116      	movs	r1, #22
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fd06 	bl	800118c <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	2117      	movs	r1, #23
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fcff 	bl	800118c <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	7c5b      	ldrb	r3, [r3, #17]
 8002798:	4313      	orrs	r3, r2
 800279a:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 80027aa:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 80027b0:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 80027b2:	461a      	mov	r2, r3
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2118      	movs	r1, #24
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fce7 	bl	800118c <L6474_CmdSetParam>
  
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	2200      	movs	r2, #0
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fcd7 	bl	800118c <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2102      	movs	r1, #2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fcd1 	bl	800118c <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2103      	movs	r1, #3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fccb 	bl	800118c <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	f000 8094 	beq.w	8002926 <L6474_SetRegisterToPredefinedValues+0x15e>
 80027fe:	2b02      	cmp	r3, #2
 8002800:	f300 80d7 	bgt.w	80029b2 <L6474_SetRegisterToPredefinedValues+0x1ea>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <L6474_SetRegisterToPredefinedValues+0x46>
 8002808:	2b01      	cmp	r3, #1
 800280a:	d046      	beq.n	800289a <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 800280c:	e0d1      	b.n	80029b2 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 800280e:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80029bc <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002812:	f000 fc2b 	bl	800306c <L6474_Tval_Current_to_Par>
 8002816:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002818:	461a      	mov	r2, r3
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	2109      	movs	r1, #9
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fcb4 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	2235      	movs	r2, #53	; 0x35
 8002828:	210e      	movs	r1, #14
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fcae 	bl	800118c <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8002830:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002834:	f000 fc3e 	bl	80030b4 <L6474_Tmin_Time_to_Par>
 8002838:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800283a:	461a      	mov	r2, r3
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	210f      	movs	r1, #15
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fca3 	bl	800118c <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 8002846:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800284a:	f000 fc33 	bl	80030b4 <L6474_Tmin_Time_to_Par>
 800284e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002850:	461a      	mov	r2, r3
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	2110      	movs	r1, #16
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fc98 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	2201      	movs	r2, #1
 8002860:	2113      	movs	r1, #19
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fc92 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	228c      	movs	r2, #140	; 0x8c
 800286c:	2116      	movs	r1, #22
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fc8c 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	22cf      	movs	r2, #207	; 0xcf
 8002878:	2117      	movs	r1, #23
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fc86 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002886:	2118      	movs	r1, #24
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fc7f 	bl	800118c <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fbec 	bl	8002070 <L6474_SetStopMode>
      break;
 8002898:	e08b      	b.n	80029b2 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 800289a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80029bc <L6474_SetRegisterToPredefinedValues+0x1f4>
 800289e:	f000 fbe5 	bl	800306c <L6474_Tval_Current_to_Par>
 80028a2:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80028a4:	461a      	mov	r2, r3
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	2109      	movs	r1, #9
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fc6e 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	2235      	movs	r2, #53	; 0x35
 80028b4:	210e      	movs	r1, #14
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fc68 	bl	800118c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 80028bc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80028c0:	f000 fbf8 	bl	80030b4 <L6474_Tmin_Time_to_Par>
 80028c4:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80028c6:	461a      	mov	r2, r3
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	210f      	movs	r1, #15
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe fc5d 	bl	800118c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 80028d2:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 80028d6:	f000 fbed 	bl	80030b4 <L6474_Tmin_Time_to_Par>
 80028da:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80028dc:	461a      	mov	r2, r3
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	2110      	movs	r1, #16
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fc52 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	2201      	movs	r2, #1
 80028ec:	2113      	movs	r1, #19
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fc4c 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	228c      	movs	r2, #140	; 0x8c
 80028f8:	2116      	movs	r1, #22
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fc46 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	22cf      	movs	r2, #207	; 0xcf
 8002904:	2117      	movs	r1, #23
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fc40 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002912:	2118      	movs	r1, #24
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fc39 	bl	800118c <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fba6 	bl	8002070 <L6474_SetStopMode>
      break;
 8002924:	e045      	b.n	80029b2 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 8002926:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80029bc <L6474_SetRegisterToPredefinedValues+0x1f4>
 800292a:	f000 fb9f 	bl	800306c <L6474_Tval_Current_to_Par>
 800292e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002930:	461a      	mov	r2, r3
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	2109      	movs	r1, #9
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fc28 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	2235      	movs	r2, #53	; 0x35
 8002940:	210e      	movs	r1, #14
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fc22 	bl	800118c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 8002948:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800294c:	f000 fbb2 	bl	80030b4 <L6474_Tmin_Time_to_Par>
 8002950:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002952:	461a      	mov	r2, r3
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	210f      	movs	r1, #15
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe fc17 	bl	800118c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 800295e:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002962:	f000 fba7 	bl	80030b4 <L6474_Tmin_Time_to_Par>
 8002966:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002968:	461a      	mov	r2, r3
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	2110      	movs	r1, #16
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fc0c 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	2201      	movs	r2, #1
 8002978:	2113      	movs	r1, #19
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fc06 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	228c      	movs	r2, #140	; 0x8c
 8002984:	2116      	movs	r1, #22
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fc00 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	22cf      	movs	r2, #207	; 0xcf
 8002990:	2117      	movs	r1, #23
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fbfa 	bl	800118c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800299e:	2118      	movs	r1, #24
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe fbf3 	bl	800118c <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fb60 	bl	8002070 <L6474_SetStopMode>
      break;
 80029b0:	bf00      	nop
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	437a0000 	.word	0x437a0000

080029c0 <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fa49 	bl	8000e64 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 80029d2:	79fa      	ldrb	r2, [r7, #7]
 80029d4:	4922      	ldr	r1, [pc, #136]	; (8002a60 <L6474_StartMovement+0xa0>)
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	3308      	adds	r3, #8
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 80029e8:	79fa      	ldrb	r2, [r7, #7]
 80029ea:	491d      	ldr	r1, [pc, #116]	; (8002a60 <L6474_StartMovement+0xa0>)
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	3324      	adds	r3, #36	; 0x24
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	e009      	b.n	8002a12 <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 80029fe:	79fa      	ldrb	r2, [r7, #7]
 8002a00:	4917      	ldr	r1, [pc, #92]	; (8002a60 <L6474_StartMovement+0xa0>)
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3324      	adds	r3, #36	; 0x24
 8002a0e:	2202      	movs	r2, #2
 8002a10:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 8002a12:	79fa      	ldrb	r2, [r7, #7]
 8002a14:	4912      	ldr	r1, [pc, #72]	; (8002a60 <L6474_StartMovement+0xa0>)
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002a24:	79fa      	ldrb	r2, [r7, #7]
 8002a26:	490e      	ldr	r1, [pc, #56]	; (8002a60 <L6474_StartMovement+0xa0>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	330c      	adds	r3, #12
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 8002a38:	79fa      	ldrb	r2, [r7, #7]
 8002a3a:	4909      	ldr	r1, [pc, #36]	; (8002a60 <L6474_StartMovement+0xa0>)
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	331e      	adds	r3, #30
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fb61 	bl	8002118 <L6474_ApplySpeed>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200003c4 	.word	0x200003c4

08002a64 <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08c      	sub	sp, #48	; 0x30
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 8002a6e:	4b96      	ldr	r3, [pc, #600]	; (8002cc8 <L6474_StepClockHandler+0x264>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 8002a74:	79fa      	ldrb	r2, [r7, #7]
 8002a76:	4995      	ldr	r1, [pc, #596]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	330c      	adds	r3, #12
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1c59      	adds	r1, r3, #1
 8002a88:	4890      	ldr	r0, [pc, #576]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4403      	add	r3, r0
 8002a94:	330c      	adds	r3, #12
 8002a96:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 8002a98:	79fa      	ldrb	r2, [r7, #7]
 8002a9a:	498c      	ldr	r1, [pc, #560]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3324      	adds	r3, #36	; 0x24
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	f000 810f 	beq.w	8002cd0 <L6474_StepClockHandler+0x26c>
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	f300 82a4 	bgt.w	8003000 <L6474_StepClockHandler+0x59c>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <L6474_StepClockHandler+0x60>
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	f000 819b 	beq.w	8002df8 <L6474_StepClockHandler+0x394>
      }
      break;
    }
    default: 
    {
      break;
 8002ac2:	e29d      	b.n	8003000 <L6474_StepClockHandler+0x59c>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 8002ac4:	79fa      	ldrb	r2, [r7, #7]
 8002ac6:	4981      	ldr	r1, [pc, #516]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 8002ad8:	79fa      	ldrb	r2, [r7, #7]
 8002ada:	497c      	ldr	r1, [pc, #496]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 8002aec:	79fa      	ldrb	r2, [r7, #7]
 8002aee:	4977      	ldr	r1, [pc, #476]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	3320      	adds	r3, #32
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 8002b00:	79fa      	ldrb	r2, [r7, #7]
 8002b02:	4972      	ldr	r1, [pc, #456]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3318      	adds	r3, #24
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002b18:	79fa      	ldrb	r2, [r7, #7]
 8002b1a:	496c      	ldr	r1, [pc, #432]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	3322      	adds	r3, #34	; 0x22
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d017      	beq.n	8002b60 <L6474_StepClockHandler+0xfc>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002b30:	79fa      	ldrb	r2, [r7, #7]
 8002b32:	4966      	ldr	r1, [pc, #408]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3322      	adds	r3, #34	; 0x22
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01f      	beq.n	8002b88 <L6474_StepClockHandler+0x124>
             (relPos == devicePrm[deviceId].startDecPos)))
 8002b48:	79fa      	ldrb	r2, [r7, #7]
 8002b4a:	4960      	ldr	r1, [pc, #384]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	3310      	adds	r3, #16
 8002b58:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d113      	bne.n	8002b88 <L6474_StepClockHandler+0x124>
          devicePrm[deviceId].motionState = DECELERATING;
 8002b60:	79fa      	ldrb	r2, [r7, #7]
 8002b62:	495a      	ldr	r1, [pc, #360]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3324      	adds	r3, #36	; 0x24
 8002b70:	2202      	movs	r2, #2
 8002b72:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 8002b74:	79fa      	ldrb	r2, [r7, #7]
 8002b76:	4955      	ldr	r1, [pc, #340]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e09e      	b.n	8002cc6 <L6474_StepClockHandler+0x262>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002b88:	79fa      	ldrb	r2, [r7, #7]
 8002b8a:	4950      	ldr	r1, [pc, #320]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	331c      	adds	r3, #28
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d20f      	bcs.n	8002bc2 <L6474_StepClockHandler+0x15e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002ba2:	79fa      	ldrb	r2, [r7, #7]
 8002ba4:	4949      	ldr	r1, [pc, #292]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	3322      	adds	r3, #34	; 0x22
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00e      	beq.n	8002bd8 <L6474_StepClockHandler+0x174>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d10a      	bne.n	8002bd8 <L6474_StepClockHandler+0x174>
          devicePrm[deviceId].motionState = STEADY;
 8002bc2:	79fa      	ldrb	r2, [r7, #7]
 8002bc4:	4941      	ldr	r1, [pc, #260]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	3324      	adds	r3, #36	; 0x24
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e076      	b.n	8002cc6 <L6474_StepClockHandler+0x262>
          bool speedUpdated = FALSE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 8002bde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <L6474_StepClockHandler+0x184>
 8002be4:	2301      	movs	r3, #1
 8002be6:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002be8:	79fa      	ldrb	r2, [r7, #7]
 8002bea:	4938      	ldr	r1, [pc, #224]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	6819      	ldr	r1, [r3, #0]
 8002bf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	79fa      	ldrb	r2, [r7, #7]
 8002c02:	4419      	add	r1, r3
 8002c04:	4831      	ldr	r0, [pc, #196]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4403      	add	r3, r0
 8002c10:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002c12:	e017      	b.n	8002c44 <L6474_StepClockHandler+0x1e0>
            devicePrm[deviceId].accu -= (0X10000L);
 8002c14:	79fa      	ldrb	r2, [r7, #7]
 8002c16:	492d      	ldr	r1, [pc, #180]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	79fa      	ldrb	r2, [r7, #7]
 8002c26:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002c2a:	4828      	ldr	r0, [pc, #160]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4403      	add	r3, r0
 8002c36:	6019      	str	r1, [r3, #0]
            speed +=1;
 8002c38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002c44:	79fa      	ldrb	r2, [r7, #7]
 8002c46:	4921      	ldr	r1, [pc, #132]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d2dc      	bcs.n	8002c14 <L6474_StepClockHandler+0x1b0>
          if (speedUpdated)
 8002c5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 81d0 	beq.w	8003004 <L6474_StepClockHandler+0x5a0>
            if (speed > devicePrm[deviceId].maxSpeed)
 8002c64:	79fa      	ldrb	r2, [r7, #7]
 8002c66:	4919      	ldr	r1, [pc, #100]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	331c      	adds	r3, #28
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d909      	bls.n	8002c92 <L6474_StepClockHandler+0x22e>
              speed = devicePrm[deviceId].maxSpeed;
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	4912      	ldr	r1, [pc, #72]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	331c      	adds	r3, #28
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8002c92:	79fa      	ldrb	r2, [r7, #7]
 8002c94:	490d      	ldr	r1, [pc, #52]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3320      	adds	r3, #32
 8002ca2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002ca4:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002ca6:	79fa      	ldrb	r2, [r7, #7]
 8002ca8:	4908      	ldr	r1, [pc, #32]	; (8002ccc <L6474_StepClockHandler+0x268>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3320      	adds	r3, #32
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fa2a 	bl	8002118 <L6474_ApplySpeed>
        break;
 8002cc4:	e19e      	b.n	8003004 <L6474_StepClockHandler+0x5a0>
 8002cc6:	e19d      	b.n	8003004 <L6474_StepClockHandler+0x5a0>
 8002cc8:	200003c1 	.word	0x200003c1
 8002ccc:	200003c4 	.word	0x200003c4
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002cd0:	79fa      	ldrb	r2, [r7, #7]
 8002cd2:	499c      	ldr	r1, [pc, #624]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	331c      	adds	r3, #28
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	4997      	ldr	r1, [pc, #604]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002cf8:	79fa      	ldrb	r2, [r7, #7]
 8002cfa:	4992      	ldr	r1, [pc, #584]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	3322      	adds	r3, #34	; 0x22
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d030      	beq.n	8002d72 <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002d10:	79fa      	ldrb	r2, [r7, #7]
 8002d12:	498c      	ldr	r1, [pc, #560]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3322      	adds	r3, #34	; 0x22
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <L6474_StepClockHandler+0x2dc>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002d28:	79fa      	ldrb	r2, [r7, #7]
 8002d2a:	4986      	ldr	r1, [pc, #536]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	3310      	adds	r3, #16
 8002d38:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002d3a:	6a3a      	ldr	r2, [r7, #32]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d218      	bcs.n	8002d72 <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d40:	79fa      	ldrb	r2, [r7, #7]
 8002d42:	4980      	ldr	r1, [pc, #512]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3322      	adds	r3, #34	; 0x22
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d120      	bne.n	8002d9a <L6474_StepClockHandler+0x336>
            (devicePrm[deviceId].speed > maxSpeed)))
 8002d58:	79fa      	ldrb	r2, [r7, #7]
 8002d5a:	497a      	ldr	r1, [pc, #488]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	3320      	adds	r3, #32
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d213      	bcs.n	8002d9a <L6474_StepClockHandler+0x336>
        devicePrm[deviceId].motionState = DECELERATING;
 8002d72:	79fa      	ldrb	r2, [r7, #7]
 8002d74:	4973      	ldr	r1, [pc, #460]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	3324      	adds	r3, #36	; 0x24
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002d86:	79fa      	ldrb	r2, [r7, #7]
 8002d88:	496e      	ldr	r1, [pc, #440]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
      break;
 8002d98:	e136      	b.n	8003008 <L6474_StepClockHandler+0x5a4>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d9a:	79fa      	ldrb	r2, [r7, #7]
 8002d9c:	4969      	ldr	r1, [pc, #420]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	3322      	adds	r3, #34	; 0x22
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 812a 	bne.w	8003008 <L6474_StepClockHandler+0x5a4>
               (devicePrm[deviceId].speed < maxSpeed))
 8002db4:	79fa      	ldrb	r2, [r7, #7]
 8002db6:	4963      	ldr	r1, [pc, #396]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3320      	adds	r3, #32
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002dc8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	f240 811c 	bls.w	8003008 <L6474_StepClockHandler+0x5a4>
        devicePrm[deviceId].motionState = ACCELERATING;
 8002dd0:	79fa      	ldrb	r2, [r7, #7]
 8002dd2:	495c      	ldr	r1, [pc, #368]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	3324      	adds	r3, #36	; 0x24
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002de4:	79fa      	ldrb	r2, [r7, #7]
 8002de6:	4957      	ldr	r1, [pc, #348]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
      break;
 8002df6:	e107      	b.n	8003008 <L6474_StepClockHandler+0x5a4>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002df8:	79fa      	ldrb	r2, [r7, #7]
 8002dfa:	4952      	ldr	r1, [pc, #328]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	330c      	adds	r3, #12
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 8002e0c:	79fa      	ldrb	r2, [r7, #7]
 8002e0e:	494d      	ldr	r1, [pc, #308]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	3320      	adds	r3, #32
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 8002e20:	79fa      	ldrb	r2, [r7, #7]
 8002e22:	4948      	ldr	r1, [pc, #288]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	331a      	adds	r3, #26
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	041b      	lsls	r3, r3, #16
 8002e36:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002e38:	79fa      	ldrb	r2, [r7, #7]
 8002e3a:	4942      	ldr	r1, [pc, #264]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	440b      	add	r3, r1
 8002e46:	3322      	adds	r3, #34	; 0x22
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d10c      	bne.n	8002e6a <L6474_StepClockHandler+0x406>
 8002e50:	79fa      	ldrb	r2, [r7, #7]
 8002e52:	493c      	ldr	r1, [pc, #240]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	331e      	adds	r3, #30
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d917      	bls.n	8002e9a <L6474_StepClockHandler+0x436>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002e6a:	79fa      	ldrb	r2, [r7, #7]
 8002e6c:	4935      	ldr	r1, [pc, #212]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	3322      	adds	r3, #34	; 0x22
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d010      	beq.n	8002ea4 <L6474_StepClockHandler+0x440>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 8002e82:	79fa      	ldrb	r2, [r7, #7]
 8002e84:	492f      	ldr	r1, [pc, #188]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	3314      	adds	r3, #20
 8002e92:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d304      	bcc.n	8002ea4 <L6474_StepClockHandler+0x440>
        L6474_HardStop(deviceId);
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fe fc8f 	bl	80017c0 <L6474_HardStop>
 8002ea2:	e0ac      	b.n	8002ffe <L6474_StepClockHandler+0x59a>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002ea4:	79fa      	ldrb	r2, [r7, #7]
 8002ea6:	4927      	ldr	r1, [pc, #156]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3322      	adds	r3, #34	; 0x22
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d117      	bne.n	8002eec <L6474_StepClockHandler+0x488>
               (speed <= devicePrm[deviceId].maxSpeed))
 8002ebc:	79fa      	ldrb	r2, [r7, #7]
 8002ebe:	4921      	ldr	r1, [pc, #132]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	440b      	add	r3, r1
 8002eca:	331c      	adds	r3, #28
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002ed0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d80a      	bhi.n	8002eec <L6474_StepClockHandler+0x488>
        devicePrm[deviceId].motionState = STEADY;
 8002ed6:	79fa      	ldrb	r2, [r7, #7]
 8002ed8:	491a      	ldr	r1, [pc, #104]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3324      	adds	r3, #36	; 0x24
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e088      	b.n	8002ffe <L6474_StepClockHandler+0x59a>
        if (speed > devicePrm[deviceId].minSpeed)
 8002eec:	79fa      	ldrb	r2, [r7, #7]
 8002eee:	4915      	ldr	r1, [pc, #84]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	440b      	add	r3, r1
 8002efa:	331e      	adds	r3, #30
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002f02:	429a      	cmp	r2, r3
 8002f04:	f240 8082 	bls.w	800300c <L6474_StepClockHandler+0x5a8>
          bool speedUpdated = FALSE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 8002f0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <L6474_StepClockHandler+0x4b4>
 8002f14:	2301      	movs	r3, #1
 8002f16:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 8002f18:	79fa      	ldrb	r2, [r7, #7]
 8002f1a:	490a      	ldr	r1, [pc, #40]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	440b      	add	r3, r1
 8002f26:	6819      	ldr	r1, [r3, #0]
 8002f28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	79fa      	ldrb	r2, [r7, #7]
 8002f32:	4419      	add	r1, r3
 8002f34:	4803      	ldr	r0, [pc, #12]	; (8002f44 <L6474_StepClockHandler+0x4e0>)
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4403      	add	r3, r0
 8002f40:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002f42:	e01c      	b.n	8002f7e <L6474_StepClockHandler+0x51a>
 8002f44:	200003c4 	.word	0x200003c4
            devicePrm[deviceId].accu -= (0X10000L);
 8002f48:	79fa      	ldrb	r2, [r7, #7]
 8002f4a:	4934      	ldr	r1, [pc, #208]	; (800301c <L6474_StepClockHandler+0x5b8>)
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	440b      	add	r3, r1
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	79fa      	ldrb	r2, [r7, #7]
 8002f5a:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002f5e:	482f      	ldr	r0, [pc, #188]	; (800301c <L6474_StepClockHandler+0x5b8>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4403      	add	r3, r0
 8002f6a:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 8002f6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d902      	bls.n	8002f78 <L6474_StepClockHandler+0x514>
              speed -=1;
 8002f72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f74:	3b01      	subs	r3, #1
 8002f76:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002f7e:	79fa      	ldrb	r2, [r7, #7]
 8002f80:	4926      	ldr	r1, [pc, #152]	; (800301c <L6474_StepClockHandler+0x5b8>)
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d2d9      	bcs.n	8002f48 <L6474_StepClockHandler+0x4e4>
          if (speedUpdated)
 8002f94:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d037      	beq.n	800300c <L6474_StepClockHandler+0x5a8>
            if (speed < devicePrm[deviceId].minSpeed)
 8002f9c:	79fa      	ldrb	r2, [r7, #7]
 8002f9e:	491f      	ldr	r1, [pc, #124]	; (800301c <L6474_StepClockHandler+0x5b8>)
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	331e      	adds	r3, #30
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d209      	bcs.n	8002fca <L6474_StepClockHandler+0x566>
              speed = devicePrm[deviceId].minSpeed;
 8002fb6:	79fa      	ldrb	r2, [r7, #7]
 8002fb8:	4918      	ldr	r1, [pc, #96]	; (800301c <L6474_StepClockHandler+0x5b8>)
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	331e      	adds	r3, #30
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 8002fca:	79fa      	ldrb	r2, [r7, #7]
 8002fcc:	4913      	ldr	r1, [pc, #76]	; (800301c <L6474_StepClockHandler+0x5b8>)
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3320      	adds	r3, #32
 8002fda:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002fdc:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002fde:	79fa      	ldrb	r2, [r7, #7]
 8002fe0:	490e      	ldr	r1, [pc, #56]	; (800301c <L6474_StepClockHandler+0x5b8>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	440b      	add	r3, r1
 8002fec:	3320      	adds	r3, #32
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff f88e 	bl	8002118 <L6474_ApplySpeed>
      break;
 8002ffc:	e006      	b.n	800300c <L6474_StepClockHandler+0x5a8>
 8002ffe:	e005      	b.n	800300c <L6474_StepClockHandler+0x5a8>
      break;
 8003000:	bf00      	nop
 8003002:	e004      	b.n	800300e <L6474_StepClockHandler+0x5aa>
        break;
 8003004:	bf00      	nop
 8003006:	e002      	b.n	800300e <L6474_StepClockHandler+0x5aa>
      break;
 8003008:	bf00      	nop
 800300a:	e000      	b.n	800300e <L6474_StepClockHandler+0x5aa>
      break;
 800300c:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <L6474_StepClockHandler+0x5bc>)
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
}
 8003014:	bf00      	nop
 8003016:	3730      	adds	r7, #48	; 0x30
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200003c4 	.word	0x200003c4
 8003020:	200003c1 	.word	0x200003c1

08003024 <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 800302e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003032:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003064 <L6474_Ocd_Th_to_Par+0x40>
 8003036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800303a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003068 <L6474_Ocd_Th_to_Par+0x44>
 800303e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003042:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003046:	ee77 7a87 	vadd.f32	s15, s15, s14
 800304a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800304e:	edc7 7a00 	vstr	s15, [r7]
 8003052:	783b      	ldrb	r3, [r7, #0]
 8003054:	b2db      	uxtb	r3, r3
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	43bb8000 	.word	0x43bb8000
 8003068:	3b2eb80f 	.word	0x3b2eb80f

0800306c <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 8003076:	edd7 7a01 	vldr	s15, [r7, #4]
 800307a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80030ac <L6474_Tval_Current_to_Par+0x40>
 800307e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003082:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80030b0 <L6474_Tval_Current_to_Par+0x44>
 8003086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800308a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800308e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003096:	edc7 7a00 	vstr	s15, [r7]
 800309a:	783b      	ldrb	r3, [r7, #0]
 800309c:	b2db      	uxtb	r3, r3
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	41fa0000 	.word	0x41fa0000
 80030b0:	3d03126f 	.word	0x3d03126f

080030b4 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 80030be:	edd7 7a01 	vldr	s15, [r7, #4]
 80030c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030da:	edc7 7a00 	vstr	s15, [r7]
 80030de:	783b      	ldrb	r3, [r7, #0]
 80030e0:	b2db      	uxtb	r3, r3
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <L6474_WriteBytes+0x40>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	6839      	ldr	r1, [r7, #0]
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f001 fa93 	bl	8004630 <L6474_Board_SpiWriteBytes>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 8003110:	f248 0001 	movw	r0, #32769	; 0x8001
 8003114:	f7ff f91e 	bl	8002354 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <L6474_WriteBytes+0x44>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <L6474_WriteBytes+0x48>)
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
  }
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	200003a4 	.word	0x200003a4
 8003134:	200003c1 	.word	0x200003c1
 8003138:	200003c0 	.word	0x200003c0

0800313c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	; 0x38
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	2234      	movs	r2, #52	; 0x34
 8003146:	2100      	movs	r1, #0
 8003148:	4618      	mov	r0, r3
 800314a:	f026 fc49 	bl	80299e0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800314e:	4b3a      	ldr	r3, [pc, #232]	; (8003238 <MX_LTDC_Init+0xfc>)
 8003150:	4a3a      	ldr	r2, [pc, #232]	; (800323c <MX_LTDC_Init+0x100>)
 8003152:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003154:	4b38      	ldr	r3, [pc, #224]	; (8003238 <MX_LTDC_Init+0xfc>)
 8003156:	2200      	movs	r2, #0
 8003158:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800315a:	4b37      	ldr	r3, [pc, #220]	; (8003238 <MX_LTDC_Init+0xfc>)
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003160:	4b35      	ldr	r3, [pc, #212]	; (8003238 <MX_LTDC_Init+0xfc>)
 8003162:	2200      	movs	r2, #0
 8003164:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003166:	4b34      	ldr	r3, [pc, #208]	; (8003238 <MX_LTDC_Init+0xfc>)
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 39;
 800316c:	4b32      	ldr	r3, [pc, #200]	; (8003238 <MX_LTDC_Init+0xfc>)
 800316e:	2227      	movs	r2, #39	; 0x27
 8003170:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 8003172:	4b31      	ldr	r3, [pc, #196]	; (8003238 <MX_LTDC_Init+0xfc>)
 8003174:	2208      	movs	r2, #8
 8003176:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8003178:	4b2f      	ldr	r3, [pc, #188]	; (8003238 <MX_LTDC_Init+0xfc>)
 800317a:	222a      	movs	r2, #42	; 0x2a
 800317c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800317e:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <MX_LTDC_Init+0xfc>)
 8003180:	220b      	movs	r2, #11
 8003182:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8003184:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <MX_LTDC_Init+0xfc>)
 8003186:	f240 220a 	movw	r2, #522	; 0x20a
 800318a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800318c:	4b2a      	ldr	r3, [pc, #168]	; (8003238 <MX_LTDC_Init+0xfc>)
 800318e:	f240 121b 	movw	r2, #283	; 0x11b
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 528;
 8003194:	4b28      	ldr	r3, [pc, #160]	; (8003238 <MX_LTDC_Init+0xfc>)
 8003196:	f44f 7204 	mov.w	r2, #528	; 0x210
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800319c:	4b26      	ldr	r3, [pc, #152]	; (8003238 <MX_LTDC_Init+0xfc>)
 800319e:	f240 121d 	movw	r2, #285	; 0x11d
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80031a4:	4b24      	ldr	r3, [pc, #144]	; (8003238 <MX_LTDC_Init+0xfc>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80031ac:	4b22      	ldr	r3, [pc, #136]	; (8003238 <MX_LTDC_Init+0xfc>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <MX_LTDC_Init+0xfc>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80031bc:	481e      	ldr	r0, [pc, #120]	; (8003238 <MX_LTDC_Init+0xfc>)
 80031be:	f004 f871 	bl	80072a4 <HAL_LTDC_Init>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80031c8:	f000 fab4 	bl	8003734 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80031d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80031d4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80031da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80031de:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80031e0:	2302      	movs	r3, #2
 80031e2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80031e4:	23ff      	movs	r3, #255	; 0xff
 80031e6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80031ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80031f2:	2305      	movs	r3, #5
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80031fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8003200:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003218:	1d3b      	adds	r3, r7, #4
 800321a:	2200      	movs	r2, #0
 800321c:	4619      	mov	r1, r3
 800321e:	4806      	ldr	r0, [pc, #24]	; (8003238 <MX_LTDC_Init+0xfc>)
 8003220:	f004 f9c8 	bl	80075b4 <HAL_LTDC_ConfigLayer>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 800322a:	f000 fa83 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800322e:	bf00      	nop
 8003230:	3738      	adds	r7, #56	; 0x38
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	2000043c 	.word	0x2000043c
 800323c:	50001000 	.word	0x50001000

08003240 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b0c0      	sub	sp, #256	; 0x100
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003258:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800325c:	22bc      	movs	r2, #188	; 0xbc
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f026 fbbd 	bl	80299e0 <memset>
  if(ltdcHandle->Instance==LTDC)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4abd      	ldr	r2, [pc, #756]	; (8003560 <HAL_LTDC_MspInit+0x320>)
 800326c:	4293      	cmp	r3, r2
 800326e:	f040 8171 	bne.w	8003554 <HAL_LTDC_MspInit+0x314>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003272:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003276:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8003278:	2301      	movs	r3, #1
 800327a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800327c:	2312      	movs	r3, #18
 800327e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003280:	2302      	movs	r3, #2
 8003282:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003284:	2302      	movs	r3, #2
 8003286:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3R = 1;
 8003288:	2301      	movs	r3, #1
 800328a:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800328c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003290:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8003292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003296:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8003298:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800329c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800329e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032a2:	4618      	mov	r0, r3
 80032a4:	f005 fbcc 	bl	8008a40 <HAL_RCCEx_PeriphCLKConfig>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 80032ae:	f000 fa41 	bl	8003734 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80032b2:	4bac      	ldr	r3, [pc, #688]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 80032b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032b8:	4aaa      	ldr	r2, [pc, #680]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 80032ba:	f043 0308 	orr.w	r3, r3, #8
 80032be:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80032c2:	4ba8      	ldr	r3, [pc, #672]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 80032c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032d0:	4ba4      	ldr	r3, [pc, #656]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 80032d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d6:	4aa3      	ldr	r2, [pc, #652]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 80032d8:	f043 0310 	orr.w	r3, r3, #16
 80032dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032e0:	4ba0      	ldr	r3, [pc, #640]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 80032e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80032ee:	4b9d      	ldr	r3, [pc, #628]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 80032f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f4:	4a9b      	ldr	r2, [pc, #620]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032fe:	4b99      	ldr	r3, [pc, #612]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 8003300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800330c:	4b95      	ldr	r3, [pc, #596]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 800330e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003312:	4a94      	ldr	r2, [pc, #592]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 8003314:	f043 0320 	orr.w	r3, r3, #32
 8003318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800331c:	4b91      	ldr	r3, [pc, #580]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 800331e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	623b      	str	r3, [r7, #32]
 8003328:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	4b8e      	ldr	r3, [pc, #568]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 800332c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003330:	4a8c      	ldr	r2, [pc, #560]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800333a:	4b8a      	ldr	r3, [pc, #552]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 800333c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003348:	4b86      	ldr	r3, [pc, #536]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 800334a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334e:	4a85      	ldr	r2, [pc, #532]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003358:	4b82      	ldr	r3, [pc, #520]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 800335a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003366:	4b7f      	ldr	r3, [pc, #508]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 8003368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800336c:	4a7d      	ldr	r2, [pc, #500]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 800336e:	f043 0302 	orr.w	r3, r3, #2
 8003372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003376:	4b7b      	ldr	r3, [pc, #492]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 8003378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003384:	4b77      	ldr	r3, [pc, #476]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 8003386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800338a:	4a76      	ldr	r2, [pc, #472]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 800338c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003394:	4b73      	ldr	r3, [pc, #460]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 8003396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800339a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033a2:	4b70      	ldr	r3, [pc, #448]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 80033a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a8:	4a6e      	ldr	r2, [pc, #440]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 80033aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b2:	4b6c      	ldr	r3, [pc, #432]	; (8003564 <HAL_LTDC_MspInit+0x324>)
 80033b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80033c0:	2370      	movs	r3, #112	; 0x70
 80033c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c6:	2302      	movs	r3, #2
 80033c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033d8:	230e      	movs	r3, #14
 80033da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033e2:	4619      	mov	r1, r3
 80033e4:	4860      	ldr	r0, [pc, #384]	; (8003568 <HAL_LTDC_MspInit+0x328>)
 80033e6:	f003 fd93 	bl	8006f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80033ea:	f240 63f7 	movw	r3, #1783	; 0x6f7
 80033ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2302      	movs	r3, #2
 80033f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003404:	230e      	movs	r3, #14
 8003406:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800340a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800340e:	4619      	mov	r1, r3
 8003410:	4856      	ldr	r0, [pc, #344]	; (800356c <HAL_LTDC_MspInit+0x32c>)
 8003412:	f003 fd7d 	bl	8006f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800341a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003430:	230e      	movs	r3, #14
 8003432:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003436:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800343a:	4619      	mov	r1, r3
 800343c:	484c      	ldr	r0, [pc, #304]	; (8003570 <HAL_LTDC_MspInit+0x330>)
 800343e:	f003 fd67 	bl	8006f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003442:	2301      	movs	r3, #1
 8003444:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003448:	2302      	movs	r3, #2
 800344a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800345a:	230e      	movs	r3, #14
 800345c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003460:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003464:	4619      	mov	r1, r3
 8003466:	4843      	ldr	r0, [pc, #268]	; (8003574 <HAL_LTDC_MspInit+0x334>)
 8003468:	f003 fd52 	bl	8006f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800346c:	2320      	movs	r3, #32
 800346e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	2300      	movs	r3, #0
 8003480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003484:	230e      	movs	r3, #14
 8003486:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800348e:	4619      	mov	r1, r3
 8003490:	4839      	ldr	r0, [pc, #228]	; (8003578 <HAL_LTDC_MspInit+0x338>)
 8003492:	f003 fd3d 	bl	8006f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003496:	2302      	movs	r3, #2
 8003498:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034ae:	2309      	movs	r3, #9
 80034b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034b8:	4619      	mov	r1, r3
 80034ba:	4830      	ldr	r0, [pc, #192]	; (800357c <HAL_LTDC_MspInit+0x33c>)
 80034bc:	f003 fd28 	bl	8006f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_15;
 80034c0:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 80034c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034da:	230e      	movs	r3, #14
 80034dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80034e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034e4:	4619      	mov	r1, r3
 80034e6:	4826      	ldr	r0, [pc, #152]	; (8003580 <HAL_LTDC_MspInit+0x340>)
 80034e8:	f003 fd12 	bl	8006f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80034ec:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80034f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	2302      	movs	r3, #2
 80034f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003500:	2300      	movs	r3, #0
 8003502:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003506:	230e      	movs	r3, #14
 8003508:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800350c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003510:	4619      	mov	r1, r3
 8003512:	481c      	ldr	r0, [pc, #112]	; (8003584 <HAL_LTDC_MspInit+0x344>)
 8003514:	f003 fcfc 	bl	8006f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800351c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003532:	2309      	movs	r3, #9
 8003534:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003538:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800353c:	4619      	mov	r1, r3
 800353e:	4811      	ldr	r0, [pc, #68]	; (8003584 <HAL_LTDC_MspInit+0x344>)
 8003540:	f003 fce6 	bl	8006f10 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003544:	2200      	movs	r2, #0
 8003546:	2105      	movs	r1, #5
 8003548:	2058      	movs	r0, #88	; 0x58
 800354a:	f003 fabd 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800354e:	2058      	movs	r0, #88	; 0x58
 8003550:	f003 fad4 	bl	8006afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003554:	bf00      	nop
 8003556:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	50001000 	.word	0x50001000
 8003564:	58024400 	.word	0x58024400
 8003568:	58021000 	.word	0x58021000
 800356c:	58022000 	.word	0x58022000
 8003570:	58021400 	.word	0x58021400
 8003574:	58020800 	.word	0x58020800
 8003578:	58020000 	.word	0x58020000
 800357c:	58020400 	.word	0x58020400
 8003580:	58021c00 	.word	0x58021c00
 8003584:	58021800 	.word	0x58021800

08003588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800358c:	f001 f8b6 	bl	80046fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003590:	f000 f824 	bl	80035dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003594:	f7fd fabc 	bl	8000b10 <MX_GPIO_Init>
  MX_SPI2_Init();
 8003598:	f000 f9a0 	bl	80038dc <MX_SPI2_Init>
  MX_ADC3_Init();
 800359c:	f7fd f872 	bl	8000684 <MX_ADC3_Init>
  MX_UART5_Init();
 80035a0:	f000 fd18 	bl	8003fd4 <MX_UART5_Init>
  MX_I2C1_SMBUS_Init();
 80035a4:	f7fd fb86 	bl	8000cb4 <MX_I2C1_SMBUS_Init>
  MX_DMA2D_Init();
 80035a8:	f7fd f98c 	bl	80008c4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80035ac:	f7ff fdc6 	bl	800313c <MX_LTDC_Init>
  MX_CRC_Init();
 80035b0:	f7fd f944 	bl	800083c <MX_CRC_Init>
  MX_TIM2_Init();
 80035b4:	f000 fc5a 	bl	8003e6c <MX_TIM2_Init>
  MX_TouchGFX_Init();
 80035b8:	f00e f808 	bl	80115cc <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  L6474_SetNbDevices(1);
 80035bc:	2001      	movs	r0, #1
 80035be:	f7fe fc85 	bl	8001ecc <L6474_SetNbDevices>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474,NULL);
 80035c2:	2100      	movs	r1, #0
 80035c4:	f641 104a 	movw	r0, #6474	; 0x194a
 80035c8:	f000 f90e 	bl	80037e8 <BSP_MotorControl_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80035cc:	f00a fc12 	bl	800ddf4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80035d0:	f7fd f9d4 	bl	800097c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80035d4:	f00a fc32 	bl	800de3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035d8:	e7fe      	b.n	80035d8 <main+0x50>
	...

080035dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b09c      	sub	sp, #112	; 0x70
 80035e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e6:	224c      	movs	r2, #76	; 0x4c
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f026 f9f8 	bl	80299e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	2220      	movs	r2, #32
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f026 f9f2 	bl	80299e0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80035fc:	2002      	movs	r0, #2
 80035fe:	f004 f9e9 	bl	80079d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003602:	2300      	movs	r3, #0
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <SystemClock_Config+0xfc>)
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	4a33      	ldr	r2, [pc, #204]	; (80036d8 <SystemClock_Config+0xfc>)
 800360c:	f023 0301 	bic.w	r3, r3, #1
 8003610:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003612:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <SystemClock_Config+0xfc>)
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <SystemClock_Config+0x100>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	4a2e      	ldr	r2, [pc, #184]	; (80036dc <SystemClock_Config+0x100>)
 8003622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003626:	6193      	str	r3, [r2, #24]
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <SystemClock_Config+0x100>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003634:	bf00      	nop
 8003636:	4b29      	ldr	r3, [pc, #164]	; (80036dc <SystemClock_Config+0x100>)
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800363e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003642:	d1f8      	bne.n	8003636 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003644:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <SystemClock_Config+0x104>)
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	f023 0303 	bic.w	r3, r3, #3
 800364c:	4a24      	ldr	r2, [pc, #144]	; (80036e0 <SystemClock_Config+0x104>)
 800364e:	f043 0302 	orr.w	r3, r3, #2
 8003652:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003654:	2301      	movs	r3, #1
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800365e:	2302      	movs	r3, #2
 8003660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003662:	2302      	movs	r3, #2
 8003664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003666:	2301      	movs	r3, #1
 8003668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 800366a:	2364      	movs	r3, #100	; 0x64
 800366c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800366e:	2302      	movs	r3, #2
 8003670:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003672:	2304      	movs	r3, #4
 8003674:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003676:	2302      	movs	r3, #2
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800367a:	230c      	movs	r3, #12
 800367c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800367e:	2300      	movs	r3, #0
 8003680:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368a:	4618      	mov	r0, r3
 800368c:	f004 f9dc 	bl	8007a48 <HAL_RCC_OscConfig>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003696:	f000 f84d 	bl	8003734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800369a:	233f      	movs	r3, #63	; 0x3f
 800369c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800369e:	2303      	movs	r3, #3
 80036a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80036a6:	2308      	movs	r3, #8
 80036a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80036aa:	2340      	movs	r3, #64	; 0x40
 80036ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80036ae:	2340      	movs	r3, #64	; 0x40
 80036b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80036b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80036b8:	2340      	movs	r3, #64	; 0x40
 80036ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	2102      	movs	r1, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f004 fdef 	bl	80082a4 <HAL_RCC_ClockConfig>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80036cc:	f000 f832 	bl	8003734 <Error_Handler>
  }
}
 80036d0:	bf00      	nop
 80036d2:	3770      	adds	r7, #112	; 0x70
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	58000400 	.word	0x58000400
 80036dc:	58024800 	.word	0x58024800
 80036e0:	58024400 	.word	0x58024400

080036e4 <MyFlagInterruptHandler>:

/* USER CODE BEGIN 4 */
//stepper driver interrupt
void MyFlagInterruptHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f000 f8d0 	bl	8003890 <BSP_MotorControl_CmdGetStatus>
 80036f0:	4603      	mov	r3, r0
 80036f2:	80fb      	strh	r3, [r7, #6]
  {
    //overcurrent detection
    // Action to be customized
  }

}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_ADC_LevelOutOfWindowCallback>:
// cpu temp interrupt
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc){
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	// do something in case of analog watchdog interrupts
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003722:	f001 f827 	bl	8004774 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40000400 	.word	0x40000400

08003734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003738:	b672      	cpsid	i
}
 800373a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800373c:	e7fe      	b.n	800373c <Error_Handler+0x8>

0800373e <Powerstep01_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800373e:	b480      	push	{r7}
 8003740:	af00      	add	r7, sp, #0
 8003742:	2300      	movs	r3, #0
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800374e:	b480      	push	{r7}
 8003750:	af00      	add	r7, sp, #0
 8003752:	2300      	movs	r3, #0
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0
 8003762:	2300      	movs	r3, #0
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
 8003794:	e004      	b.n	80037a0 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8003796:	f640 0002 	movw	r0, #2050	; 0x802
 800379a:	f000 f807 	bl	80037ac <BSP_MotorControl_ErrorHandler>
  }  
}
 800379e:	bf00      	nop
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200004e4 	.word	0x200004e4

080037ac <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 80037b6:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <BSP_MotorControl_ErrorHandler+0x38>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00d      	beq.n	80037da <BSP_MotorControl_ErrorHandler+0x2e>
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <BSP_MotorControl_ErrorHandler+0x38>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <BSP_MotorControl_ErrorHandler+0x38>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037d2:	88fa      	ldrh	r2, [r7, #6]
 80037d4:	4610      	mov	r0, r2
 80037d6:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 80037d8:	e000      	b.n	80037dc <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 80037da:	e7fe      	b.n	80037da <BSP_MotorControl_ErrorHandler+0x2e>
}
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	200004e4 	.word	0x200004e4

080037e8 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] nbDevices Number of motor devices to use (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, uint8_t nbDevices)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	460a      	mov	r2, r1
 80037f2:	80fb      	strh	r3, [r7, #6]
 80037f4:	4613      	mov	r3, r2
 80037f6:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 80037f8:	4a23      	ldr	r2, [pc, #140]	; (8003888 <BSP_MotorControl_Init+0xa0>)
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	8013      	strh	r3, [r2, #0]
  
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	f641 124a 	movw	r2, #6474	; 0x194a
 8003804:	4293      	cmp	r3, r2
 8003806:	d105      	bne.n	8003814 <BSP_MotorControl_Init+0x2c>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 8003808:	f7fd fe72 	bl	80014f0 <L6474_GetMotorHandle>
 800380c:	4603      	mov	r3, r0
 800380e:	4a1f      	ldr	r2, [pc, #124]	; (800388c <BSP_MotorControl_Init+0xa4>)
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e020      	b.n	8003856 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d105      	bne.n	8003826 <BSP_MotorControl_Init+0x3e>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 800381a:	f7ff ff90 	bl	800373e <Powerstep01_GetMotorHandle>
 800381e:	4603      	mov	r3, r0
 8003820:	4a1a      	ldr	r2, [pc, #104]	; (800388c <BSP_MotorControl_Init+0xa4>)
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	e017      	b.n	8003856 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	f641 023e 	movw	r2, #6206	; 0x183e
 800382c:	4293      	cmp	r3, r2
 800382e:	d105      	bne.n	800383c <BSP_MotorControl_Init+0x54>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 8003830:	f7ff ff8d 	bl	800374e <L6206_GetMotorHandle>
 8003834:	4603      	mov	r3, r0
 8003836:	4a15      	ldr	r2, [pc, #84]	; (800388c <BSP_MotorControl_Init+0xa4>)
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e00c      	b.n	8003856 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 8003842:	d105      	bne.n	8003850 <BSP_MotorControl_Init+0x68>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 8003844:	f7ff ff8b 	bl	800375e <L6208_GetMotorHandle>
 8003848:	4603      	mov	r3, r0
 800384a:	4a10      	ldr	r2, [pc, #64]	; (800388c <BSP_MotorControl_Init+0xa4>)
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e002      	b.n	8003856 <BSP_MotorControl_Init+0x6e>
  }
  else
  {
    motorDrvHandle = 0;
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <BSP_MotorControl_Init+0xa4>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
  }

  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <BSP_MotorControl_Init+0xa4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <BSP_MotorControl_Init+0x8e>
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <BSP_MotorControl_Init+0xa4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <BSP_MotorControl_Init+0x8e>
  {
    motorDrvHandle->Init(nbDevices);
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <BSP_MotorControl_Init+0xa4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	797a      	ldrb	r2, [r7, #5]
 8003870:	4610      	mov	r0, r2
 8003872:	4798      	blx	r3
 8003874:	e004      	b.n	8003880 <BSP_MotorControl_Init+0x98>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 8003876:	f640 0004 	movw	r0, #2052	; 0x804
 800387a:	f7ff ff97 	bl	80037ac <BSP_MotorControl_ErrorHandler>
  }  
}
 800387e:	bf00      	nop
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	200004e8 	.word	0x200004e8
 800388c:	200004e4 	.word	0x200004e4

08003890 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <BSP_MotorControl_CmdGetStatus+0x48>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00f      	beq.n	80038c6 <BSP_MotorControl_CmdGetStatus+0x36>
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <BSP_MotorControl_CmdGetStatus+0x48>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <BSP_MotorControl_CmdGetStatus+0x48>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	79fa      	ldrb	r2, [r7, #7]
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
 80038c0:	4603      	mov	r3, r0
 80038c2:	81fb      	strh	r3, [r7, #14]
 80038c4:	e003      	b.n	80038ce <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 80038c6:	f640 0022 	movw	r0, #2082	; 0x822
 80038ca:	f7ff ff6f 	bl	80037ac <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 80038ce:	89fb      	ldrh	r3, [r7, #14]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	200004e4 	.word	0x200004e4

080038dc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <MX_SPI2_Init+0xa4>)
 80038e2:	4a28      	ldr	r2, [pc, #160]	; (8003984 <MX_SPI2_Init+0xa8>)
 80038e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038e6:	4b26      	ldr	r3, [pc, #152]	; (8003980 <MX_SPI2_Init+0xa4>)
 80038e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80038ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <MX_SPI2_Init+0xa4>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_32BIT;
 80038f4:	4b22      	ldr	r3, [pc, #136]	; (8003980 <MX_SPI2_Init+0xa4>)
 80038f6:	221f      	movs	r2, #31
 80038f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038fa:	4b21      	ldr	r3, [pc, #132]	; (8003980 <MX_SPI2_Init+0xa4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003902:	2200      	movs	r2, #0
 8003904:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003906:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003908:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800390c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800390e:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003914:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003918:	2200      	movs	r2, #0
 800391a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800391c:	4b18      	ldr	r3, [pc, #96]	; (8003980 <MX_SPI2_Init+0xa4>)
 800391e:	2200      	movs	r2, #0
 8003920:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003922:	4b17      	ldr	r3, [pc, #92]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003924:	2200      	movs	r2, #0
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003928:	4b15      	ldr	r3, [pc, #84]	; (8003980 <MX_SPI2_Init+0xa4>)
 800392a:	2200      	movs	r2, #0
 800392c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800392e:	4b14      	ldr	r3, [pc, #80]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003934:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003938:	2200      	movs	r2, #0
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <MX_SPI2_Init+0xa4>)
 800393e:	2200      	movs	r2, #0
 8003940:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003944:	2200      	movs	r2, #0
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <MX_SPI2_Init+0xa4>)
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003950:	2200      	movs	r2, #0
 8003952:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003956:	2200      	movs	r2, #0
 8003958:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <MX_SPI2_Init+0xa4>)
 800395c:	2200      	movs	r2, #0
 800395e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003960:	4b07      	ldr	r3, [pc, #28]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003962:	2200      	movs	r2, #0
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <MX_SPI2_Init+0xa4>)
 8003968:	2200      	movs	r2, #0
 800396a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800396c:	4804      	ldr	r0, [pc, #16]	; (8003980 <MX_SPI2_Init+0xa4>)
 800396e:	f007 faf3 	bl	800af58 <HAL_SPI_Init>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003978:	f7ff fedc 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800397c:	bf00      	nop
 800397e:	bd80      	pop	{r7, pc}
 8003980:	200004ec 	.word	0x200004ec
 8003984:	40003800 	.word	0x40003800

08003988 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b0b8      	sub	sp, #224	; 0xe0
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039a0:	f107 0310 	add.w	r3, r7, #16
 80039a4:	22bc      	movs	r2, #188	; 0xbc
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f026 f819 	bl	80299e0 <memset>
  if(spiHandle->Instance==SPI2)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a25      	ldr	r2, [pc, #148]	; (8003a48 <HAL_SPI_MspInit+0xc0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d142      	bne.n	8003a3e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80039b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80039be:	2300      	movs	r3, #0
 80039c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039c2:	f107 0310 	add.w	r3, r7, #16
 80039c6:	4618      	mov	r0, r3
 80039c8:	f005 f83a 	bl	8008a40 <HAL_RCCEx_PeriphCLKConfig>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80039d2:	f7ff feaf 	bl	8003734 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_SPI_MspInit+0xc4>)
 80039d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039dc:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <HAL_SPI_MspInit+0xc4>)
 80039de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_SPI_MspInit+0xc4>)
 80039e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <HAL_SPI_MspInit+0xc4>)
 80039f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039fa:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <HAL_SPI_MspInit+0xc4>)
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <HAL_SPI_MspInit+0xc4>)
 8003a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003a12:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003a16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a2c:	2305      	movs	r3, #5
 8003a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a36:	4619      	mov	r1, r3
 8003a38:	4805      	ldr	r0, [pc, #20]	; (8003a50 <HAL_SPI_MspInit+0xc8>)
 8003a3a:	f003 fa69 	bl	8006f10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003a3e:	bf00      	nop
 8003a40:	37e0      	adds	r7, #224	; 0xe0
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40003800 	.word	0x40003800
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	58020400 	.word	0x58020400

08003a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <HAL_MspInit+0x38>)
 8003a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a60:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <HAL_MspInit+0x38>)
 8003a62:	f043 0302 	orr.w	r3, r3, #2
 8003a66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_MspInit+0x38>)
 8003a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	210f      	movs	r1, #15
 8003a7c:	f06f 0001 	mvn.w	r0, #1
 8003a80:	f003 f822 	bl	8006ac8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	58024400 	.word	0x58024400

08003a90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b090      	sub	sp, #64	; 0x40
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b0f      	cmp	r3, #15
 8003a9c:	d827      	bhi.n	8003aee <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	201d      	movs	r0, #29
 8003aa4:	f003 f810 	bl	8006ac8 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003aa8:	201d      	movs	r0, #29
 8003aaa:	f003 f827 	bl	8006afc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003aae:	4a29      	ldr	r2, [pc, #164]	; (8003b54 <HAL_InitTick+0xc4>)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003ab4:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <HAL_InitTick+0xc8>)
 8003ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aba:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <HAL_InitTick+0xc8>)
 8003abc:	f043 0302 	orr.w	r3, r3, #2
 8003ac0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ac4:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_InitTick+0xc8>)
 8003ac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ad2:	f107 0210 	add.w	r2, r7, #16
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f004 ff6d 	bl	80089bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <HAL_InitTick+0x6a>
 8003aec:	e001      	b.n	8003af2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e02b      	b.n	8003b4a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003af2:	f004 ff37 	bl	8008964 <HAL_RCC_GetPCLK1Freq>
 8003af6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003af8:	e004      	b.n	8003b04 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003afa:	f004 ff33 	bl	8008964 <HAL_RCC_GetPCLK1Freq>
 8003afe:	4603      	mov	r3, r0
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b06:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <HAL_InitTick+0xcc>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	0c9b      	lsrs	r3, r3, #18
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003b12:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <HAL_InitTick+0xd0>)
 8003b14:	4a13      	ldr	r2, [pc, #76]	; (8003b64 <HAL_InitTick+0xd4>)
 8003b16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <HAL_InitTick+0xd0>)
 8003b1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b1e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003b20:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <HAL_InitTick+0xd0>)
 8003b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b24:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <HAL_InitTick+0xd0>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <HAL_InitTick+0xd0>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8003b32:	480b      	ldr	r0, [pc, #44]	; (8003b60 <HAL_InitTick+0xd0>)
 8003b34:	f007 feeb 	bl	800b90e <HAL_TIM_Base_Init>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8003b3e:	4808      	ldr	r0, [pc, #32]	; (8003b60 <HAL_InitTick+0xd0>)
 8003b40:	f007 ff46 	bl	800b9d0 <HAL_TIM_Base_Start_IT>
 8003b44:	4603      	mov	r3, r0
 8003b46:	e000      	b.n	8003b4a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3740      	adds	r7, #64	; 0x40
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000134 	.word	0x20000134
 8003b58:	58024400 	.word	0x58024400
 8003b5c:	431bde83 	.word	0x431bde83
 8003b60:	20000574 	.word	0x20000574
 8003b64:	40000400 	.word	0x40000400

08003b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b6c:	e7fe      	b.n	8003b6c <NMI_Handler+0x4>

08003b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b72:	e7fe      	b.n	8003b72 <HardFault_Handler+0x4>

08003b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b78:	e7fe      	b.n	8003b78 <MemManage_Handler+0x4>

08003b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b7e:	e7fe      	b.n	8003b7e <BusFault_Handler+0x4>

08003b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b84:	e7fe      	b.n	8003b84 <UsageFault_Handler+0x4>

08003b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <TIM3_IRQHandler+0x10>)
 8003b9a:	f008 f9d9 	bl	800bf50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000574 	.word	0x20000574

08003ba8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <LTDC_IRQHandler+0x10>)
 8003bae:	f003 fc49 	bl	8007444 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	2000043c 	.word	0x2000043c

08003bbc <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <ADC3_IRQHandler+0x10>)
 8003bc2:	f001 fc43 	bl	800544c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000244 	.word	0x20000244

08003bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
	return 1;
 8003bd4:	2301      	movs	r3, #1
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <_kill>:

int _kill(int pid, int sig)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bea:	f025 fda5 	bl	8029738 <__errno>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2216      	movs	r2, #22
 8003bf2:	601a      	str	r2, [r3, #0]
	return -1;
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <_exit>:

void _exit (int status)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c08:	f04f 31ff 	mov.w	r1, #4294967295
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ffe7 	bl	8003be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c12:	e7fe      	b.n	8003c12 <_exit+0x12>

08003c14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	e00a      	b.n	8003c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c26:	f3af 8000 	nop.w
 8003c2a:	4601      	mov	r1, r0
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	60ba      	str	r2, [r7, #8]
 8003c32:	b2ca      	uxtb	r2, r1
 8003c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	dbf0      	blt.n	8003c26 <_read+0x12>
	}

return len;
 8003c44:	687b      	ldr	r3, [r7, #4]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e009      	b.n	8003c74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	60ba      	str	r2, [r7, #8]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	3301      	adds	r3, #1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	dbf1      	blt.n	8003c60 <_write+0x12>
	}
	return len;
 8003c7c:	687b      	ldr	r3, [r7, #4]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <_close>:

int _close(int file)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8003c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cae:	605a      	str	r2, [r3, #4]
	return 0;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <_isatty>:

int _isatty(int file)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8003cc6:	2301      	movs	r3, #1
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
	return 0;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <_sbrk+0x5c>)
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <_sbrk+0x60>)
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <_sbrk+0x64>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <_sbrk+0x64>)
 8003d0e:	4a12      	ldr	r2, [pc, #72]	; (8003d58 <_sbrk+0x68>)
 8003d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <_sbrk+0x64>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d207      	bcs.n	8003d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d20:	f025 fd0a 	bl	8029738 <__errno>
 8003d24:	4603      	mov	r3, r0
 8003d26:	220c      	movs	r2, #12
 8003d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	e009      	b.n	8003d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <_sbrk+0x64>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d36:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <_sbrk+0x64>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <_sbrk+0x64>)
 8003d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20020000 	.word	0x20020000
 8003d50:	00000400 	.word	0x00000400
 8003d54:	200005c0 	.word	0x200005c0
 8003d58:	20005be8 	.word	0x20005be8

08003d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d60:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <SystemInit+0xe4>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	4a36      	ldr	r2, [pc, #216]	; (8003e40 <SystemInit+0xe4>)
 8003d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d70:	4b34      	ldr	r3, [pc, #208]	; (8003e44 <SystemInit+0xe8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	2b06      	cmp	r3, #6
 8003d7a:	d807      	bhi.n	8003d8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d7c:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <SystemInit+0xe8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 030f 	bic.w	r3, r3, #15
 8003d84:	4a2f      	ldr	r2, [pc, #188]	; (8003e44 <SystemInit+0xe8>)
 8003d86:	f043 0307 	orr.w	r3, r3, #7
 8003d8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d8c:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <SystemInit+0xec>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2d      	ldr	r2, [pc, #180]	; (8003e48 <SystemInit+0xec>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d98:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <SystemInit+0xec>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <SystemInit+0xec>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4929      	ldr	r1, [pc, #164]	; (8003e48 <SystemInit+0xec>)
 8003da4:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <SystemInit+0xf0>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003daa:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <SystemInit+0xe8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003db6:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <SystemInit+0xe8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 030f 	bic.w	r3, r3, #15
 8003dbe:	4a21      	ldr	r2, [pc, #132]	; (8003e44 <SystemInit+0xe8>)
 8003dc0:	f043 0307 	orr.w	r3, r3, #7
 8003dc4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <SystemInit+0xec>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003dcc:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <SystemInit+0xec>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003dd2:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <SystemInit+0xec>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <SystemInit+0xec>)
 8003dda:	4a1d      	ldr	r2, [pc, #116]	; (8003e50 <SystemInit+0xf4>)
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003dde:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <SystemInit+0xec>)
 8003de0:	4a1c      	ldr	r2, [pc, #112]	; (8003e54 <SystemInit+0xf8>)
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003de4:	4b18      	ldr	r3, [pc, #96]	; (8003e48 <SystemInit+0xec>)
 8003de6:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <SystemInit+0xfc>)
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003dea:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <SystemInit+0xec>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <SystemInit+0xec>)
 8003df2:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <SystemInit+0xfc>)
 8003df4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003df6:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <SystemInit+0xec>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <SystemInit+0xec>)
 8003dfe:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <SystemInit+0xfc>)
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <SystemInit+0xec>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <SystemInit+0xec>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <SystemInit+0xec>)
 8003e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <SystemInit+0xec>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <SystemInit+0x100>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <SystemInit+0x104>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e26:	d202      	bcs.n	8003e2e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003e28:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <SystemInit+0x108>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <SystemInit+0x10c>)
 8003e30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003e34:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003e36:	bf00      	nop
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	e000ed00 	.word	0xe000ed00
 8003e44:	52002000 	.word	0x52002000
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003e50:	02020200 	.word	0x02020200
 8003e54:	01ff0000 	.word	0x01ff0000
 8003e58:	01010280 	.word	0x01010280
 8003e5c:	5c001000 	.word	0x5c001000
 8003e60:	ffff0000 	.word	0xffff0000
 8003e64:	51008108 	.word	0x51008108
 8003e68:	52004000 	.word	0x52004000

08003e6c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e72:	f107 031c 	add.w	r3, r7, #28
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e7e:	463b      	mov	r3, r7
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	611a      	str	r2, [r3, #16]
 8003e8c:	615a      	str	r2, [r3, #20]
 8003e8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e90:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <MX_TIM2_Init+0xb0>)
 8003e92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003e98:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <MX_TIM2_Init+0xb0>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e9e:	4b1f      	ldr	r3, [pc, #124]	; (8003f1c <MX_TIM2_Init+0xb0>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003ea4:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <MX_TIM2_Init+0xb0>)
 8003ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <MX_TIM2_Init+0xb0>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eb2:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <MX_TIM2_Init+0xb0>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003eb8:	4818      	ldr	r0, [pc, #96]	; (8003f1c <MX_TIM2_Init+0xb0>)
 8003eba:	f007 fe01 	bl	800bac0 <HAL_TIM_PWM_Init>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003ec4:	f7ff fc36 	bl	8003734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ed0:	f107 031c 	add.w	r3, r7, #28
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4811      	ldr	r0, [pc, #68]	; (8003f1c <MX_TIM2_Init+0xb0>)
 8003ed8:	f008 fe2c 	bl	800cb34 <HAL_TIMEx_MasterConfigSynchronization>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003ee2:	f7ff fc27 	bl	8003734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ee6:	2360      	movs	r3, #96	; 0x60
 8003ee8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ef6:	463b      	mov	r3, r7
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4619      	mov	r1, r3
 8003efc:	4807      	ldr	r0, [pc, #28]	; (8003f1c <MX_TIM2_Init+0xb0>)
 8003efe:	f008 f947 	bl	800c190 <HAL_TIM_PWM_ConfigChannel>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003f08:	f7ff fc14 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003f0c:	4803      	ldr	r0, [pc, #12]	; (8003f1c <MX_TIM2_Init+0xb0>)
 8003f0e:	f000 f827 	bl	8003f60 <HAL_TIM_MspPostInit>

}
 8003f12:	bf00      	nop
 8003f14:	3728      	adds	r7, #40	; 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200005c4 	.word	0x200005c4

08003f20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d10e      	bne.n	8003f50 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <HAL_TIM_PWM_MspInit+0x3c>)
 8003f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f38:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <HAL_TIM_PWM_MspInit+0x3c>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_TIM_PWM_MspInit+0x3c>)
 8003f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	58024400 	.word	0x58024400

08003f60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	f107 030c 	add.w	r3, r7, #12
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f80:	d11f      	bne.n	8003fc2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <HAL_TIM_MspPostInit+0x6c>)
 8003f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f88:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <HAL_TIM_MspPostInit+0x6c>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f92:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <HAL_TIM_MspPostInit+0x6c>)
 8003f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb6:	f107 030c 	add.w	r3, r7, #12
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4804      	ldr	r0, [pc, #16]	; (8003fd0 <HAL_TIM_MspPostInit+0x70>)
 8003fbe:	f002 ffa7 	bl	8006f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003fc2:	bf00      	nop
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	58024400 	.word	0x58024400
 8003fd0:	58020000 	.word	0x58020000

08003fd4 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003fd8:	4b22      	ldr	r3, [pc, #136]	; (8004064 <MX_UART5_Init+0x90>)
 8003fda:	4a23      	ldr	r2, [pc, #140]	; (8004068 <MX_UART5_Init+0x94>)
 8003fdc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003fde:	4b21      	ldr	r3, [pc, #132]	; (8004064 <MX_UART5_Init+0x90>)
 8003fe0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003fe4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <MX_UART5_Init+0x90>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003fec:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <MX_UART5_Init+0x90>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003ff2:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <MX_UART5_Init+0x90>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <MX_UART5_Init+0x90>)
 8003ffa:	220c      	movs	r2, #12
 8003ffc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ffe:	4b19      	ldr	r3, [pc, #100]	; (8004064 <MX_UART5_Init+0x90>)
 8004000:	2200      	movs	r2, #0
 8004002:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <MX_UART5_Init+0x90>)
 8004006:	2200      	movs	r2, #0
 8004008:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800400a:	4b16      	ldr	r3, [pc, #88]	; (8004064 <MX_UART5_Init+0x90>)
 800400c:	2200      	movs	r2, #0
 800400e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004010:	4b14      	ldr	r3, [pc, #80]	; (8004064 <MX_UART5_Init+0x90>)
 8004012:	2200      	movs	r2, #0
 8004014:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <MX_UART5_Init+0x90>)
 8004018:	2200      	movs	r2, #0
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800401c:	4811      	ldr	r0, [pc, #68]	; (8004064 <MX_UART5_Init+0x90>)
 800401e:	f008 fe35 	bl	800cc8c <HAL_UART_Init>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8004028:	f7ff fb84 	bl	8003734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800402c:	2100      	movs	r1, #0
 800402e:	480d      	ldr	r0, [pc, #52]	; (8004064 <MX_UART5_Init+0x90>)
 8004030:	f009 fdd2 	bl	800dbd8 <HAL_UARTEx_SetTxFifoThreshold>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800403a:	f7ff fb7b 	bl	8003734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800403e:	2100      	movs	r1, #0
 8004040:	4808      	ldr	r0, [pc, #32]	; (8004064 <MX_UART5_Init+0x90>)
 8004042:	f009 fe07 	bl	800dc54 <HAL_UARTEx_SetRxFifoThreshold>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800404c:	f7ff fb72 	bl	8003734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8004050:	4804      	ldr	r0, [pc, #16]	; (8004064 <MX_UART5_Init+0x90>)
 8004052:	f009 fd88 	bl	800db66 <HAL_UARTEx_DisableFifoMode>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800405c:	f7ff fb6a 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004060:	bf00      	nop
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000610 	.word	0x20000610
 8004068:	40005000 	.word	0x40005000

0800406c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b0ba      	sub	sp, #232	; 0xe8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004074:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004084:	f107 0318 	add.w	r3, r7, #24
 8004088:	22bc      	movs	r2, #188	; 0xbc
 800408a:	2100      	movs	r1, #0
 800408c:	4618      	mov	r0, r3
 800408e:	f025 fca7 	bl	80299e0 <memset>
  if(uartHandle->Instance==UART5)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a37      	ldr	r2, [pc, #220]	; (8004174 <HAL_UART_MspInit+0x108>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d166      	bne.n	800416a <HAL_UART_MspInit+0xfe>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800409c:	2302      	movs	r3, #2
 800409e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040a6:	f107 0318 	add.w	r3, r7, #24
 80040aa:	4618      	mov	r0, r3
 80040ac:	f004 fcc8 	bl	8008a40 <HAL_RCCEx_PeriphCLKConfig>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80040b6:	f7ff fb3d 	bl	8003734 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80040ba:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <HAL_UART_MspInit+0x10c>)
 80040bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040c0:	4a2d      	ldr	r2, [pc, #180]	; (8004178 <HAL_UART_MspInit+0x10c>)
 80040c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040ca:	4b2b      	ldr	r3, [pc, #172]	; (8004178 <HAL_UART_MspInit+0x10c>)
 80040cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040d8:	4b27      	ldr	r3, [pc, #156]	; (8004178 <HAL_UART_MspInit+0x10c>)
 80040da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040de:	4a26      	ldr	r2, [pc, #152]	; (8004178 <HAL_UART_MspInit+0x10c>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040e8:	4b23      	ldr	r3, [pc, #140]	; (8004178 <HAL_UART_MspInit+0x10c>)
 80040ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040f6:	4b20      	ldr	r3, [pc, #128]	; (8004178 <HAL_UART_MspInit+0x10c>)
 80040f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040fc:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <HAL_UART_MspInit+0x10c>)
 80040fe:	f043 0308 	orr.w	r3, r3, #8
 8004102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004106:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <HAL_UART_MspInit+0x10c>)
 8004108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411c:	2302      	movs	r3, #2
 800411e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004122:	2300      	movs	r3, #0
 8004124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800412e:	2308      	movs	r3, #8
 8004130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004134:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004138:	4619      	mov	r1, r3
 800413a:	4810      	ldr	r0, [pc, #64]	; (800417c <HAL_UART_MspInit+0x110>)
 800413c:	f002 fee8 	bl	8006f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004140:	2304      	movs	r3, #4
 8004142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004146:	2302      	movs	r3, #2
 8004148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004152:	2300      	movs	r3, #0
 8004154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004158:	2308      	movs	r3, #8
 800415a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800415e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004162:	4619      	mov	r1, r3
 8004164:	4806      	ldr	r0, [pc, #24]	; (8004180 <HAL_UART_MspInit+0x114>)
 8004166:	f002 fed3 	bl	8006f10 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800416a:	bf00      	nop
 800416c:	37e8      	adds	r7, #232	; 0xe8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40005000 	.word	0x40005000
 8004178:	58024400 	.word	0x58024400
 800417c:	58020800 	.word	0x58020800
 8004180:	58020c00 	.word	0x58020c00

08004184 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fb11 	bl	80047b4 <HAL_Delay>
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800419e:	b672      	cpsid	i
}
 80041a0:	bf00      	nop
  __disable_irq();
}
 80041a2:	bf00      	nop
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80041b0:	b662      	cpsie	i
}
 80041b2:	bf00      	nop
  __enable_irq();
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d16a      	bne.n	80042a6 <L6474_Board_GpioInit+0xe6>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 80041d0:	4b53      	ldr	r3, [pc, #332]	; (8004320 <L6474_Board_GpioInit+0x160>)
 80041d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041d6:	4a52      	ldr	r2, [pc, #328]	; (8004320 <L6474_Board_GpioInit+0x160>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041e0:	4b4f      	ldr	r3, [pc, #316]	; (8004320 <L6474_Board_GpioInit+0x160>)
 80041e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 80041ee:	4b4c      	ldr	r3, [pc, #304]	; (8004320 <L6474_Board_GpioInit+0x160>)
 80041f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f4:	4a4a      	ldr	r2, [pc, #296]	; (8004320 <L6474_Board_GpioInit+0x160>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041fe:	4b48      	ldr	r3, [pc, #288]	; (8004320 <L6474_Board_GpioInit+0x160>)
 8004200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 800420c:	4b44      	ldr	r3, [pc, #272]	; (8004320 <L6474_Board_GpioInit+0x160>)
 800420e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004212:	4a43      	ldr	r2, [pc, #268]	; (8004320 <L6474_Board_GpioInit+0x160>)
 8004214:	f043 0302 	orr.w	r3, r3, #2
 8004218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800421c:	4b40      	ldr	r3, [pc, #256]	; (8004320 <L6474_Board_GpioInit+0x160>)
 800421e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 800422a:	2310      	movs	r3, #16
 800422c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800422e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004234:	2301      	movs	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004238:	2301      	movs	r3, #1
 800423a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	4619      	mov	r1, r3
 8004242:	4838      	ldr	r0, [pc, #224]	; (8004324 <L6474_Board_GpioInit+0x164>)
 8004244:	f002 fe64 	bl	8006f10 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 8004248:	2200      	movs	r2, #0
 800424a:	2105      	movs	r1, #5
 800424c:	2028      	movs	r0, #40	; 0x28
 800424e:	f002 fc3b 	bl	8006ac8 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 8004252:	2028      	movs	r0, #40	; 0x28
 8004254:	f002 fc52 	bl	8006afc <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8004258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800425c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800425e:	2301      	movs	r3, #1
 8004260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004266:	2301      	movs	r3, #1
 8004268:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 800426a:	f107 0314 	add.w	r3, r7, #20
 800426e:	4619      	mov	r1, r3
 8004270:	482d      	ldr	r0, [pc, #180]	; (8004328 <L6474_Board_GpioInit+0x168>)
 8004272:	f002 fe4d 	bl	8006f10 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8004276:	2201      	movs	r2, #1
 8004278:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800427c:	482a      	ldr	r0, [pc, #168]	; (8004328 <L6474_Board_GpioInit+0x168>)
 800427e:	f002 fff7 	bl	8007270 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 8004282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004288:	2301      	movs	r3, #1
 800428a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004290:	2301      	movs	r3, #1
 8004292:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	4619      	mov	r1, r3
 800429a:	4824      	ldr	r0, [pc, #144]	; (800432c <L6474_Board_GpioInit+0x16c>)
 800429c:	f002 fe38 	bl	8006f10 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 80042a0:	2000      	movs	r0, #0
 80042a2:	f000 f949 	bl	8004538 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d025      	beq.n	80042f8 <L6474_Board_GpioInit+0x138>
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	dc32      	bgt.n	8004316 <L6474_Board_GpioInit+0x156>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <L6474_Board_GpioInit+0xfa>
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d010      	beq.n	80042da <L6474_Board_GpioInit+0x11a>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 80042b8:	e02d      	b.n	8004316 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 80042ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042be:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042c0:	2301      	movs	r3, #1
 80042c2:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80042c8:	2301      	movs	r3, #1
 80042ca:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 80042cc:	f107 0314 	add.w	r3, r7, #20
 80042d0:	4619      	mov	r1, r3
 80042d2:	4816      	ldr	r0, [pc, #88]	; (800432c <L6474_Board_GpioInit+0x16c>)
 80042d4:	f002 fe1c 	bl	8006f10 <HAL_GPIO_Init>
      break;
 80042d8:	e01d      	b.n	8004316 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 80042da:	2320      	movs	r3, #32
 80042dc:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042de:	2301      	movs	r3, #1
 80042e0:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80042e6:	2301      	movs	r3, #1
 80042e8:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 80042ea:	f107 0314 	add.w	r3, r7, #20
 80042ee:	4619      	mov	r1, r3
 80042f0:	480d      	ldr	r0, [pc, #52]	; (8004328 <L6474_Board_GpioInit+0x168>)
 80042f2:	f002 fe0d 	bl	8006f10 <HAL_GPIO_Init>
      break;
 80042f6:	e00e      	b.n	8004316 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 80042f8:	2310      	movs	r3, #16
 80042fa:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042fc:	2301      	movs	r3, #1
 80042fe:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004300:	2300      	movs	r3, #0
 8004302:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004304:	2301      	movs	r3, #1
 8004306:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 8004308:	f107 0314 	add.w	r3, r7, #20
 800430c:	4619      	mov	r1, r3
 800430e:	4806      	ldr	r0, [pc, #24]	; (8004328 <L6474_Board_GpioInit+0x168>)
 8004310:	f002 fdfe 	bl	8006f10 <HAL_GPIO_Init>
        break;
 8004314:	bf00      	nop
}
 8004316:	bf00      	nop
 8004318:	3728      	adds	r7, #40	; 0x28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	58024400 	.word	0x58024400
 8004324:	58021c00 	.word	0x58021c00
 8004328:	58020400 	.word	0x58020400
 800432c:	58022000 	.word	0x58022000

08004330 <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800433a:	f004 f969 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 800433e:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	029b      	lsls	r3, r3, #10
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <L6474_Board_Pwm1SetFreq+0x48>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	62da      	str	r2, [r3, #44]	; 0x2c
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <L6474_Board_Pwm1SetFreq+0x48>)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <L6474_Board_Pwm1SetFreq+0x48>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	0852      	lsrs	r2, r2, #1
 8004364:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 8004366:	2100      	movs	r1, #0
 8004368:	4803      	ldr	r0, [pc, #12]	; (8004378 <L6474_Board_Pwm1SetFreq+0x48>)
 800436a:	f007 fc97 	bl	800bc9c <HAL_TIM_PWM_Start_IT>
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000728 	.word	0x20000728

0800437c <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8004386:	f004 f943 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 800438a:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	029b      	lsls	r3, r3, #10
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 800439a:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <L6474_Board_Pwm2SetFreq+0x48>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80043a2:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <L6474_Board_Pwm2SetFreq+0x48>)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <L6474_Board_Pwm2SetFreq+0x48>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	0852      	lsrs	r2, r2, #1
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 80043b2:	2104      	movs	r1, #4
 80043b4:	4803      	ldr	r0, [pc, #12]	; (80043c4 <L6474_Board_Pwm2SetFreq+0x48>)
 80043b6:	f007 fc71 	bl	800bc9c <HAL_TIM_PWM_Start_IT>
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000774 	.word	0x20000774

080043c8 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80043d2:	f004 f91d 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 80043d6:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	02db      	lsls	r3, r3, #11
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <L6474_Board_Pwm3SetFreq+0x48>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80043ee:	4a08      	ldr	r2, [pc, #32]	; (8004410 <L6474_Board_Pwm3SetFreq+0x48>)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <L6474_Board_Pwm3SetFreq+0x48>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	0852      	lsrs	r2, r2, #1
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 80043fe:	2108      	movs	r1, #8
 8004400:	4803      	ldr	r0, [pc, #12]	; (8004410 <L6474_Board_Pwm3SetFreq+0x48>)
 8004402:	f007 fc4b 	bl	800bc9c <HAL_TIM_PWM_Start_IT>
}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200007c0 	.word	0x200007c0

08004414 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	; 0x38
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d00a      	beq.n	800443a <L6474_Board_PwmInit+0x26>
 8004424:	2b02      	cmp	r3, #2
 8004426:	d011      	beq.n	800444c <L6474_Board_PwmInit+0x38>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 8004428:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <L6474_Board_PwmInit+0x9c>)
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 800442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004432:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 8004434:	2300      	movs	r3, #0
 8004436:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8004438:	e010      	b.n	800445c <L6474_Board_PwmInit+0x48>
    case  1:
      pHTim = &hTimPwm2;
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <L6474_Board_PwmInit+0xa0>)
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 800443e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004444:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 8004446:	2304      	movs	r3, #4
 8004448:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800444a:	e007      	b.n	800445c <L6474_Board_PwmInit+0x48>


    case 2:
      pHTim = &hTimPwm3;
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <L6474_Board_PwmInit+0xa4>)
 800444e:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 8004450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004452:	4a1a      	ldr	r2, [pc, #104]	; (80044bc <L6474_Board_PwmInit+0xa8>)
 8004454:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 8004456:	2308      	movs	r3, #8
 8004458:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800445a:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 800445c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004462:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 8004464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800446a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 8004470:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004472:	f007 fb25 	bl	800bac0 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004476:	2360      	movs	r3, #96	; 0x60
 8004478:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8004486:	f107 0314 	add.w	r3, r7, #20
 800448a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448c:	4619      	mov	r1, r3
 800448e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004490:	f007 fe7e 	bl	800c190 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004494:	2300      	movs	r3, #0
 8004496:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 800449c:	f107 0308 	add.w	r3, r7, #8
 80044a0:	4619      	mov	r1, r3
 80044a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044a4:	f008 fb46 	bl	800cb34 <HAL_TIMEx_MasterConfigSynchronization>
}
 80044a8:	bf00      	nop
 80044aa:	3738      	adds	r7, #56	; 0x38
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000728 	.word	0x20000728
 80044b4:	20000774 	.word	0x20000774
 80044b8:	200007c0 	.word	0x200007c0
 80044bc:	40000800 	.word	0x40000800

080044c0 <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d010      	beq.n	80044f2 <L6474_Board_PwmStop+0x32>
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	dc13      	bgt.n	80044fc <L6474_Board_PwmStop+0x3c>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <L6474_Board_PwmStop+0x1e>
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d005      	beq.n	80044e8 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 80044dc:	e00e      	b.n	80044fc <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 80044de:	2100      	movs	r1, #0
 80044e0:	4809      	ldr	r0, [pc, #36]	; (8004508 <L6474_Board_PwmStop+0x48>)
 80044e2:	f007 fb45 	bl	800bb70 <HAL_TIM_PWM_Stop>
      break;
 80044e6:	e00a      	b.n	80044fe <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 80044e8:	2104      	movs	r1, #4
 80044ea:	4808      	ldr	r0, [pc, #32]	; (800450c <L6474_Board_PwmStop+0x4c>)
 80044ec:	f007 fb40 	bl	800bb70 <HAL_TIM_PWM_Stop>
      break;
 80044f0:	e005      	b.n	80044fe <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 80044f2:	2108      	movs	r1, #8
 80044f4:	4806      	ldr	r0, [pc, #24]	; (8004510 <L6474_Board_PwmStop+0x50>)
 80044f6:	f007 fb3b 	bl	800bb70 <HAL_TIM_PWM_Stop>
      break;
 80044fa:	e000      	b.n	80044fe <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 80044fc:	bf00      	nop
  }
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000728 	.word	0x20000728
 800450c:	20000774 	.word	0x20000774
 8004510:	200007c0 	.word	0x200007c0

08004514 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 800451e:	2201      	movs	r2, #1
 8004520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004524:	4803      	ldr	r0, [pc, #12]	; (8004534 <L6474_Board_ReleaseReset+0x20>)
 8004526:	f002 fea3 	bl	8007270 <HAL_GPIO_WritePin>
}
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	58022000 	.word	0x58022000

08004538 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 8004542:	2200      	movs	r2, #0
 8004544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004548:	4803      	ldr	r0, [pc, #12]	; (8004558 <L6474_Board_Reset+0x20>)
 800454a:	f002 fe91 	bl	8007270 <HAL_GPIO_WritePin>
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	58022000 	.word	0x58022000

0800455c <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	460a      	mov	r2, r1
 8004566:	71fb      	strb	r3, [r7, #7]
 8004568:	4613      	mov	r3, r2
 800456a:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d006      	beq.n	8004580 <L6474_Board_SetDirectionGpio+0x24>
 8004572:	2b02      	cmp	r3, #2
 8004574:	dc1a      	bgt.n	80045ac <L6474_Board_SetDirectionGpio+0x50>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <L6474_Board_SetDirectionGpio+0x40>
 800457a:	2b01      	cmp	r3, #1
 800457c:	d007      	beq.n	800458e <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 800457e:	e015      	b.n	80045ac <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 8004580:	79bb      	ldrb	r3, [r7, #6]
 8004582:	461a      	mov	r2, r3
 8004584:	2110      	movs	r1, #16
 8004586:	480b      	ldr	r0, [pc, #44]	; (80045b4 <L6474_Board_SetDirectionGpio+0x58>)
 8004588:	f002 fe72 	bl	8007270 <HAL_GPIO_WritePin>
      break;
 800458c:	e00e      	b.n	80045ac <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 800458e:	79bb      	ldrb	r3, [r7, #6]
 8004590:	461a      	mov	r2, r3
 8004592:	2120      	movs	r1, #32
 8004594:	4807      	ldr	r0, [pc, #28]	; (80045b4 <L6474_Board_SetDirectionGpio+0x58>)
 8004596:	f002 fe6b 	bl	8007270 <HAL_GPIO_WritePin>
      break;
 800459a:	e007      	b.n	80045ac <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 800459c:	79bb      	ldrb	r3, [r7, #6]
 800459e:	461a      	mov	r2, r3
 80045a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045a4:	4804      	ldr	r0, [pc, #16]	; (80045b8 <L6474_Board_SetDirectionGpio+0x5c>)
 80045a6:	f002 fe63 	bl	8007270 <HAL_GPIO_WritePin>
      break;
 80045aa:	bf00      	nop
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	58020400 	.word	0x58020400
 80045b8:	58022000 	.word	0x58022000

080045bc <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 80045c2:	4b19      	ldr	r3, [pc, #100]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <L6474_Board_SpiInit+0x70>)
 80045c6:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 80045c8:	4b17      	ldr	r3, [pc, #92]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 80045ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045ce:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80045d0:	4b15      	ldr	r3, [pc, #84]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 80045d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045dc:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 80045e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045e4:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 80045ee:	2207      	movs	r2, #7
 80045f0:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 80045f4:	2207      	movs	r2, #7
 80045f6:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 8004600:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004604:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8004606:	4b08      	ldr	r3, [pc, #32]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 8004608:	2200      	movs	r2, #0
 800460a:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 800460e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004612:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8004614:	4804      	ldr	r0, [pc, #16]	; (8004628 <L6474_Board_SpiInit+0x6c>)
 8004616:	f006 fc9f 	bl	800af58 <HAL_SPI_Init>
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 800461e:	79fb      	ldrb	r3, [r7, #7]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	200006a0 	.word	0x200006a0
 800462c:	40003800 	.word	0x40003800

08004630 <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	4613      	mov	r3, r2
 800463c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 800463e:	2200      	movs	r2, #0
 8004640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004644:	4816      	ldr	r0, [pc, #88]	; (80046a0 <L6474_Board_SpiWriteBytes+0x70>)
 8004646:	f002 fe13 	bl	8007270 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e016      	b.n	800467e <L6474_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 8004650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2301      	movs	r3, #1
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	4811      	ldr	r0, [pc, #68]	; (80046a4 <L6474_Board_SpiWriteBytes+0x74>)
 800465e:	f006 fd81 	bl	800b164 <HAL_SPI_TransmitReceive>
 8004662:	4603      	mov	r3, r0
 8004664:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10d      	bne.n	8004688 <L6474_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	3301      	adds	r3, #1
 8004676:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	3301      	adds	r3, #1
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	429a      	cmp	r2, r3
 8004684:	d3e4      	bcc.n	8004650 <L6474_Board_SpiWriteBytes+0x20>
 8004686:	e000      	b.n	800468a <L6474_Board_SpiWriteBytes+0x5a>
      break;
 8004688:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 800468a:	2201      	movs	r2, #1
 800468c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004690:	4803      	ldr	r0, [pc, #12]	; (80046a0 <L6474_Board_SpiWriteBytes+0x70>)
 8004692:	f002 fded 	bl	8007270 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8004696:	7dfb      	ldrb	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	58020400 	.word	0x58020400
 80046a4:	200006a0 	.word	0x200006a0

080046a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80046a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80046ac:	f7ff fb56 	bl	8003d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046b0:	480c      	ldr	r0, [pc, #48]	; (80046e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046b2:	490d      	ldr	r1, [pc, #52]	; (80046e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046b4:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046b8:	e002      	b.n	80046c0 <LoopCopyDataInit>

080046ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046be:	3304      	adds	r3, #4

080046c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046c4:	d3f9      	bcc.n	80046ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046c8:	4c0a      	ldr	r4, [pc, #40]	; (80046f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046cc:	e001      	b.n	80046d2 <LoopFillZerobss>

080046ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046d0:	3204      	adds	r2, #4

080046d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046d4:	d3fb      	bcc.n	80046ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046d6:	f025 f93d 	bl	8029954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046da:	f7fe ff55 	bl	8003588 <main>
  bx  lr
 80046de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046e8:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80046ec:	080479e0 	.word	0x080479e0
  ldr r2, =_sbss
 80046f0:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80046f4:	20005be8 	.word	0x20005be8

080046f8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046f8:	e7fe      	b.n	80046f8 <ADC_IRQHandler>
	...

080046fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004702:	2003      	movs	r0, #3
 8004704:	f002 f9d5 	bl	8006ab2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004708:	f003 ff82 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b15      	ldr	r3, [pc, #84]	; (8004764 <HAL_Init+0x68>)
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	4913      	ldr	r1, [pc, #76]	; (8004768 <HAL_Init+0x6c>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
 8004724:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <HAL_Init+0x68>)
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	4a0e      	ldr	r2, [pc, #56]	; (8004768 <HAL_Init+0x6c>)
 8004730:	5cd3      	ldrb	r3, [r2, r3]
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
 800473c:	4a0b      	ldr	r2, [pc, #44]	; (800476c <HAL_Init+0x70>)
 800473e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004740:	4a0b      	ldr	r2, [pc, #44]	; (8004770 <HAL_Init+0x74>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004746:	2000      	movs	r0, #0
 8004748:	f7ff f9a2 	bl	8003a90 <HAL_InitTick>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e002      	b.n	800475c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004756:	f7ff f97d 	bl	8003a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	58024400 	.word	0x58024400
 8004768:	0802b604 	.word	0x0802b604
 800476c:	20000130 	.word	0x20000130
 8004770:	2000012c 	.word	0x2000012c

08004774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_IncTick+0x20>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_IncTick+0x24>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4413      	add	r3, r2
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_IncTick+0x24>)
 8004786:	6013      	str	r3, [r2, #0]
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000138 	.word	0x20000138
 8004798:	2000080c 	.word	0x2000080c

0800479c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return uwTick;
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_GetTick+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	2000080c 	.word	0x2000080c

080047b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7ff ffee 	bl	800479c <HAL_GetTick>
 80047c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d005      	beq.n	80047da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_Delay+0x44>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047da:	bf00      	nop
 80047dc:	f7ff ffde 	bl	800479c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d8f7      	bhi.n	80047dc <HAL_Delay+0x28>
  {
  }
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000138 	.word	0x20000138

080047fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004800:	4b03      	ldr	r3, [pc, #12]	; (8004810 <HAL_GetREVID+0x14>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	0c1b      	lsrs	r3, r3, #16
}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	5c001000 	.word	0x5c001000

08004814 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	609a      	str	r2, [r3, #8]
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3360      	adds	r3, #96	; 0x60
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	430b      	orrs	r3, r1
 80048aa:	431a      	orrs	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 031f 	and.w	r3, r3, #31
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	fa01 f303 	lsl.w	r3, r1, r3
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	611a      	str	r2, [r3, #16]
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b087      	sub	sp, #28
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3360      	adds	r3, #96	; 0x60
 80048fe:	461a      	mov	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	431a      	orrs	r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	601a      	str	r2, [r3, #0]
  }
}
 8004918:	bf00      	nop
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800494a:	b480      	push	{r7}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3330      	adds	r3, #48	; 0x30
 800495a:	461a      	mov	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	4413      	add	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	211f      	movs	r1, #31
 8004976:	fa01 f303 	lsl.w	r3, r1, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	401a      	ands	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0e9b      	lsrs	r3, r3, #26
 8004982:	f003 011f 	and.w	r1, r3, #31
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	431a      	orrs	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ae:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3314      	adds	r3, #20
 80049d8:	461a      	mov	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	0e5b      	lsrs	r3, r3, #25
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	4413      	add	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	0d1b      	lsrs	r3, r3, #20
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2107      	movs	r1, #7
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	43db      	mvns	r3, r3
 80049fc:	401a      	ands	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	0d1b      	lsrs	r3, r3, #20
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f003 0318 	and.w	r3, r3, #24
 8004a42:	4908      	ldr	r1, [pc, #32]	; (8004a64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a44:	40d9      	lsrs	r1, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	400b      	ands	r3, r1
 8004a4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	000fffff 	.word	0x000fffff

08004a68 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	330c      	adds	r3, #12
 8004a78:	4618      	mov	r0, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	0d1b      	lsrs	r3, r3, #20
 8004a7e:	f003 0103 	and.w	r1, r3, #3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0201 	and.w	r2, r3, #1
 8004a88:	4613      	mov	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4403      	add	r3, r0
 8004a96:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8004aa0:	400b      	ands	r3, r1
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	400b      	ands	r3, r1
 8004aac:	431a      	orrs	r2, r3
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	7dcfffff 	.word	0x7dcfffff

08004ac4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 031f 	and.w	r3, r3, #31
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <LL_ADC_DisableDeepPowerDown+0x20>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6093      	str	r3, [r2, #8]
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	5fffffc0 	.word	0x5fffffc0

08004b20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b34:	d101      	bne.n	8004b3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <LL_ADC_EnableInternalRegulator+0x24>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	6fffffc0 	.word	0x6fffffc0

08004b70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b84:	d101      	bne.n	8004b8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <LL_ADC_Enable+0x24>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	f043 0201 	orr.w	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	7fffffc0 	.word	0x7fffffc0

08004bc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <LL_ADC_IsEnabled+0x18>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <LL_ADC_IsEnabled+0x1a>
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <LL_ADC_REG_StartConversion+0x24>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	f043 0204 	orr.w	r2, r3, #4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	7fffffc0 	.word	0x7fffffc0

08004c10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d101      	bne.n	8004c28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d101      	bne.n	8004c4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2280      	movs	r2, #128	; 0x80
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c84:	601a      	str	r2, [r3, #0]
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ca0:	601a      	str	r2, [r3, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	605a      	str	r2, [r3, #4]
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	605a      	str	r2, [r3, #4]
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	605a      	str	r2, [r3, #4]
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	605a      	str	r2, [r3, #4]
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	605a      	str	r2, [r3, #4]
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	605a      	str	r2, [r3, #4]
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d70:	b590      	push	{r4, r7, lr}
 8004d72:	b089      	sub	sp, #36	; 0x24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e18f      	b.n	80050aa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fb fcff 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff feb5 	bl	8004b20 <LL_ADC_IsDeepPowerDownEnabled>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fe9b 	bl	8004afc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fed0 	bl	8004b70 <LL_ADC_IsInternalRegulatorEnabled>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d114      	bne.n	8004e00 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff feb4 	bl	8004b48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004de0:	4b87      	ldr	r3, [pc, #540]	; (8005000 <HAL_ADC_Init+0x290>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	099b      	lsrs	r3, r3, #6
 8004de6:	4a87      	ldr	r2, [pc, #540]	; (8005004 <HAL_ADC_Init+0x294>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	099b      	lsrs	r3, r3, #6
 8004dee:	3301      	adds	r3, #1
 8004df0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004df2:	e002      	b.n	8004dfa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f9      	bne.n	8004df4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff feb3 	bl	8004b70 <LL_ADC_IsInternalRegulatorEnabled>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10d      	bne.n	8004e2c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	f043 0210 	orr.w	r2, r3, #16
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	f043 0201 	orr.w	r2, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff feed 	bl	8004c10 <LL_ADC_REG_IsConversionOngoing>
 8004e36:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 8129 	bne.w	8005098 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f040 8125 	bne.w	8005098 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004e56:	f043 0202 	orr.w	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff feac 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d136      	bne.n	8004edc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a65      	ldr	r2, [pc, #404]	; (8005008 <HAL_ADC_Init+0x298>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_ADC_Init+0x112>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a63      	ldr	r2, [pc, #396]	; (800500c <HAL_ADC_Init+0x29c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d10e      	bne.n	8004ea0 <HAL_ADC_Init+0x130>
 8004e82:	4861      	ldr	r0, [pc, #388]	; (8005008 <HAL_ADC_Init+0x298>)
 8004e84:	f7ff fe9c 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004e88:	4604      	mov	r4, r0
 8004e8a:	4860      	ldr	r0, [pc, #384]	; (800500c <HAL_ADC_Init+0x29c>)
 8004e8c:	f7ff fe98 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4323      	orrs	r3, r4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e008      	b.n	8004eb2 <HAL_ADC_Init+0x142>
 8004ea0:	485b      	ldr	r0, [pc, #364]	; (8005010 <HAL_ADC_Init+0x2a0>)
 8004ea2:	f7ff fe8d 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d012      	beq.n	8004edc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a53      	ldr	r2, [pc, #332]	; (8005008 <HAL_ADC_Init+0x298>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_ADC_Init+0x15a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a51      	ldr	r2, [pc, #324]	; (800500c <HAL_ADC_Init+0x29c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d101      	bne.n	8004ece <HAL_ADC_Init+0x15e>
 8004eca:	4a52      	ldr	r2, [pc, #328]	; (8005014 <HAL_ADC_Init+0x2a4>)
 8004ecc:	e000      	b.n	8004ed0 <HAL_ADC_Init+0x160>
 8004ece:	4a52      	ldr	r2, [pc, #328]	; (8005018 <HAL_ADC_Init+0x2a8>)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f7ff fc9c 	bl	8004814 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004edc:	f7ff fc8e 	bl	80047fc <HAL_GetREVID>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d914      	bls.n	8004f14 <HAL_ADC_Init+0x1a4>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d110      	bne.n	8004f14 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	7d5b      	ldrb	r3, [r3, #21]
 8004ef6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004efc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004f02:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	7f1b      	ldrb	r3, [r3, #28]
 8004f08:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004f0a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004f0c:	f043 030c 	orr.w	r3, r3, #12
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e00d      	b.n	8004f30 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	7d5b      	ldrb	r3, [r3, #21]
 8004f18:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004f1e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004f24:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	7f1b      	ldrb	r3, [r3, #28]
 8004f2a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7f1b      	ldrb	r3, [r3, #28]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	045b      	lsls	r3, r3, #17
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	4b2c      	ldr	r3, [pc, #176]	; (800501c <HAL_ADC_Init+0x2ac>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	69b9      	ldr	r1, [r7, #24]
 8004f72:	430b      	orrs	r3, r1
 8004f74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fe48 	bl	8004c10 <LL_ADC_REG_IsConversionOngoing>
 8004f80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fe55 	bl	8004c36 <LL_ADC_INJ_IsConversionOngoing>
 8004f8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d15f      	bne.n	8005054 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d15c      	bne.n	8005054 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7d1b      	ldrb	r3, [r3, #20]
 8004f9e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <HAL_ADC_Init+0x2b0>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	69b9      	ldr	r1, [r7, #24]
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d130      	bne.n	8005028 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	4b14      	ldr	r3, [pc, #80]	; (8005024 <HAL_ADC_Init+0x2b4>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fda:	3a01      	subs	r2, #1
 8004fdc:	0411      	lsls	r1, r2, #16
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fe2:	4311      	orrs	r1, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fe8:	4311      	orrs	r1, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	611a      	str	r2, [r3, #16]
 8004ffc:	e01c      	b.n	8005038 <HAL_ADC_Init+0x2c8>
 8004ffe:	bf00      	nop
 8005000:	2000012c 	.word	0x2000012c
 8005004:	053e2d63 	.word	0x053e2d63
 8005008:	40022000 	.word	0x40022000
 800500c:	40022100 	.word	0x40022100
 8005010:	58026000 	.word	0x58026000
 8005014:	40022300 	.word	0x40022300
 8005018:	58026300 	.word	0x58026300
 800501c:	fff0c003 	.word	0xfff0c003
 8005020:	ffffbffc 	.word	0xffffbffc
 8005024:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0201 	bic.w	r2, r2, #1
 8005036:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 fb46 	bl	80066e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d10c      	bne.n	8005076 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	f023 010f 	bic.w	r1, r3, #15
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	1e5a      	subs	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
 8005074:	e007      	b.n	8005086 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 020f 	bic.w	r2, r2, #15
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	f043 0201 	orr.w	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	655a      	str	r2, [r3, #84]	; 0x54
 8005096:	e007      	b.n	80050a8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509c:	f043 0210 	orr.w	r2, r3, #16
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80050a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3724      	adds	r7, #36	; 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd90      	pop	{r4, r7, pc}
 80050b2:	bf00      	nop

080050b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a5c      	ldr	r2, [pc, #368]	; (8005234 <HAL_ADC_Start+0x180>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_ADC_Start+0x1c>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a5b      	ldr	r2, [pc, #364]	; (8005238 <HAL_ADC_Start+0x184>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <HAL_ADC_Start+0x20>
 80050d0:	4b5a      	ldr	r3, [pc, #360]	; (800523c <HAL_ADC_Start+0x188>)
 80050d2:	e000      	b.n	80050d6 <HAL_ADC_Start+0x22>
 80050d4:	4b5a      	ldr	r3, [pc, #360]	; (8005240 <HAL_ADC_Start+0x18c>)
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fcf4 	bl	8004ac4 <LL_ADC_GetMultimode>
 80050dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fd94 	bl	8004c10 <LL_ADC_REG_IsConversionOngoing>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f040 809a 	bne.w	8005224 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_ADC_Start+0x4a>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e095      	b.n	800522a <HAL_ADC_Start+0x176>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f001 fa60 	bl	80065cc <ADC_Enable>
 800510c:	4603      	mov	r3, r0
 800510e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f040 8081 	bne.w	800521a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511c:	4b49      	ldr	r3, [pc, #292]	; (8005244 <HAL_ADC_Start+0x190>)
 800511e:	4013      	ands	r3, r2
 8005120:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a42      	ldr	r2, [pc, #264]	; (8005238 <HAL_ADC_Start+0x184>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d002      	beq.n	8005138 <HAL_ADC_Start+0x84>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	e000      	b.n	800513a <HAL_ADC_Start+0x86>
 8005138:	4b3e      	ldr	r3, [pc, #248]	; (8005234 <HAL_ADC_Start+0x180>)
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	4293      	cmp	r3, r2
 8005140:	d002      	beq.n	8005148 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005160:	d106      	bne.n	8005170 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	f023 0206 	bic.w	r2, r3, #6
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	659a      	str	r2, [r3, #88]	; 0x58
 800516e:	e002      	b.n	8005176 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	221c      	movs	r2, #28
 800517c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a2b      	ldr	r2, [pc, #172]	; (8005238 <HAL_ADC_Start+0x184>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d002      	beq.n	8005196 <HAL_ADC_Start+0xe2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	e000      	b.n	8005198 <HAL_ADC_Start+0xe4>
 8005196:	4b27      	ldr	r3, [pc, #156]	; (8005234 <HAL_ADC_Start+0x180>)
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	4293      	cmp	r3, r2
 800519e:	d008      	beq.n	80051b2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d002      	beq.n	80051b2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b09      	cmp	r3, #9
 80051b0:	d114      	bne.n	80051dc <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d007      	beq.n	80051d0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fd07 	bl	8004be8 <LL_ADC_REG_StartConversion>
 80051da:	e025      	b.n	8005228 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a12      	ldr	r2, [pc, #72]	; (8005238 <HAL_ADC_Start+0x184>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d002      	beq.n	80051f8 <HAL_ADC_Start+0x144>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	e000      	b.n	80051fa <HAL_ADC_Start+0x146>
 80051f8:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <HAL_ADC_Start+0x180>)
 80051fa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00f      	beq.n	8005228 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005210:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	655a      	str	r2, [r3, #84]	; 0x54
 8005218:	e006      	b.n	8005228 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005222:	e001      	b.n	8005228 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005224:	2302      	movs	r3, #2
 8005226:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005228:	7dfb      	ldrb	r3, [r7, #23]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40022000 	.word	0x40022000
 8005238:	40022100 	.word	0x40022100
 800523c:	40022300 	.word	0x40022300
 8005240:	58026300 	.word	0x58026300
 8005244:	fffff0fe 	.word	0xfffff0fe

08005248 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a72      	ldr	r2, [pc, #456]	; (8005420 <HAL_ADC_PollForConversion+0x1d8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_ADC_PollForConversion+0x1e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a70      	ldr	r2, [pc, #448]	; (8005424 <HAL_ADC_PollForConversion+0x1dc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d101      	bne.n	800526a <HAL_ADC_PollForConversion+0x22>
 8005266:	4b70      	ldr	r3, [pc, #448]	; (8005428 <HAL_ADC_PollForConversion+0x1e0>)
 8005268:	e000      	b.n	800526c <HAL_ADC_PollForConversion+0x24>
 800526a:	4b70      	ldr	r3, [pc, #448]	; (800542c <HAL_ADC_PollForConversion+0x1e4>)
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fc29 	bl	8004ac4 <LL_ADC_GetMultimode>
 8005272:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d102      	bne.n	8005282 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800527c:	2308      	movs	r3, #8
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e037      	b.n	80052f2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b05      	cmp	r3, #5
 800528c:	d002      	beq.n	8005294 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b09      	cmp	r3, #9
 8005292:	d111      	bne.n	80052b8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a6:	f043 0220 	orr.w	r2, r3, #32
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e0b1      	b.n	8005416 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80052b2:	2304      	movs	r3, #4
 80052b4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80052b6:	e01c      	b.n	80052f2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a58      	ldr	r2, [pc, #352]	; (8005420 <HAL_ADC_PollForConversion+0x1d8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_ADC_PollForConversion+0x84>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a57      	ldr	r2, [pc, #348]	; (8005424 <HAL_ADC_PollForConversion+0x1dc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d101      	bne.n	80052d0 <HAL_ADC_PollForConversion+0x88>
 80052cc:	4b56      	ldr	r3, [pc, #344]	; (8005428 <HAL_ADC_PollForConversion+0x1e0>)
 80052ce:	e000      	b.n	80052d2 <HAL_ADC_PollForConversion+0x8a>
 80052d0:	4b56      	ldr	r3, [pc, #344]	; (800542c <HAL_ADC_PollForConversion+0x1e4>)
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff fc04 	bl	8004ae0 <LL_ADC_GetMultiDMATransfer>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e093      	b.n	8005416 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80052ee:	2304      	movs	r3, #4
 80052f0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80052f2:	f7ff fa53 	bl	800479c <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80052f8:	e021      	b.n	800533e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d01d      	beq.n	800533e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005302:	f7ff fa4b 	bl	800479c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <HAL_ADC_PollForConversion+0xd0>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d112      	bne.n	800533e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10b      	bne.n	800533e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532a:	f043 0204 	orr.w	r2, r3, #4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e06b      	b.n	8005416 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0d6      	beq.n	80052fa <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fae1 	bl	8004924 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01c      	beq.n	80053a2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	7d5b      	ldrb	r3, [r3, #21]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d118      	bne.n	80053a2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b08      	cmp	r3, #8
 800537c:	d111      	bne.n	80053a2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d105      	bne.n	80053a2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539a:	f043 0201 	orr.w	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1f      	ldr	r2, [pc, #124]	; (8005424 <HAL_ADC_PollForConversion+0x1dc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d002      	beq.n	80053b2 <HAL_ADC_PollForConversion+0x16a>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	e000      	b.n	80053b4 <HAL_ADC_PollForConversion+0x16c>
 80053b2:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <HAL_ADC_PollForConversion+0x1d8>)
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d008      	beq.n	80053ce <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b05      	cmp	r3, #5
 80053c6:	d002      	beq.n	80053ce <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2b09      	cmp	r3, #9
 80053cc:	d104      	bne.n	80053d8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	e00c      	b.n	80053f2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a11      	ldr	r2, [pc, #68]	; (8005424 <HAL_ADC_PollForConversion+0x1dc>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d002      	beq.n	80053e8 <HAL_ADC_PollForConversion+0x1a0>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	e000      	b.n	80053ea <HAL_ADC_PollForConversion+0x1a2>
 80053e8:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <HAL_ADC_PollForConversion+0x1d8>)
 80053ea:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d104      	bne.n	8005402 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2208      	movs	r2, #8
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	e008      	b.n	8005414 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	220c      	movs	r2, #12
 8005412:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40022000 	.word	0x40022000
 8005424:	40022100 	.word	0x40022100
 8005428:	40022300 	.word	0x40022300
 800542c:	58026300 	.word	0x58026300

08005430 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08a      	sub	sp, #40	; 0x28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005454:	2300      	movs	r3, #0
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a87      	ldr	r2, [pc, #540]	; (800568c <HAL_ADC_IRQHandler+0x240>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_ADC_IRQHandler+0x30>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a86      	ldr	r2, [pc, #536]	; (8005690 <HAL_ADC_IRQHandler+0x244>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d101      	bne.n	8005480 <HAL_ADC_IRQHandler+0x34>
 800547c:	4b85      	ldr	r3, [pc, #532]	; (8005694 <HAL_ADC_IRQHandler+0x248>)
 800547e:	e000      	b.n	8005482 <HAL_ADC_IRQHandler+0x36>
 8005480:	4b85      	ldr	r3, [pc, #532]	; (8005698 <HAL_ADC_IRQHandler+0x24c>)
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff fb1e 	bl	8004ac4 <LL_ADC_GetMultimode>
 8005488:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d017      	beq.n	80054c4 <HAL_ADC_IRQHandler+0x78>
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d012      	beq.n	80054c4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f001 fa44 	bl	8006944 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2202      	movs	r2, #2
 80054c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <HAL_ADC_IRQHandler+0x8c>
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8083 	beq.w	80055ea <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d07d      	beq.n	80055ea <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d105      	bne.n	8005506 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff fa0a 	bl	8004924 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d062      	beq.n	80055dc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a5d      	ldr	r2, [pc, #372]	; (8005690 <HAL_ADC_IRQHandler+0x244>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d002      	beq.n	8005526 <HAL_ADC_IRQHandler+0xda>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	e000      	b.n	8005528 <HAL_ADC_IRQHandler+0xdc>
 8005526:	4b59      	ldr	r3, [pc, #356]	; (800568c <HAL_ADC_IRQHandler+0x240>)
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	4293      	cmp	r3, r2
 800552e:	d008      	beq.n	8005542 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b05      	cmp	r3, #5
 800553a:	d002      	beq.n	8005542 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2b09      	cmp	r3, #9
 8005540:	d104      	bne.n	800554c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	623b      	str	r3, [r7, #32]
 800554a:	e00c      	b.n	8005566 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a4f      	ldr	r2, [pc, #316]	; (8005690 <HAL_ADC_IRQHandler+0x244>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d002      	beq.n	800555c <HAL_ADC_IRQHandler+0x110>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	e000      	b.n	800555e <HAL_ADC_IRQHandler+0x112>
 800555c:	4b4b      	ldr	r3, [pc, #300]	; (800568c <HAL_ADC_IRQHandler+0x240>)
 800555e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d135      	bne.n	80055dc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b08      	cmp	r3, #8
 800557c:	d12e      	bne.n	80055dc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fb44 	bl	8004c10 <LL_ADC_REG_IsConversionOngoing>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d11a      	bne.n	80055c4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 020c 	bic.w	r2, r2, #12
 800559c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d112      	bne.n	80055dc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f043 0201 	orr.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
 80055c2:	e00b      	b.n	80055dc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c8:	f043 0210 	orr.w	r2, r3, #16
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	f043 0201 	orr.w	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f96f 	bl	80058c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	220c      	movs	r2, #12
 80055e8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <HAL_ADC_IRQHandler+0x1b2>
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a0 	beq.w	800574a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 809a 	beq.w	800574a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b00      	cmp	r3, #0
 8005620:	d105      	bne.n	800562e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff f9b5 	bl	80049a2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005638:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff f970 	bl	8004924 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005644:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a11      	ldr	r2, [pc, #68]	; (8005690 <HAL_ADC_IRQHandler+0x244>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d002      	beq.n	8005656 <HAL_ADC_IRQHandler+0x20a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	e000      	b.n	8005658 <HAL_ADC_IRQHandler+0x20c>
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <HAL_ADC_IRQHandler+0x240>)
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	4293      	cmp	r3, r2
 800565e:	d008      	beq.n	8005672 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b06      	cmp	r3, #6
 800566a:	d002      	beq.n	8005672 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b07      	cmp	r3, #7
 8005670:	d104      	bne.n	800567c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	623b      	str	r3, [r7, #32]
 800567a:	e014      	b.n	80056a6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a03      	ldr	r2, [pc, #12]	; (8005690 <HAL_ADC_IRQHandler+0x244>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00a      	beq.n	800569c <HAL_ADC_IRQHandler+0x250>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	e008      	b.n	800569e <HAL_ADC_IRQHandler+0x252>
 800568c:	40022000 	.word	0x40022000
 8005690:	40022100 	.word	0x40022100
 8005694:	40022300 	.word	0x40022300
 8005698:	58026300 	.word	0x58026300
 800569c:	4b84      	ldr	r3, [pc, #528]	; (80058b0 <HAL_ADC_IRQHandler+0x464>)
 800569e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d047      	beq.n	800573c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_ADC_IRQHandler+0x27a>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d03f      	beq.n	800573c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d13a      	bne.n	800573c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b40      	cmp	r3, #64	; 0x40
 80056d2:	d133      	bne.n	800573c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d12e      	bne.n	800573c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff faa7 	bl	8004c36 <LL_ADC_INJ_IsConversionOngoing>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d11a      	bne.n	8005724 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056fc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d112      	bne.n	800573c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	f043 0201 	orr.w	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	655a      	str	r2, [r3, #84]	; 0x54
 8005722:	e00b      	b.n	800573c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005728:	f043 0210 	orr.w	r2, r3, #16
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005734:	f043 0201 	orr.w	r2, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 f8d9 	bl	80068f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2260      	movs	r2, #96	; 0x60
 8005748:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005750:	2b00      	cmp	r3, #0
 8005752:	d011      	beq.n	8005778 <HAL_ADC_IRQHandler+0x32c>
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005762:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fd ffc6 	bl	80036fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2280      	movs	r2, #128	; 0x80
 8005776:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d012      	beq.n	80057a8 <HAL_ADC_IRQHandler+0x35c>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00d      	beq.n	80057a8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005790:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 f8bf 	bl	800691c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d012      	beq.n	80057d8 <HAL_ADC_IRQHandler+0x38c>
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f001 f8b1 	bl	8006930 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f003 0310 	and.w	r3, r3, #16
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d043      	beq.n	800586a <HAL_ADC_IRQHandler+0x41e>
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d03e      	beq.n	800586a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80057f4:	2301      	movs	r3, #1
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
 80057f8:	e021      	b.n	800583e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d015      	beq.n	800582c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a2a      	ldr	r2, [pc, #168]	; (80058b0 <HAL_ADC_IRQHandler+0x464>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_ADC_IRQHandler+0x3c8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a29      	ldr	r2, [pc, #164]	; (80058b4 <HAL_ADC_IRQHandler+0x468>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d101      	bne.n	8005818 <HAL_ADC_IRQHandler+0x3cc>
 8005814:	4b28      	ldr	r3, [pc, #160]	; (80058b8 <HAL_ADC_IRQHandler+0x46c>)
 8005816:	e000      	b.n	800581a <HAL_ADC_IRQHandler+0x3ce>
 8005818:	4b28      	ldr	r3, [pc, #160]	; (80058bc <HAL_ADC_IRQHandler+0x470>)
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff f960 	bl	8004ae0 <LL_ADC_GetMultiDMATransfer>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005826:	2301      	movs	r3, #1
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
 800582a:	e008      	b.n	800583e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800583a:	2301      	movs	r3, #1
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	2b01      	cmp	r3, #1
 8005842:	d10e      	bne.n	8005862 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005848:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005854:	f043 0202 	orr.w	r2, r3, #2
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f839 	bl	80058d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2210      	movs	r2, #16
 8005868:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005870:	2b00      	cmp	r3, #0
 8005872:	d018      	beq.n	80058a6 <HAL_ADC_IRQHandler+0x45a>
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587a:	2b00      	cmp	r3, #0
 800587c:	d013      	beq.n	80058a6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588e:	f043 0208 	orr.w	r2, r3, #8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800589e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 f831 	bl	8006908 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80058a6:	bf00      	nop
 80058a8:	3728      	adds	r7, #40	; 0x28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40022000 	.word	0x40022000
 80058b4:	40022100 	.word	0x40022100
 80058b8:	40022300 	.word	0x40022300
 80058bc:	58026300 	.word	0x58026300

080058c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058e8:	b590      	push	{r4, r7, lr}
 80058ea:	b0a1      	sub	sp, #132	; 0x84
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	4a9d      	ldr	r2, [pc, #628]	; (8005b78 <HAL_ADC_ConfigChannel+0x290>)
 8005902:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_ADC_ConfigChannel+0x2a>
 800590e:	2302      	movs	r3, #2
 8005910:	e321      	b.n	8005f56 <HAL_ADC_ConfigChannel+0x66e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff f976 	bl	8004c10 <LL_ADC_REG_IsConversionOngoing>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 8306 	bne.w	8005f38 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005934:	2b00      	cmp	r3, #0
 8005936:	d108      	bne.n	800594a <HAL_ADC_ConfigChannel+0x62>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	0e9b      	lsrs	r3, r3, #26
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2201      	movs	r2, #1
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	e016      	b.n	8005978 <HAL_ADC_ConfigChannel+0x90>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005952:	fa93 f3a3 	rbit	r3, r3
 8005956:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800595a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800595c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005962:	2320      	movs	r3, #32
 8005964:	e003      	b.n	800596e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005968:	fab3 f383 	clz	r3, r3
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	2201      	movs	r2, #1
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	69d1      	ldr	r1, [r2, #28]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	430b      	orrs	r3, r1
 8005984:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6859      	ldr	r1, [r3, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7fe ffd9 	bl	800494a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f7ff f937 	bl	8004c10 <LL_ADC_REG_IsConversionOngoing>
 80059a2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff f944 	bl	8004c36 <LL_ADC_INJ_IsConversionOngoing>
 80059ae:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f040 80b3 	bne.w	8005b1e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f040 80af 	bne.w	8005b1e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	6819      	ldr	r1, [r3, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	461a      	mov	r2, r3
 80059ce:	f7fe fffb 	bl	80049c8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80059d2:	4b6a      	ldr	r3, [pc, #424]	; (8005b7c <HAL_ADC_ConfigChannel+0x294>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80059da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059de:	d10b      	bne.n	80059f8 <HAL_ADC_ConfigChannel+0x110>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695a      	ldr	r2, [r3, #20]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	e01d      	b.n	8005a34 <HAL_ADC_ConfigChannel+0x14c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10b      	bne.n	8005a1e <HAL_ADC_ConfigChannel+0x136>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	089b      	lsrs	r3, r3, #2
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	e00a      	b.n	8005a34 <HAL_ADC_ConfigChannel+0x14c>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695a      	ldr	r2, [r3, #20]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	089b      	lsrs	r3, r3, #2
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d027      	beq.n	8005a8e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6919      	ldr	r1, [r3, #16]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a4c:	f7fe ff16 	bl	800487c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6919      	ldr	r1, [r3, #16]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	7e5b      	ldrb	r3, [r3, #25]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d102      	bne.n	8005a66 <HAL_ADC_ConfigChannel+0x17e>
 8005a60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a64:	e000      	b.n	8005a68 <HAL_ADC_ConfigChannel+0x180>
 8005a66:	2300      	movs	r3, #0
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f7fe ff40 	bl	80048ee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6919      	ldr	r1, [r3, #16]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	7e1b      	ldrb	r3, [r3, #24]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d102      	bne.n	8005a84 <HAL_ADC_ConfigChannel+0x19c>
 8005a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a82:	e000      	b.n	8005a86 <HAL_ADC_ConfigChannel+0x19e>
 8005a84:	2300      	movs	r3, #0
 8005a86:	461a      	mov	r2, r3
 8005a88:	f7fe ff18 	bl	80048bc <LL_ADC_SetDataRightShift>
 8005a8c:	e047      	b.n	8005b1e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	069b      	lsls	r3, r3, #26
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d107      	bne.n	8005ab2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ab0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	069b      	lsls	r3, r3, #26
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d107      	bne.n	8005ad6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ad4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005adc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	069b      	lsls	r3, r3, #26
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d107      	bne.n	8005afa <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005af8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	069b      	lsls	r3, r3, #26
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d107      	bne.n	8005b1e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b1c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff f84c 	bl	8004bc0 <LL_ADC_IsEnabled>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f040 820d 	bne.w	8005f4a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6819      	ldr	r1, [r3, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f7fe ff6f 	bl	8004a20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <HAL_ADC_ConfigChannel+0x290>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	f040 8133 	bne.w	8005db4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d110      	bne.n	8005b80 <HAL_ADC_ConfigChannel+0x298>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	0e9b      	lsrs	r3, r3, #26
 8005b64:	3301      	adds	r3, #1
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	2b09      	cmp	r3, #9
 8005b6c:	bf94      	ite	ls
 8005b6e:	2301      	movls	r3, #1
 8005b70:	2300      	movhi	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	e01e      	b.n	8005bb4 <HAL_ADC_ConfigChannel+0x2cc>
 8005b76:	bf00      	nop
 8005b78:	47ff0000 	.word	0x47ff0000
 8005b7c:	5c001000 	.word	0x5c001000
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b88:	fa93 f3a3 	rbit	r3, r3
 8005b8c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005b98:	2320      	movs	r3, #32
 8005b9a:	e003      	b.n	8005ba4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b9e:	fab3 f383 	clz	r3, r3
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	f003 031f 	and.w	r3, r3, #31
 8005baa:	2b09      	cmp	r3, #9
 8005bac:	bf94      	ite	ls
 8005bae:	2301      	movls	r3, #1
 8005bb0:	2300      	movhi	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d079      	beq.n	8005cac <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d107      	bne.n	8005bd4 <HAL_ADC_ConfigChannel+0x2ec>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	0e9b      	lsrs	r3, r3, #26
 8005bca:	3301      	adds	r3, #1
 8005bcc:	069b      	lsls	r3, r3, #26
 8005bce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bd2:	e015      	b.n	8005c00 <HAL_ADC_ConfigChannel+0x318>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bdc:	fa93 f3a3 	rbit	r3, r3
 8005be0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005bec:	2320      	movs	r3, #32
 8005bee:	e003      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf2:	fab3 f383 	clz	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	069b      	lsls	r3, r3, #26
 8005bfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d109      	bne.n	8005c20 <HAL_ADC_ConfigChannel+0x338>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	0e9b      	lsrs	r3, r3, #26
 8005c12:	3301      	adds	r3, #1
 8005c14:	f003 031f 	and.w	r3, r3, #31
 8005c18:	2101      	movs	r1, #1
 8005c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1e:	e017      	b.n	8005c50 <HAL_ADC_ConfigChannel+0x368>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c28:	fa93 f3a3 	rbit	r3, r3
 8005c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c30:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005c38:	2320      	movs	r3, #32
 8005c3a:	e003      	b.n	8005c44 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3e:	fab3 f383 	clz	r3, r3
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	3301      	adds	r3, #1
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	ea42 0103 	orr.w	r1, r2, r3
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <HAL_ADC_ConfigChannel+0x38e>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	0e9b      	lsrs	r3, r3, #26
 8005c66:	3301      	adds	r3, #1
 8005c68:	f003 021f 	and.w	r2, r3, #31
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	4413      	add	r3, r2
 8005c72:	051b      	lsls	r3, r3, #20
 8005c74:	e018      	b.n	8005ca8 <HAL_ADC_ConfigChannel+0x3c0>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7e:	fa93 f3a3 	rbit	r3, r3
 8005c82:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005c8e:	2320      	movs	r3, #32
 8005c90:	e003      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c94:	fab3 f383 	clz	r3, r3
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	f003 021f 	and.w	r2, r3, #31
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	4413      	add	r3, r2
 8005ca6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	e07e      	b.n	8005daa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d107      	bne.n	8005cc8 <HAL_ADC_ConfigChannel+0x3e0>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	0e9b      	lsrs	r3, r3, #26
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	069b      	lsls	r3, r3, #26
 8005cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cc6:	e015      	b.n	8005cf4 <HAL_ADC_ConfigChannel+0x40c>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	fa93 f3a3 	rbit	r3, r3
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	e003      	b.n	8005cec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	fab3 f383 	clz	r3, r3
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	3301      	adds	r3, #1
 8005cee:	069b      	lsls	r3, r3, #26
 8005cf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d109      	bne.n	8005d14 <HAL_ADC_ConfigChannel+0x42c>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	0e9b      	lsrs	r3, r3, #26
 8005d06:	3301      	adds	r3, #1
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d12:	e017      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x45c>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	fa93 f3a3 	rbit	r3, r3
 8005d20:	61bb      	str	r3, [r7, #24]
  return result;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	e003      	b.n	8005d38 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	fab3 f383 	clz	r3, r3
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	3301      	adds	r3, #1
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	2101      	movs	r1, #1
 8005d40:	fa01 f303 	lsl.w	r3, r1, r3
 8005d44:	ea42 0103 	orr.w	r1, r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10d      	bne.n	8005d70 <HAL_ADC_ConfigChannel+0x488>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	0e9b      	lsrs	r3, r3, #26
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	f003 021f 	and.w	r2, r3, #31
 8005d60:	4613      	mov	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	4413      	add	r3, r2
 8005d66:	3b1e      	subs	r3, #30
 8005d68:	051b      	lsls	r3, r3, #20
 8005d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d6e:	e01b      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x4c0>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	fa93 f3a3 	rbit	r3, r3
 8005d7c:	60fb      	str	r3, [r7, #12]
  return result;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005d88:	2320      	movs	r3, #32
 8005d8a:	e003      	b.n	8005d94 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	fab3 f383 	clz	r3, r3
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	3301      	adds	r3, #1
 8005d96:	f003 021f 	and.w	r2, r3, #31
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	4413      	add	r3, r2
 8005da0:	3b1e      	subs	r3, #30
 8005da2:	051b      	lsls	r3, r3, #20
 8005da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005da8:	430b      	orrs	r3, r1
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	6892      	ldr	r2, [r2, #8]
 8005dae:	4619      	mov	r1, r3
 8005db0:	f7fe fe0a 	bl	80049c8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f280 80c6 	bge.w	8005f4a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a67      	ldr	r2, [pc, #412]	; (8005f60 <HAL_ADC_ConfigChannel+0x678>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d004      	beq.n	8005dd2 <HAL_ADC_ConfigChannel+0x4ea>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a65      	ldr	r2, [pc, #404]	; (8005f64 <HAL_ADC_ConfigChannel+0x67c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <HAL_ADC_ConfigChannel+0x4ee>
 8005dd2:	4b65      	ldr	r3, [pc, #404]	; (8005f68 <HAL_ADC_ConfigChannel+0x680>)
 8005dd4:	e000      	b.n	8005dd8 <HAL_ADC_ConfigChannel+0x4f0>
 8005dd6:	4b65      	ldr	r3, [pc, #404]	; (8005f6c <HAL_ADC_ConfigChannel+0x684>)
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe fd41 	bl	8004860 <LL_ADC_GetCommonPathInternalCh>
 8005dde:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a5e      	ldr	r2, [pc, #376]	; (8005f60 <HAL_ADC_ConfigChannel+0x678>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <HAL_ADC_ConfigChannel+0x50c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a5d      	ldr	r2, [pc, #372]	; (8005f64 <HAL_ADC_ConfigChannel+0x67c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d10e      	bne.n	8005e12 <HAL_ADC_ConfigChannel+0x52a>
 8005df4:	485a      	ldr	r0, [pc, #360]	; (8005f60 <HAL_ADC_ConfigChannel+0x678>)
 8005df6:	f7fe fee3 	bl	8004bc0 <LL_ADC_IsEnabled>
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	4859      	ldr	r0, [pc, #356]	; (8005f64 <HAL_ADC_ConfigChannel+0x67c>)
 8005dfe:	f7fe fedf 	bl	8004bc0 <LL_ADC_IsEnabled>
 8005e02:	4603      	mov	r3, r0
 8005e04:	4323      	orrs	r3, r4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bf0c      	ite	eq
 8005e0a:	2301      	moveq	r3, #1
 8005e0c:	2300      	movne	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	e008      	b.n	8005e24 <HAL_ADC_ConfigChannel+0x53c>
 8005e12:	4857      	ldr	r0, [pc, #348]	; (8005f70 <HAL_ADC_ConfigChannel+0x688>)
 8005e14:	f7fe fed4 	bl	8004bc0 <LL_ADC_IsEnabled>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	bf0c      	ite	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	2300      	movne	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d07d      	beq.n	8005f24 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a51      	ldr	r2, [pc, #324]	; (8005f74 <HAL_ADC_ConfigChannel+0x68c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d130      	bne.n	8005e94 <HAL_ADC_ConfigChannel+0x5ac>
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d12b      	bne.n	8005e94 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a4b      	ldr	r2, [pc, #300]	; (8005f70 <HAL_ADC_ConfigChannel+0x688>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	f040 8081 	bne.w	8005f4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a44      	ldr	r2, [pc, #272]	; (8005f60 <HAL_ADC_ConfigChannel+0x678>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <HAL_ADC_ConfigChannel+0x574>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a43      	ldr	r2, [pc, #268]	; (8005f64 <HAL_ADC_ConfigChannel+0x67c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d101      	bne.n	8005e60 <HAL_ADC_ConfigChannel+0x578>
 8005e5c:	4a42      	ldr	r2, [pc, #264]	; (8005f68 <HAL_ADC_ConfigChannel+0x680>)
 8005e5e:	e000      	b.n	8005e62 <HAL_ADC_ConfigChannel+0x57a>
 8005e60:	4a42      	ldr	r2, [pc, #264]	; (8005f6c <HAL_ADC_ConfigChannel+0x684>)
 8005e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f7fe fce5 	bl	800483a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e70:	4b41      	ldr	r3, [pc, #260]	; (8005f78 <HAL_ADC_ConfigChannel+0x690>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	099b      	lsrs	r3, r3, #6
 8005e76:	4a41      	ldr	r2, [pc, #260]	; (8005f7c <HAL_ADC_ConfigChannel+0x694>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	099b      	lsrs	r3, r3, #6
 8005e7e:	3301      	adds	r3, #1
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005e84:	e002      	b.n	8005e8c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f9      	bne.n	8005e86 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e92:	e05a      	b.n	8005f4a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a39      	ldr	r2, [pc, #228]	; (8005f80 <HAL_ADC_ConfigChannel+0x698>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d11e      	bne.n	8005edc <HAL_ADC_ConfigChannel+0x5f4>
 8005e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d119      	bne.n	8005edc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a30      	ldr	r2, [pc, #192]	; (8005f70 <HAL_ADC_ConfigChannel+0x688>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d14b      	bne.n	8005f4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <HAL_ADC_ConfigChannel+0x678>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_ADC_ConfigChannel+0x5de>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a28      	ldr	r2, [pc, #160]	; (8005f64 <HAL_ADC_ConfigChannel+0x67c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d101      	bne.n	8005eca <HAL_ADC_ConfigChannel+0x5e2>
 8005ec6:	4a28      	ldr	r2, [pc, #160]	; (8005f68 <HAL_ADC_ConfigChannel+0x680>)
 8005ec8:	e000      	b.n	8005ecc <HAL_ADC_ConfigChannel+0x5e4>
 8005eca:	4a28      	ldr	r2, [pc, #160]	; (8005f6c <HAL_ADC_ConfigChannel+0x684>)
 8005ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	f7fe fcb0 	bl	800483a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005eda:	e036      	b.n	8005f4a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a28      	ldr	r2, [pc, #160]	; (8005f84 <HAL_ADC_ConfigChannel+0x69c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d131      	bne.n	8005f4a <HAL_ADC_ConfigChannel+0x662>
 8005ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d12c      	bne.n	8005f4a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <HAL_ADC_ConfigChannel+0x688>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d127      	bne.n	8005f4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a18      	ldr	r2, [pc, #96]	; (8005f60 <HAL_ADC_ConfigChannel+0x678>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <HAL_ADC_ConfigChannel+0x626>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <HAL_ADC_ConfigChannel+0x67c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d101      	bne.n	8005f12 <HAL_ADC_ConfigChannel+0x62a>
 8005f0e:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <HAL_ADC_ConfigChannel+0x680>)
 8005f10:	e000      	b.n	8005f14 <HAL_ADC_ConfigChannel+0x62c>
 8005f12:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <HAL_ADC_ConfigChannel+0x684>)
 8005f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	f7fe fc8c 	bl	800483a <LL_ADC_SetCommonPathInternalCh>
 8005f22:	e012      	b.n	8005f4a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f28:	f043 0220 	orr.w	r2, r3, #32
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005f36:	e008      	b.n	8005f4a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	f043 0220 	orr.w	r2, r3, #32
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005f52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3784      	adds	r7, #132	; 0x84
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd90      	pop	{r4, r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40022000 	.word	0x40022000
 8005f64:	40022100 	.word	0x40022100
 8005f68:	40022300 	.word	0x40022300
 8005f6c:	58026300 	.word	0x58026300
 8005f70:	58026000 	.word	0x58026000
 8005f74:	cb840000 	.word	0xcb840000
 8005f78:	2000012c 	.word	0x2000012c
 8005f7c:	053e2d63 	.word	0x053e2d63
 8005f80:	c7520000 	.word	0xc7520000
 8005f84:	cfb80000 	.word	0xcfb80000

08005f88 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b094      	sub	sp, #80	; 0x50
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fa0:	d003      	beq.n	8005faa <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005fa6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_ADC_AnalogWDGConfig+0x30>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e304      	b.n	80065c2 <HAL_ADC_AnalogWDGConfig+0x63a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fe fe23 	bl	8004c10 <LL_ADC_REG_IsConversionOngoing>
 8005fca:	64b8      	str	r0, [r7, #72]	; 0x48
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fe fe30 	bl	8004c36 <LL_ADC_INJ_IsConversionOngoing>
 8005fd6:	6478      	str	r0, [r7, #68]	; 0x44
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f040 82e2 	bne.w	80065a4 <HAL_ADC_AnalogWDGConfig+0x61c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 82de 	bne.w	80065a4 <HAL_ADC_AnalogWDGConfig+0x61c>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a9b      	ldr	r2, [pc, #620]	; (800625c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	f040 80fa 	bne.w	80061e8 <HAL_ADC_AnalogWDGConfig+0x260>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005ffc:	d034      	beq.n	8006068 <HAL_ADC_AnalogWDGConfig+0xe0>
 8005ffe:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8006002:	d856      	bhi.n	80060b2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8006004:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006008:	d04b      	beq.n	80060a2 <HAL_ADC_AnalogWDGConfig+0x11a>
 800600a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800600e:	d850      	bhi.n	80060b2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8006010:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006014:	d01b      	beq.n	800604e <HAL_ADC_AnalogWDGConfig+0xc6>
 8006016:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800601a:	d84a      	bhi.n	80060b2 <HAL_ADC_AnalogWDGConfig+0x12a>
 800601c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006020:	d037      	beq.n	8006092 <HAL_ADC_AnalogWDGConfig+0x10a>
 8006022:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006026:	d844      	bhi.n	80060b2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8006028:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800602c:	d029      	beq.n	8006082 <HAL_ADC_AnalogWDGConfig+0xfa>
 800602e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006032:	d13e      	bne.n	80060b2 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006040:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8006044:	461a      	mov	r2, r3
 8006046:	4985      	ldr	r1, [pc, #532]	; (800625c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006048:	f7fe fd0e 	bl	8004a68 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 800604c:	e039      	b.n	80060c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800605a:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 800605e:	461a      	mov	r2, r3
 8006060:	497e      	ldr	r1, [pc, #504]	; (800625c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006062:	f7fe fd01 	bl	8004a68 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8006066:	e02c      	b.n	80060c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006074:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8006078:	461a      	mov	r2, r3
 800607a:	4978      	ldr	r1, [pc, #480]	; (800625c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800607c:	f7fe fcf4 	bl	8004a68 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8006080:	e01f      	b.n	80060c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a76      	ldr	r2, [pc, #472]	; (8006260 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8006088:	4974      	ldr	r1, [pc, #464]	; (800625c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fcec 	bl	8004a68 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006090:	e017      	b.n	80060c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a73      	ldr	r2, [pc, #460]	; (8006264 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8006098:	4970      	ldr	r1, [pc, #448]	; (800625c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe fce4 	bl	8004a68 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80060a0:	e00f      	b.n	80060c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a70      	ldr	r2, [pc, #448]	; (8006268 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 80060a8:	496c      	ldr	r1, [pc, #432]	; (800625c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe fcdc 	bl	8004a68 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80060b0:	e007      	b.n	80060c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	4968      	ldr	r1, [pc, #416]	; (800625c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fcd4 	bl	8004a68 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80060c0:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80060c2:	4b6a      	ldr	r3, [pc, #424]	; (800626c <HAL_ADC_AnalogWDGConfig+0x2e4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80060ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ce:	d10b      	bne.n	80060e8 <HAL_ADC_AnalogWDGConfig+0x160>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	089b      	lsrs	r3, r3, #2
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	e01d      	b.n	8006124 <HAL_ADC_AnalogWDGConfig+0x19c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <HAL_ADC_AnalogWDGConfig+0x186>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	089b      	lsrs	r3, r3, #2
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	e00a      	b.n	8006124 <HAL_ADC_AnalogWDGConfig+0x19c>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	089b      	lsrs	r3, r3, #2
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006126:	4b51      	ldr	r3, [pc, #324]	; (800626c <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800612e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006132:	d10b      	bne.n	800614c <HAL_ADC_AnalogWDGConfig+0x1c4>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	089b      	lsrs	r3, r3, #2
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	e01d      	b.n	8006188 <HAL_ADC_AnalogWDGConfig+0x200>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <HAL_ADC_AnalogWDGConfig+0x1ea>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	695a      	ldr	r2, [r3, #20]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	089b      	lsrs	r3, r3, #2
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	e00a      	b.n	8006188 <HAL_ADC_AnalogWDGConfig+0x200>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695a      	ldr	r2, [r3, #20]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }
#else
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800619a:	430a      	orrs	r2, r1
 800619c:	621a      	str	r2, [r3, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061ae:	430a      	orrs	r2, r1
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fd4a 	bl	8004c5c <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	7b1b      	ldrb	r3, [r3, #12]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d105      	bne.n	80061dc <HAL_ADC_AnalogWDGConfig+0x254>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe fd6a 	bl	8004cae <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80061da:	e1ec      	b.n	80065b6 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fe fd94 	bl	8004d0e <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80061e6:	e1e6      	b.n	80065b6 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80061f0:	d020      	beq.n	8006234 <HAL_ADC_AnalogWDGConfig+0x2ac>
 80061f2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80061f6:	f200 80f3 	bhi.w	80063e0 <HAL_ADC_AnalogWDGConfig+0x458>
 80061fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061fe:	f000 808a 	beq.w	8006316 <HAL_ADC_AnalogWDGConfig+0x38e>
 8006202:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006206:	f200 80eb 	bhi.w	80063e0 <HAL_ADC_AnalogWDGConfig+0x458>
 800620a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800620e:	d011      	beq.n	8006234 <HAL_ADC_AnalogWDGConfig+0x2ac>
 8006210:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006214:	f200 80e4 	bhi.w	80063e0 <HAL_ADC_AnalogWDGConfig+0x458>
 8006218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800621c:	d07b      	beq.n	8006316 <HAL_ADC_AnalogWDGConfig+0x38e>
 800621e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006222:	f200 80dd 	bhi.w	80063e0 <HAL_ADC_AnalogWDGConfig+0x458>
 8006226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800622a:	d074      	beq.n	8006316 <HAL_ADC_AnalogWDGConfig+0x38e>
 800622c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006230:	f040 80d6 	bne.w	80063e0 <HAL_ADC_AnalogWDGConfig+0x458>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a0d      	ldr	r2, [pc, #52]	; (8006270 <HAL_ADC_AnalogWDGConfig+0x2e8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d13b      	bne.n	80062b6 <HAL_ADC_AnalogWDGConfig+0x32e>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006246:	2b00      	cmp	r3, #0
 8006248:	d114      	bne.n	8006274 <HAL_ADC_AnalogWDGConfig+0x2ec>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	0e9b      	lsrs	r3, r3, #26
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	2201      	movs	r2, #1
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	e022      	b.n	80062a2 <HAL_ADC_AnalogWDGConfig+0x31a>
 800625c:	7dc00000 	.word	0x7dc00000
 8006260:	008fffff 	.word	0x008fffff
 8006264:	010fffff 	.word	0x010fffff
 8006268:	018fffff 	.word	0x018fffff
 800626c:	5c001000 	.word	0x5c001000
 8006270:	001fffff 	.word	0x001fffff
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627c:	fa93 f3a3 	rbit	r3, r3
 8006280:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_ADC_AnalogWDGConfig+0x308>
    return 32U;
 800628c:	2320      	movs	r3, #32
 800628e:	e003      	b.n	8006298 <HAL_ADC_AnalogWDGConfig+0x310>
  return __builtin_clz(value);
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	fab3 f383 	clz	r3, r3
 8006296:	b2db      	uxtb	r3, r3
 8006298:	f003 031f 	and.w	r3, r3, #31
 800629c:	2201      	movs	r2, #1
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	430b      	orrs	r3, r1
 80062b0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80062b4:	e09d      	b.n	80063f2 <HAL_ADC_AnalogWDGConfig+0x46a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d108      	bne.n	80062d4 <HAL_ADC_AnalogWDGConfig+0x34c>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	0e9b      	lsrs	r3, r3, #26
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	2201      	movs	r2, #1
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	e016      	b.n	8006302 <HAL_ADC_AnalogWDGConfig+0x37a>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	fa93 f3a3 	rbit	r3, r3
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_ADC_AnalogWDGConfig+0x368>
    return 32U;
 80062ec:	2320      	movs	r3, #32
 80062ee:	e003      	b.n	80062f8 <HAL_ADC_AnalogWDGConfig+0x370>
  return __builtin_clz(value);
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	fab3 f383 	clz	r3, r3
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	2201      	movs	r2, #1
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	430b      	orrs	r3, r1
 8006310:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8006314:	e06d      	b.n	80063f2 <HAL_ADC_AnalogWDGConfig+0x46a>
          else
          {
#endif  /*ADC_VER_V5_V90*/
            /* Update AWD by bitfield to keep the possibility to monitor        */
            /* several channels by successive calls of this function.           */
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4aa0      	ldr	r2, [pc, #640]	; (800659c <HAL_ADC_AnalogWDGConfig+0x614>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d12f      	bne.n	8006380 <HAL_ADC_AnalogWDGConfig+0x3f8>
            {
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006328:	2b00      	cmp	r3, #0
 800632a:	d108      	bne.n	800633e <HAL_ADC_AnalogWDGConfig+0x3b6>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	0e9b      	lsrs	r3, r3, #26
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	2201      	movs	r2, #1
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	e016      	b.n	800636c <HAL_ADC_AnalogWDGConfig+0x3e4>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	fa93 f3a3 	rbit	r3, r3
 800634a:	61bb      	str	r3, [r7, #24]
  return result;
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_ADC_AnalogWDGConfig+0x3d2>
    return 32U;
 8006356:	2320      	movs	r3, #32
 8006358:	e003      	b.n	8006362 <HAL_ADC_AnalogWDGConfig+0x3da>
  return __builtin_clz(value);
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	fab3 f383 	clz	r3, r3
 8006360:	b2db      	uxtb	r3, r3
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	2201      	movs	r2, #1
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6812      	ldr	r2, [r2, #0]
 8006370:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6812      	ldr	r2, [r2, #0]
 8006378:	430b      	orrs	r3, r1
 800637a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 800637e:	e038      	b.n	80063f2 <HAL_ADC_AnalogWDGConfig+0x46a>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006388:	2b00      	cmp	r3, #0
 800638a:	d108      	bne.n	800639e <HAL_ADC_AnalogWDGConfig+0x416>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	0e9b      	lsrs	r3, r3, #26
 8006392:	f003 031f 	and.w	r3, r3, #31
 8006396:	2201      	movs	r2, #1
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	e016      	b.n	80063cc <HAL_ADC_AnalogWDGConfig+0x444>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	fa93 f3a3 	rbit	r3, r3
 80063aa:	60fb      	str	r3, [r7, #12]
  return result;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_ADC_AnalogWDGConfig+0x432>
    return 32U;
 80063b6:	2320      	movs	r3, #32
 80063b8:	e003      	b.n	80063c2 <HAL_ADC_AnalogWDGConfig+0x43a>
  return __builtin_clz(value);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	fab3 f383 	clz	r3, r3
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f003 031f 	and.w	r3, r3, #31
 80063c6:	2201      	movs	r2, #1
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	430b      	orrs	r3, r1
 80063da:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80063de:	e008      	b.n	80063f2 <HAL_ADC_AnalogWDGConfig+0x46a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2200      	movs	r2, #0
 80063ea:	4619      	mov	r1, r3
 80063ec:	f7fe fb3c 	bl	8004a68 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80063f0:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80063f2:	4b6b      	ldr	r3, [pc, #428]	; (80065a0 <HAL_ADC_AnalogWDGConfig+0x618>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80063fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063fe:	d10b      	bne.n	8006418 <HAL_ADC_AnalogWDGConfig+0x490>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	089b      	lsrs	r3, r3, #2
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	e01d      	b.n	8006454 <HAL_ADC_AnalogWDGConfig+0x4cc>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10b      	bne.n	800643e <HAL_ADC_AnalogWDGConfig+0x4b6>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	e00a      	b.n	8006454 <HAL_ADC_AnalogWDGConfig+0x4cc>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	691a      	ldr	r2, [r3, #16]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	089b      	lsrs	r3, r3, #2
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006456:	4b52      	ldr	r3, [pc, #328]	; (80065a0 <HAL_ADC_AnalogWDGConfig+0x618>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800645e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006462:	d10b      	bne.n	800647c <HAL_ADC_AnalogWDGConfig+0x4f4>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	695a      	ldr	r2, [r3, #20]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	089b      	lsrs	r3, r3, #2
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	e01d      	b.n	80064b8 <HAL_ADC_AnalogWDGConfig+0x530>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <HAL_ADC_AnalogWDGConfig+0x51a>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	695a      	ldr	r2, [r3, #20]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	089b      	lsrs	r3, r3, #2
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	e00a      	b.n	80064b8 <HAL_ADC_AnalogWDGConfig+0x530>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	695a      	ldr	r2, [r3, #20]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	089b      	lsrs	r3, r3, #2
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
        }
      }
#else
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a37      	ldr	r2, [pc, #220]	; (800659c <HAL_ADC_AnalogWDGConfig+0x614>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d118      	bne.n	80064f6 <HAL_ADC_AnalogWDGConfig+0x56e>
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064cc:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064d6:	430a      	orrs	r2, r1
 80064d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064e4:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064ee:	430a      	orrs	r2, r1
 80064f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80064f4:	e017      	b.n	8006526 <HAL_ADC_AnalogWDGConfig+0x59e>
      }
      else
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80064fe:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006508:	430a      	orrs	r2, r1
 800650a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006516:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006520:	430a      	orrs	r2, r1
 8006522:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1c      	ldr	r2, [pc, #112]	; (800659c <HAL_ADC_AnalogWDGConfig+0x614>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d11a      	bne.n	8006566 <HAL_ADC_AnalogWDGConfig+0x5de>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe fb98 	bl	8004c76 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	7b1b      	ldrb	r3, [r3, #12]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d105      	bne.n	800655a <HAL_ADC_AnalogWDGConfig+0x5d2>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fbbb 	bl	8004cce <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006558:	e02d      	b.n	80065b6 <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe fbe5 	bl	8004d2e <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006564:	e027      	b.n	80065b6 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fb8b 	bl	8004c92 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	7b1b      	ldrb	r3, [r3, #12]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d105      	bne.n	8006590 <HAL_ADC_AnalogWDGConfig+0x608>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe fbb0 	bl	8004cee <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800658e:	e012      	b.n	80065b6 <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4618      	mov	r0, r3
 8006596:	f7fe fbda 	bl	8004d4e <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800659a:	e00c      	b.n	80065b6 <HAL_ADC_AnalogWDGConfig+0x62e>
 800659c:	001fffff 	.word	0x001fffff
 80065a0:	5c001000 	.word	0x5c001000
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a8:	f043 0220 	orr.w	r2, r3, #32
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80065be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3750      	adds	r7, #80	; 0x50
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop

080065cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe faf1 	bl	8004bc0 <LL_ADC_IsEnabled>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d16e      	bne.n	80066c2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	4b38      	ldr	r3, [pc, #224]	; (80066cc <ADC_Enable+0x100>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	f043 0210 	orr.w	r2, r3, #16
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006602:	f043 0201 	orr.w	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e05a      	b.n	80066c4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe fac0 	bl	8004b98 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006618:	f7fe f8c0 	bl	800479c <HAL_GetTick>
 800661c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a2b      	ldr	r2, [pc, #172]	; (80066d0 <ADC_Enable+0x104>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <ADC_Enable+0x66>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a29      	ldr	r2, [pc, #164]	; (80066d4 <ADC_Enable+0x108>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d101      	bne.n	8006636 <ADC_Enable+0x6a>
 8006632:	4b29      	ldr	r3, [pc, #164]	; (80066d8 <ADC_Enable+0x10c>)
 8006634:	e000      	b.n	8006638 <ADC_Enable+0x6c>
 8006636:	4b29      	ldr	r3, [pc, #164]	; (80066dc <ADC_Enable+0x110>)
 8006638:	4618      	mov	r0, r3
 800663a:	f7fe fa43 	bl	8004ac4 <LL_ADC_GetMultimode>
 800663e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a23      	ldr	r2, [pc, #140]	; (80066d4 <ADC_Enable+0x108>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d002      	beq.n	8006650 <ADC_Enable+0x84>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	e000      	b.n	8006652 <ADC_Enable+0x86>
 8006650:	4b1f      	ldr	r3, [pc, #124]	; (80066d0 <ADC_Enable+0x104>)
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	4293      	cmp	r3, r2
 8006658:	d02c      	beq.n	80066b4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d130      	bne.n	80066c2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006660:	e028      	b.n	80066b4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe faaa 	bl	8004bc0 <LL_ADC_IsEnabled>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fa8e 	bl	8004b98 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800667c:	f7fe f88e 	bl	800479c <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d914      	bls.n	80066b4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b01      	cmp	r3, #1
 8006696:	d00d      	beq.n	80066b4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669c:	f043 0210 	orr.w	r2, r3, #16
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a8:	f043 0201 	orr.w	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e007      	b.n	80066c4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d1cf      	bne.n	8006662 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	8000003f 	.word	0x8000003f
 80066d0:	40022000 	.word	0x40022000
 80066d4:	40022100 	.word	0x40022100
 80066d8:	40022300 	.word	0x40022300
 80066dc:	58026300 	.word	0x58026300

080066e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a79      	ldr	r2, [pc, #484]	; (80068d4 <ADC_ConfigureBoostMode+0x1f4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d004      	beq.n	80066fc <ADC_ConfigureBoostMode+0x1c>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a78      	ldr	r2, [pc, #480]	; (80068d8 <ADC_ConfigureBoostMode+0x1f8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d109      	bne.n	8006710 <ADC_ConfigureBoostMode+0x30>
 80066fc:	4b77      	ldr	r3, [pc, #476]	; (80068dc <ADC_ConfigureBoostMode+0x1fc>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006704:	2b00      	cmp	r3, #0
 8006706:	bf14      	ite	ne
 8006708:	2301      	movne	r3, #1
 800670a:	2300      	moveq	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	e008      	b.n	8006722 <ADC_ConfigureBoostMode+0x42>
 8006710:	4b73      	ldr	r3, [pc, #460]	; (80068e0 <ADC_ConfigureBoostMode+0x200>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006718:	2b00      	cmp	r3, #0
 800671a:	bf14      	ite	ne
 800671c:	2301      	movne	r3, #1
 800671e:	2300      	moveq	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01c      	beq.n	8006760 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006726:	f002 f8ed 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 800672a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006734:	d010      	beq.n	8006758 <ADC_ConfigureBoostMode+0x78>
 8006736:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800673a:	d871      	bhi.n	8006820 <ADC_ConfigureBoostMode+0x140>
 800673c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006740:	d002      	beq.n	8006748 <ADC_ConfigureBoostMode+0x68>
 8006742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006746:	d16b      	bne.n	8006820 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	0c1b      	lsrs	r3, r3, #16
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	fbb2 f3f3 	udiv	r3, r2, r3
 8006754:	60fb      	str	r3, [r7, #12]
        break;
 8006756:	e066      	b.n	8006826 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	089b      	lsrs	r3, r3, #2
 800675c:	60fb      	str	r3, [r7, #12]
        break;
 800675e:	e062      	b.n	8006826 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006760:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006764:	f003 f8b2 	bl	80098cc <HAL_RCCEx_GetPeriphCLKFreq>
 8006768:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006772:	d051      	beq.n	8006818 <ADC_ConfigureBoostMode+0x138>
 8006774:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006778:	d854      	bhi.n	8006824 <ADC_ConfigureBoostMode+0x144>
 800677a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800677e:	d047      	beq.n	8006810 <ADC_ConfigureBoostMode+0x130>
 8006780:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006784:	d84e      	bhi.n	8006824 <ADC_ConfigureBoostMode+0x144>
 8006786:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800678a:	d03d      	beq.n	8006808 <ADC_ConfigureBoostMode+0x128>
 800678c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006790:	d848      	bhi.n	8006824 <ADC_ConfigureBoostMode+0x144>
 8006792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006796:	d033      	beq.n	8006800 <ADC_ConfigureBoostMode+0x120>
 8006798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800679c:	d842      	bhi.n	8006824 <ADC_ConfigureBoostMode+0x144>
 800679e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80067a2:	d029      	beq.n	80067f8 <ADC_ConfigureBoostMode+0x118>
 80067a4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80067a8:	d83c      	bhi.n	8006824 <ADC_ConfigureBoostMode+0x144>
 80067aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80067ae:	d01a      	beq.n	80067e6 <ADC_ConfigureBoostMode+0x106>
 80067b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80067b4:	d836      	bhi.n	8006824 <ADC_ConfigureBoostMode+0x144>
 80067b6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80067ba:	d014      	beq.n	80067e6 <ADC_ConfigureBoostMode+0x106>
 80067bc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80067c0:	d830      	bhi.n	8006824 <ADC_ConfigureBoostMode+0x144>
 80067c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c6:	d00e      	beq.n	80067e6 <ADC_ConfigureBoostMode+0x106>
 80067c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067cc:	d82a      	bhi.n	8006824 <ADC_ConfigureBoostMode+0x144>
 80067ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067d2:	d008      	beq.n	80067e6 <ADC_ConfigureBoostMode+0x106>
 80067d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067d8:	d824      	bhi.n	8006824 <ADC_ConfigureBoostMode+0x144>
 80067da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067de:	d002      	beq.n	80067e6 <ADC_ConfigureBoostMode+0x106>
 80067e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067e4:	d11e      	bne.n	8006824 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	0c9b      	lsrs	r3, r3, #18
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f4:	60fb      	str	r3, [r7, #12]
        break;
 80067f6:	e016      	b.n	8006826 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	091b      	lsrs	r3, r3, #4
 80067fc:	60fb      	str	r3, [r7, #12]
        break;
 80067fe:	e012      	b.n	8006826 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	60fb      	str	r3, [r7, #12]
        break;
 8006806:	e00e      	b.n	8006826 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	099b      	lsrs	r3, r3, #6
 800680c:	60fb      	str	r3, [r7, #12]
        break;
 800680e:	e00a      	b.n	8006826 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	09db      	lsrs	r3, r3, #7
 8006814:	60fb      	str	r3, [r7, #12]
        break;
 8006816:	e006      	b.n	8006826 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	0a1b      	lsrs	r3, r3, #8
 800681c:	60fb      	str	r3, [r7, #12]
        break;
 800681e:	e002      	b.n	8006826 <ADC_ConfigureBoostMode+0x146>
        break;
 8006820:	bf00      	nop
 8006822:	e000      	b.n	8006826 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8006824:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006826:	f7fd ffe9 	bl	80047fc <HAL_GetREVID>
 800682a:	4603      	mov	r3, r0
 800682c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006830:	4293      	cmp	r3, r2
 8006832:	d815      	bhi.n	8006860 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4a2b      	ldr	r2, [pc, #172]	; (80068e4 <ADC_ConfigureBoostMode+0x204>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d908      	bls.n	800684e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800684a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800684c:	e03e      	b.n	80068cc <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800685c:	609a      	str	r2, [r3, #8]
}
 800685e:	e035      	b.n	80068cc <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <ADC_ConfigureBoostMode+0x208>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d808      	bhi.n	8006880 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800687c:	609a      	str	r2, [r3, #8]
}
 800687e:	e025      	b.n	80068cc <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <ADC_ConfigureBoostMode+0x20c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d80a      	bhi.n	800689e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800689a:	609a      	str	r2, [r3, #8]
}
 800689c:	e016      	b.n	80068cc <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4a13      	ldr	r2, [pc, #76]	; (80068f0 <ADC_ConfigureBoostMode+0x210>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d80a      	bhi.n	80068bc <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b8:	609a      	str	r2, [r3, #8]
}
 80068ba:	e007      	b.n	80068cc <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80068ca:	609a      	str	r2, [r3, #8]
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40022000 	.word	0x40022000
 80068d8:	40022100 	.word	0x40022100
 80068dc:	40022300 	.word	0x40022300
 80068e0:	58026300 	.word	0x58026300
 80068e4:	01312d00 	.word	0x01312d00
 80068e8:	005f5e10 	.word	0x005f5e10
 80068ec:	00bebc20 	.word	0x00bebc20
 80068f0:	017d7840 	.word	0x017d7840

080068f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006968:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <__NVIC_SetPriorityGrouping+0x40>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006974:	4013      	ands	r3, r2
 8006976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006980:	4b06      	ldr	r3, [pc, #24]	; (800699c <__NVIC_SetPriorityGrouping+0x44>)
 8006982:	4313      	orrs	r3, r2
 8006984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006986:	4a04      	ldr	r2, [pc, #16]	; (8006998 <__NVIC_SetPriorityGrouping+0x40>)
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	60d3      	str	r3, [r2, #12]
}
 800698c:	bf00      	nop
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	e000ed00 	.word	0xe000ed00
 800699c:	05fa0000 	.word	0x05fa0000

080069a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069a4:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <__NVIC_GetPriorityGrouping+0x18>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	0a1b      	lsrs	r3, r3, #8
 80069aa:	f003 0307 	and.w	r3, r3, #7
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	e000ed00 	.word	0xe000ed00

080069bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80069c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	db0b      	blt.n	80069e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	f003 021f 	and.w	r2, r3, #31
 80069d4:	4907      	ldr	r1, [pc, #28]	; (80069f4 <__NVIC_EnableIRQ+0x38>)
 80069d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	2001      	movs	r0, #1
 80069de:	fa00 f202 	lsl.w	r2, r0, r2
 80069e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	e000e100 	.word	0xe000e100

080069f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	6039      	str	r1, [r7, #0]
 8006a02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	db0a      	blt.n	8006a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	490c      	ldr	r1, [pc, #48]	; (8006a44 <__NVIC_SetPriority+0x4c>)
 8006a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a16:	0112      	lsls	r2, r2, #4
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a20:	e00a      	b.n	8006a38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	4908      	ldr	r1, [pc, #32]	; (8006a48 <__NVIC_SetPriority+0x50>)
 8006a28:	88fb      	ldrh	r3, [r7, #6]
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	3b04      	subs	r3, #4
 8006a30:	0112      	lsls	r2, r2, #4
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	440b      	add	r3, r1
 8006a36:	761a      	strb	r2, [r3, #24]
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	e000e100 	.word	0xe000e100
 8006a48:	e000ed00 	.word	0xe000ed00

08006a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b089      	sub	sp, #36	; 0x24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f1c3 0307 	rsb	r3, r3, #7
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	bf28      	it	cs
 8006a6a:	2304      	movcs	r3, #4
 8006a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	3304      	adds	r3, #4
 8006a72:	2b06      	cmp	r3, #6
 8006a74:	d902      	bls.n	8006a7c <NVIC_EncodePriority+0x30>
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	3b03      	subs	r3, #3
 8006a7a:	e000      	b.n	8006a7e <NVIC_EncodePriority+0x32>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a80:	f04f 32ff 	mov.w	r2, #4294967295
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	43da      	mvns	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	401a      	ands	r2, r3
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a94:	f04f 31ff 	mov.w	r1, #4294967295
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9e:	43d9      	mvns	r1, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aa4:	4313      	orrs	r3, r2
         );
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3724      	adds	r7, #36	; 0x24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff ff4c 	bl	8006958 <__NVIC_SetPriorityGrouping>
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ad6:	f7ff ff63 	bl	80069a0 <__NVIC_GetPriorityGrouping>
 8006ada:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	6978      	ldr	r0, [r7, #20]
 8006ae2:	f7ff ffb3 	bl	8006a4c <NVIC_EncodePriority>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006aec:	4611      	mov	r1, r2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff ff82 	bl	80069f8 <__NVIC_SetPriority>
}
 8006af4:	bf00      	nop
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	4603      	mov	r3, r0
 8006b04:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7ff ff56 	bl	80069bc <__NVIC_EnableIRQ>
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e054      	b.n	8006bd4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7f5b      	ldrb	r3, [r3, #29]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d105      	bne.n	8006b40 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7f9 fea0 	bl	8000880 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	791b      	ldrb	r3, [r3, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10c      	bne.n	8006b68 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a22      	ldr	r2, [pc, #136]	; (8006bdc <HAL_CRC_Init+0xc4>)
 8006b54:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0218 	bic.w	r2, r2, #24
 8006b64:	609a      	str	r2, [r3, #8]
 8006b66:	e00c      	b.n	8006b82 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6899      	ldr	r1, [r3, #8]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	461a      	mov	r2, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f834 	bl	8006be0 <HAL_CRCEx_Polynomial_Set>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e028      	b.n	8006bd4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	795b      	ldrb	r3, [r3, #5]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d105      	bne.n	8006b96 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b92:	611a      	str	r2, [r3, #16]
 8006b94:	e004      	b.n	8006ba0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6912      	ldr	r2, [r2, #16]
 8006b9e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695a      	ldr	r2, [r3, #20]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	04c11db7 	.word	0x04c11db7

08006be0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006bf0:	231f      	movs	r3, #31
 8006bf2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006bf4:	bf00      	nop
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1e5a      	subs	r2, r3, #1
 8006bfa:	613a      	str	r2, [r7, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d009      	beq.n	8006c14 <HAL_CRCEx_Polynomial_Set+0x34>
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0f0      	beq.n	8006bf6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b18      	cmp	r3, #24
 8006c18:	d846      	bhi.n	8006ca8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006caf 	.word	0x08006caf
 8006c24:	08006ca9 	.word	0x08006ca9
 8006c28:	08006ca9 	.word	0x08006ca9
 8006c2c:	08006ca9 	.word	0x08006ca9
 8006c30:	08006ca9 	.word	0x08006ca9
 8006c34:	08006ca9 	.word	0x08006ca9
 8006c38:	08006ca9 	.word	0x08006ca9
 8006c3c:	08006ca9 	.word	0x08006ca9
 8006c40:	08006c9d 	.word	0x08006c9d
 8006c44:	08006ca9 	.word	0x08006ca9
 8006c48:	08006ca9 	.word	0x08006ca9
 8006c4c:	08006ca9 	.word	0x08006ca9
 8006c50:	08006ca9 	.word	0x08006ca9
 8006c54:	08006ca9 	.word	0x08006ca9
 8006c58:	08006ca9 	.word	0x08006ca9
 8006c5c:	08006ca9 	.word	0x08006ca9
 8006c60:	08006c91 	.word	0x08006c91
 8006c64:	08006ca9 	.word	0x08006ca9
 8006c68:	08006ca9 	.word	0x08006ca9
 8006c6c:	08006ca9 	.word	0x08006ca9
 8006c70:	08006ca9 	.word	0x08006ca9
 8006c74:	08006ca9 	.word	0x08006ca9
 8006c78:	08006ca9 	.word	0x08006ca9
 8006c7c:	08006ca9 	.word	0x08006ca9
 8006c80:	08006c85 	.word	0x08006c85
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b06      	cmp	r3, #6
 8006c88:	d913      	bls.n	8006cb2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c8e:	e010      	b.n	8006cb2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2b07      	cmp	r3, #7
 8006c94:	d90f      	bls.n	8006cb6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c9a:	e00c      	b.n	8006cb6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2b0f      	cmp	r3, #15
 8006ca0:	d90b      	bls.n	8006cba <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006ca6:	e008      	b.n	8006cba <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cac:	e006      	b.n	8006cbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cae:	bf00      	nop
 8006cb0:	e004      	b.n	8006cbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cb2:	bf00      	nop
 8006cb4:	e002      	b.n	8006cbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cb6:	bf00      	nop
 8006cb8:	e000      	b.n	8006cbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cba:	bf00      	nop
  }
  if (status == HAL_OK)
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10d      	bne.n	8006cde <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f023 0118 	bic.w	r1, r3, #24
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e04f      	b.n	8006d9e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7f9 fe10 	bl	8000938 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b20      	ldr	r3, [pc, #128]	; (8006da8 <HAL_DMA2D_Init+0xbc>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	6851      	ldr	r1, [r2, #4]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	69d2      	ldr	r2, [r2, #28]
 8006d32:	4311      	orrs	r1, r2
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	6812      	ldr	r2, [r2, #0]
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d42:	4b1a      	ldr	r3, [pc, #104]	; (8006dac <HAL_DMA2D_Init+0xc0>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6891      	ldr	r1, [r2, #8]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6992      	ldr	r2, [r2, #24]
 8006d4e:	4311      	orrs	r1, r2
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6812      	ldr	r2, [r2, #0]
 8006d54:	430b      	orrs	r3, r1
 8006d56:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5e:	4b14      	ldr	r3, [pc, #80]	; (8006db0 <HAL_DMA2D_Init+0xc4>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68d1      	ldr	r1, [r2, #12]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d74:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	051a      	lsls	r2, r3, #20
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	055b      	lsls	r3, r3, #21
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	fff8ffbf 	.word	0xfff8ffbf
 8006dac:	fffffef8 	.word	0xfffffef8
 8006db0:	ffff0000 	.word	0xffff0000

08006db4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_DMA2D_ConfigLayer+0x24>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e092      	b.n	8006efe <HAL_DMA2D_ConfigLayer+0x14a>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	4613      	mov	r3, r2
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	1a9b      	subs	r3, r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	3328      	adds	r3, #40	; 0x28
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	4413      	add	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	041b      	lsls	r3, r3, #16
 8006e04:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006e0c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006e18:	4b3c      	ldr	r3, [pc, #240]	; (8006f0c <HAL_DMA2D_ConfigLayer+0x158>)
 8006e1a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b0a      	cmp	r3, #10
 8006e22:	d003      	beq.n	8006e2c <HAL_DMA2D_ConfigLayer+0x78>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b09      	cmp	r3, #9
 8006e2a:	d107      	bne.n	8006e3c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
 8006e3a:	e005      	b.n	8006e48 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	061b      	lsls	r3, r3, #24
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d120      	bne.n	8006e90 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	43db      	mvns	r3, r3
 8006e58:	ea02 0103 	and.w	r1, r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2b0a      	cmp	r3, #10
 8006e76:	d003      	beq.n	8006e80 <HAL_DMA2D_ConfigLayer+0xcc>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b09      	cmp	r3, #9
 8006e7e:	d135      	bne.n	8006eec <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006e8c:	629a      	str	r2, [r3, #40]	; 0x28
 8006e8e:	e02d      	b.n	8006eec <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b0b      	cmp	r3, #11
 8006e96:	d109      	bne.n	8006eac <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	049b      	lsls	r3, r3, #18
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8006eaa:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69da      	ldr	r2, [r3, #28]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	ea02 0103 	and.w	r1, r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	6812      	ldr	r2, [r2, #0]
 8006ecc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2b0a      	cmp	r3, #10
 8006ed4:	d003      	beq.n	8006ede <HAL_DMA2D_ConfigLayer+0x12a>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2b09      	cmp	r3, #9
 8006edc:	d106      	bne.n	8006eec <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006eea:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	ff33000f 	.word	0xff33000f

08006f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b089      	sub	sp, #36	; 0x24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006f1e:	4b89      	ldr	r3, [pc, #548]	; (8007144 <HAL_GPIO_Init+0x234>)
 8006f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f22:	e194      	b.n	800724e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	2101      	movs	r1, #1
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f30:	4013      	ands	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 8186 	beq.w	8007248 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f003 0303 	and.w	r3, r3, #3
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d005      	beq.n	8006f54 <HAL_GPIO_Init+0x44>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f003 0303 	and.w	r3, r3, #3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d130      	bne.n	8006fb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	2203      	movs	r2, #3
 8006f60:	fa02 f303 	lsl.w	r3, r2, r3
 8006f64:	43db      	mvns	r3, r3
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	4013      	ands	r3, r2
 8006f6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	43db      	mvns	r3, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4013      	ands	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	091b      	lsrs	r3, r3, #4
 8006fa0:	f003 0201 	and.w	r2, r3, #1
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d017      	beq.n	8006ff2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	2203      	movs	r2, #3
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	43db      	mvns	r3, r3
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d123      	bne.n	8007046 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	08da      	lsrs	r2, r3, #3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3208      	adds	r2, #8
 8007006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	220f      	movs	r2, #15
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	43db      	mvns	r3, r3
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	4013      	ands	r3, r2
 8007020:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	691a      	ldr	r2, [r3, #16]
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	fa02 f303 	lsl.w	r3, r2, r3
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	4313      	orrs	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	08da      	lsrs	r2, r3, #3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3208      	adds	r2, #8
 8007040:	69b9      	ldr	r1, [r7, #24]
 8007042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	2203      	movs	r2, #3
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	43db      	mvns	r3, r3
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	4013      	ands	r3, r2
 800705c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f003 0203 	and.w	r2, r3, #3
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4313      	orrs	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80e0 	beq.w	8007248 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007088:	4b2f      	ldr	r3, [pc, #188]	; (8007148 <HAL_GPIO_Init+0x238>)
 800708a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800708e:	4a2e      	ldr	r2, [pc, #184]	; (8007148 <HAL_GPIO_Init+0x238>)
 8007090:	f043 0302 	orr.w	r3, r3, #2
 8007094:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007098:	4b2b      	ldr	r3, [pc, #172]	; (8007148 <HAL_GPIO_Init+0x238>)
 800709a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070a6:	4a29      	ldr	r2, [pc, #164]	; (800714c <HAL_GPIO_Init+0x23c>)
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	089b      	lsrs	r3, r3, #2
 80070ac:	3302      	adds	r3, #2
 80070ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	220f      	movs	r2, #15
 80070be:	fa02 f303 	lsl.w	r3, r2, r3
 80070c2:	43db      	mvns	r3, r3
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	4013      	ands	r3, r2
 80070c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a20      	ldr	r2, [pc, #128]	; (8007150 <HAL_GPIO_Init+0x240>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d052      	beq.n	8007178 <HAL_GPIO_Init+0x268>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a1f      	ldr	r2, [pc, #124]	; (8007154 <HAL_GPIO_Init+0x244>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d031      	beq.n	800713e <HAL_GPIO_Init+0x22e>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <HAL_GPIO_Init+0x248>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d02b      	beq.n	800713a <HAL_GPIO_Init+0x22a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a1d      	ldr	r2, [pc, #116]	; (800715c <HAL_GPIO_Init+0x24c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d025      	beq.n	8007136 <HAL_GPIO_Init+0x226>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a1c      	ldr	r2, [pc, #112]	; (8007160 <HAL_GPIO_Init+0x250>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d01f      	beq.n	8007132 <HAL_GPIO_Init+0x222>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a1b      	ldr	r2, [pc, #108]	; (8007164 <HAL_GPIO_Init+0x254>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d019      	beq.n	800712e <HAL_GPIO_Init+0x21e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a1a      	ldr	r2, [pc, #104]	; (8007168 <HAL_GPIO_Init+0x258>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d013      	beq.n	800712a <HAL_GPIO_Init+0x21a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a19      	ldr	r2, [pc, #100]	; (800716c <HAL_GPIO_Init+0x25c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00d      	beq.n	8007126 <HAL_GPIO_Init+0x216>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a18      	ldr	r2, [pc, #96]	; (8007170 <HAL_GPIO_Init+0x260>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d007      	beq.n	8007122 <HAL_GPIO_Init+0x212>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a17      	ldr	r2, [pc, #92]	; (8007174 <HAL_GPIO_Init+0x264>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d101      	bne.n	800711e <HAL_GPIO_Init+0x20e>
 800711a:	2309      	movs	r3, #9
 800711c:	e02d      	b.n	800717a <HAL_GPIO_Init+0x26a>
 800711e:	230a      	movs	r3, #10
 8007120:	e02b      	b.n	800717a <HAL_GPIO_Init+0x26a>
 8007122:	2308      	movs	r3, #8
 8007124:	e029      	b.n	800717a <HAL_GPIO_Init+0x26a>
 8007126:	2307      	movs	r3, #7
 8007128:	e027      	b.n	800717a <HAL_GPIO_Init+0x26a>
 800712a:	2306      	movs	r3, #6
 800712c:	e025      	b.n	800717a <HAL_GPIO_Init+0x26a>
 800712e:	2305      	movs	r3, #5
 8007130:	e023      	b.n	800717a <HAL_GPIO_Init+0x26a>
 8007132:	2304      	movs	r3, #4
 8007134:	e021      	b.n	800717a <HAL_GPIO_Init+0x26a>
 8007136:	2303      	movs	r3, #3
 8007138:	e01f      	b.n	800717a <HAL_GPIO_Init+0x26a>
 800713a:	2302      	movs	r3, #2
 800713c:	e01d      	b.n	800717a <HAL_GPIO_Init+0x26a>
 800713e:	2301      	movs	r3, #1
 8007140:	e01b      	b.n	800717a <HAL_GPIO_Init+0x26a>
 8007142:	bf00      	nop
 8007144:	58000080 	.word	0x58000080
 8007148:	58024400 	.word	0x58024400
 800714c:	58000400 	.word	0x58000400
 8007150:	58020000 	.word	0x58020000
 8007154:	58020400 	.word	0x58020400
 8007158:	58020800 	.word	0x58020800
 800715c:	58020c00 	.word	0x58020c00
 8007160:	58021000 	.word	0x58021000
 8007164:	58021400 	.word	0x58021400
 8007168:	58021800 	.word	0x58021800
 800716c:	58021c00 	.word	0x58021c00
 8007170:	58022000 	.word	0x58022000
 8007174:	58022400 	.word	0x58022400
 8007178:	2300      	movs	r3, #0
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	f002 0203 	and.w	r2, r2, #3
 8007180:	0092      	lsls	r2, r2, #2
 8007182:	4093      	lsls	r3, r2
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	4313      	orrs	r3, r2
 8007188:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800718a:	4938      	ldr	r1, [pc, #224]	; (800726c <HAL_GPIO_Init+0x35c>)
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	089b      	lsrs	r3, r3, #2
 8007190:	3302      	adds	r3, #2
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	43db      	mvns	r3, r3
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	4013      	ands	r3, r2
 80071a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80071be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80071c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	43db      	mvns	r3, r3
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	4013      	ands	r3, r2
 80071d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80071ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	43db      	mvns	r3, r3
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	4013      	ands	r3, r2
 8007202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	43db      	mvns	r3, r3
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	4013      	ands	r3, r2
 800722c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	3301      	adds	r3, #1
 800724c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	fa22 f303 	lsr.w	r3, r2, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	f47f ae63 	bne.w	8006f24 <HAL_GPIO_Init+0x14>
  }
}
 800725e:	bf00      	nop
 8007260:	bf00      	nop
 8007262:	3724      	adds	r7, #36	; 0x24
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	58000400 	.word	0x58000400

08007270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	807b      	strh	r3, [r7, #2]
 800727c:	4613      	mov	r3, r2
 800727e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007280:	787b      	ldrb	r3, [r7, #1]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007286:	887a      	ldrh	r2, [r7, #2]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800728c:	e003      	b.n	8007296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800728e:	887b      	ldrh	r3, [r7, #2]
 8007290:	041a      	lsls	r2, r3, #16
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	619a      	str	r2, [r3, #24]
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e0bf      	b.n	8007436 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fb ffb8 	bl	8003240 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80072e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6999      	ldr	r1, [r3, #24]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6899      	ldr	r1, [r3, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	4b4a      	ldr	r3, [pc, #296]	; (8007440 <HAL_LTDC_Init+0x19c>)
 8007318:	400b      	ands	r3, r1
 800731a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	041b      	lsls	r3, r3, #16
 8007322:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6899      	ldr	r1, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68d9      	ldr	r1, [r3, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	4b3e      	ldr	r3, [pc, #248]	; (8007440 <HAL_LTDC_Init+0x19c>)
 8007346:	400b      	ands	r3, r1
 8007348:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	041b      	lsls	r3, r3, #16
 8007350:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68d9      	ldr	r1, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1a      	ldr	r2, [r3, #32]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6919      	ldr	r1, [r3, #16]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	4b33      	ldr	r3, [pc, #204]	; (8007440 <HAL_LTDC_Init+0x19c>)
 8007374:	400b      	ands	r3, r1
 8007376:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	041b      	lsls	r3, r3, #16
 800737e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6919      	ldr	r1, [r3, #16]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6959      	ldr	r1, [r3, #20]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b27      	ldr	r3, [pc, #156]	; (8007440 <HAL_LTDC_Init+0x19c>)
 80073a2:	400b      	ands	r3, r1
 80073a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	041b      	lsls	r3, r3, #16
 80073ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6959      	ldr	r1, [r3, #20]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80073d4:	041b      	lsls	r3, r3, #16
 80073d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80073e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0206 	orr.w	r2, r2, #6
 8007412:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0201 	orr.w	r2, r2, #1
 8007422:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	f000f800 	.word	0xf000f800

08007444 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d023      	beq.n	80074ae <HAL_LTDC_IRQHandler+0x6a>
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01e      	beq.n	80074ae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0204 	bic.w	r2, r2, #4
 800747e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2204      	movs	r2, #4
 8007486:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800748e:	f043 0201 	orr.w	r2, r3, #1
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2204      	movs	r2, #4
 800749c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f86f 	bl	800758c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d023      	beq.n	8007500 <HAL_LTDC_IRQHandler+0xbc>
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d01e      	beq.n	8007500 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0202 	bic.w	r2, r2, #2
 80074d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2202      	movs	r2, #2
 80074d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074e0:	f043 0202 	orr.w	r2, r3, #2
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2204      	movs	r2, #4
 80074ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f846 	bl	800758c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d01b      	beq.n	8007542 <HAL_LTDC_IRQHandler+0xfe>
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d016      	beq.n	8007542 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0201 	bic.w	r2, r2, #1
 8007522:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2201      	movs	r2, #1
 800752a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f00e ffaf 	bl	80164a0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01b      	beq.n	8007584 <HAL_LTDC_IRQHandler+0x140>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b00      	cmp	r3, #0
 8007554:	d016      	beq.n	8007584 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0208 	bic.w	r2, r2, #8
 8007564:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2208      	movs	r2, #8
 800756c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f80e 	bl	80075a0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007584:	bf00      	nop
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80075b4:	b5b0      	push	{r4, r5, r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_LTDC_ConfigLayer+0x1a>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e02c      	b.n	8007628 <HAL_LTDC_ConfigLayer+0x74>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2202      	movs	r2, #2
 80075da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2134      	movs	r1, #52	; 0x34
 80075e4:	fb01 f303 	mul.w	r3, r1, r3
 80075e8:	4413      	add	r3, r2
 80075ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	4614      	mov	r4, r2
 80075f2:	461d      	mov	r5, r3
 80075f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	68b9      	ldr	r1, [r7, #8]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f849 	bl	80076a0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2201      	movs	r2, #1
 8007614:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bdb0      	pop	{r4, r5, r7, pc}

08007630 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_LTDC_ProgramLineEvent+0x18>
 8007644:	2302      	movs	r3, #2
 8007646:	e023      	b.n	8007690 <HAL_LTDC_ProgramLineEvent+0x60>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0201 	bic.w	r2, r2, #1
 8007666:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007668:	4a0c      	ldr	r2, [pc, #48]	; (800769c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 0201 	orr.w	r2, r2, #1
 800767c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	50001000 	.word	0x50001000

080076a0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b089      	sub	sp, #36	; 0x24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	0c1b      	lsrs	r3, r3, #16
 80076b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076bc:	4413      	add	r3, r2
 80076be:	041b      	lsls	r3, r3, #16
 80076c0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	01db      	lsls	r3, r3, #7
 80076cc:	4413      	add	r3, r2
 80076ce:	3384      	adds	r3, #132	; 0x84
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	4611      	mov	r1, r2
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	01d2      	lsls	r2, r2, #7
 80076dc:	440a      	add	r2, r1
 80076de:	3284      	adds	r2, #132	; 0x84
 80076e0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80076e4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	0c1b      	lsrs	r3, r3, #16
 80076f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076f6:	4413      	add	r3, r2
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4619      	mov	r1, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	01db      	lsls	r3, r3, #7
 8007704:	440b      	add	r3, r1
 8007706:	3384      	adds	r3, #132	; 0x84
 8007708:	4619      	mov	r1, r3
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4313      	orrs	r3, r2
 800770e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800771e:	4413      	add	r3, r2
 8007720:	041b      	lsls	r3, r3, #16
 8007722:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	01db      	lsls	r3, r3, #7
 800772e:	4413      	add	r3, r2
 8007730:	3384      	adds	r3, #132	; 0x84
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	4611      	mov	r1, r2
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	01d2      	lsls	r2, r2, #7
 800773e:	440a      	add	r2, r1
 8007740:	3284      	adds	r2, #132	; 0x84
 8007742:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007746:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007756:	4413      	add	r3, r2
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4619      	mov	r1, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	01db      	lsls	r3, r3, #7
 8007764:	440b      	add	r3, r1
 8007766:	3384      	adds	r3, #132	; 0x84
 8007768:	4619      	mov	r1, r3
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	4313      	orrs	r3, r2
 800776e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	01db      	lsls	r3, r3, #7
 800777a:	4413      	add	r3, r2
 800777c:	3384      	adds	r3, #132	; 0x84
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	4611      	mov	r1, r2
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	01d2      	lsls	r2, r2, #7
 800778a:	440a      	add	r2, r1
 800778c:	3284      	adds	r2, #132	; 0x84
 800778e:	f023 0307 	bic.w	r3, r3, #7
 8007792:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	01db      	lsls	r3, r3, #7
 800779e:	4413      	add	r3, r2
 80077a0:	3384      	adds	r3, #132	; 0x84
 80077a2:	461a      	mov	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80077ba:	041b      	lsls	r3, r3, #16
 80077bc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	061b      	lsls	r3, r3, #24
 80077c4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	01db      	lsls	r3, r3, #7
 80077d0:	4413      	add	r3, r2
 80077d2:	3384      	adds	r3, #132	; 0x84
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	01db      	lsls	r3, r3, #7
 80077e0:	4413      	add	r3, r2
 80077e2:	3384      	adds	r3, #132	; 0x84
 80077e4:	461a      	mov	r2, r3
 80077e6:	2300      	movs	r3, #0
 80077e8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077f0:	461a      	mov	r2, r3
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	431a      	orrs	r2, r3
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	431a      	orrs	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4619      	mov	r1, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	01db      	lsls	r3, r3, #7
 8007804:	440b      	add	r3, r1
 8007806:	3384      	adds	r3, #132	; 0x84
 8007808:	4619      	mov	r1, r3
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	01db      	lsls	r3, r3, #7
 800781a:	4413      	add	r3, r2
 800781c:	3384      	adds	r3, #132	; 0x84
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	4611      	mov	r1, r2
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	01d2      	lsls	r2, r2, #7
 800782a:	440a      	add	r2, r1
 800782c:	3284      	adds	r2, #132	; 0x84
 800782e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007832:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	01db      	lsls	r3, r3, #7
 800783e:	4413      	add	r3, r2
 8007840:	3384      	adds	r3, #132	; 0x84
 8007842:	461a      	mov	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	01db      	lsls	r3, r3, #7
 8007854:	4413      	add	r3, r2
 8007856:	3384      	adds	r3, #132	; 0x84
 8007858:	69da      	ldr	r2, [r3, #28]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4619      	mov	r1, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	01db      	lsls	r3, r3, #7
 8007864:	440b      	add	r3, r1
 8007866:	3384      	adds	r3, #132	; 0x84
 8007868:	4619      	mov	r1, r3
 800786a:	4b58      	ldr	r3, [pc, #352]	; (80079cc <LTDC_SetConfig+0x32c>)
 800786c:	4013      	ands	r3, r2
 800786e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	68f9      	ldr	r1, [r7, #12]
 800787a:	6809      	ldr	r1, [r1, #0]
 800787c:	4608      	mov	r0, r1
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	01c9      	lsls	r1, r1, #7
 8007882:	4401      	add	r1, r0
 8007884:	3184      	adds	r1, #132	; 0x84
 8007886:	4313      	orrs	r3, r2
 8007888:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	01db      	lsls	r3, r3, #7
 8007894:	4413      	add	r3, r2
 8007896:	3384      	adds	r3, #132	; 0x84
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	01db      	lsls	r3, r3, #7
 80078a4:	4413      	add	r3, r2
 80078a6:	3384      	adds	r3, #132	; 0x84
 80078a8:	461a      	mov	r2, r3
 80078aa:	2300      	movs	r3, #0
 80078ac:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	01db      	lsls	r3, r3, #7
 80078b8:	4413      	add	r3, r2
 80078ba:	3384      	adds	r3, #132	; 0x84
 80078bc:	461a      	mov	r2, r3
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d102      	bne.n	80078d2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80078cc:	2304      	movs	r3, #4
 80078ce:	61fb      	str	r3, [r7, #28]
 80078d0:	e01b      	b.n	800790a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d102      	bne.n	80078e0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80078da:	2303      	movs	r3, #3
 80078dc:	61fb      	str	r3, [r7, #28]
 80078de:	e014      	b.n	800790a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d00b      	beq.n	8007900 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d007      	beq.n	8007900 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d003      	beq.n	8007900 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078fc:	2b07      	cmp	r3, #7
 80078fe:	d102      	bne.n	8007906 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007900:	2302      	movs	r3, #2
 8007902:	61fb      	str	r3, [r7, #28]
 8007904:	e001      	b.n	800790a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007906:	2301      	movs	r3, #1
 8007908:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	01db      	lsls	r3, r3, #7
 8007914:	4413      	add	r3, r2
 8007916:	3384      	adds	r3, #132	; 0x84
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	6812      	ldr	r2, [r2, #0]
 800791e:	4611      	mov	r1, r2
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	01d2      	lsls	r2, r2, #7
 8007924:	440a      	add	r2, r1
 8007926:	3284      	adds	r2, #132	; 0x84
 8007928:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800792c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	fb02 f303 	mul.w	r3, r2, r3
 8007938:	041a      	lsls	r2, r3, #16
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	6859      	ldr	r1, [r3, #4]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	1acb      	subs	r3, r1, r3
 8007944:	69f9      	ldr	r1, [r7, #28]
 8007946:	fb01 f303 	mul.w	r3, r1, r3
 800794a:	3307      	adds	r3, #7
 800794c:	68f9      	ldr	r1, [r7, #12]
 800794e:	6809      	ldr	r1, [r1, #0]
 8007950:	4608      	mov	r0, r1
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	01c9      	lsls	r1, r1, #7
 8007956:	4401      	add	r1, r0
 8007958:	3184      	adds	r1, #132	; 0x84
 800795a:	4313      	orrs	r3, r2
 800795c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	01db      	lsls	r3, r3, #7
 8007968:	4413      	add	r3, r2
 800796a:	3384      	adds	r3, #132	; 0x84
 800796c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4619      	mov	r1, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	01db      	lsls	r3, r3, #7
 8007978:	440b      	add	r3, r1
 800797a:	3384      	adds	r3, #132	; 0x84
 800797c:	4619      	mov	r1, r3
 800797e:	4b14      	ldr	r3, [pc, #80]	; (80079d0 <LTDC_SetConfig+0x330>)
 8007980:	4013      	ands	r3, r2
 8007982:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	01db      	lsls	r3, r3, #7
 800798e:	4413      	add	r3, r2
 8007990:	3384      	adds	r3, #132	; 0x84
 8007992:	461a      	mov	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	01db      	lsls	r3, r3, #7
 80079a4:	4413      	add	r3, r2
 80079a6:	3384      	adds	r3, #132	; 0x84
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	6812      	ldr	r2, [r2, #0]
 80079ae:	4611      	mov	r1, r2
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	01d2      	lsls	r2, r2, #7
 80079b4:	440a      	add	r2, r1
 80079b6:	3284      	adds	r2, #132	; 0x84
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	6013      	str	r3, [r2, #0]
}
 80079be:	bf00      	nop
 80079c0:	3724      	adds	r7, #36	; 0x24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	fffff8f8 	.word	0xfffff8f8
 80079d0:	fffff800 	.word	0xfffff800

080079d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80079dc:	4b19      	ldr	r3, [pc, #100]	; (8007a44 <HAL_PWREx_ConfigSupply+0x70>)
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d00a      	beq.n	80079fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80079e8:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <HAL_PWREx_ConfigSupply+0x70>)
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d001      	beq.n	80079fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e01f      	b.n	8007a3a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	e01d      	b.n	8007a3a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80079fe:	4b11      	ldr	r3, [pc, #68]	; (8007a44 <HAL_PWREx_ConfigSupply+0x70>)
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f023 0207 	bic.w	r2, r3, #7
 8007a06:	490f      	ldr	r1, [pc, #60]	; (8007a44 <HAL_PWREx_ConfigSupply+0x70>)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a0e:	f7fc fec5 	bl	800479c <HAL_GetTick>
 8007a12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a14:	e009      	b.n	8007a2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a16:	f7fc fec1 	bl	800479c <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a24:	d901      	bls.n	8007a2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e007      	b.n	8007a3a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a2a:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <HAL_PWREx_ConfigSupply+0x70>)
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a36:	d1ee      	bne.n	8007a16 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	58024800 	.word	0x58024800

08007a48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08c      	sub	sp, #48	; 0x30
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d102      	bne.n	8007a5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	f000 bc1d 	b.w	8008296 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 8087 	beq.w	8007b78 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a6a:	4b99      	ldr	r3, [pc, #612]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a74:	4b96      	ldr	r3, [pc, #600]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7c:	2b10      	cmp	r3, #16
 8007a7e:	d007      	beq.n	8007a90 <HAL_RCC_OscConfig+0x48>
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	2b18      	cmp	r3, #24
 8007a84:	d110      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x60>
 8007a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a88:	f003 0303 	and.w	r3, r3, #3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d10b      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a90:	4b8f      	ldr	r3, [pc, #572]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d06c      	beq.n	8007b76 <HAL_RCC_OscConfig+0x12e>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d168      	bne.n	8007b76 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e3f6      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab0:	d106      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x78>
 8007ab2:	4b87      	ldr	r3, [pc, #540]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a86      	ldr	r2, [pc, #536]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e02e      	b.n	8007b1e <HAL_RCC_OscConfig+0xd6>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10c      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x9a>
 8007ac8:	4b81      	ldr	r3, [pc, #516]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a80      	ldr	r2, [pc, #512]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	4b7e      	ldr	r3, [pc, #504]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a7d      	ldr	r2, [pc, #500]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	e01d      	b.n	8007b1e <HAL_RCC_OscConfig+0xd6>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007aea:	d10c      	bne.n	8007b06 <HAL_RCC_OscConfig+0xbe>
 8007aec:	4b78      	ldr	r3, [pc, #480]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a77      	ldr	r2, [pc, #476]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	4b75      	ldr	r3, [pc, #468]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a74      	ldr	r2, [pc, #464]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	e00b      	b.n	8007b1e <HAL_RCC_OscConfig+0xd6>
 8007b06:	4b72      	ldr	r3, [pc, #456]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a71      	ldr	r2, [pc, #452]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	4b6f      	ldr	r3, [pc, #444]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a6e      	ldr	r2, [pc, #440]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d013      	beq.n	8007b4e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b26:	f7fc fe39 	bl	800479c <HAL_GetTick>
 8007b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b2c:	e008      	b.n	8007b40 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b2e:	f7fc fe35 	bl	800479c <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b64      	cmp	r3, #100	; 0x64
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e3aa      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b40:	4b63      	ldr	r3, [pc, #396]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0f0      	beq.n	8007b2e <HAL_RCC_OscConfig+0xe6>
 8007b4c:	e014      	b.n	8007b78 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b4e:	f7fc fe25 	bl	800479c <HAL_GetTick>
 8007b52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b54:	e008      	b.n	8007b68 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b56:	f7fc fe21 	bl	800479c <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b64      	cmp	r3, #100	; 0x64
 8007b62:	d901      	bls.n	8007b68 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e396      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b68:	4b59      	ldr	r3, [pc, #356]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1f0      	bne.n	8007b56 <HAL_RCC_OscConfig+0x10e>
 8007b74:	e000      	b.n	8007b78 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b76:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 80cb 	beq.w	8007d1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b86:	4b52      	ldr	r3, [pc, #328]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b8e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b90:	4b4f      	ldr	r3, [pc, #316]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <HAL_RCC_OscConfig+0x164>
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	2b18      	cmp	r3, #24
 8007ba0:	d156      	bne.n	8007c50 <HAL_RCC_OscConfig+0x208>
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f003 0303 	and.w	r3, r3, #3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d151      	bne.n	8007c50 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bac:	4b48      	ldr	r3, [pc, #288]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d005      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x17c>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e368      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007bc4:	4b42      	ldr	r3, [pc, #264]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f023 0219 	bic.w	r2, r3, #25
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	493f      	ldr	r1, [pc, #252]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007bd6:	f7fc fde1 	bl	800479c <HAL_GetTick>
 8007bda:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bdc:	e008      	b.n	8007bf0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bde:	f7fc fddd 	bl	800479c <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d901      	bls.n	8007bf0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e352      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bf0:	4b37      	ldr	r3, [pc, #220]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d0f0      	beq.n	8007bde <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bfc:	f7fc fdfe 	bl	80047fc <HAL_GetREVID>
 8007c00:	4603      	mov	r3, r0
 8007c02:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d817      	bhi.n	8007c3a <HAL_RCC_OscConfig+0x1f2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	2b40      	cmp	r3, #64	; 0x40
 8007c10:	d108      	bne.n	8007c24 <HAL_RCC_OscConfig+0x1dc>
 8007c12:	4b2f      	ldr	r3, [pc, #188]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c1a:	4a2d      	ldr	r2, [pc, #180]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c20:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c22:	e07b      	b.n	8007d1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c24:	4b2a      	ldr	r3, [pc, #168]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	031b      	lsls	r3, r3, #12
 8007c32:	4927      	ldr	r1, [pc, #156]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c38:	e070      	b.n	8007d1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c3a:	4b25      	ldr	r3, [pc, #148]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	061b      	lsls	r3, r3, #24
 8007c48:	4921      	ldr	r1, [pc, #132]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c4e:	e065      	b.n	8007d1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d048      	beq.n	8007cea <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c58:	4b1d      	ldr	r3, [pc, #116]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f023 0219 	bic.w	r2, r3, #25
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	491a      	ldr	r1, [pc, #104]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c6a:	f7fc fd97 	bl	800479c <HAL_GetTick>
 8007c6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c70:	e008      	b.n	8007c84 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c72:	f7fc fd93 	bl	800479c <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e308      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c84:	4b12      	ldr	r3, [pc, #72]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0f0      	beq.n	8007c72 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c90:	f7fc fdb4 	bl	80047fc <HAL_GetREVID>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d81a      	bhi.n	8007cd4 <HAL_RCC_OscConfig+0x28c>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	d108      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x270>
 8007ca6:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007cae:	4a08      	ldr	r2, [pc, #32]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cb4:	6053      	str	r3, [r2, #4]
 8007cb6:	e031      	b.n	8007d1c <HAL_RCC_OscConfig+0x2d4>
 8007cb8:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	031b      	lsls	r3, r3, #12
 8007cc6:	4902      	ldr	r1, [pc, #8]	; (8007cd0 <HAL_RCC_OscConfig+0x288>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	604b      	str	r3, [r1, #4]
 8007ccc:	e026      	b.n	8007d1c <HAL_RCC_OscConfig+0x2d4>
 8007cce:	bf00      	nop
 8007cd0:	58024400 	.word	0x58024400
 8007cd4:	4b9a      	ldr	r3, [pc, #616]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	061b      	lsls	r3, r3, #24
 8007ce2:	4997      	ldr	r1, [pc, #604]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	604b      	str	r3, [r1, #4]
 8007ce8:	e018      	b.n	8007d1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cea:	4b95      	ldr	r3, [pc, #596]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a94      	ldr	r2, [pc, #592]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007cf0:	f023 0301 	bic.w	r3, r3, #1
 8007cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf6:	f7fc fd51 	bl	800479c <HAL_GetTick>
 8007cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cfc:	e008      	b.n	8007d10 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cfe:	f7fc fd4d 	bl	800479c <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d901      	bls.n	8007d10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e2c2      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d10:	4b8b      	ldr	r3, [pc, #556]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1f0      	bne.n	8007cfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80a9 	beq.w	8007e7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d2a:	4b85      	ldr	r3, [pc, #532]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d34:	4b82      	ldr	r3, [pc, #520]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d007      	beq.n	8007d50 <HAL_RCC_OscConfig+0x308>
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2b18      	cmp	r3, #24
 8007d44:	d13a      	bne.n	8007dbc <HAL_RCC_OscConfig+0x374>
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f003 0303 	and.w	r3, r3, #3
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d135      	bne.n	8007dbc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d50:	4b7b      	ldr	r3, [pc, #492]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <HAL_RCC_OscConfig+0x320>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	2b80      	cmp	r3, #128	; 0x80
 8007d62:	d001      	beq.n	8007d68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e296      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d68:	f7fc fd48 	bl	80047fc <HAL_GetREVID>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d817      	bhi.n	8007da6 <HAL_RCC_OscConfig+0x35e>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	d108      	bne.n	8007d90 <HAL_RCC_OscConfig+0x348>
 8007d7e:	4b70      	ldr	r3, [pc, #448]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007d86:	4a6e      	ldr	r2, [pc, #440]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007d88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d8c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d8e:	e075      	b.n	8007e7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d90:	4b6b      	ldr	r3, [pc, #428]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	069b      	lsls	r3, r3, #26
 8007d9e:	4968      	ldr	r1, [pc, #416]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007da4:	e06a      	b.n	8007e7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007da6:	4b66      	ldr	r3, [pc, #408]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	061b      	lsls	r3, r3, #24
 8007db4:	4962      	ldr	r1, [pc, #392]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dba:	e05f      	b.n	8007e7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d042      	beq.n	8007e4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007dc4:	4b5e      	ldr	r3, [pc, #376]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a5d      	ldr	r2, [pc, #372]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd0:	f7fc fce4 	bl	800479c <HAL_GetTick>
 8007dd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007dd8:	f7fc fce0 	bl	800479c <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e255      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dea:	4b55      	ldr	r3, [pc, #340]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0f0      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007df6:	f7fc fd01 	bl	80047fc <HAL_GetREVID>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d817      	bhi.n	8007e34 <HAL_RCC_OscConfig+0x3ec>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	d108      	bne.n	8007e1e <HAL_RCC_OscConfig+0x3d6>
 8007e0c:	4b4c      	ldr	r3, [pc, #304]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e14:	4a4a      	ldr	r2, [pc, #296]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007e16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e1a:	6053      	str	r3, [r2, #4]
 8007e1c:	e02e      	b.n	8007e7c <HAL_RCC_OscConfig+0x434>
 8007e1e:	4b48      	ldr	r3, [pc, #288]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	069b      	lsls	r3, r3, #26
 8007e2c:	4944      	ldr	r1, [pc, #272]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	604b      	str	r3, [r1, #4]
 8007e32:	e023      	b.n	8007e7c <HAL_RCC_OscConfig+0x434>
 8007e34:	4b42      	ldr	r3, [pc, #264]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	061b      	lsls	r3, r3, #24
 8007e42:	493f      	ldr	r1, [pc, #252]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60cb      	str	r3, [r1, #12]
 8007e48:	e018      	b.n	8007e7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e4a:	4b3d      	ldr	r3, [pc, #244]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a3c      	ldr	r2, [pc, #240]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e56:	f7fc fca1 	bl	800479c <HAL_GetTick>
 8007e5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e5c:	e008      	b.n	8007e70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e5e:	f7fc fc9d 	bl	800479c <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e212      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e70:	4b33      	ldr	r3, [pc, #204]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1f0      	bne.n	8007e5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d036      	beq.n	8007ef6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d019      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e90:	4b2b      	ldr	r3, [pc, #172]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e94:	4a2a      	ldr	r2, [pc, #168]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e9c:	f7fc fc7e 	bl	800479c <HAL_GetTick>
 8007ea0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ea2:	e008      	b.n	8007eb6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ea4:	f7fc fc7a 	bl	800479c <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d901      	bls.n	8007eb6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e1ef      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007eb6:	4b22      	ldr	r3, [pc, #136]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f0      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x45c>
 8007ec2:	e018      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ec4:	4b1e      	ldr	r3, [pc, #120]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ec8:	4a1d      	ldr	r2, [pc, #116]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007eca:	f023 0301 	bic.w	r3, r3, #1
 8007ece:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed0:	f7fc fc64 	bl	800479c <HAL_GetTick>
 8007ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ed6:	e008      	b.n	8007eea <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ed8:	f7fc fc60 	bl	800479c <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d901      	bls.n	8007eea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e1d5      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007eea:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1f0      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0320 	and.w	r3, r3, #32
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d039      	beq.n	8007f76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01c      	beq.n	8007f44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f0a:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a0c      	ldr	r2, [pc, #48]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007f10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f16:	f7fc fc41 	bl	800479c <HAL_GetTick>
 8007f1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f1c:	e008      	b.n	8007f30 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f1e:	f7fc fc3d 	bl	800479c <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d901      	bls.n	8007f30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e1b2      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f30:	4b03      	ldr	r3, [pc, #12]	; (8007f40 <HAL_RCC_OscConfig+0x4f8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d0f0      	beq.n	8007f1e <HAL_RCC_OscConfig+0x4d6>
 8007f3c:	e01b      	b.n	8007f76 <HAL_RCC_OscConfig+0x52e>
 8007f3e:	bf00      	nop
 8007f40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f44:	4b9b      	ldr	r3, [pc, #620]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a9a      	ldr	r2, [pc, #616]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8007f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f50:	f7fc fc24 	bl	800479c <HAL_GetTick>
 8007f54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f58:	f7fc fc20 	bl	800479c <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e195      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f6a:	4b92      	ldr	r3, [pc, #584]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1f0      	bne.n	8007f58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 8081 	beq.w	8008086 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f84:	4b8c      	ldr	r3, [pc, #560]	; (80081b8 <HAL_RCC_OscConfig+0x770>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a8b      	ldr	r2, [pc, #556]	; (80081b8 <HAL_RCC_OscConfig+0x770>)
 8007f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f90:	f7fc fc04 	bl	800479c <HAL_GetTick>
 8007f94:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f96:	e008      	b.n	8007faa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f98:	f7fc fc00 	bl	800479c <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	2b64      	cmp	r3, #100	; 0x64
 8007fa4:	d901      	bls.n	8007faa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e175      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007faa:	4b83      	ldr	r3, [pc, #524]	; (80081b8 <HAL_RCC_OscConfig+0x770>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0f0      	beq.n	8007f98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d106      	bne.n	8007fcc <HAL_RCC_OscConfig+0x584>
 8007fbe:	4b7d      	ldr	r3, [pc, #500]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	4a7c      	ldr	r2, [pc, #496]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8007fc4:	f043 0301 	orr.w	r3, r3, #1
 8007fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8007fca:	e02d      	b.n	8008028 <HAL_RCC_OscConfig+0x5e0>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10c      	bne.n	8007fee <HAL_RCC_OscConfig+0x5a6>
 8007fd4:	4b77      	ldr	r3, [pc, #476]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8007fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd8:	4a76      	ldr	r2, [pc, #472]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8007fda:	f023 0301 	bic.w	r3, r3, #1
 8007fde:	6713      	str	r3, [r2, #112]	; 0x70
 8007fe0:	4b74      	ldr	r3, [pc, #464]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8007fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe4:	4a73      	ldr	r2, [pc, #460]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8007fe6:	f023 0304 	bic.w	r3, r3, #4
 8007fea:	6713      	str	r3, [r2, #112]	; 0x70
 8007fec:	e01c      	b.n	8008028 <HAL_RCC_OscConfig+0x5e0>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	2b05      	cmp	r3, #5
 8007ff4:	d10c      	bne.n	8008010 <HAL_RCC_OscConfig+0x5c8>
 8007ff6:	4b6f      	ldr	r3, [pc, #444]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffa:	4a6e      	ldr	r2, [pc, #440]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8007ffc:	f043 0304 	orr.w	r3, r3, #4
 8008000:	6713      	str	r3, [r2, #112]	; 0x70
 8008002:	4b6c      	ldr	r3, [pc, #432]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008006:	4a6b      	ldr	r2, [pc, #428]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008008:	f043 0301 	orr.w	r3, r3, #1
 800800c:	6713      	str	r3, [r2, #112]	; 0x70
 800800e:	e00b      	b.n	8008028 <HAL_RCC_OscConfig+0x5e0>
 8008010:	4b68      	ldr	r3, [pc, #416]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008014:	4a67      	ldr	r2, [pc, #412]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008016:	f023 0301 	bic.w	r3, r3, #1
 800801a:	6713      	str	r3, [r2, #112]	; 0x70
 800801c:	4b65      	ldr	r3, [pc, #404]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 800801e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008020:	4a64      	ldr	r2, [pc, #400]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008022:	f023 0304 	bic.w	r3, r3, #4
 8008026:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d015      	beq.n	800805c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008030:	f7fc fbb4 	bl	800479c <HAL_GetTick>
 8008034:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008036:	e00a      	b.n	800804e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008038:	f7fc fbb0 	bl	800479c <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	f241 3288 	movw	r2, #5000	; 0x1388
 8008046:	4293      	cmp	r3, r2
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e123      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800804e:	4b59      	ldr	r3, [pc, #356]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0ee      	beq.n	8008038 <HAL_RCC_OscConfig+0x5f0>
 800805a:	e014      	b.n	8008086 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800805c:	f7fc fb9e 	bl	800479c <HAL_GetTick>
 8008060:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008062:	e00a      	b.n	800807a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008064:	f7fc fb9a 	bl	800479c <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008072:	4293      	cmp	r3, r2
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e10d      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800807a:	4b4e      	ldr	r3, [pc, #312]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 800807c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1ee      	bne.n	8008064 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 8102 	beq.w	8008294 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008090:	4b48      	ldr	r3, [pc, #288]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008098:	2b18      	cmp	r3, #24
 800809a:	f000 80bd 	beq.w	8008218 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	f040 809e 	bne.w	80081e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080a8:	4b42      	ldr	r3, [pc, #264]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a41      	ldr	r2, [pc, #260]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 80080ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b4:	f7fc fb72 	bl	800479c <HAL_GetTick>
 80080b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080ba:	e008      	b.n	80080ce <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080bc:	f7fc fb6e 	bl	800479c <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d901      	bls.n	80080ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e0e3      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080ce:	4b39      	ldr	r3, [pc, #228]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1f0      	bne.n	80080bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080da:	4b36      	ldr	r3, [pc, #216]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 80080dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080de:	4b37      	ldr	r3, [pc, #220]	; (80081bc <HAL_RCC_OscConfig+0x774>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80080ea:	0112      	lsls	r2, r2, #4
 80080ec:	430a      	orrs	r2, r1
 80080ee:	4931      	ldr	r1, [pc, #196]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	628b      	str	r3, [r1, #40]	; 0x28
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f8:	3b01      	subs	r3, #1
 80080fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008102:	3b01      	subs	r3, #1
 8008104:	025b      	lsls	r3, r3, #9
 8008106:	b29b      	uxth	r3, r3
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810e:	3b01      	subs	r3, #1
 8008110:	041b      	lsls	r3, r3, #16
 8008112:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811c:	3b01      	subs	r3, #1
 800811e:	061b      	lsls	r3, r3, #24
 8008120:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008124:	4923      	ldr	r1, [pc, #140]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008126:	4313      	orrs	r3, r2
 8008128:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800812a:	4b22      	ldr	r3, [pc, #136]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	4a21      	ldr	r2, [pc, #132]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008130:	f023 0301 	bic.w	r3, r3, #1
 8008134:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008136:	4b1f      	ldr	r3, [pc, #124]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800813a:	4b21      	ldr	r3, [pc, #132]	; (80081c0 <HAL_RCC_OscConfig+0x778>)
 800813c:	4013      	ands	r3, r2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008142:	00d2      	lsls	r2, r2, #3
 8008144:	491b      	ldr	r1, [pc, #108]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008146:	4313      	orrs	r3, r2
 8008148:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800814a:	4b1a      	ldr	r3, [pc, #104]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	f023 020c 	bic.w	r2, r3, #12
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	4917      	ldr	r1, [pc, #92]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008158:	4313      	orrs	r3, r2
 800815a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800815c:	4b15      	ldr	r3, [pc, #84]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	f023 0202 	bic.w	r2, r3, #2
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008168:	4912      	ldr	r1, [pc, #72]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 800816a:	4313      	orrs	r3, r2
 800816c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800816e:	4b11      	ldr	r3, [pc, #68]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	4a10      	ldr	r2, [pc, #64]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817a:	4b0e      	ldr	r3, [pc, #56]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 800817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817e:	4a0d      	ldr	r2, [pc, #52]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	4a0a      	ldr	r2, [pc, #40]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 800818c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008192:	4b08      	ldr	r3, [pc, #32]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008196:	4a07      	ldr	r2, [pc, #28]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 8008198:	f043 0301 	orr.w	r3, r3, #1
 800819c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800819e:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a04      	ldr	r2, [pc, #16]	; (80081b4 <HAL_RCC_OscConfig+0x76c>)
 80081a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081aa:	f7fc faf7 	bl	800479c <HAL_GetTick>
 80081ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081b0:	e011      	b.n	80081d6 <HAL_RCC_OscConfig+0x78e>
 80081b2:	bf00      	nop
 80081b4:	58024400 	.word	0x58024400
 80081b8:	58024800 	.word	0x58024800
 80081bc:	fffffc0c 	.word	0xfffffc0c
 80081c0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081c4:	f7fc faea 	bl	800479c <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d901      	bls.n	80081d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e05f      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081d6:	4b32      	ldr	r3, [pc, #200]	; (80082a0 <HAL_RCC_OscConfig+0x858>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0f0      	beq.n	80081c4 <HAL_RCC_OscConfig+0x77c>
 80081e2:	e057      	b.n	8008294 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081e4:	4b2e      	ldr	r3, [pc, #184]	; (80082a0 <HAL_RCC_OscConfig+0x858>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a2d      	ldr	r2, [pc, #180]	; (80082a0 <HAL_RCC_OscConfig+0x858>)
 80081ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f0:	f7fc fad4 	bl	800479c <HAL_GetTick>
 80081f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081f6:	e008      	b.n	800820a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081f8:	f7fc fad0 	bl	800479c <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d901      	bls.n	800820a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e045      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800820a:	4b25      	ldr	r3, [pc, #148]	; (80082a0 <HAL_RCC_OscConfig+0x858>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1f0      	bne.n	80081f8 <HAL_RCC_OscConfig+0x7b0>
 8008216:	e03d      	b.n	8008294 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008218:	4b21      	ldr	r3, [pc, #132]	; (80082a0 <HAL_RCC_OscConfig+0x858>)
 800821a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800821e:	4b20      	ldr	r3, [pc, #128]	; (80082a0 <HAL_RCC_OscConfig+0x858>)
 8008220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008222:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	2b01      	cmp	r3, #1
 800822a:	d031      	beq.n	8008290 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f003 0203 	and.w	r2, r3, #3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008236:	429a      	cmp	r2, r3
 8008238:	d12a      	bne.n	8008290 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	091b      	lsrs	r3, r3, #4
 800823e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008246:	429a      	cmp	r2, r3
 8008248:	d122      	bne.n	8008290 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008254:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008256:	429a      	cmp	r2, r3
 8008258:	d11a      	bne.n	8008290 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	0a5b      	lsrs	r3, r3, #9
 800825e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008266:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008268:	429a      	cmp	r2, r3
 800826a:	d111      	bne.n	8008290 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	0c1b      	lsrs	r3, r3, #16
 8008270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800827a:	429a      	cmp	r2, r3
 800827c:	d108      	bne.n	8008290 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	0e1b      	lsrs	r3, r3, #24
 8008282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800828c:	429a      	cmp	r2, r3
 800828e:	d001      	beq.n	8008294 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3730      	adds	r7, #48	; 0x30
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	58024400 	.word	0x58024400

080082a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e19c      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082b8:	4b8a      	ldr	r3, [pc, #552]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d910      	bls.n	80082e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c6:	4b87      	ldr	r3, [pc, #540]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f023 020f 	bic.w	r2, r3, #15
 80082ce:	4985      	ldr	r1, [pc, #532]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082d6:	4b83      	ldr	r3, [pc, #524]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d001      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e184      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d010      	beq.n	8008316 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691a      	ldr	r2, [r3, #16]
 80082f8:	4b7b      	ldr	r3, [pc, #492]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008300:	429a      	cmp	r2, r3
 8008302:	d908      	bls.n	8008316 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008304:	4b78      	ldr	r3, [pc, #480]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	4975      	ldr	r1, [pc, #468]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008312:	4313      	orrs	r3, r2
 8008314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d010      	beq.n	8008344 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	695a      	ldr	r2, [r3, #20]
 8008326:	4b70      	ldr	r3, [pc, #448]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800832e:	429a      	cmp	r2, r3
 8008330:	d908      	bls.n	8008344 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008332:	4b6d      	ldr	r3, [pc, #436]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	496a      	ldr	r1, [pc, #424]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008340:	4313      	orrs	r3, r2
 8008342:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	2b00      	cmp	r3, #0
 800834e:	d010      	beq.n	8008372 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	699a      	ldr	r2, [r3, #24]
 8008354:	4b64      	ldr	r3, [pc, #400]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800835c:	429a      	cmp	r2, r3
 800835e:	d908      	bls.n	8008372 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008360:	4b61      	ldr	r3, [pc, #388]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	495e      	ldr	r1, [pc, #376]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 800836e:	4313      	orrs	r3, r2
 8008370:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d010      	beq.n	80083a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69da      	ldr	r2, [r3, #28]
 8008382:	4b59      	ldr	r3, [pc, #356]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800838a:	429a      	cmp	r2, r3
 800838c:	d908      	bls.n	80083a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800838e:	4b56      	ldr	r3, [pc, #344]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	4953      	ldr	r1, [pc, #332]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 800839c:	4313      	orrs	r3, r2
 800839e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d010      	beq.n	80083ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	4b4d      	ldr	r3, [pc, #308]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	f003 030f 	and.w	r3, r3, #15
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d908      	bls.n	80083ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083bc:	4b4a      	ldr	r3, [pc, #296]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f023 020f 	bic.w	r2, r3, #15
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	4947      	ldr	r1, [pc, #284]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d055      	beq.n	8008486 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80083da:	4b43      	ldr	r3, [pc, #268]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	4940      	ldr	r1, [pc, #256]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d107      	bne.n	8008404 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083f4:	4b3c      	ldr	r3, [pc, #240]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d121      	bne.n	8008444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e0f6      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b03      	cmp	r3, #3
 800840a:	d107      	bne.n	800841c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800840c:	4b36      	ldr	r3, [pc, #216]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d115      	bne.n	8008444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e0ea      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d107      	bne.n	8008434 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008424:	4b30      	ldr	r3, [pc, #192]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842c:	2b00      	cmp	r3, #0
 800842e:	d109      	bne.n	8008444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e0de      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008434:	4b2c      	ldr	r3, [pc, #176]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e0d6      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008444:	4b28      	ldr	r3, [pc, #160]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	f023 0207 	bic.w	r2, r3, #7
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	4925      	ldr	r1, [pc, #148]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008452:	4313      	orrs	r3, r2
 8008454:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008456:	f7fc f9a1 	bl	800479c <HAL_GetTick>
 800845a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800845c:	e00a      	b.n	8008474 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800845e:	f7fc f99d 	bl	800479c <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	f241 3288 	movw	r2, #5000	; 0x1388
 800846c:	4293      	cmp	r3, r2
 800846e:	d901      	bls.n	8008474 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e0be      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008474:	4b1c      	ldr	r3, [pc, #112]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	429a      	cmp	r2, r3
 8008484:	d1eb      	bne.n	800845e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d010      	beq.n	80084b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	4b14      	ldr	r3, [pc, #80]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	f003 030f 	and.w	r3, r3, #15
 800849e:	429a      	cmp	r2, r3
 80084a0:	d208      	bcs.n	80084b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084a2:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	f023 020f 	bic.w	r2, r3, #15
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	490e      	ldr	r1, [pc, #56]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084b4:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 030f 	and.w	r3, r3, #15
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d214      	bcs.n	80084ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084c2:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f023 020f 	bic.w	r2, r3, #15
 80084ca:	4906      	ldr	r1, [pc, #24]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084d2:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d005      	beq.n	80084ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e086      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
 80084e4:	52002000 	.word	0x52002000
 80084e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d010      	beq.n	800851a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691a      	ldr	r2, [r3, #16]
 80084fc:	4b3f      	ldr	r3, [pc, #252]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008504:	429a      	cmp	r2, r3
 8008506:	d208      	bcs.n	800851a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008508:	4b3c      	ldr	r3, [pc, #240]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	4939      	ldr	r1, [pc, #228]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008516:	4313      	orrs	r3, r2
 8008518:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0308 	and.w	r3, r3, #8
 8008522:	2b00      	cmp	r3, #0
 8008524:	d010      	beq.n	8008548 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695a      	ldr	r2, [r3, #20]
 800852a:	4b34      	ldr	r3, [pc, #208]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008532:	429a      	cmp	r2, r3
 8008534:	d208      	bcs.n	8008548 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008536:	4b31      	ldr	r3, [pc, #196]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	492e      	ldr	r1, [pc, #184]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008544:	4313      	orrs	r3, r2
 8008546:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0310 	and.w	r3, r3, #16
 8008550:	2b00      	cmp	r3, #0
 8008552:	d010      	beq.n	8008576 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	699a      	ldr	r2, [r3, #24]
 8008558:	4b28      	ldr	r3, [pc, #160]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008560:	429a      	cmp	r2, r3
 8008562:	d208      	bcs.n	8008576 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008564:	4b25      	ldr	r3, [pc, #148]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	4922      	ldr	r1, [pc, #136]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008572:	4313      	orrs	r3, r2
 8008574:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0320 	and.w	r3, r3, #32
 800857e:	2b00      	cmp	r3, #0
 8008580:	d010      	beq.n	80085a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69da      	ldr	r2, [r3, #28]
 8008586:	4b1d      	ldr	r3, [pc, #116]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800858e:	429a      	cmp	r2, r3
 8008590:	d208      	bcs.n	80085a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008592:	4b1a      	ldr	r3, [pc, #104]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	4917      	ldr	r1, [pc, #92]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80085a4:	f000 f834 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 80085a8:	4602      	mov	r2, r0
 80085aa:	4b14      	ldr	r3, [pc, #80]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	0a1b      	lsrs	r3, r3, #8
 80085b0:	f003 030f 	and.w	r3, r3, #15
 80085b4:	4912      	ldr	r1, [pc, #72]	; (8008600 <HAL_RCC_ClockConfig+0x35c>)
 80085b6:	5ccb      	ldrb	r3, [r1, r3]
 80085b8:	f003 031f 	and.w	r3, r3, #31
 80085bc:	fa22 f303 	lsr.w	r3, r2, r3
 80085c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80085c2:	4b0e      	ldr	r3, [pc, #56]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	4a0d      	ldr	r2, [pc, #52]	; (8008600 <HAL_RCC_ClockConfig+0x35c>)
 80085cc:	5cd3      	ldrb	r3, [r2, r3]
 80085ce:	f003 031f 	and.w	r3, r3, #31
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	fa22 f303 	lsr.w	r3, r2, r3
 80085d8:	4a0a      	ldr	r2, [pc, #40]	; (8008604 <HAL_RCC_ClockConfig+0x360>)
 80085da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085dc:	4a0a      	ldr	r2, [pc, #40]	; (8008608 <HAL_RCC_ClockConfig+0x364>)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80085e2:	4b0a      	ldr	r3, [pc, #40]	; (800860c <HAL_RCC_ClockConfig+0x368>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fb fa52 	bl	8003a90 <HAL_InitTick>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	58024400 	.word	0x58024400
 8008600:	0802b604 	.word	0x0802b604
 8008604:	20000130 	.word	0x20000130
 8008608:	2000012c 	.word	0x2000012c
 800860c:	20000134 	.word	0x20000134

08008610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008610:	b480      	push	{r7}
 8008612:	b089      	sub	sp, #36	; 0x24
 8008614:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008616:	4bb3      	ldr	r3, [pc, #716]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800861e:	2b18      	cmp	r3, #24
 8008620:	f200 8155 	bhi.w	80088ce <HAL_RCC_GetSysClockFreq+0x2be>
 8008624:	a201      	add	r2, pc, #4	; (adr r2, 800862c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862a:	bf00      	nop
 800862c:	08008691 	.word	0x08008691
 8008630:	080088cf 	.word	0x080088cf
 8008634:	080088cf 	.word	0x080088cf
 8008638:	080088cf 	.word	0x080088cf
 800863c:	080088cf 	.word	0x080088cf
 8008640:	080088cf 	.word	0x080088cf
 8008644:	080088cf 	.word	0x080088cf
 8008648:	080088cf 	.word	0x080088cf
 800864c:	080086b7 	.word	0x080086b7
 8008650:	080088cf 	.word	0x080088cf
 8008654:	080088cf 	.word	0x080088cf
 8008658:	080088cf 	.word	0x080088cf
 800865c:	080088cf 	.word	0x080088cf
 8008660:	080088cf 	.word	0x080088cf
 8008664:	080088cf 	.word	0x080088cf
 8008668:	080088cf 	.word	0x080088cf
 800866c:	080086bd 	.word	0x080086bd
 8008670:	080088cf 	.word	0x080088cf
 8008674:	080088cf 	.word	0x080088cf
 8008678:	080088cf 	.word	0x080088cf
 800867c:	080088cf 	.word	0x080088cf
 8008680:	080088cf 	.word	0x080088cf
 8008684:	080088cf 	.word	0x080088cf
 8008688:	080088cf 	.word	0x080088cf
 800868c:	080086c3 	.word	0x080086c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008690:	4b94      	ldr	r3, [pc, #592]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b00      	cmp	r3, #0
 800869a:	d009      	beq.n	80086b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800869c:	4b91      	ldr	r3, [pc, #580]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	08db      	lsrs	r3, r3, #3
 80086a2:	f003 0303 	and.w	r3, r3, #3
 80086a6:	4a90      	ldr	r2, [pc, #576]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086a8:	fa22 f303 	lsr.w	r3, r2, r3
 80086ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80086ae:	e111      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80086b0:	4b8d      	ldr	r3, [pc, #564]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086b2:	61bb      	str	r3, [r7, #24]
    break;
 80086b4:	e10e      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80086b6:	4b8d      	ldr	r3, [pc, #564]	; (80088ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80086b8:	61bb      	str	r3, [r7, #24]
    break;
 80086ba:	e10b      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80086bc:	4b8c      	ldr	r3, [pc, #560]	; (80088f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80086be:	61bb      	str	r3, [r7, #24]
    break;
 80086c0:	e108      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086c2:	4b88      	ldr	r3, [pc, #544]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80086cc:	4b85      	ldr	r3, [pc, #532]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	091b      	lsrs	r3, r3, #4
 80086d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80086d8:	4b82      	ldr	r3, [pc, #520]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086e2:	4b80      	ldr	r3, [pc, #512]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e6:	08db      	lsrs	r3, r3, #3
 80086e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	fb02 f303 	mul.w	r3, r2, r3
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 80e1 	beq.w	80088c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2b02      	cmp	r3, #2
 800870a:	f000 8083 	beq.w	8008814 <HAL_RCC_GetSysClockFreq+0x204>
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b02      	cmp	r3, #2
 8008712:	f200 80a1 	bhi.w	8008858 <HAL_RCC_GetSysClockFreq+0x248>
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_RCC_GetSysClockFreq+0x114>
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d056      	beq.n	80087d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008722:	e099      	b.n	8008858 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008724:	4b6f      	ldr	r3, [pc, #444]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0320 	and.w	r3, r3, #32
 800872c:	2b00      	cmp	r3, #0
 800872e:	d02d      	beq.n	800878c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008730:	4b6c      	ldr	r3, [pc, #432]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	08db      	lsrs	r3, r3, #3
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	4a6b      	ldr	r2, [pc, #428]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800873c:	fa22 f303 	lsr.w	r3, r2, r3
 8008740:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875a:	4b62      	ldr	r3, [pc, #392]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876a:	ed97 6a02 	vldr	s12, [r7, #8]
 800876e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800877e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008786:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800878a:	e087      	b.n	800889c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008796:	eddf 6a58 	vldr	s13, [pc, #352]	; 80088f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800879a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879e:	4b51      	ldr	r3, [pc, #324]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80087b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ce:	e065      	b.n	800889c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	ee07 3a90 	vmov	s15, r3
 80087d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80088fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80087de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e2:	4b40      	ldr	r3, [pc, #256]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80087f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008812:	e043      	b.n	800889c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008900 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008826:	4b2f      	ldr	r3, [pc, #188]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008836:	ed97 6a02 	vldr	s12, [r7, #8]
 800883a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800883e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008856:	e021      	b.n	800889c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008862:	eddf 6a26 	vldr	s13, [pc, #152]	; 80088fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886a:	4b1e      	ldr	r3, [pc, #120]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887a:	ed97 6a02 	vldr	s12, [r7, #8]
 800887e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800889a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800889c:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800889e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a0:	0a5b      	lsrs	r3, r3, #9
 80088a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a6:	3301      	adds	r3, #1
 80088a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	ee07 3a90 	vmov	s15, r3
 80088b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80088b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088c0:	ee17 3a90 	vmov	r3, s15
 80088c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80088c6:	e005      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61bb      	str	r3, [r7, #24]
    break;
 80088cc:	e002      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80088ce:	4b07      	ldr	r3, [pc, #28]	; (80088ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088d0:	61bb      	str	r3, [r7, #24]
    break;
 80088d2:	bf00      	nop
  }

  return sysclockfreq;
 80088d4:	69bb      	ldr	r3, [r7, #24]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3724      	adds	r7, #36	; 0x24
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	58024400 	.word	0x58024400
 80088e8:	03d09000 	.word	0x03d09000
 80088ec:	003d0900 	.word	0x003d0900
 80088f0:	007a1200 	.word	0x007a1200
 80088f4:	46000000 	.word	0x46000000
 80088f8:	4c742400 	.word	0x4c742400
 80088fc:	4a742400 	.word	0x4a742400
 8008900:	4af42400 	.word	0x4af42400

08008904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800890a:	f7ff fe81 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 800890e:	4602      	mov	r2, r0
 8008910:	4b10      	ldr	r3, [pc, #64]	; (8008954 <HAL_RCC_GetHCLKFreq+0x50>)
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	0a1b      	lsrs	r3, r3, #8
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	490f      	ldr	r1, [pc, #60]	; (8008958 <HAL_RCC_GetHCLKFreq+0x54>)
 800891c:	5ccb      	ldrb	r3, [r1, r3]
 800891e:	f003 031f 	and.w	r3, r3, #31
 8008922:	fa22 f303 	lsr.w	r3, r2, r3
 8008926:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <HAL_RCC_GetHCLKFreq+0x50>)
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	4a09      	ldr	r2, [pc, #36]	; (8008958 <HAL_RCC_GetHCLKFreq+0x54>)
 8008932:	5cd3      	ldrb	r3, [r2, r3]
 8008934:	f003 031f 	and.w	r3, r3, #31
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	fa22 f303 	lsr.w	r3, r2, r3
 800893e:	4a07      	ldr	r2, [pc, #28]	; (800895c <HAL_RCC_GetHCLKFreq+0x58>)
 8008940:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008942:	4a07      	ldr	r2, [pc, #28]	; (8008960 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008948:	4b04      	ldr	r3, [pc, #16]	; (800895c <HAL_RCC_GetHCLKFreq+0x58>)
 800894a:	681b      	ldr	r3, [r3, #0]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	58024400 	.word	0x58024400
 8008958:	0802b604 	.word	0x0802b604
 800895c:	20000130 	.word	0x20000130
 8008960:	2000012c 	.word	0x2000012c

08008964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008968:	f7ff ffcc 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 800896c:	4602      	mov	r2, r0
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	091b      	lsrs	r3, r3, #4
 8008974:	f003 0307 	and.w	r3, r3, #7
 8008978:	4904      	ldr	r1, [pc, #16]	; (800898c <HAL_RCC_GetPCLK1Freq+0x28>)
 800897a:	5ccb      	ldrb	r3, [r1, r3]
 800897c:	f003 031f 	and.w	r3, r3, #31
 8008980:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008984:	4618      	mov	r0, r3
 8008986:	bd80      	pop	{r7, pc}
 8008988:	58024400 	.word	0x58024400
 800898c:	0802b604 	.word	0x0802b604

08008990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008994:	f7ff ffb6 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 8008998:	4602      	mov	r2, r0
 800899a:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	0a1b      	lsrs	r3, r3, #8
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	4904      	ldr	r1, [pc, #16]	; (80089b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80089a6:	5ccb      	ldrb	r3, [r1, r3]
 80089a8:	f003 031f 	and.w	r3, r3, #31
 80089ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	58024400 	.word	0x58024400
 80089b8:	0802b604 	.word	0x0802b604

080089bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	223f      	movs	r2, #63	; 0x3f
 80089ca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80089cc:	4b1a      	ldr	r3, [pc, #104]	; (8008a38 <HAL_RCC_GetClockConfig+0x7c>)
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	f003 0207 	and.w	r2, r3, #7
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80089d8:	4b17      	ldr	r3, [pc, #92]	; (8008a38 <HAL_RCC_GetClockConfig+0x7c>)
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80089e4:	4b14      	ldr	r3, [pc, #80]	; (8008a38 <HAL_RCC_GetClockConfig+0x7c>)
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	f003 020f 	and.w	r2, r3, #15
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80089f0:	4b11      	ldr	r3, [pc, #68]	; (8008a38 <HAL_RCC_GetClockConfig+0x7c>)
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80089fc:	4b0e      	ldr	r3, [pc, #56]	; (8008a38 <HAL_RCC_GetClockConfig+0x7c>)
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008a08:	4b0b      	ldr	r3, [pc, #44]	; (8008a38 <HAL_RCC_GetClockConfig+0x7c>)
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008a14:	4b08      	ldr	r3, [pc, #32]	; (8008a38 <HAL_RCC_GetClockConfig+0x7c>)
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008a20:	4b06      	ldr	r3, [pc, #24]	; (8008a3c <HAL_RCC_GetClockConfig+0x80>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 020f 	and.w	r2, r3, #15
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	601a      	str	r2, [r3, #0]
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	52002000 	.word	0x52002000

08008a40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a48:	2300      	movs	r3, #0
 8008a4a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d03f      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a64:	d02a      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008a66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a6a:	d824      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a70:	d018      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a76:	d81e      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a80:	d007      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008a82:	e018      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a84:	4ba3      	ldr	r3, [pc, #652]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	4aa2      	ldr	r2, [pc, #648]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a90:	e015      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3304      	adds	r3, #4
 8008a96:	2102      	movs	r1, #2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f001 fff9 	bl	800aa90 <RCCEx_PLL2_Config>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008aa2:	e00c      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	3324      	adds	r3, #36	; 0x24
 8008aa8:	2102      	movs	r1, #2
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f002 f8a2 	bl	800abf4 <RCCEx_PLL3_Config>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ab4:	e003      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8008aba:	e000      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d109      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008ac4:	4b93      	ldr	r3, [pc, #588]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ad0:	4990      	ldr	r1, [pc, #576]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	650b      	str	r3, [r1, #80]	; 0x50
 8008ad6:	e001      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d03d      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d826      	bhi.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008af0:	a201      	add	r2, pc, #4	; (adr r2, 8008af8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af6:	bf00      	nop
 8008af8:	08008b0d 	.word	0x08008b0d
 8008afc:	08008b1b 	.word	0x08008b1b
 8008b00:	08008b2d 	.word	0x08008b2d
 8008b04:	08008b45 	.word	0x08008b45
 8008b08:	08008b45 	.word	0x08008b45
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b0c:	4b81      	ldr	r3, [pc, #516]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	4a80      	ldr	r2, [pc, #512]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b18:	e015      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	2100      	movs	r1, #0
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 ffb5 	bl	800aa90 <RCCEx_PLL2_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b2a:	e00c      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3324      	adds	r3, #36	; 0x24
 8008b30:	2100      	movs	r1, #0
 8008b32:	4618      	mov	r0, r3
 8008b34:	f002 f85e 	bl	800abf4 <RCCEx_PLL3_Config>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b3c:	e003      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]
      break;
 8008b42:	e000      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d109      	bne.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b4c:	4b71      	ldr	r3, [pc, #452]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b50:	f023 0207 	bic.w	r2, r3, #7
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b58:	496e      	ldr	r1, [pc, #440]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8008b5e:	e001      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
 8008b62:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d042      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b78:	d02b      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b7e:	d825      	bhi.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b80:	2bc0      	cmp	r3, #192	; 0xc0
 8008b82:	d028      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008b84:	2bc0      	cmp	r3, #192	; 0xc0
 8008b86:	d821      	bhi.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b88:	2b80      	cmp	r3, #128	; 0x80
 8008b8a:	d016      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008b8c:	2b80      	cmp	r3, #128	; 0x80
 8008b8e:	d81d      	bhi.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008b94:	2b40      	cmp	r3, #64	; 0x40
 8008b96:	d007      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008b98:	e018      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b9a:	4b5e      	ldr	r3, [pc, #376]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9e:	4a5d      	ldr	r2, [pc, #372]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008ba6:	e017      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3304      	adds	r3, #4
 8008bac:	2100      	movs	r1, #0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f001 ff6e 	bl	800aa90 <RCCEx_PLL2_Config>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008bb8:	e00e      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3324      	adds	r3, #36	; 0x24
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f002 f817 	bl	800abf4 <RCCEx_PLL3_Config>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008bca:	e005      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd0:	e002      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008bd2:	bf00      	nop
 8008bd4:	e000      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bd8:	7dfb      	ldrb	r3, [r7, #23]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008bde:	4b4d      	ldr	r3, [pc, #308]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bea:	494a      	ldr	r1, [pc, #296]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	650b      	str	r3, [r1, #80]	; 0x50
 8008bf0:	e001      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d049      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c0c:	d030      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008c0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c12:	d82a      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c18:	d02c      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008c1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c1e:	d824      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c24:	d018      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c2a:	d81e      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c34:	d007      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008c36:	e018      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c38:	4b36      	ldr	r3, [pc, #216]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3c:	4a35      	ldr	r2, [pc, #212]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c44:	e017      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	3304      	adds	r3, #4
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 ff1f 	bl	800aa90 <RCCEx_PLL2_Config>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008c56:	e00e      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3324      	adds	r3, #36	; 0x24
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f001 ffc8 	bl	800abf4 <RCCEx_PLL3_Config>
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c68:	e005      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c6e:	e002      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008c70:	bf00      	nop
 8008c72:	e000      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c7c:	4b25      	ldr	r3, [pc, #148]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c80:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c8a:	4922      	ldr	r1, [pc, #136]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	658b      	str	r3, [r1, #88]	; 0x58
 8008c90:	e001      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
 8008c94:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d04b      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cac:	d030      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008cae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cb2:	d82a      	bhi.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008cb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008cb8:	d02e      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008cba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008cbe:	d824      	bhi.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cc4:	d018      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008cc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cca:	d81e      	bhi.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cd4:	d007      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008cd6:	e018      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cd8:	4b0e      	ldr	r3, [pc, #56]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	4a0d      	ldr	r2, [pc, #52]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ce4:	e019      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 fecf 	bl	800aa90 <RCCEx_PLL2_Config>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008cf6:	e010      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3324      	adds	r3, #36	; 0x24
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f001 ff78 	bl	800abf4 <RCCEx_PLL3_Config>
 8008d04:	4603      	mov	r3, r0
 8008d06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d08:	e007      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d0e:	e004      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008d10:	bf00      	nop
 8008d12:	e002      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008d14:	58024400 	.word	0x58024400
      break;
 8008d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10a      	bne.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008d20:	4b99      	ldr	r3, [pc, #612]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d24:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d2e:	4996      	ldr	r1, [pc, #600]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	658b      	str	r3, [r1, #88]	; 0x58
 8008d34:	e001      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
 8008d38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d032      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d4a:	2b30      	cmp	r3, #48	; 0x30
 8008d4c:	d01c      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008d4e:	2b30      	cmp	r3, #48	; 0x30
 8008d50:	d817      	bhi.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	d00c      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008d56:	2b20      	cmp	r3, #32
 8008d58:	d813      	bhi.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d016      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008d5e:	2b10      	cmp	r3, #16
 8008d60:	d10f      	bne.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d62:	4b89      	ldr	r3, [pc, #548]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d66:	4a88      	ldr	r2, [pc, #544]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008d6e:	e00e      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3304      	adds	r3, #4
 8008d74:	2102      	movs	r1, #2
 8008d76:	4618      	mov	r0, r3
 8008d78:	f001 fe8a 	bl	800aa90 <RCCEx_PLL2_Config>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008d80:	e005      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	75fb      	strb	r3, [r7, #23]
      break;
 8008d86:	e002      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008d88:	bf00      	nop
 8008d8a:	e000      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d109      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d94:	4b7c      	ldr	r3, [pc, #496]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008da0:	4979      	ldr	r1, [pc, #484]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008da6:	e001      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
 8008daa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d047      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dc0:	d030      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dc6:	d82a      	bhi.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008dc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dcc:	d02c      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008dce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dd2:	d824      	bhi.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd8:	d018      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dde:	d81e      	bhi.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de8:	d007      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008dea:	e018      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dec:	4b66      	ldr	r3, [pc, #408]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df0:	4a65      	ldr	r2, [pc, #404]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008df6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008df8:	e017      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 fe45 	bl	800aa90 <RCCEx_PLL2_Config>
 8008e06:	4603      	mov	r3, r0
 8008e08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e0a:	e00e      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	3324      	adds	r3, #36	; 0x24
 8008e10:	2100      	movs	r1, #0
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 feee 	bl	800abf4 <RCCEx_PLL3_Config>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e1c:	e005      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	75fb      	strb	r3, [r7, #23]
      break;
 8008e22:	e002      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008e24:	bf00      	nop
 8008e26:	e000      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d109      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e30:	4b55      	ldr	r3, [pc, #340]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e34:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3c:	4952      	ldr	r1, [pc, #328]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	650b      	str	r3, [r1, #80]	; 0x50
 8008e42:	e001      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d049      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e5c:	d02e      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e62:	d828      	bhi.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e68:	d02a      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008e6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e6e:	d822      	bhi.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e74:	d026      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008e76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e7a:	d81c      	bhi.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e80:	d010      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e86:	d816      	bhi.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01d      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e90:	d111      	bne.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3304      	adds	r3, #4
 8008e96:	2101      	movs	r1, #1
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 fdf9 	bl	800aa90 <RCCEx_PLL2_Config>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008ea2:	e012      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3324      	adds	r3, #36	; 0x24
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f001 fea2 	bl	800abf4 <RCCEx_PLL3_Config>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008eb4:	e009      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8008eba:	e006      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008ebc:	bf00      	nop
 8008ebe:	e004      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008ec0:	bf00      	nop
 8008ec2:	e002      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008ec4:	bf00      	nop
 8008ec6:	e000      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d109      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ed0:	4b2d      	ldr	r3, [pc, #180]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008edc:	492a      	ldr	r1, [pc, #168]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	650b      	str	r3, [r1, #80]	; 0x50
 8008ee2:	e001      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d04d      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008efe:	d02e      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f04:	d828      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0a:	d02a      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f10:	d822      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008f12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f16:	d026      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008f18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f1c:	d81c      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f22:	d010      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f28:	d816      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d01d      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f32:	d111      	bne.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3304      	adds	r3, #4
 8008f38:	2101      	movs	r1, #1
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f001 fda8 	bl	800aa90 <RCCEx_PLL2_Config>
 8008f40:	4603      	mov	r3, r0
 8008f42:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f44:	e012      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3324      	adds	r3, #36	; 0x24
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f001 fe51 	bl	800abf4 <RCCEx_PLL3_Config>
 8008f52:	4603      	mov	r3, r0
 8008f54:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f56:	e009      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f5c:	e006      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f5e:	bf00      	nop
 8008f60:	e004      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f62:	bf00      	nop
 8008f64:	e002      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f66:	bf00      	nop
 8008f68:	e000      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10c      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f72:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f80:	4901      	ldr	r1, [pc, #4]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	658b      	str	r3, [r1, #88]	; 0x58
 8008f86:	e003      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
 8008f8e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d02f      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa4:	d00e      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008faa:	d814      	bhi.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d015      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fb4:	d10f      	bne.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb6:	4baf      	ldr	r3, [pc, #700]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fba:	4aae      	ldr	r2, [pc, #696]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008fc2:	e00c      	b.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	2101      	movs	r1, #1
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 fd60 	bl	800aa90 <RCCEx_PLL2_Config>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008fd4:	e003      	b.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8008fda:	e000      	b.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fde:	7dfb      	ldrb	r3, [r7, #23]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d109      	bne.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008fe4:	4ba3      	ldr	r3, [pc, #652]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff0:	49a0      	ldr	r1, [pc, #640]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	650b      	str	r3, [r1, #80]	; 0x50
 8008ff6:	e001      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d032      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800900c:	2b03      	cmp	r3, #3
 800900e:	d81b      	bhi.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009010:	a201      	add	r2, pc, #4	; (adr r2, 8009018 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009016:	bf00      	nop
 8009018:	0800904f 	.word	0x0800904f
 800901c:	08009029 	.word	0x08009029
 8009020:	08009037 	.word	0x08009037
 8009024:	0800904f 	.word	0x0800904f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009028:	4b92      	ldr	r3, [pc, #584]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800902a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902c:	4a91      	ldr	r2, [pc, #580]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800902e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009032:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009034:	e00c      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3304      	adds	r3, #4
 800903a:	2102      	movs	r1, #2
 800903c:	4618      	mov	r0, r3
 800903e:	f001 fd27 	bl	800aa90 <RCCEx_PLL2_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009046:	e003      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	75fb      	strb	r3, [r7, #23]
      break;
 800904c:	e000      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800904e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d109      	bne.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009056:	4b87      	ldr	r3, [pc, #540]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800905a:	f023 0203 	bic.w	r2, r3, #3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009062:	4984      	ldr	r1, [pc, #528]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009064:	4313      	orrs	r3, r2
 8009066:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009068:	e001      	b.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 8086 	beq.w	8009188 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800907c:	4b7e      	ldr	r3, [pc, #504]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a7d      	ldr	r2, [pc, #500]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009086:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009088:	f7fb fb88 	bl	800479c <HAL_GetTick>
 800908c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800908e:	e009      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009090:	f7fb fb84 	bl	800479c <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	2b64      	cmp	r3, #100	; 0x64
 800909c:	d902      	bls.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	75fb      	strb	r3, [r7, #23]
        break;
 80090a2:	e005      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090a4:	4b74      	ldr	r3, [pc, #464]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0ef      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d166      	bne.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80090b6:	4b6f      	ldr	r3, [pc, #444]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090c0:	4053      	eors	r3, r2
 80090c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d013      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090ca:	4b6a      	ldr	r3, [pc, #424]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090d2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090d4:	4b67      	ldr	r3, [pc, #412]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d8:	4a66      	ldr	r2, [pc, #408]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090de:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090e0:	4b64      	ldr	r3, [pc, #400]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e4:	4a63      	ldr	r2, [pc, #396]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090ec:	4a61      	ldr	r2, [pc, #388]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090fc:	d115      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fe:	f7fb fb4d 	bl	800479c <HAL_GetTick>
 8009102:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009104:	e00b      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009106:	f7fb fb49 	bl	800479c <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	f241 3288 	movw	r2, #5000	; 0x1388
 8009114:	4293      	cmp	r3, r2
 8009116:	d902      	bls.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	75fb      	strb	r3, [r7, #23]
            break;
 800911c:	e005      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800911e:	4b55      	ldr	r3, [pc, #340]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0ed      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800912a:	7dfb      	ldrb	r3, [r7, #23]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d126      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800913a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800913e:	d10d      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009140:	4b4c      	ldr	r3, [pc, #304]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800914e:	0919      	lsrs	r1, r3, #4
 8009150:	4b4a      	ldr	r3, [pc, #296]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009152:	400b      	ands	r3, r1
 8009154:	4947      	ldr	r1, [pc, #284]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009156:	4313      	orrs	r3, r2
 8009158:	610b      	str	r3, [r1, #16]
 800915a:	e005      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800915c:	4b45      	ldr	r3, [pc, #276]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	4a44      	ldr	r2, [pc, #272]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009162:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009166:	6113      	str	r3, [r2, #16]
 8009168:	4b42      	ldr	r3, [pc, #264]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800916a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009176:	493f      	ldr	r1, [pc, #252]	; (8009274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009178:	4313      	orrs	r3, r2
 800917a:	670b      	str	r3, [r1, #112]	; 0x70
 800917c:	e004      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	75bb      	strb	r3, [r7, #22]
 8009182:	e001      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009184:	7dfb      	ldrb	r3, [r7, #23]
 8009186:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0301 	and.w	r3, r3, #1
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 8085 	beq.w	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800919a:	2b28      	cmp	r3, #40	; 0x28
 800919c:	d866      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800919e:	a201      	add	r2, pc, #4	; (adr r2, 80091a4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80091a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a4:	08009281 	.word	0x08009281
 80091a8:	0800926d 	.word	0x0800926d
 80091ac:	0800926d 	.word	0x0800926d
 80091b0:	0800926d 	.word	0x0800926d
 80091b4:	0800926d 	.word	0x0800926d
 80091b8:	0800926d 	.word	0x0800926d
 80091bc:	0800926d 	.word	0x0800926d
 80091c0:	0800926d 	.word	0x0800926d
 80091c4:	08009249 	.word	0x08009249
 80091c8:	0800926d 	.word	0x0800926d
 80091cc:	0800926d 	.word	0x0800926d
 80091d0:	0800926d 	.word	0x0800926d
 80091d4:	0800926d 	.word	0x0800926d
 80091d8:	0800926d 	.word	0x0800926d
 80091dc:	0800926d 	.word	0x0800926d
 80091e0:	0800926d 	.word	0x0800926d
 80091e4:	0800925b 	.word	0x0800925b
 80091e8:	0800926d 	.word	0x0800926d
 80091ec:	0800926d 	.word	0x0800926d
 80091f0:	0800926d 	.word	0x0800926d
 80091f4:	0800926d 	.word	0x0800926d
 80091f8:	0800926d 	.word	0x0800926d
 80091fc:	0800926d 	.word	0x0800926d
 8009200:	0800926d 	.word	0x0800926d
 8009204:	08009281 	.word	0x08009281
 8009208:	0800926d 	.word	0x0800926d
 800920c:	0800926d 	.word	0x0800926d
 8009210:	0800926d 	.word	0x0800926d
 8009214:	0800926d 	.word	0x0800926d
 8009218:	0800926d 	.word	0x0800926d
 800921c:	0800926d 	.word	0x0800926d
 8009220:	0800926d 	.word	0x0800926d
 8009224:	08009281 	.word	0x08009281
 8009228:	0800926d 	.word	0x0800926d
 800922c:	0800926d 	.word	0x0800926d
 8009230:	0800926d 	.word	0x0800926d
 8009234:	0800926d 	.word	0x0800926d
 8009238:	0800926d 	.word	0x0800926d
 800923c:	0800926d 	.word	0x0800926d
 8009240:	0800926d 	.word	0x0800926d
 8009244:	08009281 	.word	0x08009281
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3304      	adds	r3, #4
 800924c:	2101      	movs	r1, #1
 800924e:	4618      	mov	r0, r3
 8009250:	f001 fc1e 	bl	800aa90 <RCCEx_PLL2_Config>
 8009254:	4603      	mov	r3, r0
 8009256:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009258:	e013      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3324      	adds	r3, #36	; 0x24
 800925e:	2101      	movs	r1, #1
 8009260:	4618      	mov	r0, r3
 8009262:	f001 fcc7 	bl	800abf4 <RCCEx_PLL3_Config>
 8009266:	4603      	mov	r3, r0
 8009268:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800926a:	e00a      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	75fb      	strb	r3, [r7, #23]
      break;
 8009270:	e007      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009272:	bf00      	nop
 8009274:	58024400 	.word	0x58024400
 8009278:	58024800 	.word	0x58024800
 800927c:	00ffffcf 	.word	0x00ffffcf
      break;
 8009280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d109      	bne.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009288:	4b96      	ldr	r3, [pc, #600]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800928a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009294:	4993      	ldr	r1, [pc, #588]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009296:	4313      	orrs	r3, r2
 8009298:	654b      	str	r3, [r1, #84]	; 0x54
 800929a:	e001      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800929c:	7dfb      	ldrb	r3, [r7, #23]
 800929e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d038      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092b0:	2b05      	cmp	r3, #5
 80092b2:	d821      	bhi.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80092b4:	a201      	add	r2, pc, #4	; (adr r2, 80092bc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80092b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ba:	bf00      	nop
 80092bc:	080092ff 	.word	0x080092ff
 80092c0:	080092d5 	.word	0x080092d5
 80092c4:	080092e7 	.word	0x080092e7
 80092c8:	080092ff 	.word	0x080092ff
 80092cc:	080092ff 	.word	0x080092ff
 80092d0:	080092ff 	.word	0x080092ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3304      	adds	r3, #4
 80092d8:	2101      	movs	r1, #1
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 fbd8 	bl	800aa90 <RCCEx_PLL2_Config>
 80092e0:	4603      	mov	r3, r0
 80092e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092e4:	e00c      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	3324      	adds	r3, #36	; 0x24
 80092ea:	2101      	movs	r1, #1
 80092ec:	4618      	mov	r0, r3
 80092ee:	f001 fc81 	bl	800abf4 <RCCEx_PLL3_Config>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092f6:	e003      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	75fb      	strb	r3, [r7, #23]
      break;
 80092fc:	e000      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80092fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009300:	7dfb      	ldrb	r3, [r7, #23]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d109      	bne.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009306:	4b77      	ldr	r3, [pc, #476]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930a:	f023 0207 	bic.w	r2, r3, #7
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009312:	4974      	ldr	r1, [pc, #464]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009314:	4313      	orrs	r3, r2
 8009316:	654b      	str	r3, [r1, #84]	; 0x54
 8009318:	e001      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800931a:	7dfb      	ldrb	r3, [r7, #23]
 800931c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0304 	and.w	r3, r3, #4
 8009326:	2b00      	cmp	r3, #0
 8009328:	d03a      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009330:	2b05      	cmp	r3, #5
 8009332:	d821      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009334:	a201      	add	r2, pc, #4	; (adr r2, 800933c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933a:	bf00      	nop
 800933c:	0800937f 	.word	0x0800937f
 8009340:	08009355 	.word	0x08009355
 8009344:	08009367 	.word	0x08009367
 8009348:	0800937f 	.word	0x0800937f
 800934c:	0800937f 	.word	0x0800937f
 8009350:	0800937f 	.word	0x0800937f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3304      	adds	r3, #4
 8009358:	2101      	movs	r1, #1
 800935a:	4618      	mov	r0, r3
 800935c:	f001 fb98 	bl	800aa90 <RCCEx_PLL2_Config>
 8009360:	4603      	mov	r3, r0
 8009362:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009364:	e00c      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3324      	adds	r3, #36	; 0x24
 800936a:	2101      	movs	r1, #1
 800936c:	4618      	mov	r0, r3
 800936e:	f001 fc41 	bl	800abf4 <RCCEx_PLL3_Config>
 8009372:	4603      	mov	r3, r0
 8009374:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009376:	e003      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	75fb      	strb	r3, [r7, #23]
      break;
 800937c:	e000      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800937e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10a      	bne.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009386:	4b57      	ldr	r3, [pc, #348]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800938a:	f023 0207 	bic.w	r2, r3, #7
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009394:	4953      	ldr	r1, [pc, #332]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009396:	4313      	orrs	r3, r2
 8009398:	658b      	str	r3, [r1, #88]	; 0x58
 800939a:	e001      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800939c:	7dfb      	ldrb	r3, [r7, #23]
 800939e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0320 	and.w	r3, r3, #32
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d04b      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093b6:	d02e      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80093b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093bc:	d828      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80093be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c2:	d02a      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80093c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c8:	d822      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80093ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093ce:	d026      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80093d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093d4:	d81c      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80093d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093da:	d010      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80093dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093e0:	d816      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d01d      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80093e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093ea:	d111      	bne.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	3304      	adds	r3, #4
 80093f0:	2100      	movs	r1, #0
 80093f2:	4618      	mov	r0, r3
 80093f4:	f001 fb4c 	bl	800aa90 <RCCEx_PLL2_Config>
 80093f8:	4603      	mov	r3, r0
 80093fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093fc:	e012      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3324      	adds	r3, #36	; 0x24
 8009402:	2102      	movs	r1, #2
 8009404:	4618      	mov	r0, r3
 8009406:	f001 fbf5 	bl	800abf4 <RCCEx_PLL3_Config>
 800940a:	4603      	mov	r3, r0
 800940c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800940e:	e009      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	75fb      	strb	r3, [r7, #23]
      break;
 8009414:	e006      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009416:	bf00      	nop
 8009418:	e004      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800941a:	bf00      	nop
 800941c:	e002      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800941e:	bf00      	nop
 8009420:	e000      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10a      	bne.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800942a:	4b2e      	ldr	r3, [pc, #184]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009438:	492a      	ldr	r1, [pc, #168]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800943a:	4313      	orrs	r3, r2
 800943c:	654b      	str	r3, [r1, #84]	; 0x54
 800943e:	e001      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	d04d      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009456:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800945a:	d02e      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800945c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009460:	d828      	bhi.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009466:	d02a      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800946c:	d822      	bhi.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800946e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009472:	d026      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009478:	d81c      	bhi.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800947a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800947e:	d010      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009484:	d816      	bhi.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009486:	2b00      	cmp	r3, #0
 8009488:	d01d      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800948a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800948e:	d111      	bne.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3304      	adds	r3, #4
 8009494:	2100      	movs	r1, #0
 8009496:	4618      	mov	r0, r3
 8009498:	f001 fafa 	bl	800aa90 <RCCEx_PLL2_Config>
 800949c:	4603      	mov	r3, r0
 800949e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80094a0:	e012      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3324      	adds	r3, #36	; 0x24
 80094a6:	2102      	movs	r1, #2
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 fba3 	bl	800abf4 <RCCEx_PLL3_Config>
 80094ae:	4603      	mov	r3, r0
 80094b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80094b2:	e009      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	75fb      	strb	r3, [r7, #23]
      break;
 80094b8:	e006      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80094ba:	bf00      	nop
 80094bc:	e004      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80094be:	bf00      	nop
 80094c0:	e002      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80094c2:	bf00      	nop
 80094c4:	e000      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80094c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10c      	bne.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80094ce:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80094d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094dc:	4901      	ldr	r1, [pc, #4]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	658b      	str	r3, [r1, #88]	; 0x58
 80094e2:	e003      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80094e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d04b      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009502:	d02e      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009504:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009508:	d828      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800950a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800950e:	d02a      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009514:	d822      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009516:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800951a:	d026      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800951c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009520:	d81c      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009526:	d010      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800952c:	d816      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800952e:	2b00      	cmp	r3, #0
 8009530:	d01d      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009536:	d111      	bne.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	3304      	adds	r3, #4
 800953c:	2100      	movs	r1, #0
 800953e:	4618      	mov	r0, r3
 8009540:	f001 faa6 	bl	800aa90 <RCCEx_PLL2_Config>
 8009544:	4603      	mov	r3, r0
 8009546:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009548:	e012      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3324      	adds	r3, #36	; 0x24
 800954e:	2102      	movs	r1, #2
 8009550:	4618      	mov	r0, r3
 8009552:	f001 fb4f 	bl	800abf4 <RCCEx_PLL3_Config>
 8009556:	4603      	mov	r3, r0
 8009558:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800955a:	e009      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	75fb      	strb	r3, [r7, #23]
      break;
 8009560:	e006      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009562:	bf00      	nop
 8009564:	e004      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009566:	bf00      	nop
 8009568:	e002      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800956a:	bf00      	nop
 800956c:	e000      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800956e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10a      	bne.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009576:	4b9d      	ldr	r3, [pc, #628]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800957a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009584:	4999      	ldr	r1, [pc, #612]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009586:	4313      	orrs	r3, r2
 8009588:	658b      	str	r3, [r1, #88]	; 0x58
 800958a:	e001      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0308 	and.w	r3, r3, #8
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01a      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095a6:	d10a      	bne.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3324      	adds	r3, #36	; 0x24
 80095ac:	2102      	movs	r1, #2
 80095ae:	4618      	mov	r0, r3
 80095b0:	f001 fb20 	bl	800abf4 <RCCEx_PLL3_Config>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80095be:	4b8b      	ldr	r3, [pc, #556]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095cc:	4987      	ldr	r1, [pc, #540]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0310 	and.w	r3, r3, #16
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d01a      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095e8:	d10a      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3324      	adds	r3, #36	; 0x24
 80095ee:	2102      	movs	r1, #2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f001 faff 	bl	800abf4 <RCCEx_PLL3_Config>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009600:	4b7a      	ldr	r3, [pc, #488]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800960e:	4977      	ldr	r1, [pc, #476]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009610:	4313      	orrs	r3, r2
 8009612:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d034      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800962a:	d01d      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800962c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009630:	d817      	bhi.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800963a:	d009      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800963c:	e011      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3304      	adds	r3, #4
 8009642:	2100      	movs	r1, #0
 8009644:	4618      	mov	r0, r3
 8009646:	f001 fa23 	bl	800aa90 <RCCEx_PLL2_Config>
 800964a:	4603      	mov	r3, r0
 800964c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800964e:	e00c      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3324      	adds	r3, #36	; 0x24
 8009654:	2102      	movs	r1, #2
 8009656:	4618      	mov	r0, r3
 8009658:	f001 facc 	bl	800abf4 <RCCEx_PLL3_Config>
 800965c:	4603      	mov	r3, r0
 800965e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009660:	e003      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	75fb      	strb	r3, [r7, #23]
      break;
 8009666:	e000      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009670:	4b5e      	ldr	r3, [pc, #376]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800967e:	495b      	ldr	r1, [pc, #364]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009680:	4313      	orrs	r3, r2
 8009682:	658b      	str	r3, [r1, #88]	; 0x58
 8009684:	e001      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d033      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800969c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096a0:	d01c      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80096a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096a6:	d816      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80096a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ac:	d003      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80096ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096b2:	d007      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80096b4:	e00f      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b6:	4b4d      	ldr	r3, [pc, #308]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ba:	4a4c      	ldr	r2, [pc, #304]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80096c2:	e00c      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3324      	adds	r3, #36	; 0x24
 80096c8:	2101      	movs	r1, #1
 80096ca:	4618      	mov	r0, r3
 80096cc:	f001 fa92 	bl	800abf4 <RCCEx_PLL3_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80096d4:	e003      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	75fb      	strb	r3, [r7, #23]
      break;
 80096da:	e000      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80096dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10a      	bne.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096e4:	4b41      	ldr	r3, [pc, #260]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096f2:	493e      	ldr	r1, [pc, #248]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	654b      	str	r3, [r1, #84]	; 0x54
 80096f8:	e001      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d029      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009716:	d007      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009718:	e00f      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800971a:	4b34      	ldr	r3, [pc, #208]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800971c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971e:	4a33      	ldr	r2, [pc, #204]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009726:	e00b      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3304      	adds	r3, #4
 800972c:	2102      	movs	r1, #2
 800972e:	4618      	mov	r0, r3
 8009730:	f001 f9ae 	bl	800aa90 <RCCEx_PLL2_Config>
 8009734:	4603      	mov	r3, r0
 8009736:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009738:	e002      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	75fb      	strb	r3, [r7, #23]
      break;
 800973e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009740:	7dfb      	ldrb	r3, [r7, #23]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d109      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009746:	4b29      	ldr	r3, [pc, #164]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009752:	4926      	ldr	r1, [pc, #152]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009754:	4313      	orrs	r3, r2
 8009756:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009758:	e001      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00a      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	3324      	adds	r3, #36	; 0x24
 800976e:	2102      	movs	r1, #2
 8009770:	4618      	mov	r0, r3
 8009772:	f001 fa3f 	bl	800abf4 <RCCEx_PLL3_Config>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d033      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009794:	d017      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800979a:	d811      	bhi.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800979c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097a0:	d013      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80097a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097a6:	d80b      	bhi.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d010      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80097ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097b0:	d106      	bne.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097b2:	4b0e      	ldr	r3, [pc, #56]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b6:	4a0d      	ldr	r2, [pc, #52]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80097be:	e007      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	75fb      	strb	r3, [r7, #23]
      break;
 80097c4:	e004      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80097c6:	bf00      	nop
 80097c8:	e002      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80097ca:	bf00      	nop
 80097cc:	e000      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80097ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10c      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097d6:	4b05      	ldr	r3, [pc, #20]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097e2:	4902      	ldr	r1, [pc, #8]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	654b      	str	r3, [r1, #84]	; 0x54
 80097e8:	e004      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80097ea:	bf00      	nop
 80097ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
 80097f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d008      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009800:	4b31      	ldr	r3, [pc, #196]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980c:	492e      	ldr	r1, [pc, #184]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800980e:	4313      	orrs	r3, r2
 8009810:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d009      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800981e:	4b2a      	ldr	r3, [pc, #168]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800982c:	4926      	ldr	r1, [pc, #152]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800982e:	4313      	orrs	r3, r2
 8009830:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d008      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800983e:	4b22      	ldr	r3, [pc, #136]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009842:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800984a:	491f      	ldr	r1, [pc, #124]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800984c:	4313      	orrs	r3, r2
 800984e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00d      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800985c:	4b1a      	ldr	r3, [pc, #104]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	4a19      	ldr	r2, [pc, #100]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009862:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009866:	6113      	str	r3, [r2, #16]
 8009868:	4b17      	ldr	r3, [pc, #92]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800986a:	691a      	ldr	r2, [r3, #16]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009872:	4915      	ldr	r1, [pc, #84]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009874:	4313      	orrs	r3, r2
 8009876:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	da08      	bge.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009880:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009884:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800988c:	490e      	ldr	r1, [pc, #56]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800988e:	4313      	orrs	r3, r2
 8009890:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d009      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800989e:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80098a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ac:	4906      	ldr	r1, [pc, #24]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80098b2:	7dbb      	ldrb	r3, [r7, #22]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	e000      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	58024400 	.word	0x58024400

080098cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b090      	sub	sp, #64	; 0x40
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098da:	f040 8095 	bne.w	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80098de:	4b97      	ldr	r3, [pc, #604]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80098e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	f200 8088 	bhi.w	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80098f0:	a201      	add	r2, pc, #4	; (adr r2, 80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80098f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f6:	bf00      	nop
 80098f8:	0800990d 	.word	0x0800990d
 80098fc:	08009935 	.word	0x08009935
 8009900:	0800995d 	.word	0x0800995d
 8009904:	080099f9 	.word	0x080099f9
 8009908:	08009985 	.word	0x08009985
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800990c:	4b8b      	ldr	r3, [pc, #556]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009918:	d108      	bne.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800991a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800991e:	4618      	mov	r0, r3
 8009920:	f000 ff64 	bl	800a7ec <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009928:	f000 bc94 	b.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009930:	f000 bc90 	b.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009934:	4b81      	ldr	r3, [pc, #516]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800993c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009940:	d108      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009942:	f107 0318 	add.w	r3, r7, #24
 8009946:	4618      	mov	r0, r3
 8009948:	f000 fca8 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009950:	f000 bc80 	b.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009958:	f000 bc7c 	b.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800995c:	4b77      	ldr	r3, [pc, #476]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009968:	d108      	bne.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800996a:	f107 030c 	add.w	r3, r7, #12
 800996e:	4618      	mov	r0, r3
 8009970:	f000 fde8 	bl	800a544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009978:	f000 bc6c 	b.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800997c:	2300      	movs	r3, #0
 800997e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009980:	f000 bc68 	b.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009984:	4b6d      	ldr	r3, [pc, #436]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800998c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800998e:	4b6b      	ldr	r3, [pc, #428]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0304 	and.w	r3, r3, #4
 8009996:	2b04      	cmp	r3, #4
 8009998:	d10c      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800999a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999c:	2b00      	cmp	r3, #0
 800999e:	d109      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099a0:	4b66      	ldr	r3, [pc, #408]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	08db      	lsrs	r3, r3, #3
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	4a65      	ldr	r2, [pc, #404]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80099ac:	fa22 f303 	lsr.w	r3, r2, r3
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b2:	e01f      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099b4:	4b61      	ldr	r3, [pc, #388]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099c0:	d106      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80099c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099c8:	d102      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80099ca:	4b5e      	ldr	r3, [pc, #376]	; (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ce:	e011      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099d0:	4b5a      	ldr	r3, [pc, #360]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099dc:	d106      	bne.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80099de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099e4:	d102      	bne.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80099e6:	4b58      	ldr	r3, [pc, #352]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80099e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ea:	e003      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80099f0:	f000 bc30 	b.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80099f4:	f000 bc2e 	b.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80099f8:	4b54      	ldr	r3, [pc, #336]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099fc:	f000 bc2a 	b.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a04:	f000 bc26 	b.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a0e:	f040 809f 	bne.w	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009a12:	4b4a      	ldr	r3, [pc, #296]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a16:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009a1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a22:	d04d      	beq.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a2a:	f200 8084 	bhi.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	2bc0      	cmp	r3, #192	; 0xc0
 8009a32:	d07d      	beq.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a36:	2bc0      	cmp	r3, #192	; 0xc0
 8009a38:	d87d      	bhi.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3c:	2b80      	cmp	r3, #128	; 0x80
 8009a3e:	d02d      	beq.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d877      	bhi.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4e:	2b40      	cmp	r3, #64	; 0x40
 8009a50:	d012      	beq.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009a52:	e070      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a54:	4b39      	ldr	r3, [pc, #228]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a60:	d107      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 fec0 	bl	800a7ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a70:	e3f0      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a76:	e3ed      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a78:	4b30      	ldr	r3, [pc, #192]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a84:	d107      	bne.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a86:	f107 0318 	add.w	r3, r7, #24
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 fc06 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a94:	e3de      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a9a:	e3db      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a9c:	4b27      	ldr	r3, [pc, #156]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aa8:	d107      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aaa:	f107 030c 	add.w	r3, r7, #12
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 fd48 	bl	800a544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ab8:	e3cc      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009abe:	e3c9      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009ac0:	4b1e      	ldr	r3, [pc, #120]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ac4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ac8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009aca:	4b1c      	ldr	r3, [pc, #112]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 0304 	and.w	r3, r3, #4
 8009ad2:	2b04      	cmp	r3, #4
 8009ad4:	d10c      	bne.n	8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d109      	bne.n	8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009adc:	4b17      	ldr	r3, [pc, #92]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	08db      	lsrs	r3, r3, #3
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	4a16      	ldr	r2, [pc, #88]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8009aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aee:	e01e      	b.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009af0:	4b12      	ldr	r3, [pc, #72]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009afc:	d106      	bne.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b04:	d102      	bne.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009b06:	4b0f      	ldr	r3, [pc, #60]	; (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b0a:	e010      	b.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b0c:	4b0b      	ldr	r3, [pc, #44]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b18:	d106      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b20:	d102      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009b22:	4b09      	ldr	r3, [pc, #36]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b26:	e002      	b.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009b2c:	e392      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009b2e:	e391      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009b30:	4b06      	ldr	r3, [pc, #24]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b34:	e38e      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b3a:	e38b      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009b3c:	58024400 	.word	0x58024400
 8009b40:	03d09000 	.word	0x03d09000
 8009b44:	003d0900 	.word	0x003d0900
 8009b48:	007a1200 	.word	0x007a1200
 8009b4c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b56:	f040 809c 	bne.w	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009b5a:	4b9d      	ldr	r3, [pc, #628]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b5e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009b62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b6a:	d054      	beq.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b72:	f200 808b 	bhi.w	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b7c:	f000 8083 	beq.w	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8009b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b86:	f200 8081 	bhi.w	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b90:	d02f      	beq.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b98:	d878      	bhi.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d004      	beq.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ba6:	d012      	beq.n	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8009ba8:	e070      	b.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009baa:	4b89      	ldr	r3, [pc, #548]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bb6:	d107      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 fe15 	bl	800a7ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009bc6:	e345      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bcc:	e342      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bce:	4b80      	ldr	r3, [pc, #512]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bda:	d107      	bne.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bdc:	f107 0318 	add.w	r3, r7, #24
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 fb5b 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009bea:	e333      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bf0:	e330      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bf2:	4b77      	ldr	r3, [pc, #476]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bfe:	d107      	bne.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c00:	f107 030c 	add.w	r3, r7, #12
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 fc9d 	bl	800a544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c0e:	e321      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c14:	e31e      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c16:	4b6e      	ldr	r3, [pc, #440]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c1e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c20:	4b6b      	ldr	r3, [pc, #428]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 0304 	and.w	r3, r3, #4
 8009c28:	2b04      	cmp	r3, #4
 8009c2a:	d10c      	bne.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d109      	bne.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c32:	4b67      	ldr	r3, [pc, #412]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	08db      	lsrs	r3, r3, #3
 8009c38:	f003 0303 	and.w	r3, r3, #3
 8009c3c:	4a65      	ldr	r2, [pc, #404]	; (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c44:	e01e      	b.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c46:	4b62      	ldr	r3, [pc, #392]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c52:	d106      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c5a:	d102      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009c5c:	4b5e      	ldr	r3, [pc, #376]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c60:	e010      	b.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c62:	4b5b      	ldr	r3, [pc, #364]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c6e:	d106      	bne.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c76:	d102      	bne.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009c78:	4b58      	ldr	r3, [pc, #352]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c7c:	e002      	b.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009c82:	e2e7      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009c84:	e2e6      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c86:	4b56      	ldr	r3, [pc, #344]	; (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c8a:	e2e3      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c90:	e2e0      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c98:	f040 80a7 	bne.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009c9c:	4b4c      	ldr	r3, [pc, #304]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009ca4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cac:	d055      	beq.n	8009d5a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cb4:	f200 8096 	bhi.w	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009cbe:	f000 8084 	beq.w	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009cc8:	f200 808c 	bhi.w	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cd2:	d030      	beq.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cda:	f200 8083 	bhi.w	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d004      	beq.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cea:	d012      	beq.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009cec:	e07a      	b.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cee:	4b38      	ldr	r3, [pc, #224]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cfa:	d107      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 fd73 	bl	800a7ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d0a:	e2a3      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d10:	e2a0      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d12:	4b2f      	ldr	r3, [pc, #188]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d1e:	d107      	bne.n	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d20:	f107 0318 	add.w	r3, r7, #24
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 fab9 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009d2e:	e291      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d34:	e28e      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d36:	4b26      	ldr	r3, [pc, #152]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d42:	d107      	bne.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d44:	f107 030c 	add.w	r3, r7, #12
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 fbfb 	bl	800a544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d52:	e27f      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d58:	e27c      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d5a:	4b1d      	ldr	r3, [pc, #116]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d62:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d64:	4b1a      	ldr	r3, [pc, #104]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0304 	and.w	r3, r3, #4
 8009d6c:	2b04      	cmp	r3, #4
 8009d6e:	d10c      	bne.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d109      	bne.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d76:	4b16      	ldr	r3, [pc, #88]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	08db      	lsrs	r3, r3, #3
 8009d7c:	f003 0303 	and.w	r3, r3, #3
 8009d80:	4a14      	ldr	r2, [pc, #80]	; (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009d82:	fa22 f303 	lsr.w	r3, r2, r3
 8009d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d88:	e01e      	b.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d8a:	4b11      	ldr	r3, [pc, #68]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d96:	d106      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d9e:	d102      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009da0:	4b0d      	ldr	r3, [pc, #52]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009da4:	e010      	b.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009da6:	4b0a      	ldr	r3, [pc, #40]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db2:	d106      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dba:	d102      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009dbc:	4b07      	ldr	r3, [pc, #28]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dc0:	e002      	b.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009dc6:	e245      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009dc8:	e244      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009dca:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dce:	e241      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009dd0:	58024400 	.word	0x58024400
 8009dd4:	03d09000 	.word	0x03d09000
 8009dd8:	003d0900 	.word	0x003d0900
 8009ddc:	007a1200 	.word	0x007a1200
 8009de0:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009de8:	e234      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df0:	f040 809c 	bne.w	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009df4:	4b9b      	ldr	r3, [pc, #620]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009dfc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e04:	d054      	beq.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8009e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e0c:	f200 808b 	bhi.w	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e16:	f000 8083 	beq.w	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8009e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e20:	f200 8081 	bhi.w	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e2a:	d02f      	beq.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e32:	d878      	bhi.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d004      	beq.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e40:	d012      	beq.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8009e42:	e070      	b.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e44:	4b87      	ldr	r3, [pc, #540]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e50:	d107      	bne.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fcc8 	bl	800a7ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e60:	e1f8      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e66:	e1f5      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e68:	4b7e      	ldr	r3, [pc, #504]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e74:	d107      	bne.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e76:	f107 0318 	add.w	r3, r7, #24
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 fa0e 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e84:	e1e6      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e8a:	e1e3      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e8c:	4b75      	ldr	r3, [pc, #468]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e98:	d107      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e9a:	f107 030c 	add.w	r3, r7, #12
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 fb50 	bl	800a544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ea8:	e1d4      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eae:	e1d1      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009eb0:	4b6c      	ldr	r3, [pc, #432]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009eb8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009eba:	4b6a      	ldr	r3, [pc, #424]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f003 0304 	and.w	r3, r3, #4
 8009ec2:	2b04      	cmp	r3, #4
 8009ec4:	d10c      	bne.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d109      	bne.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ecc:	4b65      	ldr	r3, [pc, #404]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	08db      	lsrs	r3, r3, #3
 8009ed2:	f003 0303 	and.w	r3, r3, #3
 8009ed6:	4a64      	ldr	r2, [pc, #400]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8009edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ede:	e01e      	b.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ee0:	4b60      	ldr	r3, [pc, #384]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eec:	d106      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8009eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ef4:	d102      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009ef6:	4b5d      	ldr	r3, [pc, #372]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009efa:	e010      	b.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009efc:	4b59      	ldr	r3, [pc, #356]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f08:	d106      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f10:	d102      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009f12:	4b57      	ldr	r3, [pc, #348]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f16:	e002      	b.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009f1c:	e19a      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009f1e:	e199      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009f20:	4b54      	ldr	r3, [pc, #336]	; (800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f24:	e196      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f2a:	e193      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009f32:	d173      	bne.n	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009f34:	4b4b      	ldr	r3, [pc, #300]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009f3c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f44:	d02f      	beq.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f4c:	d863      	bhi.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d004      	beq.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f5a:	d012      	beq.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8009f5c:	e05b      	b.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f5e:	4b41      	ldr	r3, [pc, #260]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f6a:	d107      	bne.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f6c:	f107 0318 	add.w	r3, r7, #24
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 f993 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f7a:	e16b      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f80:	e168      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f82:	4b38      	ldr	r3, [pc, #224]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f8e:	d107      	bne.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f90:	f107 030c 	add.w	r3, r7, #12
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 fad5 	bl	800a544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f9e:	e159      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fa4:	e156      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009fa6:	4b2f      	ldr	r3, [pc, #188]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009faa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fae:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fb0:	4b2c      	ldr	r3, [pc, #176]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0304 	and.w	r3, r3, #4
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	d10c      	bne.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8009fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d109      	bne.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fc2:	4b28      	ldr	r3, [pc, #160]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	08db      	lsrs	r3, r3, #3
 8009fc8:	f003 0303 	and.w	r3, r3, #3
 8009fcc:	4a26      	ldr	r2, [pc, #152]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009fce:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fd4:	e01e      	b.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fd6:	4b23      	ldr	r3, [pc, #140]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fe2:	d106      	bne.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8009fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fea:	d102      	bne.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009fec:	4b1f      	ldr	r3, [pc, #124]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ff0:	e010      	b.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ff2:	4b1c      	ldr	r3, [pc, #112]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ffe:	d106      	bne.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a006:	d102      	bne.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a008:	4b19      	ldr	r3, [pc, #100]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a00c:	e002      	b.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a012:	e11f      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a014:	e11e      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a01a:	e11b      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a022:	d13e      	bne.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a024:	4b0f      	ldr	r3, [pc, #60]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a02c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a030:	2b00      	cmp	r3, #0
 800a032:	d004      	beq.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a03a:	d01d      	beq.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a03c:	e02e      	b.n	800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a03e:	4b09      	ldr	r3, [pc, #36]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a04a:	d107      	bne.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a04c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a050:	4618      	mov	r0, r3
 800a052:	f000 fbcb 	bl	800a7ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a05a:	e0fb      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a05c:	2300      	movs	r3, #0
 800a05e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a060:	e0f8      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a062:	bf00      	nop
 800a064:	58024400 	.word	0x58024400
 800a068:	03d09000 	.word	0x03d09000
 800a06c:	003d0900 	.word	0x003d0900
 800a070:	007a1200 	.word	0x007a1200
 800a074:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a078:	4b79      	ldr	r3, [pc, #484]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a084:	d107      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a086:	f107 0318 	add.w	r3, r7, #24
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 f906 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a094:	e0de      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a09a:	e0db      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0a0:	e0d8      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0a8:	f040 8085 	bne.w	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a0ac:	4b6c      	ldr	r3, [pc, #432]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a0ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a0b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0bc:	d06b      	beq.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0c4:	d874      	bhi.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0cc:	d056      	beq.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0d4:	d86c      	bhi.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0dc:	d03b      	beq.n	800a156 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0e4:	d864      	bhi.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ec:	d021      	beq.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0f4:	d85c      	bhi.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a102:	d004      	beq.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a104:	e054      	b.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a106:	f000 f8b3 	bl	800a270 <HAL_RCCEx_GetD3PCLK1Freq>
 800a10a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a10c:	e0a2      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a10e:	4b54      	ldr	r3, [pc, #336]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a11a:	d107      	bne.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a11c:	f107 0318 	add.w	r3, r7, #24
 800a120:	4618      	mov	r0, r3
 800a122:	f000 f8bb 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a12a:	e093      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a130:	e090      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a132:	4b4b      	ldr	r3, [pc, #300]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a13a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a13e:	d107      	bne.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a140:	f107 030c 	add.w	r3, r7, #12
 800a144:	4618      	mov	r0, r3
 800a146:	f000 f9fd 	bl	800a544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a14e:	e081      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a150:	2300      	movs	r3, #0
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a154:	e07e      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a156:	4b42      	ldr	r3, [pc, #264]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d109      	bne.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a162:	4b3f      	ldr	r3, [pc, #252]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	08db      	lsrs	r3, r3, #3
 800a168:	f003 0303 	and.w	r3, r3, #3
 800a16c:	4a3d      	ldr	r2, [pc, #244]	; (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a16e:	fa22 f303 	lsr.w	r3, r2, r3
 800a172:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a174:	e06e      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a176:	2300      	movs	r3, #0
 800a178:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a17a:	e06b      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a17c:	4b38      	ldr	r3, [pc, #224]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a188:	d102      	bne.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800a18a:	4b37      	ldr	r3, [pc, #220]	; (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a18c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a18e:	e061      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a194:	e05e      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a196:	4b32      	ldr	r3, [pc, #200]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a19e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1a2:	d102      	bne.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800a1a4:	4b31      	ldr	r3, [pc, #196]	; (800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a1a8:	e054      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ae:	e051      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1b4:	e04e      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1bc:	d148      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a1be:	4b28      	ldr	r3, [pc, #160]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ce:	d02a      	beq.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1d6:	d838      	bhi.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d004      	beq.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1e4:	d00d      	beq.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800a1e6:	e030      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1e8:	4b1d      	ldr	r3, [pc, #116]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1f4:	d102      	bne.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800a1f6:	4b1d      	ldr	r3, [pc, #116]	; (800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a1fa:	e02b      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a200:	e028      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a202:	4b17      	ldr	r3, [pc, #92]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a20a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a20e:	d107      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a214:	4618      	mov	r0, r3
 800a216:	f000 fae9 	bl	800a7ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a21e:	e019      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a224:	e016      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a226:	4b0e      	ldr	r3, [pc, #56]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a22e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a232:	d107      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a234:	f107 0318 	add.w	r3, r7, #24
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 f82f 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a242:	e007      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a248:	e004      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a24e:	e001      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a256:	4618      	mov	r0, r3
 800a258:	3740      	adds	r7, #64	; 0x40
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	58024400 	.word	0x58024400
 800a264:	03d09000 	.word	0x03d09000
 800a268:	003d0900 	.word	0x003d0900
 800a26c:	007a1200 	.word	0x007a1200

0800a270 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a274:	f7fe fb46 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 800a278:	4602      	mov	r2, r0
 800a27a:	4b06      	ldr	r3, [pc, #24]	; (800a294 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	091b      	lsrs	r3, r3, #4
 800a280:	f003 0307 	and.w	r3, r3, #7
 800a284:	4904      	ldr	r1, [pc, #16]	; (800a298 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a286:	5ccb      	ldrb	r3, [r1, r3]
 800a288:	f003 031f 	and.w	r3, r3, #31
 800a28c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a290:	4618      	mov	r0, r3
 800a292:	bd80      	pop	{r7, pc}
 800a294:	58024400 	.word	0x58024400
 800a298:	0802b604 	.word	0x0802b604

0800a29c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b089      	sub	sp, #36	; 0x24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2a4:	4ba1      	ldr	r3, [pc, #644]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a8:	f003 0303 	and.w	r3, r3, #3
 800a2ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a2ae:	4b9f      	ldr	r3, [pc, #636]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b2:	0b1b      	lsrs	r3, r3, #12
 800a2b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a2ba:	4b9c      	ldr	r3, [pc, #624]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2be:	091b      	lsrs	r3, r3, #4
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a2c6:	4b99      	ldr	r3, [pc, #612]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ca:	08db      	lsrs	r3, r3, #3
 800a2cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	fb02 f303 	mul.w	r3, r2, r3
 800a2d6:	ee07 3a90 	vmov	s15, r3
 800a2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 8111 	beq.w	800a50c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	f000 8083 	beq.w	800a3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	f200 80a1 	bhi.w	800a43c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d056      	beq.n	800a3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a306:	e099      	b.n	800a43c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a308:	4b88      	ldr	r3, [pc, #544]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 0320 	and.w	r3, r3, #32
 800a310:	2b00      	cmp	r3, #0
 800a312:	d02d      	beq.n	800a370 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a314:	4b85      	ldr	r3, [pc, #532]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	08db      	lsrs	r3, r3, #3
 800a31a:	f003 0303 	and.w	r3, r3, #3
 800a31e:	4a84      	ldr	r2, [pc, #528]	; (800a530 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a320:	fa22 f303 	lsr.w	r3, r2, r3
 800a324:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	ee07 3a90 	vmov	s15, r3
 800a32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	ee07 3a90 	vmov	s15, r3
 800a336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a33e:	4b7b      	ldr	r3, [pc, #492]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a346:	ee07 3a90 	vmov	s15, r3
 800a34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a34e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a352:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a35e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a36a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a36e:	e087      	b.n	800a480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	ee07 3a90 	vmov	s15, r3
 800a376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a538 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a382:	4b6a      	ldr	r3, [pc, #424]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a392:	ed97 6a03 	vldr	s12, [r7, #12]
 800a396:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3b2:	e065      	b.n	800a480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a53c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c6:	4b59      	ldr	r3, [pc, #356]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3f6:	e043      	b.n	800a480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a402:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a540 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a40a:	4b48      	ldr	r3, [pc, #288]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a41a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a41e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a43a:	e021      	b.n	800a480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a446:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a53c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44e:	4b37      	ldr	r3, [pc, #220]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a462:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a47a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a47e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a480:	4b2a      	ldr	r3, [pc, #168]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a484:	0a5b      	lsrs	r3, r3, #9
 800a486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a48a:	ee07 3a90 	vmov	s15, r3
 800a48e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a49a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a49e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4a6:	ee17 2a90 	vmov	r2, s15
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a4ae:	4b1f      	ldr	r3, [pc, #124]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b2:	0c1b      	lsrs	r3, r3, #16
 800a4b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4b8:	ee07 3a90 	vmov	s15, r3
 800a4bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4d4:	ee17 2a90 	vmov	r2, s15
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a4dc:	4b13      	ldr	r3, [pc, #76]	; (800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e0:	0e1b      	lsrs	r3, r3, #24
 800a4e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4e6:	ee07 3a90 	vmov	s15, r3
 800a4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a502:	ee17 2a90 	vmov	r2, s15
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a50a:	e008      	b.n	800a51e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	609a      	str	r2, [r3, #8]
}
 800a51e:	bf00      	nop
 800a520:	3724      	adds	r7, #36	; 0x24
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	58024400 	.word	0x58024400
 800a530:	03d09000 	.word	0x03d09000
 800a534:	46000000 	.word	0x46000000
 800a538:	4c742400 	.word	0x4c742400
 800a53c:	4a742400 	.word	0x4a742400
 800a540:	4af42400 	.word	0x4af42400

0800a544 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a544:	b480      	push	{r7}
 800a546:	b089      	sub	sp, #36	; 0x24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a54c:	4ba1      	ldr	r3, [pc, #644]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a550:	f003 0303 	and.w	r3, r3, #3
 800a554:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a556:	4b9f      	ldr	r3, [pc, #636]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55a:	0d1b      	lsrs	r3, r3, #20
 800a55c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a560:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a562:	4b9c      	ldr	r3, [pc, #624]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a566:	0a1b      	lsrs	r3, r3, #8
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a56e:	4b99      	ldr	r3, [pc, #612]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a572:	08db      	lsrs	r3, r3, #3
 800a574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	fb02 f303 	mul.w	r3, r2, r3
 800a57e:	ee07 3a90 	vmov	s15, r3
 800a582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a586:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 8111 	beq.w	800a7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	2b02      	cmp	r3, #2
 800a596:	f000 8083 	beq.w	800a6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	f200 80a1 	bhi.w	800a6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d056      	beq.n	800a65c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a5ae:	e099      	b.n	800a6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5b0:	4b88      	ldr	r3, [pc, #544]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0320 	and.w	r3, r3, #32
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d02d      	beq.n	800a618 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5bc:	4b85      	ldr	r3, [pc, #532]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	08db      	lsrs	r3, r3, #3
 800a5c2:	f003 0303 	and.w	r3, r3, #3
 800a5c6:	4a84      	ldr	r2, [pc, #528]	; (800a7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a5c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	ee07 3a90 	vmov	s15, r3
 800a5d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	ee07 3a90 	vmov	s15, r3
 800a5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5e6:	4b7b      	ldr	r3, [pc, #492]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ee:	ee07 3a90 	vmov	s15, r3
 800a5f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a7dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a60a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a60e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a612:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a616:	e087      	b.n	800a728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	ee07 3a90 	vmov	s15, r3
 800a61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a622:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a62a:	4b6a      	ldr	r3, [pc, #424]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a632:	ee07 3a90 	vmov	s15, r3
 800a636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a63a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a63e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a7dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a64a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a64e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a652:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a65a:	e065      	b.n	800a728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	ee07 3a90 	vmov	s15, r3
 800a662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a666:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a66a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a66e:	4b59      	ldr	r3, [pc, #356]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a67e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a682:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a7dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a68a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a68e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a69a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a69e:	e043      	b.n	800a728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a6ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6b2:	4b48      	ldr	r3, [pc, #288]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a7dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6e2:	e021      	b.n	800a728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a6f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6f6:	4b37      	ldr	r3, [pc, #220]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a706:	ed97 6a03 	vldr	s12, [r7, #12]
 800a70a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a7dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a70e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a71a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a71e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a722:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a726:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a728:	4b2a      	ldr	r3, [pc, #168]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72c:	0a5b      	lsrs	r3, r3, #9
 800a72e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a732:	ee07 3a90 	vmov	s15, r3
 800a736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a73a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a73e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a742:	edd7 6a07 	vldr	s13, [r7, #28]
 800a746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a74a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a74e:	ee17 2a90 	vmov	r2, s15
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a756:	4b1f      	ldr	r3, [pc, #124]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75a:	0c1b      	lsrs	r3, r3, #16
 800a75c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a760:	ee07 3a90 	vmov	s15, r3
 800a764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a76c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a770:	edd7 6a07 	vldr	s13, [r7, #28]
 800a774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a77c:	ee17 2a90 	vmov	r2, s15
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a784:	4b13      	ldr	r3, [pc, #76]	; (800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a788:	0e1b      	lsrs	r3, r3, #24
 800a78a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78e:	ee07 3a90 	vmov	s15, r3
 800a792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a79a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a79e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7aa:	ee17 2a90 	vmov	r2, s15
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a7b2:	e008      	b.n	800a7c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	609a      	str	r2, [r3, #8]
}
 800a7c6:	bf00      	nop
 800a7c8:	3724      	adds	r7, #36	; 0x24
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	58024400 	.word	0x58024400
 800a7d8:	03d09000 	.word	0x03d09000
 800a7dc:	46000000 	.word	0x46000000
 800a7e0:	4c742400 	.word	0x4c742400
 800a7e4:	4a742400 	.word	0x4a742400
 800a7e8:	4af42400 	.word	0x4af42400

0800a7ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b089      	sub	sp, #36	; 0x24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7f4:	4ba0      	ldr	r3, [pc, #640]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f8:	f003 0303 	and.w	r3, r3, #3
 800a7fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a7fe:	4b9e      	ldr	r3, [pc, #632]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a802:	091b      	lsrs	r3, r3, #4
 800a804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a808:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a80a:	4b9b      	ldr	r3, [pc, #620]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a814:	4b98      	ldr	r3, [pc, #608]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a818:	08db      	lsrs	r3, r3, #3
 800a81a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	fb02 f303 	mul.w	r3, r2, r3
 800a824:	ee07 3a90 	vmov	s15, r3
 800a828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a82c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 8111 	beq.w	800aa5a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	f000 8083 	beq.w	800a946 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	2b02      	cmp	r3, #2
 800a844:	f200 80a1 	bhi.w	800a98a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d056      	beq.n	800a902 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a854:	e099      	b.n	800a98a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a856:	4b88      	ldr	r3, [pc, #544]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 0320 	and.w	r3, r3, #32
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d02d      	beq.n	800a8be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a862:	4b85      	ldr	r3, [pc, #532]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	08db      	lsrs	r3, r3, #3
 800a868:	f003 0303 	and.w	r3, r3, #3
 800a86c:	4a83      	ldr	r2, [pc, #524]	; (800aa7c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a86e:	fa22 f303 	lsr.w	r3, r2, r3
 800a872:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	ee07 3a90 	vmov	s15, r3
 800a884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a88c:	4b7a      	ldr	r3, [pc, #488]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a894:	ee07 3a90 	vmov	s15, r3
 800a898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a89c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800aa80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a8bc:	e087      	b.n	800a9ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	ee07 3a90 	vmov	s15, r3
 800a8c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800aa84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a8cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8d0:	4b69      	ldr	r3, [pc, #420]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800aa80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a900:	e065      	b.n	800a9ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	ee07 3a90 	vmov	s15, r3
 800a908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aa88 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a914:	4b58      	ldr	r3, [pc, #352]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a91c:	ee07 3a90 	vmov	s15, r3
 800a920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a924:	ed97 6a03 	vldr	s12, [r7, #12]
 800a928:	eddf 5a55 	vldr	s11, [pc, #340]	; 800aa80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a92c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a93c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a940:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a944:	e043      	b.n	800a9ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	ee07 3a90 	vmov	s15, r3
 800a94c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a950:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800aa8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a958:	4b47      	ldr	r3, [pc, #284]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a960:	ee07 3a90 	vmov	s15, r3
 800a964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a968:	ed97 6a03 	vldr	s12, [r7, #12]
 800a96c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aa80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a97c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a980:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a984:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a988:	e021      	b.n	800a9ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	ee07 3a90 	vmov	s15, r3
 800a990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a994:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800aa84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a99c:	4b36      	ldr	r3, [pc, #216]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9a4:	ee07 3a90 	vmov	s15, r3
 800a9a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aa80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a9b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a9ce:	4b2a      	ldr	r3, [pc, #168]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d2:	0a5b      	lsrs	r3, r3, #9
 800a9d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9d8:	ee07 3a90 	vmov	s15, r3
 800a9dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9f4:	ee17 2a90 	vmov	r2, s15
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a9fc:	4b1e      	ldr	r3, [pc, #120]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa00:	0c1b      	lsrs	r3, r3, #16
 800aa02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa16:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa22:	ee17 2a90 	vmov	r2, s15
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800aa2a:	4b13      	ldr	r3, [pc, #76]	; (800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2e:	0e1b      	lsrs	r3, r3, #24
 800aa30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa34:	ee07 3a90 	vmov	s15, r3
 800aa38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa44:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa50:	ee17 2a90 	vmov	r2, s15
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aa58:	e008      	b.n	800aa6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	609a      	str	r2, [r3, #8]
}
 800aa6c:	bf00      	nop
 800aa6e:	3724      	adds	r7, #36	; 0x24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	58024400 	.word	0x58024400
 800aa7c:	03d09000 	.word	0x03d09000
 800aa80:	46000000 	.word	0x46000000
 800aa84:	4c742400 	.word	0x4c742400
 800aa88:	4a742400 	.word	0x4a742400
 800aa8c:	4af42400 	.word	0x4af42400

0800aa90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa9e:	4b53      	ldr	r3, [pc, #332]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa2:	f003 0303 	and.w	r3, r3, #3
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	d101      	bne.n	800aaae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e099      	b.n	800abe2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aaae:	4b4f      	ldr	r3, [pc, #316]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a4e      	ldr	r2, [pc, #312]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800aab4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaba:	f7f9 fe6f 	bl	800479c <HAL_GetTick>
 800aabe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aac0:	e008      	b.n	800aad4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aac2:	f7f9 fe6b 	bl	800479c <HAL_GetTick>
 800aac6:	4602      	mov	r2, r0
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d901      	bls.n	800aad4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aad0:	2303      	movs	r3, #3
 800aad2:	e086      	b.n	800abe2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aad4:	4b45      	ldr	r3, [pc, #276]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d1f0      	bne.n	800aac2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aae0:	4b42      	ldr	r3, [pc, #264]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800aae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	031b      	lsls	r3, r3, #12
 800aaee:	493f      	ldr	r1, [pc, #252]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	628b      	str	r3, [r1, #40]	; 0x28
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	3b01      	subs	r3, #1
 800ab04:	025b      	lsls	r3, r3, #9
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	041b      	lsls	r3, r3, #16
 800ab12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ab16:	431a      	orrs	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	061b      	lsls	r3, r3, #24
 800ab20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ab24:	4931      	ldr	r1, [pc, #196]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ab2a:	4b30      	ldr	r3, [pc, #192]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	492d      	ldr	r1, [pc, #180]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ab3c:	4b2b      	ldr	r3, [pc, #172]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	f023 0220 	bic.w	r2, r3, #32
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	4928      	ldr	r1, [pc, #160]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ab4e:	4b27      	ldr	r3, [pc, #156]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab52:	4a26      	ldr	r2, [pc, #152]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab54:	f023 0310 	bic.w	r3, r3, #16
 800ab58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ab5a:	4b24      	ldr	r3, [pc, #144]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab5e:	4b24      	ldr	r3, [pc, #144]	; (800abf0 <RCCEx_PLL2_Config+0x160>)
 800ab60:	4013      	ands	r3, r2
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	69d2      	ldr	r2, [r2, #28]
 800ab66:	00d2      	lsls	r2, r2, #3
 800ab68:	4920      	ldr	r1, [pc, #128]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ab6e:	4b1f      	ldr	r3, [pc, #124]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab72:	4a1e      	ldr	r2, [pc, #120]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab74:	f043 0310 	orr.w	r3, r3, #16
 800ab78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d106      	bne.n	800ab8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ab80:	4b1a      	ldr	r3, [pc, #104]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	4a19      	ldr	r2, [pc, #100]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab8c:	e00f      	b.n	800abae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d106      	bne.n	800aba2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ab94:	4b15      	ldr	r3, [pc, #84]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab98:	4a14      	ldr	r2, [pc, #80]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800ab9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aba0:	e005      	b.n	800abae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aba2:	4b12      	ldr	r3, [pc, #72]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800aba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba6:	4a11      	ldr	r2, [pc, #68]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800aba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800abac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800abae:	4b0f      	ldr	r3, [pc, #60]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a0e      	ldr	r2, [pc, #56]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800abb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800abb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abba:	f7f9 fdef 	bl	800479c <HAL_GetTick>
 800abbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800abc0:	e008      	b.n	800abd4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800abc2:	f7f9 fdeb 	bl	800479c <HAL_GetTick>
 800abc6:	4602      	mov	r2, r0
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d901      	bls.n	800abd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e006      	b.n	800abe2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800abd4:	4b05      	ldr	r3, [pc, #20]	; (800abec <RCCEx_PLL2_Config+0x15c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d0f0      	beq.n	800abc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	58024400 	.word	0x58024400
 800abf0:	ffff0007 	.word	0xffff0007

0800abf4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac02:	4b53      	ldr	r3, [pc, #332]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ac04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac06:	f003 0303 	and.w	r3, r3, #3
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d101      	bne.n	800ac12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e099      	b.n	800ad46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ac12:	4b4f      	ldr	r3, [pc, #316]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a4e      	ldr	r2, [pc, #312]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ac18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac1e:	f7f9 fdbd 	bl	800479c <HAL_GetTick>
 800ac22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac24:	e008      	b.n	800ac38 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ac26:	f7f9 fdb9 	bl	800479c <HAL_GetTick>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	d901      	bls.n	800ac38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac34:	2303      	movs	r3, #3
 800ac36:	e086      	b.n	800ad46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac38:	4b45      	ldr	r3, [pc, #276]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1f0      	bne.n	800ac26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ac44:	4b42      	ldr	r3, [pc, #264]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ac46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	051b      	lsls	r3, r3, #20
 800ac52:	493f      	ldr	r1, [pc, #252]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ac54:	4313      	orrs	r3, r2
 800ac56:	628b      	str	r3, [r1, #40]	; 0x28
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	3b01      	subs	r3, #1
 800ac68:	025b      	lsls	r3, r3, #9
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	431a      	orrs	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	3b01      	subs	r3, #1
 800ac74:	041b      	lsls	r3, r3, #16
 800ac76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ac7a:	431a      	orrs	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	061b      	lsls	r3, r3, #24
 800ac84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac88:	4931      	ldr	r1, [pc, #196]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ac8e:	4b30      	ldr	r3, [pc, #192]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ac90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	492d      	ldr	r1, [pc, #180]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aca0:	4b2b      	ldr	r3, [pc, #172]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800aca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	4928      	ldr	r1, [pc, #160]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800acae:	4313      	orrs	r3, r2
 800acb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800acb2:	4b27      	ldr	r3, [pc, #156]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800acb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb6:	4a26      	ldr	r2, [pc, #152]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800acb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800acbe:	4b24      	ldr	r3, [pc, #144]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800acc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acc2:	4b24      	ldr	r3, [pc, #144]	; (800ad54 <RCCEx_PLL3_Config+0x160>)
 800acc4:	4013      	ands	r3, r2
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	69d2      	ldr	r2, [r2, #28]
 800acca:	00d2      	lsls	r2, r2, #3
 800accc:	4920      	ldr	r1, [pc, #128]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800acce:	4313      	orrs	r3, r2
 800acd0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800acd2:	4b1f      	ldr	r3, [pc, #124]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800acd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd6:	4a1e      	ldr	r2, [pc, #120]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800acd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d106      	bne.n	800acf2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ace4:	4b1a      	ldr	r3, [pc, #104]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	4a19      	ldr	r2, [pc, #100]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800acea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800acee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800acf0:	e00f      	b.n	800ad12 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d106      	bne.n	800ad06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800acf8:	4b15      	ldr	r3, [pc, #84]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800acfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfc:	4a14      	ldr	r2, [pc, #80]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800acfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ad02:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad04:	e005      	b.n	800ad12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ad06:	4b12      	ldr	r3, [pc, #72]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ad08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0a:	4a11      	ldr	r2, [pc, #68]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ad0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ad12:	4b0f      	ldr	r3, [pc, #60]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a0e      	ldr	r2, [pc, #56]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ad18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad1e:	f7f9 fd3d 	bl	800479c <HAL_GetTick>
 800ad22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad24:	e008      	b.n	800ad38 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ad26:	f7f9 fd39 	bl	800479c <HAL_GetTick>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d901      	bls.n	800ad38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e006      	b.n	800ad46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad38:	4b05      	ldr	r3, [pc, #20]	; (800ad50 <RCCEx_PLL3_Config+0x15c>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d0f0      	beq.n	800ad26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	58024400 	.word	0x58024400
 800ad54:	ffff0007 	.word	0xffff0007

0800ad58 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e0a8      	b.n	800aebc <HAL_SMBUS_Init+0x164>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7f5 ffde 	bl	8000d3c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2202      	movs	r2, #2
 800ad84:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f022 0201 	bic.w	r2, r2, #1
 800ad94:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ada2:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	695a      	ldr	r2, [r3, #20]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800adb2:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	695a      	ldr	r2, [r3, #20]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800adc2:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800adcc:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800addc:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d012      	beq.n	800ae0c <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d107      	bne.n	800adfe <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adfa:	609a      	str	r2, [r3, #8]
 800adfc:	e006      	b.n	800ae0c <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68da      	ldr	r2, [r3, #12]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ae0a:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d104      	bne.n	800ae1e <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	6859      	ldr	r1, [r3, #4]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	4b26      	ldr	r3, [pc, #152]	; (800aec4 <HAL_SMBUS_Init+0x16c>)
 800ae2a:	430b      	orrs	r3, r1
 800ae2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	695a      	ldr	r2, [r3, #20]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	69db      	ldr	r3, [r3, #28]
 800ae3e:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	430a      	orrs	r2, r1
 800ae46:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a1a      	ldr	r2, [r3, #32]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae50:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae56:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5c:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800ae68:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae6a:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae74:	d110      	bne.n	800ae98 <HAL_SMBUS_Init+0x140>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d004      	beq.n	800ae88 <HAL_SMBUS_Init+0x130>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800ae82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae86:	d107      	bne.n	800ae98 <HAL_SMBUS_Init+0x140>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ae96:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f042 0201 	orr.w	r2, r2, #1
 800aea6:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	02008000 	.word	0x02008000

0800aec8 <HAL_SMBUS_ConfigDigitalFilter>:
  *                the configuration information for the specified SMBUS.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d137      	bne.n	800af4a <HAL_SMBUS_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_SMBUS_ConfigDigitalFilter+0x20>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e031      	b.n	800af4c <HAL_SMBUS_ConfigDigitalFilter+0x84>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2202      	movs	r2, #2
 800aef4:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the selected SMBUS peripheral */
    __HAL_SMBUS_DISABLE(hsmbus);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f022 0201 	bic.w	r2, r2, #1
 800af04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hsmbus->Instance->CR1;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2C DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800af14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	021b      	lsls	r3, r3, #8
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hsmbus->Instance->CR1 = tmpreg;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	601a      	str	r2, [r3, #0]

    __HAL_SMBUS_ENABLE(hsmbus);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f042 0201 	orr.w	r2, r2, #1
 800af36:	601a      	str	r2, [r3, #0]

    hsmbus->State = HAL_SMBUS_STATE_READY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return HAL_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	e000      	b.n	800af4c <HAL_SMBUS_ConfigDigitalFilter+0x84>
  }
  else
  {
    return HAL_BUSY;
 800af4a:	2302      	movs	r3, #2
  }
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e0f1      	b.n	800b14e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a78      	ldr	r2, [pc, #480]	; (800b158 <HAL_SPI_Init+0x200>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d00f      	beq.n	800af9a <HAL_SPI_Init+0x42>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a77      	ldr	r2, [pc, #476]	; (800b15c <HAL_SPI_Init+0x204>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d00a      	beq.n	800af9a <HAL_SPI_Init+0x42>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a75      	ldr	r2, [pc, #468]	; (800b160 <HAL_SPI_Init+0x208>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d005      	beq.n	800af9a <HAL_SPI_Init+0x42>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	2b0f      	cmp	r3, #15
 800af94:	d901      	bls.n	800af9a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	e0d9      	b.n	800b14e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fc9c 	bl	800b8d8 <SPI_GetPacketSize>
 800afa0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a6c      	ldr	r2, [pc, #432]	; (800b158 <HAL_SPI_Init+0x200>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d00c      	beq.n	800afc6 <HAL_SPI_Init+0x6e>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a6a      	ldr	r2, [pc, #424]	; (800b15c <HAL_SPI_Init+0x204>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d007      	beq.n	800afc6 <HAL_SPI_Init+0x6e>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a69      	ldr	r2, [pc, #420]	; (800b160 <HAL_SPI_Init+0x208>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d002      	beq.n	800afc6 <HAL_SPI_Init+0x6e>
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b08      	cmp	r3, #8
 800afc4:	d811      	bhi.n	800afea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afca:	4a63      	ldr	r2, [pc, #396]	; (800b158 <HAL_SPI_Init+0x200>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d009      	beq.n	800afe4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a61      	ldr	r2, [pc, #388]	; (800b15c <HAL_SPI_Init+0x204>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d004      	beq.n	800afe4 <HAL_SPI_Init+0x8c>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a60      	ldr	r2, [pc, #384]	; (800b160 <HAL_SPI_Init+0x208>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d104      	bne.n	800afee <HAL_SPI_Init+0x96>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2b10      	cmp	r3, #16
 800afe8:	d901      	bls.n	800afee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e0af      	b.n	800b14e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d106      	bne.n	800b008 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7f8 fcc0 	bl	8003988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2202      	movs	r2, #2
 800b00c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f022 0201 	bic.w	r2, r2, #1
 800b01e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b02a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b034:	d119      	bne.n	800b06a <HAL_SPI_Init+0x112>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b03e:	d103      	bne.n	800b048 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b044:	2b00      	cmp	r3, #0
 800b046:	d008      	beq.n	800b05a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10c      	bne.n	800b06a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b058:	d107      	bne.n	800b06a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b068:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	69da      	ldr	r2, [r3, #28]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b072:	431a      	orrs	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	431a      	orrs	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b07c:	ea42 0103 	orr.w	r1, r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68da      	ldr	r2, [r3, #12]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	430a      	orrs	r2, r1
 800b08a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b094:	431a      	orrs	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09a:	431a      	orrs	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	431a      	orrs	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	431a      	orrs	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	431a      	orrs	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	431a      	orrs	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	431a      	orrs	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0ca:	ea42 0103 	orr.w	r1, r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d113      	bne.n	800b10a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b108:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f022 0201 	bic.w	r2, r2, #1
 800b118:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00a      	beq.n	800b13c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	430a      	orrs	r2, r1
 800b13a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	40013000 	.word	0x40013000
 800b15c:	40003800 	.word	0x40003800
 800b160:	40003c00 	.word	0x40003c00

0800b164 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b08e      	sub	sp, #56	; 0x38
 800b168:	af02      	add	r7, sp, #8
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
 800b170:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3320      	adds	r3, #32
 800b17e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3330      	adds	r3, #48	; 0x30
 800b186:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d101      	bne.n	800b196 <HAL_SPI_TransmitReceive+0x32>
 800b192:	2302      	movs	r3, #2
 800b194:	e2ce      	b.n	800b734 <HAL_SPI_TransmitReceive+0x5d0>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2201      	movs	r2, #1
 800b19a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b19e:	f7f9 fafd 	bl	800479c <HAL_GetTick>
 800b1a2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800b1a4:	887b      	ldrh	r3, [r7, #2]
 800b1a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800b1a8:	887b      	ldrh	r3, [r7, #2]
 800b1aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b1b2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b1ba:	7efb      	ldrb	r3, [r7, #27]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d014      	beq.n	800b1ea <HAL_SPI_TransmitReceive+0x86>
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1c6:	d106      	bne.n	800b1d6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d102      	bne.n	800b1d6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b1d0:	7efb      	ldrb	r3, [r7, #27]
 800b1d2:	2b04      	cmp	r3, #4
 800b1d4:	d009      	beq.n	800b1ea <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b1e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1e8:	e2a4      	b.n	800b734 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d005      	beq.n	800b1fc <HAL_SPI_TransmitReceive+0x98>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d002      	beq.n	800b1fc <HAL_SPI_TransmitReceive+0x98>
 800b1f6:	887b      	ldrh	r3, [r7, #2]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d109      	bne.n	800b210 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b20a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b20e:	e291      	b.n	800b734 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b216:	b2db      	uxtb	r3, r3
 800b218:	2b04      	cmp	r3, #4
 800b21a:	d003      	beq.n	800b224 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2205      	movs	r2, #5
 800b220:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	887a      	ldrh	r2, [r7, #2]
 800b236:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	887a      	ldrh	r2, [r7, #2]
 800b23e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	887a      	ldrh	r2, [r7, #2]
 800b24c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	887a      	ldrh	r2, [r7, #2]
 800b254:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	4b81      	ldr	r3, [pc, #516]	; (800b470 <HAL_SPI_TransmitReceive+0x30c>)
 800b26c:	4013      	ands	r3, r2
 800b26e:	8879      	ldrh	r1, [r7, #2]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	6812      	ldr	r2, [r2, #0]
 800b274:	430b      	orrs	r3, r1
 800b276:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f042 0201 	orr.w	r2, r2, #1
 800b286:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b290:	d107      	bne.n	800b2a2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	2b0f      	cmp	r3, #15
 800b2a8:	d970      	bls.n	800b38c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b2aa:	e068      	b.n	800b37e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d11a      	bne.n	800b2f0 <HAL_SPI_TransmitReceive+0x18c>
 800b2ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d017      	beq.n	800b2f0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	6812      	ldr	r2, [r2, #0]
 800b2ca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2d0:	1d1a      	adds	r2, r3, #4
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	695a      	ldr	r2, [r3, #20]
 800b2f6:	f248 0308 	movw	r3, #32776	; 0x8008
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d01a      	beq.n	800b336 <HAL_SPI_TransmitReceive+0x1d2>
 800b300:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b302:	2b00      	cmp	r3, #0
 800b304:	d017      	beq.n	800b336 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b30e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b310:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b316:	1d1a      	adds	r2, r3, #4
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b322:	b29b      	uxth	r3, r3
 800b324:	3b01      	subs	r3, #1
 800b326:	b29a      	uxth	r2, r3
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b334:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b336:	f7f9 fa31 	bl	800479c <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b342:	429a      	cmp	r2, r3
 800b344:	d803      	bhi.n	800b34e <HAL_SPI_TransmitReceive+0x1ea>
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34c:	d102      	bne.n	800b354 <HAL_SPI_TransmitReceive+0x1f0>
 800b34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b350:	2b00      	cmp	r3, #0
 800b352:	d114      	bne.n	800b37e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f000 f9f1 	bl	800b73c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b368:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2201      	movs	r2, #1
 800b376:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b37a:	2303      	movs	r3, #3
 800b37c:	e1da      	b.n	800b734 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b37e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b380:	2b00      	cmp	r3, #0
 800b382:	d193      	bne.n	800b2ac <HAL_SPI_TransmitReceive+0x148>
 800b384:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b386:	2b00      	cmp	r3, #0
 800b388:	d190      	bne.n	800b2ac <HAL_SPI_TransmitReceive+0x148>
 800b38a:	e1ac      	b.n	800b6e6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	2b07      	cmp	r3, #7
 800b392:	f240 81a0 	bls.w	800b6d6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b396:	e0a9      	b.n	800b4ec <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	695b      	ldr	r3, [r3, #20]
 800b39e:	f003 0302 	and.w	r3, r3, #2
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d139      	bne.n	800b41a <HAL_SPI_TransmitReceive+0x2b6>
 800b3a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d036      	beq.n	800b41a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b3ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d91c      	bls.n	800b3ec <HAL_SPI_TransmitReceive+0x288>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d018      	beq.n	800b3ec <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	6812      	ldr	r2, [r2, #0]
 800b3c4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ca:	1d1a      	adds	r2, r3, #4
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	3b02      	subs	r3, #2
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b3ea:	e016      	b.n	800b41a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3f0:	881a      	ldrh	r2, [r3, #0]
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3fa:	1c9a      	adds	r2, r3, #2
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b406:	b29b      	uxth	r3, r3
 800b408:	3b01      	subs	r3, #1
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b418:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d03d      	beq.n	800b4a4 <HAL_SPI_TransmitReceive+0x340>
 800b428:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d03a      	beq.n	800b4a4 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d01b      	beq.n	800b474 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b444:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b446:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b44c:	1d1a      	adds	r2, r3, #4
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b458:	b29b      	uxth	r3, r3
 800b45a:	3b02      	subs	r3, #2
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b46a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b46c:	e01a      	b.n	800b4a4 <HAL_SPI_TransmitReceive+0x340>
 800b46e:	bf00      	nop
 800b470:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b478:	6a3a      	ldr	r2, [r7, #32]
 800b47a:	8812      	ldrh	r2, [r2, #0]
 800b47c:	b292      	uxth	r2, r2
 800b47e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b484:	1c9a      	adds	r2, r3, #2
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b490:	b29b      	uxth	r3, r3
 800b492:	3b01      	subs	r3, #1
 800b494:	b29a      	uxth	r2, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4a4:	f7f9 f97a 	bl	800479c <HAL_GetTick>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d803      	bhi.n	800b4bc <HAL_SPI_TransmitReceive+0x358>
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ba:	d102      	bne.n	800b4c2 <HAL_SPI_TransmitReceive+0x35e>
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d114      	bne.n	800b4ec <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 f93a 	bl	800b73c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	e123      	b.n	800b734 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b4ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f47f af52 	bne.w	800b398 <HAL_SPI_TransmitReceive+0x234>
 800b4f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f47f af4e 	bne.w	800b398 <HAL_SPI_TransmitReceive+0x234>
 800b4fc:	e0f3      	b.n	800b6e6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	f003 0302 	and.w	r3, r3, #2
 800b508:	2b02      	cmp	r3, #2
 800b50a:	d15a      	bne.n	800b5c2 <HAL_SPI_TransmitReceive+0x45e>
 800b50c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d057      	beq.n	800b5c2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b512:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b514:	2b03      	cmp	r3, #3
 800b516:	d91c      	bls.n	800b552 <HAL_SPI_TransmitReceive+0x3ee>
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b51c:	2b40      	cmp	r3, #64	; 0x40
 800b51e:	d918      	bls.n	800b552 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	6812      	ldr	r2, [r2, #0]
 800b52a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b530:	1d1a      	adds	r2, r3, #4
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	3b04      	subs	r3, #4
 800b540:	b29a      	uxth	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b54e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b550:	e037      	b.n	800b5c2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b552:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b554:	2b01      	cmp	r3, #1
 800b556:	d91b      	bls.n	800b590 <HAL_SPI_TransmitReceive+0x42c>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d017      	beq.n	800b590 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b564:	881a      	ldrh	r2, [r3, #0]
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b568:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b56e:	1c9a      	adds	r2, r3, #2
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	3b02      	subs	r3, #2
 800b57e:	b29a      	uxth	r2, r3
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b58c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b58e:	e018      	b.n	800b5c2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3320      	adds	r3, #32
 800b59a:	7812      	ldrb	r2, [r2, #0]
 800b59c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5a2:	1c5a      	adds	r2, r3, #1
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b5c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	695b      	ldr	r3, [r3, #20]
 800b5c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d05e      	beq.n	800b68e <HAL_SPI_TransmitReceive+0x52a>
 800b5d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d05b      	beq.n	800b68e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	695b      	ldr	r3, [r3, #20]
 800b5dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d018      	beq.n	800b616 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b5ee:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5f4:	1d1a      	adds	r2, r3, #4
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b600:	b29b      	uxth	r3, r3
 800b602:	3b04      	subs	r3, #4
 800b604:	b29a      	uxth	r2, r3
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b612:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b614:	e03b      	b.n	800b68e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b624:	d918      	bls.n	800b658 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b62a:	6a3a      	ldr	r2, [r7, #32]
 800b62c:	8812      	ldrh	r2, [r2, #0]
 800b62e:	b292      	uxth	r2, r2
 800b630:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b636:	1c9a      	adds	r2, r3, #2
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b642:	b29b      	uxth	r3, r3
 800b644:	3b02      	subs	r3, #2
 800b646:	b29a      	uxth	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b654:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b656:	e01a      	b.n	800b68e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b664:	7812      	ldrb	r2, [r2, #0]
 800b666:	b2d2      	uxtb	r2, r2
 800b668:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	3b01      	subs	r3, #1
 800b67e:	b29a      	uxth	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b68c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b68e:	f7f9 f885 	bl	800479c <HAL_GetTick>
 800b692:	4602      	mov	r2, r0
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d803      	bhi.n	800b6a6 <HAL_SPI_TransmitReceive+0x542>
 800b69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a4:	d102      	bne.n	800b6ac <HAL_SPI_TransmitReceive+0x548>
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d114      	bne.n	800b6d6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 f845 	bl	800b73c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e02e      	b.n	800b734 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b6d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f47f af10 	bne.w	800b4fe <HAL_SPI_TransmitReceive+0x39a>
 800b6de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f47f af0c 	bne.w	800b4fe <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2108      	movs	r1, #8
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f000 f8c3 	bl	800b87c <SPI_WaitOnFlagUntilTimeout>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d007      	beq.n	800b70c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b702:	f043 0220 	orr.w	r2, r3, #32
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f000 f815 	bl	800b73c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2200      	movs	r2, #0
 800b716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	e001      	b.n	800b734 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800b730:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b734:	4618      	mov	r0, r3
 800b736:	3730      	adds	r7, #48	; 0x30
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	699a      	ldr	r2, [r3, #24]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f042 0208 	orr.w	r2, r2, #8
 800b75a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	699a      	ldr	r2, [r3, #24]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f042 0210 	orr.w	r2, r2, #16
 800b76a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f022 0201 	bic.w	r2, r2, #1
 800b77a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6919      	ldr	r1, [r3, #16]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	4b3c      	ldr	r3, [pc, #240]	; (800b878 <SPI_CloseTransfer+0x13c>)
 800b788:	400b      	ands	r3, r1
 800b78a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	689a      	ldr	r2, [r3, #8]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b79a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b04      	cmp	r3, #4
 800b7a6:	d014      	beq.n	800b7d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f003 0320 	and.w	r3, r3, #32
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00f      	beq.n	800b7d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	699a      	ldr	r2, [r3, #24]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f042 0220 	orr.w	r2, r2, #32
 800b7d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	d014      	beq.n	800b808 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00f      	beq.n	800b808 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ee:	f043 0204 	orr.w	r2, r3, #4
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	699a      	ldr	r2, [r3, #24]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b806:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00f      	beq.n	800b832 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b818:	f043 0201 	orr.w	r2, r3, #1
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	699a      	ldr	r2, [r3, #24]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b830:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00f      	beq.n	800b85c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b842:	f043 0208 	orr.w	r2, r3, #8
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	699a      	ldr	r2, [r3, #24]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b85a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b86c:	bf00      	nop
 800b86e:	3714      	adds	r7, #20
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	fffffc90 	.word	0xfffffc90

0800b87c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	603b      	str	r3, [r7, #0]
 800b888:	4613      	mov	r3, r2
 800b88a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b88c:	e010      	b.n	800b8b0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b88e:	f7f8 ff85 	bl	800479c <HAL_GetTick>
 800b892:	4602      	mov	r2, r0
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	69ba      	ldr	r2, [r7, #24]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d803      	bhi.n	800b8a6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a4:	d102      	bne.n	800b8ac <SPI_WaitOnFlagUntilTimeout+0x30>
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d101      	bne.n	800b8b0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e00f      	b.n	800b8d0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	695a      	ldr	r2, [r3, #20]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	bf0c      	ite	eq
 800b8c0:	2301      	moveq	r3, #1
 800b8c2:	2300      	movne	r3, #0
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	79fb      	ldrb	r3, [r7, #7]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d0df      	beq.n	800b88e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e4:	095b      	lsrs	r3, r3, #5
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	3307      	adds	r3, #7
 800b8f6:	08db      	lsrs	r3, r3, #3
 800b8f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	fb02 f303 	mul.w	r3, r2, r3
}
 800b902:	4618      	mov	r0, r3
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e049      	b.n	800b9b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d106      	bne.n	800b93a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f841 	bl	800b9bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2202      	movs	r2, #2
 800b93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	3304      	adds	r3, #4
 800b94a:	4619      	mov	r1, r3
 800b94c:	4610      	mov	r0, r2
 800b94e:	f000 fd5b 	bl	800c408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2201      	movs	r2, #1
 800b996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b9c4:	bf00      	nop
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d001      	beq.n	800b9e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e054      	b.n	800ba92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68da      	ldr	r2, [r3, #12]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f042 0201 	orr.w	r2, r2, #1
 800b9fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a26      	ldr	r2, [pc, #152]	; (800baa0 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d022      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x80>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba12:	d01d      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x80>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a22      	ldr	r2, [pc, #136]	; (800baa4 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d018      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x80>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a21      	ldr	r2, [pc, #132]	; (800baa8 <HAL_TIM_Base_Start_IT+0xd8>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d013      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x80>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a1f      	ldr	r2, [pc, #124]	; (800baac <HAL_TIM_Base_Start_IT+0xdc>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d00e      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x80>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a1e      	ldr	r2, [pc, #120]	; (800bab0 <HAL_TIM_Base_Start_IT+0xe0>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d009      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x80>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a1c      	ldr	r2, [pc, #112]	; (800bab4 <HAL_TIM_Base_Start_IT+0xe4>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d004      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x80>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a1b      	ldr	r2, [pc, #108]	; (800bab8 <HAL_TIM_Base_Start_IT+0xe8>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d115      	bne.n	800ba7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689a      	ldr	r2, [r3, #8]
 800ba56:	4b19      	ldr	r3, [pc, #100]	; (800babc <HAL_TIM_Base_Start_IT+0xec>)
 800ba58:	4013      	ands	r3, r2
 800ba5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2b06      	cmp	r3, #6
 800ba60:	d015      	beq.n	800ba8e <HAL_TIM_Base_Start_IT+0xbe>
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba68:	d011      	beq.n	800ba8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f042 0201 	orr.w	r2, r2, #1
 800ba78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba7a:	e008      	b.n	800ba8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f042 0201 	orr.w	r2, r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	e000      	b.n	800ba90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	40010000 	.word	0x40010000
 800baa4:	40000400 	.word	0x40000400
 800baa8:	40000800 	.word	0x40000800
 800baac:	40000c00 	.word	0x40000c00
 800bab0:	40010400 	.word	0x40010400
 800bab4:	40001800 	.word	0x40001800
 800bab8:	40014000 	.word	0x40014000
 800babc:	00010007 	.word	0x00010007

0800bac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d101      	bne.n	800bad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	e049      	b.n	800bb66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	2b00      	cmp	r3, #0
 800badc:	d106      	bne.n	800baec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7f8 fa1a 	bl	8003f20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2202      	movs	r2, #2
 800baf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	3304      	adds	r3, #4
 800bafc:	4619      	mov	r1, r3
 800bafe:	4610      	mov	r0, r2
 800bb00:	f000 fc82 	bl	800c408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
	...

0800bb70 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f000 ffb0 	bl	800cae8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a3e      	ldr	r2, [pc, #248]	; (800bc88 <HAL_TIM_PWM_Stop+0x118>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d013      	beq.n	800bbba <HAL_TIM_PWM_Stop+0x4a>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a3d      	ldr	r2, [pc, #244]	; (800bc8c <HAL_TIM_PWM_Stop+0x11c>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d00e      	beq.n	800bbba <HAL_TIM_PWM_Stop+0x4a>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a3b      	ldr	r2, [pc, #236]	; (800bc90 <HAL_TIM_PWM_Stop+0x120>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d009      	beq.n	800bbba <HAL_TIM_PWM_Stop+0x4a>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a3a      	ldr	r2, [pc, #232]	; (800bc94 <HAL_TIM_PWM_Stop+0x124>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d004      	beq.n	800bbba <HAL_TIM_PWM_Stop+0x4a>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a38      	ldr	r2, [pc, #224]	; (800bc98 <HAL_TIM_PWM_Stop+0x128>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d101      	bne.n	800bbbe <HAL_TIM_PWM_Stop+0x4e>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e000      	b.n	800bbc0 <HAL_TIM_PWM_Stop+0x50>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d017      	beq.n	800bbf4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	6a1a      	ldr	r2, [r3, #32]
 800bbca:	f241 1311 	movw	r3, #4369	; 0x1111
 800bbce:	4013      	ands	r3, r2
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10f      	bne.n	800bbf4 <HAL_TIM_PWM_Stop+0x84>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6a1a      	ldr	r2, [r3, #32]
 800bbda:	f240 4344 	movw	r3, #1092	; 0x444
 800bbde:	4013      	ands	r3, r2
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d107      	bne.n	800bbf4 <HAL_TIM_PWM_Stop+0x84>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bbf2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	6a1a      	ldr	r2, [r3, #32]
 800bbfa:	f241 1311 	movw	r3, #4369	; 0x1111
 800bbfe:	4013      	ands	r3, r2
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10f      	bne.n	800bc24 <HAL_TIM_PWM_Stop+0xb4>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6a1a      	ldr	r2, [r3, #32]
 800bc0a:	f240 4344 	movw	r3, #1092	; 0x444
 800bc0e:	4013      	ands	r3, r2
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d107      	bne.n	800bc24 <HAL_TIM_PWM_Stop+0xb4>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f022 0201 	bic.w	r2, r2, #1
 800bc22:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d104      	bne.n	800bc34 <HAL_TIM_PWM_Stop+0xc4>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc32:	e023      	b.n	800bc7c <HAL_TIM_PWM_Stop+0x10c>
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	2b04      	cmp	r3, #4
 800bc38:	d104      	bne.n	800bc44 <HAL_TIM_PWM_Stop+0xd4>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc42:	e01b      	b.n	800bc7c <HAL_TIM_PWM_Stop+0x10c>
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2b08      	cmp	r3, #8
 800bc48:	d104      	bne.n	800bc54 <HAL_TIM_PWM_Stop+0xe4>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc52:	e013      	b.n	800bc7c <HAL_TIM_PWM_Stop+0x10c>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	2b0c      	cmp	r3, #12
 800bc58:	d104      	bne.n	800bc64 <HAL_TIM_PWM_Stop+0xf4>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc62:	e00b      	b.n	800bc7c <HAL_TIM_PWM_Stop+0x10c>
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	2b10      	cmp	r3, #16
 800bc68:	d104      	bne.n	800bc74 <HAL_TIM_PWM_Stop+0x104>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc72:	e003      	b.n	800bc7c <HAL_TIM_PWM_Stop+0x10c>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	40010000 	.word	0x40010000
 800bc8c:	40010400 	.word	0x40010400
 800bc90:	40014000 	.word	0x40014000
 800bc94:	40014400 	.word	0x40014400
 800bc98:	40014800 	.word	0x40014800

0800bc9c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d109      	bne.n	800bcc4 <HAL_TIM_PWM_Start_IT+0x28>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	bf14      	ite	ne
 800bcbc:	2301      	movne	r3, #1
 800bcbe:	2300      	moveq	r3, #0
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	e03c      	b.n	800bd3e <HAL_TIM_PWM_Start_IT+0xa2>
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2b04      	cmp	r3, #4
 800bcc8:	d109      	bne.n	800bcde <HAL_TIM_PWM_Start_IT+0x42>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	bf14      	ite	ne
 800bcd6:	2301      	movne	r3, #1
 800bcd8:	2300      	moveq	r3, #0
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	e02f      	b.n	800bd3e <HAL_TIM_PWM_Start_IT+0xa2>
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	2b08      	cmp	r3, #8
 800bce2:	d109      	bne.n	800bcf8 <HAL_TIM_PWM_Start_IT+0x5c>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	bf14      	ite	ne
 800bcf0:	2301      	movne	r3, #1
 800bcf2:	2300      	moveq	r3, #0
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	e022      	b.n	800bd3e <HAL_TIM_PWM_Start_IT+0xa2>
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	2b0c      	cmp	r3, #12
 800bcfc:	d109      	bne.n	800bd12 <HAL_TIM_PWM_Start_IT+0x76>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	bf14      	ite	ne
 800bd0a:	2301      	movne	r3, #1
 800bd0c:	2300      	moveq	r3, #0
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	e015      	b.n	800bd3e <HAL_TIM_PWM_Start_IT+0xa2>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2b10      	cmp	r3, #16
 800bd16:	d109      	bne.n	800bd2c <HAL_TIM_PWM_Start_IT+0x90>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	bf14      	ite	ne
 800bd24:	2301      	movne	r3, #1
 800bd26:	2300      	moveq	r3, #0
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	e008      	b.n	800bd3e <HAL_TIM_PWM_Start_IT+0xa2>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	bf14      	ite	ne
 800bd38:	2301      	movne	r3, #1
 800bd3a:	2300      	moveq	r3, #0
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e0ec      	b.n	800bf20 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d104      	bne.n	800bd56 <HAL_TIM_PWM_Start_IT+0xba>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd54:	e023      	b.n	800bd9e <HAL_TIM_PWM_Start_IT+0x102>
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	2b04      	cmp	r3, #4
 800bd5a:	d104      	bne.n	800bd66 <HAL_TIM_PWM_Start_IT+0xca>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2202      	movs	r2, #2
 800bd60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd64:	e01b      	b.n	800bd9e <HAL_TIM_PWM_Start_IT+0x102>
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	2b08      	cmp	r3, #8
 800bd6a:	d104      	bne.n	800bd76 <HAL_TIM_PWM_Start_IT+0xda>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2202      	movs	r2, #2
 800bd70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd74:	e013      	b.n	800bd9e <HAL_TIM_PWM_Start_IT+0x102>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b0c      	cmp	r3, #12
 800bd7a:	d104      	bne.n	800bd86 <HAL_TIM_PWM_Start_IT+0xea>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2202      	movs	r2, #2
 800bd80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd84:	e00b      	b.n	800bd9e <HAL_TIM_PWM_Start_IT+0x102>
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2b10      	cmp	r3, #16
 800bd8a:	d104      	bne.n	800bd96 <HAL_TIM_PWM_Start_IT+0xfa>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2202      	movs	r2, #2
 800bd90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd94:	e003      	b.n	800bd9e <HAL_TIM_PWM_Start_IT+0x102>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2202      	movs	r2, #2
 800bd9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2b0c      	cmp	r3, #12
 800bda2:	d841      	bhi.n	800be28 <HAL_TIM_PWM_Start_IT+0x18c>
 800bda4:	a201      	add	r2, pc, #4	; (adr r2, 800bdac <HAL_TIM_PWM_Start_IT+0x110>)
 800bda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdaa:	bf00      	nop
 800bdac:	0800bde1 	.word	0x0800bde1
 800bdb0:	0800be29 	.word	0x0800be29
 800bdb4:	0800be29 	.word	0x0800be29
 800bdb8:	0800be29 	.word	0x0800be29
 800bdbc:	0800bdf3 	.word	0x0800bdf3
 800bdc0:	0800be29 	.word	0x0800be29
 800bdc4:	0800be29 	.word	0x0800be29
 800bdc8:	0800be29 	.word	0x0800be29
 800bdcc:	0800be05 	.word	0x0800be05
 800bdd0:	0800be29 	.word	0x0800be29
 800bdd4:	0800be29 	.word	0x0800be29
 800bdd8:	0800be29 	.word	0x0800be29
 800bddc:	0800be17 	.word	0x0800be17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68da      	ldr	r2, [r3, #12]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f042 0202 	orr.w	r2, r2, #2
 800bdee:	60da      	str	r2, [r3, #12]
      break;
 800bdf0:	e01d      	b.n	800be2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68da      	ldr	r2, [r3, #12]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f042 0204 	orr.w	r2, r2, #4
 800be00:	60da      	str	r2, [r3, #12]
      break;
 800be02:	e014      	b.n	800be2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68da      	ldr	r2, [r3, #12]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f042 0208 	orr.w	r2, r2, #8
 800be12:	60da      	str	r2, [r3, #12]
      break;
 800be14:	e00b      	b.n	800be2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68da      	ldr	r2, [r3, #12]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f042 0210 	orr.w	r2, r2, #16
 800be24:	60da      	str	r2, [r3, #12]
      break;
 800be26:	e002      	b.n	800be2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800be28:	2301      	movs	r3, #1
 800be2a:	73fb      	strb	r3, [r7, #15]
      break;
 800be2c:	bf00      	nop
  }

  if (status == HAL_OK)
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d174      	bne.n	800bf1e <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2201      	movs	r2, #1
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 fe53 	bl	800cae8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a38      	ldr	r2, [pc, #224]	; (800bf28 <HAL_TIM_PWM_Start_IT+0x28c>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d013      	beq.n	800be74 <HAL_TIM_PWM_Start_IT+0x1d8>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a36      	ldr	r2, [pc, #216]	; (800bf2c <HAL_TIM_PWM_Start_IT+0x290>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d00e      	beq.n	800be74 <HAL_TIM_PWM_Start_IT+0x1d8>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a35      	ldr	r2, [pc, #212]	; (800bf30 <HAL_TIM_PWM_Start_IT+0x294>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d009      	beq.n	800be74 <HAL_TIM_PWM_Start_IT+0x1d8>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a33      	ldr	r2, [pc, #204]	; (800bf34 <HAL_TIM_PWM_Start_IT+0x298>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d004      	beq.n	800be74 <HAL_TIM_PWM_Start_IT+0x1d8>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a32      	ldr	r2, [pc, #200]	; (800bf38 <HAL_TIM_PWM_Start_IT+0x29c>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d101      	bne.n	800be78 <HAL_TIM_PWM_Start_IT+0x1dc>
 800be74:	2301      	movs	r3, #1
 800be76:	e000      	b.n	800be7a <HAL_TIM_PWM_Start_IT+0x1de>
 800be78:	2300      	movs	r3, #0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d007      	beq.n	800be8e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a25      	ldr	r2, [pc, #148]	; (800bf28 <HAL_TIM_PWM_Start_IT+0x28c>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d022      	beq.n	800bede <HAL_TIM_PWM_Start_IT+0x242>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bea0:	d01d      	beq.n	800bede <HAL_TIM_PWM_Start_IT+0x242>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a25      	ldr	r2, [pc, #148]	; (800bf3c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d018      	beq.n	800bede <HAL_TIM_PWM_Start_IT+0x242>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a23      	ldr	r2, [pc, #140]	; (800bf40 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d013      	beq.n	800bede <HAL_TIM_PWM_Start_IT+0x242>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a22      	ldr	r2, [pc, #136]	; (800bf44 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d00e      	beq.n	800bede <HAL_TIM_PWM_Start_IT+0x242>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a19      	ldr	r2, [pc, #100]	; (800bf2c <HAL_TIM_PWM_Start_IT+0x290>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d009      	beq.n	800bede <HAL_TIM_PWM_Start_IT+0x242>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a1e      	ldr	r2, [pc, #120]	; (800bf48 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d004      	beq.n	800bede <HAL_TIM_PWM_Start_IT+0x242>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a15      	ldr	r2, [pc, #84]	; (800bf30 <HAL_TIM_PWM_Start_IT+0x294>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d115      	bne.n	800bf0a <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	689a      	ldr	r2, [r3, #8]
 800bee4:	4b19      	ldr	r3, [pc, #100]	; (800bf4c <HAL_TIM_PWM_Start_IT+0x2b0>)
 800bee6:	4013      	ands	r3, r2
 800bee8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2b06      	cmp	r3, #6
 800beee:	d015      	beq.n	800bf1c <HAL_TIM_PWM_Start_IT+0x280>
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bef6:	d011      	beq.n	800bf1c <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f042 0201 	orr.w	r2, r2, #1
 800bf06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf08:	e008      	b.n	800bf1c <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f042 0201 	orr.w	r2, r2, #1
 800bf18:	601a      	str	r2, [r3, #0]
 800bf1a:	e000      	b.n	800bf1e <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf1c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	40010000 	.word	0x40010000
 800bf2c:	40010400 	.word	0x40010400
 800bf30:	40014000 	.word	0x40014000
 800bf34:	40014400 	.word	0x40014400
 800bf38:	40014800 	.word	0x40014800
 800bf3c:	40000400 	.word	0x40000400
 800bf40:	40000800 	.word	0x40000800
 800bf44:	40000c00 	.word	0x40000c00
 800bf48:	40001800 	.word	0x40001800
 800bf4c:	00010007 	.word	0x00010007

0800bf50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	691b      	ldr	r3, [r3, #16]
 800bf5e:	f003 0302 	and.w	r3, r3, #2
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d122      	bne.n	800bfac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	f003 0302 	and.w	r3, r3, #2
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	d11b      	bne.n	800bfac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f06f 0202 	mvn.w	r2, #2
 800bf7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	f003 0303 	and.w	r3, r3, #3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d003      	beq.n	800bf9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 fa1a 	bl	800c3cc <HAL_TIM_IC_CaptureCallback>
 800bf98:	e005      	b.n	800bfa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fa0c 	bl	800c3b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fa1d 	bl	800c3e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	f003 0304 	and.w	r3, r3, #4
 800bfb6:	2b04      	cmp	r3, #4
 800bfb8:	d122      	bne.n	800c000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	f003 0304 	and.w	r3, r3, #4
 800bfc4:	2b04      	cmp	r3, #4
 800bfc6:	d11b      	bne.n	800c000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f06f 0204 	mvn.w	r2, #4
 800bfd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f9f0 	bl	800c3cc <HAL_TIM_IC_CaptureCallback>
 800bfec:	e005      	b.n	800bffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f9e2 	bl	800c3b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 f9f3 	bl	800c3e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	f003 0308 	and.w	r3, r3, #8
 800c00a:	2b08      	cmp	r3, #8
 800c00c:	d122      	bne.n	800c054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	f003 0308 	and.w	r3, r3, #8
 800c018:	2b08      	cmp	r3, #8
 800c01a:	d11b      	bne.n	800c054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f06f 0208 	mvn.w	r2, #8
 800c024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2204      	movs	r2, #4
 800c02a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	69db      	ldr	r3, [r3, #28]
 800c032:	f003 0303 	and.w	r3, r3, #3
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f9c6 	bl	800c3cc <HAL_TIM_IC_CaptureCallback>
 800c040:	e005      	b.n	800c04e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f9b8 	bl	800c3b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f9c9 	bl	800c3e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	f003 0310 	and.w	r3, r3, #16
 800c05e:	2b10      	cmp	r3, #16
 800c060:	d122      	bne.n	800c0a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	f003 0310 	and.w	r3, r3, #16
 800c06c:	2b10      	cmp	r3, #16
 800c06e:	d11b      	bne.n	800c0a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f06f 0210 	mvn.w	r2, #16
 800c078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2208      	movs	r2, #8
 800c07e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f99c 	bl	800c3cc <HAL_TIM_IC_CaptureCallback>
 800c094:	e005      	b.n	800c0a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f98e 	bl	800c3b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f99f 	bl	800c3e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d10e      	bne.n	800c0d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d107      	bne.n	800c0d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f06f 0201 	mvn.w	r2, #1
 800c0cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7f7 fb1e 	bl	8003710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0de:	2b80      	cmp	r3, #128	; 0x80
 800c0e0:	d10e      	bne.n	800c100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ec:	2b80      	cmp	r3, #128	; 0x80
 800c0ee:	d107      	bne.n	800c100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 fdb2 	bl	800cc64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c10a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c10e:	d10e      	bne.n	800c12e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c11a:	2b80      	cmp	r3, #128	; 0x80
 800c11c:	d107      	bne.n	800c12e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fda5 	bl	800cc78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c138:	2b40      	cmp	r3, #64	; 0x40
 800c13a:	d10e      	bne.n	800c15a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c146:	2b40      	cmp	r3, #64	; 0x40
 800c148:	d107      	bne.n	800c15a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f94d 	bl	800c3f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	f003 0320 	and.w	r3, r3, #32
 800c164:	2b20      	cmp	r3, #32
 800c166:	d10e      	bne.n	800c186 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	f003 0320 	and.w	r3, r3, #32
 800c172:	2b20      	cmp	r3, #32
 800c174:	d107      	bne.n	800c186 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f06f 0220 	mvn.w	r2, #32
 800c17e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fd65 	bl	800cc50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c186:	bf00      	nop
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
	...

0800c190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c19c:	2300      	movs	r3, #0
 800c19e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d101      	bne.n	800c1ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	e0ff      	b.n	800c3ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b14      	cmp	r3, #20
 800c1ba:	f200 80f0 	bhi.w	800c39e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c1be:	a201      	add	r2, pc, #4	; (adr r2, 800c1c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c4:	0800c219 	.word	0x0800c219
 800c1c8:	0800c39f 	.word	0x0800c39f
 800c1cc:	0800c39f 	.word	0x0800c39f
 800c1d0:	0800c39f 	.word	0x0800c39f
 800c1d4:	0800c259 	.word	0x0800c259
 800c1d8:	0800c39f 	.word	0x0800c39f
 800c1dc:	0800c39f 	.word	0x0800c39f
 800c1e0:	0800c39f 	.word	0x0800c39f
 800c1e4:	0800c29b 	.word	0x0800c29b
 800c1e8:	0800c39f 	.word	0x0800c39f
 800c1ec:	0800c39f 	.word	0x0800c39f
 800c1f0:	0800c39f 	.word	0x0800c39f
 800c1f4:	0800c2db 	.word	0x0800c2db
 800c1f8:	0800c39f 	.word	0x0800c39f
 800c1fc:	0800c39f 	.word	0x0800c39f
 800c200:	0800c39f 	.word	0x0800c39f
 800c204:	0800c31d 	.word	0x0800c31d
 800c208:	0800c39f 	.word	0x0800c39f
 800c20c:	0800c39f 	.word	0x0800c39f
 800c210:	0800c39f 	.word	0x0800c39f
 800c214:	0800c35d 	.word	0x0800c35d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68b9      	ldr	r1, [r7, #8]
 800c21e:	4618      	mov	r0, r3
 800c220:	f000 f98c 	bl	800c53c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	699a      	ldr	r2, [r3, #24]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f042 0208 	orr.w	r2, r2, #8
 800c232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	699a      	ldr	r2, [r3, #24]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f022 0204 	bic.w	r2, r2, #4
 800c242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6999      	ldr	r1, [r3, #24]
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	691a      	ldr	r2, [r3, #16]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	430a      	orrs	r2, r1
 800c254:	619a      	str	r2, [r3, #24]
      break;
 800c256:	e0a5      	b.n	800c3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68b9      	ldr	r1, [r7, #8]
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 f9fc 	bl	800c65c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	699a      	ldr	r2, [r3, #24]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	699a      	ldr	r2, [r3, #24]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6999      	ldr	r1, [r3, #24]
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	021a      	lsls	r2, r3, #8
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	430a      	orrs	r2, r1
 800c296:	619a      	str	r2, [r3, #24]
      break;
 800c298:	e084      	b.n	800c3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68b9      	ldr	r1, [r7, #8]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 fa65 	bl	800c770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	69da      	ldr	r2, [r3, #28]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f042 0208 	orr.w	r2, r2, #8
 800c2b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	69da      	ldr	r2, [r3, #28]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f022 0204 	bic.w	r2, r2, #4
 800c2c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	69d9      	ldr	r1, [r3, #28]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	691a      	ldr	r2, [r3, #16]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	61da      	str	r2, [r3, #28]
      break;
 800c2d8:	e064      	b.n	800c3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68b9      	ldr	r1, [r7, #8]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f000 facd 	bl	800c880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	69da      	ldr	r2, [r3, #28]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	69da      	ldr	r2, [r3, #28]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	69d9      	ldr	r1, [r3, #28]
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	021a      	lsls	r2, r3, #8
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	430a      	orrs	r2, r1
 800c318:	61da      	str	r2, [r3, #28]
      break;
 800c31a:	e043      	b.n	800c3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68b9      	ldr	r1, [r7, #8]
 800c322:	4618      	mov	r0, r3
 800c324:	f000 fb16 	bl	800c954 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f042 0208 	orr.w	r2, r2, #8
 800c336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f022 0204 	bic.w	r2, r2, #4
 800c346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	691a      	ldr	r2, [r3, #16]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	430a      	orrs	r2, r1
 800c358:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c35a:	e023      	b.n	800c3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68b9      	ldr	r1, [r7, #8]
 800c362:	4618      	mov	r0, r3
 800c364:	f000 fb5a 	bl	800ca1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c376:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c386:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	021a      	lsls	r2, r3, #8
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	430a      	orrs	r2, r1
 800c39a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c39c:	e002      	b.n	800c3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c3a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3718      	adds	r7, #24
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop

0800c3b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3d4:	bf00      	nop
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3e8:	bf00      	nop
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3fc:	bf00      	nop
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a40      	ldr	r2, [pc, #256]	; (800c51c <TIM_Base_SetConfig+0x114>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d013      	beq.n	800c448 <TIM_Base_SetConfig+0x40>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c426:	d00f      	beq.n	800c448 <TIM_Base_SetConfig+0x40>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a3d      	ldr	r2, [pc, #244]	; (800c520 <TIM_Base_SetConfig+0x118>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d00b      	beq.n	800c448 <TIM_Base_SetConfig+0x40>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a3c      	ldr	r2, [pc, #240]	; (800c524 <TIM_Base_SetConfig+0x11c>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d007      	beq.n	800c448 <TIM_Base_SetConfig+0x40>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a3b      	ldr	r2, [pc, #236]	; (800c528 <TIM_Base_SetConfig+0x120>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d003      	beq.n	800c448 <TIM_Base_SetConfig+0x40>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a3a      	ldr	r2, [pc, #232]	; (800c52c <TIM_Base_SetConfig+0x124>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d108      	bne.n	800c45a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c44e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	4313      	orrs	r3, r2
 800c458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a2f      	ldr	r2, [pc, #188]	; (800c51c <TIM_Base_SetConfig+0x114>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d01f      	beq.n	800c4a2 <TIM_Base_SetConfig+0x9a>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c468:	d01b      	beq.n	800c4a2 <TIM_Base_SetConfig+0x9a>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a2c      	ldr	r2, [pc, #176]	; (800c520 <TIM_Base_SetConfig+0x118>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d017      	beq.n	800c4a2 <TIM_Base_SetConfig+0x9a>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a2b      	ldr	r2, [pc, #172]	; (800c524 <TIM_Base_SetConfig+0x11c>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d013      	beq.n	800c4a2 <TIM_Base_SetConfig+0x9a>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a2a      	ldr	r2, [pc, #168]	; (800c528 <TIM_Base_SetConfig+0x120>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d00f      	beq.n	800c4a2 <TIM_Base_SetConfig+0x9a>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4a29      	ldr	r2, [pc, #164]	; (800c52c <TIM_Base_SetConfig+0x124>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d00b      	beq.n	800c4a2 <TIM_Base_SetConfig+0x9a>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a28      	ldr	r2, [pc, #160]	; (800c530 <TIM_Base_SetConfig+0x128>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d007      	beq.n	800c4a2 <TIM_Base_SetConfig+0x9a>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a27      	ldr	r2, [pc, #156]	; (800c534 <TIM_Base_SetConfig+0x12c>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d003      	beq.n	800c4a2 <TIM_Base_SetConfig+0x9a>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a26      	ldr	r2, [pc, #152]	; (800c538 <TIM_Base_SetConfig+0x130>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d108      	bne.n	800c4b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	695b      	ldr	r3, [r3, #20]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	689a      	ldr	r2, [r3, #8]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a10      	ldr	r2, [pc, #64]	; (800c51c <TIM_Base_SetConfig+0x114>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d00f      	beq.n	800c500 <TIM_Base_SetConfig+0xf8>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a12      	ldr	r2, [pc, #72]	; (800c52c <TIM_Base_SetConfig+0x124>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d00b      	beq.n	800c500 <TIM_Base_SetConfig+0xf8>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a11      	ldr	r2, [pc, #68]	; (800c530 <TIM_Base_SetConfig+0x128>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d007      	beq.n	800c500 <TIM_Base_SetConfig+0xf8>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a10      	ldr	r2, [pc, #64]	; (800c534 <TIM_Base_SetConfig+0x12c>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d003      	beq.n	800c500 <TIM_Base_SetConfig+0xf8>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a0f      	ldr	r2, [pc, #60]	; (800c538 <TIM_Base_SetConfig+0x130>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d103      	bne.n	800c508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	691a      	ldr	r2, [r3, #16]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	615a      	str	r2, [r3, #20]
}
 800c50e:	bf00      	nop
 800c510:	3714      	adds	r7, #20
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	40010000 	.word	0x40010000
 800c520:	40000400 	.word	0x40000400
 800c524:	40000800 	.word	0x40000800
 800c528:	40000c00 	.word	0x40000c00
 800c52c:	40010400 	.word	0x40010400
 800c530:	40014000 	.word	0x40014000
 800c534:	40014400 	.word	0x40014400
 800c538:	40014800 	.word	0x40014800

0800c53c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b087      	sub	sp, #28
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	f023 0201 	bic.w	r2, r3, #1
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	4b37      	ldr	r3, [pc, #220]	; (800c644 <TIM_OC1_SetConfig+0x108>)
 800c568:	4013      	ands	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f023 0303 	bic.w	r3, r3, #3
 800c572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f023 0302 	bic.w	r3, r3, #2
 800c584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a2d      	ldr	r2, [pc, #180]	; (800c648 <TIM_OC1_SetConfig+0x10c>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d00f      	beq.n	800c5b8 <TIM_OC1_SetConfig+0x7c>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a2c      	ldr	r2, [pc, #176]	; (800c64c <TIM_OC1_SetConfig+0x110>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d00b      	beq.n	800c5b8 <TIM_OC1_SetConfig+0x7c>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a2b      	ldr	r2, [pc, #172]	; (800c650 <TIM_OC1_SetConfig+0x114>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d007      	beq.n	800c5b8 <TIM_OC1_SetConfig+0x7c>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4a2a      	ldr	r2, [pc, #168]	; (800c654 <TIM_OC1_SetConfig+0x118>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d003      	beq.n	800c5b8 <TIM_OC1_SetConfig+0x7c>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a29      	ldr	r2, [pc, #164]	; (800c658 <TIM_OC1_SetConfig+0x11c>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d10c      	bne.n	800c5d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	f023 0308 	bic.w	r3, r3, #8
 800c5be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	697a      	ldr	r2, [r7, #20]
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	f023 0304 	bic.w	r3, r3, #4
 800c5d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4a1c      	ldr	r2, [pc, #112]	; (800c648 <TIM_OC1_SetConfig+0x10c>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d00f      	beq.n	800c5fa <TIM_OC1_SetConfig+0xbe>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a1b      	ldr	r2, [pc, #108]	; (800c64c <TIM_OC1_SetConfig+0x110>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d00b      	beq.n	800c5fa <TIM_OC1_SetConfig+0xbe>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4a1a      	ldr	r2, [pc, #104]	; (800c650 <TIM_OC1_SetConfig+0x114>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d007      	beq.n	800c5fa <TIM_OC1_SetConfig+0xbe>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a19      	ldr	r2, [pc, #100]	; (800c654 <TIM_OC1_SetConfig+0x118>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d003      	beq.n	800c5fa <TIM_OC1_SetConfig+0xbe>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4a18      	ldr	r2, [pc, #96]	; (800c658 <TIM_OC1_SetConfig+0x11c>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d111      	bne.n	800c61e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	695b      	ldr	r3, [r3, #20]
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	4313      	orrs	r3, r2
 800c612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	699b      	ldr	r3, [r3, #24]
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	697a      	ldr	r2, [r7, #20]
 800c636:	621a      	str	r2, [r3, #32]
}
 800c638:	bf00      	nop
 800c63a:	371c      	adds	r7, #28
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr
 800c644:	fffeff8f 	.word	0xfffeff8f
 800c648:	40010000 	.word	0x40010000
 800c64c:	40010400 	.word	0x40010400
 800c650:	40014000 	.word	0x40014000
 800c654:	40014400 	.word	0x40014400
 800c658:	40014800 	.word	0x40014800

0800c65c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b087      	sub	sp, #28
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	f023 0210 	bic.w	r2, r3, #16
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a1b      	ldr	r3, [r3, #32]
 800c676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	4b34      	ldr	r3, [pc, #208]	; (800c758 <TIM_OC2_SetConfig+0xfc>)
 800c688:	4013      	ands	r3, r2
 800c68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	021b      	lsls	r3, r3, #8
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f023 0320 	bic.w	r3, r3, #32
 800c6a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	011b      	lsls	r3, r3, #4
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a29      	ldr	r2, [pc, #164]	; (800c75c <TIM_OC2_SetConfig+0x100>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d003      	beq.n	800c6c4 <TIM_OC2_SetConfig+0x68>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a28      	ldr	r2, [pc, #160]	; (800c760 <TIM_OC2_SetConfig+0x104>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d10d      	bne.n	800c6e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	011b      	lsls	r3, r3, #4
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a1e      	ldr	r2, [pc, #120]	; (800c75c <TIM_OC2_SetConfig+0x100>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d00f      	beq.n	800c708 <TIM_OC2_SetConfig+0xac>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a1d      	ldr	r2, [pc, #116]	; (800c760 <TIM_OC2_SetConfig+0x104>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d00b      	beq.n	800c708 <TIM_OC2_SetConfig+0xac>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4a1c      	ldr	r2, [pc, #112]	; (800c764 <TIM_OC2_SetConfig+0x108>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d007      	beq.n	800c708 <TIM_OC2_SetConfig+0xac>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a1b      	ldr	r2, [pc, #108]	; (800c768 <TIM_OC2_SetConfig+0x10c>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d003      	beq.n	800c708 <TIM_OC2_SetConfig+0xac>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a1a      	ldr	r2, [pc, #104]	; (800c76c <TIM_OC2_SetConfig+0x110>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d113      	bne.n	800c730 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c70e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	695b      	ldr	r3, [r3, #20]
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	4313      	orrs	r3, r2
 800c722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	693a      	ldr	r2, [r7, #16]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	693a      	ldr	r2, [r7, #16]
 800c734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	621a      	str	r2, [r3, #32]
}
 800c74a:	bf00      	nop
 800c74c:	371c      	adds	r7, #28
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	feff8fff 	.word	0xfeff8fff
 800c75c:	40010000 	.word	0x40010000
 800c760:	40010400 	.word	0x40010400
 800c764:	40014000 	.word	0x40014000
 800c768:	40014400 	.word	0x40014400
 800c76c:	40014800 	.word	0x40014800

0800c770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c770:	b480      	push	{r7}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a1b      	ldr	r3, [r3, #32]
 800c78a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	69db      	ldr	r3, [r3, #28]
 800c796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	4b33      	ldr	r3, [pc, #204]	; (800c868 <TIM_OC3_SetConfig+0xf8>)
 800c79c:	4013      	ands	r3, r2
 800c79e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f023 0303 	bic.w	r3, r3, #3
 800c7a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	021b      	lsls	r3, r3, #8
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a28      	ldr	r2, [pc, #160]	; (800c86c <TIM_OC3_SetConfig+0xfc>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d003      	beq.n	800c7d6 <TIM_OC3_SetConfig+0x66>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a27      	ldr	r2, [pc, #156]	; (800c870 <TIM_OC3_SetConfig+0x100>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d10d      	bne.n	800c7f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	021b      	lsls	r3, r3, #8
 800c7e4:	697a      	ldr	r2, [r7, #20]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4a1d      	ldr	r2, [pc, #116]	; (800c86c <TIM_OC3_SetConfig+0xfc>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d00f      	beq.n	800c81a <TIM_OC3_SetConfig+0xaa>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4a1c      	ldr	r2, [pc, #112]	; (800c870 <TIM_OC3_SetConfig+0x100>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d00b      	beq.n	800c81a <TIM_OC3_SetConfig+0xaa>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a1b      	ldr	r2, [pc, #108]	; (800c874 <TIM_OC3_SetConfig+0x104>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d007      	beq.n	800c81a <TIM_OC3_SetConfig+0xaa>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4a1a      	ldr	r2, [pc, #104]	; (800c878 <TIM_OC3_SetConfig+0x108>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d003      	beq.n	800c81a <TIM_OC3_SetConfig+0xaa>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a19      	ldr	r2, [pc, #100]	; (800c87c <TIM_OC3_SetConfig+0x10c>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d113      	bne.n	800c842 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	695b      	ldr	r3, [r3, #20]
 800c82e:	011b      	lsls	r3, r3, #4
 800c830:	693a      	ldr	r2, [r7, #16]
 800c832:	4313      	orrs	r3, r2
 800c834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	699b      	ldr	r3, [r3, #24]
 800c83a:	011b      	lsls	r3, r3, #4
 800c83c:	693a      	ldr	r2, [r7, #16]
 800c83e:	4313      	orrs	r3, r2
 800c840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	693a      	ldr	r2, [r7, #16]
 800c846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	697a      	ldr	r2, [r7, #20]
 800c85a:	621a      	str	r2, [r3, #32]
}
 800c85c:	bf00      	nop
 800c85e:	371c      	adds	r7, #28
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr
 800c868:	fffeff8f 	.word	0xfffeff8f
 800c86c:	40010000 	.word	0x40010000
 800c870:	40010400 	.word	0x40010400
 800c874:	40014000 	.word	0x40014000
 800c878:	40014400 	.word	0x40014400
 800c87c:	40014800 	.word	0x40014800

0800c880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c880:	b480      	push	{r7}
 800c882:	b087      	sub	sp, #28
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a1b      	ldr	r3, [r3, #32]
 800c88e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a1b      	ldr	r3, [r3, #32]
 800c89a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	4b24      	ldr	r3, [pc, #144]	; (800c93c <TIM_OC4_SetConfig+0xbc>)
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	021b      	lsls	r3, r3, #8
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	031b      	lsls	r3, r3, #12
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a19      	ldr	r2, [pc, #100]	; (800c940 <TIM_OC4_SetConfig+0xc0>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d00f      	beq.n	800c900 <TIM_OC4_SetConfig+0x80>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a18      	ldr	r2, [pc, #96]	; (800c944 <TIM_OC4_SetConfig+0xc4>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d00b      	beq.n	800c900 <TIM_OC4_SetConfig+0x80>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a17      	ldr	r2, [pc, #92]	; (800c948 <TIM_OC4_SetConfig+0xc8>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d007      	beq.n	800c900 <TIM_OC4_SetConfig+0x80>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a16      	ldr	r2, [pc, #88]	; (800c94c <TIM_OC4_SetConfig+0xcc>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d003      	beq.n	800c900 <TIM_OC4_SetConfig+0x80>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a15      	ldr	r2, [pc, #84]	; (800c950 <TIM_OC4_SetConfig+0xd0>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d109      	bne.n	800c914 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	695b      	ldr	r3, [r3, #20]
 800c90c:	019b      	lsls	r3, r3, #6
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	4313      	orrs	r3, r2
 800c912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	621a      	str	r2, [r3, #32]
}
 800c92e:	bf00      	nop
 800c930:	371c      	adds	r7, #28
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	feff8fff 	.word	0xfeff8fff
 800c940:	40010000 	.word	0x40010000
 800c944:	40010400 	.word	0x40010400
 800c948:	40014000 	.word	0x40014000
 800c94c:	40014400 	.word	0x40014400
 800c950:	40014800 	.word	0x40014800

0800c954 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a1b      	ldr	r3, [r3, #32]
 800c96e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	4b21      	ldr	r3, [pc, #132]	; (800ca04 <TIM_OC5_SetConfig+0xb0>)
 800c980:	4013      	ands	r3, r2
 800c982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c994:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	041b      	lsls	r3, r3, #16
 800c99c:	693a      	ldr	r2, [r7, #16]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a18      	ldr	r2, [pc, #96]	; (800ca08 <TIM_OC5_SetConfig+0xb4>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d00f      	beq.n	800c9ca <TIM_OC5_SetConfig+0x76>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a17      	ldr	r2, [pc, #92]	; (800ca0c <TIM_OC5_SetConfig+0xb8>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d00b      	beq.n	800c9ca <TIM_OC5_SetConfig+0x76>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a16      	ldr	r2, [pc, #88]	; (800ca10 <TIM_OC5_SetConfig+0xbc>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d007      	beq.n	800c9ca <TIM_OC5_SetConfig+0x76>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4a15      	ldr	r2, [pc, #84]	; (800ca14 <TIM_OC5_SetConfig+0xc0>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d003      	beq.n	800c9ca <TIM_OC5_SetConfig+0x76>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a14      	ldr	r2, [pc, #80]	; (800ca18 <TIM_OC5_SetConfig+0xc4>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d109      	bne.n	800c9de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	695b      	ldr	r3, [r3, #20]
 800c9d6:	021b      	lsls	r3, r3, #8
 800c9d8:	697a      	ldr	r2, [r7, #20]
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	697a      	ldr	r2, [r7, #20]
 800c9e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	693a      	ldr	r2, [r7, #16]
 800c9f6:	621a      	str	r2, [r3, #32]
}
 800c9f8:	bf00      	nop
 800c9fa:	371c      	adds	r7, #28
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr
 800ca04:	fffeff8f 	.word	0xfffeff8f
 800ca08:	40010000 	.word	0x40010000
 800ca0c:	40010400 	.word	0x40010400
 800ca10:	40014000 	.word	0x40014000
 800ca14:	40014400 	.word	0x40014400
 800ca18:	40014800 	.word	0x40014800

0800ca1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b087      	sub	sp, #28
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a1b      	ldr	r3, [r3, #32]
 800ca2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	4b22      	ldr	r3, [pc, #136]	; (800cad0 <TIM_OC6_SetConfig+0xb4>)
 800ca48:	4013      	ands	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	021b      	lsls	r3, r3, #8
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	4313      	orrs	r3, r2
 800ca56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	051b      	lsls	r3, r3, #20
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a19      	ldr	r2, [pc, #100]	; (800cad4 <TIM_OC6_SetConfig+0xb8>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d00f      	beq.n	800ca94 <TIM_OC6_SetConfig+0x78>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a18      	ldr	r2, [pc, #96]	; (800cad8 <TIM_OC6_SetConfig+0xbc>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d00b      	beq.n	800ca94 <TIM_OC6_SetConfig+0x78>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4a17      	ldr	r2, [pc, #92]	; (800cadc <TIM_OC6_SetConfig+0xc0>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d007      	beq.n	800ca94 <TIM_OC6_SetConfig+0x78>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4a16      	ldr	r2, [pc, #88]	; (800cae0 <TIM_OC6_SetConfig+0xc4>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d003      	beq.n	800ca94 <TIM_OC6_SetConfig+0x78>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a15      	ldr	r2, [pc, #84]	; (800cae4 <TIM_OC6_SetConfig+0xc8>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d109      	bne.n	800caa8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	029b      	lsls	r3, r3, #10
 800caa2:	697a      	ldr	r2, [r7, #20]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	685a      	ldr	r2, [r3, #4]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	621a      	str	r2, [r3, #32]
}
 800cac2:	bf00      	nop
 800cac4:	371c      	adds	r7, #28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	feff8fff 	.word	0xfeff8fff
 800cad4:	40010000 	.word	0x40010000
 800cad8:	40010400 	.word	0x40010400
 800cadc:	40014000 	.word	0x40014000
 800cae0:	40014400 	.word	0x40014400
 800cae4:	40014800 	.word	0x40014800

0800cae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cae8:	b480      	push	{r7}
 800caea:	b087      	sub	sp, #28
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	f003 031f 	and.w	r3, r3, #31
 800cafa:	2201      	movs	r2, #1
 800cafc:	fa02 f303 	lsl.w	r3, r2, r3
 800cb00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6a1a      	ldr	r2, [r3, #32]
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	43db      	mvns	r3, r3
 800cb0a:	401a      	ands	r2, r3
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6a1a      	ldr	r2, [r3, #32]
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	f003 031f 	and.w	r3, r3, #31
 800cb1a:	6879      	ldr	r1, [r7, #4]
 800cb1c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb20:	431a      	orrs	r2, r3
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	621a      	str	r2, [r3, #32]
}
 800cb26:	bf00      	nop
 800cb28:	371c      	adds	r7, #28
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
	...

0800cb34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d101      	bne.n	800cb4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb48:	2302      	movs	r3, #2
 800cb4a:	e06d      	b.n	800cc28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2202      	movs	r2, #2
 800cb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a30      	ldr	r2, [pc, #192]	; (800cc34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d004      	beq.n	800cb80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a2f      	ldr	r2, [pc, #188]	; (800cc38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d108      	bne.n	800cb92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cb86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	4313      	orrs	r3, r2
 800cba2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a20      	ldr	r2, [pc, #128]	; (800cc34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d022      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbbe:	d01d      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a1d      	ldr	r2, [pc, #116]	; (800cc3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d018      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a1c      	ldr	r2, [pc, #112]	; (800cc40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d013      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a1a      	ldr	r2, [pc, #104]	; (800cc44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d00e      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a15      	ldr	r2, [pc, #84]	; (800cc38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d009      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a16      	ldr	r2, [pc, #88]	; (800cc48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d004      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a15      	ldr	r2, [pc, #84]	; (800cc4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d10c      	bne.n	800cc16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3714      	adds	r7, #20
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr
 800cc34:	40010000 	.word	0x40010000
 800cc38:	40010400 	.word	0x40010400
 800cc3c:	40000400 	.word	0x40000400
 800cc40:	40000800 	.word	0x40000800
 800cc44:	40000c00 	.word	0x40000c00
 800cc48:	40001800 	.word	0x40001800
 800cc4c:	40014000 	.word	0x40014000

0800cc50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc58:	bf00      	nop
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e042      	b.n	800cd24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d106      	bne.n	800ccb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7f7 f9db 	bl	800406c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2224      	movs	r2, #36	; 0x24
 800ccba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f022 0201 	bic.w	r2, r2, #1
 800cccc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f82c 	bl	800cd2c <UART_SetConfig>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d101      	bne.n	800ccde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e022      	b.n	800cd24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fd88 	bl	800d7fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	685a      	ldr	r2, [r3, #4]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ccfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	689a      	ldr	r2, [r3, #8]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f042 0201 	orr.w	r2, r2, #1
 800cd1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 fe0f 	bl	800d940 <UART_CheckIdleState>
 800cd22:	4603      	mov	r3, r0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd30:	b092      	sub	sp, #72	; 0x48
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd36:	2300      	movs	r3, #0
 800cd38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	689a      	ldr	r2, [r3, #8]
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	691b      	ldr	r3, [r3, #16]
 800cd44:	431a      	orrs	r2, r3
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	695b      	ldr	r3, [r3, #20]
 800cd4a:	431a      	orrs	r2, r3
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	69db      	ldr	r3, [r3, #28]
 800cd50:	4313      	orrs	r3, r2
 800cd52:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	4bbe      	ldr	r3, [pc, #760]	; (800d054 <UART_SetConfig+0x328>)
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	6812      	ldr	r2, [r2, #0]
 800cd62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd64:	430b      	orrs	r3, r1
 800cd66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	68da      	ldr	r2, [r3, #12]
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	430a      	orrs	r2, r1
 800cd7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	699b      	ldr	r3, [r3, #24]
 800cd82:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4ab3      	ldr	r2, [pc, #716]	; (800d058 <UART_SetConfig+0x32c>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d004      	beq.n	800cd98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	6a1b      	ldr	r3, [r3, #32]
 800cd92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd94:	4313      	orrs	r3, r2
 800cd96:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	689a      	ldr	r2, [r3, #8]
 800cd9e:	4baf      	ldr	r3, [pc, #700]	; (800d05c <UART_SetConfig+0x330>)
 800cda0:	4013      	ands	r3, r2
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	6812      	ldr	r2, [r2, #0]
 800cda6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cda8:	430b      	orrs	r3, r1
 800cdaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb2:	f023 010f 	bic.w	r1, r3, #15
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	430a      	orrs	r2, r1
 800cdc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4aa6      	ldr	r2, [pc, #664]	; (800d060 <UART_SetConfig+0x334>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d177      	bne.n	800cebc <UART_SetConfig+0x190>
 800cdcc:	4ba5      	ldr	r3, [pc, #660]	; (800d064 <UART_SetConfig+0x338>)
 800cdce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cdd4:	2b28      	cmp	r3, #40	; 0x28
 800cdd6:	d86d      	bhi.n	800ceb4 <UART_SetConfig+0x188>
 800cdd8:	a201      	add	r2, pc, #4	; (adr r2, 800cde0 <UART_SetConfig+0xb4>)
 800cdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdde:	bf00      	nop
 800cde0:	0800ce85 	.word	0x0800ce85
 800cde4:	0800ceb5 	.word	0x0800ceb5
 800cde8:	0800ceb5 	.word	0x0800ceb5
 800cdec:	0800ceb5 	.word	0x0800ceb5
 800cdf0:	0800ceb5 	.word	0x0800ceb5
 800cdf4:	0800ceb5 	.word	0x0800ceb5
 800cdf8:	0800ceb5 	.word	0x0800ceb5
 800cdfc:	0800ceb5 	.word	0x0800ceb5
 800ce00:	0800ce8d 	.word	0x0800ce8d
 800ce04:	0800ceb5 	.word	0x0800ceb5
 800ce08:	0800ceb5 	.word	0x0800ceb5
 800ce0c:	0800ceb5 	.word	0x0800ceb5
 800ce10:	0800ceb5 	.word	0x0800ceb5
 800ce14:	0800ceb5 	.word	0x0800ceb5
 800ce18:	0800ceb5 	.word	0x0800ceb5
 800ce1c:	0800ceb5 	.word	0x0800ceb5
 800ce20:	0800ce95 	.word	0x0800ce95
 800ce24:	0800ceb5 	.word	0x0800ceb5
 800ce28:	0800ceb5 	.word	0x0800ceb5
 800ce2c:	0800ceb5 	.word	0x0800ceb5
 800ce30:	0800ceb5 	.word	0x0800ceb5
 800ce34:	0800ceb5 	.word	0x0800ceb5
 800ce38:	0800ceb5 	.word	0x0800ceb5
 800ce3c:	0800ceb5 	.word	0x0800ceb5
 800ce40:	0800ce9d 	.word	0x0800ce9d
 800ce44:	0800ceb5 	.word	0x0800ceb5
 800ce48:	0800ceb5 	.word	0x0800ceb5
 800ce4c:	0800ceb5 	.word	0x0800ceb5
 800ce50:	0800ceb5 	.word	0x0800ceb5
 800ce54:	0800ceb5 	.word	0x0800ceb5
 800ce58:	0800ceb5 	.word	0x0800ceb5
 800ce5c:	0800ceb5 	.word	0x0800ceb5
 800ce60:	0800cea5 	.word	0x0800cea5
 800ce64:	0800ceb5 	.word	0x0800ceb5
 800ce68:	0800ceb5 	.word	0x0800ceb5
 800ce6c:	0800ceb5 	.word	0x0800ceb5
 800ce70:	0800ceb5 	.word	0x0800ceb5
 800ce74:	0800ceb5 	.word	0x0800ceb5
 800ce78:	0800ceb5 	.word	0x0800ceb5
 800ce7c:	0800ceb5 	.word	0x0800ceb5
 800ce80:	0800cead 	.word	0x0800cead
 800ce84:	2301      	movs	r3, #1
 800ce86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce8a:	e222      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800ce8c:	2304      	movs	r3, #4
 800ce8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce92:	e21e      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800ce94:	2308      	movs	r3, #8
 800ce96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce9a:	e21a      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800ce9c:	2310      	movs	r3, #16
 800ce9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cea2:	e216      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cea4:	2320      	movs	r3, #32
 800cea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceaa:	e212      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800ceac:	2340      	movs	r3, #64	; 0x40
 800ceae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceb2:	e20e      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800ceb4:	2380      	movs	r3, #128	; 0x80
 800ceb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceba:	e20a      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a69      	ldr	r2, [pc, #420]	; (800d068 <UART_SetConfig+0x33c>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d130      	bne.n	800cf28 <UART_SetConfig+0x1fc>
 800cec6:	4b67      	ldr	r3, [pc, #412]	; (800d064 <UART_SetConfig+0x338>)
 800cec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceca:	f003 0307 	and.w	r3, r3, #7
 800cece:	2b05      	cmp	r3, #5
 800ced0:	d826      	bhi.n	800cf20 <UART_SetConfig+0x1f4>
 800ced2:	a201      	add	r2, pc, #4	; (adr r2, 800ced8 <UART_SetConfig+0x1ac>)
 800ced4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced8:	0800cef1 	.word	0x0800cef1
 800cedc:	0800cef9 	.word	0x0800cef9
 800cee0:	0800cf01 	.word	0x0800cf01
 800cee4:	0800cf09 	.word	0x0800cf09
 800cee8:	0800cf11 	.word	0x0800cf11
 800ceec:	0800cf19 	.word	0x0800cf19
 800cef0:	2300      	movs	r3, #0
 800cef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cef6:	e1ec      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cef8:	2304      	movs	r3, #4
 800cefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cefe:	e1e8      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf00:	2308      	movs	r3, #8
 800cf02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf06:	e1e4      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf08:	2310      	movs	r3, #16
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf0e:	e1e0      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf10:	2320      	movs	r3, #32
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf16:	e1dc      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf18:	2340      	movs	r3, #64	; 0x40
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf1e:	e1d8      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf20:	2380      	movs	r3, #128	; 0x80
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf26:	e1d4      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a4f      	ldr	r2, [pc, #316]	; (800d06c <UART_SetConfig+0x340>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d130      	bne.n	800cf94 <UART_SetConfig+0x268>
 800cf32:	4b4c      	ldr	r3, [pc, #304]	; (800d064 <UART_SetConfig+0x338>)
 800cf34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf36:	f003 0307 	and.w	r3, r3, #7
 800cf3a:	2b05      	cmp	r3, #5
 800cf3c:	d826      	bhi.n	800cf8c <UART_SetConfig+0x260>
 800cf3e:	a201      	add	r2, pc, #4	; (adr r2, 800cf44 <UART_SetConfig+0x218>)
 800cf40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf44:	0800cf5d 	.word	0x0800cf5d
 800cf48:	0800cf65 	.word	0x0800cf65
 800cf4c:	0800cf6d 	.word	0x0800cf6d
 800cf50:	0800cf75 	.word	0x0800cf75
 800cf54:	0800cf7d 	.word	0x0800cf7d
 800cf58:	0800cf85 	.word	0x0800cf85
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf62:	e1b6      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf64:	2304      	movs	r3, #4
 800cf66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf6a:	e1b2      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf6c:	2308      	movs	r3, #8
 800cf6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf72:	e1ae      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf74:	2310      	movs	r3, #16
 800cf76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf7a:	e1aa      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf7c:	2320      	movs	r3, #32
 800cf7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf82:	e1a6      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf84:	2340      	movs	r3, #64	; 0x40
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf8a:	e1a2      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf8c:	2380      	movs	r3, #128	; 0x80
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf92:	e19e      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a35      	ldr	r2, [pc, #212]	; (800d070 <UART_SetConfig+0x344>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d130      	bne.n	800d000 <UART_SetConfig+0x2d4>
 800cf9e:	4b31      	ldr	r3, [pc, #196]	; (800d064 <UART_SetConfig+0x338>)
 800cfa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfa2:	f003 0307 	and.w	r3, r3, #7
 800cfa6:	2b05      	cmp	r3, #5
 800cfa8:	d826      	bhi.n	800cff8 <UART_SetConfig+0x2cc>
 800cfaa:	a201      	add	r2, pc, #4	; (adr r2, 800cfb0 <UART_SetConfig+0x284>)
 800cfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb0:	0800cfc9 	.word	0x0800cfc9
 800cfb4:	0800cfd1 	.word	0x0800cfd1
 800cfb8:	0800cfd9 	.word	0x0800cfd9
 800cfbc:	0800cfe1 	.word	0x0800cfe1
 800cfc0:	0800cfe9 	.word	0x0800cfe9
 800cfc4:	0800cff1 	.word	0x0800cff1
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfce:	e180      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cfd0:	2304      	movs	r3, #4
 800cfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfd6:	e17c      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cfd8:	2308      	movs	r3, #8
 800cfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfde:	e178      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cfe0:	2310      	movs	r3, #16
 800cfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfe6:	e174      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cfe8:	2320      	movs	r3, #32
 800cfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfee:	e170      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cff0:	2340      	movs	r3, #64	; 0x40
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cff6:	e16c      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800cff8:	2380      	movs	r3, #128	; 0x80
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cffe:	e168      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a1b      	ldr	r2, [pc, #108]	; (800d074 <UART_SetConfig+0x348>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d142      	bne.n	800d090 <UART_SetConfig+0x364>
 800d00a:	4b16      	ldr	r3, [pc, #88]	; (800d064 <UART_SetConfig+0x338>)
 800d00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d00e:	f003 0307 	and.w	r3, r3, #7
 800d012:	2b05      	cmp	r3, #5
 800d014:	d838      	bhi.n	800d088 <UART_SetConfig+0x35c>
 800d016:	a201      	add	r2, pc, #4	; (adr r2, 800d01c <UART_SetConfig+0x2f0>)
 800d018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d01c:	0800d035 	.word	0x0800d035
 800d020:	0800d03d 	.word	0x0800d03d
 800d024:	0800d045 	.word	0x0800d045
 800d028:	0800d04d 	.word	0x0800d04d
 800d02c:	0800d079 	.word	0x0800d079
 800d030:	0800d081 	.word	0x0800d081
 800d034:	2300      	movs	r3, #0
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03a:	e14a      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d03c:	2304      	movs	r3, #4
 800d03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d042:	e146      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d044:	2308      	movs	r3, #8
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04a:	e142      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d04c:	2310      	movs	r3, #16
 800d04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d052:	e13e      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d054:	cfff69f3 	.word	0xcfff69f3
 800d058:	58000c00 	.word	0x58000c00
 800d05c:	11fff4ff 	.word	0x11fff4ff
 800d060:	40011000 	.word	0x40011000
 800d064:	58024400 	.word	0x58024400
 800d068:	40004400 	.word	0x40004400
 800d06c:	40004800 	.word	0x40004800
 800d070:	40004c00 	.word	0x40004c00
 800d074:	40005000 	.word	0x40005000
 800d078:	2320      	movs	r3, #32
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d07e:	e128      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d080:	2340      	movs	r3, #64	; 0x40
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d086:	e124      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d088:	2380      	movs	r3, #128	; 0x80
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d08e:	e120      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4acb      	ldr	r2, [pc, #812]	; (800d3c4 <UART_SetConfig+0x698>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d176      	bne.n	800d188 <UART_SetConfig+0x45c>
 800d09a:	4bcb      	ldr	r3, [pc, #812]	; (800d3c8 <UART_SetConfig+0x69c>)
 800d09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d09e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d0a2:	2b28      	cmp	r3, #40	; 0x28
 800d0a4:	d86c      	bhi.n	800d180 <UART_SetConfig+0x454>
 800d0a6:	a201      	add	r2, pc, #4	; (adr r2, 800d0ac <UART_SetConfig+0x380>)
 800d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ac:	0800d151 	.word	0x0800d151
 800d0b0:	0800d181 	.word	0x0800d181
 800d0b4:	0800d181 	.word	0x0800d181
 800d0b8:	0800d181 	.word	0x0800d181
 800d0bc:	0800d181 	.word	0x0800d181
 800d0c0:	0800d181 	.word	0x0800d181
 800d0c4:	0800d181 	.word	0x0800d181
 800d0c8:	0800d181 	.word	0x0800d181
 800d0cc:	0800d159 	.word	0x0800d159
 800d0d0:	0800d181 	.word	0x0800d181
 800d0d4:	0800d181 	.word	0x0800d181
 800d0d8:	0800d181 	.word	0x0800d181
 800d0dc:	0800d181 	.word	0x0800d181
 800d0e0:	0800d181 	.word	0x0800d181
 800d0e4:	0800d181 	.word	0x0800d181
 800d0e8:	0800d181 	.word	0x0800d181
 800d0ec:	0800d161 	.word	0x0800d161
 800d0f0:	0800d181 	.word	0x0800d181
 800d0f4:	0800d181 	.word	0x0800d181
 800d0f8:	0800d181 	.word	0x0800d181
 800d0fc:	0800d181 	.word	0x0800d181
 800d100:	0800d181 	.word	0x0800d181
 800d104:	0800d181 	.word	0x0800d181
 800d108:	0800d181 	.word	0x0800d181
 800d10c:	0800d169 	.word	0x0800d169
 800d110:	0800d181 	.word	0x0800d181
 800d114:	0800d181 	.word	0x0800d181
 800d118:	0800d181 	.word	0x0800d181
 800d11c:	0800d181 	.word	0x0800d181
 800d120:	0800d181 	.word	0x0800d181
 800d124:	0800d181 	.word	0x0800d181
 800d128:	0800d181 	.word	0x0800d181
 800d12c:	0800d171 	.word	0x0800d171
 800d130:	0800d181 	.word	0x0800d181
 800d134:	0800d181 	.word	0x0800d181
 800d138:	0800d181 	.word	0x0800d181
 800d13c:	0800d181 	.word	0x0800d181
 800d140:	0800d181 	.word	0x0800d181
 800d144:	0800d181 	.word	0x0800d181
 800d148:	0800d181 	.word	0x0800d181
 800d14c:	0800d179 	.word	0x0800d179
 800d150:	2301      	movs	r3, #1
 800d152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d156:	e0bc      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d158:	2304      	movs	r3, #4
 800d15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d15e:	e0b8      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d160:	2308      	movs	r3, #8
 800d162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d166:	e0b4      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d168:	2310      	movs	r3, #16
 800d16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d16e:	e0b0      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d170:	2320      	movs	r3, #32
 800d172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d176:	e0ac      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d178:	2340      	movs	r3, #64	; 0x40
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d17e:	e0a8      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d180:	2380      	movs	r3, #128	; 0x80
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d186:	e0a4      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a8f      	ldr	r2, [pc, #572]	; (800d3cc <UART_SetConfig+0x6a0>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d130      	bne.n	800d1f4 <UART_SetConfig+0x4c8>
 800d192:	4b8d      	ldr	r3, [pc, #564]	; (800d3c8 <UART_SetConfig+0x69c>)
 800d194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d196:	f003 0307 	and.w	r3, r3, #7
 800d19a:	2b05      	cmp	r3, #5
 800d19c:	d826      	bhi.n	800d1ec <UART_SetConfig+0x4c0>
 800d19e:	a201      	add	r2, pc, #4	; (adr r2, 800d1a4 <UART_SetConfig+0x478>)
 800d1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a4:	0800d1bd 	.word	0x0800d1bd
 800d1a8:	0800d1c5 	.word	0x0800d1c5
 800d1ac:	0800d1cd 	.word	0x0800d1cd
 800d1b0:	0800d1d5 	.word	0x0800d1d5
 800d1b4:	0800d1dd 	.word	0x0800d1dd
 800d1b8:	0800d1e5 	.word	0x0800d1e5
 800d1bc:	2300      	movs	r3, #0
 800d1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1c2:	e086      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d1c4:	2304      	movs	r3, #4
 800d1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ca:	e082      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d1cc:	2308      	movs	r3, #8
 800d1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1d2:	e07e      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d1d4:	2310      	movs	r3, #16
 800d1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1da:	e07a      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d1dc:	2320      	movs	r3, #32
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e2:	e076      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d1e4:	2340      	movs	r3, #64	; 0x40
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ea:	e072      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d1ec:	2380      	movs	r3, #128	; 0x80
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f2:	e06e      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a75      	ldr	r2, [pc, #468]	; (800d3d0 <UART_SetConfig+0x6a4>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d130      	bne.n	800d260 <UART_SetConfig+0x534>
 800d1fe:	4b72      	ldr	r3, [pc, #456]	; (800d3c8 <UART_SetConfig+0x69c>)
 800d200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d202:	f003 0307 	and.w	r3, r3, #7
 800d206:	2b05      	cmp	r3, #5
 800d208:	d826      	bhi.n	800d258 <UART_SetConfig+0x52c>
 800d20a:	a201      	add	r2, pc, #4	; (adr r2, 800d210 <UART_SetConfig+0x4e4>)
 800d20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d210:	0800d229 	.word	0x0800d229
 800d214:	0800d231 	.word	0x0800d231
 800d218:	0800d239 	.word	0x0800d239
 800d21c:	0800d241 	.word	0x0800d241
 800d220:	0800d249 	.word	0x0800d249
 800d224:	0800d251 	.word	0x0800d251
 800d228:	2300      	movs	r3, #0
 800d22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d22e:	e050      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d230:	2304      	movs	r3, #4
 800d232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d236:	e04c      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d238:	2308      	movs	r3, #8
 800d23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23e:	e048      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d240:	2310      	movs	r3, #16
 800d242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d246:	e044      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d248:	2320      	movs	r3, #32
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24e:	e040      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d250:	2340      	movs	r3, #64	; 0x40
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d256:	e03c      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d258:	2380      	movs	r3, #128	; 0x80
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25e:	e038      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4a5b      	ldr	r2, [pc, #364]	; (800d3d4 <UART_SetConfig+0x6a8>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d130      	bne.n	800d2cc <UART_SetConfig+0x5a0>
 800d26a:	4b57      	ldr	r3, [pc, #348]	; (800d3c8 <UART_SetConfig+0x69c>)
 800d26c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d26e:	f003 0307 	and.w	r3, r3, #7
 800d272:	2b05      	cmp	r3, #5
 800d274:	d826      	bhi.n	800d2c4 <UART_SetConfig+0x598>
 800d276:	a201      	add	r2, pc, #4	; (adr r2, 800d27c <UART_SetConfig+0x550>)
 800d278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d27c:	0800d295 	.word	0x0800d295
 800d280:	0800d29d 	.word	0x0800d29d
 800d284:	0800d2a5 	.word	0x0800d2a5
 800d288:	0800d2ad 	.word	0x0800d2ad
 800d28c:	0800d2b5 	.word	0x0800d2b5
 800d290:	0800d2bd 	.word	0x0800d2bd
 800d294:	2302      	movs	r3, #2
 800d296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d29a:	e01a      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d29c:	2304      	movs	r3, #4
 800d29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2a2:	e016      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d2a4:	2308      	movs	r3, #8
 800d2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2aa:	e012      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d2ac:	2310      	movs	r3, #16
 800d2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b2:	e00e      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d2b4:	2320      	movs	r3, #32
 800d2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ba:	e00a      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d2bc:	2340      	movs	r3, #64	; 0x40
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c2:	e006      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d2c4:	2380      	movs	r3, #128	; 0x80
 800d2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ca:	e002      	b.n	800d2d2 <UART_SetConfig+0x5a6>
 800d2cc:	2380      	movs	r3, #128	; 0x80
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a3f      	ldr	r2, [pc, #252]	; (800d3d4 <UART_SetConfig+0x6a8>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	f040 80f8 	bne.w	800d4ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d2de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d2e2:	2b20      	cmp	r3, #32
 800d2e4:	dc46      	bgt.n	800d374 <UART_SetConfig+0x648>
 800d2e6:	2b02      	cmp	r3, #2
 800d2e8:	f2c0 8082 	blt.w	800d3f0 <UART_SetConfig+0x6c4>
 800d2ec:	3b02      	subs	r3, #2
 800d2ee:	2b1e      	cmp	r3, #30
 800d2f0:	d87e      	bhi.n	800d3f0 <UART_SetConfig+0x6c4>
 800d2f2:	a201      	add	r2, pc, #4	; (adr r2, 800d2f8 <UART_SetConfig+0x5cc>)
 800d2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f8:	0800d37b 	.word	0x0800d37b
 800d2fc:	0800d3f1 	.word	0x0800d3f1
 800d300:	0800d383 	.word	0x0800d383
 800d304:	0800d3f1 	.word	0x0800d3f1
 800d308:	0800d3f1 	.word	0x0800d3f1
 800d30c:	0800d3f1 	.word	0x0800d3f1
 800d310:	0800d393 	.word	0x0800d393
 800d314:	0800d3f1 	.word	0x0800d3f1
 800d318:	0800d3f1 	.word	0x0800d3f1
 800d31c:	0800d3f1 	.word	0x0800d3f1
 800d320:	0800d3f1 	.word	0x0800d3f1
 800d324:	0800d3f1 	.word	0x0800d3f1
 800d328:	0800d3f1 	.word	0x0800d3f1
 800d32c:	0800d3f1 	.word	0x0800d3f1
 800d330:	0800d3a3 	.word	0x0800d3a3
 800d334:	0800d3f1 	.word	0x0800d3f1
 800d338:	0800d3f1 	.word	0x0800d3f1
 800d33c:	0800d3f1 	.word	0x0800d3f1
 800d340:	0800d3f1 	.word	0x0800d3f1
 800d344:	0800d3f1 	.word	0x0800d3f1
 800d348:	0800d3f1 	.word	0x0800d3f1
 800d34c:	0800d3f1 	.word	0x0800d3f1
 800d350:	0800d3f1 	.word	0x0800d3f1
 800d354:	0800d3f1 	.word	0x0800d3f1
 800d358:	0800d3f1 	.word	0x0800d3f1
 800d35c:	0800d3f1 	.word	0x0800d3f1
 800d360:	0800d3f1 	.word	0x0800d3f1
 800d364:	0800d3f1 	.word	0x0800d3f1
 800d368:	0800d3f1 	.word	0x0800d3f1
 800d36c:	0800d3f1 	.word	0x0800d3f1
 800d370:	0800d3e3 	.word	0x0800d3e3
 800d374:	2b40      	cmp	r3, #64	; 0x40
 800d376:	d037      	beq.n	800d3e8 <UART_SetConfig+0x6bc>
 800d378:	e03a      	b.n	800d3f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d37a:	f7fc ff79 	bl	800a270 <HAL_RCCEx_GetD3PCLK1Freq>
 800d37e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d380:	e03c      	b.n	800d3fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d386:	4618      	mov	r0, r3
 800d388:	f7fc ff88 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d390:	e034      	b.n	800d3fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d392:	f107 0318 	add.w	r3, r7, #24
 800d396:	4618      	mov	r0, r3
 800d398:	f7fd f8d4 	bl	800a544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3a0:	e02c      	b.n	800d3fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3a2:	4b09      	ldr	r3, [pc, #36]	; (800d3c8 <UART_SetConfig+0x69c>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f003 0320 	and.w	r3, r3, #32
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d016      	beq.n	800d3dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3ae:	4b06      	ldr	r3, [pc, #24]	; (800d3c8 <UART_SetConfig+0x69c>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	08db      	lsrs	r3, r3, #3
 800d3b4:	f003 0303 	and.w	r3, r3, #3
 800d3b8:	4a07      	ldr	r2, [pc, #28]	; (800d3d8 <UART_SetConfig+0x6ac>)
 800d3ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d3c0:	e01c      	b.n	800d3fc <UART_SetConfig+0x6d0>
 800d3c2:	bf00      	nop
 800d3c4:	40011400 	.word	0x40011400
 800d3c8:	58024400 	.word	0x58024400
 800d3cc:	40007800 	.word	0x40007800
 800d3d0:	40007c00 	.word	0x40007c00
 800d3d4:	58000c00 	.word	0x58000c00
 800d3d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d3dc:	4b9d      	ldr	r3, [pc, #628]	; (800d654 <UART_SetConfig+0x928>)
 800d3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3e0:	e00c      	b.n	800d3fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d3e2:	4b9d      	ldr	r3, [pc, #628]	; (800d658 <UART_SetConfig+0x92c>)
 800d3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3e6:	e009      	b.n	800d3fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3ee:	e005      	b.n	800d3fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d3fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 81de 	beq.w	800d7c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d408:	4a94      	ldr	r2, [pc, #592]	; (800d65c <UART_SetConfig+0x930>)
 800d40a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d40e:	461a      	mov	r2, r3
 800d410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d412:	fbb3 f3f2 	udiv	r3, r3, r2
 800d416:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	4613      	mov	r3, r2
 800d41e:	005b      	lsls	r3, r3, #1
 800d420:	4413      	add	r3, r2
 800d422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d424:	429a      	cmp	r2, r3
 800d426:	d305      	bcc.n	800d434 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d42e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d430:	429a      	cmp	r2, r3
 800d432:	d903      	bls.n	800d43c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d434:	2301      	movs	r3, #1
 800d436:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d43a:	e1c1      	b.n	800d7c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d43e:	2200      	movs	r2, #0
 800d440:	60bb      	str	r3, [r7, #8]
 800d442:	60fa      	str	r2, [r7, #12]
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d448:	4a84      	ldr	r2, [pc, #528]	; (800d65c <UART_SetConfig+0x930>)
 800d44a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d44e:	b29b      	uxth	r3, r3
 800d450:	2200      	movs	r2, #0
 800d452:	603b      	str	r3, [r7, #0]
 800d454:	607a      	str	r2, [r7, #4]
 800d456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d45a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d45e:	f7f2 ff8f 	bl	8000380 <__aeabi_uldivmod>
 800d462:	4602      	mov	r2, r0
 800d464:	460b      	mov	r3, r1
 800d466:	4610      	mov	r0, r2
 800d468:	4619      	mov	r1, r3
 800d46a:	f04f 0200 	mov.w	r2, #0
 800d46e:	f04f 0300 	mov.w	r3, #0
 800d472:	020b      	lsls	r3, r1, #8
 800d474:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d478:	0202      	lsls	r2, r0, #8
 800d47a:	6979      	ldr	r1, [r7, #20]
 800d47c:	6849      	ldr	r1, [r1, #4]
 800d47e:	0849      	lsrs	r1, r1, #1
 800d480:	2000      	movs	r0, #0
 800d482:	460c      	mov	r4, r1
 800d484:	4605      	mov	r5, r0
 800d486:	eb12 0804 	adds.w	r8, r2, r4
 800d48a:	eb43 0905 	adc.w	r9, r3, r5
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	469a      	mov	sl, r3
 800d496:	4693      	mov	fp, r2
 800d498:	4652      	mov	r2, sl
 800d49a:	465b      	mov	r3, fp
 800d49c:	4640      	mov	r0, r8
 800d49e:	4649      	mov	r1, r9
 800d4a0:	f7f2 ff6e 	bl	8000380 <__aeabi_uldivmod>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4b2:	d308      	bcc.n	800d4c6 <UART_SetConfig+0x79a>
 800d4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4ba:	d204      	bcs.n	800d4c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4c2:	60da      	str	r2, [r3, #12]
 800d4c4:	e17c      	b.n	800d7c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d4cc:	e178      	b.n	800d7c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	69db      	ldr	r3, [r3, #28]
 800d4d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4d6:	f040 80c5 	bne.w	800d664 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d4da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d4de:	2b20      	cmp	r3, #32
 800d4e0:	dc48      	bgt.n	800d574 <UART_SetConfig+0x848>
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	db7b      	blt.n	800d5de <UART_SetConfig+0x8b2>
 800d4e6:	2b20      	cmp	r3, #32
 800d4e8:	d879      	bhi.n	800d5de <UART_SetConfig+0x8b2>
 800d4ea:	a201      	add	r2, pc, #4	; (adr r2, 800d4f0 <UART_SetConfig+0x7c4>)
 800d4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f0:	0800d57b 	.word	0x0800d57b
 800d4f4:	0800d583 	.word	0x0800d583
 800d4f8:	0800d5df 	.word	0x0800d5df
 800d4fc:	0800d5df 	.word	0x0800d5df
 800d500:	0800d58b 	.word	0x0800d58b
 800d504:	0800d5df 	.word	0x0800d5df
 800d508:	0800d5df 	.word	0x0800d5df
 800d50c:	0800d5df 	.word	0x0800d5df
 800d510:	0800d59b 	.word	0x0800d59b
 800d514:	0800d5df 	.word	0x0800d5df
 800d518:	0800d5df 	.word	0x0800d5df
 800d51c:	0800d5df 	.word	0x0800d5df
 800d520:	0800d5df 	.word	0x0800d5df
 800d524:	0800d5df 	.word	0x0800d5df
 800d528:	0800d5df 	.word	0x0800d5df
 800d52c:	0800d5df 	.word	0x0800d5df
 800d530:	0800d5ab 	.word	0x0800d5ab
 800d534:	0800d5df 	.word	0x0800d5df
 800d538:	0800d5df 	.word	0x0800d5df
 800d53c:	0800d5df 	.word	0x0800d5df
 800d540:	0800d5df 	.word	0x0800d5df
 800d544:	0800d5df 	.word	0x0800d5df
 800d548:	0800d5df 	.word	0x0800d5df
 800d54c:	0800d5df 	.word	0x0800d5df
 800d550:	0800d5df 	.word	0x0800d5df
 800d554:	0800d5df 	.word	0x0800d5df
 800d558:	0800d5df 	.word	0x0800d5df
 800d55c:	0800d5df 	.word	0x0800d5df
 800d560:	0800d5df 	.word	0x0800d5df
 800d564:	0800d5df 	.word	0x0800d5df
 800d568:	0800d5df 	.word	0x0800d5df
 800d56c:	0800d5df 	.word	0x0800d5df
 800d570:	0800d5d1 	.word	0x0800d5d1
 800d574:	2b40      	cmp	r3, #64	; 0x40
 800d576:	d02e      	beq.n	800d5d6 <UART_SetConfig+0x8aa>
 800d578:	e031      	b.n	800d5de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d57a:	f7fb f9f3 	bl	8008964 <HAL_RCC_GetPCLK1Freq>
 800d57e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d580:	e033      	b.n	800d5ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d582:	f7fb fa05 	bl	8008990 <HAL_RCC_GetPCLK2Freq>
 800d586:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d588:	e02f      	b.n	800d5ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d58a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d58e:	4618      	mov	r0, r3
 800d590:	f7fc fe84 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d598:	e027      	b.n	800d5ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d59a:	f107 0318 	add.w	r3, r7, #24
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7fc ffd0 	bl	800a544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5a8:	e01f      	b.n	800d5ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5aa:	4b2d      	ldr	r3, [pc, #180]	; (800d660 <UART_SetConfig+0x934>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f003 0320 	and.w	r3, r3, #32
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d009      	beq.n	800d5ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5b6:	4b2a      	ldr	r3, [pc, #168]	; (800d660 <UART_SetConfig+0x934>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	08db      	lsrs	r3, r3, #3
 800d5bc:	f003 0303 	and.w	r3, r3, #3
 800d5c0:	4a24      	ldr	r2, [pc, #144]	; (800d654 <UART_SetConfig+0x928>)
 800d5c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5c8:	e00f      	b.n	800d5ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d5ca:	4b22      	ldr	r3, [pc, #136]	; (800d654 <UART_SetConfig+0x928>)
 800d5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5ce:	e00c      	b.n	800d5ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5d0:	4b21      	ldr	r3, [pc, #132]	; (800d658 <UART_SetConfig+0x92c>)
 800d5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5d4:	e009      	b.n	800d5ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5dc:	e005      	b.n	800d5ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d5e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d5ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f000 80e7 	beq.w	800d7c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f6:	4a19      	ldr	r2, [pc, #100]	; (800d65c <UART_SetConfig+0x930>)
 800d5f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d600:	fbb3 f3f2 	udiv	r3, r3, r2
 800d604:	005a      	lsls	r2, r3, #1
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	085b      	lsrs	r3, r3, #1
 800d60c:	441a      	add	r2, r3
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	fbb2 f3f3 	udiv	r3, r2, r3
 800d616:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61a:	2b0f      	cmp	r3, #15
 800d61c:	d916      	bls.n	800d64c <UART_SetConfig+0x920>
 800d61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d624:	d212      	bcs.n	800d64c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d628:	b29b      	uxth	r3, r3
 800d62a:	f023 030f 	bic.w	r3, r3, #15
 800d62e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d632:	085b      	lsrs	r3, r3, #1
 800d634:	b29b      	uxth	r3, r3
 800d636:	f003 0307 	and.w	r3, r3, #7
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d63e:	4313      	orrs	r3, r2
 800d640:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d648:	60da      	str	r2, [r3, #12]
 800d64a:	e0b9      	b.n	800d7c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d64c:	2301      	movs	r3, #1
 800d64e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d652:	e0b5      	b.n	800d7c0 <UART_SetConfig+0xa94>
 800d654:	03d09000 	.word	0x03d09000
 800d658:	003d0900 	.word	0x003d0900
 800d65c:	0802b614 	.word	0x0802b614
 800d660:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d664:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d668:	2b20      	cmp	r3, #32
 800d66a:	dc49      	bgt.n	800d700 <UART_SetConfig+0x9d4>
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	db7c      	blt.n	800d76a <UART_SetConfig+0xa3e>
 800d670:	2b20      	cmp	r3, #32
 800d672:	d87a      	bhi.n	800d76a <UART_SetConfig+0xa3e>
 800d674:	a201      	add	r2, pc, #4	; (adr r2, 800d67c <UART_SetConfig+0x950>)
 800d676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d67a:	bf00      	nop
 800d67c:	0800d707 	.word	0x0800d707
 800d680:	0800d70f 	.word	0x0800d70f
 800d684:	0800d76b 	.word	0x0800d76b
 800d688:	0800d76b 	.word	0x0800d76b
 800d68c:	0800d717 	.word	0x0800d717
 800d690:	0800d76b 	.word	0x0800d76b
 800d694:	0800d76b 	.word	0x0800d76b
 800d698:	0800d76b 	.word	0x0800d76b
 800d69c:	0800d727 	.word	0x0800d727
 800d6a0:	0800d76b 	.word	0x0800d76b
 800d6a4:	0800d76b 	.word	0x0800d76b
 800d6a8:	0800d76b 	.word	0x0800d76b
 800d6ac:	0800d76b 	.word	0x0800d76b
 800d6b0:	0800d76b 	.word	0x0800d76b
 800d6b4:	0800d76b 	.word	0x0800d76b
 800d6b8:	0800d76b 	.word	0x0800d76b
 800d6bc:	0800d737 	.word	0x0800d737
 800d6c0:	0800d76b 	.word	0x0800d76b
 800d6c4:	0800d76b 	.word	0x0800d76b
 800d6c8:	0800d76b 	.word	0x0800d76b
 800d6cc:	0800d76b 	.word	0x0800d76b
 800d6d0:	0800d76b 	.word	0x0800d76b
 800d6d4:	0800d76b 	.word	0x0800d76b
 800d6d8:	0800d76b 	.word	0x0800d76b
 800d6dc:	0800d76b 	.word	0x0800d76b
 800d6e0:	0800d76b 	.word	0x0800d76b
 800d6e4:	0800d76b 	.word	0x0800d76b
 800d6e8:	0800d76b 	.word	0x0800d76b
 800d6ec:	0800d76b 	.word	0x0800d76b
 800d6f0:	0800d76b 	.word	0x0800d76b
 800d6f4:	0800d76b 	.word	0x0800d76b
 800d6f8:	0800d76b 	.word	0x0800d76b
 800d6fc:	0800d75d 	.word	0x0800d75d
 800d700:	2b40      	cmp	r3, #64	; 0x40
 800d702:	d02e      	beq.n	800d762 <UART_SetConfig+0xa36>
 800d704:	e031      	b.n	800d76a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d706:	f7fb f92d 	bl	8008964 <HAL_RCC_GetPCLK1Freq>
 800d70a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d70c:	e033      	b.n	800d776 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d70e:	f7fb f93f 	bl	8008990 <HAL_RCC_GetPCLK2Freq>
 800d712:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d714:	e02f      	b.n	800d776 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fc fdbe 	bl	800a29c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d724:	e027      	b.n	800d776 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d726:	f107 0318 	add.w	r3, r7, #24
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fc ff0a 	bl	800a544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d734:	e01f      	b.n	800d776 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d736:	4b2d      	ldr	r3, [pc, #180]	; (800d7ec <UART_SetConfig+0xac0>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f003 0320 	and.w	r3, r3, #32
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d009      	beq.n	800d756 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d742:	4b2a      	ldr	r3, [pc, #168]	; (800d7ec <UART_SetConfig+0xac0>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	08db      	lsrs	r3, r3, #3
 800d748:	f003 0303 	and.w	r3, r3, #3
 800d74c:	4a28      	ldr	r2, [pc, #160]	; (800d7f0 <UART_SetConfig+0xac4>)
 800d74e:	fa22 f303 	lsr.w	r3, r2, r3
 800d752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d754:	e00f      	b.n	800d776 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d756:	4b26      	ldr	r3, [pc, #152]	; (800d7f0 <UART_SetConfig+0xac4>)
 800d758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d75a:	e00c      	b.n	800d776 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d75c:	4b25      	ldr	r3, [pc, #148]	; (800d7f4 <UART_SetConfig+0xac8>)
 800d75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d760:	e009      	b.n	800d776 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d768:	e005      	b.n	800d776 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d76a:	2300      	movs	r3, #0
 800d76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d76e:	2301      	movs	r3, #1
 800d770:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d774:	bf00      	nop
    }

    if (pclk != 0U)
 800d776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d021      	beq.n	800d7c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d780:	4a1d      	ldr	r2, [pc, #116]	; (800d7f8 <UART_SetConfig+0xacc>)
 800d782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d786:	461a      	mov	r2, r3
 800d788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d78a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	085b      	lsrs	r3, r3, #1
 800d794:	441a      	add	r2, r3
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d79e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a2:	2b0f      	cmp	r3, #15
 800d7a4:	d909      	bls.n	800d7ba <UART_SetConfig+0xa8e>
 800d7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7ac:	d205      	bcs.n	800d7ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	60da      	str	r2, [r3, #12]
 800d7b8:	e002      	b.n	800d7c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d7dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3748      	adds	r7, #72	; 0x48
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7ea:	bf00      	nop
 800d7ec:	58024400 	.word	0x58024400
 800d7f0:	03d09000 	.word	0x03d09000
 800d7f4:	003d0900 	.word	0x003d0900
 800d7f8:	0802b614 	.word	0x0802b614

0800d7fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d808:	f003 0301 	and.w	r3, r3, #1
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00a      	beq.n	800d826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	430a      	orrs	r2, r1
 800d824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d82a:	f003 0302 	and.w	r3, r3, #2
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00a      	beq.n	800d848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	430a      	orrs	r2, r1
 800d846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d84c:	f003 0304 	and.w	r3, r3, #4
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00a      	beq.n	800d86a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	430a      	orrs	r2, r1
 800d868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d86e:	f003 0308 	and.w	r3, r3, #8
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00a      	beq.n	800d88c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	430a      	orrs	r2, r1
 800d88a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d890:	f003 0310 	and.w	r3, r3, #16
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00a      	beq.n	800d8ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	430a      	orrs	r2, r1
 800d8ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8b2:	f003 0320 	and.w	r3, r3, #32
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00a      	beq.n	800d8d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	430a      	orrs	r2, r1
 800d8ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d01a      	beq.n	800d912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	430a      	orrs	r2, r1
 800d8f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8fa:	d10a      	bne.n	800d912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	430a      	orrs	r2, r1
 800d910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00a      	beq.n	800d934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	430a      	orrs	r2, r1
 800d932:	605a      	str	r2, [r3, #4]
  }
}
 800d934:	bf00      	nop
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af02      	add	r7, sp, #8
 800d946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d950:	f7f6 ff24 	bl	800479c <HAL_GetTick>
 800d954:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f003 0308 	and.w	r3, r3, #8
 800d960:	2b08      	cmp	r3, #8
 800d962:	d10e      	bne.n	800d982 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 f82f 	bl	800d9d6 <UART_WaitOnFlagUntilTimeout>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d001      	beq.n	800d982 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d97e:	2303      	movs	r3, #3
 800d980:	e025      	b.n	800d9ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 0304 	and.w	r3, r3, #4
 800d98c:	2b04      	cmp	r3, #4
 800d98e:	d10e      	bne.n	800d9ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2200      	movs	r2, #0
 800d99a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f819 	bl	800d9d6 <UART_WaitOnFlagUntilTimeout>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	e00f      	b.n	800d9ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2220      	movs	r2, #32
 800d9b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2220      	movs	r2, #32
 800d9ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b09c      	sub	sp, #112	; 0x70
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	60f8      	str	r0, [r7, #12]
 800d9de:	60b9      	str	r1, [r7, #8]
 800d9e0:	603b      	str	r3, [r7, #0]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9e6:	e0a9      	b.n	800db3c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ee:	f000 80a5 	beq.w	800db3c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9f2:	f7f6 fed3 	bl	800479c <HAL_GetTick>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	1ad3      	subs	r3, r2, r3
 800d9fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d302      	bcc.n	800da08 <UART_WaitOnFlagUntilTimeout+0x32>
 800da02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da04:	2b00      	cmp	r3, #0
 800da06:	d140      	bne.n	800da8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da10:	e853 3f00 	ldrex	r3, [r3]
 800da14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800da16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800da1c:	667b      	str	r3, [r7, #100]	; 0x64
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	461a      	mov	r2, r3
 800da24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da2e:	e841 2300 	strex	r3, r2, [r1]
 800da32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800da34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da36:	2b00      	cmp	r3, #0
 800da38:	d1e6      	bne.n	800da08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	3308      	adds	r3, #8
 800da40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da44:	e853 3f00 	ldrex	r3, [r3]
 800da48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4c:	f023 0301 	bic.w	r3, r3, #1
 800da50:	663b      	str	r3, [r7, #96]	; 0x60
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3308      	adds	r3, #8
 800da58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da5a:	64ba      	str	r2, [r7, #72]	; 0x48
 800da5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da62:	e841 2300 	strex	r3, r2, [r1]
 800da66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800da68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1e5      	bne.n	800da3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2220      	movs	r2, #32
 800da72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2220      	movs	r2, #32
 800da7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800da86:	2303      	movs	r3, #3
 800da88:	e069      	b.n	800db5e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f003 0304 	and.w	r3, r3, #4
 800da94:	2b00      	cmp	r3, #0
 800da96:	d051      	beq.n	800db3c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	69db      	ldr	r3, [r3, #28]
 800da9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800daa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800daa6:	d149      	bne.n	800db3c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dab0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daba:	e853 3f00 	ldrex	r3, [r3]
 800dabe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	461a      	mov	r2, r3
 800dace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dad0:	637b      	str	r3, [r7, #52]	; 0x34
 800dad2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dad8:	e841 2300 	strex	r3, r2, [r1]
 800dadc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1e6      	bne.n	800dab2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	3308      	adds	r3, #8
 800daea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	e853 3f00 	ldrex	r3, [r3]
 800daf2:	613b      	str	r3, [r7, #16]
   return(result);
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	f023 0301 	bic.w	r3, r3, #1
 800dafa:	66bb      	str	r3, [r7, #104]	; 0x68
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	3308      	adds	r3, #8
 800db02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db04:	623a      	str	r2, [r7, #32]
 800db06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db08:	69f9      	ldr	r1, [r7, #28]
 800db0a:	6a3a      	ldr	r2, [r7, #32]
 800db0c:	e841 2300 	strex	r3, r2, [r1]
 800db10:	61bb      	str	r3, [r7, #24]
   return(result);
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d1e5      	bne.n	800dae4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2220      	movs	r2, #32
 800db1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2220      	movs	r2, #32
 800db24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2220      	movs	r2, #32
 800db2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2200      	movs	r2, #0
 800db34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800db38:	2303      	movs	r3, #3
 800db3a:	e010      	b.n	800db5e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	69da      	ldr	r2, [r3, #28]
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	4013      	ands	r3, r2
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	429a      	cmp	r2, r3
 800db4a:	bf0c      	ite	eq
 800db4c:	2301      	moveq	r3, #1
 800db4e:	2300      	movne	r3, #0
 800db50:	b2db      	uxtb	r3, r3
 800db52:	461a      	mov	r2, r3
 800db54:	79fb      	ldrb	r3, [r7, #7]
 800db56:	429a      	cmp	r2, r3
 800db58:	f43f af46 	beq.w	800d9e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3770      	adds	r7, #112	; 0x70
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db66:	b480      	push	{r7}
 800db68:	b085      	sub	sp, #20
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db74:	2b01      	cmp	r3, #1
 800db76:	d101      	bne.n	800db7c <HAL_UARTEx_DisableFifoMode+0x16>
 800db78:	2302      	movs	r3, #2
 800db7a:	e027      	b.n	800dbcc <HAL_UARTEx_DisableFifoMode+0x66>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2224      	movs	r2, #36	; 0x24
 800db88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f022 0201 	bic.w	r2, r2, #1
 800dba2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dbaa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2220      	movs	r2, #32
 800dbbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dbca:	2300      	movs	r3, #0
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3714      	adds	r7, #20
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d101      	bne.n	800dbf0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbec:	2302      	movs	r3, #2
 800dbee:	e02d      	b.n	800dc4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2224      	movs	r2, #36	; 0x24
 800dbfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f022 0201 	bic.w	r2, r2, #1
 800dc16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	683a      	ldr	r2, [r7, #0]
 800dc28:	430a      	orrs	r2, r1
 800dc2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 f84f 	bl	800dcd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2220      	movs	r2, #32
 800dc3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc4a:	2300      	movs	r3, #0
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d101      	bne.n	800dc6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc68:	2302      	movs	r3, #2
 800dc6a:	e02d      	b.n	800dcc8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2224      	movs	r2, #36	; 0x24
 800dc78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f022 0201 	bic.w	r2, r2, #1
 800dc92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	683a      	ldr	r2, [r7, #0]
 800dca4:	430a      	orrs	r2, r1
 800dca6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 f811 	bl	800dcd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	68fa      	ldr	r2, [r7, #12]
 800dcb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2220      	movs	r2, #32
 800dcba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d108      	bne.n	800dcf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2201      	movs	r2, #1
 800dce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2201      	movs	r2, #1
 800dcec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dcf0:	e031      	b.n	800dd56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcf2:	2310      	movs	r3, #16
 800dcf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcf6:	2310      	movs	r3, #16
 800dcf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	0e5b      	lsrs	r3, r3, #25
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	f003 0307 	and.w	r3, r3, #7
 800dd08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	0f5b      	lsrs	r3, r3, #29
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	f003 0307 	and.w	r3, r3, #7
 800dd18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd1a:	7bbb      	ldrb	r3, [r7, #14]
 800dd1c:	7b3a      	ldrb	r2, [r7, #12]
 800dd1e:	4911      	ldr	r1, [pc, #68]	; (800dd64 <UARTEx_SetNbDataToProcess+0x94>)
 800dd20:	5c8a      	ldrb	r2, [r1, r2]
 800dd22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd26:	7b3a      	ldrb	r2, [r7, #12]
 800dd28:	490f      	ldr	r1, [pc, #60]	; (800dd68 <UARTEx_SetNbDataToProcess+0x98>)
 800dd2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd38:	7bfb      	ldrb	r3, [r7, #15]
 800dd3a:	7b7a      	ldrb	r2, [r7, #13]
 800dd3c:	4909      	ldr	r1, [pc, #36]	; (800dd64 <UARTEx_SetNbDataToProcess+0x94>)
 800dd3e:	5c8a      	ldrb	r2, [r1, r2]
 800dd40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd44:	7b7a      	ldrb	r2, [r7, #13]
 800dd46:	4908      	ldr	r1, [pc, #32]	; (800dd68 <UARTEx_SetNbDataToProcess+0x98>)
 800dd48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd56:	bf00      	nop
 800dd58:	3714      	adds	r7, #20
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	0802b62c 	.word	0x0802b62c
 800dd68:	0802b634 	.word	0x0802b634

0800dd6c <__NVIC_SetPriority>:
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	4603      	mov	r3, r0
 800dd74:	6039      	str	r1, [r7, #0]
 800dd76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800dd78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	db0a      	blt.n	800dd96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	490c      	ldr	r1, [pc, #48]	; (800ddb8 <__NVIC_SetPriority+0x4c>)
 800dd86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd8a:	0112      	lsls	r2, r2, #4
 800dd8c:	b2d2      	uxtb	r2, r2
 800dd8e:	440b      	add	r3, r1
 800dd90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dd94:	e00a      	b.n	800ddac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	4908      	ldr	r1, [pc, #32]	; (800ddbc <__NVIC_SetPriority+0x50>)
 800dd9c:	88fb      	ldrh	r3, [r7, #6]
 800dd9e:	f003 030f 	and.w	r3, r3, #15
 800dda2:	3b04      	subs	r3, #4
 800dda4:	0112      	lsls	r2, r2, #4
 800dda6:	b2d2      	uxtb	r2, r2
 800dda8:	440b      	add	r3, r1
 800ddaa:	761a      	strb	r2, [r3, #24]
}
 800ddac:	bf00      	nop
 800ddae:	370c      	adds	r7, #12
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr
 800ddb8:	e000e100 	.word	0xe000e100
 800ddbc:	e000ed00 	.word	0xe000ed00

0800ddc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ddc4:	4b05      	ldr	r3, [pc, #20]	; (800dddc <SysTick_Handler+0x1c>)
 800ddc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ddc8:	f002 fa9a 	bl	8010300 <xTaskGetSchedulerState>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d001      	beq.n	800ddd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ddd2:	f003 f981 	bl	80110d8 <xPortSysTickHandler>
  }
}
 800ddd6:	bf00      	nop
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	e000e010 	.word	0xe000e010

0800dde0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dde0:	b580      	push	{r7, lr}
 800dde2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dde4:	2100      	movs	r1, #0
 800dde6:	f06f 0004 	mvn.w	r0, #4
 800ddea:	f7ff ffbf 	bl	800dd6c <__NVIC_SetPriority>
#endif
}
 800ddee:	bf00      	nop
 800ddf0:	bd80      	pop	{r7, pc}
	...

0800ddf4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddfa:	f3ef 8305 	mrs	r3, IPSR
 800ddfe:	603b      	str	r3, [r7, #0]
  return(result);
 800de00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800de06:	f06f 0305 	mvn.w	r3, #5
 800de0a:	607b      	str	r3, [r7, #4]
 800de0c:	e00c      	b.n	800de28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800de0e:	4b0a      	ldr	r3, [pc, #40]	; (800de38 <osKernelInitialize+0x44>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d105      	bne.n	800de22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800de16:	4b08      	ldr	r3, [pc, #32]	; (800de38 <osKernelInitialize+0x44>)
 800de18:	2201      	movs	r2, #1
 800de1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	607b      	str	r3, [r7, #4]
 800de20:	e002      	b.n	800de28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800de22:	f04f 33ff 	mov.w	r3, #4294967295
 800de26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800de28:	687b      	ldr	r3, [r7, #4]
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	370c      	adds	r7, #12
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop
 800de38:	20000810 	.word	0x20000810

0800de3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de42:	f3ef 8305 	mrs	r3, IPSR
 800de46:	603b      	str	r3, [r7, #0]
  return(result);
 800de48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d003      	beq.n	800de56 <osKernelStart+0x1a>
    stat = osErrorISR;
 800de4e:	f06f 0305 	mvn.w	r3, #5
 800de52:	607b      	str	r3, [r7, #4]
 800de54:	e010      	b.n	800de78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800de56:	4b0b      	ldr	r3, [pc, #44]	; (800de84 <osKernelStart+0x48>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d109      	bne.n	800de72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800de5e:	f7ff ffbf 	bl	800dde0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800de62:	4b08      	ldr	r3, [pc, #32]	; (800de84 <osKernelStart+0x48>)
 800de64:	2202      	movs	r2, #2
 800de66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800de68:	f001 fdee 	bl	800fa48 <vTaskStartScheduler>
      stat = osOK;
 800de6c:	2300      	movs	r3, #0
 800de6e:	607b      	str	r3, [r7, #4]
 800de70:	e002      	b.n	800de78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800de72:	f04f 33ff 	mov.w	r3, #4294967295
 800de76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800de78:	687b      	ldr	r3, [r7, #4]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	20000810 	.word	0x20000810

0800de88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08e      	sub	sp, #56	; 0x38
 800de8c:	af04      	add	r7, sp, #16
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800de94:	2300      	movs	r3, #0
 800de96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de98:	f3ef 8305 	mrs	r3, IPSR
 800de9c:	617b      	str	r3, [r7, #20]
  return(result);
 800de9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d17e      	bne.n	800dfa2 <osThreadNew+0x11a>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d07b      	beq.n	800dfa2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800deaa:	2380      	movs	r3, #128	; 0x80
 800deac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800deae:	2318      	movs	r3, #24
 800deb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800deb2:	2300      	movs	r3, #0
 800deb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800deb6:	f04f 33ff 	mov.w	r3, #4294967295
 800deba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d045      	beq.n	800df4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d002      	beq.n	800ded0 <osThreadNew+0x48>
        name = attr->name;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	699b      	ldr	r3, [r3, #24]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d002      	beq.n	800dede <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	699b      	ldr	r3, [r3, #24]
 800dedc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d008      	beq.n	800def6 <osThreadNew+0x6e>
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	2b38      	cmp	r3, #56	; 0x38
 800dee8:	d805      	bhi.n	800def6 <osThreadNew+0x6e>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	2b00      	cmp	r3, #0
 800def4:	d001      	beq.n	800defa <osThreadNew+0x72>
        return (NULL);
 800def6:	2300      	movs	r3, #0
 800def8:	e054      	b.n	800dfa4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	695b      	ldr	r3, [r3, #20]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d003      	beq.n	800df0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	695b      	ldr	r3, [r3, #20]
 800df06:	089b      	lsrs	r3, r3, #2
 800df08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	689b      	ldr	r3, [r3, #8]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d00e      	beq.n	800df30 <osThreadNew+0xa8>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	2bbb      	cmp	r3, #187	; 0xbb
 800df18:	d90a      	bls.n	800df30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d006      	beq.n	800df30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	695b      	ldr	r3, [r3, #20]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d002      	beq.n	800df30 <osThreadNew+0xa8>
        mem = 1;
 800df2a:	2301      	movs	r3, #1
 800df2c:	61bb      	str	r3, [r7, #24]
 800df2e:	e010      	b.n	800df52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10c      	bne.n	800df52 <osThreadNew+0xca>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d108      	bne.n	800df52 <osThreadNew+0xca>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d104      	bne.n	800df52 <osThreadNew+0xca>
          mem = 0;
 800df48:	2300      	movs	r3, #0
 800df4a:	61bb      	str	r3, [r7, #24]
 800df4c:	e001      	b.n	800df52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800df4e:	2300      	movs	r3, #0
 800df50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	2b01      	cmp	r3, #1
 800df56:	d110      	bne.n	800df7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df60:	9202      	str	r2, [sp, #8]
 800df62:	9301      	str	r3, [sp, #4]
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	6a3a      	ldr	r2, [r7, #32]
 800df6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df6e:	68f8      	ldr	r0, [r7, #12]
 800df70:	f001 fb7e 	bl	800f670 <xTaskCreateStatic>
 800df74:	4603      	mov	r3, r0
 800df76:	613b      	str	r3, [r7, #16]
 800df78:	e013      	b.n	800dfa2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d110      	bne.n	800dfa2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800df80:	6a3b      	ldr	r3, [r7, #32]
 800df82:	b29a      	uxth	r2, r3
 800df84:	f107 0310 	add.w	r3, r7, #16
 800df88:	9301      	str	r3, [sp, #4]
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	9300      	str	r3, [sp, #0]
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f001 fbc9 	bl	800f72a <xTaskCreate>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d001      	beq.n	800dfa2 <osThreadNew+0x11a>
            hTask = NULL;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dfa2:	693b      	ldr	r3, [r7, #16]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3728      	adds	r7, #40	; 0x28
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfb4:	f3ef 8305 	mrs	r3, IPSR
 800dfb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800dfba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d003      	beq.n	800dfc8 <osDelay+0x1c>
    stat = osErrorISR;
 800dfc0:	f06f 0305 	mvn.w	r3, #5
 800dfc4:	60fb      	str	r3, [r7, #12]
 800dfc6:	e007      	b.n	800dfd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d002      	beq.n	800dfd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f001 fd04 	bl	800f9e0 <vTaskDelay>
    }
  }

  return (stat);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b08a      	sub	sp, #40	; 0x28
 800dfe6:	af02      	add	r7, sp, #8
 800dfe8:	60f8      	str	r0, [r7, #12]
 800dfea:	60b9      	str	r1, [r7, #8]
 800dfec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800dfee:	2300      	movs	r3, #0
 800dff0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dff2:	f3ef 8305 	mrs	r3, IPSR
 800dff6:	613b      	str	r3, [r7, #16]
  return(result);
 800dff8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d175      	bne.n	800e0ea <osSemaphoreNew+0x108>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d072      	beq.n	800e0ea <osSemaphoreNew+0x108>
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d86e      	bhi.n	800e0ea <osSemaphoreNew+0x108>
    mem = -1;
 800e00c:	f04f 33ff 	mov.w	r3, #4294967295
 800e010:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d015      	beq.n	800e044 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d006      	beq.n	800e02e <osSemaphoreNew+0x4c>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	2b4f      	cmp	r3, #79	; 0x4f
 800e026:	d902      	bls.n	800e02e <osSemaphoreNew+0x4c>
        mem = 1;
 800e028:	2301      	movs	r3, #1
 800e02a:	61bb      	str	r3, [r7, #24]
 800e02c:	e00c      	b.n	800e048 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d108      	bne.n	800e048 <osSemaphoreNew+0x66>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d104      	bne.n	800e048 <osSemaphoreNew+0x66>
          mem = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	61bb      	str	r3, [r7, #24]
 800e042:	e001      	b.n	800e048 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e044:	2300      	movs	r3, #0
 800e046:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e04e:	d04c      	beq.n	800e0ea <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2b01      	cmp	r3, #1
 800e054:	d128      	bne.n	800e0a8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d10a      	bne.n	800e072 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	2203      	movs	r2, #3
 800e062:	9200      	str	r2, [sp, #0]
 800e064:	2200      	movs	r2, #0
 800e066:	2100      	movs	r1, #0
 800e068:	2001      	movs	r0, #1
 800e06a:	f000 fb5b 	bl	800e724 <xQueueGenericCreateStatic>
 800e06e:	61f8      	str	r0, [r7, #28]
 800e070:	e005      	b.n	800e07e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e072:	2203      	movs	r2, #3
 800e074:	2100      	movs	r1, #0
 800e076:	2001      	movs	r0, #1
 800e078:	f000 fbcc 	bl	800e814 <xQueueGenericCreate>
 800e07c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d022      	beq.n	800e0ca <osSemaphoreNew+0xe8>
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d01f      	beq.n	800e0ca <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e08a:	2300      	movs	r3, #0
 800e08c:	2200      	movs	r2, #0
 800e08e:	2100      	movs	r1, #0
 800e090:	69f8      	ldr	r0, [r7, #28]
 800e092:	f000 fc87 	bl	800e9a4 <xQueueGenericSend>
 800e096:	4603      	mov	r3, r0
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d016      	beq.n	800e0ca <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e09c:	69f8      	ldr	r0, [r7, #28]
 800e09e:	f001 f913 	bl	800f2c8 <vQueueDelete>
            hSemaphore = NULL;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	61fb      	str	r3, [r7, #28]
 800e0a6:	e010      	b.n	800e0ca <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e0a8:	69bb      	ldr	r3, [r7, #24]
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d108      	bne.n	800e0c0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	689b      	ldr	r3, [r3, #8]
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	68b9      	ldr	r1, [r7, #8]
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f000 fc09 	bl	800e8ce <xQueueCreateCountingSemaphoreStatic>
 800e0bc:	61f8      	str	r0, [r7, #28]
 800e0be:	e004      	b.n	800e0ca <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e0c0:	68b9      	ldr	r1, [r7, #8]
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f000 fc3a 	bl	800e93c <xQueueCreateCountingSemaphore>
 800e0c8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d00c      	beq.n	800e0ea <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d003      	beq.n	800e0de <osSemaphoreNew+0xfc>
          name = attr->name;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	617b      	str	r3, [r7, #20]
 800e0dc:	e001      	b.n	800e0e2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e0e2:	6979      	ldr	r1, [r7, #20]
 800e0e4:	69f8      	ldr	r0, [r7, #28]
 800e0e6:	f001 fa3b 	bl	800f560 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e0ea:	69fb      	ldr	r3, [r7, #28]
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3720      	adds	r7, #32
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e102:	2300      	movs	r3, #0
 800e104:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d103      	bne.n	800e114 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e10c:	f06f 0303 	mvn.w	r3, #3
 800e110:	617b      	str	r3, [r7, #20]
 800e112:	e039      	b.n	800e188 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e114:	f3ef 8305 	mrs	r3, IPSR
 800e118:	60fb      	str	r3, [r7, #12]
  return(result);
 800e11a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d022      	beq.n	800e166 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d003      	beq.n	800e12e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e126:	f06f 0303 	mvn.w	r3, #3
 800e12a:	617b      	str	r3, [r7, #20]
 800e12c:	e02c      	b.n	800e188 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e12e:	2300      	movs	r3, #0
 800e130:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e132:	f107 0308 	add.w	r3, r7, #8
 800e136:	461a      	mov	r2, r3
 800e138:	2100      	movs	r1, #0
 800e13a:	6938      	ldr	r0, [r7, #16]
 800e13c:	f001 f844 	bl	800f1c8 <xQueueReceiveFromISR>
 800e140:	4603      	mov	r3, r0
 800e142:	2b01      	cmp	r3, #1
 800e144:	d003      	beq.n	800e14e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e146:	f06f 0302 	mvn.w	r3, #2
 800e14a:	617b      	str	r3, [r7, #20]
 800e14c:	e01c      	b.n	800e188 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d019      	beq.n	800e188 <osSemaphoreAcquire+0x94>
 800e154:	4b0f      	ldr	r3, [pc, #60]	; (800e194 <osSemaphoreAcquire+0xa0>)
 800e156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e15a:	601a      	str	r2, [r3, #0]
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	f3bf 8f6f 	isb	sy
 800e164:	e010      	b.n	800e188 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e166:	6839      	ldr	r1, [r7, #0]
 800e168:	6938      	ldr	r0, [r7, #16]
 800e16a:	f000 ff21 	bl	800efb0 <xQueueSemaphoreTake>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b01      	cmp	r3, #1
 800e172:	d009      	beq.n	800e188 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d003      	beq.n	800e182 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e17a:	f06f 0301 	mvn.w	r3, #1
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	e002      	b.n	800e188 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e182:	f06f 0302 	mvn.w	r3, #2
 800e186:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e188:	697b      	ldr	r3, [r7, #20]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3718      	adds	r7, #24
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	e000ed04 	.word	0xe000ed04

0800e198 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e198:	b580      	push	{r7, lr}
 800e19a:	b086      	sub	sp, #24
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d103      	bne.n	800e1b6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e1ae:	f06f 0303 	mvn.w	r3, #3
 800e1b2:	617b      	str	r3, [r7, #20]
 800e1b4:	e02c      	b.n	800e210 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1b6:	f3ef 8305 	mrs	r3, IPSR
 800e1ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d01a      	beq.n	800e1f8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e1c6:	f107 0308 	add.w	r3, r7, #8
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	6938      	ldr	r0, [r7, #16]
 800e1ce:	f000 fd82 	bl	800ecd6 <xQueueGiveFromISR>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d003      	beq.n	800e1e0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e1d8:	f06f 0302 	mvn.w	r3, #2
 800e1dc:	617b      	str	r3, [r7, #20]
 800e1de:	e017      	b.n	800e210 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d014      	beq.n	800e210 <osSemaphoreRelease+0x78>
 800e1e6:	4b0d      	ldr	r3, [pc, #52]	; (800e21c <osSemaphoreRelease+0x84>)
 800e1e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ec:	601a      	str	r2, [r3, #0]
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	e00b      	b.n	800e210 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	6938      	ldr	r0, [r7, #16]
 800e200:	f000 fbd0 	bl	800e9a4 <xQueueGenericSend>
 800e204:	4603      	mov	r3, r0
 800e206:	2b01      	cmp	r3, #1
 800e208:	d002      	beq.n	800e210 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e20a:	f06f 0302 	mvn.w	r3, #2
 800e20e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e210:	697b      	ldr	r3, [r7, #20]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3718      	adds	r7, #24
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	e000ed04 	.word	0xe000ed04

0800e220 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e220:	b580      	push	{r7, lr}
 800e222:	b08a      	sub	sp, #40	; 0x28
 800e224:	af02      	add	r7, sp, #8
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e22c:	2300      	movs	r3, #0
 800e22e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e230:	f3ef 8305 	mrs	r3, IPSR
 800e234:	613b      	str	r3, [r7, #16]
  return(result);
 800e236:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d15f      	bne.n	800e2fc <osMessageQueueNew+0xdc>
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d05c      	beq.n	800e2fc <osMessageQueueNew+0xdc>
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d059      	beq.n	800e2fc <osMessageQueueNew+0xdc>
    mem = -1;
 800e248:	f04f 33ff 	mov.w	r3, #4294967295
 800e24c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d029      	beq.n	800e2a8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d012      	beq.n	800e282 <osMessageQueueNew+0x62>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	2b4f      	cmp	r3, #79	; 0x4f
 800e262:	d90e      	bls.n	800e282 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d00a      	beq.n	800e282 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	695a      	ldr	r2, [r3, #20]
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	68b9      	ldr	r1, [r7, #8]
 800e274:	fb01 f303 	mul.w	r3, r1, r3
 800e278:	429a      	cmp	r2, r3
 800e27a:	d302      	bcc.n	800e282 <osMessageQueueNew+0x62>
        mem = 1;
 800e27c:	2301      	movs	r3, #1
 800e27e:	61bb      	str	r3, [r7, #24]
 800e280:	e014      	b.n	800e2ac <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d110      	bne.n	800e2ac <osMessageQueueNew+0x8c>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10c      	bne.n	800e2ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e296:	2b00      	cmp	r3, #0
 800e298:	d108      	bne.n	800e2ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d104      	bne.n	800e2ac <osMessageQueueNew+0x8c>
          mem = 0;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	61bb      	str	r3, [r7, #24]
 800e2a6:	e001      	b.n	800e2ac <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d10b      	bne.n	800e2ca <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	691a      	ldr	r2, [r3, #16]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	9100      	str	r1, [sp, #0]
 800e2be:	68b9      	ldr	r1, [r7, #8]
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f000 fa2f 	bl	800e724 <xQueueGenericCreateStatic>
 800e2c6:	61f8      	str	r0, [r7, #28]
 800e2c8:	e008      	b.n	800e2dc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d105      	bne.n	800e2dc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	68b9      	ldr	r1, [r7, #8]
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f000 fa9d 	bl	800e814 <xQueueGenericCreate>
 800e2da:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00c      	beq.n	800e2fc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d003      	beq.n	800e2f0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	617b      	str	r3, [r7, #20]
 800e2ee:	e001      	b.n	800e2f4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e2f4:	6979      	ldr	r1, [r7, #20]
 800e2f6:	69f8      	ldr	r0, [r7, #28]
 800e2f8:	f001 f932 	bl	800f560 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e2fc:	69fb      	ldr	r3, [r7, #28]
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3720      	adds	r7, #32
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
	...

0800e308 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e308:	b580      	push	{r7, lr}
 800e30a:	b088      	sub	sp, #32
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	603b      	str	r3, [r7, #0]
 800e314:	4613      	mov	r3, r2
 800e316:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e31c:	2300      	movs	r3, #0
 800e31e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e320:	f3ef 8305 	mrs	r3, IPSR
 800e324:	617b      	str	r3, [r7, #20]
  return(result);
 800e326:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d028      	beq.n	800e37e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e32c:	69bb      	ldr	r3, [r7, #24]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d005      	beq.n	800e33e <osMessageQueuePut+0x36>
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d002      	beq.n	800e33e <osMessageQueuePut+0x36>
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d003      	beq.n	800e346 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e33e:	f06f 0303 	mvn.w	r3, #3
 800e342:	61fb      	str	r3, [r7, #28]
 800e344:	e038      	b.n	800e3b8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e346:	2300      	movs	r3, #0
 800e348:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e34a:	f107 0210 	add.w	r2, r7, #16
 800e34e:	2300      	movs	r3, #0
 800e350:	68b9      	ldr	r1, [r7, #8]
 800e352:	69b8      	ldr	r0, [r7, #24]
 800e354:	f000 fc24 	bl	800eba0 <xQueueGenericSendFromISR>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d003      	beq.n	800e366 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e35e:	f06f 0302 	mvn.w	r3, #2
 800e362:	61fb      	str	r3, [r7, #28]
 800e364:	e028      	b.n	800e3b8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d025      	beq.n	800e3b8 <osMessageQueuePut+0xb0>
 800e36c:	4b15      	ldr	r3, [pc, #84]	; (800e3c4 <osMessageQueuePut+0xbc>)
 800e36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e372:	601a      	str	r2, [r3, #0]
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	f3bf 8f6f 	isb	sy
 800e37c:	e01c      	b.n	800e3b8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d002      	beq.n	800e38a <osMessageQueuePut+0x82>
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d103      	bne.n	800e392 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e38a:	f06f 0303 	mvn.w	r3, #3
 800e38e:	61fb      	str	r3, [r7, #28]
 800e390:	e012      	b.n	800e3b8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e392:	2300      	movs	r3, #0
 800e394:	683a      	ldr	r2, [r7, #0]
 800e396:	68b9      	ldr	r1, [r7, #8]
 800e398:	69b8      	ldr	r0, [r7, #24]
 800e39a:	f000 fb03 	bl	800e9a4 <xQueueGenericSend>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d009      	beq.n	800e3b8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d003      	beq.n	800e3b2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e3aa:	f06f 0301 	mvn.w	r3, #1
 800e3ae:	61fb      	str	r3, [r7, #28]
 800e3b0:	e002      	b.n	800e3b8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e3b2:	f06f 0302 	mvn.w	r3, #2
 800e3b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e3b8:	69fb      	ldr	r3, [r7, #28]
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3720      	adds	r7, #32
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	e000ed04 	.word	0xe000ed04

0800e3c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b088      	sub	sp, #32
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
 800e3d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3de:	f3ef 8305 	mrs	r3, IPSR
 800e3e2:	617b      	str	r3, [r7, #20]
  return(result);
 800e3e4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d028      	beq.n	800e43c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e3ea:	69bb      	ldr	r3, [r7, #24]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d005      	beq.n	800e3fc <osMessageQueueGet+0x34>
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <osMessageQueueGet+0x34>
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d003      	beq.n	800e404 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e3fc:	f06f 0303 	mvn.w	r3, #3
 800e400:	61fb      	str	r3, [r7, #28]
 800e402:	e037      	b.n	800e474 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e404:	2300      	movs	r3, #0
 800e406:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e408:	f107 0310 	add.w	r3, r7, #16
 800e40c:	461a      	mov	r2, r3
 800e40e:	68b9      	ldr	r1, [r7, #8]
 800e410:	69b8      	ldr	r0, [r7, #24]
 800e412:	f000 fed9 	bl	800f1c8 <xQueueReceiveFromISR>
 800e416:	4603      	mov	r3, r0
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d003      	beq.n	800e424 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e41c:	f06f 0302 	mvn.w	r3, #2
 800e420:	61fb      	str	r3, [r7, #28]
 800e422:	e027      	b.n	800e474 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d024      	beq.n	800e474 <osMessageQueueGet+0xac>
 800e42a:	4b15      	ldr	r3, [pc, #84]	; (800e480 <osMessageQueueGet+0xb8>)
 800e42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e430:	601a      	str	r2, [r3, #0]
 800e432:	f3bf 8f4f 	dsb	sy
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	e01b      	b.n	800e474 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d002      	beq.n	800e448 <osMessageQueueGet+0x80>
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d103      	bne.n	800e450 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e448:	f06f 0303 	mvn.w	r3, #3
 800e44c:	61fb      	str	r3, [r7, #28]
 800e44e:	e011      	b.n	800e474 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e450:	683a      	ldr	r2, [r7, #0]
 800e452:	68b9      	ldr	r1, [r7, #8]
 800e454:	69b8      	ldr	r0, [r7, #24]
 800e456:	f000 fccb 	bl	800edf0 <xQueueReceive>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d009      	beq.n	800e474 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d003      	beq.n	800e46e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e466:	f06f 0301 	mvn.w	r3, #1
 800e46a:	61fb      	str	r3, [r7, #28]
 800e46c:	e002      	b.n	800e474 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e46e:	f06f 0302 	mvn.w	r3, #2
 800e472:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e474:	69fb      	ldr	r3, [r7, #28]
}
 800e476:	4618      	mov	r0, r3
 800e478:	3720      	adds	r7, #32
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	e000ed04 	.word	0xe000ed04

0800e484 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	4a07      	ldr	r2, [pc, #28]	; (800e4b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800e494:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	4a06      	ldr	r2, [pc, #24]	; (800e4b4 <vApplicationGetIdleTaskMemory+0x30>)
 800e49a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2280      	movs	r2, #128	; 0x80
 800e4a0:	601a      	str	r2, [r3, #0]
}
 800e4a2:	bf00      	nop
 800e4a4:	3714      	adds	r7, #20
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	20000814 	.word	0x20000814
 800e4b4:	200008d0 	.word	0x200008d0

0800e4b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e4b8:	b480      	push	{r7}
 800e4ba:	b085      	sub	sp, #20
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	60f8      	str	r0, [r7, #12]
 800e4c0:	60b9      	str	r1, [r7, #8]
 800e4c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	4a07      	ldr	r2, [pc, #28]	; (800e4e4 <vApplicationGetTimerTaskMemory+0x2c>)
 800e4c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	4a06      	ldr	r2, [pc, #24]	; (800e4e8 <vApplicationGetTimerTaskMemory+0x30>)
 800e4ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e4d6:	601a      	str	r2, [r3, #0]
}
 800e4d8:	bf00      	nop
 800e4da:	3714      	adds	r7, #20
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr
 800e4e4:	20000ad0 	.word	0x20000ad0
 800e4e8:	20000b8c 	.word	0x20000b8c

0800e4ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f103 0208 	add.w	r2, r3, #8
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f04f 32ff 	mov.w	r2, #4294967295
 800e504:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f103 0208 	add.w	r2, r3, #8
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f103 0208 	add.w	r2, r3, #8
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e520:	bf00      	nop
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr

0800e52c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e53a:	bf00      	nop
 800e53c:	370c      	adds	r7, #12
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr

0800e546 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e546:	b480      	push	{r7}
 800e548:	b085      	sub	sp, #20
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
 800e54e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	689a      	ldr	r2, [r3, #8]
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	683a      	ldr	r2, [r7, #0]
 800e56a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	1c5a      	adds	r2, r3, #1
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	601a      	str	r2, [r3, #0]
}
 800e582:	bf00      	nop
 800e584:	3714      	adds	r7, #20
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr

0800e58e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e58e:	b480      	push	{r7}
 800e590:	b085      	sub	sp, #20
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
 800e596:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5a4:	d103      	bne.n	800e5ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	60fb      	str	r3, [r7, #12]
 800e5ac:	e00c      	b.n	800e5c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	3308      	adds	r3, #8
 800e5b2:	60fb      	str	r3, [r7, #12]
 800e5b4:	e002      	b.n	800e5bc <vListInsert+0x2e>
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	60fb      	str	r3, [r7, #12]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d2f6      	bcs.n	800e5b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	685a      	ldr	r2, [r3, #4]
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	683a      	ldr	r2, [r7, #0]
 800e5d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	68fa      	ldr	r2, [r7, #12]
 800e5dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	683a      	ldr	r2, [r7, #0]
 800e5e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	1c5a      	adds	r2, r3, #1
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	601a      	str	r2, [r3, #0]
}
 800e5f4:	bf00      	nop
 800e5f6:	3714      	adds	r7, #20
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	691b      	ldr	r3, [r3, #16]
 800e60c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	6892      	ldr	r2, [r2, #8]
 800e616:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	689b      	ldr	r3, [r3, #8]
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	6852      	ldr	r2, [r2, #4]
 800e620:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d103      	bne.n	800e634 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	689a      	ldr	r2, [r3, #8]
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	1e5a      	subs	r2, r3, #1
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3714      	adds	r7, #20
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr

0800e654 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d10a      	bne.n	800e67e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66c:	f383 8811 	msr	BASEPRI, r3
 800e670:	f3bf 8f6f 	isb	sy
 800e674:	f3bf 8f4f 	dsb	sy
 800e678:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e67a:	bf00      	nop
 800e67c:	e7fe      	b.n	800e67c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e67e:	f002 fc99 	bl	8010fb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e68a:	68f9      	ldr	r1, [r7, #12]
 800e68c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e68e:	fb01 f303 	mul.w	r3, r1, r3
 800e692:	441a      	add	r2, r3
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2200      	movs	r2, #0
 800e69c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	68f9      	ldr	r1, [r7, #12]
 800e6b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e6b4:	fb01 f303 	mul.w	r3, r1, r3
 800e6b8:	441a      	add	r2, r3
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	22ff      	movs	r2, #255	; 0xff
 800e6c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	22ff      	movs	r2, #255	; 0xff
 800e6ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d114      	bne.n	800e6fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d01a      	beq.n	800e712 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	3310      	adds	r3, #16
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f001 fc4b 	bl	800ff7c <xTaskRemoveFromEventList>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d012      	beq.n	800e712 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e6ec:	4b0c      	ldr	r3, [pc, #48]	; (800e720 <xQueueGenericReset+0xcc>)
 800e6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f2:	601a      	str	r2, [r3, #0]
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	e009      	b.n	800e712 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3310      	adds	r3, #16
 800e702:	4618      	mov	r0, r3
 800e704:	f7ff fef2 	bl	800e4ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	3324      	adds	r3, #36	; 0x24
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7ff feed 	bl	800e4ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e712:	f002 fc7f 	bl	8011014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e716:	2301      	movs	r3, #1
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	e000ed04 	.word	0xe000ed04

0800e724 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e724:	b580      	push	{r7, lr}
 800e726:	b08e      	sub	sp, #56	; 0x38
 800e728:	af02      	add	r7, sp, #8
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	607a      	str	r2, [r7, #4]
 800e730:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d10a      	bne.n	800e74e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e74a:	bf00      	nop
 800e74c:	e7fe      	b.n	800e74c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10a      	bne.n	800e76a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e758:	f383 8811 	msr	BASEPRI, r3
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e766:	bf00      	nop
 800e768:	e7fe      	b.n	800e768 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d002      	beq.n	800e776 <xQueueGenericCreateStatic+0x52>
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d001      	beq.n	800e77a <xQueueGenericCreateStatic+0x56>
 800e776:	2301      	movs	r3, #1
 800e778:	e000      	b.n	800e77c <xQueueGenericCreateStatic+0x58>
 800e77a:	2300      	movs	r3, #0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d10a      	bne.n	800e796 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	623b      	str	r3, [r7, #32]
}
 800e792:	bf00      	nop
 800e794:	e7fe      	b.n	800e794 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d102      	bne.n	800e7a2 <xQueueGenericCreateStatic+0x7e>
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <xQueueGenericCreateStatic+0x82>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e000      	b.n	800e7a8 <xQueueGenericCreateStatic+0x84>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10a      	bne.n	800e7c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	61fb      	str	r3, [r7, #28]
}
 800e7be:	bf00      	nop
 800e7c0:	e7fe      	b.n	800e7c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e7c2:	2350      	movs	r3, #80	; 0x50
 800e7c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	2b50      	cmp	r3, #80	; 0x50
 800e7ca:	d00a      	beq.n	800e7e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d0:	f383 8811 	msr	BASEPRI, r3
 800e7d4:	f3bf 8f6f 	isb	sy
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	61bb      	str	r3, [r7, #24]
}
 800e7de:	bf00      	nop
 800e7e0:	e7fe      	b.n	800e7e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e7e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00d      	beq.n	800e80a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e7f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	4613      	mov	r3, r2
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	68b9      	ldr	r1, [r7, #8]
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f000 f83f 	bl	800e888 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3730      	adds	r7, #48	; 0x30
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e814:	b580      	push	{r7, lr}
 800e816:	b08a      	sub	sp, #40	; 0x28
 800e818:	af02      	add	r7, sp, #8
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	4613      	mov	r3, r2
 800e820:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10a      	bne.n	800e83e <xQueueGenericCreate+0x2a>
	__asm volatile
 800e828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e82c:	f383 8811 	msr	BASEPRI, r3
 800e830:	f3bf 8f6f 	isb	sy
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	613b      	str	r3, [r7, #16]
}
 800e83a:	bf00      	nop
 800e83c:	e7fe      	b.n	800e83c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	68ba      	ldr	r2, [r7, #8]
 800e842:	fb02 f303 	mul.w	r3, r2, r3
 800e846:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	3350      	adds	r3, #80	; 0x50
 800e84c:	4618      	mov	r0, r3
 800e84e:	f002 fcd3 	bl	80111f8 <pvPortMalloc>
 800e852:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d011      	beq.n	800e87e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	3350      	adds	r3, #80	; 0x50
 800e862:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	2200      	movs	r2, #0
 800e868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e86c:	79fa      	ldrb	r2, [r7, #7]
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	4613      	mov	r3, r2
 800e874:	697a      	ldr	r2, [r7, #20]
 800e876:	68b9      	ldr	r1, [r7, #8]
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f000 f805 	bl	800e888 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e87e:	69bb      	ldr	r3, [r7, #24]
	}
 800e880:	4618      	mov	r0, r3
 800e882:	3720      	adds	r7, #32
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d103      	bne.n	800e8a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	69ba      	ldr	r2, [r7, #24]
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	e002      	b.n	800e8aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	68ba      	ldr	r2, [r7, #8]
 800e8b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e8b6:	2101      	movs	r1, #1
 800e8b8:	69b8      	ldr	r0, [r7, #24]
 800e8ba:	f7ff fecb 	bl	800e654 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	78fa      	ldrb	r2, [r7, #3]
 800e8c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e8c6:	bf00      	nop
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}

0800e8ce <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b08a      	sub	sp, #40	; 0x28
 800e8d2:	af02      	add	r7, sp, #8
 800e8d4:	60f8      	str	r0, [r7, #12]
 800e8d6:	60b9      	str	r1, [r7, #8]
 800e8d8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d10a      	bne.n	800e8f6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e4:	f383 8811 	msr	BASEPRI, r3
 800e8e8:	f3bf 8f6f 	isb	sy
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	61bb      	str	r3, [r7, #24]
}
 800e8f2:	bf00      	nop
 800e8f4:	e7fe      	b.n	800e8f4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e8f6:	68ba      	ldr	r2, [r7, #8]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d90a      	bls.n	800e914 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e902:	f383 8811 	msr	BASEPRI, r3
 800e906:	f3bf 8f6f 	isb	sy
 800e90a:	f3bf 8f4f 	dsb	sy
 800e90e:	617b      	str	r3, [r7, #20]
}
 800e910:	bf00      	nop
 800e912:	e7fe      	b.n	800e912 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e914:	2302      	movs	r3, #2
 800e916:	9300      	str	r3, [sp, #0]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	2100      	movs	r1, #0
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f7ff ff00 	bl	800e724 <xQueueGenericCreateStatic>
 800e924:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d002      	beq.n	800e932 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	68ba      	ldr	r2, [r7, #8]
 800e930:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e932:	69fb      	ldr	r3, [r7, #28]
	}
 800e934:	4618      	mov	r0, r3
 800e936:	3720      	adds	r7, #32
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b086      	sub	sp, #24
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d10a      	bne.n	800e962 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e950:	f383 8811 	msr	BASEPRI, r3
 800e954:	f3bf 8f6f 	isb	sy
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	613b      	str	r3, [r7, #16]
}
 800e95e:	bf00      	nop
 800e960:	e7fe      	b.n	800e960 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	429a      	cmp	r2, r3
 800e968:	d90a      	bls.n	800e980 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96e:	f383 8811 	msr	BASEPRI, r3
 800e972:	f3bf 8f6f 	isb	sy
 800e976:	f3bf 8f4f 	dsb	sy
 800e97a:	60fb      	str	r3, [r7, #12]
}
 800e97c:	bf00      	nop
 800e97e:	e7fe      	b.n	800e97e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e980:	2202      	movs	r2, #2
 800e982:	2100      	movs	r1, #0
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7ff ff45 	bl	800e814 <xQueueGenericCreate>
 800e98a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d002      	beq.n	800e998 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	683a      	ldr	r2, [r7, #0]
 800e996:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e998:	697b      	ldr	r3, [r7, #20]
	}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3718      	adds	r7, #24
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
	...

0800e9a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08e      	sub	sp, #56	; 0x38
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
 800e9b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d10a      	bne.n	800e9d6 <xQueueGenericSend+0x32>
	__asm volatile
 800e9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e9d2:	bf00      	nop
 800e9d4:	e7fe      	b.n	800e9d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d103      	bne.n	800e9e4 <xQueueGenericSend+0x40>
 800e9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d101      	bne.n	800e9e8 <xQueueGenericSend+0x44>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	e000      	b.n	800e9ea <xQueueGenericSend+0x46>
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d10a      	bne.n	800ea04 <xQueueGenericSend+0x60>
	__asm volatile
 800e9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ea00:	bf00      	nop
 800ea02:	e7fe      	b.n	800ea02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	2b02      	cmp	r3, #2
 800ea08:	d103      	bne.n	800ea12 <xQueueGenericSend+0x6e>
 800ea0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d101      	bne.n	800ea16 <xQueueGenericSend+0x72>
 800ea12:	2301      	movs	r3, #1
 800ea14:	e000      	b.n	800ea18 <xQueueGenericSend+0x74>
 800ea16:	2300      	movs	r3, #0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d10a      	bne.n	800ea32 <xQueueGenericSend+0x8e>
	__asm volatile
 800ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea20:	f383 8811 	msr	BASEPRI, r3
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	623b      	str	r3, [r7, #32]
}
 800ea2e:	bf00      	nop
 800ea30:	e7fe      	b.n	800ea30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea32:	f001 fc65 	bl	8010300 <xTaskGetSchedulerState>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d102      	bne.n	800ea42 <xQueueGenericSend+0x9e>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d101      	bne.n	800ea46 <xQueueGenericSend+0xa2>
 800ea42:	2301      	movs	r3, #1
 800ea44:	e000      	b.n	800ea48 <xQueueGenericSend+0xa4>
 800ea46:	2300      	movs	r3, #0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10a      	bne.n	800ea62 <xQueueGenericSend+0xbe>
	__asm volatile
 800ea4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	61fb      	str	r3, [r7, #28]
}
 800ea5e:	bf00      	nop
 800ea60:	e7fe      	b.n	800ea60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea62:	f002 faa7 	bl	8010fb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d302      	bcc.n	800ea78 <xQueueGenericSend+0xd4>
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	2b02      	cmp	r3, #2
 800ea76:	d129      	bne.n	800eacc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea78:	683a      	ldr	r2, [r7, #0]
 800ea7a:	68b9      	ldr	r1, [r7, #8]
 800ea7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea7e:	f000 fc5e 	bl	800f33e <prvCopyDataToQueue>
 800ea82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d010      	beq.n	800eaae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8e:	3324      	adds	r3, #36	; 0x24
 800ea90:	4618      	mov	r0, r3
 800ea92:	f001 fa73 	bl	800ff7c <xTaskRemoveFromEventList>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d013      	beq.n	800eac4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ea9c:	4b3f      	ldr	r3, [pc, #252]	; (800eb9c <xQueueGenericSend+0x1f8>)
 800ea9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaa2:	601a      	str	r2, [r3, #0]
 800eaa4:	f3bf 8f4f 	dsb	sy
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	e00a      	b.n	800eac4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d007      	beq.n	800eac4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eab4:	4b39      	ldr	r3, [pc, #228]	; (800eb9c <xQueueGenericSend+0x1f8>)
 800eab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaba:	601a      	str	r2, [r3, #0]
 800eabc:	f3bf 8f4f 	dsb	sy
 800eac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eac4:	f002 faa6 	bl	8011014 <vPortExitCritical>
				return pdPASS;
 800eac8:	2301      	movs	r3, #1
 800eaca:	e063      	b.n	800eb94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d103      	bne.n	800eada <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ead2:	f002 fa9f 	bl	8011014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ead6:	2300      	movs	r3, #0
 800ead8:	e05c      	b.n	800eb94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d106      	bne.n	800eaee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eae0:	f107 0314 	add.w	r3, r7, #20
 800eae4:	4618      	mov	r0, r3
 800eae6:	f001 faad 	bl	8010044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eaea:	2301      	movs	r3, #1
 800eaec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eaee:	f002 fa91 	bl	8011014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eaf2:	f001 f819 	bl	800fb28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eaf6:	f002 fa5d 	bl	8010fb4 <vPortEnterCritical>
 800eafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb00:	b25b      	sxtb	r3, r3
 800eb02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb06:	d103      	bne.n	800eb10 <xQueueGenericSend+0x16c>
 800eb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb16:	b25b      	sxtb	r3, r3
 800eb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb1c:	d103      	bne.n	800eb26 <xQueueGenericSend+0x182>
 800eb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb26:	f002 fa75 	bl	8011014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb2a:	1d3a      	adds	r2, r7, #4
 800eb2c:	f107 0314 	add.w	r3, r7, #20
 800eb30:	4611      	mov	r1, r2
 800eb32:	4618      	mov	r0, r3
 800eb34:	f001 fa9c 	bl	8010070 <xTaskCheckForTimeOut>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d124      	bne.n	800eb88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eb3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb40:	f000 fcf5 	bl	800f52e <prvIsQueueFull>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d018      	beq.n	800eb7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4c:	3310      	adds	r3, #16
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	4611      	mov	r1, r2
 800eb52:	4618      	mov	r0, r3
 800eb54:	f001 f9c2 	bl	800fedc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eb58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb5a:	f000 fc80 	bl	800f45e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eb5e:	f000 fff1 	bl	800fb44 <xTaskResumeAll>
 800eb62:	4603      	mov	r3, r0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	f47f af7c 	bne.w	800ea62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eb6a:	4b0c      	ldr	r3, [pc, #48]	; (800eb9c <xQueueGenericSend+0x1f8>)
 800eb6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb70:	601a      	str	r2, [r3, #0]
 800eb72:	f3bf 8f4f 	dsb	sy
 800eb76:	f3bf 8f6f 	isb	sy
 800eb7a:	e772      	b.n	800ea62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eb7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb7e:	f000 fc6e 	bl	800f45e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb82:	f000 ffdf 	bl	800fb44 <xTaskResumeAll>
 800eb86:	e76c      	b.n	800ea62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eb88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb8a:	f000 fc68 	bl	800f45e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb8e:	f000 ffd9 	bl	800fb44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eb92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3738      	adds	r7, #56	; 0x38
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	e000ed04 	.word	0xe000ed04

0800eba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b090      	sub	sp, #64	; 0x40
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
 800ebac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10a      	bne.n	800ebce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ebb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f3bf 8f6f 	isb	sy
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ebca:	bf00      	nop
 800ebcc:	e7fe      	b.n	800ebcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d103      	bne.n	800ebdc <xQueueGenericSendFromISR+0x3c>
 800ebd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d101      	bne.n	800ebe0 <xQueueGenericSendFromISR+0x40>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	e000      	b.n	800ebe2 <xQueueGenericSendFromISR+0x42>
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10a      	bne.n	800ebfc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ebe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ebf8:	bf00      	nop
 800ebfa:	e7fe      	b.n	800ebfa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	2b02      	cmp	r3, #2
 800ec00:	d103      	bne.n	800ec0a <xQueueGenericSendFromISR+0x6a>
 800ec02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d101      	bne.n	800ec0e <xQueueGenericSendFromISR+0x6e>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e000      	b.n	800ec10 <xQueueGenericSendFromISR+0x70>
 800ec0e:	2300      	movs	r3, #0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d10a      	bne.n	800ec2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ec14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec18:	f383 8811 	msr	BASEPRI, r3
 800ec1c:	f3bf 8f6f 	isb	sy
 800ec20:	f3bf 8f4f 	dsb	sy
 800ec24:	623b      	str	r3, [r7, #32]
}
 800ec26:	bf00      	nop
 800ec28:	e7fe      	b.n	800ec28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec2a:	f002 faa5 	bl	8011178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ec2e:	f3ef 8211 	mrs	r2, BASEPRI
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	61fa      	str	r2, [r7, #28]
 800ec44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ec46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d302      	bcc.n	800ec5c <xQueueGenericSendFromISR+0xbc>
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	2b02      	cmp	r3, #2
 800ec5a:	d12f      	bne.n	800ecbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ec5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec6c:	683a      	ldr	r2, [r7, #0]
 800ec6e:	68b9      	ldr	r1, [r7, #8]
 800ec70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec72:	f000 fb64 	bl	800f33e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ec76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ec7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec7e:	d112      	bne.n	800eca6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d016      	beq.n	800ecb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8a:	3324      	adds	r3, #36	; 0x24
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f001 f975 	bl	800ff7c <xTaskRemoveFromEventList>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d00e      	beq.n	800ecb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00b      	beq.n	800ecb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2201      	movs	r2, #1
 800eca2:	601a      	str	r2, [r3, #0]
 800eca4:	e007      	b.n	800ecb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eca6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ecaa:	3301      	adds	r3, #1
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	b25a      	sxtb	r2, r3
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ecba:	e001      	b.n	800ecc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ecca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3740      	adds	r7, #64	; 0x40
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b08e      	sub	sp, #56	; 0x38
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
 800ecde:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ece4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10a      	bne.n	800ed00 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ecea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecee:	f383 8811 	msr	BASEPRI, r3
 800ecf2:	f3bf 8f6f 	isb	sy
 800ecf6:	f3bf 8f4f 	dsb	sy
 800ecfa:	623b      	str	r3, [r7, #32]
}
 800ecfc:	bf00      	nop
 800ecfe:	e7fe      	b.n	800ecfe <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ed00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00a      	beq.n	800ed1e <xQueueGiveFromISR+0x48>
	__asm volatile
 800ed08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0c:	f383 8811 	msr	BASEPRI, r3
 800ed10:	f3bf 8f6f 	isb	sy
 800ed14:	f3bf 8f4f 	dsb	sy
 800ed18:	61fb      	str	r3, [r7, #28]
}
 800ed1a:	bf00      	nop
 800ed1c:	e7fe      	b.n	800ed1c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ed1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d103      	bne.n	800ed2e <xQueueGiveFromISR+0x58>
 800ed26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d101      	bne.n	800ed32 <xQueueGiveFromISR+0x5c>
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e000      	b.n	800ed34 <xQueueGiveFromISR+0x5e>
 800ed32:	2300      	movs	r3, #0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d10a      	bne.n	800ed4e <xQueueGiveFromISR+0x78>
	__asm volatile
 800ed38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3c:	f383 8811 	msr	BASEPRI, r3
 800ed40:	f3bf 8f6f 	isb	sy
 800ed44:	f3bf 8f4f 	dsb	sy
 800ed48:	61bb      	str	r3, [r7, #24]
}
 800ed4a:	bf00      	nop
 800ed4c:	e7fe      	b.n	800ed4c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed4e:	f002 fa13 	bl	8011178 <vPortValidateInterruptPriority>
	__asm volatile
 800ed52:	f3ef 8211 	mrs	r2, BASEPRI
 800ed56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5a:	f383 8811 	msr	BASEPRI, r3
 800ed5e:	f3bf 8f6f 	isb	sy
 800ed62:	f3bf 8f4f 	dsb	sy
 800ed66:	617a      	str	r2, [r7, #20]
 800ed68:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ed6a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ed74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d22b      	bcs.n	800edd6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8a:	1c5a      	adds	r2, r3, #1
 800ed8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed98:	d112      	bne.n	800edc0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d016      	beq.n	800edd0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	3324      	adds	r3, #36	; 0x24
 800eda6:	4618      	mov	r0, r3
 800eda8:	f001 f8e8 	bl	800ff7c <xTaskRemoveFromEventList>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00e      	beq.n	800edd0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00b      	beq.n	800edd0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	2201      	movs	r2, #1
 800edbc:	601a      	str	r2, [r3, #0]
 800edbe:	e007      	b.n	800edd0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800edc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edc4:	3301      	adds	r3, #1
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	b25a      	sxtb	r2, r3
 800edca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800edd0:	2301      	movs	r3, #1
 800edd2:	637b      	str	r3, [r7, #52]	; 0x34
 800edd4:	e001      	b.n	800edda <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800edd6:	2300      	movs	r3, #0
 800edd8:	637b      	str	r3, [r7, #52]	; 0x34
 800edda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eddc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f383 8811 	msr	BASEPRI, r3
}
 800ede4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ede6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3738      	adds	r7, #56	; 0x38
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b08c      	sub	sp, #48	; 0x30
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800edfc:	2300      	movs	r3, #0
 800edfe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d10a      	bne.n	800ee20 <xQueueReceive+0x30>
	__asm volatile
 800ee0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0e:	f383 8811 	msr	BASEPRI, r3
 800ee12:	f3bf 8f6f 	isb	sy
 800ee16:	f3bf 8f4f 	dsb	sy
 800ee1a:	623b      	str	r3, [r7, #32]
}
 800ee1c:	bf00      	nop
 800ee1e:	e7fe      	b.n	800ee1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d103      	bne.n	800ee2e <xQueueReceive+0x3e>
 800ee26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d101      	bne.n	800ee32 <xQueueReceive+0x42>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e000      	b.n	800ee34 <xQueueReceive+0x44>
 800ee32:	2300      	movs	r3, #0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10a      	bne.n	800ee4e <xQueueReceive+0x5e>
	__asm volatile
 800ee38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	61fb      	str	r3, [r7, #28]
}
 800ee4a:	bf00      	nop
 800ee4c:	e7fe      	b.n	800ee4c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee4e:	f001 fa57 	bl	8010300 <xTaskGetSchedulerState>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d102      	bne.n	800ee5e <xQueueReceive+0x6e>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d101      	bne.n	800ee62 <xQueueReceive+0x72>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	e000      	b.n	800ee64 <xQueueReceive+0x74>
 800ee62:	2300      	movs	r3, #0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d10a      	bne.n	800ee7e <xQueueReceive+0x8e>
	__asm volatile
 800ee68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6c:	f383 8811 	msr	BASEPRI, r3
 800ee70:	f3bf 8f6f 	isb	sy
 800ee74:	f3bf 8f4f 	dsb	sy
 800ee78:	61bb      	str	r3, [r7, #24]
}
 800ee7a:	bf00      	nop
 800ee7c:	e7fe      	b.n	800ee7c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee7e:	f002 f899 	bl	8010fb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d01f      	beq.n	800eece <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee8e:	68b9      	ldr	r1, [r7, #8]
 800ee90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee92:	f000 fabe 	bl	800f412 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee98:	1e5a      	subs	r2, r3, #1
 800ee9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea0:	691b      	ldr	r3, [r3, #16]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00f      	beq.n	800eec6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea8:	3310      	adds	r3, #16
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f001 f866 	bl	800ff7c <xTaskRemoveFromEventList>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d007      	beq.n	800eec6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eeb6:	4b3d      	ldr	r3, [pc, #244]	; (800efac <xQueueReceive+0x1bc>)
 800eeb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eebc:	601a      	str	r2, [r3, #0]
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eec6:	f002 f8a5 	bl	8011014 <vPortExitCritical>
				return pdPASS;
 800eeca:	2301      	movs	r3, #1
 800eecc:	e069      	b.n	800efa2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d103      	bne.n	800eedc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eed4:	f002 f89e 	bl	8011014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eed8:	2300      	movs	r3, #0
 800eeda:	e062      	b.n	800efa2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d106      	bne.n	800eef0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eee2:	f107 0310 	add.w	r3, r7, #16
 800eee6:	4618      	mov	r0, r3
 800eee8:	f001 f8ac 	bl	8010044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eeec:	2301      	movs	r3, #1
 800eeee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eef0:	f002 f890 	bl	8011014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eef4:	f000 fe18 	bl	800fb28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eef8:	f002 f85c 	bl	8010fb4 <vPortEnterCritical>
 800eefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef02:	b25b      	sxtb	r3, r3
 800ef04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef08:	d103      	bne.n	800ef12 <xQueueReceive+0x122>
 800ef0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef18:	b25b      	sxtb	r3, r3
 800ef1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef1e:	d103      	bne.n	800ef28 <xQueueReceive+0x138>
 800ef20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef22:	2200      	movs	r2, #0
 800ef24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef28:	f002 f874 	bl	8011014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef2c:	1d3a      	adds	r2, r7, #4
 800ef2e:	f107 0310 	add.w	r3, r7, #16
 800ef32:	4611      	mov	r1, r2
 800ef34:	4618      	mov	r0, r3
 800ef36:	f001 f89b 	bl	8010070 <xTaskCheckForTimeOut>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d123      	bne.n	800ef88 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef42:	f000 fade 	bl	800f502 <prvIsQueueEmpty>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d017      	beq.n	800ef7c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4e:	3324      	adds	r3, #36	; 0x24
 800ef50:	687a      	ldr	r2, [r7, #4]
 800ef52:	4611      	mov	r1, r2
 800ef54:	4618      	mov	r0, r3
 800ef56:	f000 ffc1 	bl	800fedc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef5c:	f000 fa7f 	bl	800f45e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef60:	f000 fdf0 	bl	800fb44 <xTaskResumeAll>
 800ef64:	4603      	mov	r3, r0
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d189      	bne.n	800ee7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ef6a:	4b10      	ldr	r3, [pc, #64]	; (800efac <xQueueReceive+0x1bc>)
 800ef6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef70:	601a      	str	r2, [r3, #0]
 800ef72:	f3bf 8f4f 	dsb	sy
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	e780      	b.n	800ee7e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ef7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef7e:	f000 fa6e 	bl	800f45e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef82:	f000 fddf 	bl	800fb44 <xTaskResumeAll>
 800ef86:	e77a      	b.n	800ee7e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ef88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef8a:	f000 fa68 	bl	800f45e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef8e:	f000 fdd9 	bl	800fb44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef94:	f000 fab5 	bl	800f502 <prvIsQueueEmpty>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f43f af6f 	beq.w	800ee7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800efa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3730      	adds	r7, #48	; 0x30
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	e000ed04 	.word	0xe000ed04

0800efb0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b08e      	sub	sp, #56	; 0x38
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800efba:	2300      	movs	r3, #0
 800efbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800efc2:	2300      	movs	r3, #0
 800efc4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d10a      	bne.n	800efe2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800efcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd0:	f383 8811 	msr	BASEPRI, r3
 800efd4:	f3bf 8f6f 	isb	sy
 800efd8:	f3bf 8f4f 	dsb	sy
 800efdc:	623b      	str	r3, [r7, #32]
}
 800efde:	bf00      	nop
 800efe0:	e7fe      	b.n	800efe0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800efe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00a      	beq.n	800f000 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800efea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efee:	f383 8811 	msr	BASEPRI, r3
 800eff2:	f3bf 8f6f 	isb	sy
 800eff6:	f3bf 8f4f 	dsb	sy
 800effa:	61fb      	str	r3, [r7, #28]
}
 800effc:	bf00      	nop
 800effe:	e7fe      	b.n	800effe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f000:	f001 f97e 	bl	8010300 <xTaskGetSchedulerState>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d102      	bne.n	800f010 <xQueueSemaphoreTake+0x60>
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d101      	bne.n	800f014 <xQueueSemaphoreTake+0x64>
 800f010:	2301      	movs	r3, #1
 800f012:	e000      	b.n	800f016 <xQueueSemaphoreTake+0x66>
 800f014:	2300      	movs	r3, #0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10a      	bne.n	800f030 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01e:	f383 8811 	msr	BASEPRI, r3
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	f3bf 8f4f 	dsb	sy
 800f02a:	61bb      	str	r3, [r7, #24]
}
 800f02c:	bf00      	nop
 800f02e:	e7fe      	b.n	800f02e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f030:	f001 ffc0 	bl	8010fb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f038:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d024      	beq.n	800f08a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f042:	1e5a      	subs	r2, r3, #1
 800f044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f046:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d104      	bne.n	800f05a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f050:	f001 facc 	bl	80105ec <pvTaskIncrementMutexHeldCount>
 800f054:	4602      	mov	r2, r0
 800f056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f058:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05c:	691b      	ldr	r3, [r3, #16]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d00f      	beq.n	800f082 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f064:	3310      	adds	r3, #16
 800f066:	4618      	mov	r0, r3
 800f068:	f000 ff88 	bl	800ff7c <xTaskRemoveFromEventList>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d007      	beq.n	800f082 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f072:	4b54      	ldr	r3, [pc, #336]	; (800f1c4 <xQueueSemaphoreTake+0x214>)
 800f074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f078:	601a      	str	r2, [r3, #0]
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f082:	f001 ffc7 	bl	8011014 <vPortExitCritical>
				return pdPASS;
 800f086:	2301      	movs	r3, #1
 800f088:	e097      	b.n	800f1ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d111      	bne.n	800f0b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00a      	beq.n	800f0ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09a:	f383 8811 	msr	BASEPRI, r3
 800f09e:	f3bf 8f6f 	isb	sy
 800f0a2:	f3bf 8f4f 	dsb	sy
 800f0a6:	617b      	str	r3, [r7, #20]
}
 800f0a8:	bf00      	nop
 800f0aa:	e7fe      	b.n	800f0aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f0ac:	f001 ffb2 	bl	8011014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	e082      	b.n	800f1ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d106      	bne.n	800f0c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f0ba:	f107 030c 	add.w	r3, r7, #12
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 ffc0 	bl	8010044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f0c8:	f001 ffa4 	bl	8011014 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f0cc:	f000 fd2c 	bl	800fb28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0d0:	f001 ff70 	bl	8010fb4 <vPortEnterCritical>
 800f0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0da:	b25b      	sxtb	r3, r3
 800f0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e0:	d103      	bne.n	800f0ea <xQueueSemaphoreTake+0x13a>
 800f0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0f0:	b25b      	sxtb	r3, r3
 800f0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f6:	d103      	bne.n	800f100 <xQueueSemaphoreTake+0x150>
 800f0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f100:	f001 ff88 	bl	8011014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f104:	463a      	mov	r2, r7
 800f106:	f107 030c 	add.w	r3, r7, #12
 800f10a:	4611      	mov	r1, r2
 800f10c:	4618      	mov	r0, r3
 800f10e:	f000 ffaf 	bl	8010070 <xTaskCheckForTimeOut>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d132      	bne.n	800f17e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f11a:	f000 f9f2 	bl	800f502 <prvIsQueueEmpty>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d026      	beq.n	800f172 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d109      	bne.n	800f140 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f12c:	f001 ff42 	bl	8010fb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	4618      	mov	r0, r3
 800f136:	f001 f901 	bl	801033c <xTaskPriorityInherit>
 800f13a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f13c:	f001 ff6a 	bl	8011014 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f142:	3324      	adds	r3, #36	; 0x24
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	4611      	mov	r1, r2
 800f148:	4618      	mov	r0, r3
 800f14a:	f000 fec7 	bl	800fedc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f14e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f150:	f000 f985 	bl	800f45e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f154:	f000 fcf6 	bl	800fb44 <xTaskResumeAll>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f47f af68 	bne.w	800f030 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f160:	4b18      	ldr	r3, [pc, #96]	; (800f1c4 <xQueueSemaphoreTake+0x214>)
 800f162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f166:	601a      	str	r2, [r3, #0]
 800f168:	f3bf 8f4f 	dsb	sy
 800f16c:	f3bf 8f6f 	isb	sy
 800f170:	e75e      	b.n	800f030 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f174:	f000 f973 	bl	800f45e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f178:	f000 fce4 	bl	800fb44 <xTaskResumeAll>
 800f17c:	e758      	b.n	800f030 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f17e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f180:	f000 f96d 	bl	800f45e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f184:	f000 fcde 	bl	800fb44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f188:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f18a:	f000 f9ba 	bl	800f502 <prvIsQueueEmpty>
 800f18e:	4603      	mov	r3, r0
 800f190:	2b00      	cmp	r3, #0
 800f192:	f43f af4d 	beq.w	800f030 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00d      	beq.n	800f1b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f19c:	f001 ff0a 	bl	8010fb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f1a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1a2:	f000 f8b4 	bl	800f30e <prvGetDisinheritPriorityAfterTimeout>
 800f1a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f001 f99a 	bl	80104e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f1b4:	f001 ff2e 	bl	8011014 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f1b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3738      	adds	r7, #56	; 0x38
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	e000ed04 	.word	0xe000ed04

0800f1c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b08e      	sub	sp, #56	; 0x38
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d10a      	bne.n	800f1f4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e2:	f383 8811 	msr	BASEPRI, r3
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	f3bf 8f4f 	dsb	sy
 800f1ee:	623b      	str	r3, [r7, #32]
}
 800f1f0:	bf00      	nop
 800f1f2:	e7fe      	b.n	800f1f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d103      	bne.n	800f202 <xQueueReceiveFromISR+0x3a>
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d101      	bne.n	800f206 <xQueueReceiveFromISR+0x3e>
 800f202:	2301      	movs	r3, #1
 800f204:	e000      	b.n	800f208 <xQueueReceiveFromISR+0x40>
 800f206:	2300      	movs	r3, #0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d10a      	bne.n	800f222 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f210:	f383 8811 	msr	BASEPRI, r3
 800f214:	f3bf 8f6f 	isb	sy
 800f218:	f3bf 8f4f 	dsb	sy
 800f21c:	61fb      	str	r3, [r7, #28]
}
 800f21e:	bf00      	nop
 800f220:	e7fe      	b.n	800f220 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f222:	f001 ffa9 	bl	8011178 <vPortValidateInterruptPriority>
	__asm volatile
 800f226:	f3ef 8211 	mrs	r2, BASEPRI
 800f22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22e:	f383 8811 	msr	BASEPRI, r3
 800f232:	f3bf 8f6f 	isb	sy
 800f236:	f3bf 8f4f 	dsb	sy
 800f23a:	61ba      	str	r2, [r7, #24]
 800f23c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f23e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f240:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f246:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d02f      	beq.n	800f2ae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f258:	68b9      	ldr	r1, [r7, #8]
 800f25a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f25c:	f000 f8d9 	bl	800f412 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f262:	1e5a      	subs	r2, r3, #1
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f268:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f270:	d112      	bne.n	800f298 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f274:	691b      	ldr	r3, [r3, #16]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d016      	beq.n	800f2a8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	3310      	adds	r3, #16
 800f27e:	4618      	mov	r0, r3
 800f280:	f000 fe7c 	bl	800ff7c <xTaskRemoveFromEventList>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00e      	beq.n	800f2a8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d00b      	beq.n	800f2a8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2201      	movs	r2, #1
 800f294:	601a      	str	r2, [r3, #0]
 800f296:	e007      	b.n	800f2a8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f29c:	3301      	adds	r3, #1
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	b25a      	sxtb	r2, r3
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	637b      	str	r3, [r7, #52]	; 0x34
 800f2ac:	e001      	b.n	800f2b2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	637b      	str	r3, [r7, #52]	; 0x34
 800f2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	f383 8811 	msr	BASEPRI, r3
}
 800f2bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3738      	adds	r7, #56	; 0x38
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d10a      	bne.n	800f2f0 <vQueueDelete+0x28>
	__asm volatile
 800f2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2de:	f383 8811 	msr	BASEPRI, r3
 800f2e2:	f3bf 8f6f 	isb	sy
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	60bb      	str	r3, [r7, #8]
}
 800f2ec:	bf00      	nop
 800f2ee:	e7fe      	b.n	800f2ee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f000 f95f 	bl	800f5b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d102      	bne.n	800f306 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	f002 f845 	bl	8011390 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f306:	bf00      	nop
 800f308:	3710      	adds	r7, #16
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}

0800f30e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f30e:	b480      	push	{r7}
 800f310:	b085      	sub	sp, #20
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d006      	beq.n	800f32c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f328:	60fb      	str	r3, [r7, #12]
 800f32a:	e001      	b.n	800f330 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f32c:	2300      	movs	r3, #0
 800f32e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f330:	68fb      	ldr	r3, [r7, #12]
	}
 800f332:	4618      	mov	r0, r3
 800f334:	3714      	adds	r7, #20
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr

0800f33e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f33e:	b580      	push	{r7, lr}
 800f340:	b086      	sub	sp, #24
 800f342:	af00      	add	r7, sp, #0
 800f344:	60f8      	str	r0, [r7, #12]
 800f346:	60b9      	str	r1, [r7, #8]
 800f348:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f34a:	2300      	movs	r3, #0
 800f34c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f352:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d10d      	bne.n	800f378 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d14d      	bne.n	800f400 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	689b      	ldr	r3, [r3, #8]
 800f368:	4618      	mov	r0, r3
 800f36a:	f001 f84f 	bl	801040c <xTaskPriorityDisinherit>
 800f36e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2200      	movs	r2, #0
 800f374:	609a      	str	r2, [r3, #8]
 800f376:	e043      	b.n	800f400 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d119      	bne.n	800f3b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	6858      	ldr	r0, [r3, #4]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f386:	461a      	mov	r2, r3
 800f388:	68b9      	ldr	r1, [r7, #8]
 800f38a:	f01a fb1b 	bl	80299c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	685a      	ldr	r2, [r3, #4]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f396:	441a      	add	r2, r3
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	685a      	ldr	r2, [r3, #4]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	689b      	ldr	r3, [r3, #8]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d32b      	bcc.n	800f400 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	605a      	str	r2, [r3, #4]
 800f3b0:	e026      	b.n	800f400 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	68d8      	ldr	r0, [r3, #12]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	68b9      	ldr	r1, [r7, #8]
 800f3be:	f01a fb01 	bl	80299c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	68da      	ldr	r2, [r3, #12]
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ca:	425b      	negs	r3, r3
 800f3cc:	441a      	add	r2, r3
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	68da      	ldr	r2, [r3, #12]
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d207      	bcs.n	800f3ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	689a      	ldr	r2, [r3, #8]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e6:	425b      	negs	r3, r3
 800f3e8:	441a      	add	r2, r3
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2b02      	cmp	r3, #2
 800f3f2:	d105      	bne.n	800f400 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d002      	beq.n	800f400 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f400:	693b      	ldr	r3, [r7, #16]
 800f402:	1c5a      	adds	r2, r3, #1
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f408:	697b      	ldr	r3, [r7, #20]
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3718      	adds	r7, #24
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f412:	b580      	push	{r7, lr}
 800f414:	b082      	sub	sp, #8
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
 800f41a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f420:	2b00      	cmp	r3, #0
 800f422:	d018      	beq.n	800f456 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	68da      	ldr	r2, [r3, #12]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f42c:	441a      	add	r2, r3
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	68da      	ldr	r2, [r3, #12]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d303      	bcc.n	800f446 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	68d9      	ldr	r1, [r3, #12]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f44e:	461a      	mov	r2, r3
 800f450:	6838      	ldr	r0, [r7, #0]
 800f452:	f01a fab7 	bl	80299c4 <memcpy>
	}
}
 800f456:	bf00      	nop
 800f458:	3708      	adds	r7, #8
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f45e:	b580      	push	{r7, lr}
 800f460:	b084      	sub	sp, #16
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f466:	f001 fda5 	bl	8010fb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f470:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f472:	e011      	b.n	800f498 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d012      	beq.n	800f4a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	3324      	adds	r3, #36	; 0x24
 800f480:	4618      	mov	r0, r3
 800f482:	f000 fd7b 	bl	800ff7c <xTaskRemoveFromEventList>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d001      	beq.n	800f490 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f48c:	f000 fe52 	bl	8010134 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f490:	7bfb      	ldrb	r3, [r7, #15]
 800f492:	3b01      	subs	r3, #1
 800f494:	b2db      	uxtb	r3, r3
 800f496:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	dce9      	bgt.n	800f474 <prvUnlockQueue+0x16>
 800f4a0:	e000      	b.n	800f4a4 <prvUnlockQueue+0x46>
					break;
 800f4a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	22ff      	movs	r2, #255	; 0xff
 800f4a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f4ac:	f001 fdb2 	bl	8011014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f4b0:	f001 fd80 	bl	8010fb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4bc:	e011      	b.n	800f4e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	691b      	ldr	r3, [r3, #16]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d012      	beq.n	800f4ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	3310      	adds	r3, #16
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f000 fd56 	bl	800ff7c <xTaskRemoveFromEventList>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d001      	beq.n	800f4da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f4d6:	f000 fe2d 	bl	8010134 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f4da:	7bbb      	ldrb	r3, [r7, #14]
 800f4dc:	3b01      	subs	r3, #1
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	dce9      	bgt.n	800f4be <prvUnlockQueue+0x60>
 800f4ea:	e000      	b.n	800f4ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	22ff      	movs	r2, #255	; 0xff
 800f4f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f4f6:	f001 fd8d 	bl	8011014 <vPortExitCritical>
}
 800f4fa:	bf00      	nop
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f502:	b580      	push	{r7, lr}
 800f504:	b084      	sub	sp, #16
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f50a:	f001 fd53 	bl	8010fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f512:	2b00      	cmp	r3, #0
 800f514:	d102      	bne.n	800f51c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f516:	2301      	movs	r3, #1
 800f518:	60fb      	str	r3, [r7, #12]
 800f51a:	e001      	b.n	800f520 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f51c:	2300      	movs	r3, #0
 800f51e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f520:	f001 fd78 	bl	8011014 <vPortExitCritical>

	return xReturn;
 800f524:	68fb      	ldr	r3, [r7, #12]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3710      	adds	r7, #16
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f52e:	b580      	push	{r7, lr}
 800f530:	b084      	sub	sp, #16
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f536:	f001 fd3d 	bl	8010fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f542:	429a      	cmp	r2, r3
 800f544:	d102      	bne.n	800f54c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f546:	2301      	movs	r3, #1
 800f548:	60fb      	str	r3, [r7, #12]
 800f54a:	e001      	b.n	800f550 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f54c:	2300      	movs	r3, #0
 800f54e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f550:	f001 fd60 	bl	8011014 <vPortExitCritical>

	return xReturn;
 800f554:	68fb      	ldr	r3, [r7, #12]
}
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
	...

0800f560 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f56a:	2300      	movs	r3, #0
 800f56c:	60fb      	str	r3, [r7, #12]
 800f56e:	e014      	b.n	800f59a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f570:	4a0f      	ldr	r2, [pc, #60]	; (800f5b0 <vQueueAddToRegistry+0x50>)
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d10b      	bne.n	800f594 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f57c:	490c      	ldr	r1, [pc, #48]	; (800f5b0 <vQueueAddToRegistry+0x50>)
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	683a      	ldr	r2, [r7, #0]
 800f582:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f586:	4a0a      	ldr	r2, [pc, #40]	; (800f5b0 <vQueueAddToRegistry+0x50>)
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	00db      	lsls	r3, r3, #3
 800f58c:	4413      	add	r3, r2
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f592:	e006      	b.n	800f5a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	3301      	adds	r3, #1
 800f598:	60fb      	str	r3, [r7, #12]
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2b07      	cmp	r3, #7
 800f59e:	d9e7      	bls.n	800f570 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f5a0:	bf00      	nop
 800f5a2:	bf00      	nop
 800f5a4:	3714      	adds	r7, #20
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	20000f8c 	.word	0x20000f8c

0800f5b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5bc:	2300      	movs	r3, #0
 800f5be:	60fb      	str	r3, [r7, #12]
 800f5c0:	e016      	b.n	800f5f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f5c2:	4a10      	ldr	r2, [pc, #64]	; (800f604 <vQueueUnregisterQueue+0x50>)
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	00db      	lsls	r3, r3, #3
 800f5c8:	4413      	add	r3, r2
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d10b      	bne.n	800f5ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f5d2:	4a0c      	ldr	r2, [pc, #48]	; (800f604 <vQueueUnregisterQueue+0x50>)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f5dc:	4a09      	ldr	r2, [pc, #36]	; (800f604 <vQueueUnregisterQueue+0x50>)
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	00db      	lsls	r3, r3, #3
 800f5e2:	4413      	add	r3, r2
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	605a      	str	r2, [r3, #4]
				break;
 800f5e8:	e006      	b.n	800f5f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	60fb      	str	r3, [r7, #12]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2b07      	cmp	r3, #7
 800f5f4:	d9e5      	bls.n	800f5c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f5f6:	bf00      	nop
 800f5f8:	bf00      	nop
 800f5fa:	3714      	adds	r7, #20
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr
 800f604:	20000f8c 	.word	0x20000f8c

0800f608 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b086      	sub	sp, #24
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f618:	f001 fccc 	bl	8010fb4 <vPortEnterCritical>
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f622:	b25b      	sxtb	r3, r3
 800f624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f628:	d103      	bne.n	800f632 <vQueueWaitForMessageRestricted+0x2a>
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	2200      	movs	r2, #0
 800f62e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f638:	b25b      	sxtb	r3, r3
 800f63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f63e:	d103      	bne.n	800f648 <vQueueWaitForMessageRestricted+0x40>
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	2200      	movs	r2, #0
 800f644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f648:	f001 fce4 	bl	8011014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f650:	2b00      	cmp	r3, #0
 800f652:	d106      	bne.n	800f662 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	3324      	adds	r3, #36	; 0x24
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	68b9      	ldr	r1, [r7, #8]
 800f65c:	4618      	mov	r0, r3
 800f65e:	f000 fc61 	bl	800ff24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f662:	6978      	ldr	r0, [r7, #20]
 800f664:	f7ff fefb 	bl	800f45e <prvUnlockQueue>
	}
 800f668:	bf00      	nop
 800f66a:	3718      	adds	r7, #24
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f670:	b580      	push	{r7, lr}
 800f672:	b08e      	sub	sp, #56	; 0x38
 800f674:	af04      	add	r7, sp, #16
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	607a      	str	r2, [r7, #4]
 800f67c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f680:	2b00      	cmp	r3, #0
 800f682:	d10a      	bne.n	800f69a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f688:	f383 8811 	msr	BASEPRI, r3
 800f68c:	f3bf 8f6f 	isb	sy
 800f690:	f3bf 8f4f 	dsb	sy
 800f694:	623b      	str	r3, [r7, #32]
}
 800f696:	bf00      	nop
 800f698:	e7fe      	b.n	800f698 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d10a      	bne.n	800f6b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800f6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a4:	f383 8811 	msr	BASEPRI, r3
 800f6a8:	f3bf 8f6f 	isb	sy
 800f6ac:	f3bf 8f4f 	dsb	sy
 800f6b0:	61fb      	str	r3, [r7, #28]
}
 800f6b2:	bf00      	nop
 800f6b4:	e7fe      	b.n	800f6b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f6b6:	23bc      	movs	r3, #188	; 0xbc
 800f6b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	2bbc      	cmp	r3, #188	; 0xbc
 800f6be:	d00a      	beq.n	800f6d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800f6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c4:	f383 8811 	msr	BASEPRI, r3
 800f6c8:	f3bf 8f6f 	isb	sy
 800f6cc:	f3bf 8f4f 	dsb	sy
 800f6d0:	61bb      	str	r3, [r7, #24]
}
 800f6d2:	bf00      	nop
 800f6d4:	e7fe      	b.n	800f6d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f6d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d01e      	beq.n	800f71c <xTaskCreateStatic+0xac>
 800f6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d01b      	beq.n	800f71c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f0:	2202      	movs	r2, #2
 800f6f2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	9303      	str	r3, [sp, #12]
 800f6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fc:	9302      	str	r3, [sp, #8]
 800f6fe:	f107 0314 	add.w	r3, r7, #20
 800f702:	9301      	str	r3, [sp, #4]
 800f704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f706:	9300      	str	r3, [sp, #0]
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	68b9      	ldr	r1, [r7, #8]
 800f70e:	68f8      	ldr	r0, [r7, #12]
 800f710:	f000 f850 	bl	800f7b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f716:	f000 f8f3 	bl	800f900 <prvAddNewTaskToReadyList>
 800f71a:	e001      	b.n	800f720 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f71c:	2300      	movs	r3, #0
 800f71e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f720:	697b      	ldr	r3, [r7, #20]
	}
 800f722:	4618      	mov	r0, r3
 800f724:	3728      	adds	r7, #40	; 0x28
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f72a:	b580      	push	{r7, lr}
 800f72c:	b08c      	sub	sp, #48	; 0x30
 800f72e:	af04      	add	r7, sp, #16
 800f730:	60f8      	str	r0, [r7, #12]
 800f732:	60b9      	str	r1, [r7, #8]
 800f734:	603b      	str	r3, [r7, #0]
 800f736:	4613      	mov	r3, r2
 800f738:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f73a:	88fb      	ldrh	r3, [r7, #6]
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	4618      	mov	r0, r3
 800f740:	f001 fd5a 	bl	80111f8 <pvPortMalloc>
 800f744:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d00e      	beq.n	800f76a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f74c:	20bc      	movs	r0, #188	; 0xbc
 800f74e:	f001 fd53 	bl	80111f8 <pvPortMalloc>
 800f752:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d003      	beq.n	800f762 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	697a      	ldr	r2, [r7, #20]
 800f75e:	631a      	str	r2, [r3, #48]	; 0x30
 800f760:	e005      	b.n	800f76e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f762:	6978      	ldr	r0, [r7, #20]
 800f764:	f001 fe14 	bl	8011390 <vPortFree>
 800f768:	e001      	b.n	800f76e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f76a:	2300      	movs	r3, #0
 800f76c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d017      	beq.n	800f7a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	2200      	movs	r2, #0
 800f778:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f77c:	88fa      	ldrh	r2, [r7, #6]
 800f77e:	2300      	movs	r3, #0
 800f780:	9303      	str	r3, [sp, #12]
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	9302      	str	r3, [sp, #8]
 800f786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f788:	9301      	str	r3, [sp, #4]
 800f78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	68b9      	ldr	r1, [r7, #8]
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f000 f80e 	bl	800f7b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f798:	69f8      	ldr	r0, [r7, #28]
 800f79a:	f000 f8b1 	bl	800f900 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f79e:	2301      	movs	r3, #1
 800f7a0:	61bb      	str	r3, [r7, #24]
 800f7a2:	e002      	b.n	800f7aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f7aa:	69bb      	ldr	r3, [r7, #24]
	}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3720      	adds	r7, #32
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b088      	sub	sp, #32
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	60f8      	str	r0, [r7, #12]
 800f7bc:	60b9      	str	r1, [r7, #8]
 800f7be:	607a      	str	r2, [r7, #4]
 800f7c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	009b      	lsls	r3, r3, #2
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	21a5      	movs	r1, #165	; 0xa5
 800f7ce:	f01a f907 	bl	80299e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7d6:	6879      	ldr	r1, [r7, #4]
 800f7d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f7dc:	440b      	add	r3, r1
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	4413      	add	r3, r2
 800f7e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f7e4:	69bb      	ldr	r3, [r7, #24]
 800f7e6:	f023 0307 	bic.w	r3, r3, #7
 800f7ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f7ec:	69bb      	ldr	r3, [r7, #24]
 800f7ee:	f003 0307 	and.w	r3, r3, #7
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00a      	beq.n	800f80c <prvInitialiseNewTask+0x58>
	__asm volatile
 800f7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7fa:	f383 8811 	msr	BASEPRI, r3
 800f7fe:	f3bf 8f6f 	isb	sy
 800f802:	f3bf 8f4f 	dsb	sy
 800f806:	617b      	str	r3, [r7, #20]
}
 800f808:	bf00      	nop
 800f80a:	e7fe      	b.n	800f80a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d01f      	beq.n	800f852 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f812:	2300      	movs	r3, #0
 800f814:	61fb      	str	r3, [r7, #28]
 800f816:	e012      	b.n	800f83e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	4413      	add	r3, r2
 800f81e:	7819      	ldrb	r1, [r3, #0]
 800f820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	4413      	add	r3, r2
 800f826:	3334      	adds	r3, #52	; 0x34
 800f828:	460a      	mov	r2, r1
 800f82a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f82c:	68ba      	ldr	r2, [r7, #8]
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	4413      	add	r3, r2
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d006      	beq.n	800f846 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f838:	69fb      	ldr	r3, [r7, #28]
 800f83a:	3301      	adds	r3, #1
 800f83c:	61fb      	str	r3, [r7, #28]
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	2b0f      	cmp	r3, #15
 800f842:	d9e9      	bls.n	800f818 <prvInitialiseNewTask+0x64>
 800f844:	e000      	b.n	800f848 <prvInitialiseNewTask+0x94>
			{
				break;
 800f846:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84a:	2200      	movs	r2, #0
 800f84c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f850:	e003      	b.n	800f85a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f854:	2200      	movs	r2, #0
 800f856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85c:	2b37      	cmp	r3, #55	; 0x37
 800f85e:	d901      	bls.n	800f864 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f860:	2337      	movs	r3, #55	; 0x37
 800f862:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f868:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f86e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f872:	2200      	movs	r2, #0
 800f874:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f878:	3304      	adds	r3, #4
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fe fe56 	bl	800e52c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f882:	3318      	adds	r3, #24
 800f884:	4618      	mov	r0, r3
 800f886:	f7fe fe51 	bl	800e52c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f88e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f892:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f898:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f89e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b2:	3354      	adds	r3, #84	; 0x54
 800f8b4:	2260      	movs	r2, #96	; 0x60
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f01a f891 	bl	80299e0 <memset>
 800f8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c0:	4a0c      	ldr	r2, [pc, #48]	; (800f8f4 <prvInitialiseNewTask+0x140>)
 800f8c2:	659a      	str	r2, [r3, #88]	; 0x58
 800f8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c6:	4a0c      	ldr	r2, [pc, #48]	; (800f8f8 <prvInitialiseNewTask+0x144>)
 800f8c8:	65da      	str	r2, [r3, #92]	; 0x5c
 800f8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8cc:	4a0b      	ldr	r2, [pc, #44]	; (800f8fc <prvInitialiseNewTask+0x148>)
 800f8ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f8d0:	683a      	ldr	r2, [r7, #0]
 800f8d2:	68f9      	ldr	r1, [r7, #12]
 800f8d4:	69b8      	ldr	r0, [r7, #24]
 800f8d6:	f001 fa3f 	bl	8010d58 <pxPortInitialiseStack>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d002      	beq.n	800f8ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8ec:	bf00      	nop
 800f8ee:	3720      	adds	r7, #32
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	0802ea9c 	.word	0x0802ea9c
 800f8f8:	0802eabc 	.word	0x0802eabc
 800f8fc:	0802ea7c 	.word	0x0802ea7c

0800f900 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f908:	f001 fb54 	bl	8010fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f90c:	4b2d      	ldr	r3, [pc, #180]	; (800f9c4 <prvAddNewTaskToReadyList+0xc4>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	3301      	adds	r3, #1
 800f912:	4a2c      	ldr	r2, [pc, #176]	; (800f9c4 <prvAddNewTaskToReadyList+0xc4>)
 800f914:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f916:	4b2c      	ldr	r3, [pc, #176]	; (800f9c8 <prvAddNewTaskToReadyList+0xc8>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d109      	bne.n	800f932 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f91e:	4a2a      	ldr	r2, [pc, #168]	; (800f9c8 <prvAddNewTaskToReadyList+0xc8>)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f924:	4b27      	ldr	r3, [pc, #156]	; (800f9c4 <prvAddNewTaskToReadyList+0xc4>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2b01      	cmp	r3, #1
 800f92a:	d110      	bne.n	800f94e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f92c:	f000 fc26 	bl	801017c <prvInitialiseTaskLists>
 800f930:	e00d      	b.n	800f94e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f932:	4b26      	ldr	r3, [pc, #152]	; (800f9cc <prvAddNewTaskToReadyList+0xcc>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d109      	bne.n	800f94e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f93a:	4b23      	ldr	r3, [pc, #140]	; (800f9c8 <prvAddNewTaskToReadyList+0xc8>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f944:	429a      	cmp	r2, r3
 800f946:	d802      	bhi.n	800f94e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f948:	4a1f      	ldr	r2, [pc, #124]	; (800f9c8 <prvAddNewTaskToReadyList+0xc8>)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f94e:	4b20      	ldr	r3, [pc, #128]	; (800f9d0 <prvAddNewTaskToReadyList+0xd0>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	3301      	adds	r3, #1
 800f954:	4a1e      	ldr	r2, [pc, #120]	; (800f9d0 <prvAddNewTaskToReadyList+0xd0>)
 800f956:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f958:	4b1d      	ldr	r3, [pc, #116]	; (800f9d0 <prvAddNewTaskToReadyList+0xd0>)
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f964:	4b1b      	ldr	r3, [pc, #108]	; (800f9d4 <prvAddNewTaskToReadyList+0xd4>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d903      	bls.n	800f974 <prvAddNewTaskToReadyList+0x74>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f970:	4a18      	ldr	r2, [pc, #96]	; (800f9d4 <prvAddNewTaskToReadyList+0xd4>)
 800f972:	6013      	str	r3, [r2, #0]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f978:	4613      	mov	r3, r2
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	4413      	add	r3, r2
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	4a15      	ldr	r2, [pc, #84]	; (800f9d8 <prvAddNewTaskToReadyList+0xd8>)
 800f982:	441a      	add	r2, r3
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	3304      	adds	r3, #4
 800f988:	4619      	mov	r1, r3
 800f98a:	4610      	mov	r0, r2
 800f98c:	f7fe fddb 	bl	800e546 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f990:	f001 fb40 	bl	8011014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f994:	4b0d      	ldr	r3, [pc, #52]	; (800f9cc <prvAddNewTaskToReadyList+0xcc>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00e      	beq.n	800f9ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f99c:	4b0a      	ldr	r3, [pc, #40]	; (800f9c8 <prvAddNewTaskToReadyList+0xc8>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d207      	bcs.n	800f9ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f9aa:	4b0c      	ldr	r3, [pc, #48]	; (800f9dc <prvAddNewTaskToReadyList+0xdc>)
 800f9ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9b0:	601a      	str	r2, [r3, #0]
 800f9b2:	f3bf 8f4f 	dsb	sy
 800f9b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9ba:	bf00      	nop
 800f9bc:	3708      	adds	r7, #8
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	200014a0 	.word	0x200014a0
 800f9c8:	20000fcc 	.word	0x20000fcc
 800f9cc:	200014ac 	.word	0x200014ac
 800f9d0:	200014bc 	.word	0x200014bc
 800f9d4:	200014a8 	.word	0x200014a8
 800f9d8:	20000fd0 	.word	0x20000fd0
 800f9dc:	e000ed04 	.word	0xe000ed04

0800f9e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d017      	beq.n	800fa22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f9f2:	4b13      	ldr	r3, [pc, #76]	; (800fa40 <vTaskDelay+0x60>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d00a      	beq.n	800fa10 <vTaskDelay+0x30>
	__asm volatile
 800f9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fe:	f383 8811 	msr	BASEPRI, r3
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	60bb      	str	r3, [r7, #8]
}
 800fa0c:	bf00      	nop
 800fa0e:	e7fe      	b.n	800fa0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fa10:	f000 f88a 	bl	800fb28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa14:	2100      	movs	r1, #0
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f000 fdfc 	bl	8010614 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa1c:	f000 f892 	bl	800fb44 <xTaskResumeAll>
 800fa20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d107      	bne.n	800fa38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fa28:	4b06      	ldr	r3, [pc, #24]	; (800fa44 <vTaskDelay+0x64>)
 800fa2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa2e:	601a      	str	r2, [r3, #0]
 800fa30:	f3bf 8f4f 	dsb	sy
 800fa34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa38:	bf00      	nop
 800fa3a:	3710      	adds	r7, #16
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	200014c8 	.word	0x200014c8
 800fa44:	e000ed04 	.word	0xe000ed04

0800fa48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b08a      	sub	sp, #40	; 0x28
 800fa4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa52:	2300      	movs	r3, #0
 800fa54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa56:	463a      	mov	r2, r7
 800fa58:	1d39      	adds	r1, r7, #4
 800fa5a:	f107 0308 	add.w	r3, r7, #8
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7fe fd10 	bl	800e484 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa64:	6839      	ldr	r1, [r7, #0]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	68ba      	ldr	r2, [r7, #8]
 800fa6a:	9202      	str	r2, [sp, #8]
 800fa6c:	9301      	str	r3, [sp, #4]
 800fa6e:	2300      	movs	r3, #0
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	2300      	movs	r3, #0
 800fa74:	460a      	mov	r2, r1
 800fa76:	4924      	ldr	r1, [pc, #144]	; (800fb08 <vTaskStartScheduler+0xc0>)
 800fa78:	4824      	ldr	r0, [pc, #144]	; (800fb0c <vTaskStartScheduler+0xc4>)
 800fa7a:	f7ff fdf9 	bl	800f670 <xTaskCreateStatic>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	4a23      	ldr	r2, [pc, #140]	; (800fb10 <vTaskStartScheduler+0xc8>)
 800fa82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa84:	4b22      	ldr	r3, [pc, #136]	; (800fb10 <vTaskStartScheduler+0xc8>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d002      	beq.n	800fa92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	617b      	str	r3, [r7, #20]
 800fa90:	e001      	b.n	800fa96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa92:	2300      	movs	r3, #0
 800fa94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d102      	bne.n	800faa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa9c:	f000 fe0e 	bl	80106bc <xTimerCreateTimerTask>
 800faa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d11b      	bne.n	800fae0 <vTaskStartScheduler+0x98>
	__asm volatile
 800faa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faac:	f383 8811 	msr	BASEPRI, r3
 800fab0:	f3bf 8f6f 	isb	sy
 800fab4:	f3bf 8f4f 	dsb	sy
 800fab8:	613b      	str	r3, [r7, #16]
}
 800faba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fabc:	4b15      	ldr	r3, [pc, #84]	; (800fb14 <vTaskStartScheduler+0xcc>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	3354      	adds	r3, #84	; 0x54
 800fac2:	4a15      	ldr	r2, [pc, #84]	; (800fb18 <vTaskStartScheduler+0xd0>)
 800fac4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fac6:	4b15      	ldr	r3, [pc, #84]	; (800fb1c <vTaskStartScheduler+0xd4>)
 800fac8:	f04f 32ff 	mov.w	r2, #4294967295
 800facc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800face:	4b14      	ldr	r3, [pc, #80]	; (800fb20 <vTaskStartScheduler+0xd8>)
 800fad0:	2201      	movs	r2, #1
 800fad2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fad4:	4b13      	ldr	r3, [pc, #76]	; (800fb24 <vTaskStartScheduler+0xdc>)
 800fad6:	2200      	movs	r2, #0
 800fad8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fada:	f001 f9c9 	bl	8010e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fade:	e00e      	b.n	800fafe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fae6:	d10a      	bne.n	800fafe <vTaskStartScheduler+0xb6>
	__asm volatile
 800fae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faec:	f383 8811 	msr	BASEPRI, r3
 800faf0:	f3bf 8f6f 	isb	sy
 800faf4:	f3bf 8f4f 	dsb	sy
 800faf8:	60fb      	str	r3, [r7, #12]
}
 800fafa:	bf00      	nop
 800fafc:	e7fe      	b.n	800fafc <vTaskStartScheduler+0xb4>
}
 800fafe:	bf00      	nop
 800fb00:	3718      	adds	r7, #24
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
 800fb06:	bf00      	nop
 800fb08:	0802a958 	.word	0x0802a958
 800fb0c:	0801014d 	.word	0x0801014d
 800fb10:	200014c4 	.word	0x200014c4
 800fb14:	20000fcc 	.word	0x20000fcc
 800fb18:	200001c0 	.word	0x200001c0
 800fb1c:	200014c0 	.word	0x200014c0
 800fb20:	200014ac 	.word	0x200014ac
 800fb24:	200014a4 	.word	0x200014a4

0800fb28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb28:	b480      	push	{r7}
 800fb2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fb2c:	4b04      	ldr	r3, [pc, #16]	; (800fb40 <vTaskSuspendAll+0x18>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	3301      	adds	r3, #1
 800fb32:	4a03      	ldr	r2, [pc, #12]	; (800fb40 <vTaskSuspendAll+0x18>)
 800fb34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fb36:	bf00      	nop
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr
 800fb40:	200014c8 	.word	0x200014c8

0800fb44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb52:	4b42      	ldr	r3, [pc, #264]	; (800fc5c <xTaskResumeAll+0x118>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10a      	bne.n	800fb70 <xTaskResumeAll+0x2c>
	__asm volatile
 800fb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5e:	f383 8811 	msr	BASEPRI, r3
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	603b      	str	r3, [r7, #0]
}
 800fb6c:	bf00      	nop
 800fb6e:	e7fe      	b.n	800fb6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fb70:	f001 fa20 	bl	8010fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fb74:	4b39      	ldr	r3, [pc, #228]	; (800fc5c <xTaskResumeAll+0x118>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	4a38      	ldr	r2, [pc, #224]	; (800fc5c <xTaskResumeAll+0x118>)
 800fb7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb7e:	4b37      	ldr	r3, [pc, #220]	; (800fc5c <xTaskResumeAll+0x118>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d162      	bne.n	800fc4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb86:	4b36      	ldr	r3, [pc, #216]	; (800fc60 <xTaskResumeAll+0x11c>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d05e      	beq.n	800fc4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb8e:	e02f      	b.n	800fbf0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb90:	4b34      	ldr	r3, [pc, #208]	; (800fc64 <xTaskResumeAll+0x120>)
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	68db      	ldr	r3, [r3, #12]
 800fb96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	3318      	adds	r3, #24
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe fd2f 	bl	800e600 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	3304      	adds	r3, #4
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fe fd2a 	bl	800e600 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb0:	4b2d      	ldr	r3, [pc, #180]	; (800fc68 <xTaskResumeAll+0x124>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d903      	bls.n	800fbc0 <xTaskResumeAll+0x7c>
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbbc:	4a2a      	ldr	r2, [pc, #168]	; (800fc68 <xTaskResumeAll+0x124>)
 800fbbe:	6013      	str	r3, [r2, #0]
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbc4:	4613      	mov	r3, r2
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	4413      	add	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4a27      	ldr	r2, [pc, #156]	; (800fc6c <xTaskResumeAll+0x128>)
 800fbce:	441a      	add	r2, r3
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	4610      	mov	r0, r2
 800fbd8:	f7fe fcb5 	bl	800e546 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbe0:	4b23      	ldr	r3, [pc, #140]	; (800fc70 <xTaskResumeAll+0x12c>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d302      	bcc.n	800fbf0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fbea:	4b22      	ldr	r3, [pc, #136]	; (800fc74 <xTaskResumeAll+0x130>)
 800fbec:	2201      	movs	r2, #1
 800fbee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbf0:	4b1c      	ldr	r3, [pc, #112]	; (800fc64 <xTaskResumeAll+0x120>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d1cb      	bne.n	800fb90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d001      	beq.n	800fc02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fbfe:	f000 fb5f 	bl	80102c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fc02:	4b1d      	ldr	r3, [pc, #116]	; (800fc78 <xTaskResumeAll+0x134>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d010      	beq.n	800fc30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fc0e:	f000 f847 	bl	800fca0 <xTaskIncrementTick>
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d002      	beq.n	800fc1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fc18:	4b16      	ldr	r3, [pc, #88]	; (800fc74 <xTaskResumeAll+0x130>)
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	3b01      	subs	r3, #1
 800fc22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1f1      	bne.n	800fc0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fc2a:	4b13      	ldr	r3, [pc, #76]	; (800fc78 <xTaskResumeAll+0x134>)
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc30:	4b10      	ldr	r3, [pc, #64]	; (800fc74 <xTaskResumeAll+0x130>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d009      	beq.n	800fc4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fc38:	2301      	movs	r3, #1
 800fc3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fc3c:	4b0f      	ldr	r3, [pc, #60]	; (800fc7c <xTaskResumeAll+0x138>)
 800fc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc42:	601a      	str	r2, [r3, #0]
 800fc44:	f3bf 8f4f 	dsb	sy
 800fc48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc4c:	f001 f9e2 	bl	8011014 <vPortExitCritical>

	return xAlreadyYielded;
 800fc50:	68bb      	ldr	r3, [r7, #8]
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	200014c8 	.word	0x200014c8
 800fc60:	200014a0 	.word	0x200014a0
 800fc64:	20001460 	.word	0x20001460
 800fc68:	200014a8 	.word	0x200014a8
 800fc6c:	20000fd0 	.word	0x20000fd0
 800fc70:	20000fcc 	.word	0x20000fcc
 800fc74:	200014b4 	.word	0x200014b4
 800fc78:	200014b0 	.word	0x200014b0
 800fc7c:	e000ed04 	.word	0xe000ed04

0800fc80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fc80:	b480      	push	{r7}
 800fc82:	b083      	sub	sp, #12
 800fc84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc86:	4b05      	ldr	r3, [pc, #20]	; (800fc9c <xTaskGetTickCount+0x1c>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc8c:	687b      	ldr	r3, [r7, #4]
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	370c      	adds	r7, #12
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop
 800fc9c:	200014a4 	.word	0x200014a4

0800fca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b086      	sub	sp, #24
 800fca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fca6:	2300      	movs	r3, #0
 800fca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcaa:	4b4f      	ldr	r3, [pc, #316]	; (800fde8 <xTaskIncrementTick+0x148>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	f040 808f 	bne.w	800fdd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fcb4:	4b4d      	ldr	r3, [pc, #308]	; (800fdec <xTaskIncrementTick+0x14c>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fcbc:	4a4b      	ldr	r2, [pc, #300]	; (800fdec <xTaskIncrementTick+0x14c>)
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d120      	bne.n	800fd0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fcc8:	4b49      	ldr	r3, [pc, #292]	; (800fdf0 <xTaskIncrementTick+0x150>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d00a      	beq.n	800fce8 <xTaskIncrementTick+0x48>
	__asm volatile
 800fcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd6:	f383 8811 	msr	BASEPRI, r3
 800fcda:	f3bf 8f6f 	isb	sy
 800fcde:	f3bf 8f4f 	dsb	sy
 800fce2:	603b      	str	r3, [r7, #0]
}
 800fce4:	bf00      	nop
 800fce6:	e7fe      	b.n	800fce6 <xTaskIncrementTick+0x46>
 800fce8:	4b41      	ldr	r3, [pc, #260]	; (800fdf0 <xTaskIncrementTick+0x150>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	60fb      	str	r3, [r7, #12]
 800fcee:	4b41      	ldr	r3, [pc, #260]	; (800fdf4 <xTaskIncrementTick+0x154>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4a3f      	ldr	r2, [pc, #252]	; (800fdf0 <xTaskIncrementTick+0x150>)
 800fcf4:	6013      	str	r3, [r2, #0]
 800fcf6:	4a3f      	ldr	r2, [pc, #252]	; (800fdf4 <xTaskIncrementTick+0x154>)
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	6013      	str	r3, [r2, #0]
 800fcfc:	4b3e      	ldr	r3, [pc, #248]	; (800fdf8 <xTaskIncrementTick+0x158>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	3301      	adds	r3, #1
 800fd02:	4a3d      	ldr	r2, [pc, #244]	; (800fdf8 <xTaskIncrementTick+0x158>)
 800fd04:	6013      	str	r3, [r2, #0]
 800fd06:	f000 fadb 	bl	80102c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd0a:	4b3c      	ldr	r3, [pc, #240]	; (800fdfc <xTaskIncrementTick+0x15c>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	693a      	ldr	r2, [r7, #16]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d349      	bcc.n	800fda8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd14:	4b36      	ldr	r3, [pc, #216]	; (800fdf0 <xTaskIncrementTick+0x150>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d104      	bne.n	800fd28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd1e:	4b37      	ldr	r3, [pc, #220]	; (800fdfc <xTaskIncrementTick+0x15c>)
 800fd20:	f04f 32ff 	mov.w	r2, #4294967295
 800fd24:	601a      	str	r2, [r3, #0]
					break;
 800fd26:	e03f      	b.n	800fda8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd28:	4b31      	ldr	r3, [pc, #196]	; (800fdf0 <xTaskIncrementTick+0x150>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	68db      	ldr	r3, [r3, #12]
 800fd30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd38:	693a      	ldr	r2, [r7, #16]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d203      	bcs.n	800fd48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd40:	4a2e      	ldr	r2, [pc, #184]	; (800fdfc <xTaskIncrementTick+0x15c>)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd46:	e02f      	b.n	800fda8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7fe fc57 	bl	800e600 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d004      	beq.n	800fd64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	3318      	adds	r3, #24
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7fe fc4e 	bl	800e600 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd68:	4b25      	ldr	r3, [pc, #148]	; (800fe00 <xTaskIncrementTick+0x160>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d903      	bls.n	800fd78 <xTaskIncrementTick+0xd8>
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd74:	4a22      	ldr	r2, [pc, #136]	; (800fe00 <xTaskIncrementTick+0x160>)
 800fd76:	6013      	str	r3, [r2, #0]
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd7c:	4613      	mov	r3, r2
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	4413      	add	r3, r2
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	4a1f      	ldr	r2, [pc, #124]	; (800fe04 <xTaskIncrementTick+0x164>)
 800fd86:	441a      	add	r2, r3
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	4610      	mov	r0, r2
 800fd90:	f7fe fbd9 	bl	800e546 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd98:	4b1b      	ldr	r3, [pc, #108]	; (800fe08 <xTaskIncrementTick+0x168>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d3b8      	bcc.n	800fd14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fda2:	2301      	movs	r3, #1
 800fda4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fda6:	e7b5      	b.n	800fd14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fda8:	4b17      	ldr	r3, [pc, #92]	; (800fe08 <xTaskIncrementTick+0x168>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdae:	4915      	ldr	r1, [pc, #84]	; (800fe04 <xTaskIncrementTick+0x164>)
 800fdb0:	4613      	mov	r3, r2
 800fdb2:	009b      	lsls	r3, r3, #2
 800fdb4:	4413      	add	r3, r2
 800fdb6:	009b      	lsls	r3, r3, #2
 800fdb8:	440b      	add	r3, r1
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d901      	bls.n	800fdc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fdc4:	4b11      	ldr	r3, [pc, #68]	; (800fe0c <xTaskIncrementTick+0x16c>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d007      	beq.n	800fddc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	617b      	str	r3, [r7, #20]
 800fdd0:	e004      	b.n	800fddc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fdd2:	4b0f      	ldr	r3, [pc, #60]	; (800fe10 <xTaskIncrementTick+0x170>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	4a0d      	ldr	r2, [pc, #52]	; (800fe10 <xTaskIncrementTick+0x170>)
 800fdda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fddc:	697b      	ldr	r3, [r7, #20]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3718      	adds	r7, #24
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	200014c8 	.word	0x200014c8
 800fdec:	200014a4 	.word	0x200014a4
 800fdf0:	20001458 	.word	0x20001458
 800fdf4:	2000145c 	.word	0x2000145c
 800fdf8:	200014b8 	.word	0x200014b8
 800fdfc:	200014c0 	.word	0x200014c0
 800fe00:	200014a8 	.word	0x200014a8
 800fe04:	20000fd0 	.word	0x20000fd0
 800fe08:	20000fcc 	.word	0x20000fcc
 800fe0c:	200014b4 	.word	0x200014b4
 800fe10:	200014b0 	.word	0x200014b0

0800fe14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe14:	b480      	push	{r7}
 800fe16:	b085      	sub	sp, #20
 800fe18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe1a:	4b2a      	ldr	r3, [pc, #168]	; (800fec4 <vTaskSwitchContext+0xb0>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d003      	beq.n	800fe2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe22:	4b29      	ldr	r3, [pc, #164]	; (800fec8 <vTaskSwitchContext+0xb4>)
 800fe24:	2201      	movs	r2, #1
 800fe26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe28:	e046      	b.n	800feb8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fe2a:	4b27      	ldr	r3, [pc, #156]	; (800fec8 <vTaskSwitchContext+0xb4>)
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe30:	4b26      	ldr	r3, [pc, #152]	; (800fecc <vTaskSwitchContext+0xb8>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	60fb      	str	r3, [r7, #12]
 800fe36:	e010      	b.n	800fe5a <vTaskSwitchContext+0x46>
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d10a      	bne.n	800fe54 <vTaskSwitchContext+0x40>
	__asm volatile
 800fe3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe42:	f383 8811 	msr	BASEPRI, r3
 800fe46:	f3bf 8f6f 	isb	sy
 800fe4a:	f3bf 8f4f 	dsb	sy
 800fe4e:	607b      	str	r3, [r7, #4]
}
 800fe50:	bf00      	nop
 800fe52:	e7fe      	b.n	800fe52 <vTaskSwitchContext+0x3e>
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	3b01      	subs	r3, #1
 800fe58:	60fb      	str	r3, [r7, #12]
 800fe5a:	491d      	ldr	r1, [pc, #116]	; (800fed0 <vTaskSwitchContext+0xbc>)
 800fe5c:	68fa      	ldr	r2, [r7, #12]
 800fe5e:	4613      	mov	r3, r2
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	4413      	add	r3, r2
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	440b      	add	r3, r1
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d0e4      	beq.n	800fe38 <vTaskSwitchContext+0x24>
 800fe6e:	68fa      	ldr	r2, [r7, #12]
 800fe70:	4613      	mov	r3, r2
 800fe72:	009b      	lsls	r3, r3, #2
 800fe74:	4413      	add	r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	4a15      	ldr	r2, [pc, #84]	; (800fed0 <vTaskSwitchContext+0xbc>)
 800fe7a:	4413      	add	r3, r2
 800fe7c:	60bb      	str	r3, [r7, #8]
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	685a      	ldr	r2, [r3, #4]
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	605a      	str	r2, [r3, #4]
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	685a      	ldr	r2, [r3, #4]
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	3308      	adds	r3, #8
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d104      	bne.n	800fe9e <vTaskSwitchContext+0x8a>
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	685a      	ldr	r2, [r3, #4]
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	605a      	str	r2, [r3, #4]
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	4a0b      	ldr	r2, [pc, #44]	; (800fed4 <vTaskSwitchContext+0xc0>)
 800fea6:	6013      	str	r3, [r2, #0]
 800fea8:	4a08      	ldr	r2, [pc, #32]	; (800fecc <vTaskSwitchContext+0xb8>)
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800feae:	4b09      	ldr	r3, [pc, #36]	; (800fed4 <vTaskSwitchContext+0xc0>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	3354      	adds	r3, #84	; 0x54
 800feb4:	4a08      	ldr	r2, [pc, #32]	; (800fed8 <vTaskSwitchContext+0xc4>)
 800feb6:	6013      	str	r3, [r2, #0]
}
 800feb8:	bf00      	nop
 800feba:	3714      	adds	r7, #20
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr
 800fec4:	200014c8 	.word	0x200014c8
 800fec8:	200014b4 	.word	0x200014b4
 800fecc:	200014a8 	.word	0x200014a8
 800fed0:	20000fd0 	.word	0x20000fd0
 800fed4:	20000fcc 	.word	0x20000fcc
 800fed8:	200001c0 	.word	0x200001c0

0800fedc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d10a      	bne.n	800ff02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800feec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef0:	f383 8811 	msr	BASEPRI, r3
 800fef4:	f3bf 8f6f 	isb	sy
 800fef8:	f3bf 8f4f 	dsb	sy
 800fefc:	60fb      	str	r3, [r7, #12]
}
 800fefe:	bf00      	nop
 800ff00:	e7fe      	b.n	800ff00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff02:	4b07      	ldr	r3, [pc, #28]	; (800ff20 <vTaskPlaceOnEventList+0x44>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	3318      	adds	r3, #24
 800ff08:	4619      	mov	r1, r3
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f7fe fb3f 	bl	800e58e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff10:	2101      	movs	r1, #1
 800ff12:	6838      	ldr	r0, [r7, #0]
 800ff14:	f000 fb7e 	bl	8010614 <prvAddCurrentTaskToDelayedList>
}
 800ff18:	bf00      	nop
 800ff1a:	3710      	adds	r7, #16
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	20000fcc 	.word	0x20000fcc

0800ff24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b086      	sub	sp, #24
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d10a      	bne.n	800ff4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ff36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3a:	f383 8811 	msr	BASEPRI, r3
 800ff3e:	f3bf 8f6f 	isb	sy
 800ff42:	f3bf 8f4f 	dsb	sy
 800ff46:	617b      	str	r3, [r7, #20]
}
 800ff48:	bf00      	nop
 800ff4a:	e7fe      	b.n	800ff4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff4c:	4b0a      	ldr	r3, [pc, #40]	; (800ff78 <vTaskPlaceOnEventListRestricted+0x54>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	3318      	adds	r3, #24
 800ff52:	4619      	mov	r1, r3
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f7fe faf6 	bl	800e546 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d002      	beq.n	800ff66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ff60:	f04f 33ff 	mov.w	r3, #4294967295
 800ff64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff66:	6879      	ldr	r1, [r7, #4]
 800ff68:	68b8      	ldr	r0, [r7, #8]
 800ff6a:	f000 fb53 	bl	8010614 <prvAddCurrentTaskToDelayedList>
	}
 800ff6e:	bf00      	nop
 800ff70:	3718      	adds	r7, #24
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	20000fcc 	.word	0x20000fcc

0800ff7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b086      	sub	sp, #24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	68db      	ldr	r3, [r3, #12]
 800ff8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d10a      	bne.n	800ffa8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ff92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff96:	f383 8811 	msr	BASEPRI, r3
 800ff9a:	f3bf 8f6f 	isb	sy
 800ff9e:	f3bf 8f4f 	dsb	sy
 800ffa2:	60fb      	str	r3, [r7, #12]
}
 800ffa4:	bf00      	nop
 800ffa6:	e7fe      	b.n	800ffa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	3318      	adds	r3, #24
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fe fb27 	bl	800e600 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffb2:	4b1e      	ldr	r3, [pc, #120]	; (801002c <xTaskRemoveFromEventList+0xb0>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d11d      	bne.n	800fff6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	3304      	adds	r3, #4
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7fe fb1e 	bl	800e600 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc8:	4b19      	ldr	r3, [pc, #100]	; (8010030 <xTaskRemoveFromEventList+0xb4>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d903      	bls.n	800ffd8 <xTaskRemoveFromEventList+0x5c>
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd4:	4a16      	ldr	r2, [pc, #88]	; (8010030 <xTaskRemoveFromEventList+0xb4>)
 800ffd6:	6013      	str	r3, [r2, #0]
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffdc:	4613      	mov	r3, r2
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	4413      	add	r3, r2
 800ffe2:	009b      	lsls	r3, r3, #2
 800ffe4:	4a13      	ldr	r2, [pc, #76]	; (8010034 <xTaskRemoveFromEventList+0xb8>)
 800ffe6:	441a      	add	r2, r3
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	3304      	adds	r3, #4
 800ffec:	4619      	mov	r1, r3
 800ffee:	4610      	mov	r0, r2
 800fff0:	f7fe faa9 	bl	800e546 <vListInsertEnd>
 800fff4:	e005      	b.n	8010002 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	3318      	adds	r3, #24
 800fffa:	4619      	mov	r1, r3
 800fffc:	480e      	ldr	r0, [pc, #56]	; (8010038 <xTaskRemoveFromEventList+0xbc>)
 800fffe:	f7fe faa2 	bl	800e546 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010006:	4b0d      	ldr	r3, [pc, #52]	; (801003c <xTaskRemoveFromEventList+0xc0>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801000c:	429a      	cmp	r2, r3
 801000e:	d905      	bls.n	801001c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010010:	2301      	movs	r3, #1
 8010012:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010014:	4b0a      	ldr	r3, [pc, #40]	; (8010040 <xTaskRemoveFromEventList+0xc4>)
 8010016:	2201      	movs	r2, #1
 8010018:	601a      	str	r2, [r3, #0]
 801001a:	e001      	b.n	8010020 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801001c:	2300      	movs	r3, #0
 801001e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010020:	697b      	ldr	r3, [r7, #20]
}
 8010022:	4618      	mov	r0, r3
 8010024:	3718      	adds	r7, #24
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	200014c8 	.word	0x200014c8
 8010030:	200014a8 	.word	0x200014a8
 8010034:	20000fd0 	.word	0x20000fd0
 8010038:	20001460 	.word	0x20001460
 801003c:	20000fcc 	.word	0x20000fcc
 8010040:	200014b4 	.word	0x200014b4

08010044 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801004c:	4b06      	ldr	r3, [pc, #24]	; (8010068 <vTaskInternalSetTimeOutState+0x24>)
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010054:	4b05      	ldr	r3, [pc, #20]	; (801006c <vTaskInternalSetTimeOutState+0x28>)
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	605a      	str	r2, [r3, #4]
}
 801005c:	bf00      	nop
 801005e:	370c      	adds	r7, #12
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr
 8010068:	200014b8 	.word	0x200014b8
 801006c:	200014a4 	.word	0x200014a4

08010070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b088      	sub	sp, #32
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d10a      	bne.n	8010096 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010084:	f383 8811 	msr	BASEPRI, r3
 8010088:	f3bf 8f6f 	isb	sy
 801008c:	f3bf 8f4f 	dsb	sy
 8010090:	613b      	str	r3, [r7, #16]
}
 8010092:	bf00      	nop
 8010094:	e7fe      	b.n	8010094 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d10a      	bne.n	80100b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801009c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a0:	f383 8811 	msr	BASEPRI, r3
 80100a4:	f3bf 8f6f 	isb	sy
 80100a8:	f3bf 8f4f 	dsb	sy
 80100ac:	60fb      	str	r3, [r7, #12]
}
 80100ae:	bf00      	nop
 80100b0:	e7fe      	b.n	80100b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80100b2:	f000 ff7f 	bl	8010fb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80100b6:	4b1d      	ldr	r3, [pc, #116]	; (801012c <xTaskCheckForTimeOut+0xbc>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	69ba      	ldr	r2, [r7, #24]
 80100c2:	1ad3      	subs	r3, r2, r3
 80100c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ce:	d102      	bne.n	80100d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100d0:	2300      	movs	r3, #0
 80100d2:	61fb      	str	r3, [r7, #28]
 80100d4:	e023      	b.n	801011e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	4b15      	ldr	r3, [pc, #84]	; (8010130 <xTaskCheckForTimeOut+0xc0>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d007      	beq.n	80100f2 <xTaskCheckForTimeOut+0x82>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	69ba      	ldr	r2, [r7, #24]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d302      	bcc.n	80100f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100ec:	2301      	movs	r3, #1
 80100ee:	61fb      	str	r3, [r7, #28]
 80100f0:	e015      	b.n	801011e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	697a      	ldr	r2, [r7, #20]
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d20b      	bcs.n	8010114 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	681a      	ldr	r2, [r3, #0]
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	1ad2      	subs	r2, r2, r3
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7ff ff9b 	bl	8010044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801010e:	2300      	movs	r3, #0
 8010110:	61fb      	str	r3, [r7, #28]
 8010112:	e004      	b.n	801011e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	2200      	movs	r2, #0
 8010118:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801011a:	2301      	movs	r3, #1
 801011c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801011e:	f000 ff79 	bl	8011014 <vPortExitCritical>

	return xReturn;
 8010122:	69fb      	ldr	r3, [r7, #28]
}
 8010124:	4618      	mov	r0, r3
 8010126:	3720      	adds	r7, #32
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}
 801012c:	200014a4 	.word	0x200014a4
 8010130:	200014b8 	.word	0x200014b8

08010134 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010134:	b480      	push	{r7}
 8010136:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010138:	4b03      	ldr	r3, [pc, #12]	; (8010148 <vTaskMissedYield+0x14>)
 801013a:	2201      	movs	r2, #1
 801013c:	601a      	str	r2, [r3, #0]
}
 801013e:	bf00      	nop
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr
 8010148:	200014b4 	.word	0x200014b4

0801014c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010154:	f000 f852 	bl	80101fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010158:	4b06      	ldr	r3, [pc, #24]	; (8010174 <prvIdleTask+0x28>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b01      	cmp	r3, #1
 801015e:	d9f9      	bls.n	8010154 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010160:	4b05      	ldr	r3, [pc, #20]	; (8010178 <prvIdleTask+0x2c>)
 8010162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010166:	601a      	str	r2, [r3, #0]
 8010168:	f3bf 8f4f 	dsb	sy
 801016c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010170:	e7f0      	b.n	8010154 <prvIdleTask+0x8>
 8010172:	bf00      	nop
 8010174:	20000fd0 	.word	0x20000fd0
 8010178:	e000ed04 	.word	0xe000ed04

0801017c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010182:	2300      	movs	r3, #0
 8010184:	607b      	str	r3, [r7, #4]
 8010186:	e00c      	b.n	80101a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	4613      	mov	r3, r2
 801018c:	009b      	lsls	r3, r3, #2
 801018e:	4413      	add	r3, r2
 8010190:	009b      	lsls	r3, r3, #2
 8010192:	4a12      	ldr	r2, [pc, #72]	; (80101dc <prvInitialiseTaskLists+0x60>)
 8010194:	4413      	add	r3, r2
 8010196:	4618      	mov	r0, r3
 8010198:	f7fe f9a8 	bl	800e4ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	3301      	adds	r3, #1
 80101a0:	607b      	str	r3, [r7, #4]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b37      	cmp	r3, #55	; 0x37
 80101a6:	d9ef      	bls.n	8010188 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80101a8:	480d      	ldr	r0, [pc, #52]	; (80101e0 <prvInitialiseTaskLists+0x64>)
 80101aa:	f7fe f99f 	bl	800e4ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80101ae:	480d      	ldr	r0, [pc, #52]	; (80101e4 <prvInitialiseTaskLists+0x68>)
 80101b0:	f7fe f99c 	bl	800e4ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80101b4:	480c      	ldr	r0, [pc, #48]	; (80101e8 <prvInitialiseTaskLists+0x6c>)
 80101b6:	f7fe f999 	bl	800e4ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80101ba:	480c      	ldr	r0, [pc, #48]	; (80101ec <prvInitialiseTaskLists+0x70>)
 80101bc:	f7fe f996 	bl	800e4ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80101c0:	480b      	ldr	r0, [pc, #44]	; (80101f0 <prvInitialiseTaskLists+0x74>)
 80101c2:	f7fe f993 	bl	800e4ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80101c6:	4b0b      	ldr	r3, [pc, #44]	; (80101f4 <prvInitialiseTaskLists+0x78>)
 80101c8:	4a05      	ldr	r2, [pc, #20]	; (80101e0 <prvInitialiseTaskLists+0x64>)
 80101ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101cc:	4b0a      	ldr	r3, [pc, #40]	; (80101f8 <prvInitialiseTaskLists+0x7c>)
 80101ce:	4a05      	ldr	r2, [pc, #20]	; (80101e4 <prvInitialiseTaskLists+0x68>)
 80101d0:	601a      	str	r2, [r3, #0]
}
 80101d2:	bf00      	nop
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	20000fd0 	.word	0x20000fd0
 80101e0:	20001430 	.word	0x20001430
 80101e4:	20001444 	.word	0x20001444
 80101e8:	20001460 	.word	0x20001460
 80101ec:	20001474 	.word	0x20001474
 80101f0:	2000148c 	.word	0x2000148c
 80101f4:	20001458 	.word	0x20001458
 80101f8:	2000145c 	.word	0x2000145c

080101fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010202:	e019      	b.n	8010238 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010204:	f000 fed6 	bl	8010fb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010208:	4b10      	ldr	r3, [pc, #64]	; (801024c <prvCheckTasksWaitingTermination+0x50>)
 801020a:	68db      	ldr	r3, [r3, #12]
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	3304      	adds	r3, #4
 8010214:	4618      	mov	r0, r3
 8010216:	f7fe f9f3 	bl	800e600 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801021a:	4b0d      	ldr	r3, [pc, #52]	; (8010250 <prvCheckTasksWaitingTermination+0x54>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	3b01      	subs	r3, #1
 8010220:	4a0b      	ldr	r2, [pc, #44]	; (8010250 <prvCheckTasksWaitingTermination+0x54>)
 8010222:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010224:	4b0b      	ldr	r3, [pc, #44]	; (8010254 <prvCheckTasksWaitingTermination+0x58>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	3b01      	subs	r3, #1
 801022a:	4a0a      	ldr	r2, [pc, #40]	; (8010254 <prvCheckTasksWaitingTermination+0x58>)
 801022c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801022e:	f000 fef1 	bl	8011014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 f810 	bl	8010258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010238:	4b06      	ldr	r3, [pc, #24]	; (8010254 <prvCheckTasksWaitingTermination+0x58>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d1e1      	bne.n	8010204 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010240:	bf00      	nop
 8010242:	bf00      	nop
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	20001474 	.word	0x20001474
 8010250:	200014a0 	.word	0x200014a0
 8010254:	20001488 	.word	0x20001488

08010258 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	3354      	adds	r3, #84	; 0x54
 8010264:	4618      	mov	r0, r3
 8010266:	f019 ff9f 	bl	802a1a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010270:	2b00      	cmp	r3, #0
 8010272:	d108      	bne.n	8010286 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010278:	4618      	mov	r0, r3
 801027a:	f001 f889 	bl	8011390 <vPortFree>
				vPortFree( pxTCB );
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f001 f886 	bl	8011390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010284:	e018      	b.n	80102b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801028c:	2b01      	cmp	r3, #1
 801028e:	d103      	bne.n	8010298 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f001 f87d 	bl	8011390 <vPortFree>
	}
 8010296:	e00f      	b.n	80102b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801029e:	2b02      	cmp	r3, #2
 80102a0:	d00a      	beq.n	80102b8 <prvDeleteTCB+0x60>
	__asm volatile
 80102a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a6:	f383 8811 	msr	BASEPRI, r3
 80102aa:	f3bf 8f6f 	isb	sy
 80102ae:	f3bf 8f4f 	dsb	sy
 80102b2:	60fb      	str	r3, [r7, #12]
}
 80102b4:	bf00      	nop
 80102b6:	e7fe      	b.n	80102b6 <prvDeleteTCB+0x5e>
	}
 80102b8:	bf00      	nop
 80102ba:	3710      	adds	r7, #16
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102c6:	4b0c      	ldr	r3, [pc, #48]	; (80102f8 <prvResetNextTaskUnblockTime+0x38>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d104      	bne.n	80102da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102d0:	4b0a      	ldr	r3, [pc, #40]	; (80102fc <prvResetNextTaskUnblockTime+0x3c>)
 80102d2:	f04f 32ff 	mov.w	r2, #4294967295
 80102d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102d8:	e008      	b.n	80102ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102da:	4b07      	ldr	r3, [pc, #28]	; (80102f8 <prvResetNextTaskUnblockTime+0x38>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	4a04      	ldr	r2, [pc, #16]	; (80102fc <prvResetNextTaskUnblockTime+0x3c>)
 80102ea:	6013      	str	r3, [r2, #0]
}
 80102ec:	bf00      	nop
 80102ee:	370c      	adds	r7, #12
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr
 80102f8:	20001458 	.word	0x20001458
 80102fc:	200014c0 	.word	0x200014c0

08010300 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010300:	b480      	push	{r7}
 8010302:	b083      	sub	sp, #12
 8010304:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010306:	4b0b      	ldr	r3, [pc, #44]	; (8010334 <xTaskGetSchedulerState+0x34>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d102      	bne.n	8010314 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801030e:	2301      	movs	r3, #1
 8010310:	607b      	str	r3, [r7, #4]
 8010312:	e008      	b.n	8010326 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010314:	4b08      	ldr	r3, [pc, #32]	; (8010338 <xTaskGetSchedulerState+0x38>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d102      	bne.n	8010322 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801031c:	2302      	movs	r3, #2
 801031e:	607b      	str	r3, [r7, #4]
 8010320:	e001      	b.n	8010326 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010322:	2300      	movs	r3, #0
 8010324:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010326:	687b      	ldr	r3, [r7, #4]
	}
 8010328:	4618      	mov	r0, r3
 801032a:	370c      	adds	r7, #12
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr
 8010334:	200014ac 	.word	0x200014ac
 8010338:	200014c8 	.word	0x200014c8

0801033c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801033c:	b580      	push	{r7, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010348:	2300      	movs	r3, #0
 801034a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d051      	beq.n	80103f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010356:	4b2a      	ldr	r3, [pc, #168]	; (8010400 <xTaskPriorityInherit+0xc4>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801035c:	429a      	cmp	r2, r3
 801035e:	d241      	bcs.n	80103e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	699b      	ldr	r3, [r3, #24]
 8010364:	2b00      	cmp	r3, #0
 8010366:	db06      	blt.n	8010376 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010368:	4b25      	ldr	r3, [pc, #148]	; (8010400 <xTaskPriorityInherit+0xc4>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801036e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	6959      	ldr	r1, [r3, #20]
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801037e:	4613      	mov	r3, r2
 8010380:	009b      	lsls	r3, r3, #2
 8010382:	4413      	add	r3, r2
 8010384:	009b      	lsls	r3, r3, #2
 8010386:	4a1f      	ldr	r2, [pc, #124]	; (8010404 <xTaskPriorityInherit+0xc8>)
 8010388:	4413      	add	r3, r2
 801038a:	4299      	cmp	r1, r3
 801038c:	d122      	bne.n	80103d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	3304      	adds	r3, #4
 8010392:	4618      	mov	r0, r3
 8010394:	f7fe f934 	bl	800e600 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010398:	4b19      	ldr	r3, [pc, #100]	; (8010400 <xTaskPriorityInherit+0xc4>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a6:	4b18      	ldr	r3, [pc, #96]	; (8010408 <xTaskPriorityInherit+0xcc>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d903      	bls.n	80103b6 <xTaskPriorityInherit+0x7a>
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b2:	4a15      	ldr	r2, [pc, #84]	; (8010408 <xTaskPriorityInherit+0xcc>)
 80103b4:	6013      	str	r3, [r2, #0]
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ba:	4613      	mov	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	4413      	add	r3, r2
 80103c0:	009b      	lsls	r3, r3, #2
 80103c2:	4a10      	ldr	r2, [pc, #64]	; (8010404 <xTaskPriorityInherit+0xc8>)
 80103c4:	441a      	add	r2, r3
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	3304      	adds	r3, #4
 80103ca:	4619      	mov	r1, r3
 80103cc:	4610      	mov	r0, r2
 80103ce:	f7fe f8ba 	bl	800e546 <vListInsertEnd>
 80103d2:	e004      	b.n	80103de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103d4:	4b0a      	ldr	r3, [pc, #40]	; (8010400 <xTaskPriorityInherit+0xc4>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80103de:	2301      	movs	r3, #1
 80103e0:	60fb      	str	r3, [r7, #12]
 80103e2:	e008      	b.n	80103f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103e8:	4b05      	ldr	r3, [pc, #20]	; (8010400 <xTaskPriorityInherit+0xc4>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d201      	bcs.n	80103f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80103f2:	2301      	movs	r3, #1
 80103f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103f6:	68fb      	ldr	r3, [r7, #12]
	}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	20000fcc 	.word	0x20000fcc
 8010404:	20000fd0 	.word	0x20000fd0
 8010408:	200014a8 	.word	0x200014a8

0801040c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801040c:	b580      	push	{r7, lr}
 801040e:	b086      	sub	sp, #24
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010418:	2300      	movs	r3, #0
 801041a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d056      	beq.n	80104d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010422:	4b2e      	ldr	r3, [pc, #184]	; (80104dc <xTaskPriorityDisinherit+0xd0>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	693a      	ldr	r2, [r7, #16]
 8010428:	429a      	cmp	r2, r3
 801042a:	d00a      	beq.n	8010442 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801042c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010430:	f383 8811 	msr	BASEPRI, r3
 8010434:	f3bf 8f6f 	isb	sy
 8010438:	f3bf 8f4f 	dsb	sy
 801043c:	60fb      	str	r3, [r7, #12]
}
 801043e:	bf00      	nop
 8010440:	e7fe      	b.n	8010440 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010446:	2b00      	cmp	r3, #0
 8010448:	d10a      	bne.n	8010460 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801044a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801044e:	f383 8811 	msr	BASEPRI, r3
 8010452:	f3bf 8f6f 	isb	sy
 8010456:	f3bf 8f4f 	dsb	sy
 801045a:	60bb      	str	r3, [r7, #8]
}
 801045c:	bf00      	nop
 801045e:	e7fe      	b.n	801045e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010464:	1e5a      	subs	r2, r3, #1
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010472:	429a      	cmp	r2, r3
 8010474:	d02c      	beq.n	80104d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801047a:	2b00      	cmp	r3, #0
 801047c:	d128      	bne.n	80104d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	3304      	adds	r3, #4
 8010482:	4618      	mov	r0, r3
 8010484:	f7fe f8bc 	bl	800e600 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010494:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104a0:	4b0f      	ldr	r3, [pc, #60]	; (80104e0 <xTaskPriorityDisinherit+0xd4>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d903      	bls.n	80104b0 <xTaskPriorityDisinherit+0xa4>
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ac:	4a0c      	ldr	r2, [pc, #48]	; (80104e0 <xTaskPriorityDisinherit+0xd4>)
 80104ae:	6013      	str	r3, [r2, #0]
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104b4:	4613      	mov	r3, r2
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	4413      	add	r3, r2
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	4a09      	ldr	r2, [pc, #36]	; (80104e4 <xTaskPriorityDisinherit+0xd8>)
 80104be:	441a      	add	r2, r3
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	3304      	adds	r3, #4
 80104c4:	4619      	mov	r1, r3
 80104c6:	4610      	mov	r0, r2
 80104c8:	f7fe f83d 	bl	800e546 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80104cc:	2301      	movs	r3, #1
 80104ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104d0:	697b      	ldr	r3, [r7, #20]
	}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3718      	adds	r7, #24
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	20000fcc 	.word	0x20000fcc
 80104e0:	200014a8 	.word	0x200014a8
 80104e4:	20000fd0 	.word	0x20000fd0

080104e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b088      	sub	sp, #32
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80104f6:	2301      	movs	r3, #1
 80104f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d06a      	beq.n	80105d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010504:	2b00      	cmp	r3, #0
 8010506:	d10a      	bne.n	801051e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	60fb      	str	r3, [r7, #12]
}
 801051a:	bf00      	nop
 801051c:	e7fe      	b.n	801051c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010522:	683a      	ldr	r2, [r7, #0]
 8010524:	429a      	cmp	r2, r3
 8010526:	d902      	bls.n	801052e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	61fb      	str	r3, [r7, #28]
 801052c:	e002      	b.n	8010534 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010532:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010534:	69bb      	ldr	r3, [r7, #24]
 8010536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010538:	69fa      	ldr	r2, [r7, #28]
 801053a:	429a      	cmp	r2, r3
 801053c:	d04b      	beq.n	80105d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010542:	697a      	ldr	r2, [r7, #20]
 8010544:	429a      	cmp	r2, r3
 8010546:	d146      	bne.n	80105d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010548:	4b25      	ldr	r3, [pc, #148]	; (80105e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	69ba      	ldr	r2, [r7, #24]
 801054e:	429a      	cmp	r2, r3
 8010550:	d10a      	bne.n	8010568 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010556:	f383 8811 	msr	BASEPRI, r3
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	f3bf 8f4f 	dsb	sy
 8010562:	60bb      	str	r3, [r7, #8]
}
 8010564:	bf00      	nop
 8010566:	e7fe      	b.n	8010566 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010568:	69bb      	ldr	r3, [r7, #24]
 801056a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801056c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	69fa      	ldr	r2, [r7, #28]
 8010572:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	699b      	ldr	r3, [r3, #24]
 8010578:	2b00      	cmp	r3, #0
 801057a:	db04      	blt.n	8010586 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	6959      	ldr	r1, [r3, #20]
 801058a:	693a      	ldr	r2, [r7, #16]
 801058c:	4613      	mov	r3, r2
 801058e:	009b      	lsls	r3, r3, #2
 8010590:	4413      	add	r3, r2
 8010592:	009b      	lsls	r3, r3, #2
 8010594:	4a13      	ldr	r2, [pc, #76]	; (80105e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010596:	4413      	add	r3, r2
 8010598:	4299      	cmp	r1, r3
 801059a:	d11c      	bne.n	80105d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	3304      	adds	r3, #4
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7fe f82d 	bl	800e600 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105aa:	4b0f      	ldr	r3, [pc, #60]	; (80105e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d903      	bls.n	80105ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105b6:	4a0c      	ldr	r2, [pc, #48]	; (80105e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80105b8:	6013      	str	r3, [r2, #0]
 80105ba:	69bb      	ldr	r3, [r7, #24]
 80105bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105be:	4613      	mov	r3, r2
 80105c0:	009b      	lsls	r3, r3, #2
 80105c2:	4413      	add	r3, r2
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	4a07      	ldr	r2, [pc, #28]	; (80105e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80105c8:	441a      	add	r2, r3
 80105ca:	69bb      	ldr	r3, [r7, #24]
 80105cc:	3304      	adds	r3, #4
 80105ce:	4619      	mov	r1, r3
 80105d0:	4610      	mov	r0, r2
 80105d2:	f7fd ffb8 	bl	800e546 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105d6:	bf00      	nop
 80105d8:	3720      	adds	r7, #32
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	20000fcc 	.word	0x20000fcc
 80105e4:	20000fd0 	.word	0x20000fd0
 80105e8:	200014a8 	.word	0x200014a8

080105ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80105ec:	b480      	push	{r7}
 80105ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80105f0:	4b07      	ldr	r3, [pc, #28]	; (8010610 <pvTaskIncrementMutexHeldCount+0x24>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d004      	beq.n	8010602 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80105f8:	4b05      	ldr	r3, [pc, #20]	; (8010610 <pvTaskIncrementMutexHeldCount+0x24>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105fe:	3201      	adds	r2, #1
 8010600:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010602:	4b03      	ldr	r3, [pc, #12]	; (8010610 <pvTaskIncrementMutexHeldCount+0x24>)
 8010604:	681b      	ldr	r3, [r3, #0]
	}
 8010606:	4618      	mov	r0, r3
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr
 8010610:	20000fcc 	.word	0x20000fcc

08010614 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801061e:	4b21      	ldr	r3, [pc, #132]	; (80106a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010624:	4b20      	ldr	r3, [pc, #128]	; (80106a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	3304      	adds	r3, #4
 801062a:	4618      	mov	r0, r3
 801062c:	f7fd ffe8 	bl	800e600 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010636:	d10a      	bne.n	801064e <prvAddCurrentTaskToDelayedList+0x3a>
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d007      	beq.n	801064e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801063e:	4b1a      	ldr	r3, [pc, #104]	; (80106a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	3304      	adds	r3, #4
 8010644:	4619      	mov	r1, r3
 8010646:	4819      	ldr	r0, [pc, #100]	; (80106ac <prvAddCurrentTaskToDelayedList+0x98>)
 8010648:	f7fd ff7d 	bl	800e546 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801064c:	e026      	b.n	801069c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801064e:	68fa      	ldr	r2, [r7, #12]
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	4413      	add	r3, r2
 8010654:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010656:	4b14      	ldr	r3, [pc, #80]	; (80106a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	68ba      	ldr	r2, [r7, #8]
 801065c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801065e:	68ba      	ldr	r2, [r7, #8]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	429a      	cmp	r2, r3
 8010664:	d209      	bcs.n	801067a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010666:	4b12      	ldr	r3, [pc, #72]	; (80106b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	4b0f      	ldr	r3, [pc, #60]	; (80106a8 <prvAddCurrentTaskToDelayedList+0x94>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	3304      	adds	r3, #4
 8010670:	4619      	mov	r1, r3
 8010672:	4610      	mov	r0, r2
 8010674:	f7fd ff8b 	bl	800e58e <vListInsert>
}
 8010678:	e010      	b.n	801069c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801067a:	4b0e      	ldr	r3, [pc, #56]	; (80106b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	4b0a      	ldr	r3, [pc, #40]	; (80106a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	3304      	adds	r3, #4
 8010684:	4619      	mov	r1, r3
 8010686:	4610      	mov	r0, r2
 8010688:	f7fd ff81 	bl	800e58e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801068c:	4b0a      	ldr	r3, [pc, #40]	; (80106b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	68ba      	ldr	r2, [r7, #8]
 8010692:	429a      	cmp	r2, r3
 8010694:	d202      	bcs.n	801069c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010696:	4a08      	ldr	r2, [pc, #32]	; (80106b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	6013      	str	r3, [r2, #0]
}
 801069c:	bf00      	nop
 801069e:	3710      	adds	r7, #16
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	200014a4 	.word	0x200014a4
 80106a8:	20000fcc 	.word	0x20000fcc
 80106ac:	2000148c 	.word	0x2000148c
 80106b0:	2000145c 	.word	0x2000145c
 80106b4:	20001458 	.word	0x20001458
 80106b8:	200014c0 	.word	0x200014c0

080106bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b08a      	sub	sp, #40	; 0x28
 80106c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80106c2:	2300      	movs	r3, #0
 80106c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80106c6:	f000 fb07 	bl	8010cd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80106ca:	4b1c      	ldr	r3, [pc, #112]	; (801073c <xTimerCreateTimerTask+0x80>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d021      	beq.n	8010716 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80106d2:	2300      	movs	r3, #0
 80106d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80106d6:	2300      	movs	r3, #0
 80106d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80106da:	1d3a      	adds	r2, r7, #4
 80106dc:	f107 0108 	add.w	r1, r7, #8
 80106e0:	f107 030c 	add.w	r3, r7, #12
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7fd fee7 	bl	800e4b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80106ea:	6879      	ldr	r1, [r7, #4]
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	68fa      	ldr	r2, [r7, #12]
 80106f0:	9202      	str	r2, [sp, #8]
 80106f2:	9301      	str	r3, [sp, #4]
 80106f4:	2302      	movs	r3, #2
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	2300      	movs	r3, #0
 80106fa:	460a      	mov	r2, r1
 80106fc:	4910      	ldr	r1, [pc, #64]	; (8010740 <xTimerCreateTimerTask+0x84>)
 80106fe:	4811      	ldr	r0, [pc, #68]	; (8010744 <xTimerCreateTimerTask+0x88>)
 8010700:	f7fe ffb6 	bl	800f670 <xTaskCreateStatic>
 8010704:	4603      	mov	r3, r0
 8010706:	4a10      	ldr	r2, [pc, #64]	; (8010748 <xTimerCreateTimerTask+0x8c>)
 8010708:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801070a:	4b0f      	ldr	r3, [pc, #60]	; (8010748 <xTimerCreateTimerTask+0x8c>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d001      	beq.n	8010716 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010712:	2301      	movs	r3, #1
 8010714:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d10a      	bne.n	8010732 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801071c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010720:	f383 8811 	msr	BASEPRI, r3
 8010724:	f3bf 8f6f 	isb	sy
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	613b      	str	r3, [r7, #16]
}
 801072e:	bf00      	nop
 8010730:	e7fe      	b.n	8010730 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010732:	697b      	ldr	r3, [r7, #20]
}
 8010734:	4618      	mov	r0, r3
 8010736:	3718      	adds	r7, #24
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	200014fc 	.word	0x200014fc
 8010740:	0802a960 	.word	0x0802a960
 8010744:	08010881 	.word	0x08010881
 8010748:	20001500 	.word	0x20001500

0801074c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b08a      	sub	sp, #40	; 0x28
 8010750:	af00      	add	r7, sp, #0
 8010752:	60f8      	str	r0, [r7, #12]
 8010754:	60b9      	str	r1, [r7, #8]
 8010756:	607a      	str	r2, [r7, #4]
 8010758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801075a:	2300      	movs	r3, #0
 801075c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d10a      	bne.n	801077a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010768:	f383 8811 	msr	BASEPRI, r3
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	f3bf 8f4f 	dsb	sy
 8010774:	623b      	str	r3, [r7, #32]
}
 8010776:	bf00      	nop
 8010778:	e7fe      	b.n	8010778 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801077a:	4b1a      	ldr	r3, [pc, #104]	; (80107e4 <xTimerGenericCommand+0x98>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d02a      	beq.n	80107d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	2b05      	cmp	r3, #5
 8010792:	dc18      	bgt.n	80107c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010794:	f7ff fdb4 	bl	8010300 <xTaskGetSchedulerState>
 8010798:	4603      	mov	r3, r0
 801079a:	2b02      	cmp	r3, #2
 801079c:	d109      	bne.n	80107b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801079e:	4b11      	ldr	r3, [pc, #68]	; (80107e4 <xTimerGenericCommand+0x98>)
 80107a0:	6818      	ldr	r0, [r3, #0]
 80107a2:	f107 0110 	add.w	r1, r7, #16
 80107a6:	2300      	movs	r3, #0
 80107a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107aa:	f7fe f8fb 	bl	800e9a4 <xQueueGenericSend>
 80107ae:	6278      	str	r0, [r7, #36]	; 0x24
 80107b0:	e012      	b.n	80107d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80107b2:	4b0c      	ldr	r3, [pc, #48]	; (80107e4 <xTimerGenericCommand+0x98>)
 80107b4:	6818      	ldr	r0, [r3, #0]
 80107b6:	f107 0110 	add.w	r1, r7, #16
 80107ba:	2300      	movs	r3, #0
 80107bc:	2200      	movs	r2, #0
 80107be:	f7fe f8f1 	bl	800e9a4 <xQueueGenericSend>
 80107c2:	6278      	str	r0, [r7, #36]	; 0x24
 80107c4:	e008      	b.n	80107d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80107c6:	4b07      	ldr	r3, [pc, #28]	; (80107e4 <xTimerGenericCommand+0x98>)
 80107c8:	6818      	ldr	r0, [r3, #0]
 80107ca:	f107 0110 	add.w	r1, r7, #16
 80107ce:	2300      	movs	r3, #0
 80107d0:	683a      	ldr	r2, [r7, #0]
 80107d2:	f7fe f9e5 	bl	800eba0 <xQueueGenericSendFromISR>
 80107d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80107d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3728      	adds	r7, #40	; 0x28
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	200014fc 	.word	0x200014fc

080107e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b088      	sub	sp, #32
 80107ec:	af02      	add	r7, sp, #8
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107f2:	4b22      	ldr	r3, [pc, #136]	; (801087c <prvProcessExpiredTimer+0x94>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	3304      	adds	r3, #4
 8010800:	4618      	mov	r0, r3
 8010802:	f7fd fefd 	bl	800e600 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801080c:	f003 0304 	and.w	r3, r3, #4
 8010810:	2b00      	cmp	r3, #0
 8010812:	d022      	beq.n	801085a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	699a      	ldr	r2, [r3, #24]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	18d1      	adds	r1, r2, r3
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	683a      	ldr	r2, [r7, #0]
 8010820:	6978      	ldr	r0, [r7, #20]
 8010822:	f000 f8d1 	bl	80109c8 <prvInsertTimerInActiveList>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d01f      	beq.n	801086c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801082c:	2300      	movs	r3, #0
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	2300      	movs	r3, #0
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	2100      	movs	r1, #0
 8010836:	6978      	ldr	r0, [r7, #20]
 8010838:	f7ff ff88 	bl	801074c <xTimerGenericCommand>
 801083c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d113      	bne.n	801086c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010848:	f383 8811 	msr	BASEPRI, r3
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	60fb      	str	r3, [r7, #12]
}
 8010856:	bf00      	nop
 8010858:	e7fe      	b.n	8010858 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010860:	f023 0301 	bic.w	r3, r3, #1
 8010864:	b2da      	uxtb	r2, r3
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	6a1b      	ldr	r3, [r3, #32]
 8010870:	6978      	ldr	r0, [r7, #20]
 8010872:	4798      	blx	r3
}
 8010874:	bf00      	nop
 8010876:	3718      	adds	r7, #24
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	200014f4 	.word	0x200014f4

08010880 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010888:	f107 0308 	add.w	r3, r7, #8
 801088c:	4618      	mov	r0, r3
 801088e:	f000 f857 	bl	8010940 <prvGetNextExpireTime>
 8010892:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	4619      	mov	r1, r3
 8010898:	68f8      	ldr	r0, [r7, #12]
 801089a:	f000 f803 	bl	80108a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801089e:	f000 f8d5 	bl	8010a4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80108a2:	e7f1      	b.n	8010888 <prvTimerTask+0x8>

080108a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b084      	sub	sp, #16
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80108ae:	f7ff f93b 	bl	800fb28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80108b2:	f107 0308 	add.w	r3, r7, #8
 80108b6:	4618      	mov	r0, r3
 80108b8:	f000 f866 	bl	8010988 <prvSampleTimeNow>
 80108bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d130      	bne.n	8010926 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d10a      	bne.n	80108e0 <prvProcessTimerOrBlockTask+0x3c>
 80108ca:	687a      	ldr	r2, [r7, #4]
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d806      	bhi.n	80108e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80108d2:	f7ff f937 	bl	800fb44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80108d6:	68f9      	ldr	r1, [r7, #12]
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f7ff ff85 	bl	80107e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80108de:	e024      	b.n	801092a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d008      	beq.n	80108f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80108e6:	4b13      	ldr	r3, [pc, #76]	; (8010934 <prvProcessTimerOrBlockTask+0x90>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d101      	bne.n	80108f4 <prvProcessTimerOrBlockTask+0x50>
 80108f0:	2301      	movs	r3, #1
 80108f2:	e000      	b.n	80108f6 <prvProcessTimerOrBlockTask+0x52>
 80108f4:	2300      	movs	r3, #0
 80108f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80108f8:	4b0f      	ldr	r3, [pc, #60]	; (8010938 <prvProcessTimerOrBlockTask+0x94>)
 80108fa:	6818      	ldr	r0, [r3, #0]
 80108fc:	687a      	ldr	r2, [r7, #4]
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	1ad3      	subs	r3, r2, r3
 8010902:	683a      	ldr	r2, [r7, #0]
 8010904:	4619      	mov	r1, r3
 8010906:	f7fe fe7f 	bl	800f608 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801090a:	f7ff f91b 	bl	800fb44 <xTaskResumeAll>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d10a      	bne.n	801092a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010914:	4b09      	ldr	r3, [pc, #36]	; (801093c <prvProcessTimerOrBlockTask+0x98>)
 8010916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801091a:	601a      	str	r2, [r3, #0]
 801091c:	f3bf 8f4f 	dsb	sy
 8010920:	f3bf 8f6f 	isb	sy
}
 8010924:	e001      	b.n	801092a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010926:	f7ff f90d 	bl	800fb44 <xTaskResumeAll>
}
 801092a:	bf00      	nop
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	200014f8 	.word	0x200014f8
 8010938:	200014fc 	.word	0x200014fc
 801093c:	e000ed04 	.word	0xe000ed04

08010940 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010940:	b480      	push	{r7}
 8010942:	b085      	sub	sp, #20
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010948:	4b0e      	ldr	r3, [pc, #56]	; (8010984 <prvGetNextExpireTime+0x44>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d101      	bne.n	8010956 <prvGetNextExpireTime+0x16>
 8010952:	2201      	movs	r2, #1
 8010954:	e000      	b.n	8010958 <prvGetNextExpireTime+0x18>
 8010956:	2200      	movs	r2, #0
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d105      	bne.n	8010970 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010964:	4b07      	ldr	r3, [pc, #28]	; (8010984 <prvGetNextExpireTime+0x44>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	68db      	ldr	r3, [r3, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	60fb      	str	r3, [r7, #12]
 801096e:	e001      	b.n	8010974 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010970:	2300      	movs	r3, #0
 8010972:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010974:	68fb      	ldr	r3, [r7, #12]
}
 8010976:	4618      	mov	r0, r3
 8010978:	3714      	adds	r7, #20
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	200014f4 	.word	0x200014f4

08010988 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b084      	sub	sp, #16
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010990:	f7ff f976 	bl	800fc80 <xTaskGetTickCount>
 8010994:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010996:	4b0b      	ldr	r3, [pc, #44]	; (80109c4 <prvSampleTimeNow+0x3c>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	68fa      	ldr	r2, [r7, #12]
 801099c:	429a      	cmp	r2, r3
 801099e:	d205      	bcs.n	80109ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80109a0:	f000 f936 	bl	8010c10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2201      	movs	r2, #1
 80109a8:	601a      	str	r2, [r3, #0]
 80109aa:	e002      	b.n	80109b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2200      	movs	r2, #0
 80109b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80109b2:	4a04      	ldr	r2, [pc, #16]	; (80109c4 <prvSampleTimeNow+0x3c>)
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80109b8:	68fb      	ldr	r3, [r7, #12]
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3710      	adds	r7, #16
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	20001504 	.word	0x20001504

080109c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b086      	sub	sp, #24
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	607a      	str	r2, [r7, #4]
 80109d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80109d6:	2300      	movs	r3, #0
 80109d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	68ba      	ldr	r2, [r7, #8]
 80109de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	68fa      	ldr	r2, [r7, #12]
 80109e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80109e6:	68ba      	ldr	r2, [r7, #8]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d812      	bhi.n	8010a14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	1ad2      	subs	r2, r2, r3
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	699b      	ldr	r3, [r3, #24]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d302      	bcc.n	8010a02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80109fc:	2301      	movs	r3, #1
 80109fe:	617b      	str	r3, [r7, #20]
 8010a00:	e01b      	b.n	8010a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010a02:	4b10      	ldr	r3, [pc, #64]	; (8010a44 <prvInsertTimerInActiveList+0x7c>)
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	3304      	adds	r3, #4
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	4610      	mov	r0, r2
 8010a0e:	f7fd fdbe 	bl	800e58e <vListInsert>
 8010a12:	e012      	b.n	8010a3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d206      	bcs.n	8010a2a <prvInsertTimerInActiveList+0x62>
 8010a1c:	68ba      	ldr	r2, [r7, #8]
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d302      	bcc.n	8010a2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010a24:	2301      	movs	r3, #1
 8010a26:	617b      	str	r3, [r7, #20]
 8010a28:	e007      	b.n	8010a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a2a:	4b07      	ldr	r3, [pc, #28]	; (8010a48 <prvInsertTimerInActiveList+0x80>)
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	3304      	adds	r3, #4
 8010a32:	4619      	mov	r1, r3
 8010a34:	4610      	mov	r0, r2
 8010a36:	f7fd fdaa 	bl	800e58e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010a3a:	697b      	ldr	r3, [r7, #20]
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3718      	adds	r7, #24
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}
 8010a44:	200014f8 	.word	0x200014f8
 8010a48:	200014f4 	.word	0x200014f4

08010a4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b08e      	sub	sp, #56	; 0x38
 8010a50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010a52:	e0ca      	b.n	8010bea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	da18      	bge.n	8010a8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010a5a:	1d3b      	adds	r3, r7, #4
 8010a5c:	3304      	adds	r3, #4
 8010a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d10a      	bne.n	8010a7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a6a:	f383 8811 	msr	BASEPRI, r3
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f3bf 8f4f 	dsb	sy
 8010a76:	61fb      	str	r3, [r7, #28]
}
 8010a78:	bf00      	nop
 8010a7a:	e7fe      	b.n	8010a7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a82:	6850      	ldr	r0, [r2, #4]
 8010a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a86:	6892      	ldr	r2, [r2, #8]
 8010a88:	4611      	mov	r1, r2
 8010a8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	f2c0 80aa 	blt.w	8010be8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9a:	695b      	ldr	r3, [r3, #20]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d004      	beq.n	8010aaa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa2:	3304      	adds	r3, #4
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7fd fdab 	bl	800e600 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010aaa:	463b      	mov	r3, r7
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7ff ff6b 	bl	8010988 <prvSampleTimeNow>
 8010ab2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2b09      	cmp	r3, #9
 8010ab8:	f200 8097 	bhi.w	8010bea <prvProcessReceivedCommands+0x19e>
 8010abc:	a201      	add	r2, pc, #4	; (adr r2, 8010ac4 <prvProcessReceivedCommands+0x78>)
 8010abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac2:	bf00      	nop
 8010ac4:	08010aed 	.word	0x08010aed
 8010ac8:	08010aed 	.word	0x08010aed
 8010acc:	08010aed 	.word	0x08010aed
 8010ad0:	08010b61 	.word	0x08010b61
 8010ad4:	08010b75 	.word	0x08010b75
 8010ad8:	08010bbf 	.word	0x08010bbf
 8010adc:	08010aed 	.word	0x08010aed
 8010ae0:	08010aed 	.word	0x08010aed
 8010ae4:	08010b61 	.word	0x08010b61
 8010ae8:	08010b75 	.word	0x08010b75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010af2:	f043 0301 	orr.w	r3, r3, #1
 8010af6:	b2da      	uxtb	r2, r3
 8010af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010afe:	68ba      	ldr	r2, [r7, #8]
 8010b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b02:	699b      	ldr	r3, [r3, #24]
 8010b04:	18d1      	adds	r1, r2, r3
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b0c:	f7ff ff5c 	bl	80109c8 <prvInsertTimerInActiveList>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d069      	beq.n	8010bea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b18:	6a1b      	ldr	r3, [r3, #32]
 8010b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b24:	f003 0304 	and.w	r3, r3, #4
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d05e      	beq.n	8010bea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010b2c:	68ba      	ldr	r2, [r7, #8]
 8010b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b30:	699b      	ldr	r3, [r3, #24]
 8010b32:	441a      	add	r2, r3
 8010b34:	2300      	movs	r3, #0
 8010b36:	9300      	str	r3, [sp, #0]
 8010b38:	2300      	movs	r3, #0
 8010b3a:	2100      	movs	r1, #0
 8010b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b3e:	f7ff fe05 	bl	801074c <xTimerGenericCommand>
 8010b42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010b44:	6a3b      	ldr	r3, [r7, #32]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d14f      	bne.n	8010bea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b4e:	f383 8811 	msr	BASEPRI, r3
 8010b52:	f3bf 8f6f 	isb	sy
 8010b56:	f3bf 8f4f 	dsb	sy
 8010b5a:	61bb      	str	r3, [r7, #24]
}
 8010b5c:	bf00      	nop
 8010b5e:	e7fe      	b.n	8010b5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b66:	f023 0301 	bic.w	r3, r3, #1
 8010b6a:	b2da      	uxtb	r2, r3
 8010b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010b72:	e03a      	b.n	8010bea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b7a:	f043 0301 	orr.w	r3, r3, #1
 8010b7e:	b2da      	uxtb	r2, r3
 8010b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010b86:	68ba      	ldr	r2, [r7, #8]
 8010b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8e:	699b      	ldr	r3, [r3, #24]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d10a      	bne.n	8010baa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b98:	f383 8811 	msr	BASEPRI, r3
 8010b9c:	f3bf 8f6f 	isb	sy
 8010ba0:	f3bf 8f4f 	dsb	sy
 8010ba4:	617b      	str	r3, [r7, #20]
}
 8010ba6:	bf00      	nop
 8010ba8:	e7fe      	b.n	8010ba8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bac:	699a      	ldr	r2, [r3, #24]
 8010bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb0:	18d1      	adds	r1, r2, r3
 8010bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bb8:	f7ff ff06 	bl	80109c8 <prvInsertTimerInActiveList>
					break;
 8010bbc:	e015      	b.n	8010bea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bc4:	f003 0302 	and.w	r3, r3, #2
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d103      	bne.n	8010bd4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bce:	f000 fbdf 	bl	8011390 <vPortFree>
 8010bd2:	e00a      	b.n	8010bea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bda:	f023 0301 	bic.w	r3, r3, #1
 8010bde:	b2da      	uxtb	r2, r3
 8010be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010be6:	e000      	b.n	8010bea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010be8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bea:	4b08      	ldr	r3, [pc, #32]	; (8010c0c <prvProcessReceivedCommands+0x1c0>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	1d39      	adds	r1, r7, #4
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fe f8fc 	bl	800edf0 <xQueueReceive>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	f47f af2a 	bne.w	8010a54 <prvProcessReceivedCommands+0x8>
	}
}
 8010c00:	bf00      	nop
 8010c02:	bf00      	nop
 8010c04:	3730      	adds	r7, #48	; 0x30
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	200014fc 	.word	0x200014fc

08010c10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b088      	sub	sp, #32
 8010c14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c16:	e048      	b.n	8010caa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c18:	4b2d      	ldr	r3, [pc, #180]	; (8010cd0 <prvSwitchTimerLists+0xc0>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c22:	4b2b      	ldr	r3, [pc, #172]	; (8010cd0 <prvSwitchTimerLists+0xc0>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	68db      	ldr	r3, [r3, #12]
 8010c2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	3304      	adds	r3, #4
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7fd fce5 	bl	800e600 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	6a1b      	ldr	r3, [r3, #32]
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c44:	f003 0304 	and.w	r3, r3, #4
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d02e      	beq.n	8010caa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	699b      	ldr	r3, [r3, #24]
 8010c50:	693a      	ldr	r2, [r7, #16]
 8010c52:	4413      	add	r3, r2
 8010c54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010c56:	68ba      	ldr	r2, [r7, #8]
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d90e      	bls.n	8010c7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	68ba      	ldr	r2, [r7, #8]
 8010c62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	68fa      	ldr	r2, [r7, #12]
 8010c68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c6a:	4b19      	ldr	r3, [pc, #100]	; (8010cd0 <prvSwitchTimerLists+0xc0>)
 8010c6c:	681a      	ldr	r2, [r3, #0]
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	3304      	adds	r3, #4
 8010c72:	4619      	mov	r1, r3
 8010c74:	4610      	mov	r0, r2
 8010c76:	f7fd fc8a 	bl	800e58e <vListInsert>
 8010c7a:	e016      	b.n	8010caa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	9300      	str	r3, [sp, #0]
 8010c80:	2300      	movs	r3, #0
 8010c82:	693a      	ldr	r2, [r7, #16]
 8010c84:	2100      	movs	r1, #0
 8010c86:	68f8      	ldr	r0, [r7, #12]
 8010c88:	f7ff fd60 	bl	801074c <xTimerGenericCommand>
 8010c8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d10a      	bne.n	8010caa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c98:	f383 8811 	msr	BASEPRI, r3
 8010c9c:	f3bf 8f6f 	isb	sy
 8010ca0:	f3bf 8f4f 	dsb	sy
 8010ca4:	603b      	str	r3, [r7, #0]
}
 8010ca6:	bf00      	nop
 8010ca8:	e7fe      	b.n	8010ca8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010caa:	4b09      	ldr	r3, [pc, #36]	; (8010cd0 <prvSwitchTimerLists+0xc0>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d1b1      	bne.n	8010c18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010cb4:	4b06      	ldr	r3, [pc, #24]	; (8010cd0 <prvSwitchTimerLists+0xc0>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010cba:	4b06      	ldr	r3, [pc, #24]	; (8010cd4 <prvSwitchTimerLists+0xc4>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	4a04      	ldr	r2, [pc, #16]	; (8010cd0 <prvSwitchTimerLists+0xc0>)
 8010cc0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010cc2:	4a04      	ldr	r2, [pc, #16]	; (8010cd4 <prvSwitchTimerLists+0xc4>)
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	6013      	str	r3, [r2, #0]
}
 8010cc8:	bf00      	nop
 8010cca:	3718      	adds	r7, #24
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	200014f4 	.word	0x200014f4
 8010cd4:	200014f8 	.word	0x200014f8

08010cd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010cde:	f000 f969 	bl	8010fb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010ce2:	4b15      	ldr	r3, [pc, #84]	; (8010d38 <prvCheckForValidListAndQueue+0x60>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d120      	bne.n	8010d2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010cea:	4814      	ldr	r0, [pc, #80]	; (8010d3c <prvCheckForValidListAndQueue+0x64>)
 8010cec:	f7fd fbfe 	bl	800e4ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010cf0:	4813      	ldr	r0, [pc, #76]	; (8010d40 <prvCheckForValidListAndQueue+0x68>)
 8010cf2:	f7fd fbfb 	bl	800e4ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010cf6:	4b13      	ldr	r3, [pc, #76]	; (8010d44 <prvCheckForValidListAndQueue+0x6c>)
 8010cf8:	4a10      	ldr	r2, [pc, #64]	; (8010d3c <prvCheckForValidListAndQueue+0x64>)
 8010cfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010cfc:	4b12      	ldr	r3, [pc, #72]	; (8010d48 <prvCheckForValidListAndQueue+0x70>)
 8010cfe:	4a10      	ldr	r2, [pc, #64]	; (8010d40 <prvCheckForValidListAndQueue+0x68>)
 8010d00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010d02:	2300      	movs	r3, #0
 8010d04:	9300      	str	r3, [sp, #0]
 8010d06:	4b11      	ldr	r3, [pc, #68]	; (8010d4c <prvCheckForValidListAndQueue+0x74>)
 8010d08:	4a11      	ldr	r2, [pc, #68]	; (8010d50 <prvCheckForValidListAndQueue+0x78>)
 8010d0a:	2110      	movs	r1, #16
 8010d0c:	200a      	movs	r0, #10
 8010d0e:	f7fd fd09 	bl	800e724 <xQueueGenericCreateStatic>
 8010d12:	4603      	mov	r3, r0
 8010d14:	4a08      	ldr	r2, [pc, #32]	; (8010d38 <prvCheckForValidListAndQueue+0x60>)
 8010d16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010d18:	4b07      	ldr	r3, [pc, #28]	; (8010d38 <prvCheckForValidListAndQueue+0x60>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d005      	beq.n	8010d2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010d20:	4b05      	ldr	r3, [pc, #20]	; (8010d38 <prvCheckForValidListAndQueue+0x60>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	490b      	ldr	r1, [pc, #44]	; (8010d54 <prvCheckForValidListAndQueue+0x7c>)
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fe fc1a 	bl	800f560 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d2c:	f000 f972 	bl	8011014 <vPortExitCritical>
}
 8010d30:	bf00      	nop
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	200014fc 	.word	0x200014fc
 8010d3c:	200014cc 	.word	0x200014cc
 8010d40:	200014e0 	.word	0x200014e0
 8010d44:	200014f4 	.word	0x200014f4
 8010d48:	200014f8 	.word	0x200014f8
 8010d4c:	200015a8 	.word	0x200015a8
 8010d50:	20001508 	.word	0x20001508
 8010d54:	0802a968 	.word	0x0802a968

08010d58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b085      	sub	sp, #20
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	60f8      	str	r0, [r7, #12]
 8010d60:	60b9      	str	r1, [r7, #8]
 8010d62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	3b04      	subs	r3, #4
 8010d68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	3b04      	subs	r3, #4
 8010d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	f023 0201 	bic.w	r2, r3, #1
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	3b04      	subs	r3, #4
 8010d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010d88:	4a0c      	ldr	r2, [pc, #48]	; (8010dbc <pxPortInitialiseStack+0x64>)
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	3b14      	subs	r3, #20
 8010d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	3b04      	subs	r3, #4
 8010d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f06f 0202 	mvn.w	r2, #2
 8010da6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	3b20      	subs	r3, #32
 8010dac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010dae:	68fb      	ldr	r3, [r7, #12]
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3714      	adds	r7, #20
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr
 8010dbc:	08010dc1 	.word	0x08010dc1

08010dc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b085      	sub	sp, #20
 8010dc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010dca:	4b12      	ldr	r3, [pc, #72]	; (8010e14 <prvTaskExitError+0x54>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dd2:	d00a      	beq.n	8010dea <prvTaskExitError+0x2a>
	__asm volatile
 8010dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd8:	f383 8811 	msr	BASEPRI, r3
 8010ddc:	f3bf 8f6f 	isb	sy
 8010de0:	f3bf 8f4f 	dsb	sy
 8010de4:	60fb      	str	r3, [r7, #12]
}
 8010de6:	bf00      	nop
 8010de8:	e7fe      	b.n	8010de8 <prvTaskExitError+0x28>
	__asm volatile
 8010dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dee:	f383 8811 	msr	BASEPRI, r3
 8010df2:	f3bf 8f6f 	isb	sy
 8010df6:	f3bf 8f4f 	dsb	sy
 8010dfa:	60bb      	str	r3, [r7, #8]
}
 8010dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010dfe:	bf00      	nop
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d0fc      	beq.n	8010e00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010e06:	bf00      	nop
 8010e08:	bf00      	nop
 8010e0a:	3714      	adds	r7, #20
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr
 8010e14:	2000013c 	.word	0x2000013c
	...

08010e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010e20:	4b07      	ldr	r3, [pc, #28]	; (8010e40 <pxCurrentTCBConst2>)
 8010e22:	6819      	ldr	r1, [r3, #0]
 8010e24:	6808      	ldr	r0, [r1, #0]
 8010e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e2a:	f380 8809 	msr	PSP, r0
 8010e2e:	f3bf 8f6f 	isb	sy
 8010e32:	f04f 0000 	mov.w	r0, #0
 8010e36:	f380 8811 	msr	BASEPRI, r0
 8010e3a:	4770      	bx	lr
 8010e3c:	f3af 8000 	nop.w

08010e40 <pxCurrentTCBConst2>:
 8010e40:	20000fcc 	.word	0x20000fcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010e44:	bf00      	nop
 8010e46:	bf00      	nop

08010e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010e48:	4808      	ldr	r0, [pc, #32]	; (8010e6c <prvPortStartFirstTask+0x24>)
 8010e4a:	6800      	ldr	r0, [r0, #0]
 8010e4c:	6800      	ldr	r0, [r0, #0]
 8010e4e:	f380 8808 	msr	MSP, r0
 8010e52:	f04f 0000 	mov.w	r0, #0
 8010e56:	f380 8814 	msr	CONTROL, r0
 8010e5a:	b662      	cpsie	i
 8010e5c:	b661      	cpsie	f
 8010e5e:	f3bf 8f4f 	dsb	sy
 8010e62:	f3bf 8f6f 	isb	sy
 8010e66:	df00      	svc	0
 8010e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010e6a:	bf00      	nop
 8010e6c:	e000ed08 	.word	0xe000ed08

08010e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b086      	sub	sp, #24
 8010e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010e76:	4b46      	ldr	r3, [pc, #280]	; (8010f90 <xPortStartScheduler+0x120>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	4a46      	ldr	r2, [pc, #280]	; (8010f94 <xPortStartScheduler+0x124>)
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d10a      	bne.n	8010e96 <xPortStartScheduler+0x26>
	__asm volatile
 8010e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e84:	f383 8811 	msr	BASEPRI, r3
 8010e88:	f3bf 8f6f 	isb	sy
 8010e8c:	f3bf 8f4f 	dsb	sy
 8010e90:	613b      	str	r3, [r7, #16]
}
 8010e92:	bf00      	nop
 8010e94:	e7fe      	b.n	8010e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010e96:	4b3e      	ldr	r3, [pc, #248]	; (8010f90 <xPortStartScheduler+0x120>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	4a3f      	ldr	r2, [pc, #252]	; (8010f98 <xPortStartScheduler+0x128>)
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d10a      	bne.n	8010eb6 <xPortStartScheduler+0x46>
	__asm volatile
 8010ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea4:	f383 8811 	msr	BASEPRI, r3
 8010ea8:	f3bf 8f6f 	isb	sy
 8010eac:	f3bf 8f4f 	dsb	sy
 8010eb0:	60fb      	str	r3, [r7, #12]
}
 8010eb2:	bf00      	nop
 8010eb4:	e7fe      	b.n	8010eb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010eb6:	4b39      	ldr	r3, [pc, #228]	; (8010f9c <xPortStartScheduler+0x12c>)
 8010eb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	b2db      	uxtb	r3, r3
 8010ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	22ff      	movs	r2, #255	; 0xff
 8010ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ed0:	78fb      	ldrb	r3, [r7, #3]
 8010ed2:	b2db      	uxtb	r3, r3
 8010ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ed8:	b2da      	uxtb	r2, r3
 8010eda:	4b31      	ldr	r3, [pc, #196]	; (8010fa0 <xPortStartScheduler+0x130>)
 8010edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010ede:	4b31      	ldr	r3, [pc, #196]	; (8010fa4 <xPortStartScheduler+0x134>)
 8010ee0:	2207      	movs	r2, #7
 8010ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ee4:	e009      	b.n	8010efa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010ee6:	4b2f      	ldr	r3, [pc, #188]	; (8010fa4 <xPortStartScheduler+0x134>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	3b01      	subs	r3, #1
 8010eec:	4a2d      	ldr	r2, [pc, #180]	; (8010fa4 <xPortStartScheduler+0x134>)
 8010eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010ef0:	78fb      	ldrb	r3, [r7, #3]
 8010ef2:	b2db      	uxtb	r3, r3
 8010ef4:	005b      	lsls	r3, r3, #1
 8010ef6:	b2db      	uxtb	r3, r3
 8010ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010efa:	78fb      	ldrb	r3, [r7, #3]
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f02:	2b80      	cmp	r3, #128	; 0x80
 8010f04:	d0ef      	beq.n	8010ee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010f06:	4b27      	ldr	r3, [pc, #156]	; (8010fa4 <xPortStartScheduler+0x134>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f1c3 0307 	rsb	r3, r3, #7
 8010f0e:	2b04      	cmp	r3, #4
 8010f10:	d00a      	beq.n	8010f28 <xPortStartScheduler+0xb8>
	__asm volatile
 8010f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f16:	f383 8811 	msr	BASEPRI, r3
 8010f1a:	f3bf 8f6f 	isb	sy
 8010f1e:	f3bf 8f4f 	dsb	sy
 8010f22:	60bb      	str	r3, [r7, #8]
}
 8010f24:	bf00      	nop
 8010f26:	e7fe      	b.n	8010f26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010f28:	4b1e      	ldr	r3, [pc, #120]	; (8010fa4 <xPortStartScheduler+0x134>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	021b      	lsls	r3, r3, #8
 8010f2e:	4a1d      	ldr	r2, [pc, #116]	; (8010fa4 <xPortStartScheduler+0x134>)
 8010f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010f32:	4b1c      	ldr	r3, [pc, #112]	; (8010fa4 <xPortStartScheduler+0x134>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010f3a:	4a1a      	ldr	r2, [pc, #104]	; (8010fa4 <xPortStartScheduler+0x134>)
 8010f3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	b2da      	uxtb	r2, r3
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010f46:	4b18      	ldr	r3, [pc, #96]	; (8010fa8 <xPortStartScheduler+0x138>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4a17      	ldr	r2, [pc, #92]	; (8010fa8 <xPortStartScheduler+0x138>)
 8010f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010f52:	4b15      	ldr	r3, [pc, #84]	; (8010fa8 <xPortStartScheduler+0x138>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	4a14      	ldr	r2, [pc, #80]	; (8010fa8 <xPortStartScheduler+0x138>)
 8010f58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010f5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010f5e:	f000 f8dd 	bl	801111c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010f62:	4b12      	ldr	r3, [pc, #72]	; (8010fac <xPortStartScheduler+0x13c>)
 8010f64:	2200      	movs	r2, #0
 8010f66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010f68:	f000 f8fc 	bl	8011164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010f6c:	4b10      	ldr	r3, [pc, #64]	; (8010fb0 <xPortStartScheduler+0x140>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	4a0f      	ldr	r2, [pc, #60]	; (8010fb0 <xPortStartScheduler+0x140>)
 8010f72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010f76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010f78:	f7ff ff66 	bl	8010e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010f7c:	f7fe ff4a 	bl	800fe14 <vTaskSwitchContext>
	prvTaskExitError();
 8010f80:	f7ff ff1e 	bl	8010dc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010f84:	2300      	movs	r3, #0
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3718      	adds	r7, #24
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	e000ed00 	.word	0xe000ed00
 8010f94:	410fc271 	.word	0x410fc271
 8010f98:	410fc270 	.word	0x410fc270
 8010f9c:	e000e400 	.word	0xe000e400
 8010fa0:	200015f8 	.word	0x200015f8
 8010fa4:	200015fc 	.word	0x200015fc
 8010fa8:	e000ed20 	.word	0xe000ed20
 8010fac:	2000013c 	.word	0x2000013c
 8010fb0:	e000ef34 	.word	0xe000ef34

08010fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b083      	sub	sp, #12
 8010fb8:	af00      	add	r7, sp, #0
	__asm volatile
 8010fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbe:	f383 8811 	msr	BASEPRI, r3
 8010fc2:	f3bf 8f6f 	isb	sy
 8010fc6:	f3bf 8f4f 	dsb	sy
 8010fca:	607b      	str	r3, [r7, #4]
}
 8010fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010fce:	4b0f      	ldr	r3, [pc, #60]	; (801100c <vPortEnterCritical+0x58>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	4a0d      	ldr	r2, [pc, #52]	; (801100c <vPortEnterCritical+0x58>)
 8010fd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010fd8:	4b0c      	ldr	r3, [pc, #48]	; (801100c <vPortEnterCritical+0x58>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d10f      	bne.n	8011000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010fe0:	4b0b      	ldr	r3, [pc, #44]	; (8011010 <vPortEnterCritical+0x5c>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	b2db      	uxtb	r3, r3
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d00a      	beq.n	8011000 <vPortEnterCritical+0x4c>
	__asm volatile
 8010fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fee:	f383 8811 	msr	BASEPRI, r3
 8010ff2:	f3bf 8f6f 	isb	sy
 8010ff6:	f3bf 8f4f 	dsb	sy
 8010ffa:	603b      	str	r3, [r7, #0]
}
 8010ffc:	bf00      	nop
 8010ffe:	e7fe      	b.n	8010ffe <vPortEnterCritical+0x4a>
	}
}
 8011000:	bf00      	nop
 8011002:	370c      	adds	r7, #12
 8011004:	46bd      	mov	sp, r7
 8011006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100a:	4770      	bx	lr
 801100c:	2000013c 	.word	0x2000013c
 8011010:	e000ed04 	.word	0xe000ed04

08011014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801101a:	4b12      	ldr	r3, [pc, #72]	; (8011064 <vPortExitCritical+0x50>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d10a      	bne.n	8011038 <vPortExitCritical+0x24>
	__asm volatile
 8011022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011026:	f383 8811 	msr	BASEPRI, r3
 801102a:	f3bf 8f6f 	isb	sy
 801102e:	f3bf 8f4f 	dsb	sy
 8011032:	607b      	str	r3, [r7, #4]
}
 8011034:	bf00      	nop
 8011036:	e7fe      	b.n	8011036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011038:	4b0a      	ldr	r3, [pc, #40]	; (8011064 <vPortExitCritical+0x50>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	3b01      	subs	r3, #1
 801103e:	4a09      	ldr	r2, [pc, #36]	; (8011064 <vPortExitCritical+0x50>)
 8011040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011042:	4b08      	ldr	r3, [pc, #32]	; (8011064 <vPortExitCritical+0x50>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d105      	bne.n	8011056 <vPortExitCritical+0x42>
 801104a:	2300      	movs	r3, #0
 801104c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	f383 8811 	msr	BASEPRI, r3
}
 8011054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011056:	bf00      	nop
 8011058:	370c      	adds	r7, #12
 801105a:	46bd      	mov	sp, r7
 801105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011060:	4770      	bx	lr
 8011062:	bf00      	nop
 8011064:	2000013c 	.word	0x2000013c
	...

08011070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011070:	f3ef 8009 	mrs	r0, PSP
 8011074:	f3bf 8f6f 	isb	sy
 8011078:	4b15      	ldr	r3, [pc, #84]	; (80110d0 <pxCurrentTCBConst>)
 801107a:	681a      	ldr	r2, [r3, #0]
 801107c:	f01e 0f10 	tst.w	lr, #16
 8011080:	bf08      	it	eq
 8011082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801108a:	6010      	str	r0, [r2, #0]
 801108c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011094:	f380 8811 	msr	BASEPRI, r0
 8011098:	f3bf 8f4f 	dsb	sy
 801109c:	f3bf 8f6f 	isb	sy
 80110a0:	f7fe feb8 	bl	800fe14 <vTaskSwitchContext>
 80110a4:	f04f 0000 	mov.w	r0, #0
 80110a8:	f380 8811 	msr	BASEPRI, r0
 80110ac:	bc09      	pop	{r0, r3}
 80110ae:	6819      	ldr	r1, [r3, #0]
 80110b0:	6808      	ldr	r0, [r1, #0]
 80110b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b6:	f01e 0f10 	tst.w	lr, #16
 80110ba:	bf08      	it	eq
 80110bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80110c0:	f380 8809 	msr	PSP, r0
 80110c4:	f3bf 8f6f 	isb	sy
 80110c8:	4770      	bx	lr
 80110ca:	bf00      	nop
 80110cc:	f3af 8000 	nop.w

080110d0 <pxCurrentTCBConst>:
 80110d0:	20000fcc 	.word	0x20000fcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80110d4:	bf00      	nop
 80110d6:	bf00      	nop

080110d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
	__asm volatile
 80110de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e2:	f383 8811 	msr	BASEPRI, r3
 80110e6:	f3bf 8f6f 	isb	sy
 80110ea:	f3bf 8f4f 	dsb	sy
 80110ee:	607b      	str	r3, [r7, #4]
}
 80110f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80110f2:	f7fe fdd5 	bl	800fca0 <xTaskIncrementTick>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d003      	beq.n	8011104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80110fc:	4b06      	ldr	r3, [pc, #24]	; (8011118 <xPortSysTickHandler+0x40>)
 80110fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011102:	601a      	str	r2, [r3, #0]
 8011104:	2300      	movs	r3, #0
 8011106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	f383 8811 	msr	BASEPRI, r3
}
 801110e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011110:	bf00      	nop
 8011112:	3708      	adds	r7, #8
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	e000ed04 	.word	0xe000ed04

0801111c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801111c:	b480      	push	{r7}
 801111e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011120:	4b0b      	ldr	r3, [pc, #44]	; (8011150 <vPortSetupTimerInterrupt+0x34>)
 8011122:	2200      	movs	r2, #0
 8011124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011126:	4b0b      	ldr	r3, [pc, #44]	; (8011154 <vPortSetupTimerInterrupt+0x38>)
 8011128:	2200      	movs	r2, #0
 801112a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801112c:	4b0a      	ldr	r3, [pc, #40]	; (8011158 <vPortSetupTimerInterrupt+0x3c>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4a0a      	ldr	r2, [pc, #40]	; (801115c <vPortSetupTimerInterrupt+0x40>)
 8011132:	fba2 2303 	umull	r2, r3, r2, r3
 8011136:	099b      	lsrs	r3, r3, #6
 8011138:	4a09      	ldr	r2, [pc, #36]	; (8011160 <vPortSetupTimerInterrupt+0x44>)
 801113a:	3b01      	subs	r3, #1
 801113c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801113e:	4b04      	ldr	r3, [pc, #16]	; (8011150 <vPortSetupTimerInterrupt+0x34>)
 8011140:	2207      	movs	r2, #7
 8011142:	601a      	str	r2, [r3, #0]
}
 8011144:	bf00      	nop
 8011146:	46bd      	mov	sp, r7
 8011148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114c:	4770      	bx	lr
 801114e:	bf00      	nop
 8011150:	e000e010 	.word	0xe000e010
 8011154:	e000e018 	.word	0xe000e018
 8011158:	2000012c 	.word	0x2000012c
 801115c:	10624dd3 	.word	0x10624dd3
 8011160:	e000e014 	.word	0xe000e014

08011164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011174 <vPortEnableVFP+0x10>
 8011168:	6801      	ldr	r1, [r0, #0]
 801116a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801116e:	6001      	str	r1, [r0, #0]
 8011170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011172:	bf00      	nop
 8011174:	e000ed88 	.word	0xe000ed88

08011178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011178:	b480      	push	{r7}
 801117a:	b085      	sub	sp, #20
 801117c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801117e:	f3ef 8305 	mrs	r3, IPSR
 8011182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	2b0f      	cmp	r3, #15
 8011188:	d914      	bls.n	80111b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801118a:	4a17      	ldr	r2, [pc, #92]	; (80111e8 <vPortValidateInterruptPriority+0x70>)
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	4413      	add	r3, r2
 8011190:	781b      	ldrb	r3, [r3, #0]
 8011192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011194:	4b15      	ldr	r3, [pc, #84]	; (80111ec <vPortValidateInterruptPriority+0x74>)
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	7afa      	ldrb	r2, [r7, #11]
 801119a:	429a      	cmp	r2, r3
 801119c:	d20a      	bcs.n	80111b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801119e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a2:	f383 8811 	msr	BASEPRI, r3
 80111a6:	f3bf 8f6f 	isb	sy
 80111aa:	f3bf 8f4f 	dsb	sy
 80111ae:	607b      	str	r3, [r7, #4]
}
 80111b0:	bf00      	nop
 80111b2:	e7fe      	b.n	80111b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80111b4:	4b0e      	ldr	r3, [pc, #56]	; (80111f0 <vPortValidateInterruptPriority+0x78>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80111bc:	4b0d      	ldr	r3, [pc, #52]	; (80111f4 <vPortValidateInterruptPriority+0x7c>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d90a      	bls.n	80111da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80111c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c8:	f383 8811 	msr	BASEPRI, r3
 80111cc:	f3bf 8f6f 	isb	sy
 80111d0:	f3bf 8f4f 	dsb	sy
 80111d4:	603b      	str	r3, [r7, #0]
}
 80111d6:	bf00      	nop
 80111d8:	e7fe      	b.n	80111d8 <vPortValidateInterruptPriority+0x60>
	}
 80111da:	bf00      	nop
 80111dc:	3714      	adds	r7, #20
 80111de:	46bd      	mov	sp, r7
 80111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e4:	4770      	bx	lr
 80111e6:	bf00      	nop
 80111e8:	e000e3f0 	.word	0xe000e3f0
 80111ec:	200015f8 	.word	0x200015f8
 80111f0:	e000ed0c 	.word	0xe000ed0c
 80111f4:	200015fc 	.word	0x200015fc

080111f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b08a      	sub	sp, #40	; 0x28
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011200:	2300      	movs	r3, #0
 8011202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011204:	f7fe fc90 	bl	800fb28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011208:	4b5b      	ldr	r3, [pc, #364]	; (8011378 <pvPortMalloc+0x180>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d101      	bne.n	8011214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011210:	f000 f920 	bl	8011454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011214:	4b59      	ldr	r3, [pc, #356]	; (801137c <pvPortMalloc+0x184>)
 8011216:	681a      	ldr	r2, [r3, #0]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	4013      	ands	r3, r2
 801121c:	2b00      	cmp	r3, #0
 801121e:	f040 8093 	bne.w	8011348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d01d      	beq.n	8011264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011228:	2208      	movs	r2, #8
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	4413      	add	r3, r2
 801122e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f003 0307 	and.w	r3, r3, #7
 8011236:	2b00      	cmp	r3, #0
 8011238:	d014      	beq.n	8011264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f023 0307 	bic.w	r3, r3, #7
 8011240:	3308      	adds	r3, #8
 8011242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f003 0307 	and.w	r3, r3, #7
 801124a:	2b00      	cmp	r3, #0
 801124c:	d00a      	beq.n	8011264 <pvPortMalloc+0x6c>
	__asm volatile
 801124e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011252:	f383 8811 	msr	BASEPRI, r3
 8011256:	f3bf 8f6f 	isb	sy
 801125a:	f3bf 8f4f 	dsb	sy
 801125e:	617b      	str	r3, [r7, #20]
}
 8011260:	bf00      	nop
 8011262:	e7fe      	b.n	8011262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d06e      	beq.n	8011348 <pvPortMalloc+0x150>
 801126a:	4b45      	ldr	r3, [pc, #276]	; (8011380 <pvPortMalloc+0x188>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	687a      	ldr	r2, [r7, #4]
 8011270:	429a      	cmp	r2, r3
 8011272:	d869      	bhi.n	8011348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011274:	4b43      	ldr	r3, [pc, #268]	; (8011384 <pvPortMalloc+0x18c>)
 8011276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011278:	4b42      	ldr	r3, [pc, #264]	; (8011384 <pvPortMalloc+0x18c>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801127e:	e004      	b.n	801128a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	429a      	cmp	r2, r3
 8011292:	d903      	bls.n	801129c <pvPortMalloc+0xa4>
 8011294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d1f1      	bne.n	8011280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801129c:	4b36      	ldr	r3, [pc, #216]	; (8011378 <pvPortMalloc+0x180>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d050      	beq.n	8011348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80112a6:	6a3b      	ldr	r3, [r7, #32]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2208      	movs	r2, #8
 80112ac:	4413      	add	r3, r2
 80112ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80112b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	6a3b      	ldr	r3, [r7, #32]
 80112b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80112b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ba:	685a      	ldr	r2, [r3, #4]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	1ad2      	subs	r2, r2, r3
 80112c0:	2308      	movs	r3, #8
 80112c2:	005b      	lsls	r3, r3, #1
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d91f      	bls.n	8011308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80112c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	4413      	add	r3, r2
 80112ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80112d0:	69bb      	ldr	r3, [r7, #24]
 80112d2:	f003 0307 	and.w	r3, r3, #7
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d00a      	beq.n	80112f0 <pvPortMalloc+0xf8>
	__asm volatile
 80112da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112de:	f383 8811 	msr	BASEPRI, r3
 80112e2:	f3bf 8f6f 	isb	sy
 80112e6:	f3bf 8f4f 	dsb	sy
 80112ea:	613b      	str	r3, [r7, #16]
}
 80112ec:	bf00      	nop
 80112ee:	e7fe      	b.n	80112ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80112f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f2:	685a      	ldr	r2, [r3, #4]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	1ad2      	subs	r2, r2, r3
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80112fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fe:	687a      	ldr	r2, [r7, #4]
 8011300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011302:	69b8      	ldr	r0, [r7, #24]
 8011304:	f000 f908 	bl	8011518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011308:	4b1d      	ldr	r3, [pc, #116]	; (8011380 <pvPortMalloc+0x188>)
 801130a:	681a      	ldr	r2, [r3, #0]
 801130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	1ad3      	subs	r3, r2, r3
 8011312:	4a1b      	ldr	r2, [pc, #108]	; (8011380 <pvPortMalloc+0x188>)
 8011314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011316:	4b1a      	ldr	r3, [pc, #104]	; (8011380 <pvPortMalloc+0x188>)
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	4b1b      	ldr	r3, [pc, #108]	; (8011388 <pvPortMalloc+0x190>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	429a      	cmp	r2, r3
 8011320:	d203      	bcs.n	801132a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011322:	4b17      	ldr	r3, [pc, #92]	; (8011380 <pvPortMalloc+0x188>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	4a18      	ldr	r2, [pc, #96]	; (8011388 <pvPortMalloc+0x190>)
 8011328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132c:	685a      	ldr	r2, [r3, #4]
 801132e:	4b13      	ldr	r3, [pc, #76]	; (801137c <pvPortMalloc+0x184>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	431a      	orrs	r2, r3
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133a:	2200      	movs	r2, #0
 801133c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801133e:	4b13      	ldr	r3, [pc, #76]	; (801138c <pvPortMalloc+0x194>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	3301      	adds	r3, #1
 8011344:	4a11      	ldr	r2, [pc, #68]	; (801138c <pvPortMalloc+0x194>)
 8011346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011348:	f7fe fbfc 	bl	800fb44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801134c:	69fb      	ldr	r3, [r7, #28]
 801134e:	f003 0307 	and.w	r3, r3, #7
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00a      	beq.n	801136c <pvPortMalloc+0x174>
	__asm volatile
 8011356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801135a:	f383 8811 	msr	BASEPRI, r3
 801135e:	f3bf 8f6f 	isb	sy
 8011362:	f3bf 8f4f 	dsb	sy
 8011366:	60fb      	str	r3, [r7, #12]
}
 8011368:	bf00      	nop
 801136a:	e7fe      	b.n	801136a <pvPortMalloc+0x172>
	return pvReturn;
 801136c:	69fb      	ldr	r3, [r7, #28]
}
 801136e:	4618      	mov	r0, r3
 8011370:	3728      	adds	r7, #40	; 0x28
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	20005208 	.word	0x20005208
 801137c:	2000521c 	.word	0x2000521c
 8011380:	2000520c 	.word	0x2000520c
 8011384:	20005200 	.word	0x20005200
 8011388:	20005210 	.word	0x20005210
 801138c:	20005214 	.word	0x20005214

08011390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b086      	sub	sp, #24
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d04d      	beq.n	801143e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80113a2:	2308      	movs	r3, #8
 80113a4:	425b      	negs	r3, r3
 80113a6:	697a      	ldr	r2, [r7, #20]
 80113a8:	4413      	add	r3, r2
 80113aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80113b0:	693b      	ldr	r3, [r7, #16]
 80113b2:	685a      	ldr	r2, [r3, #4]
 80113b4:	4b24      	ldr	r3, [pc, #144]	; (8011448 <vPortFree+0xb8>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	4013      	ands	r3, r2
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d10a      	bne.n	80113d4 <vPortFree+0x44>
	__asm volatile
 80113be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c2:	f383 8811 	msr	BASEPRI, r3
 80113c6:	f3bf 8f6f 	isb	sy
 80113ca:	f3bf 8f4f 	dsb	sy
 80113ce:	60fb      	str	r3, [r7, #12]
}
 80113d0:	bf00      	nop
 80113d2:	e7fe      	b.n	80113d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d00a      	beq.n	80113f2 <vPortFree+0x62>
	__asm volatile
 80113dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e0:	f383 8811 	msr	BASEPRI, r3
 80113e4:	f3bf 8f6f 	isb	sy
 80113e8:	f3bf 8f4f 	dsb	sy
 80113ec:	60bb      	str	r3, [r7, #8]
}
 80113ee:	bf00      	nop
 80113f0:	e7fe      	b.n	80113f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	685a      	ldr	r2, [r3, #4]
 80113f6:	4b14      	ldr	r3, [pc, #80]	; (8011448 <vPortFree+0xb8>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	4013      	ands	r3, r2
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d01e      	beq.n	801143e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d11a      	bne.n	801143e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	685a      	ldr	r2, [r3, #4]
 801140c:	4b0e      	ldr	r3, [pc, #56]	; (8011448 <vPortFree+0xb8>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	43db      	mvns	r3, r3
 8011412:	401a      	ands	r2, r3
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011418:	f7fe fb86 	bl	800fb28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	685a      	ldr	r2, [r3, #4]
 8011420:	4b0a      	ldr	r3, [pc, #40]	; (801144c <vPortFree+0xbc>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	4413      	add	r3, r2
 8011426:	4a09      	ldr	r2, [pc, #36]	; (801144c <vPortFree+0xbc>)
 8011428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801142a:	6938      	ldr	r0, [r7, #16]
 801142c:	f000 f874 	bl	8011518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011430:	4b07      	ldr	r3, [pc, #28]	; (8011450 <vPortFree+0xc0>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	3301      	adds	r3, #1
 8011436:	4a06      	ldr	r2, [pc, #24]	; (8011450 <vPortFree+0xc0>)
 8011438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801143a:	f7fe fb83 	bl	800fb44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801143e:	bf00      	nop
 8011440:	3718      	adds	r7, #24
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	2000521c 	.word	0x2000521c
 801144c:	2000520c 	.word	0x2000520c
 8011450:	20005218 	.word	0x20005218

08011454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011454:	b480      	push	{r7}
 8011456:	b085      	sub	sp, #20
 8011458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801145a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801145e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011460:	4b27      	ldr	r3, [pc, #156]	; (8011500 <prvHeapInit+0xac>)
 8011462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f003 0307 	and.w	r3, r3, #7
 801146a:	2b00      	cmp	r3, #0
 801146c:	d00c      	beq.n	8011488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	3307      	adds	r3, #7
 8011472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	f023 0307 	bic.w	r3, r3, #7
 801147a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801147c:	68ba      	ldr	r2, [r7, #8]
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	1ad3      	subs	r3, r2, r3
 8011482:	4a1f      	ldr	r2, [pc, #124]	; (8011500 <prvHeapInit+0xac>)
 8011484:	4413      	add	r3, r2
 8011486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801148c:	4a1d      	ldr	r2, [pc, #116]	; (8011504 <prvHeapInit+0xb0>)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011492:	4b1c      	ldr	r3, [pc, #112]	; (8011504 <prvHeapInit+0xb0>)
 8011494:	2200      	movs	r2, #0
 8011496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	68ba      	ldr	r2, [r7, #8]
 801149c:	4413      	add	r3, r2
 801149e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80114a0:	2208      	movs	r2, #8
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	1a9b      	subs	r3, r3, r2
 80114a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	f023 0307 	bic.w	r3, r3, #7
 80114ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	4a15      	ldr	r2, [pc, #84]	; (8011508 <prvHeapInit+0xb4>)
 80114b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80114b6:	4b14      	ldr	r3, [pc, #80]	; (8011508 <prvHeapInit+0xb4>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	2200      	movs	r2, #0
 80114bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80114be:	4b12      	ldr	r3, [pc, #72]	; (8011508 <prvHeapInit+0xb4>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	2200      	movs	r2, #0
 80114c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	68fa      	ldr	r2, [r7, #12]
 80114ce:	1ad2      	subs	r2, r2, r3
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80114d4:	4b0c      	ldr	r3, [pc, #48]	; (8011508 <prvHeapInit+0xb4>)
 80114d6:	681a      	ldr	r2, [r3, #0]
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	4a0a      	ldr	r2, [pc, #40]	; (801150c <prvHeapInit+0xb8>)
 80114e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	4a09      	ldr	r2, [pc, #36]	; (8011510 <prvHeapInit+0xbc>)
 80114ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80114ec:	4b09      	ldr	r3, [pc, #36]	; (8011514 <prvHeapInit+0xc0>)
 80114ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80114f2:	601a      	str	r2, [r3, #0]
}
 80114f4:	bf00      	nop
 80114f6:	3714      	adds	r7, #20
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr
 8011500:	20001600 	.word	0x20001600
 8011504:	20005200 	.word	0x20005200
 8011508:	20005208 	.word	0x20005208
 801150c:	20005210 	.word	0x20005210
 8011510:	2000520c 	.word	0x2000520c
 8011514:	2000521c 	.word	0x2000521c

08011518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011518:	b480      	push	{r7}
 801151a:	b085      	sub	sp, #20
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011520:	4b28      	ldr	r3, [pc, #160]	; (80115c4 <prvInsertBlockIntoFreeList+0xac>)
 8011522:	60fb      	str	r3, [r7, #12]
 8011524:	e002      	b.n	801152c <prvInsertBlockIntoFreeList+0x14>
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	60fb      	str	r3, [r7, #12]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	687a      	ldr	r2, [r7, #4]
 8011532:	429a      	cmp	r2, r3
 8011534:	d8f7      	bhi.n	8011526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	68ba      	ldr	r2, [r7, #8]
 8011540:	4413      	add	r3, r2
 8011542:	687a      	ldr	r2, [r7, #4]
 8011544:	429a      	cmp	r2, r3
 8011546:	d108      	bne.n	801155a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	685a      	ldr	r2, [r3, #4]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	441a      	add	r2, r3
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	68ba      	ldr	r2, [r7, #8]
 8011564:	441a      	add	r2, r3
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	429a      	cmp	r2, r3
 801156c:	d118      	bne.n	80115a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681a      	ldr	r2, [r3, #0]
 8011572:	4b15      	ldr	r3, [pc, #84]	; (80115c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	429a      	cmp	r2, r3
 8011578:	d00d      	beq.n	8011596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	685a      	ldr	r2, [r3, #4]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	441a      	add	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	681a      	ldr	r2, [r3, #0]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	601a      	str	r2, [r3, #0]
 8011594:	e008      	b.n	80115a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011596:	4b0c      	ldr	r3, [pc, #48]	; (80115c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	601a      	str	r2, [r3, #0]
 801159e:	e003      	b.n	80115a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	681a      	ldr	r2, [r3, #0]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80115a8:	68fa      	ldr	r2, [r7, #12]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	429a      	cmp	r2, r3
 80115ae:	d002      	beq.n	80115b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115b6:	bf00      	nop
 80115b8:	3714      	adds	r7, #20
 80115ba:	46bd      	mov	sp, r7
 80115bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c0:	4770      	bx	lr
 80115c2:	bf00      	nop
 80115c4:	20005200 	.word	0x20005200
 80115c8:	20005208 	.word	0x20005208

080115cc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80115d0:	f004 fa9e 	bl	8015b10 <touchgfx_init>
}
 80115d4:	bf00      	nop
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80115d8:	b480      	push	{r7}
 80115da:	b083      	sub	sp, #12
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
    {
 80115e0:	4a04      	ldr	r2, [pc, #16]	; (80115f4 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	601a      	str	r2, [r3, #0]
    }
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4618      	mov	r0, r3
 80115ea:	370c      	adds	r7, #12
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr
 80115f4:	0802b658 	.word	0x0802b658

080115f8 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
    }
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f7ff ffe9 	bl	80115d8 <_ZN8touchgfx12FontProviderD1Ev>
 8011606:	2104      	movs	r1, #4
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f018 f834 	bl	8029676 <_ZdlPvj>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4618      	mov	r0, r3
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	460b      	mov	r3, r1
 8011622:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8011624:	887b      	ldrh	r3, [r7, #2]
 8011626:	2b03      	cmp	r3, #3
 8011628:	d81e      	bhi.n	8011668 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 801162a:	a201      	add	r2, pc, #4	; (adr r2, 8011630 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 801162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011630:	08011641 	.word	0x08011641
 8011634:	0801164b 	.word	0x0801164b
 8011638:	08011655 	.word	0x08011655
 801163c:	0801165f 	.word	0x0801165f
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8011640:	f003 f898 	bl	8014774 <_ZN17TypedTextDatabase8getFontsEv>
 8011644:	4603      	mov	r3, r0
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	e00f      	b.n	801166a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 801164a:	f003 f893 	bl	8014774 <_ZN17TypedTextDatabase8getFontsEv>
 801164e:	4603      	mov	r3, r0
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	e00a      	b.n	801166a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8011654:	f003 f88e 	bl	8014774 <_ZN17TypedTextDatabase8getFontsEv>
 8011658:	4603      	mov	r3, r0
 801165a:	689b      	ldr	r3, [r3, #8]
 801165c:	e005      	b.n	801166a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::TYPOGRAPHY_00:
        // ariblk_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 801165e:	f003 f889 	bl	8014774 <_ZN17TypedTextDatabase8getFontsEv>
 8011662:	4603      	mov	r3, r0
 8011664:	68db      	ldr	r3, [r3, #12]
 8011666:	e000      	b.n	801166a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 8011668:	2300      	movs	r3, #0
    }
}
 801166a:	4618      	mov	r0, r3
 801166c:	3708      	adds	r7, #8
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop

08011674 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // ariblk_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	4a05      	ldr	r2, [pc, #20]	; (8011694 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	601a      	str	r2, [r3, #0]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	4618      	mov	r0, r3
 8011686:	f7ff ffa7 	bl	80115d8 <_ZN8touchgfx12FontProviderD1Ev>
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4618      	mov	r0, r3
 801168e:	3708      	adds	r7, #8
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	0802b644 	.word	0x0802b644

08011698 <_ZN23ApplicationFontProviderD0Ev>:
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f7ff ffe7 	bl	8011674 <_ZN23ApplicationFontProviderD1Ev>
 80116a6:	2104      	movs	r1, #4
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f017 ffe4 	bl	8029676 <_ZdlPvj>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4618      	mov	r0, r3
 80116b2:	3708      	adds	r7, #8
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80116b8:	b480      	push	{r7}
 80116ba:	b083      	sub	sp, #12
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
    {
 80116c0:	4a04      	ldr	r2, [pc, #16]	; (80116d4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	601a      	str	r2, [r3, #0]
    }
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4618      	mov	r0, r3
 80116ca:	370c      	adds	r7, #12
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr
 80116d4:	0802ba48 	.word	0x0802ba48

080116d8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
    }
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f7ff ffe9 	bl	80116b8 <_ZN8touchgfx4FontD1Ev>
 80116e6:	2110      	movs	r1, #16
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f017 ffc4 	bl	8029676 <_ZdlPvj>
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	4618      	mov	r0, r3
 80116f2:	3708      	adds	r7, #8
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80116f8:	b590      	push	{r4, r7, lr}
 80116fa:	b087      	sub	sp, #28
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	460b      	mov	r3, r1
 8011702:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8011704:	887b      	ldrh	r3, [r7, #2]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d101      	bne.n	801170e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 801170a:	2300      	movs	r3, #0
 801170c:	e010      	b.n	8011730 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 801170e:	2300      	movs	r3, #0
 8011710:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8011712:	2300      	movs	r3, #0
 8011714:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	3308      	adds	r3, #8
 801171c:	681c      	ldr	r4, [r3, #0]
 801171e:	f107 030f 	add.w	r3, r7, #15
 8011722:	f107 0210 	add.w	r2, r7, #16
 8011726:	8879      	ldrh	r1, [r7, #2]
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	47a0      	blx	r4
 801172c:	6178      	str	r0, [r7, #20]
        return glyph;
 801172e:	697b      	ldr	r3, [r7, #20]
    }
 8011730:	4618      	mov	r0, r3
 8011732:	371c      	adds	r7, #28
 8011734:	46bd      	mov	sp, r7
 8011736:	bd90      	pop	{r4, r7, pc}

08011738 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8011738:	b480      	push	{r7}
 801173a:	b083      	sub	sp, #12
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	895b      	ldrh	r3, [r3, #10]
    }
 8011744:	4618      	mov	r0, r3
 8011746:	370c      	adds	r7, #12
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8011750:	b480      	push	{r7}
 8011752:	b083      	sub	sp, #12
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	899b      	ldrh	r3, [r3, #12]
    }
 801175c:	4618      	mov	r0, r3
 801175e:	370c      	adds	r7, #12
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr

08011768 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8011768:	b480      	push	{r7}
 801176a:	b083      	sub	sp, #12
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	889b      	ldrh	r3, [r3, #4]
    }
 8011774:	4618      	mov	r0, r3
 8011776:	370c      	adds	r7, #12
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr

08011780 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8011780:	b480      	push	{r7}
 8011782:	b083      	sub	sp, #12
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	889a      	ldrh	r2, [r3, #4]
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	799b      	ldrb	r3, [r3, #6]
 8011790:	b29b      	uxth	r3, r3
 8011792:	4413      	add	r3, r2
 8011794:	b29b      	uxth	r3, r3
    }
 8011796:	4618      	mov	r0, r3
 8011798:	370c      	adds	r7, #12
 801179a:	46bd      	mov	sp, r7
 801179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a0:	4770      	bx	lr

080117a2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80117a2:	b480      	push	{r7}
 80117a4:	b083      	sub	sp, #12
 80117a6:	af00      	add	r7, sp, #0
 80117a8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	79db      	ldrb	r3, [r3, #7]
 80117ae:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80117b2:	b2db      	uxtb	r3, r3
    }
 80117b4:	4618      	mov	r0, r3
 80117b6:	370c      	adds	r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	79db      	ldrb	r3, [r3, #7]
 80117cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80117d0:	b2db      	uxtb	r3, r3
    }
 80117d2:	4618      	mov	r0, r3
 80117d4:	370c      	adds	r7, #12
 80117d6:	46bd      	mov	sp, r7
 80117d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117dc:	4770      	bx	lr
	...

080117e0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	4a05      	ldr	r2, [pc, #20]	; (8011800 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	601a      	str	r2, [r3, #0]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7ff ff61 	bl	80116b8 <_ZN8touchgfx4FontD1Ev>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	4618      	mov	r0, r3
 80117fa:	3708      	adds	r7, #8
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	0802d5f8 	.word	0x0802d5f8

08011804 <_ZN8touchgfx9ConstFontD0Ev>:
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f7ff ffe7 	bl	80117e0 <_ZN8touchgfx9ConstFontD1Ev>
 8011812:	2118      	movs	r1, #24
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f017 ff2e 	bl	8029676 <_ZdlPvj>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4618      	mov	r0, r3
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}

08011824 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	4a05      	ldr	r2, [pc, #20]	; (8011844 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	601a      	str	r2, [r3, #0]
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	4618      	mov	r0, r3
 8011836:	f7ff ffd3 	bl	80117e0 <_ZN8touchgfx9ConstFontD1Ev>
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	4618      	mov	r0, r3
 801183e:	3708      	adds	r7, #8
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	0802b67c 	.word	0x0802b67c

08011848 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7ff ffe7 	bl	8011824 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011856:	2124      	movs	r1, #36	; 0x24
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f017 ff0c 	bl	8029676 <_ZdlPvj>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	4618      	mov	r0, r3
 8011862:	3708      	adds	r7, #8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8011868:	b480      	push	{r7}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
    {
 8011870:	4a04      	ldr	r2, [pc, #16]	; (8011884 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	601a      	str	r2, [r3, #0]
    }
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	4618      	mov	r0, r3
 801187a:	370c      	adds	r7, #12
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr
 8011884:	0802b66c 	.word	0x0802b66c

08011888 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
    }
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7ff ffe9 	bl	8011868 <_ZN8touchgfx9TypedTextD1Ev>
 8011896:	2108      	movs	r1, #8
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f017 feec 	bl	8029676 <_ZdlPvj>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4618      	mov	r0, r3
 80118a2:	3708      	adds	r7, #8
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}

080118a8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80118a8:	b480      	push	{r7}
 80118aa:	b083      	sub	sp, #12
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6a1b      	ldr	r3, [r3, #32]
    }
 80118b4:	4618      	mov	r0, r3
 80118b6:	370c      	adds	r7, #12
 80118b8:	46bd      	mov	sp, r7
 80118ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118be:	4770      	bx	lr

080118c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b08c      	sub	sp, #48	; 0x30
 80118c4:	af08      	add	r7, sp, #32
 80118c6:	60f8      	str	r0, [r7, #12]
 80118c8:	60b9      	str	r1, [r7, #8]
 80118ca:	4611      	mov	r1, r2
 80118cc:	461a      	mov	r2, r3
 80118ce:	460b      	mov	r3, r1
 80118d0:	80fb      	strh	r3, [r7, #6]
 80118d2:	4613      	mov	r3, r2
 80118d4:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 80118d6:	68f8      	ldr	r0, [r7, #12]
 80118d8:	88b9      	ldrh	r1, [r7, #4]
 80118da:	88fa      	ldrh	r2, [r7, #6]
 80118dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80118de:	9306      	str	r3, [sp, #24]
 80118e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80118e2:	9305      	str	r3, [sp, #20]
 80118e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80118e8:	9304      	str	r3, [sp, #16]
 80118ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80118ee:	9303      	str	r3, [sp, #12]
 80118f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118f4:	9302      	str	r3, [sp, #8]
 80118f6:	7f3b      	ldrb	r3, [r7, #28]
 80118f8:	9301      	str	r3, [sp, #4]
 80118fa:	7e3b      	ldrb	r3, [r7, #24]
 80118fc:	9300      	str	r3, [sp, #0]
 80118fe:	460b      	mov	r3, r1
 8011900:	68b9      	ldr	r1, [r7, #8]
 8011902:	f009 ffe3 	bl	801b8cc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8011906:	4a08      	ldr	r2, [pc, #32]	; (8011928 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	601a      	str	r2, [r3, #0]
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011910:	619a      	str	r2, [r3, #24]
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011916:	61da      	str	r2, [r3, #28]
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801191c:	621a      	str	r2, [r3, #32]
{
}
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	4618      	mov	r0, r3
 8011922:	3710      	adds	r7, #16
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	0802b67c 	.word	0x0802b67c

0801192c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 801192c:	b480      	push	{r7}
 801192e:	b085      	sub	sp, #20
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	699b      	ldr	r3, [r3, #24]
 801193a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	889b      	ldrh	r3, [r3, #4]
 8011940:	0adb      	lsrs	r3, r3, #11
 8011942:	b29b      	uxth	r3, r3
 8011944:	009b      	lsls	r3, r3, #2
 8011946:	68fa      	ldr	r2, [r7, #12]
 8011948:	4413      	add	r3, r2
 801194a:	681a      	ldr	r2, [r3, #0]
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	4413      	add	r3, r2
}
 8011952:	4618      	mov	r0, r3
 8011954:	3714      	adds	r7, #20
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr

0801195e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 801195e:	b480      	push	{r7}
 8011960:	b089      	sub	sp, #36	; 0x24
 8011962:	af00      	add	r7, sp, #0
 8011964:	60f8      	str	r0, [r7, #12]
 8011966:	460b      	mov	r3, r1
 8011968:	607a      	str	r2, [r7, #4]
 801196a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d003      	beq.n	801197a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	7b1b      	ldrb	r3, [r3, #12]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d101      	bne.n	801197e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801197a:	2300      	movs	r3, #0
 801197c:	e030      	b.n	80119e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	69da      	ldr	r2, [r3, #28]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	7b5b      	ldrb	r3, [r3, #13]
 801198a:	021b      	lsls	r3, r3, #8
 801198c:	b21b      	sxth	r3, r3
 801198e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011992:	b219      	sxth	r1, r3
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	7adb      	ldrb	r3, [r3, #11]
 8011998:	b21b      	sxth	r3, r3
 801199a:	430b      	orrs	r3, r1
 801199c:	b21b      	sxth	r3, r3
 801199e:	b29b      	uxth	r3, r3
 80119a0:	009b      	lsls	r3, r3, #2
 80119a2:	4413      	add	r3, r2
 80119a4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	7b1b      	ldrb	r3, [r3, #12]
 80119aa:	837b      	strh	r3, [r7, #26]
 80119ac:	8b7b      	ldrh	r3, [r7, #26]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d015      	beq.n	80119de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80119b2:	69fb      	ldr	r3, [r7, #28]
 80119b4:	881b      	ldrh	r3, [r3, #0]
 80119b6:	897a      	ldrh	r2, [r7, #10]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d103      	bne.n	80119c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80119bc:	69fb      	ldr	r3, [r7, #28]
 80119be:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80119c2:	e00d      	b.n	80119e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	881b      	ldrh	r3, [r3, #0]
 80119c8:	897a      	ldrh	r2, [r7, #10]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d306      	bcc.n	80119dc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80119ce:	8b7b      	ldrh	r3, [r7, #26]
 80119d0:	3b01      	subs	r3, #1
 80119d2:	837b      	strh	r3, [r7, #26]
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	3304      	adds	r3, #4
 80119d8:	61fb      	str	r3, [r7, #28]
 80119da:	e7e7      	b.n	80119ac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80119dc:	bf00      	nop
        }
    }
    return 0;
 80119de:	2300      	movs	r3, #0
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3724      	adds	r7, #36	; 0x24
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr

080119ec <__tcf_0>:

touchgfx::GeneratedFont& getFont_ariblk_10_4bpp();

touchgfx::GeneratedFont& getFont_ariblk_10_4bpp()
{
    static touchgfx::GeneratedFont ariblk_10_4bpp(glyphs_ariblk_10_4bpp, 11, 10, 0, 4, 1, 0, 0, unicodes_ariblk_10_4bpp, kerning_ariblk_10_4bpp, 63, 0, 0);
 80119ec:	b580      	push	{r7, lr}
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	4801      	ldr	r0, [pc, #4]	; (80119f8 <__tcf_0+0xc>)
 80119f2:	f7ff ff17 	bl	8011824 <_ZN8touchgfx13GeneratedFontD1Ev>
 80119f6:	bd80      	pop	{r7, pc}
 80119f8:	20005220 	.word	0x20005220

080119fc <_Z22getFont_ariblk_10_4bppv>:
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b08a      	sub	sp, #40	; 0x28
 8011a00:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont ariblk_10_4bpp(glyphs_ariblk_10_4bpp, 11, 10, 0, 4, 1, 0, 0, unicodes_ariblk_10_4bpp, kerning_ariblk_10_4bpp, 63, 0, 0);
 8011a02:	4b1e      	ldr	r3, [pc, #120]	; (8011a7c <_Z22getFont_ariblk_10_4bppv+0x80>)
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	f3bf 8f5b 	dmb	ish
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	f003 0301 	and.w	r3, r3, #1
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	bf0c      	ite	eq
 8011a14:	2301      	moveq	r3, #1
 8011a16:	2300      	movne	r3, #0
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d02a      	beq.n	8011a74 <_Z22getFont_ariblk_10_4bppv+0x78>
 8011a1e:	4817      	ldr	r0, [pc, #92]	; (8011a7c <_Z22getFont_ariblk_10_4bppv+0x80>)
 8011a20:	f017 fe2b 	bl	802967a <__cxa_guard_acquire>
 8011a24:	4603      	mov	r3, r0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	bf14      	ite	ne
 8011a2a:	2301      	movne	r3, #1
 8011a2c:	2300      	moveq	r3, #0
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d01f      	beq.n	8011a74 <_Z22getFont_ariblk_10_4bppv+0x78>
 8011a34:	2300      	movs	r3, #0
 8011a36:	9309      	str	r3, [sp, #36]	; 0x24
 8011a38:	2300      	movs	r3, #0
 8011a3a:	9308      	str	r3, [sp, #32]
 8011a3c:	233f      	movs	r3, #63	; 0x3f
 8011a3e:	9307      	str	r3, [sp, #28]
 8011a40:	4b0f      	ldr	r3, [pc, #60]	; (8011a80 <_Z22getFont_ariblk_10_4bppv+0x84>)
 8011a42:	9306      	str	r3, [sp, #24]
 8011a44:	4b0f      	ldr	r3, [pc, #60]	; (8011a84 <_Z22getFont_ariblk_10_4bppv+0x88>)
 8011a46:	9305      	str	r3, [sp, #20]
 8011a48:	2300      	movs	r3, #0
 8011a4a:	9304      	str	r3, [sp, #16]
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	9303      	str	r3, [sp, #12]
 8011a50:	2301      	movs	r3, #1
 8011a52:	9302      	str	r3, [sp, #8]
 8011a54:	2304      	movs	r3, #4
 8011a56:	9301      	str	r3, [sp, #4]
 8011a58:	2300      	movs	r3, #0
 8011a5a:	9300      	str	r3, [sp, #0]
 8011a5c:	230a      	movs	r3, #10
 8011a5e:	220b      	movs	r2, #11
 8011a60:	4909      	ldr	r1, [pc, #36]	; (8011a88 <_Z22getFont_ariblk_10_4bppv+0x8c>)
 8011a62:	480a      	ldr	r0, [pc, #40]	; (8011a8c <_Z22getFont_ariblk_10_4bppv+0x90>)
 8011a64:	f7ff ff2c 	bl	80118c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8011a68:	4809      	ldr	r0, [pc, #36]	; (8011a90 <_Z22getFont_ariblk_10_4bppv+0x94>)
 8011a6a:	f017 fe51 	bl	8029710 <atexit>
 8011a6e:	4803      	ldr	r0, [pc, #12]	; (8011a7c <_Z22getFont_ariblk_10_4bppv+0x80>)
 8011a70:	f017 fe0f 	bl	8029692 <__cxa_guard_release>
    return ariblk_10_4bpp;
 8011a74:	4b05      	ldr	r3, [pc, #20]	; (8011a8c <_Z22getFont_ariblk_10_4bppv+0x90>)
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	20005244 	.word	0x20005244
 8011a80:	0802f4e0 	.word	0x0802f4e0
 8011a84:	0802b6c8 	.word	0x0802b6c8
 8011a88:	0802f30c 	.word	0x0802f30c
 8011a8c:	20005220 	.word	0x20005220
 8011a90:	080119ed 	.word	0x080119ed

08011a94 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8011a94:	b580      	push	{r7, lr}
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	4801      	ldr	r0, [pc, #4]	; (8011aa0 <__tcf_0+0xc>)
 8011a9a:	f7ff fec3 	bl	8011824 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011a9e:	bd80      	pop	{r7, pc}
 8011aa0:	20005248 	.word	0x20005248

08011aa4 <_Z23getFont_verdana_10_4bppv>:
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b08a      	sub	sp, #40	; 0x28
 8011aa8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8011aaa:	4b1e      	ldr	r3, [pc, #120]	; (8011b24 <_Z23getFont_verdana_10_4bppv+0x80>)
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	f3bf 8f5b 	dmb	ish
 8011ab2:	b2db      	uxtb	r3, r3
 8011ab4:	f003 0301 	and.w	r3, r3, #1
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	bf0c      	ite	eq
 8011abc:	2301      	moveq	r3, #1
 8011abe:	2300      	movne	r3, #0
 8011ac0:	b2db      	uxtb	r3, r3
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d02a      	beq.n	8011b1c <_Z23getFont_verdana_10_4bppv+0x78>
 8011ac6:	4817      	ldr	r0, [pc, #92]	; (8011b24 <_Z23getFont_verdana_10_4bppv+0x80>)
 8011ac8:	f017 fdd7 	bl	802967a <__cxa_guard_acquire>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	bf14      	ite	ne
 8011ad2:	2301      	movne	r3, #1
 8011ad4:	2300      	moveq	r3, #0
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d01f      	beq.n	8011b1c <_Z23getFont_verdana_10_4bppv+0x78>
 8011adc:	2300      	movs	r3, #0
 8011ade:	9309      	str	r3, [sp, #36]	; 0x24
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	9308      	str	r3, [sp, #32]
 8011ae4:	233f      	movs	r3, #63	; 0x3f
 8011ae6:	9307      	str	r3, [sp, #28]
 8011ae8:	4b0f      	ldr	r3, [pc, #60]	; (8011b28 <_Z23getFont_verdana_10_4bppv+0x84>)
 8011aea:	9306      	str	r3, [sp, #24]
 8011aec:	4b0f      	ldr	r3, [pc, #60]	; (8011b2c <_Z23getFont_verdana_10_4bppv+0x88>)
 8011aee:	9305      	str	r3, [sp, #20]
 8011af0:	2300      	movs	r3, #0
 8011af2:	9304      	str	r3, [sp, #16]
 8011af4:	2300      	movs	r3, #0
 8011af6:	9303      	str	r3, [sp, #12]
 8011af8:	2301      	movs	r3, #1
 8011afa:	9302      	str	r3, [sp, #8]
 8011afc:	2304      	movs	r3, #4
 8011afe:	9301      	str	r3, [sp, #4]
 8011b00:	2300      	movs	r3, #0
 8011b02:	9300      	str	r3, [sp, #0]
 8011b04:	230a      	movs	r3, #10
 8011b06:	2201      	movs	r2, #1
 8011b08:	4909      	ldr	r1, [pc, #36]	; (8011b30 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8011b0a:	480a      	ldr	r0, [pc, #40]	; (8011b34 <_Z23getFont_verdana_10_4bppv+0x90>)
 8011b0c:	f7ff fed8 	bl	80118c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8011b10:	4809      	ldr	r0, [pc, #36]	; (8011b38 <_Z23getFont_verdana_10_4bppv+0x94>)
 8011b12:	f017 fdfd 	bl	8029710 <atexit>
 8011b16:	4803      	ldr	r0, [pc, #12]	; (8011b24 <_Z23getFont_verdana_10_4bppv+0x80>)
 8011b18:	f017 fdbb 	bl	8029692 <__cxa_guard_release>
    return verdana_10_4bpp;
 8011b1c:	4b05      	ldr	r3, [pc, #20]	; (8011b34 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}
 8011b24:	2000526c 	.word	0x2000526c
 8011b28:	0802f4e4 	.word	0x0802f4e4
 8011b2c:	0802b6cc 	.word	0x0802b6cc
 8011b30:	0802f3a8 	.word	0x0802f3a8
 8011b34:	20005248 	.word	0x20005248
 8011b38:	08011a95 	.word	0x08011a95

08011b3c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 20, 20, 3, 4, 1, 1, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	4801      	ldr	r0, [pc, #4]	; (8011b48 <__tcf_0+0xc>)
 8011b42:	f7ff fe6f 	bl	8011824 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	20005270 	.word	0x20005270

08011b4c <_Z23getFont_verdana_20_4bppv>:
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b08a      	sub	sp, #40	; 0x28
 8011b50:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 20, 20, 3, 4, 1, 1, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8011b52:	4b1e      	ldr	r3, [pc, #120]	; (8011bcc <_Z23getFont_verdana_20_4bppv+0x80>)
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	f3bf 8f5b 	dmb	ish
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	f003 0301 	and.w	r3, r3, #1
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	bf0c      	ite	eq
 8011b64:	2301      	moveq	r3, #1
 8011b66:	2300      	movne	r3, #0
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d02a      	beq.n	8011bc4 <_Z23getFont_verdana_20_4bppv+0x78>
 8011b6e:	4817      	ldr	r0, [pc, #92]	; (8011bcc <_Z23getFont_verdana_20_4bppv+0x80>)
 8011b70:	f017 fd83 	bl	802967a <__cxa_guard_acquire>
 8011b74:	4603      	mov	r3, r0
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	bf14      	ite	ne
 8011b7a:	2301      	movne	r3, #1
 8011b7c:	2300      	moveq	r3, #0
 8011b7e:	b2db      	uxtb	r3, r3
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d01f      	beq.n	8011bc4 <_Z23getFont_verdana_20_4bppv+0x78>
 8011b84:	2300      	movs	r3, #0
 8011b86:	9309      	str	r3, [sp, #36]	; 0x24
 8011b88:	2300      	movs	r3, #0
 8011b8a:	9308      	str	r3, [sp, #32]
 8011b8c:	233f      	movs	r3, #63	; 0x3f
 8011b8e:	9307      	str	r3, [sp, #28]
 8011b90:	4b0f      	ldr	r3, [pc, #60]	; (8011bd0 <_Z23getFont_verdana_20_4bppv+0x84>)
 8011b92:	9306      	str	r3, [sp, #24]
 8011b94:	4b0f      	ldr	r3, [pc, #60]	; (8011bd4 <_Z23getFont_verdana_20_4bppv+0x88>)
 8011b96:	9305      	str	r3, [sp, #20]
 8011b98:	2300      	movs	r3, #0
 8011b9a:	9304      	str	r3, [sp, #16]
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	9303      	str	r3, [sp, #12]
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	9302      	str	r3, [sp, #8]
 8011ba4:	2304      	movs	r3, #4
 8011ba6:	9301      	str	r3, [sp, #4]
 8011ba8:	2303      	movs	r3, #3
 8011baa:	9300      	str	r3, [sp, #0]
 8011bac:	2314      	movs	r3, #20
 8011bae:	2214      	movs	r2, #20
 8011bb0:	4909      	ldr	r1, [pc, #36]	; (8011bd8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8011bb2:	480a      	ldr	r0, [pc, #40]	; (8011bdc <_Z23getFont_verdana_20_4bppv+0x90>)
 8011bb4:	f7ff fe84 	bl	80118c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8011bb8:	4809      	ldr	r0, [pc, #36]	; (8011be0 <_Z23getFont_verdana_20_4bppv+0x94>)
 8011bba:	f017 fda9 	bl	8029710 <atexit>
 8011bbe:	4803      	ldr	r0, [pc, #12]	; (8011bcc <_Z23getFont_verdana_20_4bppv+0x80>)
 8011bc0:	f017 fd67 	bl	8029692 <__cxa_guard_release>
    return verdana_20_4bpp;
 8011bc4:	4b05      	ldr	r3, [pc, #20]	; (8011bdc <_Z23getFont_verdana_20_4bppv+0x90>)
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}
 8011bcc:	20005294 	.word	0x20005294
 8011bd0:	0802f4e8 	.word	0x0802f4e8
 8011bd4:	0802b6d0 	.word	0x0802b6d0
 8011bd8:	0802f3b8 	.word	0x0802f3b8
 8011bdc:	20005270 	.word	0x20005270
 8011be0:	08011b3d 	.word	0x08011b3d

08011be4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8011be4:	b580      	push	{r7, lr}
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	4801      	ldr	r0, [pc, #4]	; (8011bf0 <__tcf_0+0xc>)
 8011bea:	f7ff fe1b 	bl	8011824 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	20005298 	.word	0x20005298

08011bf4 <_Z23getFont_verdana_40_4bppv>:
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b08a      	sub	sp, #40	; 0x28
 8011bf8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8011bfa:	4b1e      	ldr	r3, [pc, #120]	; (8011c74 <_Z23getFont_verdana_40_4bppv+0x80>)
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	f3bf 8f5b 	dmb	ish
 8011c02:	b2db      	uxtb	r3, r3
 8011c04:	f003 0301 	and.w	r3, r3, #1
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	bf0c      	ite	eq
 8011c0c:	2301      	moveq	r3, #1
 8011c0e:	2300      	movne	r3, #0
 8011c10:	b2db      	uxtb	r3, r3
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d02a      	beq.n	8011c6c <_Z23getFont_verdana_40_4bppv+0x78>
 8011c16:	4817      	ldr	r0, [pc, #92]	; (8011c74 <_Z23getFont_verdana_40_4bppv+0x80>)
 8011c18:	f017 fd2f 	bl	802967a <__cxa_guard_acquire>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	bf14      	ite	ne
 8011c22:	2301      	movne	r3, #1
 8011c24:	2300      	moveq	r3, #0
 8011c26:	b2db      	uxtb	r3, r3
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d01f      	beq.n	8011c6c <_Z23getFont_verdana_40_4bppv+0x78>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8011c30:	2300      	movs	r3, #0
 8011c32:	9308      	str	r3, [sp, #32]
 8011c34:	233f      	movs	r3, #63	; 0x3f
 8011c36:	9307      	str	r3, [sp, #28]
 8011c38:	4b0f      	ldr	r3, [pc, #60]	; (8011c78 <_Z23getFont_verdana_40_4bppv+0x84>)
 8011c3a:	9306      	str	r3, [sp, #24]
 8011c3c:	4b0f      	ldr	r3, [pc, #60]	; (8011c7c <_Z23getFont_verdana_40_4bppv+0x88>)
 8011c3e:	9305      	str	r3, [sp, #20]
 8011c40:	2300      	movs	r3, #0
 8011c42:	9304      	str	r3, [sp, #16]
 8011c44:	2300      	movs	r3, #0
 8011c46:	9303      	str	r3, [sp, #12]
 8011c48:	2301      	movs	r3, #1
 8011c4a:	9302      	str	r3, [sp, #8]
 8011c4c:	2304      	movs	r3, #4
 8011c4e:	9301      	str	r3, [sp, #4]
 8011c50:	2300      	movs	r3, #0
 8011c52:	9300      	str	r3, [sp, #0]
 8011c54:	2328      	movs	r3, #40	; 0x28
 8011c56:	2201      	movs	r2, #1
 8011c58:	4909      	ldr	r1, [pc, #36]	; (8011c80 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8011c5a:	480a      	ldr	r0, [pc, #40]	; (8011c84 <_Z23getFont_verdana_40_4bppv+0x90>)
 8011c5c:	f7ff fe30 	bl	80118c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8011c60:	4809      	ldr	r0, [pc, #36]	; (8011c88 <_Z23getFont_verdana_40_4bppv+0x94>)
 8011c62:	f017 fd55 	bl	8029710 <atexit>
 8011c66:	4803      	ldr	r0, [pc, #12]	; (8011c74 <_Z23getFont_verdana_40_4bppv+0x80>)
 8011c68:	f017 fd13 	bl	8029692 <__cxa_guard_release>
    return verdana_40_4bpp;
 8011c6c:	4b05      	ldr	r3, [pc, #20]	; (8011c84 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}
 8011c74:	200052bc 	.word	0x200052bc
 8011c78:	0802f4f0 	.word	0x0802f4f0
 8011c7c:	0802b6d4 	.word	0x0802b6d4
 8011c80:	0802f4d0 	.word	0x0802f4d0
 8011c84:	20005298 	.word	0x20005298
 8011c88:	08011be5 	.word	0x08011be5

08011c8c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8011c8c:	b480      	push	{r7}
 8011c8e:	b083      	sub	sp, #12
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6039      	str	r1, [r7, #0]
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	370c      	adds	r7, #12
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca2:	4770      	bx	lr

08011ca4 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8011ca4:	b480      	push	{r7}
 8011ca6:	b083      	sub	sp, #12
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
    {
    }
 8011cae:	bf00      	nop
 8011cb0:	370c      	adds	r7, #12
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb8:	4770      	bx	lr

08011cba <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8011cba:	b480      	push	{r7}
 8011cbc:	b083      	sub	sp, #12
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
 8011cc2:	6039      	str	r1, [r7, #0]
    {
    }
 8011cc4:	bf00      	nop
 8011cc6:	370c      	adds	r7, #12
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8011cd0:	b480      	push	{r7}
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
    {
    }
 8011cda:	bf00      	nop
 8011cdc:	370c      	adds	r7, #12
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr

08011ce6 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8011ce6:	b480      	push	{r7}
 8011ce8:	b083      	sub	sp, #12
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
 8011cee:	460b      	mov	r3, r1
 8011cf0:	70fb      	strb	r3, [r7, #3]
    {
    }
 8011cf2:	bf00      	nop
 8011cf4:	370c      	adds	r7, #12
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfc:	4770      	bx	lr

08011cfe <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8011cfe:	b480      	push	{r7}
 8011d00:	b083      	sub	sp, #12
 8011d02:	af00      	add	r7, sp, #0
 8011d04:	6078      	str	r0, [r7, #4]
    {
    }
 8011d06:	bf00      	nop
 8011d08:	370c      	adds	r7, #12
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr

08011d12 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8011d12:	b480      	push	{r7}
 8011d14:	b083      	sub	sp, #12
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	6078      	str	r0, [r7, #4]
    {
    }
 8011d1a:	bf00      	nop
 8011d1c:	370c      	adds	r7, #12
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d24:	4770      	bx	lr
	...

08011d28 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
    {
 8011d30:	4a04      	ldr	r2, [pc, #16]	; (8011d44 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	601a      	str	r2, [r3, #0]
    }
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	4618      	mov	r0, r3
 8011d3a:	370c      	adds	r7, #12
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr
 8011d44:	0802b8a0 	.word	0x0802b8a0

08011d48 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
    }
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f7ff ffe9 	bl	8011d28 <_ZN8touchgfx15UIEventListenerD1Ev>
 8011d56:	2104      	movs	r1, #4
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f017 fc8c 	bl	8029676 <_ZdlPvj>
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	4618      	mov	r0, r3
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8011d68:	b480      	push	{r7}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	460b      	mov	r3, r1
 8011d72:	70fb      	strb	r3, [r7, #3]
    {
    }
 8011d74:	bf00      	nop
 8011d76:	370c      	adds	r7, #12
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7e:	4770      	bx	lr

08011d80 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8011d80:	b480      	push	{r7}
 8011d82:	b083      	sub	sp, #12
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	683a      	ldr	r2, [r7, #0]
 8011d8e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8011d92:	6810      	ldr	r0, [r2, #0]
 8011d94:	6851      	ldr	r1, [r2, #4]
 8011d96:	c303      	stmia	r3!, {r0, r1}
    };
 8011d98:	bf00      	nop
 8011d9a:	370c      	adds	r7, #12
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da2:	4770      	bx	lr

08011da4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8011da4:	b480      	push	{r7}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
    {
 8011dac:	4a04      	ldr	r2, [pc, #16]	; (8011dc0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	601a      	str	r2, [r3, #0]
    }
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	4618      	mov	r0, r3
 8011db6:	370c      	adds	r7, #12
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr
 8011dc0:	0802b888 	.word	0x0802b888

08011dc4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
    }
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f7ff ffe9 	bl	8011da4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011dd2:	2104      	movs	r1, #4
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f017 fc4e 	bl	8029676 <_ZdlPvj>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3708      	adds	r7, #8
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
    {
 8011dec:	4a04      	ldr	r2, [pc, #16]	; (8011e00 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	601a      	str	r2, [r3, #0]
    }
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	4618      	mov	r0, r3
 8011df6:	370c      	adds	r7, #12
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr
 8011e00:	0802d594 	.word	0x0802d594

08011e04 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
    }
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f7ff ffe9 	bl	8011de4 <_ZN8touchgfx8DrawableD1Ev>
 8011e12:	2128      	movs	r1, #40	; 0x28
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f017 fc2e 	bl	8029676 <_ZdlPvj>
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3708      	adds	r7, #8
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}

08011e24 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8011e24:	b480      	push	{r7}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011e2c:	2300      	movs	r3, #0
    }
 8011e2e:	4618      	mov	r0, r3
 8011e30:	370c      	adds	r7, #12
 8011e32:	46bd      	mov	sp, r7
 8011e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e38:	4770      	bx	lr

08011e3a <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8011e3a:	b580      	push	{r7, lr}
 8011e3c:	b084      	sub	sp, #16
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	60f8      	str	r0, [r7, #12]
 8011e42:	4608      	mov	r0, r1
 8011e44:	4611      	mov	r1, r2
 8011e46:	461a      	mov	r2, r3
 8011e48:	4603      	mov	r3, r0
 8011e4a:	817b      	strh	r3, [r7, #10]
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	813b      	strh	r3, [r7, #8]
 8011e50:	4613      	mov	r3, r2
 8011e52:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8011e54:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011e58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	f000 f837 	bl	8011ed2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8011e64:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8011e68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	68f8      	ldr	r0, [r7, #12]
 8011e70:	f000 f88b 	bl	8011f8a <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8011e74:	bf00      	nop
 8011e76:	3710      	adds	r7, #16
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8011e7c:	b480      	push	{r7}
 8011e7e:	b083      	sub	sp, #12
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	370c      	adds	r7, #12
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e94:	4770      	bx	lr

08011e96 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8011e96:	b480      	push	{r7}
 8011e98:	b083      	sub	sp, #12
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	6078      	str	r0, [r7, #4]
 8011e9e:	460b      	mov	r3, r1
 8011ea0:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	887a      	ldrh	r2, [r7, #2]
 8011ea6:	809a      	strh	r2, [r3, #4]
    }
 8011ea8:	bf00      	nop
 8011eaa:	370c      	adds	r7, #12
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr

08011eb4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8011eb4:	b480      	push	{r7}
 8011eb6:	b083      	sub	sp, #12
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	460b      	mov	r3, r1
 8011ebe:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	887a      	ldrh	r2, [r7, #2]
 8011ec4:	80da      	strh	r2, [r3, #6]
    }
 8011ec6:	bf00      	nop
 8011ec8:	370c      	adds	r7, #12
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed0:	4770      	bx	lr

08011ed2 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8011ed2:	b580      	push	{r7, lr}
 8011ed4:	b082      	sub	sp, #8
 8011ed6:	af00      	add	r7, sp, #0
 8011ed8:	6078      	str	r0, [r7, #4]
 8011eda:	460b      	mov	r3, r1
 8011edc:	807b      	strh	r3, [r7, #2]
 8011ede:	4613      	mov	r3, r2
 8011ee0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	332c      	adds	r3, #44	; 0x2c
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011eee:	4611      	mov	r1, r2
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	4798      	blx	r3
        setY(y);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	3330      	adds	r3, #48	; 0x30
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011f00:	4611      	mov	r1, r2
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	4798      	blx	r3
    }
 8011f06:	bf00      	nop
 8011f08:	3708      	adds	r7, #8
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8011f0e:	b480      	push	{r7}
 8011f10:	b083      	sub	sp, #12
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	6078      	str	r0, [r7, #4]
 8011f16:	460b      	mov	r3, r1
 8011f18:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	887a      	ldrh	r2, [r7, #2]
 8011f1e:	811a      	strh	r2, [r3, #8]
    }
 8011f20:	bf00      	nop
 8011f22:	370c      	adds	r7, #12
 8011f24:	46bd      	mov	sp, r7
 8011f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2a:	4770      	bx	lr

08011f2c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8011f2c:	b480      	push	{r7}
 8011f2e:	b083      	sub	sp, #12
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	460b      	mov	r3, r1
 8011f36:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	887a      	ldrh	r2, [r7, #2]
 8011f3c:	815a      	strh	r2, [r3, #10]
    }
 8011f3e:	bf00      	nop
 8011f40:	370c      	adds	r7, #12
 8011f42:	46bd      	mov	sp, r7
 8011f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f48:	4770      	bx	lr

08011f4a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8011f4a:	b480      	push	{r7}
 8011f4c:	b083      	sub	sp, #12
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	6078      	str	r0, [r7, #4]
    {
    }
 8011f52:	bf00      	nop
 8011f54:	370c      	adds	r7, #12
 8011f56:	46bd      	mov	sp, r7
 8011f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5c:	4770      	bx	lr

08011f5e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 8011f5e:	b480      	push	{r7}
 8011f60:	b083      	sub	sp, #12
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	6078      	str	r0, [r7, #4]
 8011f66:	6039      	str	r1, [r7, #0]
    {
    }
 8011f68:	bf00      	nop
 8011f6a:	370c      	adds	r7, #12
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr

08011f74 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 8011f74:	b480      	push	{r7}
 8011f76:	b083      	sub	sp, #12
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	6039      	str	r1, [r7, #0]
    {
    }
 8011f7e:	bf00      	nop
 8011f80:	370c      	adds	r7, #12
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr

08011f8a <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b082      	sub	sp, #8
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
 8011f92:	460b      	mov	r3, r1
 8011f94:	807b      	strh	r3, [r7, #2]
 8011f96:	4613      	mov	r3, r2
 8011f98:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	3334      	adds	r3, #52	; 0x34
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011fa6:	4611      	mov	r1, r2
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	4798      	blx	r3
        setHeight(height);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	3338      	adds	r3, #56	; 0x38
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011fb8:	4611      	mov	r1, r2
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	4798      	blx	r3
    }
 8011fbe:	bf00      	nop
 8011fc0:	3708      	adds	r7, #8
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}

08011fc6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8011fc6:	b480      	push	{r7}
 8011fc8:	b083      	sub	sp, #12
 8011fca:	af00      	add	r7, sp, #0
 8011fcc:	6078      	str	r0, [r7, #4]
 8011fce:	6039      	str	r1, [r7, #0]
    {
    }
 8011fd0:	bf00      	nop
 8011fd2:	370c      	adds	r7, #12
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr

08011fdc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8011fdc:	b480      	push	{r7}
 8011fde:	b083      	sub	sp, #12
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
    {
    }
 8011fe4:	bf00      	nop
 8011fe6:	370c      	adds	r7, #12
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr

08011ff0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8011ffe:	4618      	mov	r0, r3
 8012000:	370c      	adds	r7, #12
 8012002:	46bd      	mov	sp, r7
 8012004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012008:	4770      	bx	lr

0801200a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 801200a:	b480      	push	{r7}
 801200c:	b083      	sub	sp, #12
 801200e:	af00      	add	r7, sp, #0
 8012010:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8012018:	4618      	mov	r0, r3
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr

08012024 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	460b      	mov	r3, r1
 801202e:	807b      	strh	r3, [r7, #2]
 8012030:	4613      	mov	r3, r2
 8012032:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	3350      	adds	r3, #80	; 0x50
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	8879      	ldrh	r1, [r7, #2]
 801203e:	687a      	ldr	r2, [r7, #4]
 8012040:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8012044:	b292      	uxth	r2, r2
 8012046:	1a8a      	subs	r2, r1, r2
 8012048:	b292      	uxth	r2, r2
 801204a:	b210      	sxth	r0, r2
 801204c:	8839      	ldrh	r1, [r7, #0]
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8012054:	b292      	uxth	r2, r2
 8012056:	1a8a      	subs	r2, r1, r2
 8012058:	b292      	uxth	r2, r2
 801205a:	b212      	sxth	r2, r2
 801205c:	4601      	mov	r1, r0
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	4798      	blx	r3
    }
 8012062:	bf00      	nop
 8012064:	3708      	adds	r7, #8
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}

0801206a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 801206a:	b480      	push	{r7}
 801206c:	b083      	sub	sp, #12
 801206e:	af00      	add	r7, sp, #0
 8012070:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012078:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012080:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012088:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 801208a:	bf00      	nop
 801208c:	370c      	adds	r7, #12
 801208e:	46bd      	mov	sp, r7
 8012090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012094:	4770      	bx	lr

08012096 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8012096:	b580      	push	{r7, lr}
 8012098:	b084      	sub	sp, #16
 801209a:	af00      	add	r7, sp, #0
 801209c:	60f8      	str	r0, [r7, #12]
 801209e:	60b9      	str	r1, [r7, #8]
 80120a0:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	f7ff ffe1 	bl	801206a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	68fa      	ldr	r2, [r7, #12]
 80120b4:	601a      	str	r2, [r3, #0]
    }
 80120b6:	bf00      	nop
 80120b8:	3710      	adds	r7, #16
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
	...

080120c0 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 80120c0:	b480      	push	{r7}
 80120c2:	af00      	add	r7, sp, #0
    {
        return instance;
 80120c4:	4b03      	ldr	r3, [pc, #12]	; (80120d4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80120c6:	681b      	ldr	r3, [r3, #0]
    }
 80120c8:	4618      	mov	r0, r3
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr
 80120d2:	bf00      	nop
 80120d4:	20005944 	.word	0x20005944

080120d8 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 80120d8:	b480      	push	{r7}
 80120da:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80120dc:	4b0b      	ldr	r3, [pc, #44]	; (801210c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d008      	beq.n	80120fa <_ZN8touchgfx3HAL3lcdEv+0x22>
 80120e8:	4b08      	ldr	r3, [pc, #32]	; (801210c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d003      	beq.n	80120fa <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 80120f2:	4b06      	ldr	r3, [pc, #24]	; (801210c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120f8:	e002      	b.n	8012100 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 80120fa:	4b04      	ldr	r3, [pc, #16]	; (801210c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	689b      	ldr	r3, [r3, #8]
        }
    }
 8012100:	4618      	mov	r0, r3
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr
 801210a:	bf00      	nop
 801210c:	20005944 	.word	0x20005944

08012110 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8012118:	4a07      	ldr	r2, [pc, #28]	; (8012138 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	601a      	str	r2, [r3, #0]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	2200      	movs	r2, #0
 8012122:	605a      	str	r2, [r3, #4]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2200      	movs	r2, #0
 8012128:	721a      	strb	r2, [r3, #8]
    {
    }
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	4618      	mov	r0, r3
 801212e:	370c      	adds	r7, #12
 8012130:	46bd      	mov	sp, r7
 8012132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012136:	4770      	bx	lr
 8012138:	0802b864 	.word	0x0802b864

0801213c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 801213c:	b480      	push	{r7}
 801213e:	b083      	sub	sp, #12
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
    {
 8012144:	4a04      	ldr	r2, [pc, #16]	; (8012158 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	601a      	str	r2, [r3, #0]
    }
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	4618      	mov	r0, r3
 801214e:	370c      	adds	r7, #12
 8012150:	46bd      	mov	sp, r7
 8012152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012156:	4770      	bx	lr
 8012158:	0802b864 	.word	0x0802b864

0801215c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 801215c:	b580      	push	{r7, lr}
 801215e:	b082      	sub	sp, #8
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
    }
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f7ff ffe9 	bl	801213c <_ZN8touchgfx10TransitionD1Ev>
 801216a:	210c      	movs	r1, #12
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f017 fa82 	bl	8029676 <_ZdlPvj>
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	4618      	mov	r0, r3
 8012176:	3708      	adds	r7, #8
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 801217c:	b480      	push	{r7}
 801217e:	b083      	sub	sp, #12
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
    {
    }
 8012184:	bf00      	nop
 8012186:	370c      	adds	r7, #12
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr

08012190 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8012190:	b480      	push	{r7}
 8012192:	b083      	sub	sp, #12
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
    {
    }
 8012198:	bf00      	nop
 801219a:	370c      	adds	r7, #12
 801219c:	46bd      	mov	sp, r7
 801219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a2:	4770      	bx	lr

080121a4 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80121a4:	b480      	push	{r7}
 80121a6:	b083      	sub	sp, #12
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
    {
    }
 80121ac:	bf00      	nop
 80121ae:	370c      	adds	r7, #12
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr

080121b8 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 80121c0:	f008 fb1e 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 80121c4:	4603      	mov	r3, r0
 80121c6:	681a      	ldr	r2, [r3, #0]
 80121c8:	3230      	adds	r2, #48	; 0x30
 80121ca:	6812      	ldr	r2, [r2, #0]
 80121cc:	4618      	mov	r0, r3
 80121ce:	4790      	blx	r2
    }
 80121d0:	bf00      	nop
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	683a      	ldr	r2, [r7, #0]
 80121e6:	605a      	str	r2, [r3, #4]
    }
 80121e8:	bf00      	nop
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr

080121f4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	4a05      	ldr	r2, [pc, #20]	; (8012214 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	601a      	str	r2, [r3, #0]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	4618      	mov	r0, r3
 8012206:	f7ff fd8f 	bl	8011d28 <_ZN8touchgfx15UIEventListenerD1Ev>
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	4618      	mov	r0, r3
 801220e:	3708      	adds	r7, #8
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}
 8012214:	0802d460 	.word	0x0802d460

08012218 <_ZN8touchgfx11ApplicationD0Ev>:
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7ff ffe7 	bl	80121f4 <_ZN8touchgfx11ApplicationD1Ev>
 8012226:	f44f 719c 	mov.w	r1, #312	; 0x138
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f017 fa23 	bl	8029676 <_ZdlPvj>
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	4618      	mov	r0, r3
 8012234:	3708      	adds	r7, #8
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
	...

0801223c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	4618      	mov	r0, r3
 8012248:	f008 fb44 	bl	801a8d4 <_ZN8touchgfx11ApplicationC1Ev>
 801224c:	4a09      	ldr	r2, [pc, #36]	; (8012274 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	601a      	str	r2, [r3, #0]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2200      	movs	r2, #0
 8012256:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2200      	movs	r2, #0
 801225e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	4a04      	ldr	r2, [pc, #16]	; (8012278 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8012266:	6013      	str	r3, [r2, #0]
    }
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	4618      	mov	r0, r3
 801226c:	3708      	adds	r7, #8
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	0802b820 	.word	0x0802b820
 8012278:	20005990 	.word	0x20005990

0801227c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 801227c:	b580      	push	{r7, lr}
 801227e:	b082      	sub	sp, #8
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 f804 	bl	8012292 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 801228a:	bf00      	nop
 801228c:	3708      	adds	r7, #8
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8012292:	b580      	push	{r7, lr}
 8012294:	b082      	sub	sp, #8
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d00f      	beq.n	80122c4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	330c      	adds	r3, #12
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	4610      	mov	r0, r2
 80122b8:	4798      	blx	r3
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d001      	beq.n	80122c4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80122c0:	2301      	movs	r3, #1
 80122c2:	e000      	b.n	80122c6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80122c4:	2300      	movs	r3, #0
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d00e      	beq.n	80122e8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	3308      	adds	r3, #8
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4610      	mov	r0, r2
 80122de:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2200      	movs	r2, #0
 80122e4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 80122e8:	bf00      	nop
 80122ea:	3708      	adds	r7, #8
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80122f0:	b480      	push	{r7}
 80122f2:	b083      	sub	sp, #12
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
 80122f8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	683a      	ldr	r2, [r7, #0]
 80122fe:	601a      	str	r2, [r3, #0]
    }
 8012300:	bf00      	nop
 8012302:	370c      	adds	r7, #12
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr

0801230c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	4a05      	ldr	r2, [pc, #20]	; (801232c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	601a      	str	r2, [r3, #0]
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	4618      	mov	r0, r3
 801231e:	f7ff ff69 	bl	80121f4 <_ZN8touchgfx11ApplicationD1Ev>
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	4618      	mov	r0, r3
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	0802b820 	.word	0x0802b820

08012330 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f7ff ffe7 	bl	801230c <_ZN8touchgfx14MVPApplicationD1Ev>
 801233e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f017 f997 	bl	8029676 <_ZdlPvj>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	4618      	mov	r0, r3
 801234c:	3708      	adds	r7, #8
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
	...

08012354 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8012354:	b580      	push	{r7, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	4a08      	ldr	r2, [pc, #32]	; (8012380 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	601a      	str	r2, [r3, #0]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012368:	4618      	mov	r0, r3
 801236a:	f000 fde9 	bl	8012f40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	4618      	mov	r0, r3
 8012372:	f7ff ffcb 	bl	801230c <_ZN8touchgfx14MVPApplicationD1Ev>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	4618      	mov	r0, r3
 801237a:	3708      	adds	r7, #8
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	0802b7c4 	.word	0x0802b7c4

08012384 <_ZN23FrontendApplicationBaseD0Ev>:
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f7ff ffe1 	bl	8012354 <_ZN23FrontendApplicationBaseD1Ev>
 8012392:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f017 f96d 	bl	8029676 <_ZdlPvj>
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	4618      	mov	r0, r3
 80123a0:	3708      	adds	r7, #8
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}

080123a6 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80123a6:	b480      	push	{r7}
 80123a8:	b083      	sub	sp, #12
 80123aa:	af00      	add	r7, sp, #0
 80123ac:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2201      	movs	r2, #1
 80123b2:	721a      	strb	r2, [r3, #8]
    }
 80123b4:	bf00      	nop
 80123b6:	370c      	adds	r7, #12
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr

080123c0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b084      	sub	sp, #16
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	60f8      	str	r0, [r7, #12]
 80123c8:	607b      	str	r3, [r7, #4]
 80123ca:	460b      	mov	r3, r1
 80123cc:	817b      	strh	r3, [r7, #10]
 80123ce:	4613      	mov	r3, r2
 80123d0:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7ff fe0b 	bl	8011ff0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80123da:	4603      	mov	r3, r0
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d008      	beq.n	80123f2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7ff fe11 	bl	801200a <_ZNK8touchgfx8Drawable11isTouchableEv>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d001      	beq.n	80123f2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80123ee:	2301      	movs	r3, #1
 80123f0:	e000      	b.n	80123f4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80123f2:	2300      	movs	r3, #0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d002      	beq.n	80123fe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80123f8:	68fa      	ldr	r2, [r7, #12]
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	601a      	str	r2, [r3, #0]
        }
    }
 80123fe:	bf00      	nop
 8012400:	3710      	adds	r7, #16
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}

08012406 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8012406:	b480      	push	{r7}
 8012408:	b083      	sub	sp, #12
 801240a:	af00      	add	r7, sp, #0
 801240c:	6078      	str	r0, [r7, #4]
 801240e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	683a      	ldr	r2, [r7, #0]
 8012414:	605a      	str	r2, [r3, #4]
    }
 8012416:	bf00      	nop
 8012418:	370c      	adds	r7, #12
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr
	...

08012424 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	4a05      	ldr	r2, [pc, #20]	; (8012444 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	601a      	str	r2, [r3, #0]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	4618      	mov	r0, r3
 8012436:	f7ff fcd5 	bl	8011de4 <_ZN8touchgfx8DrawableD1Ev>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	4618      	mov	r0, r3
 801243e:	3708      	adds	r7, #8
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}
 8012444:	0802b73c 	.word	0x0802b73c

08012448 <_ZN8touchgfx6WidgetD0Ev>:
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f7ff ffe7 	bl	8012424 <_ZN8touchgfx6WidgetD1Ev>
 8012456:	2128      	movs	r1, #40	; 0x28
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f017 f90c 	bl	8029676 <_ZdlPvj>
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	4618      	mov	r0, r3
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8012468:	b580      	push	{r7, lr}
 801246a:	b084      	sub	sp, #16
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	60b9      	str	r1, [r7, #8]
 8012472:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	4618      	mov	r0, r3
 8012478:	f7ff fee0 	bl	801223c <_ZN8touchgfx14MVPApplicationC1Ev>
 801247c:	4a13      	ldr	r2, [pc, #76]	; (80124cc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	601a      	str	r2, [r3, #0]
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012488:	4618      	mov	r0, r3
 801248a:	f000 f8e5 	bl	8012658 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	68ba      	ldr	r2, [r7, #8]
 801249a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 801249e:	f7ff fe0f 	bl	80120c0 <_ZN8touchgfx3HAL11getInstanceEv>
 80124a2:	4603      	mov	r3, r0
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	3208      	adds	r2, #8
 80124a8:	6812      	ldr	r2, [r2, #0]
 80124aa:	2100      	movs	r1, #0
 80124ac:	4618      	mov	r0, r3
 80124ae:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80124b0:	2000      	movs	r0, #0
 80124b2:	f002 f8e7 	bl	8014684 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80124b6:	f7ff fe0f 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 80124ba:	4603      	mov	r3, r0
 80124bc:	4618      	mov	r0, r3
 80124be:	f00f ffb2 	bl	8022426 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	4618      	mov	r0, r3
 80124c6:	3710      	adds	r7, #16
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}
 80124cc:	0802b7c4 	.word	0x0802b7c4

080124d0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80124d0:	b480      	push	{r7}
 80124d2:	b083      	sub	sp, #12
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4618      	mov	r0, r3
 80124de:	370c      	adds	r7, #12
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr

080124e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	6039      	str	r1, [r7, #0]
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	683a      	ldr	r2, [r7, #0]
 80124f6:	4611      	mov	r1, r2
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7ff ffe9 	bl	80124d0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	685a      	ldr	r2, [r3, #4]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	605a      	str	r2, [r3, #4]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	683a      	ldr	r2, [r7, #0]
 801250a:	3308      	adds	r3, #8
 801250c:	3208      	adds	r2, #8
 801250e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012512:	e883 0003 	stmia.w	r3, {r0, r1}
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	4618      	mov	r0, r3
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8012520:	b590      	push	{r4, r7, lr}
 8012522:	b089      	sub	sp, #36	; 0x24
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801252e:	4b10      	ldr	r3, [pc, #64]	; (8012570 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8012530:	61bb      	str	r3, [r7, #24]
 8012532:	2300      	movs	r3, #0
 8012534:	61fb      	str	r3, [r7, #28]
 8012536:	f107 0008 	add.w	r0, r7, #8
 801253a:	f107 0318 	add.w	r3, r7, #24
 801253e:	cb0c      	ldmia	r3, {r2, r3}
 8012540:	6879      	ldr	r1, [r7, #4]
 8012542:	f000 f8a5 	bl	8012690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8012546:	f107 0308 	add.w	r3, r7, #8
 801254a:	4619      	mov	r1, r3
 801254c:	4620      	mov	r0, r4
 801254e:	f7ff ffcb 	bl	80124e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8012552:	f107 0308 	add.w	r3, r7, #8
 8012556:	4618      	mov	r0, r3
 8012558:	f000 fcf2 	bl	8012f40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8012568:	bf00      	nop
 801256a:	3724      	adds	r7, #36	; 0x24
 801256c:	46bd      	mov	sp, r7
 801256e:	bd90      	pop	{r4, r7, pc}
 8012570:	08012575 	.word	0x08012575

08012574 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b084      	sub	sp, #16
 8012578:	af02      	add	r7, sp, #8
 801257a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8012588:	461a      	mov	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012590:	9300      	str	r3, [sp, #0]
 8012592:	4b04      	ldr	r3, [pc, #16]	; (80125a4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 8012594:	4804      	ldr	r0, [pc, #16]	; (80125a8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 8012596:	f000 f8ad 	bl	80126f4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801259a:	bf00      	nop
 801259c:	3708      	adds	r7, #8
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	20005984 	.word	0x20005984
 80125a8:	20005980 	.word	0x20005980

080125ac <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
{
 80125ac:	b590      	push	{r4, r7, lr}
 80125ae:	b089      	sub	sp, #36	; 0x24
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionEastImpl);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80125ba:	4b10      	ldr	r3, [pc, #64]	; (80125fc <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv+0x50>)
 80125bc:	61bb      	str	r3, [r7, #24]
 80125be:	2300      	movs	r3, #0
 80125c0:	61fb      	str	r3, [r7, #28]
 80125c2:	f107 0008 	add.w	r0, r7, #8
 80125c6:	f107 0318 	add.w	r3, r7, #24
 80125ca:	cb0c      	ldmia	r3, {r2, r3}
 80125cc:	6879      	ldr	r1, [r7, #4]
 80125ce:	f000 f85f 	bl	8012690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80125d2:	f107 0308 	add.w	r3, r7, #8
 80125d6:	4619      	mov	r1, r3
 80125d8:	4620      	mov	r0, r4
 80125da:	f7ff ff85 	bl	80124e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80125de:	f107 0308 	add.w	r3, r7, #8
 80125e2:	4618      	mov	r0, r3
 80125e4:	f000 fcac 	bl	8012f40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80125f4:	bf00      	nop
 80125f6:	3724      	adds	r7, #36	; 0x24
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd90      	pop	{r4, r7, pc}
 80125fc:	08012601 	.word	0x08012601

08012600 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl()
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b084      	sub	sp, #16
 8012604:	af02      	add	r7, sp, #8
 8012606:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8012614:	461a      	mov	r2, r3
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 801261c:	9300      	str	r3, [sp, #0]
 801261e:	4b04      	ldr	r3, [pc, #16]	; (8012630 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x30>)
 8012620:	4804      	ldr	r0, [pc, #16]	; (8012634 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x34>)
 8012622:	f000 f981 	bl	8012928 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8012626:	bf00      	nop
 8012628:	3708      	adds	r7, #8
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	20005984 	.word	0x20005984
 8012634:	20005980 	.word	0x20005980

08012638 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	4a04      	ldr	r2, [pc, #16]	; (8012654 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	601a      	str	r2, [r3, #0]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	4618      	mov	r0, r3
 801264a:	370c      	adds	r7, #12
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr
 8012654:	0802b888 	.word	0x0802b888

08012658 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	4618      	mov	r0, r3
 8012664:	f7ff ffe8 	bl	8012638 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8012668:	4a08      	ldr	r2, [pc, #32]	; (801268c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	601a      	str	r2, [r3, #0]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2200      	movs	r2, #0
 8012672:	605a      	str	r2, [r3, #4]
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2200      	movs	r2, #0
 8012678:	609a      	str	r2, [r3, #8]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2200      	movs	r2, #0
 801267e:	60da      	str	r2, [r3, #12]
    {
    }
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4618      	mov	r0, r3
 8012684:	3708      	adds	r7, #8
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	0802b808 	.word	0x0802b808

08012690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	4639      	mov	r1, r7
 801269c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	4618      	mov	r0, r3
 80126a4:	f7ff ffc8 	bl	8012638 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80126a8:	4a08      	ldr	r2, [pc, #32]	; (80126cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	68ba      	ldr	r2, [r7, #8]
 80126b2:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	3308      	adds	r3, #8
 80126b8:	463a      	mov	r2, r7
 80126ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80126be:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	4618      	mov	r0, r3
 80126c6:	3710      	adds	r7, #16
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}
 80126cc:	0802b808 	.word	0x0802b808

080126d0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b082      	sub	sp, #8
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	4618      	mov	r0, r3
 80126dc:	f7ff fd18 	bl	8012110 <_ZN8touchgfx10TransitionC1Ev>
 80126e0:	4a03      	ldr	r2, [pc, #12]	; (80126f0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	601a      	str	r2, [r3, #0]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	4618      	mov	r0, r3
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	0802b7a0 	.word	0x0802b7a0

080126f4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80126f4:	b590      	push	{r4, r7, lr}
 80126f6:	b08f      	sub	sp, #60	; 0x3c
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	607a      	str	r2, [r7, #4]
 8012700:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	689a      	ldr	r2, [r3, #8]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	689b      	ldr	r3, [r3, #8]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	3320      	adds	r3, #32
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4610      	mov	r0, r2
 8012712:	4798      	blx	r3
 8012714:	4603      	mov	r3, r0
 8012716:	2baf      	cmp	r3, #175	; 0xaf
 8012718:	d805      	bhi.n	8012726 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 801271a:	4b7e      	ldr	r3, [pc, #504]	; (8012914 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 801271c:	4a7e      	ldr	r2, [pc, #504]	; (8012918 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 801271e:	21a7      	movs	r1, #167	; 0xa7
 8012720:	487e      	ldr	r0, [pc, #504]	; (801291c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012722:	f016 ffd7 	bl	80296d4 <__assert_func>
 8012726:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	685a      	ldr	r2, [r3, #4]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	3320      	adds	r3, #32
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4610      	mov	r0, r2
 8012738:	4798      	blx	r3
 801273a:	4603      	mov	r3, r0
 801273c:	2b0f      	cmp	r3, #15
 801273e:	d805      	bhi.n	801274c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8012740:	4b77      	ldr	r3, [pc, #476]	; (8012920 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8012742:	4a75      	ldr	r2, [pc, #468]	; (8012918 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012744:	21a8      	movs	r1, #168	; 0xa8
 8012746:	4875      	ldr	r0, [pc, #468]	; (801291c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012748:	f016 ffc4 	bl	80296d4 <__assert_func>
 801274c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	68da      	ldr	r2, [r3, #12]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	68db      	ldr	r3, [r3, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	3320      	adds	r3, #32
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	4610      	mov	r0, r2
 801275e:	4798      	blx	r3
 8012760:	4603      	mov	r3, r0
 8012762:	2b0b      	cmp	r3, #11
 8012764:	d805      	bhi.n	8012772 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8012766:	4b6f      	ldr	r3, [pc, #444]	; (8012924 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8012768:	4a6b      	ldr	r2, [pc, #428]	; (8012918 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 801276a:	21a9      	movs	r1, #169	; 0xa9
 801276c:	486b      	ldr	r0, [pc, #428]	; (801291c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 801276e:	f016 ffb1 	bl	80296d4 <__assert_func>
 8012772:	bf00      	nop
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	62bb      	str	r3, [r7, #40]	; 0x28
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	627b      	str	r3, [r7, #36]	; 0x24
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8012780:	f008 f83e 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 8012784:	4603      	mov	r3, r0
 8012786:	4618      	mov	r0, r3
 8012788:	f008 f888 	bl	801a89c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 801278c:	6a3b      	ldr	r3, [r7, #32]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d008      	beq.n	80127a6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8012794:	6a3b      	ldr	r3, [r7, #32]
 8012796:	681a      	ldr	r2, [r3, #0]
 8012798:	6a3b      	ldr	r3, [r7, #32]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	330c      	adds	r3, #12
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	4610      	mov	r0, r2
 80127a4:	4798      	blx	r3
    if (*currentTrans)
 80127a6:	6a3b      	ldr	r3, [r7, #32]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d007      	beq.n	80127be <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 80127ae:	6a3b      	ldr	r3, [r7, #32]
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	6a3b      	ldr	r3, [r7, #32]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	4610      	mov	r0, r2
 80127bc:	4798      	blx	r3
    if (*currentScreen)
 80127be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d008      	beq.n	80127d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 80127c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c8:	681a      	ldr	r2, [r3, #0]
 80127ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	3314      	adds	r3, #20
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4610      	mov	r0, r2
 80127d6:	4798      	blx	r3
    if (*currentPresenter)
 80127d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d008      	beq.n	80127f2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 80127e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	3304      	adds	r3, #4
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	4610      	mov	r0, r2
 80127f0:	4798      	blx	r3
    if (*currentScreen)
 80127f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d007      	beq.n	801280a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 80127fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127fc:	681a      	ldr	r2, [r3, #0]
 80127fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	4610      	mov	r0, r2
 8012808:	4798      	blx	r3
    if (*currentPresenter)
 801280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d008      	beq.n	8012824 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8012812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012814:	681a      	ldr	r2, [r3, #0]
 8012816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	3308      	adds	r3, #8
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4610      	mov	r0, r2
 8012822:	4798      	blx	r3
}
 8012824:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	68db      	ldr	r3, [r3, #12]
 801282a:	2100      	movs	r1, #0
 801282c:	4618      	mov	r0, r3
 801282e:	f000 f999 	bl	8012b64 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8012832:	4603      	mov	r3, r0
 8012834:	4619      	mov	r1, r3
 8012836:	200c      	movs	r0, #12
 8012838:	f7ff fa28 	bl	8011c8c <_ZnwjPv>
 801283c:	4604      	mov	r4, r0
 801283e:	4620      	mov	r0, r4
 8012840:	f7ff ff46 	bl	80126d0 <_ZN8touchgfx12NoTransitionC1Ev>
 8012844:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	689b      	ldr	r3, [r3, #8]
 801284a:	2100      	movs	r1, #0
 801284c:	4618      	mov	r0, r3
 801284e:	f000 f99c 	bl	8012b8a <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8012852:	4603      	mov	r3, r0
 8012854:	4619      	mov	r1, r3
 8012856:	20b0      	movs	r0, #176	; 0xb0
 8012858:	f7ff fa18 	bl	8011c8c <_ZnwjPv>
 801285c:	4604      	mov	r4, r0
 801285e:	4620      	mov	r0, r4
 8012860:	f002 fa18 	bl	8014c94 <_ZN10screenViewC1Ev>
 8012864:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	2100      	movs	r1, #0
 801286c:	4618      	mov	r0, r3
 801286e:	f000 f99f 	bl	8012bb0 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8012872:	4603      	mov	r3, r0
 8012874:	4619      	mov	r1, r3
 8012876:	2010      	movs	r0, #16
 8012878:	f7ff fa08 	bl	8011c8c <_ZnwjPv>
 801287c:	4604      	mov	r4, r0
 801287e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012880:	4620      	mov	r0, r4
 8012882:	f002 f9b1 	bl	8014be8 <_ZN15screenPresenterC1ER10screenView>
 8012886:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801288c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012892:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012898:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801289c:	2b00      	cmp	r3, #0
 801289e:	d002      	beq.n	80128a6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80128a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a2:	3304      	adds	r3, #4
 80128a4:	e000      	b.n	80128a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80128a6:	2300      	movs	r3, #0
 80128a8:	4619      	mov	r1, r3
 80128aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80128ac:	f7ff fd20 	bl	80122f0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80128b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b2:	3304      	adds	r3, #4
 80128b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7ff fda5 	bl	8012406 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80128bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128c0:	4618      	mov	r0, r3
 80128c2:	f000 f988 	bl	8012bd6 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 80128c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c8:	61fb      	str	r3, [r7, #28]
 80128ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128cc:	61bb      	str	r3, [r7, #24]
 80128ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128d0:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80128d2:	69fb      	ldr	r3, [r7, #28]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	330c      	adds	r3, #12
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	69f8      	ldr	r0, [r7, #28]
 80128dc:	4798      	blx	r3
    newPresenter->activate();
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	69b8      	ldr	r0, [r7, #24]
 80128e6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80128e8:	6979      	ldr	r1, [r7, #20]
 80128ea:	69f8      	ldr	r0, [r7, #28]
 80128ec:	f009 fc73 	bl	801c1d6 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	3310      	adds	r3, #16
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	6978      	ldr	r0, [r7, #20]
 80128fa:	4798      	blx	r3
    newTransition->invalidate();
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	3314      	adds	r3, #20
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	6978      	ldr	r0, [r7, #20]
 8012906:	4798      	blx	r3
}
 8012908:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 801290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801290c:	4618      	mov	r0, r3
 801290e:	373c      	adds	r7, #60	; 0x3c
 8012910:	46bd      	mov	sp, r7
 8012912:	bd90      	pop	{r4, r7, pc}
 8012914:	0802a970 	.word	0x0802a970
 8012918:	0802aa00 	.word	0x0802aa00
 801291c:	0802ab04 	.word	0x0802ab04
 8012920:	0802ab48 	.word	0x0802ab48
 8012924:	0802abec 	.word	0x0802abec

08012928 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8012928:	b590      	push	{r4, r7, lr}
 801292a:	b08f      	sub	sp, #60	; 0x3c
 801292c:	af00      	add	r7, sp, #0
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	607a      	str	r2, [r7, #4]
 8012934:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	689a      	ldr	r2, [r3, #8]
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	689b      	ldr	r3, [r3, #8]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	3320      	adds	r3, #32
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	4610      	mov	r0, r2
 8012946:	4798      	blx	r3
 8012948:	4603      	mov	r3, r0
 801294a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801294e:	d205      	bcs.n	801295c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8012950:	4b7f      	ldr	r3, [pc, #508]	; (8012b50 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012952:	4a80      	ldr	r2, [pc, #512]	; (8012b54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8012954:	21a7      	movs	r1, #167	; 0xa7
 8012956:	4880      	ldr	r0, [pc, #512]	; (8012b58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8012958:	f016 febc 	bl	80296d4 <__assert_func>
 801295c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	685a      	ldr	r2, [r3, #4]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	685b      	ldr	r3, [r3, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	3320      	adds	r3, #32
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	4610      	mov	r0, r2
 801296e:	4798      	blx	r3
 8012970:	4603      	mov	r3, r0
 8012972:	2b0f      	cmp	r3, #15
 8012974:	d805      	bhi.n	8012982 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8012976:	4b79      	ldr	r3, [pc, #484]	; (8012b5c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8012978:	4a76      	ldr	r2, [pc, #472]	; (8012b54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801297a:	21a8      	movs	r1, #168	; 0xa8
 801297c:	4876      	ldr	r0, [pc, #472]	; (8012b58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 801297e:	f016 fea9 	bl	80296d4 <__assert_func>
 8012982:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	68da      	ldr	r2, [r3, #12]
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	68db      	ldr	r3, [r3, #12]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	3320      	adds	r3, #32
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	4610      	mov	r0, r2
 8012994:	4798      	blx	r3
 8012996:	4603      	mov	r3, r0
 8012998:	2b53      	cmp	r3, #83	; 0x53
 801299a:	d805      	bhi.n	80129a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801299c:	4b70      	ldr	r3, [pc, #448]	; (8012b60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 801299e:	4a6d      	ldr	r2, [pc, #436]	; (8012b54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80129a0:	21a9      	movs	r1, #169	; 0xa9
 80129a2:	486d      	ldr	r0, [pc, #436]	; (8012b58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80129a4:	f016 fe96 	bl	80296d4 <__assert_func>
 80129a8:	bf00      	nop
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	627b      	str	r3, [r7, #36]	; 0x24
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80129b6:	f007 ff23 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 80129ba:	4603      	mov	r3, r0
 80129bc:	4618      	mov	r0, r3
 80129be:	f007 ff6d 	bl	801a89c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80129c2:	6a3b      	ldr	r3, [r7, #32]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d008      	beq.n	80129dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 80129ca:	6a3b      	ldr	r3, [r7, #32]
 80129cc:	681a      	ldr	r2, [r3, #0]
 80129ce:	6a3b      	ldr	r3, [r7, #32]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	330c      	adds	r3, #12
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	4610      	mov	r0, r2
 80129da:	4798      	blx	r3
    if (*currentTrans)
 80129dc:	6a3b      	ldr	r3, [r7, #32]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d007      	beq.n	80129f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 80129e4:	6a3b      	ldr	r3, [r7, #32]
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	6a3b      	ldr	r3, [r7, #32]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	4610      	mov	r0, r2
 80129f2:	4798      	blx	r3
    if (*currentScreen)
 80129f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d008      	beq.n	8012a0e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 80129fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129fe:	681a      	ldr	r2, [r3, #0]
 8012a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	3314      	adds	r3, #20
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	4610      	mov	r0, r2
 8012a0c:	4798      	blx	r3
    if (*currentPresenter)
 8012a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d008      	beq.n	8012a28 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8012a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	3304      	adds	r3, #4
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4610      	mov	r0, r2
 8012a26:	4798      	blx	r3
    if (*currentScreen)
 8012a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d007      	beq.n	8012a40 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8012a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a32:	681a      	ldr	r2, [r3, #0]
 8012a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	4610      	mov	r0, r2
 8012a3e:	4798      	blx	r3
    if (*currentPresenter)
 8012a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d008      	beq.n	8012a5a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8012a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	3308      	adds	r3, #8
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	4610      	mov	r0, r2
 8012a58:	4798      	blx	r3
}
 8012a5a:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	2100      	movs	r1, #0
 8012a62:	4618      	mov	r0, r3
 8012a64:	f000 f8c5 	bl	8012bf2 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	2054      	movs	r0, #84	; 0x54
 8012a6e:	f7ff f90d 	bl	8011c8c <_ZnwjPv>
 8012a72:	4604      	mov	r4, r0
 8012a74:	2114      	movs	r1, #20
 8012a76:	4620      	mov	r0, r4
 8012a78:	f000 f912 	bl	8012ca0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8012a7c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	689b      	ldr	r3, [r3, #8]
 8012a82:	2100      	movs	r1, #0
 8012a84:	4618      	mov	r0, r3
 8012a86:	f000 f96f 	bl	8012d68 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8012a92:	f7ff f8fb 	bl	8011c8c <_ZnwjPv>
 8012a96:	4604      	mov	r4, r0
 8012a98:	4620      	mov	r0, r4
 8012a9a:	f002 f82b 	bl	8014af4 <_ZN11Screen1ViewC1Ev>
 8012a9e:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	685b      	ldr	r3, [r3, #4]
 8012aa4:	2100      	movs	r1, #0
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f000 f971 	bl	8012d8e <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8012aac:	4603      	mov	r3, r0
 8012aae:	4619      	mov	r1, r3
 8012ab0:	2010      	movs	r0, #16
 8012ab2:	f7ff f8eb 	bl	8011c8c <_ZnwjPv>
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012aba:	4620      	mov	r0, r4
 8012abc:	f001 ffb0 	bl	8014a20 <_ZN16Screen1PresenterC1ER11Screen1View>
 8012ac0:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ac6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012acc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ad2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8012ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d002      	beq.n	8012ae0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8012ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012adc:	3304      	adds	r3, #4
 8012ade:	e000      	b.n	8012ae2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	4619      	mov	r1, r3
 8012ae4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012ae6:	f7ff fc03 	bl	80122f0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8012aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aec:	3304      	adds	r3, #4
 8012aee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7ff fc88 	bl	8012406 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8012af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012afa:	4618      	mov	r0, r3
 8012afc:	f000 f95a 	bl	8012db4 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8012b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b02:	61fb      	str	r3, [r7, #28]
 8012b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b06:	61bb      	str	r3, [r7, #24]
 8012b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8012b0c:	69fb      	ldr	r3, [r7, #28]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	330c      	adds	r3, #12
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	69f8      	ldr	r0, [r7, #28]
 8012b16:	4798      	blx	r3
    newPresenter->activate();
 8012b18:	69bb      	ldr	r3, [r7, #24]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	69b8      	ldr	r0, [r7, #24]
 8012b20:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8012b22:	6979      	ldr	r1, [r7, #20]
 8012b24:	69f8      	ldr	r0, [r7, #28]
 8012b26:	f009 fb56 	bl	801c1d6 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	3310      	adds	r3, #16
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	6978      	ldr	r0, [r7, #20]
 8012b34:	4798      	blx	r3
    newTransition->invalidate();
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	3314      	adds	r3, #20
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	6978      	ldr	r0, [r7, #20]
 8012b40:	4798      	blx	r3
}
 8012b42:	bf00      	nop
    return newPresenter;
 8012b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012b46:	4618      	mov	r0, r3
 8012b48:	373c      	adds	r7, #60	; 0x3c
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bd90      	pop	{r4, r7, pc}
 8012b4e:	bf00      	nop
 8012b50:	0802a970 	.word	0x0802a970
 8012b54:	0802ac90 	.word	0x0802ac90
 8012b58:	0802ab04 	.word	0x0802ab04
 8012b5c:	0802ab48 	.word	0x0802ab48
 8012b60:	0802abec 	.word	0x0802abec

08012b64 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	3324      	adds	r3, #36	; 0x24
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	887a      	ldrh	r2, [r7, #2]
 8012b7a:	4611      	mov	r1, r2
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	4798      	blx	r3
 8012b80:	4603      	mov	r3, r0
    }
 8012b82:	4618      	mov	r0, r3
 8012b84:	3708      	adds	r7, #8
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b082      	sub	sp, #8
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
 8012b92:	460b      	mov	r3, r1
 8012b94:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	3324      	adds	r3, #36	; 0x24
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	887a      	ldrh	r2, [r7, #2]
 8012ba0:	4611      	mov	r1, r2
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	4798      	blx	r3
 8012ba6:	4603      	mov	r3, r0
    }
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3708      	adds	r7, #8
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	460b      	mov	r3, r1
 8012bba:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	3324      	adds	r3, #36	; 0x24
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	887a      	ldrh	r2, [r7, #2]
 8012bc6:	4611      	mov	r1, r2
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	4798      	blx	r3
 8012bcc:	4603      	mov	r3, r0
    }
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3708      	adds	r7, #8
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8012bd6:	b480      	push	{r7}
 8012bd8:	b083      	sub	sp, #12
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
 8012bde:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	683a      	ldr	r2, [r7, #0]
 8012be4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012be6:	bf00      	nop
 8012be8:	370c      	adds	r7, #12
 8012bea:	46bd      	mov	sp, r7
 8012bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf0:	4770      	bx	lr

08012bf2 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8012bf2:	b580      	push	{r7, lr}
 8012bf4:	b082      	sub	sp, #8
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
 8012bfa:	460b      	mov	r3, r1
 8012bfc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	3324      	adds	r3, #36	; 0x24
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	887a      	ldrh	r2, [r7, #2]
 8012c08:	4611      	mov	r1, r2
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	4798      	blx	r3
 8012c0e:	4603      	mov	r3, r0
    }
 8012c10:	4618      	mov	r0, r3
 8012c12:	3708      	adds	r7, #8
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}

08012c18 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	4a05      	ldr	r2, [pc, #20]	; (8012c38 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	601a      	str	r2, [r3, #0]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7ff fbfb 	bl	8012424 <_ZN8touchgfx6WidgetD1Ev>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	4618      	mov	r0, r3
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	0802ceec 	.word	0x0802ceec

08012c3c <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f7ff ffe7 	bl	8012c18 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8012c4a:	212c      	movs	r1, #44	; 0x2c
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f016 fd12 	bl	8029676 <_ZdlPvj>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	4618      	mov	r0, r3
 8012c56:	3708      	adds	r7, #8
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	4a05      	ldr	r2, [pc, #20]	; (8012c7c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	601a      	str	r2, [r3, #0]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f000 f8f9 	bl	8012e64 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	4618      	mov	r0, r3
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	0802b70c 	.word	0x0802b70c

08012c80 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b082      	sub	sp, #8
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f7ff ffe7 	bl	8012c5c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8012c8e:	2110      	movs	r1, #16
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f016 fcf0 	bl	8029676 <_ZdlPvj>
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3708      	adds	r7, #8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}

08012ca0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8012ca0:	b590      	push	{r4, r7, lr}
 8012ca2:	b087      	sub	sp, #28
 8012ca4:	af02      	add	r7, sp, #8
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	460b      	mov	r3, r1
 8012caa:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7ff fa2e 	bl	8012110 <_ZN8touchgfx10TransitionC1Ev>
 8012cb4:	4a27      	ldr	r2, [pc, #156]	; (8012d54 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb4>)
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	601a      	str	r2, [r3, #0]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	330c      	adds	r3, #12
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f005 fb0a 	bl	80182d8 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8012cd4:	4a20      	ldr	r2, [pc, #128]	; (8012d58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb8>)
 8012cd6:	f107 0308 	add.w	r3, r7, #8
 8012cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012cde:	e883 0003 	stmia.w	r3, {r0, r1}
 8012ce2:	f107 0308 	add.w	r3, r7, #8
 8012ce6:	cb0c      	ldmia	r3, {r2, r3}
 8012ce8:	6879      	ldr	r1, [r7, #4]
 8012cea:	4620      	mov	r0, r4
 8012cec:	f000 f89a 	bl	8012e24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	78fa      	ldrb	r2, [r7, #3]
 8012cf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2200      	movs	r2, #0
 8012d04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8012d08:	4b14      	ldr	r3, [pc, #80]	; (8012d5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xbc>)
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d01c      	beq.n	8012d4a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xaa>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f103 000c 	add.w	r0, r3, #12
 8012d16:	4b12      	ldr	r3, [pc, #72]	; (8012d60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 8012d18:	881b      	ldrh	r3, [r3, #0]
 8012d1a:	b21a      	sxth	r2, r3
 8012d1c:	4b11      	ldr	r3, [pc, #68]	; (8012d64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc4>)
 8012d1e:	881b      	ldrh	r3, [r3, #0]
 8012d20:	b21b      	sxth	r3, r3
 8012d22:	9300      	str	r3, [sp, #0]
 8012d24:	4613      	mov	r3, r2
 8012d26:	2200      	movs	r2, #0
 8012d28:	2100      	movs	r1, #0
 8012d2a:	f7ff f886 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	330c      	adds	r3, #12
 8012d32:	4618      	mov	r0, r3
 8012d34:	f005 fa54 	bl	80181e0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (templateDirection)
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8012d38:	4b09      	ldr	r3, [pc, #36]	; (8012d60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 8012d3a:	881b      	ldrh	r3, [r3, #0]
 8012d3c:	425b      	negs	r3, r3
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	b21a      	sxth	r2, r3
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 8012d48:	bf00      	nop
                done = true;
                // Nothing to do here
                break;
            }
        }
    }
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	3714      	adds	r7, #20
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd90      	pop	{r4, r7, pc}
 8012d54:	0802b6e0 	.word	0x0802b6e0
 8012d58:	0802ada8 	.word	0x0802ada8
 8012d5c:	20005943 	.word	0x20005943
 8012d60:	20005938 	.word	0x20005938
 8012d64:	2000593a 	.word	0x2000593a

08012d68 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b082      	sub	sp, #8
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	460b      	mov	r3, r1
 8012d72:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	3324      	adds	r3, #36	; 0x24
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	887a      	ldrh	r2, [r7, #2]
 8012d7e:	4611      	mov	r1, r2
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	4798      	blx	r3
 8012d84:	4603      	mov	r3, r0
    }
 8012d86:	4618      	mov	r0, r3
 8012d88:	3708      	adds	r7, #8
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}

08012d8e <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8012d8e:	b580      	push	{r7, lr}
 8012d90:	b082      	sub	sp, #8
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	6078      	str	r0, [r7, #4]
 8012d96:	460b      	mov	r3, r1
 8012d98:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	3324      	adds	r3, #36	; 0x24
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	887a      	ldrh	r2, [r7, #2]
 8012da4:	4611      	mov	r1, r2
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	4798      	blx	r3
 8012daa:	4603      	mov	r3, r0
    }
 8012dac:	4618      	mov	r0, r3
 8012dae:	3708      	adds	r7, #8
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& presenter)
 8012db4:	b480      	push	{r7}
 8012db6:	b083      	sub	sp, #12
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	683a      	ldr	r2, [r7, #0]
 8012dc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012dc4:	bf00      	nop
 8012dc6:	370c      	adds	r7, #12
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dce:	4770      	bx	lr

08012dd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dde:	683a      	ldr	r2, [r7, #0]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d00a      	beq.n	8012dfa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2a>

        switch (templateDirection)
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	3350      	adds	r3, #80	; 0x50
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	f9b2 1050 	ldrsh.w	r1, [r2, #80]	; 0x50
 8012df2:	2200      	movs	r2, #0
 8012df4:	6838      	ldr	r0, [r7, #0]
 8012df6:	4798      	blx	r3
            break;
 8012df8:	e000      	b.n	8012dfc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 8012dfa:	bf00      	nop
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
            break;
        }
    }
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
	...

08012e04 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8012e04:	b480      	push	{r7}
 8012e06:	b083      	sub	sp, #12
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	4a04      	ldr	r2, [pc, #16]	; (8012e20 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	601a      	str	r2, [r3, #0]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	4618      	mov	r0, r3
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr
 8012e20:	0802b724 	.word	0x0802b724

08012e24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	60f8      	str	r0, [r7, #12]
 8012e2c:	60b9      	str	r1, [r7, #8]
 8012e2e:	4639      	mov	r1, r7
 8012e30:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7ff ffe4 	bl	8012e04 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8012e3c:	4a08      	ldr	r2, [pc, #32]	; (8012e60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	68ba      	ldr	r2, [r7, #8]
 8012e46:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	3308      	adds	r3, #8
 8012e4c:	463a      	mov	r2, r7
 8012e4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e52:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3710      	adds	r7, #16
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	0802b70c 	.word	0x0802b70c

08012e64 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8012e64:	b480      	push	{r7}
 8012e66:	b083      	sub	sp, #12
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
    }
 8012e6c:	4a04      	ldr	r2, [pc, #16]	; (8012e80 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	601a      	str	r2, [r3, #0]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	4618      	mov	r0, r3
 8012e76:	370c      	adds	r7, #12
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7e:	4770      	bx	lr
 8012e80:	0802b724 	.word	0x0802b724

08012e84 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b082      	sub	sp, #8
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
    }
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f7ff ffe9 	bl	8012e64 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8012e92:	2104      	movs	r1, #4
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f016 fbee 	bl	8029676 <_ZdlPvj>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	4a0a      	ldr	r2, [pc, #40]	; (8012ed8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	601a      	str	r2, [r3, #0]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	333c      	adds	r3, #60	; 0x3c
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7ff fed0 	bl	8012c5c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	330c      	adds	r3, #12
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7ff fea9 	bl	8012c18 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7ff f937 	bl	801213c <_ZN8touchgfx10TransitionD1Ev>
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3708      	adds	r7, #8
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	0802b6e0 	.word	0x0802b6e0

08012edc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f7ff ffdd 	bl	8012ea4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8012eea:	2154      	movs	r1, #84	; 0x54
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f016 fbc2 	bl	8029676 <_ZdlPvj>
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3708      	adds	r7, #8
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}

08012efc <_ZN8touchgfx12NoTransitionD1Ev>:
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	4a05      	ldr	r2, [pc, #20]	; (8012f1c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	601a      	str	r2, [r3, #0]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7ff f915 	bl	801213c <_ZN8touchgfx10TransitionD1Ev>
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	4618      	mov	r0, r3
 8012f16:	3708      	adds	r7, #8
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}
 8012f1c:	0802b7a0 	.word	0x0802b7a0

08012f20 <_ZN8touchgfx12NoTransitionD0Ev>:
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f7ff ffe7 	bl	8012efc <_ZN8touchgfx12NoTransitionD1Ev>
 8012f2e:	210c      	movs	r1, #12
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f016 fba0 	bl	8029676 <_ZdlPvj>
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3708      	adds	r7, #8
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
 8012f48:	4a05      	ldr	r2, [pc, #20]	; (8012f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	601a      	str	r2, [r3, #0]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7fe ff27 	bl	8011da4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3708      	adds	r7, #8
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	0802b808 	.word	0x0802b808

08012f64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b082      	sub	sp, #8
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7ff ffe7 	bl	8012f40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8012f72:	2110      	movs	r1, #16
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f016 fb7e 	bl	8029676 <_ZdlPvj>
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3708      	adds	r7, #8
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b082      	sub	sp, #8
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8012f8c:	4b40      	ldr	r3, [pc, #256]	; (8013090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x10c>)
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	f083 0301 	eor.w	r3, r3, #1
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d003      	beq.n	8012fa2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2201      	movs	r2, #1
 8012f9e:	721a      	strb	r2, [r3, #8]
            return;
 8012fa0:	e073      	b.n	801308a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7ff f8e9 	bl	801217c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012fb0:	3301      	adds	r3, #1
 8012fb2:	b2da      	uxtb	r2, r3
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d82f      	bhi.n	801302a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012fd0:	b298      	uxth	r0, r3
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	2100      	movs	r1, #0
 8012fe2:	f009 f8fe 	bl	801c1e2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	461a      	mov	r2, r3
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	f003 0301 	and.w	r3, r3, #1
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d01b      	beq.n	801303a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8013008:	b29b      	uxth	r3, r3
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 8013010:	2a00      	cmp	r2, #0
 8013012:	dd01      	ble.n	8013018 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8013014:	2201      	movs	r2, #1
 8013016:	e001      	b.n	801301c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8013018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801301c:	4413      	add	r3, r2
 801301e:	b29b      	uxth	r3, r3
 8013020:	b21a      	sxth	r2, r3
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8013028:	e007      	b.n	801303a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2201      	movs	r2, #1
 801302e:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2200      	movs	r2, #0
 8013034:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 8013038:	e027      	b.n	801308a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getX();
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	330c      	adds	r3, #12
 801303e:	4618      	mov	r0, r3
 8013040:	f7fe ff1c 	bl	8011e7c <_ZNK8touchgfx8Drawable4getXEv>
 8013044:	4603      	mov	r3, r0
 8013046:	4619      	mov	r1, r3
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 801304e:	b29a      	uxth	r2, r3
 8013050:	b28b      	uxth	r3, r1
 8013052:	1ad3      	subs	r3, r2, r3
 8013054:	b29b      	uxth	r3, r3
 8013056:	b21a      	sxth	r2, r3
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f103 000c 	add.w	r0, r3, #12
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 801306a:	2200      	movs	r2, #0
 801306c:	4619      	mov	r1, r3
 801306e:	f008 fb9d 	bl	801b7ac <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8013072:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6858      	ldr	r0, [r3, #4]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	685b      	ldr	r3, [r3, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	3374      	adds	r3, #116	; 0x74
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	323c      	adds	r2, #60	; 0x3c
 8013086:	4611      	mov	r1, r2
 8013088:	4798      	blx	r3
    }
 801308a:	3708      	adds	r7, #8
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}
 8013090:	20005943 	.word	0x20005943

08013094 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 801309c:	4b0b      	ldr	r3, [pc, #44]	; (80130cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d00e      	beq.n	80130c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d00a      	beq.n	80130c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6858      	ldr	r0, [r3, #4]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	685b      	ldr	r3, [r3, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	3360      	adds	r3, #96	; 0x60
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	687a      	ldr	r2, [r7, #4]
 80130bc:	320c      	adds	r2, #12
 80130be:	4611      	mov	r1, r2
 80130c0:	4798      	blx	r3
    }
 80130c2:	bf00      	nop
 80130c4:	3708      	adds	r7, #8
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
 80130ca:	bf00      	nop
 80130cc:	20005943 	.word	0x20005943

080130d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b088      	sub	sp, #32
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80130d8:	4b1a      	ldr	r3, [pc, #104]	; (8013144 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d02d      	beq.n	801313c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7ff f85e 	bl	80121a4 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80130e8:	4a17      	ldr	r2, [pc, #92]	; (8013148 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 80130ea:	f107 0318 	add.w	r3, r7, #24
 80130ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80130f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80130f6:	f107 0008 	add.w	r0, r7, #8
 80130fa:	f107 0318 	add.w	r3, r7, #24
 80130fe:	cb0c      	ldmia	r3, {r2, r3}
 8013100:	6879      	ldr	r1, [r7, #4]
 8013102:	f7ff fe8f 	bl	8012e24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	685a      	ldr	r2, [r3, #4]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	3374      	adds	r3, #116	; 0x74
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	f107 0108 	add.w	r1, r7, #8
 8013118:	4610      	mov	r0, r2
 801311a:	4798      	blx	r3
            screenContainer->add(snapshot);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	6858      	ldr	r0, [r3, #4]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	335c      	adds	r3, #92	; 0x5c
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	687a      	ldr	r2, [r7, #4]
 801312c:	320c      	adds	r2, #12
 801312e:	4611      	mov	r1, r2
 8013130:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8013132:	f107 0308 	add.w	r3, r7, #8
 8013136:	4618      	mov	r0, r3
 8013138:	f7ff fd90 	bl	8012c5c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 801313c:	bf00      	nop
 801313e:	3720      	adds	r7, #32
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	20005943 	.word	0x20005943
 8013148:	0802adb0 	.word	0x0802adb0

0801314c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	6039      	str	r1, [r7, #0]
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	3350      	adds	r3, #80	; 0x50
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	4a05      	ldr	r2, [pc, #20]	; (8013174 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x28>)
 8013160:	8812      	ldrh	r2, [r2, #0]
 8013162:	b211      	sxth	r1, r2
 8013164:	2200      	movs	r2, #0
 8013166:	6838      	ldr	r0, [r7, #0]
 8013168:	4798      	blx	r3
            break;
 801316a:	bf00      	nop
    }
 801316c:	bf00      	nop
 801316e:	3708      	adds	r7, #8
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}
 8013174:	20005938 	.word	0x20005938

08013178 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	687a      	ldr	r2, [r7, #4]
 8013188:	68d2      	ldr	r2, [r2, #12]
 801318a:	1052      	asrs	r2, r2, #1
 801318c:	1898      	adds	r0, r3, r2
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	68db      	ldr	r3, [r3, #12]
 8013192:	f003 0301 	and.w	r3, r3, #1
 8013196:	2b00      	cmp	r3, #0
 8013198:	d102      	bne.n	80131a0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	689b      	ldr	r3, [r3, #8]
 801319e:	e00a      	b.n	80131b6 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	687a      	ldr	r2, [r7, #4]
 80131a6:	68d2      	ldr	r2, [r2, #12]
 80131a8:	1052      	asrs	r2, r2, #1
 80131aa:	4413      	add	r3, r2
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	687a      	ldr	r2, [r7, #4]
 80131b0:	6892      	ldr	r2, [r2, #8]
 80131b2:	4413      	add	r3, r2
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	6839      	ldr	r1, [r7, #0]
 80131b8:	4798      	blx	r3
    }
 80131ba:	bf00      	nop
 80131bc:	3708      	adds	r7, #8
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}

080131c2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 80131c2:	b480      	push	{r7}
 80131c4:	b083      	sub	sp, #12
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	685b      	ldr	r3, [r3, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d010      	beq.n	80131f4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	689b      	ldr	r3, [r3, #8]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d107      	bne.n	80131ea <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	f003 0301 	and.w	r3, r3, #1
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d101      	bne.n	80131ea <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80131e6:	2301      	movs	r3, #1
 80131e8:	e000      	b.n	80131ec <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 80131ea:	2300      	movs	r3, #0
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d001      	beq.n	80131f4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80131f0:	2301      	movs	r3, #1
 80131f2:	e000      	b.n	80131f6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 80131f4:	2300      	movs	r3, #0
    }
 80131f6:	4618      	mov	r0, r3
 80131f8:	370c      	adds	r7, #12
 80131fa:	46bd      	mov	sp, r7
 80131fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013200:	4770      	bx	lr

08013202 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8013202:	b580      	push	{r7, lr}
 8013204:	b082      	sub	sp, #8
 8013206:	af00      	add	r7, sp, #0
 8013208:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	685b      	ldr	r3, [r3, #4]
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	68d2      	ldr	r2, [r2, #12]
 8013212:	1052      	asrs	r2, r2, #1
 8013214:	1899      	adds	r1, r3, r2
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	f003 0301 	and.w	r3, r3, #1
 801321e:	2b00      	cmp	r3, #0
 8013220:	d102      	bne.n	8013228 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	689b      	ldr	r3, [r3, #8]
 8013226:	e00a      	b.n	801323e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	685b      	ldr	r3, [r3, #4]
 801322c:	687a      	ldr	r2, [r7, #4]
 801322e:	68d2      	ldr	r2, [r2, #12]
 8013230:	1052      	asrs	r2, r2, #1
 8013232:	4413      	add	r3, r2
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	6892      	ldr	r2, [r2, #8]
 801323a:	4413      	add	r3, r2
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	4608      	mov	r0, r1
 8013240:	4798      	blx	r3
    }
 8013242:	bf00      	nop
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}

0801324a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801324a:	b480      	push	{r7}
 801324c:	b083      	sub	sp, #12
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d010      	beq.n	801327c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	689b      	ldr	r3, [r3, #8]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d107      	bne.n	8013272 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	68db      	ldr	r3, [r3, #12]
 8013266:	f003 0301 	and.w	r3, r3, #1
 801326a:	2b00      	cmp	r3, #0
 801326c:	d101      	bne.n	8013272 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801326e:	2301      	movs	r3, #1
 8013270:	e000      	b.n	8013274 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8013272:	2300      	movs	r3, #0
 8013274:	2b01      	cmp	r3, #1
 8013276:	d001      	beq.n	801327c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8013278:	2301      	movs	r3, #1
 801327a:	e000      	b.n	801327e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801327c:	2300      	movs	r3, #0
    }
 801327e:	4618      	mov	r0, r3
 8013280:	370c      	adds	r7, #12
 8013282:	46bd      	mov	sp, r7
 8013284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013288:	4770      	bx	lr

0801328a <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 801328a:	b480      	push	{r7}
 801328c:	b083      	sub	sp, #12
 801328e:	af00      	add	r7, sp, #0
 8013290:	6078      	str	r0, [r7, #4]
 8013292:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	683a      	ldr	r2, [r7, #0]
 8013298:	601a      	str	r2, [r3, #0]
    }
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	4618      	mov	r0, r3
 801329e:	370c      	adds	r7, #12
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr

080132a8 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80132a8:	b480      	push	{r7}
 80132aa:	b083      	sub	sp, #12
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2200      	movs	r2, #0
 80132b4:	801a      	strh	r2, [r3, #0]
        y = 0;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	2200      	movs	r2, #0
 80132ba:	805a      	strh	r2, [r3, #2]
        width = 0;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	2200      	movs	r2, #0
 80132c0:	809a      	strh	r2, [r3, #4]
        height = 0;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	2200      	movs	r2, #0
 80132c6:	80da      	strh	r2, [r3, #6]
    }
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	4618      	mov	r0, r3
 80132cc:	370c      	adds	r7, #12
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr

080132d6 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80132d6:	b480      	push	{r7}
 80132d8:	b085      	sub	sp, #20
 80132da:	af00      	add	r7, sp, #0
 80132dc:	60f8      	str	r0, [r7, #12]
 80132de:	4608      	mov	r0, r1
 80132e0:	4611      	mov	r1, r2
 80132e2:	461a      	mov	r2, r3
 80132e4:	4603      	mov	r3, r0
 80132e6:	817b      	strh	r3, [r7, #10]
 80132e8:	460b      	mov	r3, r1
 80132ea:	813b      	strh	r3, [r7, #8]
 80132ec:	4613      	mov	r3, r2
 80132ee:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	897a      	ldrh	r2, [r7, #10]
 80132f4:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	893a      	ldrh	r2, [r7, #8]
 80132fa:	805a      	strh	r2, [r3, #2]
        this->width = width;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	88fa      	ldrh	r2, [r7, #6]
 8013300:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	8b3a      	ldrh	r2, [r7, #24]
 8013306:	80da      	strh	r2, [r3, #6]
    }
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	4618      	mov	r0, r3
 801330c:	3714      	adds	r7, #20
 801330e:	46bd      	mov	sp, r7
 8013310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013314:	4770      	bx	lr

08013316 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8013316:	b480      	push	{r7}
 8013318:	b083      	sub	sp, #12
 801331a:	af00      	add	r7, sp, #0
 801331c:	6078      	str	r0, [r7, #4]
 801331e:	460b      	mov	r3, r1
 8013320:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	887a      	ldrh	r2, [r7, #2]
 8013326:	801a      	strh	r2, [r3, #0]
    {
    }
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	4618      	mov	r0, r3
 801332c:	370c      	adds	r7, #12
 801332e:	46bd      	mov	sp, r7
 8013330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013334:	4770      	bx	lr
	...

08013338 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af02      	add	r7, sp, #8
 801333e:	6078      	str	r0, [r7, #4]
          visible(true)
 8013340:	4a13      	ldr	r2, [pc, #76]	; (8013390 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	601a      	str	r2, [r3, #0]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	1d18      	adds	r0, r3, #4
 801334a:	2300      	movs	r3, #0
 801334c:	9300      	str	r3, [sp, #0]
 801334e:	2300      	movs	r3, #0
 8013350:	2200      	movs	r2, #0
 8013352:	2100      	movs	r1, #0
 8013354:	f7ff ffbf 	bl	80132d6 <_ZN8touchgfx4RectC1Essss>
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	330c      	adds	r3, #12
 801335c:	4618      	mov	r0, r3
 801335e:	f7ff ffa3 	bl	80132a8 <_ZN8touchgfx4RectC1Ev>
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2200      	movs	r2, #0
 8013366:	615a      	str	r2, [r3, #20]
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2200      	movs	r2, #0
 801336c:	619a      	str	r2, [r3, #24]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2200      	movs	r2, #0
 8013372:	61da      	str	r2, [r3, #28]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2200      	movs	r2, #0
 8013378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2201      	movs	r2, #1
 8013380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	4618      	mov	r0, r3
 8013388:	3708      	adds	r7, #8
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
 801338e:	bf00      	nop
 8013390:	0802d594 	.word	0x0802d594

08013394 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8013394:	b480      	push	{r7}
 8013396:	b083      	sub	sp, #12
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
 801339c:	460b      	mov	r3, r1
 801339e:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	78fa      	ldrb	r2, [r7, #3]
 80133a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80133a8:	bf00      	nop
 80133aa:	370c      	adds	r7, #12
 80133ac:	46bd      	mov	sp, r7
 80133ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b2:	4770      	bx	lr

080133b4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b082      	sub	sp, #8
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
    {
 80133bc:	4a06      	ldr	r2, [pc, #24]	; (80133d8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	601a      	str	r2, [r3, #0]
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	3304      	adds	r3, #4
 80133c6:	4618      	mov	r0, r3
 80133c8:	f000 fcea 	bl	8013da0 <_ZN8touchgfx9ContainerD1Ev>
    }
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	4618      	mov	r0, r3
 80133d0:	3708      	adds	r7, #8
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	0802d688 	.word	0x0802d688

080133dc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
    }
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f7ff ffe5 	bl	80133b4 <_ZN8touchgfx6ScreenD1Ev>
 80133ea:	213c      	movs	r1, #60	; 0x3c
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f016 f942 	bl	8029676 <_ZdlPvj>
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	4618      	mov	r0, r3
 80133f6:	3708      	adds	r7, #8
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}

080133fc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80133fc:	b480      	push	{r7}
 80133fe:	b083      	sub	sp, #12
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
    {
    }
 8013404:	bf00      	nop
 8013406:	370c      	adds	r7, #12
 8013408:	46bd      	mov	sp, r7
 801340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340e:	4770      	bx	lr

08013410 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8013410:	b480      	push	{r7}
 8013412:	b083      	sub	sp, #12
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
    {
    }
 8013418:	bf00      	nop
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8013424:	b480      	push	{r7}
 8013426:	b083      	sub	sp, #12
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
    {
    }
 801342c:	bf00      	nop
 801342e:	370c      	adds	r7, #12
 8013430:	46bd      	mov	sp, r7
 8013432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013436:	4770      	bx	lr

08013438 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8013438:	b480      	push	{r7}
 801343a:	b083      	sub	sp, #12
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
    {
    }
 8013440:	bf00      	nop
 8013442:	370c      	adds	r7, #12
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr

0801344c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
 8013454:	460b      	mov	r3, r1
 8013456:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013458:	bf00      	nop
 801345a:	370c      	adds	r7, #12
 801345c:	46bd      	mov	sp, r7
 801345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013462:	4770      	bx	lr

08013464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	3304      	adds	r3, #4
 8013472:	6839      	ldr	r1, [r7, #0]
 8013474:	4618      	mov	r0, r3
 8013476:	f003 fe57 	bl	8017128 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801347a:	bf00      	nop
 801347c:	3708      	adds	r7, #8
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
	...

08013484 <_ZN8touchgfx6WidgetC1Ev>:
 8013484:	b580      	push	{r7, lr}
 8013486:	b082      	sub	sp, #8
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	4618      	mov	r0, r3
 8013490:	f7ff ff52 	bl	8013338 <_ZN8touchgfx8DrawableC1Ev>
 8013494:	4a03      	ldr	r2, [pc, #12]	; (80134a4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	601a      	str	r2, [r3, #0]
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	4618      	mov	r0, r3
 801349e:	3708      	adds	r7, #8
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	0802b73c 	.word	0x0802b73c

080134a8 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b082      	sub	sp, #8
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	4618      	mov	r0, r3
 80134b4:	2326      	movs	r3, #38	; 0x26
 80134b6:	461a      	mov	r2, r3
 80134b8:	2100      	movs	r1, #0
 80134ba:	f016 fa91 	bl	80299e0 <memset>
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7ff ffdf 	bl	8013484 <_ZN8touchgfx6WidgetC1Ev>
 80134c6:	4a0a      	ldr	r2, [pc, #40]	; (80134f0 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	601a      	str	r2, [r3, #0]
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2200      	movs	r2, #0
 80134d0:	629a      	str	r2, [r3, #40]	; 0x28
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2200      	movs	r2, #0
 80134d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	2101      	movs	r1, #1
 80134de:	4618      	mov	r0, r3
 80134e0:	f7ff ff58 	bl	8013394 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	4618      	mov	r0, r3
 80134e8:	3708      	adds	r7, #8
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
 80134ee:	bf00      	nop
 80134f0:	0802ce80 	.word	0x0802ce80

080134f4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 80134f4:	b480      	push	{r7}
 80134f6:	b083      	sub	sp, #12
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
 80134fc:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	683a      	ldr	r2, [r7, #0]
 8013502:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8013504:	bf00      	nop
 8013506:	370c      	adds	r7, #12
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr

08013510 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8013510:	b580      	push	{r7, lr}
 8013512:	b082      	sub	sp, #8
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	4a05      	ldr	r2, [pc, #20]	; (8013530 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	601a      	str	r2, [r3, #0]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	4618      	mov	r0, r3
 8013522:	f7fe ff7f 	bl	8012424 <_ZN8touchgfx6WidgetD1Ev>
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	4618      	mov	r0, r3
 801352a:	3708      	adds	r7, #8
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	0802ce80 	.word	0x0802ce80

08013534 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8013534:	b580      	push	{r7, lr}
 8013536:	b082      	sub	sp, #8
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f7ff ffe7 	bl	8013510 <_ZN8touchgfx14AbstractButtonD1Ev>
 8013542:	2130      	movs	r1, #48	; 0x30
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f016 f896 	bl	8029676 <_ZdlPvj>
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	4618      	mov	r0, r3
 801354e:	3708      	adds	r7, #8
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}

08013554 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	4618      	mov	r0, r3
 8013560:	f7ff ffa2 	bl	80134a8 <_ZN8touchgfx14AbstractButtonC1Ev>
 8013564:	4a0c      	ldr	r2, [pc, #48]	; (8013598 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	601a      	str	r2, [r3, #0]
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	332e      	adds	r3, #46	; 0x2e
 801356e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013572:	4618      	mov	r0, r3
 8013574:	f7ff fecf 	bl	8013316 <_ZN8touchgfx6BitmapC1Et>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	3330      	adds	r3, #48	; 0x30
 801357c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013580:	4618      	mov	r0, r3
 8013582:	f7ff fec8 	bl	8013316 <_ZN8touchgfx6BitmapC1Et>
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	22ff      	movs	r2, #255	; 0xff
 801358a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	4618      	mov	r0, r3
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	0802d1a4 	.word	0x0802d1a4

0801359c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	4618      	mov	r0, r3
 80135a8:	2326      	movs	r3, #38	; 0x26
 80135aa:	461a      	mov	r2, r3
 80135ac:	2100      	movs	r1, #0
 80135ae:	f016 fa17 	bl	80299e0 <memset>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7ff ff65 	bl	8013484 <_ZN8touchgfx6WidgetC1Ev>
 80135ba:	4a09      	ldr	r2, [pc, #36]	; (80135e0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	601a      	str	r2, [r3, #0]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	22ff      	movs	r2, #255	; 0xff
 80135c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	3328      	adds	r3, #40	; 0x28
 80135cc:	2100      	movs	r1, #0
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7ff fe5b 	bl	801328a <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	4618      	mov	r0, r3
 80135d8:	3708      	adds	r7, #8
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd80      	pop	{r7, pc}
 80135de:	bf00      	nop
 80135e0:	0802d0c0 	.word	0x0802d0c0

080135e4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 80135e4:	b480      	push	{r7}
 80135e6:	b083      	sub	sp, #12
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	683a      	ldr	r2, [r7, #0]
 80135f2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80135f4:	bf00      	nop
 80135f6:	370c      	adds	r7, #12
 80135f8:	46bd      	mov	sp, r7
 80135fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fe:	4770      	bx	lr

08013600 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
 8013608:	4a05      	ldr	r2, [pc, #20]	; (8013620 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	601a      	str	r2, [r3, #0]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	4618      	mov	r0, r3
 8013612:	f7fe ff07 	bl	8012424 <_ZN8touchgfx6WidgetD1Ev>
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	4618      	mov	r0, r3
 801361a:	3708      	adds	r7, #8
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}
 8013620:	0802d2f0 	.word	0x0802d2f0

08013624 <_ZN8touchgfx5ImageD0Ev>:
 8013624:	b580      	push	{r7, lr}
 8013626:	b082      	sub	sp, #8
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f7ff ffe7 	bl	8013600 <_ZN8touchgfx5ImageD1Ev>
 8013632:	212c      	movs	r1, #44	; 0x2c
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f016 f81e 	bl	8029676 <_ZdlPvj>
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	4618      	mov	r0, r3
 801363e:	3708      	adds	r7, #8
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}

08013644 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8013644:	b480      	push	{r7}
 8013646:	b083      	sub	sp, #12
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
 801364c:	460b      	mov	r3, r1
 801364e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8013650:	4a06      	ldr	r2, [pc, #24]	; (801366c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	601a      	str	r2, [r3, #0]
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	887a      	ldrh	r2, [r7, #2]
 801365a:	809a      	strh	r2, [r3, #4]
    }
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	4618      	mov	r0, r3
 8013660:	370c      	adds	r7, #12
 8013662:	46bd      	mov	sp, r7
 8013664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013668:	4770      	bx	lr
 801366a:	bf00      	nop
 801366c:	0802b66c 	.word	0x0802b66c

08013670 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8013670:	b580      	push	{r7, lr}
 8013672:	b082      	sub	sp, #8
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	4618      	mov	r0, r3
 801367c:	2326      	movs	r3, #38	; 0x26
 801367e:	461a      	mov	r2, r3
 8013680:	2100      	movs	r1, #0
 8013682:	f016 f9ad 	bl	80299e0 <memset>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	4618      	mov	r0, r3
 801368a:	f7ff fefb 	bl	8013484 <_ZN8touchgfx6WidgetC1Ev>
 801368e:	4a14      	ldr	r2, [pc, #80]	; (80136e0 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	601a      	str	r2, [r3, #0]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	3328      	adds	r3, #40	; 0x28
 8013698:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801369c:	4618      	mov	r0, r3
 801369e:	f7ff ffd1 	bl	8013644 <_ZN8touchgfx9TypedTextC1Et>
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	3330      	adds	r3, #48	; 0x30
 80136a6:	2100      	movs	r1, #0
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7ff fdee 	bl	801328a <_ZN8touchgfx9colortypeC1Em>
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2200      	movs	r2, #0
 80136b2:	869a      	strh	r2, [r3, #52]	; 0x34
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	22ff      	movs	r2, #255	; 0xff
 80136b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2200      	movs	r2, #0
 80136c0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2200      	movs	r2, #0
 80136c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2200      	movs	r2, #0
 80136d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	4618      	mov	r0, r3
 80136d8:	3708      	adds	r7, #8
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}
 80136de:	bf00      	nop
 80136e0:	0802d018 	.word	0x0802d018

080136e4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	4a08      	ldr	r2, [pc, #32]	; (8013710 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	601a      	str	r2, [r3, #0]
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	3328      	adds	r3, #40	; 0x28
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7fe f8b6 	bl	8011868 <_ZN8touchgfx9TypedTextD1Ev>
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fe fe90 	bl	8012424 <_ZN8touchgfx6WidgetD1Ev>
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	4618      	mov	r0, r3
 8013708:	3708      	adds	r7, #8
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}
 801370e:	bf00      	nop
 8013710:	0802d018 	.word	0x0802d018

08013714 <_ZN8touchgfx8TextAreaD0Ev>:
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f7ff ffe1 	bl	80136e4 <_ZN8touchgfx8TextAreaD1Ev>
 8013722:	213c      	movs	r1, #60	; 0x3c
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f015 ffa6 	bl	8029676 <_ZdlPvj>
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	4618      	mov	r0, r3
 801372e:	3708      	adds	r7, #8
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	4618      	mov	r0, r3
 8013740:	f7ff ff96 	bl	8013670 <_ZN8touchgfx8TextAreaC1Ev>
 8013744:	4a05      	ldr	r2, [pc, #20]	; (801375c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	601a      	str	r2, [r3, #0]
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2200      	movs	r2, #0
 801374e:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	4618      	mov	r0, r3
 8013754:	3708      	adds	r7, #8
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}
 801375a:	bf00      	nop
 801375c:	0802d248 	.word	0x0802d248

08013760 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	683a      	ldr	r2, [r7, #0]
 801376e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013770:	bf00      	nop
 8013772:	370c      	adds	r7, #12
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr

0801377c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 801377c:	b580      	push	{r7, lr}
 801377e:	b082      	sub	sp, #8
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	4a05      	ldr	r2, [pc, #20]	; (801379c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	601a      	str	r2, [r3, #0]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	4618      	mov	r0, r3
 801378e:	f7ff fe11 	bl	80133b4 <_ZN8touchgfx6ScreenD1Ev>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	4618      	mov	r0, r3
 8013796:	3708      	adds	r7, #8
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	0802b918 	.word	0x0802b918

080137a0 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b082      	sub	sp, #8
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f7ff ffe7 	bl	801377c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80137ae:	2140      	movs	r1, #64	; 0x40
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f015 ff60 	bl	8029676 <_ZdlPvj>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	4618      	mov	r0, r3
 80137ba:	3708      	adds	r7, #8
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}

080137c0 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b082      	sub	sp, #8
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
 80137c8:	4a16      	ldr	r2, [pc, #88]	; (8013824 <_ZN15Screen1ViewBaseD1Ev+0x64>)
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	601a      	str	r2, [r3, #0]
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80137d4:	4618      	mov	r0, r3
 80137d6:	f000 fac1 	bl	8013d5c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80137e0:	4618      	mov	r0, r3
 80137e2:	f000 fc0b 	bl	8013ffc <_ZN8touchgfx6ButtonD1Ev>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80137ec:	4618      	mov	r0, r3
 80137ee:	f000 fbe3 	bl	8013fb8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80137f8:	4618      	mov	r0, r3
 80137fa:	f000 fbb3 	bl	8013f64 <_ZN8touchgfx12TextProgressD1Ev>
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	336c      	adds	r3, #108	; 0x6c
 8013802:	4618      	mov	r0, r3
 8013804:	f000 fb80 	bl	8013f08 <_ZN8touchgfx13ImageProgressD1Ev>
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	3340      	adds	r3, #64	; 0x40
 801380c:	4618      	mov	r0, r3
 801380e:	f000 fae9 	bl	8013de4 <_ZN8touchgfx3BoxD1Ev>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	4618      	mov	r0, r3
 8013816:	f7ff ffb1 	bl	801377c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4618      	mov	r0, r3
 801381e:	3708      	adds	r7, #8
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}
 8013824:	0802b8c8 	.word	0x0802b8c8

08013828 <_ZN15Screen1ViewBaseD0Ev>:
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f7ff ffc5 	bl	80137c0 <_ZN15Screen1ViewBaseD1Ev>
 8013836:	f44f 7147 	mov.w	r1, #796	; 0x31c
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f015 ff1b 	bl	8029676 <_ZdlPvj>
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	4618      	mov	r0, r3
 8013844:	3708      	adds	r7, #8
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}

0801384a <_ZN15Screen1ViewBase19syringePumpProgressEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void syringePumpProgress()
 801384a:	b480      	push	{r7}
 801384c:	b083      	sub	sp, #12
 801384e:	af00      	add	r7, sp, #0
 8013850:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8013852:	bf00      	nop
 8013854:	370c      	adds	r7, #12
 8013856:	46bd      	mov	sp, r7
 8013858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385c:	4770      	bx	lr
	...

08013860 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8013860:	b590      	push	{r4, r7, lr}
 8013862:	b083      	sub	sp, #12
 8013864:	af00      	add	r7, sp, #0
 8013866:	4603      	mov	r3, r0
 8013868:	71fb      	strb	r3, [r7, #7]
 801386a:	460b      	mov	r3, r1
 801386c:	71bb      	strb	r3, [r7, #6]
 801386e:	4613      	mov	r3, r2
 8013870:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8013872:	f7fe fc25 	bl	80120c0 <_ZN8touchgfx3HAL11getInstanceEv>
 8013876:	4603      	mov	r3, r0
 8013878:	2b00      	cmp	r3, #0
 801387a:	d105      	bne.n	8013888 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 801387c:	4b0a      	ldr	r3, [pc, #40]	; (80138a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 801387e:	4a0b      	ldr	r2, [pc, #44]	; (80138ac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8013880:	2135      	movs	r1, #53	; 0x35
 8013882:	480b      	ldr	r0, [pc, #44]	; (80138b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8013884:	f015 ff26 	bl	80296d4 <__assert_func>
 8013888:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 801388a:	f7fe fc25 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 801388e:	6803      	ldr	r3, [r0, #0]
 8013890:	3328      	adds	r3, #40	; 0x28
 8013892:	681c      	ldr	r4, [r3, #0]
 8013894:	797b      	ldrb	r3, [r7, #5]
 8013896:	79ba      	ldrb	r2, [r7, #6]
 8013898:	79f9      	ldrb	r1, [r7, #7]
 801389a:	47a0      	blx	r4
 801389c:	4603      	mov	r3, r0
    }
 801389e:	4618      	mov	r0, r3
 80138a0:	370c      	adds	r7, #12
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd90      	pop	{r4, r7, pc}
 80138a6:	bf00      	nop
 80138a8:	0802adb8 	.word	0x0802adb8
 80138ac:	0802adfc 	.word	0x0802adfc
 80138b0:	0802ae58 	.word	0x0802ae58

080138b4 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 80138b4:	b590      	push	{r4, r7, lr}
 80138b6:	b097      	sub	sp, #92	; 0x5c
 80138b8:	af02      	add	r7, sp, #8
 80138ba:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	4618      	mov	r0, r3
 80138c0:	f000 f9e6 	bl	8013c90 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 80138c4:	4a92      	ldr	r2, [pc, #584]	; (8013b10 <_ZN15Screen1ViewBaseC1Ev+0x25c>)
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	601a      	str	r2, [r3, #0]
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	3340      	adds	r3, #64	; 0x40
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7ff fe64 	bl	801359c <_ZN8touchgfx3BoxC1Ev>
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	336c      	adds	r3, #108	; 0x6c
 80138d8:	4618      	mov	r0, r3
 80138da:	f003 f94d 	bl	8016b78 <_ZN8touchgfx13ImageProgressC1Ev>
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80138e4:	4618      	mov	r0, r3
 80138e6:	f002 ff49 	bl	801677c <_ZN8touchgfx12TextProgressC1Ev>
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80138f0:	4618      	mov	r0, r3
 80138f2:	f7ff ff1f 	bl	8013734 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7ff fe29 	bl	8013554 <_ZN8touchgfx6ButtonC1Ev>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8013908:	4b82      	ldr	r3, [pc, #520]	; (8013b14 <_ZN15Screen1ViewBaseC1Ev+0x260>)
 801390a:	613b      	str	r3, [r7, #16]
 801390c:	2300      	movs	r3, #0
 801390e:	617b      	str	r3, [r7, #20]
 8013910:	f107 0310 	add.w	r3, r7, #16
 8013914:	cb0c      	ldmia	r3, {r2, r3}
 8013916:	6879      	ldr	r1, [r7, #4]
 8013918:	f000 f9e0 	bl	8013cdc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013922:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801392c:	2200      	movs	r2, #0
 801392e:	2100      	movs	r1, #0
 8013930:	f7fe fa83 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801393a:	2200      	movs	r2, #0
 801393c:	2100      	movs	r1, #0
 801393e:	2000      	movs	r0, #0
 8013940:	f7ff ff8e 	bl	8013860 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013944:	4603      	mov	r3, r0
 8013946:	4619      	mov	r1, r3
 8013948:	4620      	mov	r0, r4
 801394a:	f7ff fe4b 	bl	80135e4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    imageProgress1.setXY(148, 79);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	336c      	adds	r3, #108	; 0x6c
 8013952:	224f      	movs	r2, #79	; 0x4f
 8013954:	2194      	movs	r1, #148	; 0x94
 8013956:	4618      	mov	r0, r3
 8013958:	f7fe fabb 	bl	8011ed2 <_ZN8touchgfx8Drawable5setXYEss>
    imageProgress1.setProgressIndicatorPosition(2, 2, 180, 16);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8013962:	2310      	movs	r3, #16
 8013964:	9300      	str	r3, [sp, #0]
 8013966:	23b4      	movs	r3, #180	; 0xb4
 8013968:	2202      	movs	r2, #2
 801396a:	2102      	movs	r1, #2
 801396c:	f002 ffb2 	bl	80168d4 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    imageProgress1.setRange(0, 100);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8013976:	2300      	movs	r3, #0
 8013978:	9300      	str	r3, [sp, #0]
 801397a:	2300      	movs	r3, #0
 801397c:	2264      	movs	r2, #100	; 0x64
 801397e:	2100      	movs	r1, #0
 8013980:	f003 fa2e 	bl	8016de0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    imageProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	336c      	adds	r3, #108	; 0x6c
 8013988:	2100      	movs	r1, #0
 801398a:	4618      	mov	r0, r3
 801398c:	f002 ff41 	bl	8016812 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    imageProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013996:	f107 0318 	add.w	r3, r7, #24
 801399a:	2102      	movs	r1, #2
 801399c:	4618      	mov	r0, r3
 801399e:	f7ff fcba 	bl	8013316 <_ZN8touchgfx6BitmapC1Et>
 80139a2:	f107 0318 	add.w	r3, r7, #24
 80139a6:	4619      	mov	r1, r3
 80139a8:	4620      	mov	r0, r4
 80139aa:	f003 fac1 	bl	8016f30 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    imageProgress1.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_PROGRESS_INDICATOR_FILL_STRIPED_NORMAL_HORIZONTAL_ID);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	336c      	adds	r3, #108	; 0x6c
 80139b2:	2104      	movs	r1, #4
 80139b4:	4618      	mov	r0, r3
 80139b6:	f002 ff6c 	bl	8016892 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    imageProgress1.setValue(60);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	336c      	adds	r3, #108	; 0x6c
 80139be:	213c      	movs	r1, #60	; 0x3c
 80139c0:	4618      	mov	r0, r3
 80139c2:	f002 ff9f 	bl	8016904 <_ZN8touchgfx13ImageProgress8setValueEi>
    imageProgress1.setAnchorAtZero(false);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	336c      	adds	r3, #108	; 0x6c
 80139ca:	2100      	movs	r1, #0
 80139cc:	4618      	mov	r0, r3
 80139ce:	f002 ff47 	bl	8016860 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    textProgress1.setXY(198, 180);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80139d8:	22b4      	movs	r2, #180	; 0xb4
 80139da:	21c6      	movs	r1, #198	; 0xc6
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fe fa78 	bl	8011ed2 <_ZN8touchgfx8Drawable5setXYEss>
    textProgress1.setProgressIndicatorPosition(0, 0, 84, 34);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 80139e8:	2322      	movs	r3, #34	; 0x22
 80139ea:	9300      	str	r3, [sp, #0]
 80139ec:	2354      	movs	r3, #84	; 0x54
 80139ee:	2200      	movs	r2, #0
 80139f0:	2100      	movs	r1, #0
 80139f2:	f002 fea5 	bl	8016740 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress1.setRange(0, 100);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 80139fc:	2300      	movs	r3, #0
 80139fe:	9300      	str	r3, [sp, #0]
 8013a00:	2300      	movs	r3, #0
 8013a02:	2264      	movs	r2, #100	; 0x64
 8013a04:	2100      	movs	r1, #0
 8013a06:	f003 f9eb 	bl	8016de0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8013a10:	2200      	movs	r2, #0
 8013a12:	2100      	movs	r1, #0
 8013a14:	2000      	movs	r0, #0
 8013a16:	f7ff ff23 	bl	8013860 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	4620      	mov	r0, r4
 8013a20:	f002 fe16 	bl	8016650 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress1.setNumberOfDecimals(0);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8013a2a:	2100      	movs	r1, #0
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f002 fe1b 	bl	8016668 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
    textProgress1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8013a38:	f107 031c 	add.w	r3, r7, #28
 8013a3c:	2100      	movs	r1, #0
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7ff fe00 	bl	8013644 <_ZN8touchgfx9TypedTextC1Et>
 8013a44:	f107 031c 	add.w	r3, r7, #28
 8013a48:	4619      	mov	r1, r3
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	f002 fe22 	bl	8016694 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
 8013a50:	f107 031c 	add.w	r3, r7, #28
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7fd ff07 	bl	8011868 <_ZN8touchgfx9TypedTextD1Ev>
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_TEXT_PROGRESS_BG_SQUARE_ID));
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8013a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a64:	2103      	movs	r1, #3
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff fc55 	bl	8013316 <_ZN8touchgfx6BitmapC1Et>
 8013a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a70:	4619      	mov	r1, r3
 8013a72:	4620      	mov	r0, r4
 8013a74:	f003 fa5c 	bl	8016f30 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress1.setValue(60);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8013a7e:	213c      	movs	r1, #60	; 0x3c
 8013a80:	4618      	mov	r0, r3
 8013a82:	f002 fe17 	bl	80166b4 <_ZN8touchgfx12TextProgress8setValueEi>

    textArea1.setXY(208, 124);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013a8c:	227c      	movs	r2, #124	; 0x7c
 8013a8e:	21d0      	movs	r1, #208	; 0xd0
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7fe fa1e 	bl	8011ed2 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	2100      	movs	r1, #0
 8013aa0:	20ff      	movs	r0, #255	; 0xff
 8013aa2:	f7ff fedd 	bl	8013860 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	643c      	str	r4, [r7, #64]	; 0x40
 8013aaa:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8013aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013aae:	68fa      	ldr	r2, [r7, #12]
 8013ab0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013ab2:	bf00      	nop
    textArea1.setLinespacing(0);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8013abc:	2300      	movs	r3, #0
 8013abe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8013ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ac4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013ac8:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013aca:	bf00      	nop
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID5).getText());
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 8013ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013ad6:	2102      	movs	r1, #2
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7ff fdb3 	bl	8013644 <_ZN8touchgfx9TypedTextC1Et>
 8013ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013ae4:	4b0c      	ldr	r3, [pc, #48]	; (8013b18 <_ZN15Screen1ViewBaseC1Ev+0x264>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d105      	bne.n	8013af8 <_ZN15Screen1ViewBaseC1Ev+0x244>
 8013aec:	4b0b      	ldr	r3, [pc, #44]	; (8013b1c <_ZN15Screen1ViewBaseC1Ev+0x268>)
 8013aee:	4a0c      	ldr	r2, [pc, #48]	; (8013b20 <_ZN15Screen1ViewBaseC1Ev+0x26c>)
 8013af0:	21b1      	movs	r1, #177	; 0xb1
 8013af2:	480c      	ldr	r0, [pc, #48]	; (8013b24 <_ZN15Screen1ViewBaseC1Ev+0x270>)
 8013af4:	f015 fdee 	bl	80296d4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013afa:	889a      	ldrh	r2, [r3, #4]
 8013afc:	4b0a      	ldr	r3, [pc, #40]	; (8013b28 <_ZN15Screen1ViewBaseC1Ev+0x274>)
 8013afe:	881b      	ldrh	r3, [r3, #0]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d315      	bcc.n	8013b30 <_ZN15Screen1ViewBaseC1Ev+0x27c>
 8013b04:	4b09      	ldr	r3, [pc, #36]	; (8013b2c <_ZN15Screen1ViewBaseC1Ev+0x278>)
 8013b06:	4a06      	ldr	r2, [pc, #24]	; (8013b20 <_ZN15Screen1ViewBaseC1Ev+0x26c>)
 8013b08:	21b2      	movs	r1, #178	; 0xb2
 8013b0a:	4806      	ldr	r0, [pc, #24]	; (8013b24 <_ZN15Screen1ViewBaseC1Ev+0x270>)
 8013b0c:	f015 fde2 	bl	80296d4 <__assert_func>
 8013b10:	0802b8c8 	.word	0x0802b8c8
 8013b14:	08013c65 	.word	0x08013c65
 8013b18:	20005994 	.word	0x20005994
 8013b1c:	0802ae98 	.word	0x0802ae98
 8013b20:	0802aedc 	.word	0x0802aedc
 8013b24:	0802af0c 	.word	0x0802af0c
 8013b28:	20005998 	.word	0x20005998
 8013b2c:	0802af50 	.word	0x0802af50
    }
 8013b30:	bf00      	nop
        return texts->getText(typedTextId);
 8013b32:	4b45      	ldr	r3, [pc, #276]	; (8013c48 <_ZN15Screen1ViewBaseC1Ev+0x394>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8013b38:	4611      	mov	r1, r2
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f000 fdf8 	bl	8014730 <_ZNK8touchgfx5Texts7getTextEt>
 8013b40:	4603      	mov	r3, r0
 8013b42:	bf00      	nop
 8013b44:	4a41      	ldr	r2, [pc, #260]	; (8013c4c <_ZN15Screen1ViewBaseC1Ev+0x398>)
 8013b46:	210a      	movs	r1, #10
 8013b48:	4620      	mov	r0, r4
 8013b4a:	f009 feb9 	bl	801d8c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013b52:	4618      	mov	r0, r3
 8013b54:	f7fd fe88 	bl	8011868 <_ZN8touchgfx9TypedTextD1Ev>
    textArea1.setWildcard(textArea1Buffer);
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8013b64:	4619      	mov	r1, r3
 8013b66:	4610      	mov	r0, r2
 8013b68:	f7ff fdfa 	bl	8013760 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea1.resizeToCurrentText();
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013b72:	4618      	mov	r0, r3
 8013b74:	f004 fd8a 	bl	801868c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8013b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b82:	2101      	movs	r1, #1
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7ff fd5d 	bl	8013644 <_ZN8touchgfx9TypedTextC1Et>
 8013b8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b8e:	4619      	mov	r1, r3
 8013b90:	4620      	mov	r0, r4
 8013b92:	f004 fd98 	bl	80186c6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8013b96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7fd fe64 	bl	8011868 <_ZN8touchgfx9TypedTextD1Ev>

    button1.setXY(12, 124);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8013ba6:	227c      	movs	r2, #124	; 0x7c
 8013ba8:	210c      	movs	r1, #12
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7fe f991 	bl	8011ed2 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f503 7431 	add.w	r4, r3, #708	; 0x2c4
 8013bb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013bba:	2100      	movs	r1, #0
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7ff fbaa 	bl	8013316 <_ZN8touchgfx6BitmapC1Et>
 8013bc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013bc6:	2101      	movs	r1, #1
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7ff fba4 	bl	8013316 <_ZN8touchgfx6BitmapC1Et>
 8013bce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8013bd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	4620      	mov	r0, r4
 8013bda:	f004 ff77 	bl	8018acc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f503 7231 	add.w	r2, r3, #708	; 0x2c4
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8013bea:	4619      	mov	r1, r3
 8013bec:	4610      	mov	r0, r2
 8013bee:	f7ff fc81 	bl	80134f4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 8013bf2:	687a      	ldr	r2, [r7, #4]
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	3340      	adds	r3, #64	; 0x40
 8013bf8:	4619      	mov	r1, r3
 8013bfa:	4610      	mov	r0, r2
 8013bfc:	f7ff fc32 	bl	8013464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageProgress1);
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	336c      	adds	r3, #108	; 0x6c
 8013c06:	4619      	mov	r1, r3
 8013c08:	4610      	mov	r0, r2
 8013c0a:	f7ff fc2b 	bl	8013464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textProgress1);
 8013c0e:	687a      	ldr	r2, [r7, #4]
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8013c16:	4619      	mov	r1, r3
 8013c18:	4610      	mov	r0, r2
 8013c1a:	f7ff fc23 	bl	8013464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8013c1e:	687a      	ldr	r2, [r7, #4]
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013c26:	4619      	mov	r1, r3
 8013c28:	4610      	mov	r0, r2
 8013c2a:	f7ff fc1b 	bl	8013464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8013c2e:	687a      	ldr	r2, [r7, #4]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8013c36:	4619      	mov	r1, r3
 8013c38:	4610      	mov	r0, r2
 8013c3a:	f7ff fc13 	bl	8013464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	4618      	mov	r0, r3
 8013c42:	3754      	adds	r7, #84	; 0x54
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd90      	pop	{r4, r7, pc}
 8013c48:	200059a0 	.word	0x200059a0
 8013c4c:	0802afa4 	.word	0x0802afa4

08013c50 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8013c50:	b480      	push	{r7}
 8013c52:	b083      	sub	sp, #12
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]

}
 8013c58:	bf00      	nop
 8013c5a:	370c      	adds	r7, #12
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr

08013c64 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8013c74:	683a      	ldr	r2, [r7, #0]
 8013c76:	429a      	cmp	r2, r3
 8013c78:	d105      	bne.n	8013c86 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked call virtual function
        //Call syringePumpProgress
        syringePumpProgress();
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	332c      	adds	r3, #44	; 0x2c
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	4798      	blx	r3
    }
}
 8013c86:	bf00      	nop
 8013c88:	3708      	adds	r7, #8
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
	...

08013c90 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b082      	sub	sp, #8
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f008 f920 	bl	801bee0 <_ZN8touchgfx6ScreenC1Ev>
 8013ca0:	4a05      	ldr	r2, [pc, #20]	; (8013cb8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	601a      	str	r2, [r3, #0]
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3708      	adds	r7, #8
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}
 8013cb6:	bf00      	nop
 8013cb8:	0802b918 	.word	0x0802b918

08013cbc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	4a04      	ldr	r2, [pc, #16]	; (8013cd8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	601a      	str	r2, [r3, #0]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	370c      	adds	r7, #12
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd6:	4770      	bx	lr
 8013cd8:	0802b94c 	.word	0x0802b94c

08013cdc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b084      	sub	sp, #16
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	4639      	mov	r1, r7
 8013ce8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7ff ffe4 	bl	8013cbc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8013cf4:	4a08      	ldr	r2, [pc, #32]	; (8013d18 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	68ba      	ldr	r2, [r7, #8]
 8013cfe:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	3308      	adds	r3, #8
 8013d04:	463a      	mov	r2, r7
 8013d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d0a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	4618      	mov	r0, r3
 8013d12:	3710      	adds	r7, #16
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}
 8013d18:	0802b900 	.word	0x0802b900

08013d1c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8013d1c:	b480      	push	{r7}
 8013d1e:	b083      	sub	sp, #12
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
    }
 8013d24:	4a04      	ldr	r2, [pc, #16]	; (8013d38 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	601a      	str	r2, [r3, #0]
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	370c      	adds	r7, #12
 8013d30:	46bd      	mov	sp, r7
 8013d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d36:	4770      	bx	lr
 8013d38:	0802b94c 	.word	0x0802b94c

08013d3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
    }
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f7ff ffe9 	bl	8013d1c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013d4a:	2104      	movs	r1, #4
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f015 fc92 	bl	8029676 <_ZdlPvj>
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	4618      	mov	r0, r3
 8013d56:	3708      	adds	r7, #8
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}

08013d5c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b082      	sub	sp, #8
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
 8013d64:	4a05      	ldr	r2, [pc, #20]	; (8013d7c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	601a      	str	r2, [r3, #0]
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7ff ffd5 	bl	8013d1c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	4618      	mov	r0, r3
 8013d76:	3708      	adds	r7, #8
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	0802b900 	.word	0x0802b900

08013d80 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b082      	sub	sp, #8
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f7ff ffe7 	bl	8013d5c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013d8e:	2110      	movs	r1, #16
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f015 fc70 	bl	8029676 <_ZdlPvj>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3708      	adds	r7, #8
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}

08013da0 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	4a05      	ldr	r2, [pc, #20]	; (8013dc0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	601a      	str	r2, [r3, #0]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7fe f817 	bl	8011de4 <_ZN8touchgfx8DrawableD1Ev>
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	4618      	mov	r0, r3
 8013dba:	3708      	adds	r7, #8
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}
 8013dc0:	0802c66c 	.word	0x0802c66c

08013dc4 <_ZN8touchgfx9ContainerD0Ev>:
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b082      	sub	sp, #8
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f7ff ffe7 	bl	8013da0 <_ZN8touchgfx9ContainerD1Ev>
 8013dd2:	212c      	movs	r1, #44	; 0x2c
 8013dd4:	6878      	ldr	r0, [r7, #4]
 8013dd6:	f015 fc4e 	bl	8029676 <_ZdlPvj>
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b082      	sub	sp, #8
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	4a05      	ldr	r2, [pc, #20]	; (8013e04 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	601a      	str	r2, [r3, #0]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7fe fb15 	bl	8012424 <_ZN8touchgfx6WidgetD1Ev>
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3708      	adds	r7, #8
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}
 8013e04:	0802d0c0 	.word	0x0802d0c0

08013e08 <_ZN8touchgfx3BoxD0Ev>:
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f7ff ffe7 	bl	8013de4 <_ZN8touchgfx3BoxD1Ev>
 8013e16:	212c      	movs	r1, #44	; 0x2c
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f015 fc2c 	bl	8029676 <_ZdlPvj>
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	4618      	mov	r0, r3
 8013e22:	3708      	adds	r7, #8
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}

08013e28 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
 8013e30:	4a0a      	ldr	r2, [pc, #40]	; (8013e5c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	601a      	str	r2, [r3, #0]
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	3358      	adds	r3, #88	; 0x58
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7ff ffb0 	bl	8013da0 <_ZN8touchgfx9ContainerD1Ev>
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	332c      	adds	r3, #44	; 0x2c
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7ff fbdb 	bl	8013600 <_ZN8touchgfx5ImageD1Ev>
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7ff ffa7 	bl	8013da0 <_ZN8touchgfx9ContainerD1Ev>
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	4618      	mov	r0, r3
 8013e56:	3708      	adds	r7, #8
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}
 8013e5c:	0802c478 	.word	0x0802c478

08013e60 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b082      	sub	sp, #8
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	6878      	ldr	r0, [r7, #4]
 8013e6a:	f7ff ffdd 	bl	8013e28 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8013e6e:	21b0      	movs	r1, #176	; 0xb0
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f015 fc00 	bl	8029676 <_ZdlPvj>
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3708      	adds	r7, #8
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}

08013e80 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
{
/**
 * An abstract class for progress indicators that need a horizontal or vertical direction to be
 * specified.
 */
class AbstractDirectionProgress : public AbstractProgressIndicator
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	4a05      	ldr	r2, [pc, #20]	; (8013ea0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x20>)
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	601a      	str	r2, [r3, #0]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7ff ffc9 	bl	8013e28 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3708      	adds	r7, #8
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	0802c19c 	.word	0x0802c19c

08013ea4 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b082      	sub	sp, #8
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f7ff ffe7 	bl	8013e80 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8013eb2:	21b4      	movs	r1, #180	; 0xb4
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f015 fbde 	bl	8029676 <_ZdlPvj>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3708      	adds	r7, #8
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <_ZN8touchgfx10TiledImageD1Ev>:
 * Simple widget capable of showing a bitmap tiled indefinitely horizontally and vertically.
 * This means that when the TiledImage Widget is larger than the provided Bitmap, the
 * Bitmap is repeated over and over horizontally and vertically. The bitmap can be alpha-
 * blended with the background and have areas of transparency.
 */
class TiledImage : public Image
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
 8013ecc:	4a05      	ldr	r2, [pc, #20]	; (8013ee4 <_ZN8touchgfx10TiledImageD1Ev+0x20>)
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	601a      	str	r2, [r3, #0]
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f7ff fb93 	bl	8013600 <_ZN8touchgfx5ImageD1Ev>
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	4618      	mov	r0, r3
 8013ede:	3708      	adds	r7, #8
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}
 8013ee4:	0802d124 	.word	0x0802d124

08013ee8 <_ZN8touchgfx10TiledImageD0Ev>:
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b082      	sub	sp, #8
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f7ff ffe7 	bl	8013ec4 <_ZN8touchgfx10TiledImageD1Ev>
 8013ef6:	2130      	movs	r1, #48	; 0x30
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f015 fbbc 	bl	8029676 <_ZdlPvj>
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	4618      	mov	r0, r3
 8013f02:	3708      	adds	r7, #8
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <_ZN8touchgfx13ImageProgressD1Ev>:
 * An image progress will show parts of an image as a progress indicator. The image can progress
 * from the left, the right, the bottom or the top of the given area, and can visually
 * be fixed with a larger and larger portion of the image showing, or it can be moved
 * into view.
 */
class ImageProgress : public AbstractDirectionProgress
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b082      	sub	sp, #8
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	4a0a      	ldr	r2, [pc, #40]	; (8013f3c <_ZN8touchgfx13ImageProgressD1Ev+0x34>)
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	601a      	str	r2, [r3, #0]
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	33e0      	adds	r3, #224	; 0xe0
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7ff ffd2 	bl	8013ec4 <_ZN8touchgfx10TiledImageD1Ev>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	33b4      	adds	r3, #180	; 0xb4
 8013f24:	4618      	mov	r0, r3
 8013f26:	f7ff ff3b 	bl	8013da0 <_ZN8touchgfx9ContainerD1Ev>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7ff ffa7 	bl	8013e80 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	4618      	mov	r0, r3
 8013f36:	3708      	adds	r7, #8
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	0802c2d8 	.word	0x0802c2d8

08013f40 <_ZN8touchgfx13ImageProgressD0Ev>:
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b082      	sub	sp, #8
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f7ff ffdd 	bl	8013f08 <_ZN8touchgfx13ImageProgressD1Ev>
 8013f4e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f015 fb8f 	bl	8029676 <_ZdlPvj>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3708      	adds	r7, #8
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
	...

08013f64 <_ZN8touchgfx12TextProgressD1Ev>:
/**
 * A text progress will display progress as a number with a given number of decimals.
 *
 * @note The implementation does not use floating point variables to calculate the progress.
 */
class TextProgress : public AbstractProgressIndicator
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	4a08      	ldr	r2, [pc, #32]	; (8013f90 <_ZN8touchgfx12TextProgressD1Ev+0x2c>)
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	601a      	str	r2, [r3, #0]
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	33b0      	adds	r3, #176	; 0xb0
 8013f76:	4618      	mov	r0, r3
 8013f78:	f000 f81e 	bl	8013fb8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7ff ff52 	bl	8013e28 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	4618      	mov	r0, r3
 8013f88:	3708      	adds	r7, #8
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	0802c0ac 	.word	0x0802c0ac

08013f94 <_ZN8touchgfx12TextProgressD0Ev>:
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b082      	sub	sp, #8
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f7ff ffe1 	bl	8013f64 <_ZN8touchgfx12TextProgressD1Ev>
 8013fa2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f015 fb65 	bl	8029676 <_ZdlPvj>
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3708      	adds	r7, #8
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
	...

08013fb8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b082      	sub	sp, #8
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	4a05      	ldr	r2, [pc, #20]	; (8013fd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	601a      	str	r2, [r3, #0]
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7ff fb8b 	bl	80136e4 <_ZN8touchgfx8TextAreaD1Ev>
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3708      	adds	r7, #8
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	0802d248 	.word	0x0802d248

08013fdc <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f7ff ffe7 	bl	8013fb8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013fea:	2140      	movs	r1, #64	; 0x40
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f015 fb42 	bl	8029676 <_ZdlPvj>
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3708      	adds	r7, #8
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	4a05      	ldr	r2, [pc, #20]	; (801401c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	601a      	str	r2, [r3, #0]
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	4618      	mov	r0, r3
 801400e:	f7ff fa7f 	bl	8013510 <_ZN8touchgfx14AbstractButtonD1Ev>
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	4618      	mov	r0, r3
 8014016:	3708      	adds	r7, #8
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}
 801401c:	0802d1a4 	.word	0x0802d1a4

08014020 <_ZN8touchgfx6ButtonD0Ev>:
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f7ff ffe7 	bl	8013ffc <_ZN8touchgfx6ButtonD1Ev>
 801402e:	2134      	movs	r1, #52	; 0x34
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f015 fb20 	bl	8029676 <_ZdlPvj>
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	4618      	mov	r0, r3
 801403a:	3708      	adds	r7, #8
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	685b      	ldr	r3, [r3, #4]
 801404e:	687a      	ldr	r2, [r7, #4]
 8014050:	68d2      	ldr	r2, [r2, #12]
 8014052:	1052      	asrs	r2, r2, #1
 8014054:	1898      	adds	r0, r3, r2
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	68db      	ldr	r3, [r3, #12]
 801405a:	f003 0301 	and.w	r3, r3, #1
 801405e:	2b00      	cmp	r3, #0
 8014060:	d102      	bne.n	8014068 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	689b      	ldr	r3, [r3, #8]
 8014066:	e00a      	b.n	801407e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	685b      	ldr	r3, [r3, #4]
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	68d2      	ldr	r2, [r2, #12]
 8014070:	1052      	asrs	r2, r2, #1
 8014072:	4413      	add	r3, r2
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	687a      	ldr	r2, [r7, #4]
 8014078:	6892      	ldr	r2, [r2, #8]
 801407a:	4413      	add	r3, r2
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	6839      	ldr	r1, [r7, #0]
 8014080:	4798      	blx	r3
    }
 8014082:	bf00      	nop
 8014084:	3708      	adds	r7, #8
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}

0801408a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801408a:	b480      	push	{r7}
 801408c:	b083      	sub	sp, #12
 801408e:	af00      	add	r7, sp, #0
 8014090:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	685b      	ldr	r3, [r3, #4]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d010      	beq.n	80140bc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	689b      	ldr	r3, [r3, #8]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d107      	bne.n	80140b2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	68db      	ldr	r3, [r3, #12]
 80140a6:	f003 0301 	and.w	r3, r3, #1
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d101      	bne.n	80140b2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80140ae:	2301      	movs	r3, #1
 80140b0:	e000      	b.n	80140b4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80140b2:	2300      	movs	r3, #0
 80140b4:	2b01      	cmp	r3, #1
 80140b6:	d001      	beq.n	80140bc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80140b8:	2301      	movs	r3, #1
 80140ba:	e000      	b.n	80140be <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80140bc:	2300      	movs	r3, #0
    }
 80140be:	4618      	mov	r0, r3
 80140c0:	370c      	adds	r7, #12
 80140c2:	46bd      	mov	sp, r7
 80140c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c8:	4770      	bx	lr
	...

080140cc <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	4a05      	ldr	r2, [pc, #20]	; (80140ec <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	601a      	str	r2, [r3, #0]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	4618      	mov	r0, r3
 80140de:	f7ff f969 	bl	80133b4 <_ZN8touchgfx6ScreenD1Ev>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	4618      	mov	r0, r3
 80140e6:	3708      	adds	r7, #8
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	0802b9b0 	.word	0x0802b9b0

080140f0 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b082      	sub	sp, #8
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f7ff ffe7 	bl	80140cc <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80140fe:	2140      	movs	r1, #64	; 0x40
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f015 fab8 	bl	8029676 <_ZdlPvj>
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	4618      	mov	r0, r3
 801410a:	3708      	adds	r7, #8
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}

08014110 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	4a0d      	ldr	r2, [pc, #52]	; (8014150 <_ZN14screenViewBaseD1Ev+0x40>)
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	601a      	str	r2, [r3, #0]
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	33a0      	adds	r3, #160	; 0xa0
 8014122:	4618      	mov	r0, r3
 8014124:	f000 f902 	bl	801432c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	336c      	adds	r3, #108	; 0x6c
 801412c:	4618      	mov	r0, r3
 801412e:	f7ff ff65 	bl	8013ffc <_ZN8touchgfx6ButtonD1Ev>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	3340      	adds	r3, #64	; 0x40
 8014136:	4618      	mov	r0, r3
 8014138:	f7ff fe54 	bl	8013de4 <_ZN8touchgfx3BoxD1Ev>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	4618      	mov	r0, r3
 8014140:	f7ff ffc4 	bl	80140cc <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	4618      	mov	r0, r3
 8014148:	3708      	adds	r7, #8
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
 801414e:	bf00      	nop
 8014150:	0802b964 	.word	0x0802b964

08014154 <_ZN14screenViewBaseD0Ev>:
 8014154:	b580      	push	{r7, lr}
 8014156:	b082      	sub	sp, #8
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f7ff ffd7 	bl	8014110 <_ZN14screenViewBaseD1Ev>
 8014162:	21b0      	movs	r1, #176	; 0xb0
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f015 fa86 	bl	8029676 <_ZdlPvj>
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	4618      	mov	r0, r3
 801416e:	3708      	adds	r7, #8
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}

08014174 <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801417c:	f006 fb40 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 8014180:	4603      	mov	r3, r0
    }
 8014182:	4618      	mov	r0, r3
 8014184:	3708      	adds	r7, #8
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
	...

0801418c <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

screenViewBase::screenViewBase() :
 801418c:	b590      	push	{r4, r7, lr}
 801418e:	b089      	sub	sp, #36	; 0x24
 8014190:	af02      	add	r7, sp, #8
 8014192:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	4618      	mov	r0, r3
 8014198:	f000 f892 	bl	80142c0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 801419c:	4a36      	ldr	r2, [pc, #216]	; (8014278 <_ZN14screenViewBaseC1Ev+0xec>)
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	601a      	str	r2, [r3, #0]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	3340      	adds	r3, #64	; 0x40
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7ff f9f8 	bl	801359c <_ZN8touchgfx3BoxC1Ev>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	336c      	adds	r3, #108	; 0x6c
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7ff f9cf 	bl	8013554 <_ZN8touchgfx6ButtonC1Ev>
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 80141bc:	4b2f      	ldr	r3, [pc, #188]	; (801427c <_ZN14screenViewBaseC1Ev+0xf0>)
 80141be:	60bb      	str	r3, [r7, #8]
 80141c0:	2300      	movs	r3, #0
 80141c2:	60fb      	str	r3, [r7, #12]
 80141c4:	f107 0308 	add.w	r3, r7, #8
 80141c8:	cb0c      	ldmia	r3, {r2, r3}
 80141ca:	6879      	ldr	r1, [r7, #4]
 80141cc:	f000 f88e 	bl	80142ec <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80141d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80141da:	9300      	str	r3, [sp, #0]
 80141dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80141e0:	2200      	movs	r2, #0
 80141e2:	2100      	movs	r1, #0
 80141e4:	f7fd fe29 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80141ee:	2200      	movs	r2, #0
 80141f0:	2100      	movs	r1, #0
 80141f2:	2000      	movs	r0, #0
 80141f4:	f7ff fb34 	bl	8013860 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80141f8:	4603      	mov	r3, r0
 80141fa:	4619      	mov	r1, r3
 80141fc:	4620      	mov	r0, r4
 80141fe:	f7ff f9f1 	bl	80135e4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(155, 106);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	336c      	adds	r3, #108	; 0x6c
 8014206:	226a      	movs	r2, #106	; 0x6a
 8014208:	219b      	movs	r1, #155	; 0x9b
 801420a:	4618      	mov	r0, r3
 801420c:	f7fd fe61 	bl	8011ed2 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8014216:	f107 0310 	add.w	r3, r7, #16
 801421a:	2100      	movs	r1, #0
 801421c:	4618      	mov	r0, r3
 801421e:	f7ff f87a 	bl	8013316 <_ZN8touchgfx6BitmapC1Et>
 8014222:	f107 0314 	add.w	r3, r7, #20
 8014226:	2101      	movs	r1, #1
 8014228:	4618      	mov	r0, r3
 801422a:	f7ff f874 	bl	8013316 <_ZN8touchgfx6BitmapC1Et>
 801422e:	f107 0214 	add.w	r2, r7, #20
 8014232:	f107 0310 	add.w	r3, r7, #16
 8014236:	4619      	mov	r1, r3
 8014238:	4620      	mov	r0, r4
 801423a:	f004 fc47 	bl	8018acc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	33a0      	adds	r3, #160	; 0xa0
 8014248:	4619      	mov	r1, r3
 801424a:	4610      	mov	r0, r2
 801424c:	f7ff f952 	bl	80134f4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 8014250:	687a      	ldr	r2, [r7, #4]
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	3340      	adds	r3, #64	; 0x40
 8014256:	4619      	mov	r1, r3
 8014258:	4610      	mov	r0, r2
 801425a:	f7ff f903 	bl	8013464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 801425e:	687a      	ldr	r2, [r7, #4]
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	336c      	adds	r3, #108	; 0x6c
 8014264:	4619      	mov	r1, r3
 8014266:	4610      	mov	r0, r2
 8014268:	f7ff f8fc 	bl	8013464 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	4618      	mov	r0, r3
 8014270:	371c      	adds	r7, #28
 8014272:	46bd      	mov	sp, r7
 8014274:	bd90      	pop	{r4, r7, pc}
 8014276:	bf00      	nop
 8014278:	0802b964 	.word	0x0802b964
 801427c:	08014295 	.word	0x08014295

08014280 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8014280:	b480      	push	{r7}
 8014282:	b083      	sub	sp, #12
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]

}
 8014288:	bf00      	nop
 801428a:	370c      	adds	r7, #12
 801428c:	46bd      	mov	sp, r7
 801428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014292:	4770      	bx	lr

08014294 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	336c      	adds	r3, #108	; 0x6c
 80142a2:	683a      	ldr	r2, [r7, #0]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d106      	bne.n	80142b6 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenSlideTransitionEast();
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f7ff ff63 	bl	8014174 <_ZN14screenViewBase11applicationEv>
 80142ae:	4603      	mov	r3, r0
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7fe f97b 	bl	80125ac <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>
    }
}
 80142b6:	bf00      	nop
 80142b8:	3708      	adds	r7, #8
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
	...

080142c0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b082      	sub	sp, #8
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	4618      	mov	r0, r3
 80142cc:	f007 fe08 	bl	801bee0 <_ZN8touchgfx6ScreenC1Ev>
 80142d0:	4a05      	ldr	r2, [pc, #20]	; (80142e8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	601a      	str	r2, [r3, #0]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	2200      	movs	r2, #0
 80142da:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	4618      	mov	r0, r3
 80142e0:	3708      	adds	r7, #8
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	0802b9b0 	.word	0x0802b9b0

080142ec <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	60f8      	str	r0, [r7, #12]
 80142f4:	60b9      	str	r1, [r7, #8]
 80142f6:	4639      	mov	r1, r7
 80142f8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	4618      	mov	r0, r3
 8014300:	f7ff fcdc 	bl	8013cbc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8014304:	4a08      	ldr	r2, [pc, #32]	; (8014328 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	68ba      	ldr	r2, [r7, #8]
 801430e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	3308      	adds	r3, #8
 8014314:	463a      	mov	r2, r7
 8014316:	e892 0003 	ldmia.w	r2, {r0, r1}
 801431a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	4618      	mov	r0, r3
 8014322:	3710      	adds	r7, #16
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}
 8014328:	0802b998 	.word	0x0802b998

0801432c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	4a05      	ldr	r2, [pc, #20]	; (801434c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	601a      	str	r2, [r3, #0]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	4618      	mov	r0, r3
 801433e:	f7ff fced 	bl	8013d1c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	4618      	mov	r0, r3
 8014346:	3708      	adds	r7, #8
 8014348:	46bd      	mov	sp, r7
 801434a:	bd80      	pop	{r7, pc}
 801434c:	0802b998 	.word	0x0802b998

08014350 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8014350:	b580      	push	{r7, lr}
 8014352:	b082      	sub	sp, #8
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f7ff ffe7 	bl	801432c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801435e:	2110      	movs	r1, #16
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f015 f988 	bl	8029676 <_ZdlPvj>
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	4618      	mov	r0, r3
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	685b      	ldr	r3, [r3, #4]
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	68d2      	ldr	r2, [r2, #12]
 8014382:	1052      	asrs	r2, r2, #1
 8014384:	1898      	adds	r0, r3, r2
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	68db      	ldr	r3, [r3, #12]
 801438a:	f003 0301 	and.w	r3, r3, #1
 801438e:	2b00      	cmp	r3, #0
 8014390:	d102      	bne.n	8014398 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	689b      	ldr	r3, [r3, #8]
 8014396:	e00a      	b.n	80143ae <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	685b      	ldr	r3, [r3, #4]
 801439c:	687a      	ldr	r2, [r7, #4]
 801439e:	68d2      	ldr	r2, [r2, #12]
 80143a0:	1052      	asrs	r2, r2, #1
 80143a2:	4413      	add	r3, r2
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	687a      	ldr	r2, [r7, #4]
 80143a8:	6892      	ldr	r2, [r2, #8]
 80143aa:	4413      	add	r3, r2
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	6839      	ldr	r1, [r7, #0]
 80143b0:	4798      	blx	r3
    }
 80143b2:	bf00      	nop
 80143b4:	3708      	adds	r7, #8
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}

080143ba <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80143ba:	b480      	push	{r7}
 80143bc:	b083      	sub	sp, #12
 80143be:	af00      	add	r7, sp, #0
 80143c0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d010      	beq.n	80143ec <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	689b      	ldr	r3, [r3, #8]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d107      	bne.n	80143e2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	68db      	ldr	r3, [r3, #12]
 80143d6:	f003 0301 	and.w	r3, r3, #1
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d101      	bne.n	80143e2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80143de:	2301      	movs	r3, #1
 80143e0:	e000      	b.n	80143e4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80143e2:	2300      	movs	r3, #0
 80143e4:	2b01      	cmp	r3, #1
 80143e6:	d001      	beq.n	80143ec <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80143e8:	2301      	movs	r3, #1
 80143ea:	e000      	b.n	80143ee <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80143ec:	2300      	movs	r3, #0
    }
 80143ee:	4618      	mov	r0, r3
 80143f0:	370c      	adds	r7, #12
 80143f2:	46bd      	mov	sp, r7
 80143f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f8:	4770      	bx	lr
	...

080143fc <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80143fc:	b480      	push	{r7}
 80143fe:	af00      	add	r7, sp, #0
    return bitmap_database;
 8014400:	4b02      	ldr	r3, [pc, #8]	; (801440c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8014402:	4618      	mov	r0, r3
 8014404:	46bd      	mov	sp, r7
 8014406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440a:	4770      	bx	lr
 801440c:	0802b9dc 	.word	0x0802b9dc

08014410 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8014410:	b480      	push	{r7}
 8014412:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8014414:	2305      	movs	r3, #5
}
 8014416:	4618      	mov	r0, r3
 8014418:	46bd      	mov	sp, r7
 801441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441e:	4770      	bx	lr

08014420 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8014420:	b480      	push	{r7}
 8014422:	b085      	sub	sp, #20
 8014424:	af00      	add	r7, sp, #0
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	460b      	mov	r3, r1
 801442a:	607a      	str	r2, [r7, #4]
 801442c:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 801442e:	2300      	movs	r3, #0
    }
 8014430:	4618      	mov	r0, r3
 8014432:	3714      	adds	r7, #20
 8014434:	46bd      	mov	sp, r7
 8014436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443a:	4770      	bx	lr

0801443c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 801443c:	b480      	push	{r7}
 801443e:	b083      	sub	sp, #12
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8014444:	2300      	movs	r3, #0
    }
 8014446:	4618      	mov	r0, r3
 8014448:	370c      	adds	r7, #12
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr
	...

08014454 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8014454:	b480      	push	{r7}
 8014456:	b085      	sub	sp, #20
 8014458:	af00      	add	r7, sp, #0
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	4613      	mov	r3, r2
 8014460:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8014462:	4a07      	ldr	r2, [pc, #28]	; (8014480 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	6013      	str	r3, [r2, #0]
        fonts = f;
 8014468:	4a06      	ldr	r2, [pc, #24]	; (8014484 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801446a:	68bb      	ldr	r3, [r7, #8]
 801446c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801446e:	4a06      	ldr	r2, [pc, #24]	; (8014488 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8014470:	88fb      	ldrh	r3, [r7, #6]
 8014472:	8013      	strh	r3, [r2, #0]
    }
 8014474:	bf00      	nop
 8014476:	3714      	adds	r7, #20
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr
 8014480:	20005994 	.word	0x20005994
 8014484:	2000599c 	.word	0x2000599c
 8014488:	20005998 	.word	0x20005998

0801448c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801448c:	b40e      	push	{r1, r2, r3}
 801448e:	b580      	push	{r7, lr}
 8014490:	b085      	sub	sp, #20
 8014492:	af00      	add	r7, sp, #0
 8014494:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8014496:	f107 0320 	add.w	r3, r7, #32
 801449a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	69fa      	ldr	r2, [r7, #28]
 80144a0:	2100      	movs	r1, #0
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f007 f848 	bl	801b538 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80144a8:	4603      	mov	r3, r0
 80144aa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80144ac:	89fb      	ldrh	r3, [r7, #14]
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3714      	adds	r7, #20
 80144b2:	46bd      	mov	sp, r7
 80144b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80144b8:	b003      	add	sp, #12
 80144ba:	4770      	bx	lr

080144bc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80144bc:	b40c      	push	{r2, r3}
 80144be:	b580      	push	{r7, lr}
 80144c0:	b084      	sub	sp, #16
 80144c2:	af00      	add	r7, sp, #0
 80144c4:	6078      	str	r0, [r7, #4]
 80144c6:	460b      	mov	r3, r1
 80144c8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80144ca:	f107 031c 	add.w	r3, r7, #28
 80144ce:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80144d0:	78f9      	ldrb	r1, [r7, #3]
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	69ba      	ldr	r2, [r7, #24]
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f007 f82e 	bl	801b538 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80144dc:	4603      	mov	r3, r0
 80144de:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80144e0:	89fb      	ldrh	r3, [r7, #14]
}
 80144e2:	4618      	mov	r0, r3
 80144e4:	3710      	adds	r7, #16
 80144e6:	46bd      	mov	sp, r7
 80144e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80144ec:	b002      	add	sp, #8
 80144ee:	4770      	bx	lr

080144f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b08a      	sub	sp, #40	; 0x28
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
 80144f8:	460b      	mov	r3, r1
 80144fa:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014500:	2b00      	cmp	r3, #0
 8014502:	d016      	beq.n	8014532 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	331a      	adds	r3, #26
 8014508:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450c:	8adb      	ldrh	r3, [r3, #22]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d105      	bne.n	801451e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8014512:	4b43      	ldr	r3, [pc, #268]	; (8014620 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8014514:	4a43      	ldr	r2, [pc, #268]	; (8014624 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014516:	21c0      	movs	r1, #192	; 0xc0
 8014518:	4843      	ldr	r0, [pc, #268]	; (8014628 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801451a:	f015 f8db 	bl	80296d4 <__assert_func>
            return buffer[pos];
 801451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014520:	8a9b      	ldrh	r3, [r3, #20]
 8014522:	461a      	mov	r2, r3
 8014524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014526:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d001      	beq.n	8014532 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801452e:	2301      	movs	r3, #1
 8014530:	e000      	b.n	8014534 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8014532:	2300      	movs	r3, #0
 8014534:	2b00      	cmp	r3, #0
 8014536:	d06a      	beq.n	801460e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f008 fc09 	bl	801cd50 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	331a      	adds	r3, #26
 8014542:	623b      	str	r3, [r7, #32]
 8014544:	2301      	movs	r3, #1
 8014546:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8014548:	6a3b      	ldr	r3, [r7, #32]
 801454a:	8adb      	ldrh	r3, [r3, #22]
 801454c:	8bfa      	ldrh	r2, [r7, #30]
 801454e:	429a      	cmp	r2, r3
 8014550:	d305      	bcc.n	801455e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8014552:	4b36      	ldr	r3, [pc, #216]	; (801462c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8014554:	4a36      	ldr	r2, [pc, #216]	; (8014630 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8014556:	21c5      	movs	r1, #197	; 0xc5
 8014558:	4833      	ldr	r0, [pc, #204]	; (8014628 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801455a:	f015 f8bb 	bl	80296d4 <__assert_func>
            const uint16_t index = pos + offset;
 801455e:	6a3b      	ldr	r3, [r7, #32]
 8014560:	8a9a      	ldrh	r2, [r3, #20]
 8014562:	8bfb      	ldrh	r3, [r7, #30]
 8014564:	4413      	add	r3, r2
 8014566:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8014568:	8bbb      	ldrh	r3, [r7, #28]
 801456a:	2b09      	cmp	r3, #9
 801456c:	d801      	bhi.n	8014572 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 801456e:	8bbb      	ldrh	r3, [r7, #28]
 8014570:	e001      	b.n	8014576 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8014572:	8bbb      	ldrh	r3, [r7, #28]
 8014574:	3b0a      	subs	r3, #10
 8014576:	6a3a      	ldr	r2, [r7, #32]
 8014578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801457c:	f640 123f 	movw	r2, #2367	; 0x93f
 8014580:	4293      	cmp	r3, r2
 8014582:	bf0c      	ite	eq
 8014584:	2301      	moveq	r3, #1
 8014586:	2300      	movne	r3, #0
 8014588:	b2db      	uxtb	r3, r3
 801458a:	2b00      	cmp	r3, #0
 801458c:	d03f      	beq.n	801460e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	331a      	adds	r3, #26
 8014592:	687a      	ldr	r2, [r7, #4]
 8014594:	321a      	adds	r2, #26
 8014596:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8014598:	68ba      	ldr	r2, [r7, #8]
 801459a:	8ad2      	ldrh	r2, [r2, #22]
 801459c:	2a00      	cmp	r2, #0
 801459e:	d105      	bne.n	80145ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80145a0:	4b1f      	ldr	r3, [pc, #124]	; (8014620 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80145a2:	4a20      	ldr	r2, [pc, #128]	; (8014624 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80145a4:	21c0      	movs	r1, #192	; 0xc0
 80145a6:	4820      	ldr	r0, [pc, #128]	; (8014628 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80145a8:	f015 f894 	bl	80296d4 <__assert_func>
            return buffer[pos];
 80145ac:	68ba      	ldr	r2, [r7, #8]
 80145ae:	8a92      	ldrh	r2, [r2, #20]
 80145b0:	4611      	mov	r1, r2
 80145b2:	68ba      	ldr	r2, [r7, #8]
 80145b4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80145b8:	613b      	str	r3, [r7, #16]
 80145ba:	4613      	mov	r3, r2
 80145bc:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	8adb      	ldrh	r3, [r3, #22]
 80145c2:	2b01      	cmp	r3, #1
 80145c4:	d806      	bhi.n	80145d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80145c6:	4b1b      	ldr	r3, [pc, #108]	; (8014634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80145c8:	4a1b      	ldr	r2, [pc, #108]	; (8014638 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80145ca:	f240 110d 	movw	r1, #269	; 0x10d
 80145ce:	4816      	ldr	r0, [pc, #88]	; (8014628 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80145d0:	f015 f880 	bl	80296d4 <__assert_func>
            const uint16_t index = pos + 1;
 80145d4:	693b      	ldr	r3, [r7, #16]
 80145d6:	8a9b      	ldrh	r3, [r3, #20]
 80145d8:	3301      	adds	r3, #1
 80145da:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80145dc:	89bb      	ldrh	r3, [r7, #12]
 80145de:	2b09      	cmp	r3, #9
 80145e0:	d801      	bhi.n	80145e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80145e2:	89bb      	ldrh	r3, [r7, #12]
 80145e4:	e000      	b.n	80145e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80145e6:	2300      	movs	r3, #0
 80145e8:	693a      	ldr	r2, [r7, #16]
 80145ea:	89f9      	ldrh	r1, [r7, #14]
 80145ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80145f0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	331a      	adds	r3, #26
 80145f6:	61bb      	str	r3, [r7, #24]
 80145f8:	f640 133f 	movw	r3, #2367	; 0x93f
 80145fc:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	8a9b      	ldrh	r3, [r3, #20]
 8014602:	4619      	mov	r1, r3
 8014604:	69bb      	ldr	r3, [r7, #24]
 8014606:	8afa      	ldrh	r2, [r7, #22]
 8014608:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 801460c:	bf00      	nop
        }
    }
    return getNextChar();
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f008 fa82 	bl	801cb18 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014614:	4603      	mov	r3, r0
}
 8014616:	4618      	mov	r0, r3
 8014618:	3728      	adds	r7, #40	; 0x28
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	0802afa8 	.word	0x0802afa8
 8014624:	0802afb4 	.word	0x0802afb4
 8014628:	0802b060 	.word	0x0802b060
 801462c:	0802b0a8 	.word	0x0802b0a8
 8014630:	0802b0b8 	.word	0x0802b0b8
 8014634:	0802b18c 	.word	0x0802b18c
 8014638:	0802b198 	.word	0x0802b198

0801463c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b082      	sub	sp, #8
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f008 fa21 	bl	801ca8c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801464a:	bf00      	nop
 801464c:	3708      	adds	r7, #8
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}

08014652 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8014652:	b580      	push	{r7, lr}
 8014654:	b088      	sub	sp, #32
 8014656:	af02      	add	r7, sp, #8
 8014658:	60f8      	str	r0, [r7, #12]
 801465a:	1d38      	adds	r0, r7, #4
 801465c:	e880 0006 	stmia.w	r0, {r1, r2}
 8014660:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8014662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014666:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8014668:	1d39      	adds	r1, r7, #4
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	9301      	str	r3, [sp, #4]
 801466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014670:	9300      	str	r3, [sp, #0]
 8014672:	6a3b      	ldr	r3, [r7, #32]
 8014674:	683a      	ldr	r2, [r7, #0]
 8014676:	68f8      	ldr	r0, [r7, #12]
 8014678:	f005 fc5c 	bl	8019f34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 801467c:	bf00      	nop
 801467e:	3718      	adds	r7, #24
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014684:	b590      	push	{r4, r7, lr}
 8014686:	b085      	sub	sp, #20
 8014688:	af00      	add	r7, sp, #0
 801468a:	4603      	mov	r3, r0
 801468c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801468e:	2300      	movs	r3, #0
 8014690:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8014692:	88fb      	ldrh	r3, [r7, #6]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d127      	bne.n	80146e8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014698:	88fb      	ldrh	r3, [r7, #6]
 801469a:	4a1e      	ldr	r2, [pc, #120]	; (8014714 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801469c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d016      	beq.n	80146d2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80146a4:	88fb      	ldrh	r3, [r7, #6]
 80146a6:	4a1b      	ldr	r2, [pc, #108]	; (8014714 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80146a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146ac:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	68ba      	ldr	r2, [r7, #8]
 80146b4:	4413      	add	r3, r2
 80146b6:	4a18      	ldr	r2, [pc, #96]	; (8014718 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80146b8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	68ba      	ldr	r2, [r7, #8]
 80146c0:	4413      	add	r3, r2
 80146c2:	4a16      	ldr	r2, [pc, #88]	; (801471c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80146c4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	689b      	ldr	r3, [r3, #8]
 80146ca:	68ba      	ldr	r2, [r7, #8]
 80146cc:	4413      	add	r3, r2
 80146ce:	60fb      	str	r3, [r7, #12]
 80146d0:	e00a      	b.n	80146e8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80146d2:	4b11      	ldr	r3, [pc, #68]	; (8014718 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80146d4:	4a12      	ldr	r2, [pc, #72]	; (8014720 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80146d6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80146d8:	4a12      	ldr	r2, [pc, #72]	; (8014724 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80146da:	4b10      	ldr	r3, [pc, #64]	; (801471c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80146dc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80146de:	88fb      	ldrh	r3, [r7, #6]
 80146e0:	4a11      	ldr	r2, [pc, #68]	; (8014728 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80146e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146e6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d00d      	beq.n	801470a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80146ee:	4a0f      	ldr	r2, [pc, #60]	; (801472c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80146f0:	88fb      	ldrh	r3, [r7, #6]
 80146f2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80146f4:	f000 f83e 	bl	8014774 <_ZN17TypedTextDatabase8getFontsEv>
 80146f8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80146fa:	f000 f833 	bl	8014764 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80146fe:	4603      	mov	r3, r0
 8014700:	461a      	mov	r2, r3
 8014702:	4621      	mov	r1, r4
 8014704:	68f8      	ldr	r0, [r7, #12]
 8014706:	f7ff fea5 	bl	8014454 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801470a:	bf00      	nop
 801470c:	3714      	adds	r7, #20
 801470e:	46bd      	mov	sp, r7
 8014710:	bd90      	pop	{r4, r7, pc}
 8014712:	bf00      	nop
 8014714:	200052c0 	.word	0x200052c0
 8014718:	200052c8 	.word	0x200052c8
 801471c:	200052cc 	.word	0x200052cc
 8014720:	08047990 	.word	0x08047990
 8014724:	08047984 	.word	0x08047984
 8014728:	080479b8 	.word	0x080479b8
 801472c:	200052c4 	.word	0x200052c4

08014730 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8014730:	b480      	push	{r7}
 8014732:	b083      	sub	sp, #12
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
 8014738:	460b      	mov	r3, r1
 801473a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 801473c:	4b07      	ldr	r3, [pc, #28]	; (801475c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801473e:	681a      	ldr	r2, [r3, #0]
 8014740:	4b07      	ldr	r3, [pc, #28]	; (8014760 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8014742:	6819      	ldr	r1, [r3, #0]
 8014744:	887b      	ldrh	r3, [r7, #2]
 8014746:	009b      	lsls	r3, r3, #2
 8014748:	440b      	add	r3, r1
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	005b      	lsls	r3, r3, #1
 801474e:	4413      	add	r3, r2
}
 8014750:	4618      	mov	r0, r3
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr
 801475c:	200052c8 	.word	0x200052c8
 8014760:	200052cc 	.word	0x200052cc

08014764 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8014764:	b480      	push	{r7}
 8014766:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8014768:	2303      	movs	r3, #3
}
 801476a:	4618      	mov	r0, r3
 801476c:	46bd      	mov	sp, r7
 801476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014772:	4770      	bx	lr

08014774 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8014774:	b480      	push	{r7}
 8014776:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8014778:	4b02      	ldr	r3, [pc, #8]	; (8014784 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801477a:	4618      	mov	r0, r3
 801477c:	46bd      	mov	sp, r7
 801477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014782:	4770      	bx	lr
 8014784:	200052d0 	.word	0x200052d0

08014788 <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_ariblk_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8014788:	b580      	push	{r7, lr}
 801478a:	b082      	sub	sp, #8
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	6039      	str	r1, [r7, #0]
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2b01      	cmp	r3, #1
 8014796:	d118      	bne.n	80147ca <_Z41__static_initialization_and_destruction_0ii+0x42>
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801479e:	4293      	cmp	r3, r2
 80147a0:	d113      	bne.n	80147ca <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 80147a2:	f7fd f9d3 	bl	8011b4c <_Z23getFont_verdana_20_4bppv>
 80147a6:	4603      	mov	r3, r0
};
 80147a8:	4a0a      	ldr	r2, [pc, #40]	; (80147d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80147aa:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80147ac:	f7fd fa22 	bl	8011bf4 <_Z23getFont_verdana_40_4bppv>
 80147b0:	4603      	mov	r3, r0
};
 80147b2:	4a08      	ldr	r2, [pc, #32]	; (80147d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80147b4:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 80147b6:	f7fd f975 	bl	8011aa4 <_Z23getFont_verdana_10_4bppv>
 80147ba:	4603      	mov	r3, r0
};
 80147bc:	4a05      	ldr	r2, [pc, #20]	; (80147d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80147be:	6093      	str	r3, [r2, #8]
    &(getFont_ariblk_10_4bpp())
 80147c0:	f7fd f91c 	bl	80119fc <_Z22getFont_ariblk_10_4bppv>
 80147c4:	4603      	mov	r3, r0
};
 80147c6:	4a03      	ldr	r2, [pc, #12]	; (80147d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80147c8:	60d3      	str	r3, [r2, #12]
}  // namespace TypedTextDatabase
 80147ca:	bf00      	nop
 80147cc:	3708      	adds	r7, #8
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}
 80147d2:	bf00      	nop
 80147d4:	200052d0 	.word	0x200052d0

080147d8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80147d8:	b580      	push	{r7, lr}
 80147da:	af00      	add	r7, sp, #0
 80147dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80147e0:	2001      	movs	r0, #1
 80147e2:	f7ff ffd1 	bl	8014788 <_Z41__static_initialization_and_destruction_0ii>
 80147e6:	bd80      	pop	{r7, pc}

080147e8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b082      	sub	sp, #8
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	4a05      	ldr	r2, [pc, #20]	; (8014808 <_ZN19FrontendApplicationD1Ev+0x20>)
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	601a      	str	r2, [r3, #0]
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7fd fdab 	bl	8012354 <_ZN23FrontendApplicationBaseD1Ev>
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	4618      	mov	r0, r3
 8014802:	3708      	adds	r7, #8
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}
 8014808:	0802ba98 	.word	0x0802ba98

0801480c <_ZN19FrontendApplicationD0Ev>:
 801480c:	b580      	push	{r7, lr}
 801480e:	b082      	sub	sp, #8
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f7ff ffe7 	bl	80147e8 <_ZN19FrontendApplicationD1Ev>
 801481a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801481e:	6878      	ldr	r0, [r7, #4]
 8014820:	f014 ff29 	bl	8029676 <_ZdlPvj>
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	4618      	mov	r0, r3
 8014828:	3708      	adds	r7, #8
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}

0801482e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801482e:	b580      	push	{r7, lr}
 8014830:	b082      	sub	sp, #8
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 801483c:	4618      	mov	r0, r3
 801483e:	f000 f82d 	bl	801489c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	4618      	mov	r0, r3
 8014846:	f005 febd 	bl	801a5c4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801484a:	bf00      	nop
 801484c:	3708      	adds	r7, #8
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}
	...

08014854 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014854:	b580      	push	{r7, lr}
 8014856:	b084      	sub	sp, #16
 8014858:	af00      	add	r7, sp, #0
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	60b9      	str	r1, [r7, #8]
 801485e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	687a      	ldr	r2, [r7, #4]
 8014864:	68b9      	ldr	r1, [r7, #8]
 8014866:	4618      	mov	r0, r3
 8014868:	f7fd fdfe 	bl	8012468 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801486c:	4a03      	ldr	r2, [pc, #12]	; (801487c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	601a      	str	r2, [r3, #0]
{

}
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	4618      	mov	r0, r3
 8014876:	3710      	adds	r7, #16
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}
 801487c:	0802ba98 	.word	0x0802ba98

08014880 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8014880:	b480      	push	{r7}
 8014882:	b083      	sub	sp, #12
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2200      	movs	r2, #0
 801488c:	601a      	str	r2, [r3, #0]
{

}
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	4618      	mov	r0, r3
 8014892:	370c      	adds	r7, #12
 8014894:	46bd      	mov	sp, r7
 8014896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489a:	4770      	bx	lr

0801489c <_ZN5Model4tickEv>:

void Model::tick()
{
 801489c:	b480      	push	{r7}
 801489e:	b083      	sub	sp, #12
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]

}
 80148a4:	bf00      	nop
 80148a6:	370c      	adds	r7, #12
 80148a8:	46bd      	mov	sp, r7
 80148aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ae:	4770      	bx	lr

080148b0 <_ZN5Model16ModelGetFlowRateEh>:
void Model::ModelGetFlowRate(uint8_t Flow){
 80148b0:	b480      	push	{r7}
 80148b2:	b083      	sub	sp, #12
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	460b      	mov	r3, r1
 80148ba:	70fb      	strb	r3, [r7, #3]

}
 80148bc:	bf00      	nop
 80148be:	370c      	adds	r7, #12
 80148c0:	46bd      	mov	sp, r7
 80148c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c6:	4770      	bx	lr

080148c8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80148c8:	b480      	push	{r7}
 80148ca:	b083      	sub	sp, #12
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
    {
    }
 80148d0:	bf00      	nop
 80148d2:	370c      	adds	r7, #12
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr

080148dc <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80148dc:	b480      	push	{r7}
 80148de:	b083      	sub	sp, #12
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
    {
    }
 80148e4:	bf00      	nop
 80148e6:	370c      	adds	r7, #12
 80148e8:	46bd      	mov	sp, r7
 80148ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ee:	4770      	bx	lr

080148f0 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80148f0:	b480      	push	{r7}
 80148f2:	b083      	sub	sp, #12
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
    {
 80148f8:	4a04      	ldr	r2, [pc, #16]	; (801490c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	601a      	str	r2, [r3, #0]
    }
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	4618      	mov	r0, r3
 8014902:	370c      	adds	r7, #12
 8014904:	46bd      	mov	sp, r7
 8014906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490a:	4770      	bx	lr
 801490c:	0802bb14 	.word	0x0802bb14

08014910 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8014910:	b580      	push	{r7, lr}
 8014912:	b082      	sub	sp, #8
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
    }
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f7ff ffe9 	bl	80148f0 <_ZN8touchgfx9PresenterD1Ev>
 801491e:	2104      	movs	r1, #4
 8014920:	6878      	ldr	r0, [r7, #4]
 8014922:	f014 fea8 	bl	8029676 <_ZdlPvj>
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	4618      	mov	r0, r3
 801492a:	3708      	adds	r7, #8
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8014930:	b480      	push	{r7}
 8014932:	b083      	sub	sp, #12
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
    {
 8014938:	4a04      	ldr	r2, [pc, #16]	; (801494c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	601a      	str	r2, [r3, #0]
    }
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	4618      	mov	r0, r3
 8014942:	370c      	adds	r7, #12
 8014944:	46bd      	mov	sp, r7
 8014946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494a:	4770      	bx	lr
 801494c:	0802bb14 	.word	0x0802bb14

08014950 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8014950:	b480      	push	{r7}
 8014952:	b083      	sub	sp, #12
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
 8014958:	4a06      	ldr	r2, [pc, #24]	; (8014974 <_ZN13ModelListenerC1Ev+0x24>)
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	601a      	str	r2, [r3, #0]
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	2200      	movs	r2, #0
 8014962:	605a      	str	r2, [r3, #4]
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	4618      	mov	r0, r3
 8014968:	370c      	adds	r7, #12
 801496a:	46bd      	mov	sp, r7
 801496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014970:	4770      	bx	lr
 8014972:	bf00      	nop
 8014974:	0802bb04 	.word	0x0802bb04

08014978 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8014978:	b480      	push	{r7}
 801497a:	b083      	sub	sp, #12
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
 8014980:	4a04      	ldr	r2, [pc, #16]	; (8014994 <_ZN13ModelListenerD1Ev+0x1c>)
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	601a      	str	r2, [r3, #0]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	4618      	mov	r0, r3
 801498a:	370c      	adds	r7, #12
 801498c:	46bd      	mov	sp, r7
 801498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014992:	4770      	bx	lr
 8014994:	0802bb04 	.word	0x0802bb04

08014998 <_ZN13ModelListenerD0Ev>:
 8014998:	b580      	push	{r7, lr}
 801499a:	b082      	sub	sp, #8
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f7ff ffe9 	bl	8014978 <_ZN13ModelListenerD1Ev>
 80149a6:	2108      	movs	r1, #8
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f014 fe64 	bl	8029676 <_ZdlPvj>
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	4618      	mov	r0, r3
 80149b2:	3708      	adds	r7, #8
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
 80149c0:	4a09      	ldr	r2, [pc, #36]	; (80149e8 <_ZN16Screen1PresenterD1Ev+0x30>)
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	601a      	str	r2, [r3, #0]
 80149c6:	4a09      	ldr	r2, [pc, #36]	; (80149ec <_ZN16Screen1PresenterD1Ev+0x34>)
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	605a      	str	r2, [r3, #4]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	3304      	adds	r3, #4
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7ff ffd1 	bl	8014978 <_ZN13ModelListenerD1Ev>
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	4618      	mov	r0, r3
 80149da:	f7ff ff89 	bl	80148f0 <_ZN8touchgfx9PresenterD1Ev>
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	4618      	mov	r0, r3
 80149e2:	3708      	adds	r7, #8
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}
 80149e8:	0802badc 	.word	0x0802badc
 80149ec:	0802baf4 	.word	0x0802baf4

080149f0 <_ZThn4_N16Screen1PresenterD1Ev>:
 80149f0:	f1a0 0004 	sub.w	r0, r0, #4
 80149f4:	e7e0      	b.n	80149b8 <_ZN16Screen1PresenterD1Ev>
 80149f6:	bf00      	nop

080149f8 <_ZN16Screen1PresenterD0Ev>:
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f7ff ffd9 	bl	80149b8 <_ZN16Screen1PresenterD1Ev>
 8014a06:	2110      	movs	r1, #16
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f014 fe34 	bl	8029676 <_ZdlPvj>
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	4618      	mov	r0, r3
 8014a12:	3708      	adds	r7, #8
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <_ZThn4_N16Screen1PresenterD0Ev>:
 8014a18:	f1a0 0004 	sub.w	r0, r0, #4
 8014a1c:	e7ec      	b.n	80149f8 <_ZN16Screen1PresenterD0Ev>
	...

08014a20 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b082      	sub	sp, #8
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	6039      	str	r1, [r7, #0]
    : view(v)
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7ff ff7f 	bl	8014930 <_ZN8touchgfx9PresenterC1Ev>
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	3304      	adds	r3, #4
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7ff ff8a 	bl	8014950 <_ZN13ModelListenerC1Ev>
 8014a3c:	4a06      	ldr	r2, [pc, #24]	; (8014a58 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	601a      	str	r2, [r3, #0]
 8014a42:	4a06      	ldr	r2, [pc, #24]	; (8014a5c <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	605a      	str	r2, [r3, #4]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	683a      	ldr	r2, [r7, #0]
 8014a4c:	60da      	str	r2, [r3, #12]
{

}
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	4618      	mov	r0, r3
 8014a52:	3708      	adds	r7, #8
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}
 8014a58:	0802badc 	.word	0x0802badc
 8014a5c:	0802baf4 	.word	0x0802baf4

08014a60 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8014a60:	b480      	push	{r7}
 8014a62:	b083      	sub	sp, #12
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]

}
 8014a68:	bf00      	nop
 8014a6a:	370c      	adds	r7, #12
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a72:	4770      	bx	lr

08014a74 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8014a74:	b480      	push	{r7}
 8014a76:	b083      	sub	sp, #12
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]

}
 8014a7c:	bf00      	nop
 8014a7e:	370c      	adds	r7, #12
 8014a80:	46bd      	mov	sp, r7
 8014a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a86:	4770      	bx	lr

08014a88 <_ZN16Screen1Presenter20PresenterGetFlowRateEh>:
void Screen1Presenter::PresenterGetFlowRate(uint8_t Flow){
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b082      	sub	sp, #8
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	460b      	mov	r3, r1
 8014a92:	70fb      	strb	r3, [r7, #3]
	model->ModelGetFlowRate(Flow);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	689b      	ldr	r3, [r3, #8]
 8014a98:	78fa      	ldrb	r2, [r7, #3]
 8014a9a:	4611      	mov	r1, r2
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7ff ff07 	bl	80148b0 <_ZN5Model16ModelGetFlowRateEh>
}
 8014aa2:	bf00      	nop
 8014aa4:	3708      	adds	r7, #8
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}
	...

08014aac <_ZN11Screen1ViewD1Ev>:
class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    uint8_t Flow;
    virtual ~Screen1View() {}
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b082      	sub	sp, #8
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	4a05      	ldr	r2, [pc, #20]	; (8014acc <_ZN11Screen1ViewD1Ev+0x20>)
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	601a      	str	r2, [r3, #0]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7fe fe7f 	bl	80137c0 <_ZN15Screen1ViewBaseD1Ev>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	3708      	adds	r7, #8
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}
 8014acc:	0802bb2c 	.word	0x0802bb2c

08014ad0 <_ZN11Screen1ViewD0Ev>:
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b082      	sub	sp, #8
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f7ff ffe7 	bl	8014aac <_ZN11Screen1ViewD1Ev>
 8014ade:	f44f 7148 	mov.w	r1, #800	; 0x320
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f014 fdc7 	bl	8029676 <_ZdlPvj>
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	4618      	mov	r0, r3
 8014aec:	3708      	adds	r7, #8
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}
	...

08014af4 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7fe fed8 	bl	80138b4 <_ZN15Screen1ViewBaseC1Ev>
 8014b04:	4a03      	ldr	r2, [pc, #12]	; (8014b14 <_ZN11Screen1ViewC1Ev+0x20>)
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	601a      	str	r2, [r3, #0]
{

}
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3708      	adds	r7, #8
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	0802bb2c 	.word	0x0802bb2c

08014b18 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b082      	sub	sp, #8
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7ff f894 	bl	8013c50 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8014b28:	bf00      	nop
 8014b2a:	3708      	adds	r7, #8
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bd80      	pop	{r7, pc}

08014b30 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b082      	sub	sp, #8
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fe fc72 	bl	8013424 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014b40:	bf00      	nop
 8014b42:	3708      	adds	r7, #8
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}

08014b48 <_ZN11Screen1View19syringePumpProgressEv>:

void Screen1View::syringePumpProgress(){
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
	//Flow=textArea1.getWildcard();
	Flow=textProgress1.getValue();
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8014b56:	4618      	mov	r0, r3
 8014b58:	f002 f8ae 	bl	8016cb8 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	b2da      	uxtb	r2, r3
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
	presenter->PresenterGetFlowRate(Flow);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 8014b70:	4619      	mov	r1, r3
 8014b72:	4610      	mov	r0, r2
 8014b74:	f7ff ff88 	bl	8014a88 <_ZN16Screen1Presenter20PresenterGetFlowRateEh>
}
 8014b78:	bf00      	nop
 8014b7a:	3708      	adds	r7, #8
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}

08014b80 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b082      	sub	sp, #8
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	4a09      	ldr	r2, [pc, #36]	; (8014bb0 <_ZN15screenPresenterD1Ev+0x30>)
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	601a      	str	r2, [r3, #0]
 8014b8e:	4a09      	ldr	r2, [pc, #36]	; (8014bb4 <_ZN15screenPresenterD1Ev+0x34>)
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	605a      	str	r2, [r3, #4]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	3304      	adds	r3, #4
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f7ff feed 	bl	8014978 <_ZN13ModelListenerD1Ev>
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7ff fea5 	bl	80148f0 <_ZN8touchgfx9PresenterD1Ev>
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	4618      	mov	r0, r3
 8014baa:	3708      	adds	r7, #8
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}
 8014bb0:	0802bb64 	.word	0x0802bb64
 8014bb4:	0802bb7c 	.word	0x0802bb7c

08014bb8 <_ZThn4_N15screenPresenterD1Ev>:
 8014bb8:	f1a0 0004 	sub.w	r0, r0, #4
 8014bbc:	e7e0      	b.n	8014b80 <_ZN15screenPresenterD1Ev>
 8014bbe:	bf00      	nop

08014bc0 <_ZN15screenPresenterD0Ev>:
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b082      	sub	sp, #8
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f7ff ffd9 	bl	8014b80 <_ZN15screenPresenterD1Ev>
 8014bce:	2110      	movs	r1, #16
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f014 fd50 	bl	8029676 <_ZdlPvj>
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3708      	adds	r7, #8
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <_ZThn4_N15screenPresenterD0Ev>:
 8014be0:	f1a0 0004 	sub.w	r0, r0, #4
 8014be4:	e7ec      	b.n	8014bc0 <_ZN15screenPresenterD0Ev>
	...

08014be8 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b082      	sub	sp, #8
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
    : view(v)
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7ff fe9b 	bl	8014930 <_ZN8touchgfx9PresenterC1Ev>
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	3304      	adds	r3, #4
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7ff fea6 	bl	8014950 <_ZN13ModelListenerC1Ev>
 8014c04:	4a06      	ldr	r2, [pc, #24]	; (8014c20 <_ZN15screenPresenterC1ER10screenView+0x38>)
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	601a      	str	r2, [r3, #0]
 8014c0a:	4a06      	ldr	r2, [pc, #24]	; (8014c24 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	605a      	str	r2, [r3, #4]
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	683a      	ldr	r2, [r7, #0]
 8014c14:	60da      	str	r2, [r3, #12]
{

}
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3708      	adds	r7, #8
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	0802bb64 	.word	0x0802bb64
 8014c24:	0802bb7c 	.word	0x0802bb7c

08014c28 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8014c28:	b480      	push	{r7}
 8014c2a:	b083      	sub	sp, #12
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]

}
 8014c30:	bf00      	nop
 8014c32:	370c      	adds	r7, #12
 8014c34:	46bd      	mov	sp, r7
 8014c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3a:	4770      	bx	lr

08014c3c <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8014c3c:	b480      	push	{r7}
 8014c3e:	b083      	sub	sp, #12
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]

}
 8014c44:	bf00      	nop
 8014c46:	370c      	adds	r7, #12
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4e:	4770      	bx	lr

08014c50 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	4a05      	ldr	r2, [pc, #20]	; (8014c70 <_ZN10screenViewD1Ev+0x20>)
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	601a      	str	r2, [r3, #0]
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7ff fa55 	bl	8014110 <_ZN14screenViewBaseD1Ev>
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3708      	adds	r7, #8
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}
 8014c70:	0802bb8c 	.word	0x0802bb8c

08014c74 <_ZN10screenViewD0Ev>:
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b082      	sub	sp, #8
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f7ff ffe7 	bl	8014c50 <_ZN10screenViewD1Ev>
 8014c82:	21b0      	movs	r1, #176	; 0xb0
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f014 fcf6 	bl	8029676 <_ZdlPvj>
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	3708      	adds	r7, #8
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd80      	pop	{r7, pc}

08014c94 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b082      	sub	sp, #8
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f7ff fa74 	bl	801418c <_ZN14screenViewBaseC1Ev>
 8014ca4:	4a03      	ldr	r2, [pc, #12]	; (8014cb4 <_ZN10screenViewC1Ev+0x20>)
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	601a      	str	r2, [r3, #0]
{

}
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	4618      	mov	r0, r3
 8014cae:	3708      	adds	r7, #8
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}
 8014cb4:	0802bb8c 	.word	0x0802bb8c

08014cb8 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b082      	sub	sp, #8
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7ff fadc 	bl	8014280 <_ZN14screenViewBase11setupScreenEv>
}
 8014cc8:	bf00      	nop
 8014cca:	3708      	adds	r7, #8
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f7fe fba2 	bl	8013424 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014ce0:	bf00      	nop
 8014ce2:	3708      	adds	r7, #8
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}

08014ce8 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8014ce8:	b480      	push	{r7}
 8014cea:	b083      	sub	sp, #12
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
    {
 8014cf0:	4a04      	ldr	r2, [pc, #16]	; (8014d04 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	601a      	str	r2, [r3, #0]
    }
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	370c      	adds	r7, #12
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d02:	4770      	bx	lr
 8014d04:	0802bbd8 	.word	0x0802bbd8

08014d08 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b082      	sub	sp, #8
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
    }
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f7ff ffe9 	bl	8014ce8 <_ZN8touchgfx15TouchControllerD1Ev>
 8014d16:	2104      	movs	r1, #4
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f014 fcac 	bl	8029676 <_ZdlPvj>
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	4618      	mov	r0, r3
 8014d22:	3708      	adds	r7, #8
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}

08014d28 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8014d28:	b480      	push	{r7}
 8014d2a:	b083      	sub	sp, #12
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8014d30:	bf00      	nop
 8014d32:	370c      	adds	r7, #12
 8014d34:	46bd      	mov	sp, r7
 8014d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3a:	4770      	bx	lr

08014d3c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8014d3c:	b480      	push	{r7}
 8014d3e:	b085      	sub	sp, #20
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	60f8      	str	r0, [r7, #12]
 8014d44:	60b9      	str	r1, [r7, #8]
 8014d46:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8014d48:	2300      	movs	r3, #0
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3714      	adds	r7, #20
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d54:	4770      	bx	lr
	...

08014d58 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b082      	sub	sp, #8
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
 8014d60:	4a05      	ldr	r2, [pc, #20]	; (8014d78 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	601a      	str	r2, [r3, #0]
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7ff ffbd 	bl	8014ce8 <_ZN8touchgfx15TouchControllerD1Ev>
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	4618      	mov	r0, r3
 8014d72:	3708      	adds	r7, #8
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	0802bbc0 	.word	0x0802bbc0

08014d7c <_ZN20STM32TouchControllerD0Ev>:
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b082      	sub	sp, #8
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	6878      	ldr	r0, [r7, #4]
 8014d86:	f7ff ffe7 	bl	8014d58 <_ZN20STM32TouchControllerD1Ev>
 8014d8a:	2104      	movs	r1, #4
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f014 fc72 	bl	8029676 <_ZdlPvj>
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	4618      	mov	r0, r3
 8014d96:	3708      	adds	r7, #8
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8014d9c:	b480      	push	{r7}
 8014d9e:	b083      	sub	sp, #12
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	4603      	mov	r3, r0
 8014da4:	71fb      	strb	r3, [r7, #7]

}
 8014da6:	bf00      	nop
 8014da8:	370c      	adds	r7, #12
 8014daa:	46bd      	mov	sp, r7
 8014dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db0:	4770      	bx	lr

08014db2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8014db2:	b480      	push	{r7}
 8014db4:	b083      	sub	sp, #12
 8014db6:	af00      	add	r7, sp, #0
 8014db8:	4603      	mov	r3, r0
 8014dba:	71fb      	strb	r3, [r7, #7]

}
 8014dbc:	bf00      	nop
 8014dbe:	370c      	adds	r7, #12
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc6:	4770      	bx	lr

08014dc8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8014dc8:	b480      	push	{r7}
 8014dca:	b083      	sub	sp, #12
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	4603      	mov	r3, r0
 8014dd0:	71fb      	strb	r3, [r7, #7]

}
 8014dd2:	bf00      	nop
 8014dd4:	370c      	adds	r7, #12
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ddc:	4770      	bx	lr
	...

08014de0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8014de0:	b480      	push	{r7}
 8014de2:	b083      	sub	sp, #12
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
    {
 8014de8:	4a04      	ldr	r2, [pc, #16]	; (8014dfc <_ZN8touchgfx3HALD1Ev+0x1c>)
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	601a      	str	r2, [r3, #0]
    }
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	4618      	mov	r0, r3
 8014df2:	370c      	adds	r7, #12
 8014df4:	46bd      	mov	sp, r7
 8014df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfa:	4770      	bx	lr
 8014dfc:	0802c910 	.word	0x0802c910

08014e00 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b082      	sub	sp, #8
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
    }
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f7ff ffe9 	bl	8014de0 <_ZN8touchgfx3HALD1Ev>
 8014e0e:	217c      	movs	r1, #124	; 0x7c
 8014e10:	6878      	ldr	r0, [r7, #4]
 8014e12:	f014 fc30 	bl	8029676 <_ZdlPvj>
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	4618      	mov	r0, r3
 8014e1a:	3708      	adds	r7, #8
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd80      	pop	{r7, pc}

08014e20 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8014e20:	b480      	push	{r7}
 8014e22:	b083      	sub	sp, #12
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	460b      	mov	r3, r1
 8014e2a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	78fa      	ldrb	r2, [r7, #3]
 8014e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	2201      	movs	r2, #1
 8014e38:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8014e3c:	bf00      	nop
 8014e3e:	370c      	adds	r7, #12
 8014e40:	46bd      	mov	sp, r7
 8014e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e46:	4770      	bx	lr

08014e48 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d009      	beq.n	8014e6e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	685a      	ldr	r2, [r3, #4]
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	685b      	ldr	r3, [r3, #4]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	4610      	mov	r0, r2
 8014e68:	4798      	blx	r3
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	e000      	b.n	8014e70 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8014e6e:	2300      	movs	r3, #0
        }
    }
 8014e70:	4618      	mov	r0, r3
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f003 f80f 	bl	8017ea4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	3390      	adds	r3, #144	; 0x90
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	4798      	blx	r3
    }
 8014e92:	bf00      	nop
 8014e94:	3708      	adds	r7, #8
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}

08014e9a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8014e9a:	b480      	push	{r7}
 8014e9c:	b083      	sub	sp, #12
 8014e9e:	af00      	add	r7, sp, #0
 8014ea0:	6078      	str	r0, [r7, #4]
 8014ea2:	6039      	str	r1, [r7, #0]
    {
        return false;
 8014ea4:	2300      	movs	r3, #0
    }
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	370c      	adds	r7, #12
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb0:	4770      	bx	lr
	...

08014eb4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b084      	sub	sp, #16
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	60f8      	str	r0, [r7, #12]
 8014ebc:	60b9      	str	r1, [r7, #8]
 8014ebe:	607a      	str	r2, [r7, #4]
 8014ec0:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d106      	bne.n	8014ed6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8014ec8:	4b11      	ldr	r3, [pc, #68]	; (8014f10 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8014eca:	4a12      	ldr	r2, [pc, #72]	; (8014f14 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8014ecc:	f240 216b 	movw	r1, #619	; 0x26b
 8014ed0:	4811      	ldr	r0, [pc, #68]	; (8014f18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8014ed2:	f014 fbff 	bl	80296d4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	68ba      	ldr	r2, [r7, #8]
 8014eda:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	683a      	ldr	r2, [r7, #0]
 8014ee6:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	bf14      	ite	ne
 8014eee:	2301      	movne	r3, #1
 8014ef0:	2300      	moveq	r3, #0
 8014ef2:	b2da      	uxtb	r2, r3
 8014ef4:	4b09      	ldr	r3, [pc, #36]	; (8014f1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8014ef6:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	bf14      	ite	ne
 8014efe:	2301      	movne	r3, #1
 8014f00:	2300      	moveq	r3, #0
 8014f02:	b2da      	uxtb	r2, r3
 8014f04:	4b06      	ldr	r3, [pc, #24]	; (8014f20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8014f06:	701a      	strb	r2, [r3, #0]
    }
 8014f08:	bf00      	nop
 8014f0a:	3710      	adds	r7, #16
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}
 8014f10:	0802b24c 	.word	0x0802b24c
 8014f14:	0802b284 	.word	0x0802b284
 8014f18:	0802b2d4 	.word	0x0802b2d4
 8014f1c:	20005942 	.word	0x20005942
 8014f20:	20005943 	.word	0x20005943

08014f24 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8014f24:	b480      	push	{r7}
 8014f26:	b083      	sub	sp, #12
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8014f2c:	2300      	movs	r3, #0
    }
 8014f2e:	4618      	mov	r0, r3
 8014f30:	370c      	adds	r7, #12
 8014f32:	46bd      	mov	sp, r7
 8014f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f38:	4770      	bx	lr

08014f3a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8014f3a:	b580      	push	{r7, lr}
 8014f3c:	b082      	sub	sp, #8
 8014f3e:	af00      	add	r7, sp, #0
 8014f40:	6078      	str	r0, [r7, #4]
 8014f42:	460b      	mov	r3, r1
 8014f44:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d004      	beq.n	8014f58 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f52:	887a      	ldrh	r2, [r7, #2]
 8014f54:	4610      	mov	r0, r2
 8014f56:	4798      	blx	r3
        }
    }
 8014f58:	bf00      	nop
 8014f5a:	3708      	adds	r7, #8
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}

08014f60 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b082      	sub	sp, #8
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	685a      	ldr	r2, [r3, #4]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	3318      	adds	r3, #24
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	4610      	mov	r0, r2
 8014f78:	4798      	blx	r3
 8014f7a:	4603      	mov	r3, r0
    }
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	3708      	adds	r7, #8
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}

08014f84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8014f84:	b480      	push	{r7}
 8014f86:	b083      	sub	sp, #12
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014f98:	429a      	cmp	r2, r3
 8014f9a:	d017      	beq.n	8014fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8014f9c:	4b1a      	ldr	r3, [pc, #104]	; (8015008 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014f9e:	781b      	ldrb	r3, [r3, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d12a      	bne.n	8014ffa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014fa4:	4b19      	ldr	r3, [pc, #100]	; (801500c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014fa6:	881a      	ldrh	r2, [r3, #0]
 8014fa8:	4b19      	ldr	r3, [pc, #100]	; (8015010 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014faa:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014fac:	4b19      	ldr	r3, [pc, #100]	; (8015014 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014fae:	881a      	ldrh	r2, [r3, #0]
 8014fb0:	4b19      	ldr	r3, [pc, #100]	; (8015018 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014fb2:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8014fb4:	4b16      	ldr	r3, [pc, #88]	; (8015010 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014fb6:	881a      	ldrh	r2, [r3, #0]
 8014fb8:	4b16      	ldr	r3, [pc, #88]	; (8015014 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014fba:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8014fbc:	4b16      	ldr	r3, [pc, #88]	; (8015018 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014fbe:	881a      	ldrh	r2, [r3, #0]
 8014fc0:	4b12      	ldr	r3, [pc, #72]	; (801500c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014fc2:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8014fc4:	4b10      	ldr	r3, [pc, #64]	; (8015008 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014fc6:	2201      	movs	r2, #1
 8014fc8:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8014fca:	e016      	b.n	8014ffa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8014fcc:	4b0e      	ldr	r3, [pc, #56]	; (8015008 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014fce:	781b      	ldrb	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d012      	beq.n	8014ffa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8014fd4:	4b0f      	ldr	r3, [pc, #60]	; (8015014 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014fd6:	881a      	ldrh	r2, [r3, #0]
 8014fd8:	4b0d      	ldr	r3, [pc, #52]	; (8015010 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014fda:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8014fdc:	4b0b      	ldr	r3, [pc, #44]	; (801500c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014fde:	881a      	ldrh	r2, [r3, #0]
 8014fe0:	4b0d      	ldr	r3, [pc, #52]	; (8015018 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014fe2:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8014fe4:	4b0c      	ldr	r3, [pc, #48]	; (8015018 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014fe6:	881a      	ldrh	r2, [r3, #0]
 8014fe8:	4b0a      	ldr	r3, [pc, #40]	; (8015014 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014fea:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8014fec:	4b08      	ldr	r3, [pc, #32]	; (8015010 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014fee:	881a      	ldrh	r2, [r3, #0]
 8014ff0:	4b06      	ldr	r3, [pc, #24]	; (801500c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014ff2:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8014ff4:	4b04      	ldr	r3, [pc, #16]	; (8015008 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	701a      	strb	r2, [r3, #0]
    }
 8014ffa:	bf00      	nop
 8014ffc:	370c      	adds	r7, #12
 8014ffe:	46bd      	mov	sp, r7
 8015000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015004:	4770      	bx	lr
 8015006:	bf00      	nop
 8015008:	2000593c 	.word	0x2000593c
 801500c:	20005938 	.word	0x20005938
 8015010:	2000593e 	.word	0x2000593e
 8015014:	2000593a 	.word	0x2000593a
 8015018:	20005940 	.word	0x20005940

0801501c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	4618      	mov	r0, r3
 8015028:	f002 f9c3 	bl	80173b2 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801502c:	bf00      	nop
 801502e:	3708      	adds	r7, #8
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}

08015034 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	4a05      	ldr	r2, [pc, #20]	; (8015054 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	601a      	str	r2, [r3, #0]
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4618      	mov	r0, r3
 8015046:	f7ff fecb 	bl	8014de0 <_ZN8touchgfx3HALD1Ev>
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	4618      	mov	r0, r3
 801504e:	3708      	adds	r7, #8
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	0802bdf4 	.word	0x0802bdf4

08015058 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8015058:	b580      	push	{r7, lr}
 801505a:	b082      	sub	sp, #8
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f7ff ffe7 	bl	8015034 <_ZN20TouchGFXGeneratedHALD1Ev>
 8015066:	217c      	movs	r1, #124	; 0x7c
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f014 fb04 	bl	8029676 <_ZdlPvj>
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	4618      	mov	r0, r3
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}

08015078 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015078:	b580      	push	{r7, lr}
 801507a:	b082      	sub	sp, #8
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	4618      	mov	r0, r3
 8015084:	f7ff ffca 	bl	801501c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8015088:	bf00      	nop
 801508a:	3708      	adds	r7, #8
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}

08015090 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	4618      	mov	r0, r3
 801509c:	f001 f844 	bl	8016128 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80150a0:	bf00      	nop
 80150a2:	3708      	adds	r7, #8
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}

080150a8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	4618      	mov	r0, r3
 80150b4:	f001 f8ba 	bl	801622c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80150b8:	4603      	mov	r3, r0
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	3708      	adds	r7, #8
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}

080150c2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80150c2:	b580      	push	{r7, lr}
 80150c4:	b082      	sub	sp, #8
 80150c6:	af00      	add	r7, sp, #0
 80150c8:	6078      	str	r0, [r7, #4]
 80150ca:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6839      	ldr	r1, [r7, #0]
 80150d0:	4618      	mov	r0, r3
 80150d2:	f001 f8b9 	bl	8016248 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80150d6:	bf00      	nop
 80150d8:	3708      	adds	r7, #8
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}

080150de <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80150de:	b580      	push	{r7, lr}
 80150e0:	b082      	sub	sp, #8
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
 80150e6:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6839      	ldr	r1, [r7, #0]
 80150ec:	4618      	mov	r0, r3
 80150ee:	f001 f8c1 	bl	8016274 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80150f2:	bf00      	nop
 80150f4:	3708      	adds	r7, #8
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}

080150fa <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80150fa:	b580      	push	{r7, lr}
 80150fc:	b084      	sub	sp, #16
 80150fe:	af00      	add	r7, sp, #0
 8015100:	60f8      	str	r0, [r7, #12]
 8015102:	60b9      	str	r1, [r7, #8]
 8015104:	607a      	str	r2, [r7, #4]
 8015106:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8015108:	68f8      	ldr	r0, [r7, #12]
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	687a      	ldr	r2, [r7, #4]
 801510e:	68b9      	ldr	r1, [r7, #8]
 8015110:	f001 f8fe 	bl	8016310 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8015114:	4603      	mov	r3, r0
}
 8015116:	4618      	mov	r0, r3
 8015118:	3710      	adds	r7, #16
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}

0801511e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801511e:	b580      	push	{r7, lr}
 8015120:	b082      	sub	sp, #8
 8015122:	af00      	add	r7, sp, #0
 8015124:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	4618      	mov	r0, r3
 801512a:	f001 f82f 	bl	801618c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801512e:	bf00      	nop
 8015130:	3708      	adds	r7, #8
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}

08015136 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8015136:	b580      	push	{r7, lr}
 8015138:	b082      	sub	sp, #8
 801513a:	af00      	add	r7, sp, #0
 801513c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	4618      	mov	r0, r3
 8015142:	f001 f82f 	bl	80161a4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8015146:	bf00      	nop
 8015148:	3708      	adds	r7, #8
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}

0801514e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801514e:	b580      	push	{r7, lr}
 8015150:	b082      	sub	sp, #8
 8015152:	af00      	add	r7, sp, #0
 8015154:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	4618      	mov	r0, r3
 801515a:	f001 f82e 	bl	80161ba <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801515e:	bf00      	nop
 8015160:	3708      	adds	r7, #8
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}

08015166 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8015166:	b580      	push	{r7, lr}
 8015168:	b082      	sub	sp, #8
 801516a:	af00      	add	r7, sp, #0
 801516c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	4618      	mov	r0, r3
 8015172:	f001 f82d 	bl	80161d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8015176:	bf00      	nop
 8015178:	3708      	adds	r7, #8
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}
	...

08015180 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	4a05      	ldr	r2, [pc, #20]	; (80151a0 <_ZN11TouchGFXHALD1Ev+0x20>)
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	601a      	str	r2, [r3, #0]
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	4618      	mov	r0, r3
 8015192:	f7ff ff4f 	bl	8015034 <_ZN20TouchGFXGeneratedHALD1Ev>
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	4618      	mov	r0, r3
 801519a:	3708      	adds	r7, #8
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	0802bbf0 	.word	0x0802bbf0

080151a4 <_ZN11TouchGFXHALD0Ev>:
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b082      	sub	sp, #8
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	f7ff ffe7 	bl	8015180 <_ZN11TouchGFXHALD1Ev>
 80151b2:	217c      	movs	r1, #124	; 0x7c
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f014 fa5e 	bl	8029676 <_ZdlPvj>
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	4618      	mov	r0, r3
 80151be:	3708      	adds	r7, #8
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}

080151c4 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80151c8:	2200      	movs	r2, #0
 80151ca:	2101      	movs	r1, #1
 80151cc:	2001      	movs	r0, #1
 80151ce:	f7f8 ff08 	bl	800dfe2 <osSemaphoreNew>
 80151d2:	4603      	mov	r3, r0
 80151d4:	4a0f      	ldr	r2, [pc, #60]	; (8015214 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80151d6:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80151d8:	4b0e      	ldr	r3, [pc, #56]	; (8015214 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d105      	bne.n	80151ec <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80151e0:	4b0d      	ldr	r3, [pc, #52]	; (8015218 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80151e2:	4a0e      	ldr	r2, [pc, #56]	; (801521c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80151e4:	2125      	movs	r1, #37	; 0x25
 80151e6:	480e      	ldr	r0, [pc, #56]	; (8015220 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80151e8:	f014 fa74 	bl	80296d4 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80151ec:	2200      	movs	r2, #0
 80151ee:	2104      	movs	r1, #4
 80151f0:	2001      	movs	r0, #1
 80151f2:	f7f9 f815 	bl	800e220 <osMessageQueueNew>
 80151f6:	4603      	mov	r3, r0
 80151f8:	4a0a      	ldr	r2, [pc, #40]	; (8015224 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80151fa:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80151fc:	4b09      	ldr	r3, [pc, #36]	; (8015224 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d105      	bne.n	8015210 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8015204:	4b08      	ldr	r3, [pc, #32]	; (8015228 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8015206:	4a05      	ldr	r2, [pc, #20]	; (801521c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8015208:	2129      	movs	r1, #41	; 0x29
 801520a:	4805      	ldr	r0, [pc, #20]	; (8015220 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801520c:	f014 fa62 	bl	80296d4 <__assert_func>
}
 8015210:	bf00      	nop
 8015212:	bd80      	pop	{r7, pc}
 8015214:	200052e0 	.word	0x200052e0
 8015218:	0802b318 	.word	0x0802b318
 801521c:	0802b364 	.word	0x0802b364
 8015220:	0802b394 	.word	0x0802b394
 8015224:	200052e4 	.word	0x200052e4
 8015228:	0802b3c0 	.word	0x0802b3c0

0801522c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 801522c:	b580      	push	{r7, lr}
 801522e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8015230:	4b04      	ldr	r3, [pc, #16]	; (8015244 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	f04f 31ff 	mov.w	r1, #4294967295
 8015238:	4618      	mov	r0, r3
 801523a:	f7f8 ff5b 	bl	800e0f4 <osSemaphoreAcquire>
}
 801523e:	bf00      	nop
 8015240:	bd80      	pop	{r7, pc}
 8015242:	bf00      	nop
 8015244:	200052e0 	.word	0x200052e0

08015248 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8015248:	b580      	push	{r7, lr}
 801524a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 801524c:	4b03      	ldr	r3, [pc, #12]	; (801525c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	4618      	mov	r0, r3
 8015252:	f7f8 ffa1 	bl	800e198 <osSemaphoreRelease>
}
 8015256:	bf00      	nop
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop
 801525c:	200052e0 	.word	0x200052e0

08015260 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8015260:	b580      	push	{r7, lr}
 8015262:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8015264:	4b03      	ldr	r3, [pc, #12]	; (8015274 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	2100      	movs	r1, #0
 801526a:	4618      	mov	r0, r3
 801526c:	f7f8 ff42 	bl	800e0f4 <osSemaphoreAcquire>
}
 8015270:	bf00      	nop
 8015272:	bd80      	pop	{r7, pc}
 8015274:	200052e0 	.word	0x200052e0

08015278 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8015278:	b580      	push	{r7, lr}
 801527a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 801527c:	4b03      	ldr	r3, [pc, #12]	; (801528c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	4618      	mov	r0, r3
 8015282:	f7f8 ff89 	bl	800e198 <osSemaphoreRelease>
}
 8015286:	bf00      	nop
 8015288:	bd80      	pop	{r7, pc}
 801528a:	bf00      	nop
 801528c:	200052e0 	.word	0x200052e0

08015290 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8015290:	b580      	push	{r7, lr}
 8015292:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8015294:	4b04      	ldr	r3, [pc, #16]	; (80152a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8015296:	6818      	ldr	r0, [r3, #0]
 8015298:	2300      	movs	r3, #0
 801529a:	2200      	movs	r2, #0
 801529c:	4903      	ldr	r1, [pc, #12]	; (80152ac <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 801529e:	f7f9 f833 	bl	800e308 <osMessageQueuePut>
}
 80152a2:	bf00      	nop
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	200052e4 	.word	0x200052e4
 80152ac:	20000140 	.word	0x20000140

080152b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80152b6:	4b09      	ldr	r3, [pc, #36]	; (80152dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80152b8:	6818      	ldr	r0, [r3, #0]
 80152ba:	1d39      	adds	r1, r7, #4
 80152bc:	2300      	movs	r3, #0
 80152be:	2200      	movs	r2, #0
 80152c0:	f7f9 f882 	bl	800e3c8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80152c4:	4b05      	ldr	r3, [pc, #20]	; (80152dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80152c6:	6818      	ldr	r0, [r3, #0]
 80152c8:	1d39      	adds	r1, r7, #4
 80152ca:	f04f 33ff 	mov.w	r3, #4294967295
 80152ce:	2200      	movs	r2, #0
 80152d0:	f7f9 f87a 	bl	800e3c8 <osMessageQueueGet>
}
 80152d4:	bf00      	nop
 80152d6:	3708      	adds	r7, #8
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd80      	pop	{r7, pc}
 80152dc:	200052e4 	.word	0x200052e4

080152e0 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b082      	sub	sp, #8
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	4603      	mov	r3, r0
 80152e8:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 80152ea:	88fb      	ldrh	r3, [r7, #6]
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7f8 fe5d 	bl	800dfac <osDelay>
}
 80152f2:	bf00      	nop
 80152f4:	3708      	adds	r7, #8
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}

080152fa <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 80152fa:	b480      	push	{r7}
 80152fc:	b083      	sub	sp, #12
 80152fe:	af00      	add	r7, sp, #0
 8015300:	6078      	str	r0, [r7, #4]
        : color(0)
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	2200      	movs	r2, #0
 8015306:	601a      	str	r2, [r3, #0]
    }
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	4618      	mov	r0, r3
 801530c:	370c      	adds	r7, #12
 801530e:	46bd      	mov	sp, r7
 8015310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015314:	4770      	bx	lr
	...

08015318 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
    {
 8015320:	4a04      	ldr	r2, [pc, #16]	; (8015334 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	601a      	str	r2, [r3, #0]
    }
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	4618      	mov	r0, r3
 801532a:	370c      	adds	r7, #12
 801532c:	46bd      	mov	sp, r7
 801532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015332:	4770      	bx	lr
 8015334:	0802bcac 	.word	0x0802bcac

08015338 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8015338:	b580      	push	{r7, lr}
 801533a:	b082      	sub	sp, #8
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
    }
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f7ff ffe9 	bl	8015318 <_ZN8touchgfx9DMA_QueueD1Ev>
 8015346:	2104      	movs	r1, #4
 8015348:	6878      	ldr	r0, [r7, #4]
 801534a:	f014 f994 	bl	8029676 <_ZdlPvj>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	4618      	mov	r0, r3
 8015352:	3708      	adds	r7, #8
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8015358:	b580      	push	{r7, lr}
 801535a:	b082      	sub	sp, #8
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	3344      	adds	r3, #68	; 0x44
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	4798      	blx	r3
    }
 801536c:	bf00      	nop
 801536e:	3708      	adds	r7, #8
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}

08015374 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8015374:	b480      	push	{r7}
 8015376:	b083      	sub	sp, #12
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
    {
 801537c:	4a04      	ldr	r2, [pc, #16]	; (8015390 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	601a      	str	r2, [r3, #0]
    }
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	4618      	mov	r0, r3
 8015386:	370c      	adds	r7, #12
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr
 8015390:	0802cd5c 	.word	0x0802cd5c

08015394 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8015394:	b580      	push	{r7, lr}
 8015396:	b082      	sub	sp, #8
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
    }
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f7ff ffe9 	bl	8015374 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80153a2:	210c      	movs	r1, #12
 80153a4:	6878      	ldr	r0, [r7, #4]
 80153a6:	f014 f966 	bl	8029676 <_ZdlPvj>
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	4618      	mov	r0, r3
 80153ae:	3708      	adds	r7, #8
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80153b4:	b480      	push	{r7}
 80153b6:	b083      	sub	sp, #12
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80153be:	4a09      	ldr	r2, [pc, #36]	; (80153e4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	601a      	str	r2, [r3, #0]
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	683a      	ldr	r2, [r7, #0]
 80153c8:	605a      	str	r2, [r3, #4]
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2200      	movs	r2, #0
 80153ce:	721a      	strb	r2, [r3, #8]
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2200      	movs	r2, #0
 80153d4:	725a      	strb	r2, [r3, #9]
    {
    }
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	4618      	mov	r0, r3
 80153da:	370c      	adds	r7, #12
 80153dc:	46bd      	mov	sp, r7
 80153de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e2:	4770      	bx	lr
 80153e4:	0802cd5c 	.word	0x0802cd5c

080153e8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b082      	sub	sp, #8
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	685a      	ldr	r2, [r3, #4]
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	685b      	ldr	r3, [r3, #4]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	3314      	adds	r3, #20
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	4610      	mov	r0, r2
 8015400:	4798      	blx	r3
    }
 8015402:	bf00      	nop
 8015404:	3708      	adds	r7, #8
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
	...

0801540c <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 801540c:	b580      	push	{r7, lr}
 801540e:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8015410:	4b13      	ldr	r3, [pc, #76]	; (8015460 <DMA2D_IRQHandler+0x54>)
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	f003 0302 	and.w	r3, r3, #2
 8015418:	2b00      	cmp	r3, #0
 801541a:	bf14      	ite	ne
 801541c:	2301      	movne	r3, #1
 801541e:	2300      	moveq	r3, #0
 8015420:	b2db      	uxtb	r3, r3
 8015422:	2b00      	cmp	r3, #0
 8015424:	d019      	beq.n	801545a <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8015426:	4b0e      	ldr	r3, [pc, #56]	; (8015460 <DMA2D_IRQHandler+0x54>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801542e:	2b00      	cmp	r3, #0
 8015430:	bf14      	ite	ne
 8015432:	2301      	movne	r3, #1
 8015434:	2300      	moveq	r3, #0
 8015436:	b2db      	uxtb	r3, r3
 8015438:	2b00      	cmp	r3, #0
 801543a:	d00e      	beq.n	801545a <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 801543c:	4b08      	ldr	r3, [pc, #32]	; (8015460 <DMA2D_IRQHandler+0x54>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	4a07      	ldr	r2, [pc, #28]	; (8015460 <DMA2D_IRQHandler+0x54>)
 8015442:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015446:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8015448:	4b05      	ldr	r3, [pc, #20]	; (8015460 <DMA2D_IRQHandler+0x54>)
 801544a:	2202      	movs	r2, #2
 801544c:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 801544e:	f7fc fe37 	bl	80120c0 <_ZN8touchgfx3HAL11getInstanceEv>
 8015452:	4603      	mov	r3, r0
 8015454:	4618      	mov	r0, r3
 8015456:	f7ff ffc7 	bl	80153e8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 801545a:	bf00      	nop
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	52001000 	.word	0x52001000

08015464 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8015464:	b580      	push	{r7, lr}
 8015466:	b082      	sub	sp, #8
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	3318      	adds	r3, #24
 8015470:	4618      	mov	r0, r3
 8015472:	f7ff ff42 	bl	80152fa <_ZN8touchgfx9colortypeC1Ev>
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	4618      	mov	r0, r3
 801547a:	3708      	adds	r7, #8
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}

08015480 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
 8015488:	4a05      	ldr	r2, [pc, #20]	; (80154a0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	601a      	str	r2, [r3, #0]
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	4618      	mov	r0, r3
 8015492:	f7ff ff41 	bl	8015318 <_ZN8touchgfx9DMA_QueueD1Ev>
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	4618      	mov	r0, r3
 801549a:	3708      	adds	r7, #8
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	0802cdac 	.word	0x0802cdac

080154a4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b082      	sub	sp, #8
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f7ff ffe7 	bl	8015480 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80154b2:	2114      	movs	r1, #20
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f014 f8de 	bl	8029676 <_ZdlPvj>
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	4618      	mov	r0, r3
 80154be:	3708      	adds	r7, #8
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}

080154c4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80154c4:	b480      	push	{r7}
 80154c6:	b083      	sub	sp, #12
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
        texts = t;
 80154cc:	4a04      	ldr	r2, [pc, #16]	; (80154e0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	6013      	str	r3, [r2, #0]
    }
 80154d2:	bf00      	nop
 80154d4:	370c      	adds	r7, #12
 80154d6:	46bd      	mov	sp, r7
 80154d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154dc:	4770      	bx	lr
 80154de:	bf00      	nop
 80154e0:	200059a0 	.word	0x200059a0

080154e4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80154e4:	b480      	push	{r7}
 80154e6:	b085      	sub	sp, #20
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	607a      	str	r2, [r7, #4]
 80154f0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80154f2:	4a0b      	ldr	r2, [pc, #44]	; (8015520 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	601a      	str	r2, [r3, #0]
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	68ba      	ldr	r2, [r7, #8]
 80154fc:	605a      	str	r2, [r3, #4]
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	687a      	ldr	r2, [r7, #4]
 8015502:	609a      	str	r2, [r3, #8]
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	683a      	ldr	r2, [r7, #0]
 8015508:	60da      	str	r2, [r3, #12]
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	69ba      	ldr	r2, [r7, #24]
 801550e:	611a      	str	r2, [r3, #16]
    {
    }
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	4618      	mov	r0, r3
 8015514:	3714      	adds	r7, #20
 8015516:	46bd      	mov	sp, r7
 8015518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551c:	4770      	bx	lr
 801551e:	bf00      	nop
 8015520:	0802bde4 	.word	0x0802bde4

08015524 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8015524:	b480      	push	{r7}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
    {
 801552c:	4a04      	ldr	r2, [pc, #16]	; (8015540 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	601a      	str	r2, [r3, #0]
    }
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	4618      	mov	r0, r3
 8015536:	370c      	adds	r7, #12
 8015538:	46bd      	mov	sp, r7
 801553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553e:	4770      	bx	lr
 8015540:	0802bde4 	.word	0x0802bde4

08015544 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8015544:	b580      	push	{r7, lr}
 8015546:	b082      	sub	sp, #8
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
    }
 801554c:	6878      	ldr	r0, [r7, #4]
 801554e:	f7ff ffe9 	bl	8015524 <_ZN8touchgfx7MVPHeapD1Ev>
 8015552:	2114      	movs	r1, #20
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f014 f88e 	bl	8029676 <_ZdlPvj>
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	4618      	mov	r0, r3
 801555e:	3708      	adds	r7, #8
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}

08015564 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8015564:	b480      	push	{r7}
 8015566:	b083      	sub	sp, #12
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
    {
 801556c:	4a04      	ldr	r2, [pc, #16]	; (8015580 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	601a      	str	r2, [r3, #0]
    }
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	4618      	mov	r0, r3
 8015576:	370c      	adds	r7, #12
 8015578:	46bd      	mov	sp, r7
 801557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557e:	4770      	bx	lr
 8015580:	0802d358 	.word	0x0802d358

08015584 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8015584:	b580      	push	{r7, lr}
 8015586:	b082      	sub	sp, #8
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
    }
 801558c:	6878      	ldr	r0, [r7, #4]
 801558e:	f7ff ffe9 	bl	8015564 <_ZN8touchgfx3LCDD1Ev>
 8015592:	2108      	movs	r1, #8
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	f014 f86e 	bl	8029676 <_ZdlPvj>
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	4618      	mov	r0, r3
 801559e:	3708      	adds	r7, #8
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}

080155a4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    virtual void initialize()
 80155a4:	b480      	push	{r7}
 80155a6:	b083      	sub	sp, #12
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
    }
 80155ac:	bf00      	nop
 80155ae:	370c      	adds	r7, #12
 80155b0:	46bd      	mov	sp, r7
 80155b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b6:	4770      	bx	lr

080155b8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
    virtual DMAType getDMAType(void)
 80155b8:	b480      	push	{r7}
 80155ba:	b083      	sub	sp, #12
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
        return DMA_TYPE_GENERIC;
 80155c0:	2300      	movs	r3, #0
    }
 80155c2:	4618      	mov	r0, r3
 80155c4:	370c      	adds	r7, #12
 80155c6:	46bd      	mov	sp, r7
 80155c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155cc:	4770      	bx	lr

080155ce <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80155ce:	b480      	push	{r7}
 80155d0:	b083      	sub	sp, #12
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	2200      	movs	r2, #0
 80155da:	801a      	strh	r2, [r3, #0]
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2200      	movs	r2, #0
 80155e0:	805a      	strh	r2, [r3, #2]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2200      	movs	r2, #0
 80155e6:	809a      	strh	r2, [r3, #4]
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	2200      	movs	r2, #0
 80155ec:	80da      	strh	r2, [r3, #6]
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	2200      	movs	r2, #0
 80155f2:	811a      	strh	r2, [r3, #8]
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	2200      	movs	r2, #0
 80155f8:	815a      	strh	r2, [r3, #10]
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	2200      	movs	r2, #0
 80155fe:	819a      	strh	r2, [r3, #12]
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2200      	movs	r2, #0
 8015604:	739a      	strb	r2, [r3, #14]
        {
        }
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	4618      	mov	r0, r3
 801560a:	370c      	adds	r7, #12
 801560c:	46bd      	mov	sp, r7
 801560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015612:	4770      	bx	lr

08015614 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8015614:	b580      	push	{r7, lr}
 8015616:	b082      	sub	sp, #8
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	4618      	mov	r0, r3
 8015620:	f7ff ffd5 	bl	80155ce <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	2200      	movs	r2, #0
 8015628:	611a      	str	r2, [r3, #16]
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	2200      	movs	r2, #0
 801562e:	829a      	strh	r2, [r3, #20]
    {
    }
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	4618      	mov	r0, r3
 8015634:	3708      	adds	r7, #8
 8015636:	46bd      	mov	sp, r7
 8015638:	bd80      	pop	{r7, pc}
	...

0801563c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 801563c:	b580      	push	{r7, lr}
 801563e:	b084      	sub	sp, #16
 8015640:	af00      	add	r7, sp, #0
 8015642:	60f8      	str	r0, [r7, #12]
 8015644:	60b9      	str	r1, [r7, #8]
 8015646:	607a      	str	r2, [r7, #4]
 8015648:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 801564a:	4a4a      	ldr	r2, [pc, #296]	; (8015774 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	601a      	str	r2, [r3, #0]
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	68ba      	ldr	r2, [r7, #8]
 8015654:	605a      	str	r2, [r3, #4]
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	609a      	str	r2, [r3, #8]
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	683a      	ldr	r2, [r7, #0]
 8015660:	60da      	str	r2, [r3, #12]
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	2200      	movs	r2, #0
 8015666:	611a      	str	r2, [r3, #16]
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	2200      	movs	r2, #0
 801566c:	615a      	str	r2, [r3, #20]
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	2200      	movs	r2, #0
 8015672:	619a      	str	r2, [r3, #24]
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	331c      	adds	r3, #28
 8015678:	4618      	mov	r0, r3
 801567a:	f7ff ffcb 	bl	8015614 <_ZN8touchgfx8GesturesC1Ev>
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	2200      	movs	r2, #0
 8015682:	639a      	str	r2, [r3, #56]	; 0x38
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	2200      	movs	r2, #0
 8015688:	63da      	str	r2, [r3, #60]	; 0x3c
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	2200      	movs	r2, #0
 801568e:	641a      	str	r2, [r3, #64]	; 0x40
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	2200      	movs	r2, #0
 8015694:	645a      	str	r2, [r3, #68]	; 0x44
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	2200      	movs	r2, #0
 801569a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	2201      	movs	r2, #1
 80156a2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	2200      	movs	r2, #0
 80156aa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	2200      	movs	r2, #0
 80156b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	3350      	adds	r3, #80	; 0x50
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7fd fdf5 	bl	80132a8 <_ZN8touchgfx4RectC1Ev>
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	2201      	movs	r2, #1
 80156c2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	2200      	movs	r2, #0
 80156ca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	2200      	movs	r2, #0
 80156d2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	2201      	movs	r2, #1
 80156da:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	2200      	movs	r2, #0
 80156e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	2200      	movs	r2, #0
 80156ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	2200      	movs	r2, #0
 80156f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	2200      	movs	r2, #0
 80156fa:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	2200      	movs	r2, #0
 8015702:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	2200      	movs	r2, #0
 801570a:	671a      	str	r2, [r3, #112]	; 0x70
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	2200      	movs	r2, #0
 8015710:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	2200      	movs	r2, #0
 8015718:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	2201      	movs	r2, #1
 8015720:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	2201      	movs	r2, #1
 8015728:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 801572c:	4a12      	ldr	r2, [pc, #72]	; (8015778 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8015732:	4a12      	ldr	r2, [pc, #72]	; (801577c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8015734:	8b3b      	ldrh	r3, [r7, #24]
 8015736:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8015738:	4a11      	ldr	r2, [pc, #68]	; (8015780 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 801573a:	8bbb      	ldrh	r3, [r7, #28]
 801573c:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801573e:	4b11      	ldr	r3, [pc, #68]	; (8015784 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 8015740:	2200      	movs	r2, #0
 8015742:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8015744:	4b0d      	ldr	r3, [pc, #52]	; (801577c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8015746:	881a      	ldrh	r2, [r3, #0]
 8015748:	4b0f      	ldr	r3, [pc, #60]	; (8015788 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 801574a:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801574c:	4b0c      	ldr	r3, [pc, #48]	; (8015780 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 801574e:	881a      	ldrh	r2, [r3, #0]
 8015750:	4b0e      	ldr	r3, [pc, #56]	; (801578c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 8015752:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8015754:	8b3a      	ldrh	r2, [r7, #24]
 8015756:	8bbb      	ldrh	r3, [r7, #28]
 8015758:	429a      	cmp	r2, r3
 801575a:	bf34      	ite	cc
 801575c:	2301      	movcc	r3, #1
 801575e:	2300      	movcs	r3, #0
 8015760:	b2db      	uxtb	r3, r3
 8015762:	461a      	mov	r2, r3
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	4618      	mov	r0, r3
 801576e:	3710      	adds	r7, #16
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}
 8015774:	0802c910 	.word	0x0802c910
 8015778:	20005944 	.word	0x20005944
 801577c:	20005938 	.word	0x20005938
 8015780:	2000593a 	.word	0x2000593a
 8015784:	2000593c 	.word	0x2000593c
 8015788:	2000593e 	.word	0x2000593e
 801578c:	20005940 	.word	0x20005940

08015790 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
 8015798:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	4618      	mov	r0, r3
 801579e:	f7fc febf 	bl	8012520 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 80157a2:	bf00      	nop
 80157a4:	3708      	adds	r7, #8
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}
	...

080157ac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b086      	sub	sp, #24
 80157b0:	af02      	add	r7, sp, #8
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	607a      	str	r2, [r7, #4]
 80157b8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80157ba:	68f8      	ldr	r0, [r7, #12]
 80157bc:	69bb      	ldr	r3, [r7, #24]
 80157be:	9300      	str	r3, [sp, #0]
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	687a      	ldr	r2, [r7, #4]
 80157c4:	68b9      	ldr	r1, [r7, #8]
 80157c6:	f7ff fe8d 	bl	80154e4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80157ca:	4a04      	ldr	r2, [pc, #16]	; (80157dc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	601a      	str	r2, [r3, #0]
    {

    }
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	4618      	mov	r0, r3
 80157d4:	3710      	adds	r7, #16
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}
 80157da:	bf00      	nop
 80157dc:	0802bdd0 	.word	0x0802bdd0

080157e0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80157e0:	b580      	push	{r7, lr}
 80157e2:	af00      	add	r7, sp, #0
 80157e4:	4801      	ldr	r0, [pc, #4]	; (80157ec <__tcf_0+0xc>)
 80157e6:	f000 f9e5 	bl	8015bb4 <_ZN12FrontendHeapD1Ev>
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	200052e8 	.word	0x200052e8

080157f0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80157f0:	b580      	push	{r7, lr}
 80157f2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80157f4:	4b12      	ldr	r3, [pc, #72]	; (8015840 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80157f6:	781b      	ldrb	r3, [r3, #0]
 80157f8:	f3bf 8f5b 	dmb	ish
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	f003 0301 	and.w	r3, r3, #1
 8015802:	2b00      	cmp	r3, #0
 8015804:	bf0c      	ite	eq
 8015806:	2301      	moveq	r3, #1
 8015808:	2300      	movne	r3, #0
 801580a:	b2db      	uxtb	r3, r3
 801580c:	2b00      	cmp	r3, #0
 801580e:	d013      	beq.n	8015838 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8015810:	480b      	ldr	r0, [pc, #44]	; (8015840 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8015812:	f013 ff32 	bl	802967a <__cxa_guard_acquire>
 8015816:	4603      	mov	r3, r0
 8015818:	2b00      	cmp	r3, #0
 801581a:	bf14      	ite	ne
 801581c:	2301      	movne	r3, #1
 801581e:	2300      	moveq	r3, #0
 8015820:	b2db      	uxtb	r3, r3
 8015822:	2b00      	cmp	r3, #0
 8015824:	d008      	beq.n	8015838 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8015826:	4807      	ldr	r0, [pc, #28]	; (8015844 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8015828:	f000 f868 	bl	80158fc <_ZN12FrontendHeapC1Ev>
 801582c:	4806      	ldr	r0, [pc, #24]	; (8015848 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 801582e:	f013 ff6f 	bl	8029710 <atexit>
 8015832:	4803      	ldr	r0, [pc, #12]	; (8015840 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8015834:	f013 ff2d 	bl	8029692 <__cxa_guard_release>
        return instance;
 8015838:	4b02      	ldr	r3, [pc, #8]	; (8015844 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 801583a:	4618      	mov	r0, r3
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop
 8015840:	200057f4 	.word	0x200057f4
 8015844:	200052e8 	.word	0x200052e8
 8015848:	080157e1 	.word	0x080157e1

0801584c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 801584c:	b580      	push	{r7, lr}
 801584e:	b082      	sub	sp, #8
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	4a05      	ldr	r2, [pc, #20]	; (801586c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	601a      	str	r2, [r3, #0]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	4618      	mov	r0, r3
 801585e:	f7ff fe61 	bl	8015524 <_ZN8touchgfx7MVPHeapD1Ev>
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	4618      	mov	r0, r3
 8015866:	3708      	adds	r7, #8
 8015868:	46bd      	mov	sp, r7
 801586a:	bd80      	pop	{r7, pc}
 801586c:	0802bdd0 	.word	0x0802bdd0

08015870 <_ZN16FrontendHeapBaseD0Ev>:
 8015870:	b580      	push	{r7, lr}
 8015872:	b082      	sub	sp, #8
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	6878      	ldr	r0, [r7, #4]
 801587a:	f7ff ffe7 	bl	801584c <_ZN16FrontendHeapBaseD1Ev>
 801587e:	2114      	movs	r1, #20
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f013 fef8 	bl	8029676 <_ZdlPvj>
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	4618      	mov	r0, r3
 801588a:	3708      	adds	r7, #8
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}

08015890 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8015890:	b580      	push	{r7, lr}
 8015892:	b082      	sub	sp, #8
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	4618      	mov	r0, r3
 801589c:	f000 fec6 	bl	801662c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80158a0:	4a03      	ldr	r2, [pc, #12]	; (80158b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	601a      	str	r2, [r3, #0]
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	4618      	mov	r0, r3
 80158aa:	3708      	adds	r7, #8
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	0802bd9c 	.word	0x0802bd9c

080158b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	4618      	mov	r0, r3
 80158c0:	f000 feb4 	bl	801662c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80158c4:	4a03      	ldr	r2, [pc, #12]	; (80158d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	601a      	str	r2, [r3, #0]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	4618      	mov	r0, r3
 80158ce:	3708      	adds	r7, #8
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}
 80158d4:	0802bd68 	.word	0x0802bd68

080158d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	4618      	mov	r0, r3
 80158e4:	f000 fea2 	bl	801662c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80158e8:	4a03      	ldr	r2, [pc, #12]	; (80158f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	601a      	str	r2, [r3, #0]
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	4618      	mov	r0, r3
 80158f2:	3708      	adds	r7, #8
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}
 80158f8:	0802bd34 	.word	0x0802bd34

080158fc <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80158fc:	b590      	push	{r4, r7, lr}
 80158fe:	b085      	sub	sp, #20
 8015900:	af02      	add	r7, sp, #8
 8015902:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f103 0114 	add.w	r1, r3, #20
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f503 7455 	add.w	r4, r3, #852	; 0x354
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
                     app(model, *this)
 801591e:	9300      	str	r3, [sp, #0]
 8015920:	4623      	mov	r3, r4
 8015922:	f7ff ff43 	bl	80157ac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8015926:	4a18      	ldr	r2, [pc, #96]	; (8015988 <_ZN12FrontendHeapC1Ev+0x8c>)
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	601a      	str	r2, [r3, #0]
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	3314      	adds	r3, #20
 8015930:	4618      	mov	r0, r3
 8015932:	f7ff ffad 	bl	8015890 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	332c      	adds	r3, #44	; 0x2c
 801593a:	4618      	mov	r0, r3
 801593c:	f7ff ffba 	bl	80158b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8015946:	4618      	mov	r0, r3
 8015948:	f7ff ffc6 	bl	80158d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8015952:	4618      	mov	r0, r3
 8015954:	f7fe ff94 	bl	8014880 <_ZN5ModelC1Ev>
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f503 706d 	add.w	r0, r3, #948	; 0x3b4
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8015964:	687a      	ldr	r2, [r7, #4]
 8015966:	4619      	mov	r1, r3
 8015968:	f7fe ff74 	bl	8014854 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 801596c:	687a      	ldr	r2, [r7, #4]
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8015974:	4619      	mov	r1, r3
 8015976:	4610      	mov	r0, r2
 8015978:	f7ff ff0a 	bl	8015790 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	4618      	mov	r0, r3
 8015980:	370c      	adds	r7, #12
 8015982:	46bd      	mov	sp, r7
 8015984:	bd90      	pop	{r4, r7, pc}
 8015986:	bf00      	nop
 8015988:	0802bd20 	.word	0x0802bd20

0801598c <_ZN8touchgfx5NoDMAC1Ev>:
 * @see DMA_Interface
 */
class NoDMA : public DMA_Interface
{
public:
    NoDMA()
 801598c:	b580      	push	{r7, lr}
 801598e:	b082      	sub	sp, #8
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
        : DMA_Interface(q), q(&b, 1)
 8015994:	687a      	ldr	r2, [r7, #4]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	330c      	adds	r3, #12
 801599a:	4619      	mov	r1, r3
 801599c:	4610      	mov	r0, r2
 801599e:	f7ff fd09 	bl	80153b4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80159a2:	4a0b      	ldr	r2, [pc, #44]	; (80159d0 <_ZN8touchgfx5NoDMAC1Ev+0x44>)
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	601a      	str	r2, [r3, #0]
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f103 000c 	add.w	r0, r3, #12
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	3320      	adds	r3, #32
 80159b2:	2201      	movs	r2, #1
 80159b4:	4619      	mov	r1, r3
 80159b6:	f002 fbd1 	bl	801815c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	3320      	adds	r3, #32
 80159be:	4618      	mov	r0, r3
 80159c0:	f7ff fd50 	bl	8015464 <_ZN8touchgfx6BlitOpC1Ev>
    {
    }
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	4618      	mov	r0, r3
 80159c8:	3708      	adds	r7, #8
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}
 80159ce:	bf00      	nop
 80159d0:	0802bcd0 	.word	0x0802bcd0

080159d4 <_ZN8touchgfx5NoDMA11getBlitCapsEv>:
    /**
     * No blit operations supported by this DMA implementation.
     *
     * @return Zero (no blit ops supported).
     */
    virtual BlitOperations getBlitCaps()
 80159d4:	b480      	push	{r7}
 80159d6:	b083      	sub	sp, #12
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
    {
        return static_cast<BlitOperations>(0);
 80159dc:	2300      	movs	r3, #0
    }
 80159de:	4618      	mov	r0, r3
 80159e0:	370c      	adds	r7, #12
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr
	...

080159ec <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE>:
    /**
     * Asserts if used.
     *
     * @param  blitOp The blit operation to be performed by this DMA instance.
     */
    virtual void setupDataCopy(const BlitOp& blitOp)
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b082      	sub	sp, #8
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
 80159f4:	6039      	str	r1, [r7, #0]
    {
        assert(0 && "DMA operation not supported");
 80159f6:	4b03      	ldr	r3, [pc, #12]	; (8015a04 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x18>)
 80159f8:	4a03      	ldr	r2, [pc, #12]	; (8015a08 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x1c>)
 80159fa:	213c      	movs	r1, #60	; 0x3c
 80159fc:	4803      	ldr	r0, [pc, #12]	; (8015a0c <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x20>)
 80159fe:	f013 fe69 	bl	80296d4 <__assert_func>
 8015a02:	bf00      	nop
 8015a04:	0802b404 	.word	0x0802b404
 8015a08:	0802b428 	.word	0x0802b428
 8015a0c:	0802b470 	.word	0x0802b470

08015a10 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE>:
    /**
     * Asserts if used.
     *
     * @param  blitOp The blit operation to be performed by this DMA instance.
     */
    virtual void setupDataFill(const BlitOp& blitOp)
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b082      	sub	sp, #8
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
 8015a18:	6039      	str	r1, [r7, #0]
    {
        assert(0 && "DMA operation not supported");
 8015a1a:	4b03      	ldr	r3, [pc, #12]	; (8015a28 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x18>)
 8015a1c:	4a03      	ldr	r2, [pc, #12]	; (8015a2c <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x1c>)
 8015a1e:	2146      	movs	r1, #70	; 0x46
 8015a20:	4803      	ldr	r0, [pc, #12]	; (8015a30 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x20>)
 8015a22:	f013 fe57 	bl	80296d4 <__assert_func>
 8015a26:	bf00      	nop
 8015a28:	0802b404 	.word	0x0802b404
 8015a2c:	0802b4b4 	.word	0x0802b4b4
 8015a30:	0802b470 	.word	0x0802b470

08015a34 <_ZN8touchgfx5NoDMA18signalDMAInterruptEv>:
    }

    /** Does nothing. */
    virtual void signalDMAInterrupt()
 8015a34:	b480      	push	{r7}
 8015a36:	b083      	sub	sp, #12
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
    {
    }
 8015a3c:	bf00      	nop
 8015a3e:	370c      	adds	r7, #12
 8015a40:	46bd      	mov	sp, r7
 8015a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a46:	4770      	bx	lr

08015a48 <_ZN8touchgfx5NoDMA5flushEv>:

    /**
     * Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 8015a48:	b480      	push	{r7}
 8015a4a:	b083      	sub	sp, #12
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
    {
    }
 8015a50:	bf00      	nop
 8015a52:	370c      	adds	r7, #12
 8015a54:	46bd      	mov	sp, r7
 8015a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5a:	4770      	bx	lr

08015a5c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b086      	sub	sp, #24
 8015a60:	af02      	add	r7, sp, #8
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	60b9      	str	r1, [r7, #8]
 8015a66:	607a      	str	r2, [r7, #4]
 8015a68:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8015a6a:	68f8      	ldr	r0, [r7, #12]
 8015a6c:	8bbb      	ldrh	r3, [r7, #28]
 8015a6e:	9301      	str	r3, [sp, #4]
 8015a70:	8b3b      	ldrh	r3, [r7, #24]
 8015a72:	9300      	str	r3, [sp, #0]
 8015a74:	683b      	ldr	r3, [r7, #0]
 8015a76:	687a      	ldr	r2, [r7, #4]
 8015a78:	68b9      	ldr	r1, [r7, #8]
 8015a7a:	f7ff fddf 	bl	801563c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8015a7e:	4a04      	ldr	r2, [pc, #16]	; (8015a90 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	601a      	str	r2, [r3, #0]
    }
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	4618      	mov	r0, r3
 8015a88:	3710      	adds	r7, #16
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
 8015a8e:	bf00      	nop
 8015a90:	0802bdf4 	.word	0x0802bdf4

08015a94 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b086      	sub	sp, #24
 8015a98:	af02      	add	r7, sp, #8
 8015a9a:	60f8      	str	r0, [r7, #12]
 8015a9c:	60b9      	str	r1, [r7, #8]
 8015a9e:	607a      	str	r2, [r7, #4]
 8015aa0:	603b      	str	r3, [r7, #0]
 8015aa2:	68f8      	ldr	r0, [r7, #12]
 8015aa4:	8bbb      	ldrh	r3, [r7, #28]
 8015aa6:	9301      	str	r3, [sp, #4]
 8015aa8:	8b3b      	ldrh	r3, [r7, #24]
 8015aaa:	9300      	str	r3, [sp, #0]
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	687a      	ldr	r2, [r7, #4]
 8015ab0:	68b9      	ldr	r1, [r7, #8]
 8015ab2:	f7ff ffd3 	bl	8015a5c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015ab6:	4a04      	ldr	r2, [pc, #16]	; (8015ac8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	601a      	str	r2, [r3, #0]
    }
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3710      	adds	r7, #16
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	0802bbf0 	.word	0x0802bbf0

08015acc <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8015acc:	b480      	push	{r7}
 8015ace:	b083      	sub	sp, #12
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	4a04      	ldr	r2, [pc, #16]	; (8015ae8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	601a      	str	r2, [r3, #0]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	4618      	mov	r0, r3
 8015ade:	370c      	adds	r7, #12
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae6:	4770      	bx	lr
 8015ae8:	0802bbd8 	.word	0x0802bbd8

08015aec <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7ff ffe8 	bl	8015acc <_ZN8touchgfx15TouchControllerC1Ev>
 8015afc:	4a03      	ldr	r2, [pc, #12]	; (8015b0c <_ZN20STM32TouchControllerC1Ev+0x20>)
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	601a      	str	r2, [r3, #0]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	4618      	mov	r0, r3
 8015b06:	3708      	adds	r7, #8
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd80      	pop	{r7, pc}
 8015b0c:	0802bbc0 	.word	0x0802bbc0

08015b10 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8015b10:	b590      	push	{r4, r7, lr}
 8015b12:	b085      	sub	sp, #20
 8015b14:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8015b16:	f7fe fc71 	bl	80143fc <_ZN14BitmapDatabase11getInstanceEv>
 8015b1a:	4604      	mov	r4, r0
 8015b1c:	f7fe fc78 	bl	8014410 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8015b20:	4603      	mov	r3, r0
 8015b22:	4619      	mov	r1, r3
 8015b24:	2300      	movs	r3, #0
 8015b26:	9300      	str	r3, [sp, #0]
 8015b28:	2300      	movs	r3, #0
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	4620      	mov	r0, r4
 8015b2e:	f007 ff93 	bl	801da58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8015b32:	4809      	ldr	r0, [pc, #36]	; (8015b58 <touchgfx_init+0x48>)
 8015b34:	f7ff fcc6 	bl	80154c4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8015b38:	2000      	movs	r0, #0
 8015b3a:	f7fe fda3 	bl	8014684 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8015b3e:	4807      	ldr	r0, [pc, #28]	; (8015b5c <touchgfx_init+0x4c>)
 8015b40:	f007 fecc 	bl	801d8dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8015b44:	f7ff fe54 	bl	80157f0 <_ZN12FrontendHeap11getInstanceEv>
 8015b48:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 8015b4a:	4805      	ldr	r0, [pc, #20]	; (8015b60 <touchgfx_init+0x50>)
 8015b4c:	f7ff faa0 	bl	8015090 <_ZN11TouchGFXHAL10initializeEv>
}
 8015b50:	bf00      	nop
 8015b52:	370c      	adds	r7, #12
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd90      	pop	{r4, r7, pc}
 8015b58:	200058b4 	.word	0x200058b4
 8015b5c:	20000144 	.word	0x20000144
 8015b60:	200058b8 	.word	0x200058b8

08015b64 <_ZN8touchgfx5NoDMAD1Ev>:
class NoDMA : public DMA_Interface
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
 8015b6c:	4a08      	ldr	r2, [pc, #32]	; (8015b90 <_ZN8touchgfx5NoDMAD1Ev+0x2c>)
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	601a      	str	r2, [r3, #0]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	330c      	adds	r3, #12
 8015b76:	4618      	mov	r0, r3
 8015b78:	f7ff fc82 	bl	8015480 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7ff fbf8 	bl	8015374 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	4618      	mov	r0, r3
 8015b88:	3708      	adds	r7, #8
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}
 8015b8e:	bf00      	nop
 8015b90:	0802bcd0 	.word	0x0802bcd0

08015b94 <_ZN8touchgfx5NoDMAD0Ev>:
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
 8015b9c:	6878      	ldr	r0, [r7, #4]
 8015b9e:	f7ff ffe1 	bl	8015b64 <_ZN8touchgfx5NoDMAD1Ev>
 8015ba2:	2140      	movs	r1, #64	; 0x40
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f013 fd66 	bl	8029676 <_ZdlPvj>
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	4618      	mov	r0, r3
 8015bae:	3708      	adds	r7, #8
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd80      	pop	{r7, pc}

08015bb4 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b082      	sub	sp, #8
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
 8015bbc:	4a10      	ldr	r2, [pc, #64]	; (8015c00 <_ZN12FrontendHeapD1Ev+0x4c>)
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	601a      	str	r2, [r3, #0]
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f7fe fe0d 	bl	80147e8 <_ZN19FrontendApplicationD1Ev>
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f000 f827 	bl	8015c28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	332c      	adds	r3, #44	; 0x2c
 8015bde:	4618      	mov	r0, r3
 8015be0:	f000 f844 	bl	8015c6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	3314      	adds	r3, #20
 8015be8:	4618      	mov	r0, r3
 8015bea:	f000 f863 	bl	8015cb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f7ff fe2b 	bl	801584c <_ZN16FrontendHeapBaseD1Ev>
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	3708      	adds	r7, #8
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}
 8015c00:	0802bd20 	.word	0x0802bd20

08015c04 <_ZN12FrontendHeapD0Ev>:
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b082      	sub	sp, #8
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f7ff ffd1 	bl	8015bb4 <_ZN12FrontendHeapD1Ev>
 8015c12:	f240 510c 	movw	r1, #1292	; 0x50c
 8015c16:	6878      	ldr	r0, [r7, #4]
 8015c18:	f013 fd2d 	bl	8029676 <_ZdlPvj>
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	4618      	mov	r0, r3
 8015c20:	3708      	adds	r7, #8
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}
	...

08015c28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b082      	sub	sp, #8
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
 8015c30:	4a05      	ldr	r2, [pc, #20]	; (8015c48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	601a      	str	r2, [r3, #0]
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	4618      	mov	r0, r3
 8015c3a:	f000 fcf5 	bl	8016628 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	4618      	mov	r0, r3
 8015c42:	3708      	adds	r7, #8
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}
 8015c48:	0802bd34 	.word	0x0802bd34

08015c4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b082      	sub	sp, #8
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
 8015c54:	6878      	ldr	r0, [r7, #4]
 8015c56:	f7ff ffe7 	bl	8015c28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8015c5a:	215c      	movs	r1, #92	; 0x5c
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f013 fd0a 	bl	8029676 <_ZdlPvj>
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	4618      	mov	r0, r3
 8015c66:	3708      	adds	r7, #8
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}

08015c6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b082      	sub	sp, #8
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
 8015c74:	4a05      	ldr	r2, [pc, #20]	; (8015c8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	601a      	str	r2, [r3, #0]
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f000 fcd3 	bl	8016628 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	4618      	mov	r0, r3
 8015c86:	3708      	adds	r7, #8
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	bd80      	pop	{r7, pc}
 8015c8c:	0802bd68 	.word	0x0802bd68

08015c90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b082      	sub	sp, #8
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
 8015c98:	6878      	ldr	r0, [r7, #4]
 8015c9a:	f7ff ffe7 	bl	8015c6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015c9e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8015ca2:	6878      	ldr	r0, [r7, #4]
 8015ca4:	f013 fce7 	bl	8029676 <_ZdlPvj>
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	4618      	mov	r0, r3
 8015cac:	3708      	adds	r7, #8
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	bd80      	pop	{r7, pc}
	...

08015cb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b082      	sub	sp, #8
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
 8015cbc:	4a05      	ldr	r2, [pc, #20]	; (8015cd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	601a      	str	r2, [r3, #0]
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f000 fcaf 	bl	8016628 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	4618      	mov	r0, r3
 8015cce:	3708      	adds	r7, #8
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	bd80      	pop	{r7, pc}
 8015cd4:	0802bd9c 	.word	0x0802bd9c

08015cd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b082      	sub	sp, #8
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
 8015ce0:	6878      	ldr	r0, [r7, #4]
 8015ce2:	f7ff ffe7 	bl	8015cb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015ce6:	2118      	movs	r1, #24
 8015ce8:	6878      	ldr	r0, [r7, #4]
 8015cea:	f013 fcc4 	bl	8029676 <_ZdlPvj>
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3708      	adds	r7, #8
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b082      	sub	sp, #8
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
 8015d00:	4a05      	ldr	r2, [pc, #20]	; (8015d18 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	601a      	str	r2, [r3, #0]
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7ff fc2b 	bl	8015564 <_ZN8touchgfx3LCDD1Ev>
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	4618      	mov	r0, r3
 8015d12:	3708      	adds	r7, #8
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bd80      	pop	{r7, pc}
 8015d18:	0802e538 	.word	0x0802e538

08015d1c <_ZN8touchgfx8LCD16bppD0Ev>:
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	6878      	ldr	r0, [r7, #4]
 8015d26:	f7ff ffe7 	bl	8015cf8 <_ZN8touchgfx8LCD16bppD1Ev>
 8015d2a:	2178      	movs	r1, #120	; 0x78
 8015d2c:	6878      	ldr	r0, [r7, #4]
 8015d2e:	f013 fca2 	bl	8029676 <_ZdlPvj>
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	4618      	mov	r0, r3
 8015d36:	3708      	adds	r7, #8
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}

08015d3c <_Z41__static_initialization_and_destruction_0ii>:
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
}
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b084      	sub	sp, #16
 8015d40:	af02      	add	r7, sp, #8
 8015d42:	6078      	str	r0, [r7, #4]
 8015d44:	6039      	str	r1, [r7, #0]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	2b01      	cmp	r3, #1
 8015d4a:	d119      	bne.n	8015d80 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015d52:	4293      	cmp	r3, r2
 8015d54:	d114      	bne.n	8015d80 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8015d56:	4818      	ldr	r0, [pc, #96]	; (8015db8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8015d58:	f7ff fec8 	bl	8015aec <_ZN20STM32TouchControllerC1Ev>
static NoDMA dma;
 8015d5c:	4817      	ldr	r0, [pc, #92]	; (8015dbc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015d5e:	f7ff fe15 	bl	801598c <_ZN8touchgfx5NoDMAC1Ev>
static LCD16bpp display;
 8015d62:	4817      	ldr	r0, [pc, #92]	; (8015dc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015d64:	f00a fefc 	bl	8020b60 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8015d68:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015d6c:	9301      	str	r3, [sp, #4]
 8015d6e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015d72:	9300      	str	r3, [sp, #0]
 8015d74:	4b10      	ldr	r3, [pc, #64]	; (8015db8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8015d76:	4a12      	ldr	r2, [pc, #72]	; (8015dc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015d78:	4910      	ldr	r1, [pc, #64]	; (8015dbc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015d7a:	4812      	ldr	r0, [pc, #72]	; (8015dc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015d7c:	f7ff fe8a 	bl	8015a94 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d113      	bne.n	8015dae <_Z41__static_initialization_and_destruction_0ii+0x72>
 8015d86:	683b      	ldr	r3, [r7, #0]
 8015d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015d8c:	4293      	cmp	r3, r2
 8015d8e:	d10e      	bne.n	8015dae <_Z41__static_initialization_and_destruction_0ii+0x72>
 8015d90:	480c      	ldr	r0, [pc, #48]	; (8015dc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015d92:	f7ff f9f5 	bl	8015180 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8015d96:	480c      	ldr	r0, [pc, #48]	; (8015dc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8015d98:	f7fb fc6c 	bl	8011674 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8015d9c:	4808      	ldr	r0, [pc, #32]	; (8015dc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015d9e:	f7ff ffab 	bl	8015cf8 <_ZN8touchgfx8LCD16bppD1Ev>
static NoDMA dma;
 8015da2:	4806      	ldr	r0, [pc, #24]	; (8015dbc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015da4:	f7ff fede 	bl	8015b64 <_ZN8touchgfx5NoDMAD1Ev>
static STM32TouchController tc;
 8015da8:	4803      	ldr	r0, [pc, #12]	; (8015db8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8015daa:	f7fe ffd5 	bl	8014d58 <_ZN20STM32TouchControllerD1Ev>
}
 8015dae:	bf00      	nop
 8015db0:	3708      	adds	r7, #8
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}
 8015db6:	bf00      	nop
 8015db8:	200057f8 	.word	0x200057f8
 8015dbc:	200057fc 	.word	0x200057fc
 8015dc0:	2000583c 	.word	0x2000583c
 8015dc4:	200058b8 	.word	0x200058b8
 8015dc8:	20000144 	.word	0x20000144

08015dcc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8015dcc:	b480      	push	{r7}
 8015dce:	b083      	sub	sp, #12
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015dd4:	2301      	movs	r3, #1
    }
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	370c      	adds	r7, #12
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de0:	4770      	bx	lr

08015de2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8015de2:	b480      	push	{r7}
 8015de4:	b083      	sub	sp, #12
 8015de6:	af00      	add	r7, sp, #0
 8015de8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8015dea:	2354      	movs	r3, #84	; 0x54
    }
 8015dec:	4618      	mov	r0, r3
 8015dee:	370c      	adds	r7, #12
 8015df0:	46bd      	mov	sp, r7
 8015df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df6:	4770      	bx	lr

08015df8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8015df8:	b480      	push	{r7}
 8015dfa:	b083      	sub	sp, #12
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	460b      	mov	r3, r1
 8015e02:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015e04:	887b      	ldrh	r3, [r7, #2]
 8015e06:	2254      	movs	r2, #84	; 0x54
 8015e08:	fb02 f303 	mul.w	r3, r2, r3
 8015e0c:	3308      	adds	r3, #8
 8015e0e:	687a      	ldr	r2, [r7, #4]
 8015e10:	4413      	add	r3, r2
    }
 8015e12:	4618      	mov	r0, r3
 8015e14:	370c      	adds	r7, #12
 8015e16:	46bd      	mov	sp, r7
 8015e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1c:	4770      	bx	lr

08015e1e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8015e1e:	b480      	push	{r7}
 8015e20:	b083      	sub	sp, #12
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	6078      	str	r0, [r7, #4]
 8015e26:	460b      	mov	r3, r1
 8015e28:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015e2a:	887b      	ldrh	r3, [r7, #2]
 8015e2c:	2254      	movs	r2, #84	; 0x54
 8015e2e:	fb02 f303 	mul.w	r3, r2, r3
 8015e32:	3308      	adds	r3, #8
 8015e34:	687a      	ldr	r2, [r7, #4]
 8015e36:	4413      	add	r3, r2
    }
 8015e38:	4618      	mov	r0, r3
 8015e3a:	370c      	adds	r7, #12
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e42:	4770      	bx	lr

08015e44 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015e44:	b480      	push	{r7}
 8015e46:	b083      	sub	sp, #12
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015e4c:	2301      	movs	r3, #1
    }
 8015e4e:	4618      	mov	r0, r3
 8015e50:	370c      	adds	r7, #12
 8015e52:	46bd      	mov	sp, r7
 8015e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e58:	4770      	bx	lr

08015e5a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015e5a:	b480      	push	{r7}
 8015e5c:	b083      	sub	sp, #12
 8015e5e:	af00      	add	r7, sp, #0
 8015e60:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015e62:	f44f 7348 	mov.w	r3, #800	; 0x320
    }
 8015e66:	4618      	mov	r0, r3
 8015e68:	370c      	adds	r7, #12
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e70:	4770      	bx	lr

08015e72 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015e72:	b480      	push	{r7}
 8015e74:	b083      	sub	sp, #12
 8015e76:	af00      	add	r7, sp, #0
 8015e78:	6078      	str	r0, [r7, #4]
 8015e7a:	460b      	mov	r3, r1
 8015e7c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015e7e:	887b      	ldrh	r3, [r7, #2]
 8015e80:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015e84:	fb02 f303 	mul.w	r3, r2, r3
 8015e88:	3308      	adds	r3, #8
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	4413      	add	r3, r2
    }
 8015e8e:	4618      	mov	r0, r3
 8015e90:	370c      	adds	r7, #12
 8015e92:	46bd      	mov	sp, r7
 8015e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e98:	4770      	bx	lr

08015e9a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015e9a:	b480      	push	{r7}
 8015e9c:	b083      	sub	sp, #12
 8015e9e:	af00      	add	r7, sp, #0
 8015ea0:	6078      	str	r0, [r7, #4]
 8015ea2:	460b      	mov	r3, r1
 8015ea4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015ea6:	887b      	ldrh	r3, [r7, #2]
 8015ea8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015eac:	fb02 f303 	mul.w	r3, r2, r3
 8015eb0:	3308      	adds	r3, #8
 8015eb2:	687a      	ldr	r2, [r7, #4]
 8015eb4:	4413      	add	r3, r2
    }
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	370c      	adds	r7, #12
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec0:	4770      	bx	lr

08015ec2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015ec2:	b480      	push	{r7}
 8015ec4:	b083      	sub	sp, #12
 8015ec6:	af00      	add	r7, sp, #0
 8015ec8:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015eca:	2301      	movs	r3, #1
    }
 8015ecc:	4618      	mov	r0, r3
 8015ece:	370c      	adds	r7, #12
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed6:	4770      	bx	lr

08015ed8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015ed8:	b480      	push	{r7}
 8015eda:	b083      	sub	sp, #12
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015ee0:	2310      	movs	r3, #16
    }
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	370c      	adds	r7, #12
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eec:	4770      	bx	lr

08015eee <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015eee:	b480      	push	{r7}
 8015ef0:	b083      	sub	sp, #12
 8015ef2:	af00      	add	r7, sp, #0
 8015ef4:	6078      	str	r0, [r7, #4]
 8015ef6:	460b      	mov	r3, r1
 8015ef8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015efa:	887b      	ldrh	r3, [r7, #2]
 8015efc:	011b      	lsls	r3, r3, #4
 8015efe:	3308      	adds	r3, #8
 8015f00:	687a      	ldr	r2, [r7, #4]
 8015f02:	4413      	add	r3, r2
    }
 8015f04:	4618      	mov	r0, r3
 8015f06:	370c      	adds	r7, #12
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0e:	4770      	bx	lr

08015f10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015f10:	b480      	push	{r7}
 8015f12:	b083      	sub	sp, #12
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
 8015f18:	460b      	mov	r3, r1
 8015f1a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015f1c:	887b      	ldrh	r3, [r7, #2]
 8015f1e:	011b      	lsls	r3, r3, #4
 8015f20:	3308      	adds	r3, #8
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	4413      	add	r3, r2
    }
 8015f26:	4618      	mov	r0, r3
 8015f28:	370c      	adds	r7, #12
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f30:	4770      	bx	lr

08015f32 <_GLOBAL__sub_I_touchgfx_init>:
 8015f32:	b580      	push	{r7, lr}
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015f3a:	2001      	movs	r0, #1
 8015f3c:	f7ff fefe 	bl	8015d3c <_Z41__static_initialization_and_destruction_0ii>
 8015f40:	bd80      	pop	{r7, pc}

08015f42 <_GLOBAL__sub_D_touchgfx_init>:
 8015f42:	b580      	push	{r7, lr}
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015f4a:	2000      	movs	r0, #0
 8015f4c:	f7ff fef6 	bl	8015d3c <_Z41__static_initialization_and_destruction_0ii>
 8015f50:	bd80      	pop	{r7, pc}

08015f52 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8015f52:	b580      	push	{r7, lr}
 8015f54:	b082      	sub	sp, #8
 8015f56:	af00      	add	r7, sp, #0
 8015f58:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	3318      	adds	r3, #24
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	4798      	blx	r3
    }
 8015f66:	bf00      	nop
 8015f68:	3708      	adds	r7, #8
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}

08015f6e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8015f6e:	b480      	push	{r7}
 8015f70:	b083      	sub	sp, #12
 8015f72:	af00      	add	r7, sp, #0
 8015f74:	6078      	str	r0, [r7, #4]
 8015f76:	460b      	mov	r3, r1
 8015f78:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	78fa      	ldrb	r2, [r7, #3]
 8015f7e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8015f82:	bf00      	nop
 8015f84:	370c      	adds	r7, #12
 8015f86:	46bd      	mov	sp, r7
 8015f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8c:	4770      	bx	lr

08015f8e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8015f8e:	b480      	push	{r7}
 8015f90:	b083      	sub	sp, #12
 8015f92:	af00      	add	r7, sp, #0
 8015f94:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8015f9c:	3301      	adds	r3, #1
 8015f9e:	b2da      	uxtb	r2, r3
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8015fa6:	bf00      	nop
 8015fa8:	370c      	adds	r7, #12
 8015faa:	46bd      	mov	sp, r7
 8015fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb0:	4770      	bx	lr
	...

08015fb4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b082      	sub	sp, #8
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
 8015fbc:	460b      	mov	r3, r1
 8015fbe:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8015fc0:	78fb      	ldrb	r3, [r7, #3]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d002      	beq.n	8015fcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8015fc6:	78fb      	ldrb	r3, [r7, #3]
 8015fc8:	2b02      	cmp	r3, #2
 8015fca:	d105      	bne.n	8015fd8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	78fa      	ldrb	r2, [r7, #3]
 8015fd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8015fd4:	2301      	movs	r3, #1
 8015fd6:	e027      	b.n	8016028 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8015fd8:	78fb      	ldrb	r3, [r7, #3]
 8015fda:	2b01      	cmp	r3, #1
 8015fdc:	d123      	bne.n	8016026 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d014      	beq.n	8016010 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	3380      	adds	r3, #128	; 0x80
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	4798      	blx	r3
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	461a      	mov	r2, r3
 8015ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	d008      	beq.n	8016010 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015ffe:	4b0c      	ldr	r3, [pc, #48]	; (8016030 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	f083 0301 	eor.w	r3, r3, #1
 8016006:	b2db      	uxtb	r3, r3
 8016008:	2b00      	cmp	r3, #0
 801600a:	d001      	beq.n	8016010 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801600c:	2301      	movs	r3, #1
 801600e:	e000      	b.n	8016012 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8016010:	2300      	movs	r3, #0
 8016012:	2b00      	cmp	r3, #0
 8016014:	d005      	beq.n	8016022 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	78fa      	ldrb	r2, [r7, #3]
 801601a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801601e:	2301      	movs	r3, #1
 8016020:	e002      	b.n	8016028 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8016022:	2300      	movs	r3, #0
 8016024:	e000      	b.n	8016028 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8016026:	2300      	movs	r3, #0
    }
 8016028:	4618      	mov	r0, r3
 801602a:	3708      	adds	r7, #8
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}
 8016030:	20005942 	.word	0x20005942

08016034 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8016034:	b480      	push	{r7}
 8016036:	b083      	sub	sp, #12
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
 801603c:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	683a      	ldr	r2, [r7, #0]
 8016042:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8016044:	bf00      	nop
 8016046:	370c      	adds	r7, #12
 8016048:	46bd      	mov	sp, r7
 801604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604e:	4770      	bx	lr

08016050 <__NVIC_EnableIRQ>:
{
 8016050:	b480      	push	{r7}
 8016052:	b083      	sub	sp, #12
 8016054:	af00      	add	r7, sp, #0
 8016056:	4603      	mov	r3, r0
 8016058:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801605a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801605e:	2b00      	cmp	r3, #0
 8016060:	db0b      	blt.n	801607a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016062:	88fb      	ldrh	r3, [r7, #6]
 8016064:	f003 021f 	and.w	r2, r3, #31
 8016068:	4907      	ldr	r1, [pc, #28]	; (8016088 <__NVIC_EnableIRQ+0x38>)
 801606a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801606e:	095b      	lsrs	r3, r3, #5
 8016070:	2001      	movs	r0, #1
 8016072:	fa00 f202 	lsl.w	r2, r0, r2
 8016076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801607a:	bf00      	nop
 801607c:	370c      	adds	r7, #12
 801607e:	46bd      	mov	sp, r7
 8016080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016084:	4770      	bx	lr
 8016086:	bf00      	nop
 8016088:	e000e100 	.word	0xe000e100

0801608c <__NVIC_DisableIRQ>:
{
 801608c:	b480      	push	{r7}
 801608e:	b083      	sub	sp, #12
 8016090:	af00      	add	r7, sp, #0
 8016092:	4603      	mov	r3, r0
 8016094:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801609a:	2b00      	cmp	r3, #0
 801609c:	db12      	blt.n	80160c4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801609e:	88fb      	ldrh	r3, [r7, #6]
 80160a0:	f003 021f 	and.w	r2, r3, #31
 80160a4:	490a      	ldr	r1, [pc, #40]	; (80160d0 <__NVIC_DisableIRQ+0x44>)
 80160a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80160aa:	095b      	lsrs	r3, r3, #5
 80160ac:	2001      	movs	r0, #1
 80160ae:	fa00 f202 	lsl.w	r2, r0, r2
 80160b2:	3320      	adds	r3, #32
 80160b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80160b8:	f3bf 8f4f 	dsb	sy
}
 80160bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80160be:	f3bf 8f6f 	isb	sy
}
 80160c2:	bf00      	nop
}
 80160c4:	bf00      	nop
 80160c6:	370c      	adds	r7, #12
 80160c8:	46bd      	mov	sp, r7
 80160ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ce:	4770      	bx	lr
 80160d0:	e000e100 	.word	0xe000e100

080160d4 <__NVIC_SetPriority>:
{
 80160d4:	b480      	push	{r7}
 80160d6:	b083      	sub	sp, #12
 80160d8:	af00      	add	r7, sp, #0
 80160da:	4603      	mov	r3, r0
 80160dc:	6039      	str	r1, [r7, #0]
 80160de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80160e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	db0a      	blt.n	80160fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80160e8:	683b      	ldr	r3, [r7, #0]
 80160ea:	b2da      	uxtb	r2, r3
 80160ec:	490c      	ldr	r1, [pc, #48]	; (8016120 <__NVIC_SetPriority+0x4c>)
 80160ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80160f2:	0112      	lsls	r2, r2, #4
 80160f4:	b2d2      	uxtb	r2, r2
 80160f6:	440b      	add	r3, r1
 80160f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80160fc:	e00a      	b.n	8016114 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80160fe:	683b      	ldr	r3, [r7, #0]
 8016100:	b2da      	uxtb	r2, r3
 8016102:	4908      	ldr	r1, [pc, #32]	; (8016124 <__NVIC_SetPriority+0x50>)
 8016104:	88fb      	ldrh	r3, [r7, #6]
 8016106:	f003 030f 	and.w	r3, r3, #15
 801610a:	3b04      	subs	r3, #4
 801610c:	0112      	lsls	r2, r2, #4
 801610e:	b2d2      	uxtb	r2, r2
 8016110:	440b      	add	r3, r1
 8016112:	761a      	strb	r2, [r3, #24]
}
 8016114:	bf00      	nop
 8016116:	370c      	adds	r7, #12
 8016118:	46bd      	mov	sp, r7
 801611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611e:	4770      	bx	lr
 8016120:	e000e100 	.word	0xe000e100
 8016124:	e000ed00 	.word	0xe000ed00

08016128 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8016128:	b5b0      	push	{r4, r5, r7, lr}
 801612a:	b082      	sub	sp, #8
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	4618      	mov	r0, r3
 8016134:	f001 fc2e 	bl	8017994 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8016138:	687d      	ldr	r5, [r7, #4]
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	334c      	adds	r3, #76	; 0x4c
 8016140:	681c      	ldr	r4, [r3, #0]
 8016142:	f004 fb5d 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 8016146:	4603      	mov	r3, r0
 8016148:	4619      	mov	r1, r3
 801614a:	4628      	mov	r0, r5
 801614c:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	490d      	ldr	r1, [pc, #52]	; (8016188 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8016152:	4618      	mov	r0, r3
 8016154:	f7ff ff6e 	bl	8016034 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	2101      	movs	r1, #1
 801615c:	4618      	mov	r0, r3
 801615e:	f7ff ff29 	bl	8015fb4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	3370      	adds	r3, #112	; 0x70
 801616a:	681c      	ldr	r4, [r3, #0]
 801616c:	2300      	movs	r3, #0
 801616e:	2200      	movs	r2, #0
 8016170:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8016174:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	2101      	movs	r1, #1
 801617a:	4618      	mov	r0, r3
 801617c:	f7ff fef7 	bl	8015f6e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8016180:	bf00      	nop
 8016182:	3708      	adds	r7, #8
 8016184:	46bd      	mov	sp, r7
 8016186:	bdb0      	pop	{r4, r5, r7, pc}
 8016188:	080152e1 	.word	0x080152e1

0801618c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b082      	sub	sp, #8
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(LTDC_IRQn, 9);
 8016194:	2109      	movs	r1, #9
 8016196:	2058      	movs	r0, #88	; 0x58
 8016198:	f7ff ff9c 	bl	80160d4 <__NVIC_SetPriority>
}
 801619c:	bf00      	nop
 801619e:	3708      	adds	r7, #8
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}

080161a4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b082      	sub	sp, #8
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 80161ac:	2058      	movs	r0, #88	; 0x58
 80161ae:	f7ff ff4f 	bl	8016050 <__NVIC_EnableIRQ>
}
 80161b2:	bf00      	nop
 80161b4:	3708      	adds	r7, #8
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bd80      	pop	{r7, pc}

080161ba <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80161ba:	b580      	push	{r7, lr}
 80161bc:	b082      	sub	sp, #8
 80161be:	af00      	add	r7, sp, #0
 80161c0:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 80161c2:	2058      	movs	r0, #88	; 0x58
 80161c4:	f7ff ff62 	bl	801608c <__NVIC_DisableIRQ>
}
 80161c8:	bf00      	nop
 80161ca:	3708      	adds	r7, #8
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bd80      	pop	{r7, pc}

080161d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80161d0:	b480      	push	{r7}
 80161d2:	b083      	sub	sp, #12
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80161d8:	4b11      	ldr	r3, [pc, #68]	; (8016220 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80161da:	68db      	ldr	r3, [r3, #12]
 80161dc:	b29b      	uxth	r3, r3
 80161de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80161e2:	b29b      	uxth	r3, r3
 80161e4:	3b01      	subs	r3, #1
 80161e6:	b29a      	uxth	r2, r3
 80161e8:	4b0e      	ldr	r3, [pc, #56]	; (8016224 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80161ea:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80161ec:	4b0c      	ldr	r3, [pc, #48]	; (8016220 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80161ee:	691b      	ldr	r3, [r3, #16]
 80161f0:	b29b      	uxth	r3, r3
 80161f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80161f6:	b29b      	uxth	r3, r3
 80161f8:	3b01      	subs	r3, #1
 80161fa:	b29a      	uxth	r2, r3
 80161fc:	4b0a      	ldr	r3, [pc, #40]	; (8016228 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80161fe:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8016200:	4b08      	ldr	r3, [pc, #32]	; (8016224 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016202:	881a      	ldrh	r2, [r3, #0]
 8016204:	4b06      	ldr	r3, [pc, #24]	; (8016220 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016206:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8016208:	4b05      	ldr	r3, [pc, #20]	; (8016220 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801620c:	4a04      	ldr	r2, [pc, #16]	; (8016220 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801620e:	f043 0301 	orr.w	r3, r3, #1
 8016212:	6353      	str	r3, [r2, #52]	; 0x34
}
 8016214:	bf00      	nop
 8016216:	370c      	adds	r7, #12
 8016218:	46bd      	mov	sp, r7
 801621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621e:	4770      	bx	lr
 8016220:	50001000 	.word	0x50001000
 8016224:	20005934 	.word	0x20005934
 8016228:	20005936 	.word	0x20005936

0801622c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801622c:	b480      	push	{r7}
 801622e:	b083      	sub	sp, #12
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8016234:	4b03      	ldr	r3, [pc, #12]	; (8016244 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8016236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8016238:	4618      	mov	r0, r3
 801623a:	370c      	adds	r7, #12
 801623c:	46bd      	mov	sp, r7
 801623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016242:	4770      	bx	lr
 8016244:	50001084 	.word	0x50001084

08016248 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8016248:	b480      	push	{r7}
 801624a:	b083      	sub	sp, #12
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
 8016250:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8016252:	4a06      	ldr	r2, [pc, #24]	; (801626c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8016254:	683b      	ldr	r3, [r7, #0]
 8016256:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8016258:	4b05      	ldr	r3, [pc, #20]	; (8016270 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801625a:	2201      	movs	r2, #1
 801625c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801625e:	bf00      	nop
 8016260:	370c      	adds	r7, #12
 8016262:	46bd      	mov	sp, r7
 8016264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016268:	4770      	bx	lr
 801626a:	bf00      	nop
 801626c:	50001084 	.word	0x50001084
 8016270:	50001000 	.word	0x50001000

08016274 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b086      	sub	sp, #24
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	6839      	ldr	r1, [r7, #0]
 8016282:	4618      	mov	r0, r3
 8016284:	f001 f89b 	bl	80173be <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8016288:	4b20      	ldr	r3, [pc, #128]	; (801630c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 801628a:	2200      	movs	r2, #0
 801628c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8016290:	f3bf 8f4f 	dsb	sy
}
 8016294:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8016296:	4b1d      	ldr	r3, [pc, #116]	; (801630c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8016298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801629c:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801629e:	697b      	ldr	r3, [r7, #20]
 80162a0:	0b5b      	lsrs	r3, r3, #13
 80162a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80162a6:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80162a8:	697b      	ldr	r3, [r7, #20]
 80162aa:	08db      	lsrs	r3, r3, #3
 80162ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80162b0:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80162b2:	693b      	ldr	r3, [r7, #16]
 80162b4:	015a      	lsls	r2, r3, #5
 80162b6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80162ba:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80162bc:	68fa      	ldr	r2, [r7, #12]
 80162be:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80162c0:	4912      	ldr	r1, [pc, #72]	; (801630c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 80162c2:	4313      	orrs	r3, r2
 80162c4:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	1e5a      	subs	r2, r3, #1
 80162cc:	60fa      	str	r2, [r7, #12]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	bf14      	ite	ne
 80162d2:	2301      	movne	r3, #1
 80162d4:	2300      	moveq	r3, #0
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d000      	beq.n	80162de <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 80162dc:	e7e9      	b.n	80162b2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 80162de:	693b      	ldr	r3, [r7, #16]
 80162e0:	1e5a      	subs	r2, r3, #1
 80162e2:	613a      	str	r2, [r7, #16]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	bf14      	ite	ne
 80162e8:	2301      	movne	r3, #1
 80162ea:	2300      	moveq	r3, #0
 80162ec:	b2db      	uxtb	r3, r3
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d000      	beq.n	80162f4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 80162f2:	e7d9      	b.n	80162a8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 80162f4:	f3bf 8f4f 	dsb	sy
}
 80162f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80162fa:	f3bf 8f6f 	isb	sy
}
 80162fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8016300:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 8016302:	bf00      	nop
 8016304:	3718      	adds	r7, #24
 8016306:	46bd      	mov	sp, r7
 8016308:	bd80      	pop	{r7, pc}
 801630a:	bf00      	nop
 801630c:	e000ed00 	.word	0xe000ed00

08016310 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b084      	sub	sp, #16
 8016314:	af00      	add	r7, sp, #0
 8016316:	60f8      	str	r0, [r7, #12]
 8016318:	60b9      	str	r1, [r7, #8]
 801631a:	607a      	str	r2, [r7, #4]
 801631c:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 801631e:	68f8      	ldr	r0, [r7, #12]
 8016320:	683b      	ldr	r3, [r7, #0]
 8016322:	687a      	ldr	r2, [r7, #4]
 8016324:	68b9      	ldr	r1, [r7, #8]
 8016326:	f001 f97e 	bl	8017626 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801632a:	4603      	mov	r3, r0
}
 801632c:	4618      	mov	r0, r3
 801632e:	3710      	adds	r7, #16
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}

08016334 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8016334:	b480      	push	{r7}
 8016336:	b085      	sub	sp, #20
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801633c:	4b0d      	ldr	r3, [pc, #52]	; (8016374 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801633e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016340:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8016342:	4b0c      	ldr	r3, [pc, #48]	; (8016374 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8016344:	68db      	ldr	r3, [r3, #12]
 8016346:	b29b      	uxth	r3, r3
 8016348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801634c:	b29b      	uxth	r3, r3
 801634e:	3301      	adds	r3, #1
 8016350:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8016352:	89fa      	ldrh	r2, [r7, #14]
 8016354:	89bb      	ldrh	r3, [r7, #12]
 8016356:	429a      	cmp	r2, r3
 8016358:	d304      	bcc.n	8016364 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 801635a:	89fa      	ldrh	r2, [r7, #14]
 801635c:	89bb      	ldrh	r3, [r7, #12]
 801635e:	1ad3      	subs	r3, r2, r3
 8016360:	b29b      	uxth	r3, r3
 8016362:	e000      	b.n	8016366 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8016364:	2300      	movs	r3, #0
}
 8016366:	4618      	mov	r0, r3
 8016368:	3714      	adds	r7, #20
 801636a:	46bd      	mov	sp, r7
 801636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016370:	4770      	bx	lr
 8016372:	bf00      	nop
 8016374:	50001000 	.word	0x50001000

08016378 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8016378:	b480      	push	{r7}
 801637a:	b087      	sub	sp, #28
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8016380:	4b21      	ldr	r3, [pc, #132]	; (8016408 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 8016382:	2200      	movs	r2, #0
 8016384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8016388:	f3bf 8f4f 	dsb	sy
}
 801638c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 801638e:	4b1e      	ldr	r3, [pc, #120]	; (8016408 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 8016390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016394:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	0b5b      	lsrs	r3, r3, #13
 801639a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801639e:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80163a0:	697b      	ldr	r3, [r7, #20]
 80163a2:	08db      	lsrs	r3, r3, #3
 80163a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80163a8:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80163aa:	693b      	ldr	r3, [r7, #16]
 80163ac:	015a      	lsls	r2, r3, #5
 80163ae:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80163b2:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80163b4:	68fa      	ldr	r2, [r7, #12]
 80163b6:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80163b8:	4913      	ldr	r1, [pc, #76]	; (8016408 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 80163ba:	4313      	orrs	r3, r2
 80163bc:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	1e5a      	subs	r2, r3, #1
 80163c4:	60fa      	str	r2, [r7, #12]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	bf14      	ite	ne
 80163ca:	2301      	movne	r3, #1
 80163cc:	2300      	moveq	r3, #0
 80163ce:	b2db      	uxtb	r3, r3
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d000      	beq.n	80163d6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x5e>
      do {
 80163d4:	e7e9      	b.n	80163aa <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x32>
    } while(sets-- != 0U);
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	1e5a      	subs	r2, r3, #1
 80163da:	613a      	str	r2, [r7, #16]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	bf14      	ite	ne
 80163e0:	2301      	movne	r3, #1
 80163e2:	2300      	moveq	r3, #0
 80163e4:	b2db      	uxtb	r3, r3
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d000      	beq.n	80163ec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
    do {
 80163ea:	e7d9      	b.n	80163a0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
  __ASM volatile ("dsb 0xF":::"memory");
 80163ec:	f3bf 8f4f 	dsb	sy
}
 80163f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80163f2:	f3bf 8f6f 	isb	sy
}
 80163f6:	bf00      	nop
}
 80163f8:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 80163fa:	bf00      	nop
 80163fc:	371c      	adds	r7, #28
 80163fe:	46bd      	mov	sp, r7
 8016400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016404:	4770      	bx	lr
 8016406:	bf00      	nop
 8016408:	e000ed00 	.word	0xe000ed00

0801640c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 801640c:	b480      	push	{r7}
 801640e:	b087      	sub	sp, #28
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8016414:	4b21      	ldr	r3, [pc, #132]	; (801649c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 8016416:	2200      	movs	r2, #0
 8016418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801641c:	f3bf 8f4f 	dsb	sy
}
 8016420:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8016422:	4b1e      	ldr	r3, [pc, #120]	; (801649c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 8016424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016428:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801642a:	697b      	ldr	r3, [r7, #20]
 801642c:	0b5b      	lsrs	r3, r3, #13
 801642e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8016432:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8016434:	697b      	ldr	r3, [r7, #20]
 8016436:	08db      	lsrs	r3, r3, #3
 8016438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801643c:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	015a      	lsls	r2, r3, #5
 8016442:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8016446:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8016448:	68fa      	ldr	r2, [r7, #12]
 801644a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801644c:	4913      	ldr	r1, [pc, #76]	; (801649c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 801644e:	4313      	orrs	r3, r2
 8016450:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	1e5a      	subs	r2, r3, #1
 8016458:	60fa      	str	r2, [r7, #12]
 801645a:	2b00      	cmp	r3, #0
 801645c:	bf14      	ite	ne
 801645e:	2301      	movne	r3, #1
 8016460:	2300      	moveq	r3, #0
 8016462:	b2db      	uxtb	r3, r3
 8016464:	2b00      	cmp	r3, #0
 8016466:	d000      	beq.n	801646a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x5e>
      do {
 8016468:	e7e9      	b.n	801643e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x32>
    } while(sets-- != 0U);
 801646a:	693b      	ldr	r3, [r7, #16]
 801646c:	1e5a      	subs	r2, r3, #1
 801646e:	613a      	str	r2, [r7, #16]
 8016470:	2b00      	cmp	r3, #0
 8016472:	bf14      	ite	ne
 8016474:	2301      	movne	r3, #1
 8016476:	2300      	moveq	r3, #0
 8016478:	b2db      	uxtb	r3, r3
 801647a:	2b00      	cmp	r3, #0
 801647c:	d000      	beq.n	8016480 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
    do {
 801647e:	e7d9      	b.n	8016434 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
  __ASM volatile ("dsb 0xF":::"memory");
 8016480:	f3bf 8f4f 	dsb	sy
}
 8016484:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016486:	f3bf 8f6f 	isb	sy
}
 801648a:	bf00      	nop
}
 801648c:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 801648e:	bf00      	nop
 8016490:	371c      	adds	r7, #28
 8016492:	46bd      	mov	sp, r7
 8016494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016498:	4770      	bx	lr
 801649a:	bf00      	nop
 801649c:	e000ed00 	.word	0xe000ed00

080164a0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b082      	sub	sp, #8
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80164a8:	4b1a      	ldr	r3, [pc, #104]	; (8016514 <HAL_LTDC_LineEventCallback+0x74>)
 80164aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164ac:	4a1a      	ldr	r2, [pc, #104]	; (8016518 <HAL_LTDC_LineEventCallback+0x78>)
 80164ae:	8812      	ldrh	r2, [r2, #0]
 80164b0:	4293      	cmp	r3, r2
 80164b2:	bf0c      	ite	eq
 80164b4:	2301      	moveq	r3, #1
 80164b6:	2300      	movne	r3, #0
 80164b8:	b2db      	uxtb	r3, r3
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d017      	beq.n	80164ee <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80164be:	4b17      	ldr	r3, [pc, #92]	; (801651c <HAL_LTDC_LineEventCallback+0x7c>)
 80164c0:	881b      	ldrh	r3, [r3, #0]
 80164c2:	4619      	mov	r1, r3
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f7f1 f8b3 	bl	8007630 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80164ca:	f7fb fdf9 	bl	80120c0 <_ZN8touchgfx3HAL11getInstanceEv>
 80164ce:	4603      	mov	r3, r0
 80164d0:	4618      	mov	r0, r3
 80164d2:	f7ff fd5c 	bl	8015f8e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80164d6:	f7fe fedb 	bl	8015290 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80164da:	f7fb fdf1 	bl	80120c0 <_ZN8touchgfx3HAL11getInstanceEv>
 80164de:	4603      	mov	r3, r0
 80164e0:	4618      	mov	r0, r3
 80164e2:	f001 fcdf 	bl	8017ea4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80164e6:	2000      	movs	r0, #0
 80164e8:	f7fe fc58 	bl	8014d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80164ec:	e00e      	b.n	801650c <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80164ee:	4b0a      	ldr	r3, [pc, #40]	; (8016518 <HAL_LTDC_LineEventCallback+0x78>)
 80164f0:	881b      	ldrh	r3, [r3, #0]
 80164f2:	4619      	mov	r1, r3
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	f7f1 f89b 	bl	8007630 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80164fa:	2000      	movs	r0, #0
 80164fc:	f7fe fc59 	bl	8014db2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8016500:	f7fb fdde 	bl	80120c0 <_ZN8touchgfx3HAL11getInstanceEv>
 8016504:	4603      	mov	r3, r0
 8016506:	4618      	mov	r0, r3
 8016508:	f7ff fd23 	bl	8015f52 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 801650c:	bf00      	nop
 801650e:	3708      	adds	r7, #8
 8016510:	46bd      	mov	sp, r7
 8016512:	bd80      	pop	{r7, pc}
 8016514:	50001000 	.word	0x50001000
 8016518:	20005934 	.word	0x20005934
 801651c:	20005936 	.word	0x20005936

08016520 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016520:	8880      	ldrh	r0, [r0, #4]
 8016522:	4770      	bx	lr

08016524 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016524:	2300      	movs	r3, #0
 8016526:	8083      	strh	r3, [r0, #4]
 8016528:	4770      	bx	lr
	...

0801652c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801652e:	6803      	ldr	r3, [r0, #0]
 8016530:	460e      	mov	r6, r1
 8016532:	2100      	movs	r1, #0
 8016534:	4605      	mov	r5, r0
 8016536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016538:	4798      	blx	r3
 801653a:	4604      	mov	r4, r0
 801653c:	682b      	ldr	r3, [r5, #0]
 801653e:	4628      	mov	r0, r5
 8016540:	1b34      	subs	r4, r6, r4
 8016542:	6a1b      	ldr	r3, [r3, #32]
 8016544:	b2a4      	uxth	r4, r4
 8016546:	4798      	blx	r3
 8016548:	88ab      	ldrh	r3, [r5, #4]
 801654a:	fbb4 f4f0 	udiv	r4, r4, r0
 801654e:	42a3      	cmp	r3, r4
 8016550:	d805      	bhi.n	801655e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8016552:	4b0e      	ldr	r3, [pc, #56]	; (801658c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8016554:	2120      	movs	r1, #32
 8016556:	4a0e      	ldr	r2, [pc, #56]	; (8016590 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016558:	480e      	ldr	r0, [pc, #56]	; (8016594 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801655a:	f013 f8bb 	bl	80296d4 <__assert_func>
 801655e:	682b      	ldr	r3, [r5, #0]
 8016560:	2100      	movs	r1, #0
 8016562:	4628      	mov	r0, r5
 8016564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016566:	4798      	blx	r3
 8016568:	682b      	ldr	r3, [r5, #0]
 801656a:	4607      	mov	r7, r0
 801656c:	4628      	mov	r0, r5
 801656e:	6a1b      	ldr	r3, [r3, #32]
 8016570:	4798      	blx	r3
 8016572:	1bf3      	subs	r3, r6, r7
 8016574:	b29b      	uxth	r3, r3
 8016576:	fbb3 f2f0 	udiv	r2, r3, r0
 801657a:	fb02 3010 	mls	r0, r2, r0, r3
 801657e:	b118      	cbz	r0, 8016588 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8016580:	4b05      	ldr	r3, [pc, #20]	; (8016598 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8016582:	2121      	movs	r1, #33	; 0x21
 8016584:	4a02      	ldr	r2, [pc, #8]	; (8016590 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016586:	e7e7      	b.n	8016558 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016588:	4620      	mov	r0, r4
 801658a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801658c:	0802bea8 	.word	0x0802bea8
 8016590:	0802c016 	.word	0x0802c016
 8016594:	0802bebd 	.word	0x0802bebd
 8016598:	0802beeb 	.word	0x0802beeb

0801659c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801659c:	b538      	push	{r3, r4, r5, lr}
 801659e:	6803      	ldr	r3, [r0, #0]
 80165a0:	460d      	mov	r5, r1
 80165a2:	4604      	mov	r4, r0
 80165a4:	6a1b      	ldr	r3, [r3, #32]
 80165a6:	4798      	blx	r3
 80165a8:	4285      	cmp	r5, r0
 80165aa:	d905      	bls.n	80165b8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80165ac:	4b0c      	ldr	r3, [pc, #48]	; (80165e0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80165ae:	2132      	movs	r1, #50	; 0x32
 80165b0:	4a0c      	ldr	r2, [pc, #48]	; (80165e4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80165b2:	480d      	ldr	r0, [pc, #52]	; (80165e8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80165b4:	f013 f88e 	bl	80296d4 <__assert_func>
 80165b8:	6823      	ldr	r3, [r4, #0]
 80165ba:	4620      	mov	r0, r4
 80165bc:	88a5      	ldrh	r5, [r4, #4]
 80165be:	69db      	ldr	r3, [r3, #28]
 80165c0:	4798      	blx	r3
 80165c2:	4285      	cmp	r5, r0
 80165c4:	d303      	bcc.n	80165ce <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80165c6:	4b09      	ldr	r3, [pc, #36]	; (80165ec <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80165c8:	2133      	movs	r1, #51	; 0x33
 80165ca:	4a06      	ldr	r2, [pc, #24]	; (80165e4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80165cc:	e7f1      	b.n	80165b2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80165ce:	6823      	ldr	r3, [r4, #0]
 80165d0:	4620      	mov	r0, r4
 80165d2:	88a1      	ldrh	r1, [r4, #4]
 80165d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165d6:	4798      	blx	r3
 80165d8:	88a3      	ldrh	r3, [r4, #4]
 80165da:	3301      	adds	r3, #1
 80165dc:	80a3      	strh	r3, [r4, #4]
 80165de:	bd38      	pop	{r3, r4, r5, pc}
 80165e0:	0802bf65 	.word	0x0802bf65
 80165e4:	0802c059 	.word	0x0802c059
 80165e8:	0802bebd 	.word	0x0802bebd
 80165ec:	0802bf7c 	.word	0x0802bf7c

080165f0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80165f0:	b570      	push	{r4, r5, r6, lr}
 80165f2:	6803      	ldr	r3, [r0, #0]
 80165f4:	4616      	mov	r6, r2
 80165f6:	4604      	mov	r4, r0
 80165f8:	460d      	mov	r5, r1
 80165fa:	6a1b      	ldr	r3, [r3, #32]
 80165fc:	4798      	blx	r3
 80165fe:	4286      	cmp	r6, r0
 8016600:	d905      	bls.n	801660e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8016602:	4b06      	ldr	r3, [pc, #24]	; (801661c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016604:	213c      	movs	r1, #60	; 0x3c
 8016606:	4a06      	ldr	r2, [pc, #24]	; (8016620 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8016608:	4806      	ldr	r0, [pc, #24]	; (8016624 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801660a:	f013 f863 	bl	80296d4 <__assert_func>
 801660e:	6823      	ldr	r3, [r4, #0]
 8016610:	4629      	mov	r1, r5
 8016612:	4620      	mov	r0, r4
 8016614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801661a:	4718      	bx	r3
 801661c:	0802bf65 	.word	0x0802bf65
 8016620:	0802bfcc 	.word	0x0802bfcc
 8016624:	0802bebd 	.word	0x0802bebd

08016628 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016628:	4770      	bx	lr
	...

0801662c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801662c:	4a02      	ldr	r2, [pc, #8]	; (8016638 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801662e:	6002      	str	r2, [r0, #0]
 8016630:	2200      	movs	r2, #0
 8016632:	8082      	strh	r2, [r0, #4]
 8016634:	4770      	bx	lr
 8016636:	bf00      	nop
 8016638:	0802bfa0 	.word	0x0802bfa0

0801663c <_ZN8touchgfx9Container13getFirstChildEv>:
 801663c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801663e:	4770      	bx	lr

08016640 <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 8016640:	4a02      	ldr	r2, [pc, #8]	; (801664c <_ZNK8touchgfx12TextProgress12getTypedTextEv+0xc>)
 8016642:	6002      	str	r2, [r0, #0]
 8016644:	f8b1 20dc 	ldrh.w	r2, [r1, #220]	; 0xdc
 8016648:	8082      	strh	r2, [r0, #4]
 801664a:	4770      	bx	lr
 801664c:	0802b66c 	.word	0x0802b66c

08016650 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 8016650:	f8c0 10e0 	str.w	r1, [r0, #224]	; 0xe0
 8016654:	4770      	bx	lr

08016656 <_ZNK8touchgfx12TextProgress8getColorEv>:
 8016656:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 801665a:	4770      	bx	lr

0801665c <_ZN8touchgfx12TextProgress8setAlphaEh>:
 801665c:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
 8016660:	4770      	bx	lr

08016662 <_ZNK8touchgfx12TextProgress8getAlphaEv>:
 8016662:	f890 00e6 	ldrb.w	r0, [r0, #230]	; 0xe6
 8016666:	4770      	bx	lr

08016668 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 8016668:	2902      	cmp	r1, #2
 801666a:	b570      	push	{r4, r5, r6, lr}
 801666c:	bf28      	it	cs
 801666e:	2102      	movcs	r1, #2
 8016670:	6803      	ldr	r3, [r0, #0]
 8016672:	4604      	mov	r4, r0
 8016674:	f8a0 1102 	strh.w	r1, [r0, #258]	; 0x102
 8016678:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 801667c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016680:	4798      	blx	r3
 8016682:	462b      	mov	r3, r5
 8016684:	4601      	mov	r1, r0
 8016686:	4620      	mov	r0, r4
 8016688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801668c:	4718      	bx	r3

0801668e <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 801668e:	f8b0 0102 	ldrh.w	r0, [r0, #258]	; 0x102
 8016692:	4770      	bx	lr

08016694 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 8016694:	4b06      	ldr	r3, [pc, #24]	; (80166b0 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE+0x1c>)
 8016696:	b507      	push	{r0, r1, r2, lr}
 8016698:	30b0      	adds	r0, #176	; 0xb0
 801669a:	9300      	str	r3, [sp, #0]
 801669c:	888b      	ldrh	r3, [r1, #4]
 801669e:	4669      	mov	r1, sp
 80166a0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80166a4:	f002 f80f 	bl	80186c6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80166a8:	b003      	add	sp, #12
 80166aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80166ae:	bf00      	nop
 80166b0:	0802b66c 	.word	0x0802b66c

080166b4 <_ZN8touchgfx12TextProgress8setValueEi>:
 80166b4:	b530      	push	{r4, r5, lr}
 80166b6:	b087      	sub	sp, #28
 80166b8:	4604      	mov	r4, r0
 80166ba:	f000 fb6e 	bl	8016d9a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80166be:	4b1d      	ldr	r3, [pc, #116]	; (8016734 <_ZN8touchgfx12TextProgress8setValueEi+0x80>)
 80166c0:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 80166c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80166c8:	ab06      	add	r3, sp, #24
 80166ca:	e903 0007 	stmdb	r3, {r0, r1, r2}
 80166ce:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
 80166d2:	aa06      	add	r2, sp, #24
 80166d4:	4620      	mov	r0, r4
 80166d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80166da:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 80166de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80166e2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80166e6:	0089      	lsls	r1, r1, #2
 80166e8:	b289      	uxth	r1, r1
 80166ea:	f000 fbe5 	bl	8016eb8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80166ee:	f8b4 1102 	ldrh.w	r1, [r4, #258]	; 0x102
 80166f2:	b1c1      	cbz	r1, 8016726 <_ZN8touchgfx12TextProgress8setValueEi+0x72>
 80166f4:	ab06      	add	r3, sp, #24
 80166f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80166fa:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80166fe:	fb90 f3f2 	sdiv	r3, r0, r2
 8016702:	fb02 0213 	mls	r2, r2, r3, r0
 8016706:	4628      	mov	r0, r5
 8016708:	e9cd 1200 	strd	r1, r2, [sp]
 801670c:	4a0a      	ldr	r2, [pc, #40]	; (8016738 <_ZN8touchgfx12TextProgress8setValueEi+0x84>)
 801670e:	2108      	movs	r1, #8
 8016710:	f007 f8d6 	bl	801d8c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016714:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8016718:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
 801671c:	b007      	add	sp, #28
 801671e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016722:	f005 b813 	b.w	801b74c <_ZNK8touchgfx8Drawable10invalidateEv>
 8016726:	4603      	mov	r3, r0
 8016728:	4a04      	ldr	r2, [pc, #16]	; (801673c <_ZN8touchgfx12TextProgress8setValueEi+0x88>)
 801672a:	2108      	movs	r1, #8
 801672c:	4628      	mov	r0, r5
 801672e:	f007 f8c7 	bl	801d8c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016732:	e7ef      	b.n	8016714 <_ZN8touchgfx12TextProgress8setValueEi+0x60>
 8016734:	0802b4fc 	.word	0x0802b4fc
 8016738:	0802c097 	.word	0x0802c097
 801673c:	0802c09f 	.word	0x0802c09f

08016740 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 8016740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016744:	461d      	mov	r5, r3
 8016746:	f100 07b0 	add.w	r7, r0, #176	; 0xb0
 801674a:	2300      	movs	r3, #0
 801674c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8016750:	4691      	mov	r9, r2
 8016752:	4604      	mov	r4, r0
 8016754:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8016758:	4688      	mov	r8, r1
 801675a:	4638      	mov	r0, r7
 801675c:	4629      	mov	r1, r5
 801675e:	f7fb fbd6 	bl	8011f0e <_ZN8touchgfx8Drawable8setWidthEs>
 8016762:	4631      	mov	r1, r6
 8016764:	4638      	mov	r0, r7
 8016766:	f7fb fbe1 	bl	8011f2c <_ZN8touchgfx8Drawable9setHeightEs>
 801676a:	9608      	str	r6, [sp, #32]
 801676c:	462b      	mov	r3, r5
 801676e:	464a      	mov	r2, r9
 8016770:	4641      	mov	r1, r8
 8016772:	4620      	mov	r0, r4
 8016774:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016778:	f000 bbbb 	b.w	8016ef2 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801677c <_ZN8touchgfx12TextProgressC1Ev>:
 801677c:	b510      	push	{r4, lr}
 801677e:	4604      	mov	r4, r0
 8016780:	f000 fbe4 	bl	8016f4c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8016784:	2201      	movs	r2, #1
 8016786:	4b1e      	ldr	r3, [pc, #120]	; (8016800 <_ZN8touchgfx12TextProgressC1Ev+0x84>)
 8016788:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801678c:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8016790:	f884 20d5 	strb.w	r2, [r4, #213]	; 0xd5
 8016794:	4a1b      	ldr	r2, [pc, #108]	; (8016804 <_ZN8touchgfx12TextProgressC1Ev+0x88>)
 8016796:	6023      	str	r3, [r4, #0]
 8016798:	2300      	movs	r3, #0
 801679a:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
 801679e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167a2:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
 80167a6:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
 80167aa:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80167ae:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
 80167b2:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
 80167b6:	4a14      	ldr	r2, [pc, #80]	; (8016808 <_ZN8touchgfx12TextProgressC1Ev+0x8c>)
 80167b8:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
 80167bc:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 80167c0:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 80167c4:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
 80167c8:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
 80167cc:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 80167d0:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 80167d4:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
 80167d8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80167dc:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
 80167e0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
 80167e4:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80167e8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80167ec:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 80167f0:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 80167f4:	e9c4 3331 	strd	r3, r3, [r4, #196]	; 0xc4
 80167f8:	f000 fc96 	bl	8017128 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80167fc:	4620      	mov	r0, r4
 80167fe:	bd10      	pop	{r4, pc}
 8016800:	0802c0ac 	.word	0x0802c0ac
 8016804:	0802b66c 	.word	0x0802b66c
 8016808:	0802d248 	.word	0x0802d248

0801680c <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 801680c:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
 8016810:	4770      	bx	lr

08016812 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8016812:	b570      	push	{r4, r5, r6, lr}
 8016814:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8016818:	4604      	mov	r4, r0
 801681a:	428b      	cmp	r3, r1
 801681c:	d011      	beq.n	8016842 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0x30>
 801681e:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
 8016822:	3058      	adds	r0, #88	; 0x58
 8016824:	f004 ff92 	bl	801b74c <_ZNK8touchgfx8Drawable10invalidateEv>
 8016828:	6823      	ldr	r3, [r4, #0]
 801682a:	4620      	mov	r0, r4
 801682c:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8016830:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016834:	4798      	blx	r3
 8016836:	462b      	mov	r3, r5
 8016838:	4601      	mov	r1, r0
 801683a:	4620      	mov	r0, r4
 801683c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016840:	4718      	bx	r3
 8016842:	bd70      	pop	{r4, r5, r6, pc}

08016844 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8016844:	b510      	push	{r4, lr}
 8016846:	4604      	mov	r4, r0
 8016848:	f000 fb80 	bl	8016f4c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801684c:	4b03      	ldr	r3, [pc, #12]	; (801685c <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 801684e:	2100      	movs	r1, #0
 8016850:	4620      	mov	r0, r4
 8016852:	6023      	str	r3, [r4, #0]
 8016854:	f7ff ffdd 	bl	8016812 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8016858:	4620      	mov	r0, r4
 801685a:	bd10      	pop	{r4, pc}
 801685c:	0802c19c 	.word	0x0802c19c

08016860 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8016860:	b570      	push	{r4, r5, r6, lr}
 8016862:	6803      	ldr	r3, [r0, #0]
 8016864:	4604      	mov	r4, r0
 8016866:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
 801686a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 801686e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016872:	4798      	blx	r3
 8016874:	462b      	mov	r3, r5
 8016876:	4601      	mov	r1, r0
 8016878:	4620      	mov	r0, r4
 801687a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801687e:	4718      	bx	r3

08016880 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8016880:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
 8016884:	4770      	bx	lr

08016886 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8016886:	f880 1108 	strb.w	r1, [r0, #264]	; 0x108
 801688a:	4770      	bx	lr

0801688c <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 801688c:	f890 0108 	ldrb.w	r0, [r0, #264]	; 0x108
 8016890:	4770      	bx	lr

08016892 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8016892:	b507      	push	{r0, r1, r2, lr}
 8016894:	ab02      	add	r3, sp, #8
 8016896:	30e0      	adds	r0, #224	; 0xe0
 8016898:	f823 1d04 	strh.w	r1, [r3, #-4]!
 801689c:	4619      	mov	r1, r3
 801689e:	f001 ff6a 	bl	8018776 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 80168a2:	b003      	add	sp, #12
 80168a4:	f85d fb04 	ldr.w	pc, [sp], #4

080168a8 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 80168a8:	b508      	push	{r3, lr}
 80168aa:	4b06      	ldr	r3, [pc, #24]	; (80168c4 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	b92b      	cbnz	r3, 80168bc <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 80168b0:	4b05      	ldr	r3, [pc, #20]	; (80168c8 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 80168b2:	218b      	movs	r1, #139	; 0x8b
 80168b4:	4a05      	ldr	r2, [pc, #20]	; (80168cc <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 80168b6:	4806      	ldr	r0, [pc, #24]	; (80168d0 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 80168b8:	f012 ff0c 	bl	80296d4 <__assert_func>
 80168bc:	f8b0 0106 	ldrh.w	r0, [r0, #262]	; 0x106
 80168c0:	bd08      	pop	{r3, pc}
 80168c2:	bf00      	nop
 80168c4:	200059cc 	.word	0x200059cc
 80168c8:	0802c26c 	.word	0x0802c26c
 80168cc:	0802c3c0 	.word	0x0802c3c0
 80168d0:	0802c2a8 	.word	0x0802c2a8

080168d4 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 80168d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80168d8:	4617      	mov	r7, r2
 80168da:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80168de:	2200      	movs	r2, #0
 80168e0:	4604      	mov	r4, r0
 80168e2:	460e      	mov	r6, r1
 80168e4:	4698      	mov	r8, r3
 80168e6:	4611      	mov	r1, r2
 80168e8:	9500      	str	r5, [sp, #0]
 80168ea:	30b4      	adds	r0, #180	; 0xb4
 80168ec:	f7fb faa5 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 80168f0:	4643      	mov	r3, r8
 80168f2:	463a      	mov	r2, r7
 80168f4:	4631      	mov	r1, r6
 80168f6:	4620      	mov	r0, r4
 80168f8:	9508      	str	r5, [sp, #32]
 80168fa:	b002      	add	sp, #8
 80168fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016900:	f000 baf7 	b.w	8016ef2 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08016904 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8016904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016906:	4604      	mov	r4, r0
 8016908:	b085      	sub	sp, #20
 801690a:	f000 fa46 	bl	8016d9a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801690e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8016912:	4620      	mov	r0, r4
 8016914:	2b01      	cmp	r3, #1
 8016916:	bf94      	ite	ls
 8016918:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 801691c:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8016920:	f000 faca 	bl	8016eb8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8016924:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8016928:	4606      	mov	r6, r0
 801692a:	b205      	sxth	r5, r0
 801692c:	2b00      	cmp	r3, #0
 801692e:	f000 80ca 	beq.w	8016ac6 <_ZN8touchgfx13ImageProgress8setValueEi+0x1c2>
 8016932:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8016936:	2b03      	cmp	r3, #3
 8016938:	d834      	bhi.n	80169a4 <_ZN8touchgfx13ImageProgress8setValueEi+0xa0>
 801693a:	e8df f003 	tbb	[pc, r3]
 801693e:	3502      	.short	0x3502
 8016940:	9166      	.short	0x9166
 8016942:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016946:	2200      	movs	r2, #0
 8016948:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801694c:	f9b4 60bc 	ldrsh.w	r6, [r4, #188]	; 0xbc
 8016950:	4611      	mov	r1, r2
 8016952:	9300      	str	r3, [sp, #0]
 8016954:	462b      	mov	r3, r5
 8016956:	f7fb fa70 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 801695a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801695e:	2200      	movs	r2, #0
 8016960:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8016964:	9300      	str	r3, [sp, #0]
 8016966:	462b      	mov	r3, r5
 8016968:	4611      	mov	r1, r2
 801696a:	f7fb fa66 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 801696e:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	; 0xbc
 8016972:	4631      	mov	r1, r6
 8016974:	f9b4 20be 	ldrsh.w	r2, [r4, #190]	; 0xbe
 8016978:	429e      	cmp	r6, r3
 801697a:	eba6 0603 	sub.w	r6, r6, r3
 801697e:	bfa8      	it	ge
 8016980:	4619      	movge	r1, r3
 8016982:	2e00      	cmp	r6, #0
 8016984:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016988:	bfb8      	it	lt
 801698a:	4276      	neglt	r6, r6
 801698c:	2100      	movs	r1, #0
 801698e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8016992:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016996:	f8ad 200e 	strh.w	r2, [sp, #14]
 801699a:	a902      	add	r1, sp, #8
 801699c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80169a0:	f004 ff3c 	bl	801b81c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 80169a4:	b005      	add	sp, #20
 80169a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169a8:	8921      	ldrh	r1, [r4, #8]
 80169aa:	2200      	movs	r2, #0
 80169ac:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80169b0:	1a09      	subs	r1, r1, r0
 80169b2:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 80169b6:	9300      	str	r3, [sp, #0]
 80169b8:	462b      	mov	r3, r5
 80169ba:	b209      	sxth	r1, r1
 80169bc:	f9b4 70b8 	ldrsh.w	r7, [r4, #184]	; 0xb8
 80169c0:	f7fb fa3b 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 80169c4:	f8b4 10b8 	ldrh.w	r1, [r4, #184]	; 0xb8
 80169c8:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 80169cc:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 80169d0:	4249      	negs	r1, r1
 80169d2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80169d6:	9200      	str	r2, [sp, #0]
 80169d8:	2200      	movs	r2, #0
 80169da:	b209      	sxth	r1, r1
 80169dc:	f7fb fa2d 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 80169e0:	f9b4 30b8 	ldrsh.w	r3, [r4, #184]	; 0xb8
 80169e4:	4639      	mov	r1, r7
 80169e6:	f9b4 20be 	ldrsh.w	r2, [r4, #190]	; 0xbe
 80169ea:	429f      	cmp	r7, r3
 80169ec:	eba7 0703 	sub.w	r7, r7, r3
 80169f0:	bfa8      	it	ge
 80169f2:	4619      	movge	r1, r3
 80169f4:	2f00      	cmp	r7, #0
 80169f6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80169fa:	bfb8      	it	lt
 80169fc:	427f      	neglt	r7, r7
 80169fe:	2100      	movs	r1, #0
 8016a00:	f8ad 700c 	strh.w	r7, [sp, #12]
 8016a04:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016a08:	e7c5      	b.n	8016996 <_ZN8touchgfx13ImageProgress8setValueEi+0x92>
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016a10:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8016a14:	9500      	str	r5, [sp, #0]
 8016a16:	4611      	mov	r1, r2
 8016a18:	f9b4 60be 	ldrsh.w	r6, [r4, #190]	; 0xbe
 8016a1c:	f7fb fa0d 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a20:	2200      	movs	r2, #0
 8016a22:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016a26:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8016a2a:	4611      	mov	r1, r2
 8016a2c:	9500      	str	r5, [sp, #0]
 8016a2e:	f7fb fa04 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a32:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	; 0xbe
 8016a36:	2100      	movs	r1, #0
 8016a38:	f9b4 20bc 	ldrsh.w	r2, [r4, #188]	; 0xbc
 8016a3c:	429e      	cmp	r6, r3
 8016a3e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016a42:	4631      	mov	r1, r6
 8016a44:	eba6 0603 	sub.w	r6, r6, r3
 8016a48:	bfa8      	it	ge
 8016a4a:	4619      	movge	r1, r3
 8016a4c:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016a50:	2e00      	cmp	r6, #0
 8016a52:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016a56:	bfb8      	it	lt
 8016a58:	4276      	neglt	r6, r6
 8016a5a:	f8ad 600e 	strh.w	r6, [sp, #14]
 8016a5e:	e79c      	b.n	801699a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8016a60:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016a64:	2100      	movs	r1, #0
 8016a66:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016a6a:	1a12      	subs	r2, r2, r0
 8016a6c:	9500      	str	r5, [sp, #0]
 8016a6e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8016a72:	f9b4 70ba 	ldrsh.w	r7, [r4, #186]	; 0xba
 8016a76:	b212      	sxth	r2, r2
 8016a78:	f7fb f9df 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a7c:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
 8016a80:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8016a84:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8016a88:	4252      	negs	r2, r2
 8016a8a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016a8e:	9100      	str	r1, [sp, #0]
 8016a90:	2100      	movs	r1, #0
 8016a92:	b212      	sxth	r2, r2
 8016a94:	f7fb f9d1 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a98:	f9b4 30ba 	ldrsh.w	r3, [r4, #186]	; 0xba
 8016a9c:	2100      	movs	r1, #0
 8016a9e:	f9b4 20bc 	ldrsh.w	r2, [r4, #188]	; 0xbc
 8016aa2:	429f      	cmp	r7, r3
 8016aa4:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016aa8:	4639      	mov	r1, r7
 8016aaa:	eba7 0703 	sub.w	r7, r7, r3
 8016aae:	bfa8      	it	ge
 8016ab0:	4619      	movge	r1, r3
 8016ab2:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016ab6:	2f00      	cmp	r7, #0
 8016ab8:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016abc:	bfb8      	it	lt
 8016abe:	427f      	neglt	r7, r7
 8016ac0:	f8ad 700e 	strh.w	r7, [sp, #14]
 8016ac4:	e769      	b.n	801699a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8016ac6:	f104 07b4 	add.w	r7, r4, #180	; 0xb4
 8016aca:	4638      	mov	r0, r7
 8016acc:	f004 fe3e 	bl	801b74c <_ZNK8touchgfx8Drawable10invalidateEv>
 8016ad0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8016ad4:	2b03      	cmp	r3, #3
 8016ad6:	d818      	bhi.n	8016b0a <_ZN8touchgfx13ImageProgress8setValueEi+0x206>
 8016ad8:	e8df f003 	tbb	[pc, r3]
 8016adc:	3f2e1b02 	.word	0x3f2e1b02
 8016ae0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016ae4:	2200      	movs	r2, #0
 8016ae6:	4638      	mov	r0, r7
 8016ae8:	4611      	mov	r1, r2
 8016aea:	9300      	str	r3, [sp, #0]
 8016aec:	462b      	mov	r3, r5
 8016aee:	f7fb f9a4 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 8016af2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016af6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016afa:	1af1      	subs	r1, r6, r3
 8016afc:	9200      	str	r2, [sp, #0]
 8016afe:	2200      	movs	r2, #0
 8016b00:	b209      	sxth	r1, r1
 8016b02:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8016b06:	f7fb f998 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 8016b0a:	4638      	mov	r0, r7
 8016b0c:	f004 fe1e 	bl	801b74c <_ZNK8touchgfx8Drawable10invalidateEv>
 8016b10:	e748      	b.n	80169a4 <_ZN8touchgfx13ImageProgress8setValueEi+0xa0>
 8016b12:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8016b16:	2200      	movs	r2, #0
 8016b18:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016b1c:	4638      	mov	r0, r7
 8016b1e:	1b89      	subs	r1, r1, r6
 8016b20:	9300      	str	r3, [sp, #0]
 8016b22:	462b      	mov	r3, r5
 8016b24:	b209      	sxth	r1, r1
 8016b26:	f7fb f988 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 8016b2a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016b2e:	9300      	str	r3, [sp, #0]
 8016b30:	462b      	mov	r3, r5
 8016b32:	2200      	movs	r2, #0
 8016b34:	4611      	mov	r1, r2
 8016b36:	e7e4      	b.n	8016b02 <_ZN8touchgfx13ImageProgress8setValueEi+0x1fe>
 8016b38:	2200      	movs	r2, #0
 8016b3a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016b3e:	4638      	mov	r0, r7
 8016b40:	9500      	str	r5, [sp, #0]
 8016b42:	4611      	mov	r1, r2
 8016b44:	f7fb f979 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 8016b48:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8016b4c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016b50:	2100      	movs	r1, #0
 8016b52:	1a32      	subs	r2, r6, r0
 8016b54:	9000      	str	r0, [sp, #0]
 8016b56:	b212      	sxth	r2, r2
 8016b58:	e7d3      	b.n	8016b02 <_ZN8touchgfx13ImageProgress8setValueEi+0x1fe>
 8016b5a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016b5e:	2100      	movs	r1, #0
 8016b60:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016b64:	4638      	mov	r0, r7
 8016b66:	1b92      	subs	r2, r2, r6
 8016b68:	9500      	str	r5, [sp, #0]
 8016b6a:	b212      	sxth	r2, r2
 8016b6c:	f7fb f965 	bl	8011e3a <_ZN8touchgfx8Drawable11setPositionEssss>
 8016b70:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016b74:	9500      	str	r5, [sp, #0]
 8016b76:	e7dc      	b.n	8016b32 <_ZN8touchgfx13ImageProgress8setValueEi+0x22e>

08016b78 <_ZN8touchgfx13ImageProgressC1Ev>:
 8016b78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016b7c:	4604      	mov	r4, r0
 8016b7e:	f7ff fe61 	bl	8016844 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8016b82:	4b31      	ldr	r3, [pc, #196]	; (8016c48 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8016b84:	a902      	add	r1, sp, #8
 8016b86:	4626      	mov	r6, r4
 8016b88:	f104 08e0 	add.w	r8, r4, #224	; 0xe0
 8016b8c:	2500      	movs	r5, #0
 8016b8e:	4a2f      	ldr	r2, [pc, #188]	; (8016c4c <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8016b90:	f846 3bb4 	str.w	r3, [r6], #180
 8016b94:	2701      	movs	r7, #1
 8016b96:	4b2e      	ldr	r3, [pc, #184]	; (8016c50 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8016b98:	4640      	mov	r0, r8
 8016b9a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 8016b9e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8016ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ba6:	f8a4 50b8 	strh.w	r5, [r4, #184]	; 0xb8
 8016baa:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8016bae:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
 8016bb2:	f8a4 50ba 	strh.w	r5, [r4, #186]	; 0xba
 8016bb6:	f8a4 50bc 	strh.w	r5, [r4, #188]	; 0xbc
 8016bba:	f8a4 50be 	strh.w	r5, [r4, #190]	; 0xbe
 8016bbe:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8016bc2:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8016bc6:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8016bca:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8016bce:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 8016bd2:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
 8016bd6:	f884 70d9 	strb.w	r7, [r4, #217]	; 0xd9
 8016bda:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
 8016bde:	f8a4 50e4 	strh.w	r5, [r4, #228]	; 0xe4
 8016be2:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8016be6:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8016bea:	f8a4 50ea 	strh.w	r5, [r4, #234]	; 0xea
 8016bee:	f8a4 50ec 	strh.w	r5, [r4, #236]	; 0xec
 8016bf2:	f8a4 50ee 	strh.w	r5, [r4, #238]	; 0xee
 8016bf6:	f8a4 50f0 	strh.w	r5, [r4, #240]	; 0xf0
 8016bfa:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
 8016bfe:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
 8016c02:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8016c06:	f884 7105 	strb.w	r7, [r4, #261]	; 0x105
 8016c0a:	e9c4 5532 	strd	r5, r5, [r4, #200]	; 0xc8
 8016c0e:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8016c12:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
 8016c16:	f002 f90f 	bl	8018e38 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016c1a:	4b0e      	ldr	r3, [pc, #56]	; (8016c54 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8016c1c:	4641      	mov	r1, r8
 8016c1e:	4630      	mov	r0, r6
 8016c20:	f8a4 510a 	strh.w	r5, [r4, #266]	; 0x10a
 8016c24:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8016c28:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
 8016c2c:	f884 7110 	strb.w	r7, [r4, #272]	; 0x110
 8016c30:	f000 fa7a 	bl	8017128 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016c34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016c38:	4631      	mov	r1, r6
 8016c3a:	f000 fa75 	bl	8017128 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016c3e:	4620      	mov	r0, r4
 8016c40:	b002      	add	sp, #8
 8016c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c46:	bf00      	nop
 8016c48:	0802c2d8 	.word	0x0802c2d8
 8016c4c:	0802d2f0 	.word	0x0802d2f0
 8016c50:	0802c66c 	.word	0x0802c66c
 8016c54:	0802d124 	.word	0x0802d124

08016c58 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8016c58:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8016c5c:	4770      	bx	lr

08016c5e <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8016c5e:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8016c62:	4770      	bx	lr

08016c64 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8016c64:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8016c68:	4770      	bx	lr

08016c6a <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8016c6a:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8016c6e:	4770      	bx	lr

08016c70 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8016c70:	b510      	push	{r4, lr}
 8016c72:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016c76:	600c      	str	r4, [r1, #0]
 8016c78:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016c7c:	6011      	str	r1, [r2, #0]
 8016c7e:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016c82:	801a      	strh	r2, [r3, #0]
 8016c84:	9b02      	ldr	r3, [sp, #8]
 8016c86:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8016c8a:	801a      	strh	r2, [r3, #0]
 8016c8c:	bd10      	pop	{r4, pc}

08016c8e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8016c8e:	b510      	push	{r4, lr}
 8016c90:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016c94:	600c      	str	r4, [r1, #0]
 8016c96:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016c9a:	6011      	str	r1, [r2, #0]
 8016c9c:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016ca0:	801a      	strh	r2, [r3, #0]
 8016ca2:	bd10      	pop	{r4, pc}

08016ca4 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8016ca4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016ca8:	600b      	str	r3, [r1, #0]
 8016caa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016cae:	6013      	str	r3, [r2, #0]
 8016cb0:	4770      	bx	lr

08016cb2 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8016cb2:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8016cb6:	4770      	bx	lr

08016cb8 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8016cb8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8016cbc:	4770      	bx	lr

08016cbe <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8016cbe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016cc0:	460d      	mov	r5, r1
 8016cc2:	4614      	mov	r4, r2
 8016cc4:	9908      	ldr	r1, [sp, #32]
 8016cc6:	6802      	ldr	r2, [r0, #0]
 8016cc8:	9100      	str	r1, [sp, #0]
 8016cca:	a902      	add	r1, sp, #8
 8016ccc:	f8d2 609c 	ldr.w	r6, [r2, #156]	; 0x9c
 8016cd0:	aa03      	add	r2, sp, #12
 8016cd2:	47b0      	blx	r6
 8016cd4:	9b02      	ldr	r3, [sp, #8]
 8016cd6:	802b      	strh	r3, [r5, #0]
 8016cd8:	9b03      	ldr	r3, [sp, #12]
 8016cda:	8023      	strh	r3, [r4, #0]
 8016cdc:	b004      	add	sp, #16
 8016cde:	bd70      	pop	{r4, r5, r6, pc}

08016ce0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8016ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016ce2:	4614      	mov	r4, r2
 8016ce4:	6802      	ldr	r2, [r0, #0]
 8016ce6:	460d      	mov	r5, r1
 8016ce8:	4669      	mov	r1, sp
 8016cea:	f8d2 60a0 	ldr.w	r6, [r2, #160]	; 0xa0
 8016cee:	aa01      	add	r2, sp, #4
 8016cf0:	47b0      	blx	r6
 8016cf2:	9b00      	ldr	r3, [sp, #0]
 8016cf4:	802b      	strh	r3, [r5, #0]
 8016cf6:	9b01      	ldr	r3, [sp, #4]
 8016cf8:	8023      	strh	r3, [r4, #0]
 8016cfa:	b002      	add	sp, #8
 8016cfc:	bd70      	pop	{r4, r5, r6, pc}

08016cfe <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8016cfe:	6803      	ldr	r3, [r0, #0]
 8016d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d02:	460d      	mov	r5, r1
 8016d04:	4614      	mov	r4, r2
 8016d06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016d0a:	aa01      	add	r2, sp, #4
 8016d0c:	4669      	mov	r1, sp
 8016d0e:	4798      	blx	r3
 8016d10:	9b00      	ldr	r3, [sp, #0]
 8016d12:	802b      	strh	r3, [r5, #0]
 8016d14:	9b01      	ldr	r3, [sp, #4]
 8016d16:	8023      	strh	r3, [r4, #0]
 8016d18:	b003      	add	sp, #12
 8016d1a:	bd30      	pop	{r4, r5, pc}

08016d1c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8016d1c:	b570      	push	{r4, r5, r6, lr}
 8016d1e:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8016d22:	4604      	mov	r4, r0
 8016d24:	4616      	mov	r6, r2
 8016d26:	428d      	cmp	r5, r1
 8016d28:	bfb8      	it	lt
 8016d2a:	460d      	movlt	r5, r1
 8016d2c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016d30:	428d      	cmp	r5, r1
 8016d32:	bfa8      	it	ge
 8016d34:	460d      	movge	r5, r1
 8016d36:	b99a      	cbnz	r2, 8016d60 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8016d38:	6803      	ldr	r3, [r0, #0]
 8016d3a:	4629      	mov	r1, r5
 8016d3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016d40:	4798      	blx	r3
 8016d42:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016d46:	b338      	cbz	r0, 8016d98 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 8016d48:	6803      	ldr	r3, [r0, #0]
 8016d4a:	68db      	ldr	r3, [r3, #12]
 8016d4c:	4798      	blx	r3
 8016d4e:	b318      	cbz	r0, 8016d98 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 8016d50:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016d54:	4621      	mov	r1, r4
 8016d56:	6803      	ldr	r3, [r0, #0]
 8016d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d5c:	689b      	ldr	r3, [r3, #8]
 8016d5e:	4718      	bx	r3
 8016d60:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	dd04      	ble.n	8016d72 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x56>
 8016d68:	f003 fd4a 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 8016d6c:	4621      	mov	r1, r4
 8016d6e:	f003 fd7f 	bl	801a870 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016d72:	6823      	ldr	r3, [r4, #0]
 8016d74:	4620      	mov	r0, r4
 8016d76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016d7a:	4798      	blx	r3
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 8016d82:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8016d86:	e9c4 0526 	strd	r0, r5, [r4, #152]	; 0x98
 8016d8a:	f003 fd39 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 8016d8e:	4621      	mov	r1, r4
 8016d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d94:	f003 bd3a 	b.w	801a80c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8016d98:	bd70      	pop	{r4, r5, r6, pc}

08016d9a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8016d9a:	b510      	push	{r4, lr}
 8016d9c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016da0:	4604      	mov	r4, r0
 8016da2:	4299      	cmp	r1, r3
 8016da4:	bfb8      	it	lt
 8016da6:	4619      	movlt	r1, r3
 8016da8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016dac:	4299      	cmp	r1, r3
 8016dae:	bfa8      	it	ge
 8016db0:	4619      	movge	r1, r3
 8016db2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8016db6:	428b      	cmp	r3, r1
 8016db8:	d010      	beq.n	8016ddc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016dba:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8016dbe:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8016dc2:	b158      	cbz	r0, 8016ddc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016dc4:	6803      	ldr	r3, [r0, #0]
 8016dc6:	68db      	ldr	r3, [r3, #12]
 8016dc8:	4798      	blx	r3
 8016dca:	b138      	cbz	r0, 8016ddc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016dcc:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8016dd0:	4621      	mov	r1, r4
 8016dd2:	6803      	ldr	r3, [r0, #0]
 8016dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dd8:	689b      	ldr	r3, [r3, #8]
 8016dda:	4718      	bx	r3
 8016ddc:	bd10      	pop	{r4, pc}
	...

08016de0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8016de0:	4291      	cmp	r1, r2
 8016de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016de6:	4604      	mov	r4, r0
 8016de8:	460e      	mov	r6, r1
 8016dea:	4615      	mov	r5, r2
 8016dec:	4698      	mov	r8, r3
 8016dee:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8016df2:	db05      	blt.n	8016e00 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8016df4:	4b11      	ldr	r3, [pc, #68]	; (8016e3c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8016df6:	2149      	movs	r1, #73	; 0x49
 8016df8:	4a11      	ldr	r2, [pc, #68]	; (8016e40 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8016dfa:	4812      	ldr	r0, [pc, #72]	; (8016e44 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8016dfc:	f012 fc6a 	bl	80296d4 <__assert_func>
 8016e00:	6803      	ldr	r3, [r0, #0]
 8016e02:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8016e06:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8016e0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016e0e:	4798      	blx	r3
 8016e10:	f1b8 0f00 	cmp.w	r8, #0
 8016e14:	d10c      	bne.n	8016e30 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8016e16:	1bad      	subs	r5, r5, r6
 8016e18:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8016e1c:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 8016e20:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 8016e24:	42bb      	cmp	r3, r7
 8016e26:	d806      	bhi.n	8016e36 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8016e28:	4b07      	ldr	r3, [pc, #28]	; (8016e48 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 8016e2a:	2156      	movs	r1, #86	; 0x56
 8016e2c:	4a04      	ldr	r2, [pc, #16]	; (8016e40 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8016e2e:	e7e4      	b.n	8016dfa <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8016e30:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 8016e34:	e7f2      	b.n	8016e1c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8016e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e3a:	bf00      	nop
 8016e3c:	0802c3f3 	.word	0x0802c3f3
 8016e40:	0802c540 	.word	0x0802c540
 8016e44:	0802c3fd 	.word	0x0802c3fd
 8016e48:	0802c454 	.word	0x0802c454

08016e4c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8016e4c:	b570      	push	{r4, r5, r6, lr}
 8016e4e:	4604      	mov	r4, r0
 8016e50:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8016e54:	2100      	movs	r1, #0
 8016e56:	3001      	adds	r0, #1
 8016e58:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8016e5c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8016e60:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8016e64:	b280      	uxth	r0, r0
 8016e66:	1ad2      	subs	r2, r2, r3
 8016e68:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8016e6c:	b212      	sxth	r2, r2
 8016e6e:	47a8      	blx	r5
 8016e70:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8016e74:	6823      	ldr	r3, [r4, #0]
 8016e76:	4401      	add	r1, r0
 8016e78:	4620      	mov	r0, r4
 8016e7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016e7e:	4798      	blx	r3
 8016e80:	e9d4 3228 	ldrd	r3, r2, [r4, #160]	; 0xa0
 8016e84:	429a      	cmp	r2, r3
 8016e86:	db16      	blt.n	8016eb6 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8016e88:	2300      	movs	r3, #0
 8016e8a:	e9c4 3328 	strd	r3, r3, [r4, #160]	; 0xa0
 8016e8e:	f003 fcb7 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 8016e92:	4621      	mov	r1, r4
 8016e94:	f003 fcec 	bl	801a870 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016e98:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016e9c:	b158      	cbz	r0, 8016eb6 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8016e9e:	6803      	ldr	r3, [r0, #0]
 8016ea0:	68db      	ldr	r3, [r3, #12]
 8016ea2:	4798      	blx	r3
 8016ea4:	b138      	cbz	r0, 8016eb6 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8016ea6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016eaa:	4621      	mov	r1, r4
 8016eac:	6803      	ldr	r3, [r0, #0]
 8016eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016eb2:	689b      	ldr	r3, [r3, #8]
 8016eb4:	4718      	bx	r3
 8016eb6:	bd70      	pop	{r4, r5, r6, pc}

08016eb8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8016eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016eba:	4604      	mov	r4, r0
 8016ebc:	460d      	mov	r5, r1
 8016ebe:	b1a9      	cbz	r1, 8016eec <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8016ec0:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8016ec4:	ab01      	add	r3, sp, #4
 8016ec6:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8016eca:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8016ece:	1b89      	subs	r1, r1, r6
 8016ed0:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8016ed4:	1a12      	subs	r2, r2, r0
 8016ed6:	1a38      	subs	r0, r7, r0
 8016ed8:	f004 fdf4 	bl	801bac4 <_ZN8touchgfx6muldivElllRl>
 8016edc:	4629      	mov	r1, r5
 8016ede:	ab01      	add	r3, sp, #4
 8016ee0:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8016ee4:	4430      	add	r0, r6
 8016ee6:	f004 fded 	bl	801bac4 <_ZN8touchgfx6muldivElllRl>
 8016eea:	b285      	uxth	r5, r0
 8016eec:	4628      	mov	r0, r5
 8016eee:	b003      	add	sp, #12
 8016ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ef2 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8016ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef6:	4604      	mov	r4, r0
 8016ef8:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8016efc:	4698      	mov	r8, r3
 8016efe:	460e      	mov	r6, r1
 8016f00:	4615      	mov	r5, r2
 8016f02:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8016f06:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8016f0a:	4619      	mov	r1, r3
 8016f0c:	463a      	mov	r2, r7
 8016f0e:	3058      	adds	r0, #88	; 0x58
 8016f10:	f7fb f83b 	bl	8011f8a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016f14:	4446      	add	r6, r8
 8016f16:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016f1a:	443d      	add	r5, r7
 8016f1c:	42b3      	cmp	r3, r6
 8016f1e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016f22:	bfb8      	it	lt
 8016f24:	8126      	strhlt	r6, [r4, #8]
 8016f26:	42ab      	cmp	r3, r5
 8016f28:	bfb8      	it	lt
 8016f2a:	8165      	strhlt	r5, [r4, #10]
 8016f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f30 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8016f30:	b510      	push	{r4, lr}
 8016f32:	4604      	mov	r4, r0
 8016f34:	302c      	adds	r0, #44	; 0x2c
 8016f36:	f001 ff7f 	bl	8018e38 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016f3a:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8016f3e:	4620      	mov	r0, r4
 8016f40:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8016f44:	f7fb f821 	bl	8011f8a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016f48:	bd10      	pop	{r4, pc}
	...

08016f4c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8016f4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016f50:	4604      	mov	r4, r0
 8016f52:	2500      	movs	r5, #0
 8016f54:	f7fc f9f0 	bl	8013338 <_ZN8touchgfx8DrawableC1Ev>
 8016f58:	4b23      	ldr	r3, [pc, #140]	; (8016fe8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8016f5a:	4626      	mov	r6, r4
 8016f5c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8016f60:	af02      	add	r7, sp, #8
 8016f62:	2226      	movs	r2, #38	; 0x26
 8016f64:	4629      	mov	r1, r5
 8016f66:	62a5      	str	r5, [r4, #40]	; 0x28
 8016f68:	f846 3b2c 	str.w	r3, [r6], #44
 8016f6c:	4630      	mov	r0, r6
 8016f6e:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8016f72:	f012 fd35 	bl	80299e0 <memset>
 8016f76:	4630      	mov	r0, r6
 8016f78:	f7fc f9de 	bl	8013338 <_ZN8touchgfx8DrawableC1Ev>
 8016f7c:	4b1b      	ldr	r3, [pc, #108]	; (8016fec <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8016f7e:	4639      	mov	r1, r7
 8016f80:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8016f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016f86:	4630      	mov	r0, r6
 8016f88:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8016f8c:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8016f90:	f001 ff52 	bl	8018e38 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016f94:	4638      	mov	r0, r7
 8016f96:	f7fc f9cf 	bl	8013338 <_ZN8touchgfx8DrawableC1Ev>
 8016f9a:	4b15      	ldr	r3, [pc, #84]	; (8016ff0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8016f9c:	4629      	mov	r1, r5
 8016f9e:	4630      	mov	r0, r6
 8016fa0:	65a3      	str	r3, [r4, #88]	; 0x58
 8016fa2:	2364      	movs	r3, #100	; 0x64
 8016fa4:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8016fa8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8016fac:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8016fb0:	4b10      	ldr	r3, [pc, #64]	; (8016ff4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8016fb2:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8016fb6:	e9c4 3525 	strd	r3, r5, [r4, #148]	; 0x94
 8016fba:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8016fbe:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016fc2:	f7fa ff68 	bl	8011e96 <_ZN8touchgfx8Drawable4setXEs>
 8016fc6:	4629      	mov	r1, r5
 8016fc8:	4630      	mov	r0, r6
 8016fca:	f7fa ff73 	bl	8011eb4 <_ZN8touchgfx8Drawable4setYEs>
 8016fce:	4631      	mov	r1, r6
 8016fd0:	4620      	mov	r0, r4
 8016fd2:	f000 f8a9 	bl	8017128 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	4639      	mov	r1, r7
 8016fda:	f000 f8a5 	bl	8017128 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016fde:	4620      	mov	r0, r4
 8016fe0:	b002      	add	sp, #8
 8016fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fe6:	bf00      	nop
 8016fe8:	0802c478 	.word	0x0802c478
 8016fec:	0802d2f0 	.word	0x0802d2f0
 8016ff0:	0802c66c 	.word	0x0802c66c
 8016ff4:	0801c24d 	.word	0x0801c24d

08016ff8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016ff8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016ffa:	2000      	movs	r0, #0
 8016ffc:	b12b      	cbz	r3, 801700a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016ffe:	b920      	cbnz	r0, 801700a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017000:	1a5a      	subs	r2, r3, r1
 8017002:	699b      	ldr	r3, [r3, #24]
 8017004:	4250      	negs	r0, r2
 8017006:	4150      	adcs	r0, r2
 8017008:	e7f8      	b.n	8016ffc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801700a:	4770      	bx	lr

0801700c <_ZN8touchgfx9Container9removeAllEv>:
 801700c:	2200      	movs	r2, #0
 801700e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017010:	b123      	cbz	r3, 801701c <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017012:	6999      	ldr	r1, [r3, #24]
 8017014:	6281      	str	r1, [r0, #40]	; 0x28
 8017016:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801701a:	e7f8      	b.n	801700e <_ZN8touchgfx9Container9removeAllEv+0x2>
 801701c:	4770      	bx	lr

0801701e <_ZN8touchgfx9Container6unlinkEv>:
 801701e:	2300      	movs	r3, #0
 8017020:	6283      	str	r3, [r0, #40]	; 0x28
 8017022:	4770      	bx	lr

08017024 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017028:	461f      	mov	r7, r3
 801702a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801702e:	460d      	mov	r5, r1
 8017030:	4616      	mov	r6, r2
 8017032:	b103      	cbz	r3, 8017036 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017034:	6038      	str	r0, [r7, #0]
 8017036:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017038:	b314      	cbz	r4, 8017080 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801703a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801703e:	b1eb      	cbz	r3, 801707c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017040:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017044:	428d      	cmp	r5, r1
 8017046:	db19      	blt.n	801707c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017048:	b289      	uxth	r1, r1
 801704a:	8923      	ldrh	r3, [r4, #8]
 801704c:	440b      	add	r3, r1
 801704e:	b21b      	sxth	r3, r3
 8017050:	429d      	cmp	r5, r3
 8017052:	da13      	bge.n	801707c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017054:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017058:	4296      	cmp	r6, r2
 801705a:	db0f      	blt.n	801707c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801705c:	b292      	uxth	r2, r2
 801705e:	8963      	ldrh	r3, [r4, #10]
 8017060:	4413      	add	r3, r2
 8017062:	b21b      	sxth	r3, r3
 8017064:	429e      	cmp	r6, r3
 8017066:	da09      	bge.n	801707c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017068:	6823      	ldr	r3, [r4, #0]
 801706a:	1ab2      	subs	r2, r6, r2
 801706c:	1a69      	subs	r1, r5, r1
 801706e:	4620      	mov	r0, r4
 8017070:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017074:	b212      	sxth	r2, r2
 8017076:	463b      	mov	r3, r7
 8017078:	b209      	sxth	r1, r1
 801707a:	47c0      	blx	r8
 801707c:	69a4      	ldr	r4, [r4, #24]
 801707e:	e7db      	b.n	8017038 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017084 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017084:	2200      	movs	r2, #0
 8017086:	8002      	strh	r2, [r0, #0]
 8017088:	8042      	strh	r2, [r0, #2]
 801708a:	8082      	strh	r2, [r0, #4]
 801708c:	80c2      	strh	r2, [r0, #6]
 801708e:	4770      	bx	lr

08017090 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017090:	b570      	push	{r4, r5, r6, lr}
 8017092:	460d      	mov	r5, r1
 8017094:	4616      	mov	r6, r2
 8017096:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017098:	b13c      	cbz	r4, 80170aa <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801709a:	6823      	ldr	r3, [r4, #0]
 801709c:	4620      	mov	r0, r4
 801709e:	4632      	mov	r2, r6
 80170a0:	4629      	mov	r1, r5
 80170a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170a4:	4798      	blx	r3
 80170a6:	69a4      	ldr	r4, [r4, #24]
 80170a8:	e7f6      	b.n	8017098 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80170aa:	bd70      	pop	{r4, r5, r6, pc}

080170ac <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80170ac:	b538      	push	{r3, r4, r5, lr}
 80170ae:	460d      	mov	r5, r1
 80170b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80170b2:	b134      	cbz	r4, 80170c2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80170b4:	682b      	ldr	r3, [r5, #0]
 80170b6:	4621      	mov	r1, r4
 80170b8:	4628      	mov	r0, r5
 80170ba:	689b      	ldr	r3, [r3, #8]
 80170bc:	4798      	blx	r3
 80170be:	69a4      	ldr	r4, [r4, #24]
 80170c0:	e7f7      	b.n	80170b2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80170c2:	bd38      	pop	{r3, r4, r5, pc}

080170c4 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80170c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80170c6:	b19b      	cbz	r3, 80170f0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80170c8:	428b      	cmp	r3, r1
 80170ca:	d109      	bne.n	80170e0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80170cc:	699a      	ldr	r2, [r3, #24]
 80170ce:	2100      	movs	r1, #0
 80170d0:	6159      	str	r1, [r3, #20]
 80170d2:	6282      	str	r2, [r0, #40]	; 0x28
 80170d4:	b902      	cbnz	r2, 80170d8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80170d6:	4770      	bx	lr
 80170d8:	6199      	str	r1, [r3, #24]
 80170da:	4770      	bx	lr
 80170dc:	4613      	mov	r3, r2
 80170de:	b13a      	cbz	r2, 80170f0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80170e0:	699a      	ldr	r2, [r3, #24]
 80170e2:	428a      	cmp	r2, r1
 80170e4:	d1fa      	bne.n	80170dc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80170e6:	698a      	ldr	r2, [r1, #24]
 80170e8:	619a      	str	r2, [r3, #24]
 80170ea:	2300      	movs	r3, #0
 80170ec:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80170f0:	4770      	bx	lr

080170f2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80170f2:	b410      	push	{r4}
 80170f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80170f6:	4604      	mov	r4, r0
 80170f8:	b92b      	cbnz	r3, 8017106 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80170fa:	6803      	ldr	r3, [r0, #0]
 80170fc:	4611      	mov	r1, r2
 80170fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017104:	4718      	bx	r3
 8017106:	b941      	cbnz	r1, 801711a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017108:	6193      	str	r3, [r2, #24]
 801710a:	6282      	str	r2, [r0, #40]	; 0x28
 801710c:	6154      	str	r4, [r2, #20]
 801710e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017112:	4770      	bx	lr
 8017114:	4603      	mov	r3, r0
 8017116:	2800      	cmp	r0, #0
 8017118:	d0f9      	beq.n	801710e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801711a:	4299      	cmp	r1, r3
 801711c:	6998      	ldr	r0, [r3, #24]
 801711e:	d1f9      	bne.n	8017114 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017120:	6190      	str	r0, [r2, #24]
 8017122:	618a      	str	r2, [r1, #24]
 8017124:	e7f2      	b.n	801710c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08017128 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017128:	4288      	cmp	r0, r1
 801712a:	b508      	push	{r3, lr}
 801712c:	d105      	bne.n	801713a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801712e:	4b11      	ldr	r3, [pc, #68]	; (8017174 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8017130:	2123      	movs	r1, #35	; 0x23
 8017132:	4a11      	ldr	r2, [pc, #68]	; (8017178 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017134:	4811      	ldr	r0, [pc, #68]	; (801717c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8017136:	f012 facd 	bl	80296d4 <__assert_func>
 801713a:	694b      	ldr	r3, [r1, #20]
 801713c:	b11b      	cbz	r3, 8017146 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801713e:	4b10      	ldr	r3, [pc, #64]	; (8017180 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017140:	2124      	movs	r1, #36	; 0x24
 8017142:	4a0d      	ldr	r2, [pc, #52]	; (8017178 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017144:	e7f6      	b.n	8017134 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017146:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801714a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801714c:	b913      	cbnz	r3, 8017154 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801714e:	6281      	str	r1, [r0, #40]	; 0x28
 8017150:	bd08      	pop	{r3, pc}
 8017152:	4613      	mov	r3, r2
 8017154:	699a      	ldr	r2, [r3, #24]
 8017156:	b12a      	cbz	r2, 8017164 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8017158:	428b      	cmp	r3, r1
 801715a:	d1fa      	bne.n	8017152 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801715c:	4b09      	ldr	r3, [pc, #36]	; (8017184 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801715e:	2135      	movs	r1, #53	; 0x35
 8017160:	4a05      	ldr	r2, [pc, #20]	; (8017178 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017162:	e7e7      	b.n	8017134 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017164:	428b      	cmp	r3, r1
 8017166:	d103      	bne.n	8017170 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8017168:	4b06      	ldr	r3, [pc, #24]	; (8017184 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801716a:	2138      	movs	r1, #56	; 0x38
 801716c:	4a02      	ldr	r2, [pc, #8]	; (8017178 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801716e:	e7e1      	b.n	8017134 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017170:	6199      	str	r1, [r3, #24]
 8017172:	e7ed      	b.n	8017150 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8017174:	0802c599 	.word	0x0802c599
 8017178:	0802c6ec 	.word	0x0802c6ec
 801717c:	0802c5c5 	.word	0x0802c5c5
 8017180:	0802c5f8 	.word	0x0802c5f8
 8017184:	0802c62e 	.word	0x0802c62e

08017188 <_ZN8touchgfx4RectaNERKS0_>:
 8017188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801718c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017190:	888c      	ldrh	r4, [r1, #4]
 8017192:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017196:	443c      	add	r4, r7
 8017198:	b2a4      	uxth	r4, r4
 801719a:	fa0f f884 	sxth.w	r8, r4
 801719e:	45c1      	cmp	r9, r8
 80171a0:	da2f      	bge.n	8017202 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80171a2:	8882      	ldrh	r2, [r0, #4]
 80171a4:	444a      	add	r2, r9
 80171a6:	b292      	uxth	r2, r2
 80171a8:	fa0f fe82 	sxth.w	lr, r2
 80171ac:	4577      	cmp	r7, lr
 80171ae:	da28      	bge.n	8017202 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80171b0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80171b4:	88cb      	ldrh	r3, [r1, #6]
 80171b6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80171ba:	442b      	add	r3, r5
 80171bc:	b21b      	sxth	r3, r3
 80171be:	429e      	cmp	r6, r3
 80171c0:	da1f      	bge.n	8017202 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80171c2:	88c3      	ldrh	r3, [r0, #6]
 80171c4:	4433      	add	r3, r6
 80171c6:	b29b      	uxth	r3, r3
 80171c8:	fa0f fc83 	sxth.w	ip, r3
 80171cc:	4565      	cmp	r5, ip
 80171ce:	da18      	bge.n	8017202 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80171d0:	454f      	cmp	r7, r9
 80171d2:	bfb8      	it	lt
 80171d4:	464f      	movlt	r7, r9
 80171d6:	42b5      	cmp	r5, r6
 80171d8:	bfb8      	it	lt
 80171da:	4635      	movlt	r5, r6
 80171dc:	45f0      	cmp	r8, lr
 80171de:	bfd8      	it	le
 80171e0:	4622      	movle	r2, r4
 80171e2:	1bd2      	subs	r2, r2, r7
 80171e4:	8082      	strh	r2, [r0, #4]
 80171e6:	884a      	ldrh	r2, [r1, #2]
 80171e8:	88c9      	ldrh	r1, [r1, #6]
 80171ea:	8007      	strh	r7, [r0, #0]
 80171ec:	440a      	add	r2, r1
 80171ee:	8045      	strh	r5, [r0, #2]
 80171f0:	b292      	uxth	r2, r2
 80171f2:	b211      	sxth	r1, r2
 80171f4:	458c      	cmp	ip, r1
 80171f6:	bfa8      	it	ge
 80171f8:	4613      	movge	r3, r2
 80171fa:	1b5b      	subs	r3, r3, r5
 80171fc:	80c3      	strh	r3, [r0, #6]
 80171fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017202:	2300      	movs	r3, #0
 8017204:	8003      	strh	r3, [r0, #0]
 8017206:	8043      	strh	r3, [r0, #2]
 8017208:	8083      	strh	r3, [r0, #4]
 801720a:	80c3      	strh	r3, [r0, #6]
 801720c:	e7f7      	b.n	80171fe <_ZN8touchgfx4RectaNERKS0_+0x76>

0801720e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801720e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017212:	2b00      	cmp	r3, #0
 8017214:	dd06      	ble.n	8017224 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017216:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801721a:	2800      	cmp	r0, #0
 801721c:	bfcc      	ite	gt
 801721e:	2000      	movgt	r0, #0
 8017220:	2001      	movle	r0, #1
 8017222:	4770      	bx	lr
 8017224:	2001      	movs	r0, #1
 8017226:	4770      	bx	lr

08017228 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801722c:	2300      	movs	r3, #0
 801722e:	4604      	mov	r4, r0
 8017230:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017232:	8003      	strh	r3, [r0, #0]
 8017234:	8043      	strh	r3, [r0, #2]
 8017236:	8083      	strh	r3, [r0, #4]
 8017238:	80c3      	strh	r3, [r0, #6]
 801723a:	2d00      	cmp	r5, #0
 801723c:	d040      	beq.n	80172c0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801723e:	1d28      	adds	r0, r5, #4
 8017240:	f7ff ffe5 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017244:	b988      	cbnz	r0, 801726a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017246:	4620      	mov	r0, r4
 8017248:	f7ff ffe1 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 801724c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017250:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017254:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017258:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801725c:	b138      	cbz	r0, 801726e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801725e:	8022      	strh	r2, [r4, #0]
 8017260:	8063      	strh	r3, [r4, #2]
 8017262:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017266:	f8a4 c006 	strh.w	ip, [r4, #6]
 801726a:	69ad      	ldr	r5, [r5, #24]
 801726c:	e7e5      	b.n	801723a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801726e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017272:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017276:	4290      	cmp	r0, r2
 8017278:	4607      	mov	r7, r0
 801727a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801727e:	460e      	mov	r6, r1
 8017280:	bfa8      	it	ge
 8017282:	4617      	movge	r7, r2
 8017284:	4299      	cmp	r1, r3
 8017286:	4472      	add	r2, lr
 8017288:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801728c:	bfa8      	it	ge
 801728e:	461e      	movge	r6, r3
 8017290:	4440      	add	r0, r8
 8017292:	4471      	add	r1, lr
 8017294:	4463      	add	r3, ip
 8017296:	b200      	sxth	r0, r0
 8017298:	8027      	strh	r7, [r4, #0]
 801729a:	b212      	sxth	r2, r2
 801729c:	8066      	strh	r6, [r4, #2]
 801729e:	b209      	sxth	r1, r1
 80172a0:	b21b      	sxth	r3, r3
 80172a2:	4290      	cmp	r0, r2
 80172a4:	bfac      	ite	ge
 80172a6:	ebc7 0200 	rsbge	r2, r7, r0
 80172aa:	ebc7 0202 	rsblt	r2, r7, r2
 80172ae:	4299      	cmp	r1, r3
 80172b0:	bfac      	ite	ge
 80172b2:	ebc6 0301 	rsbge	r3, r6, r1
 80172b6:	ebc6 0303 	rsblt	r3, r6, r3
 80172ba:	80a2      	strh	r2, [r4, #4]
 80172bc:	80e3      	strh	r3, [r4, #6]
 80172be:	e7d4      	b.n	801726a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80172c0:	4620      	mov	r0, r4
 80172c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080172c6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80172c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80172ca:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80172ce:	b383      	cbz	r3, 8017332 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80172d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80172d2:	b374      	cbz	r4, 8017332 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80172d4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80172d8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80172dc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80172e0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80172e4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80172e8:	b303      	cbz	r3, 801732c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80172ea:	4668      	mov	r0, sp
 80172ec:	1d21      	adds	r1, r4, #4
 80172ee:	f8ad 5000 	strh.w	r5, [sp]
 80172f2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80172f6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80172fa:	f8ad 8006 	strh.w	r8, [sp, #6]
 80172fe:	f7ff ff43 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 8017302:	4668      	mov	r0, sp
 8017304:	f7ff ff83 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017308:	b980      	cbnz	r0, 801732c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801730a:	f8bd 3000 	ldrh.w	r3, [sp]
 801730e:	4669      	mov	r1, sp
 8017310:	88a2      	ldrh	r2, [r4, #4]
 8017312:	4620      	mov	r0, r4
 8017314:	1a9b      	subs	r3, r3, r2
 8017316:	88e2      	ldrh	r2, [r4, #6]
 8017318:	f8ad 3000 	strh.w	r3, [sp]
 801731c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017320:	1a9b      	subs	r3, r3, r2
 8017322:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017326:	6823      	ldr	r3, [r4, #0]
 8017328:	689b      	ldr	r3, [r3, #8]
 801732a:	4798      	blx	r3
 801732c:	69a4      	ldr	r4, [r4, #24]
 801732e:	2c00      	cmp	r4, #0
 8017330:	d1d8      	bne.n	80172e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017332:	b002      	add	sp, #8
 8017334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017338 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017338:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801733a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801733e:	460d      	mov	r5, r1
 8017340:	4616      	mov	r6, r2
 8017342:	b323      	cbz	r3, 801738e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017344:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017346:	b314      	cbz	r4, 801738e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017348:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801734c:	b1eb      	cbz	r3, 801738a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801734e:	6828      	ldr	r0, [r5, #0]
 8017350:	466b      	mov	r3, sp
 8017352:	6869      	ldr	r1, [r5, #4]
 8017354:	c303      	stmia	r3!, {r0, r1}
 8017356:	4668      	mov	r0, sp
 8017358:	1d21      	adds	r1, r4, #4
 801735a:	f7ff ff15 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 801735e:	4668      	mov	r0, sp
 8017360:	f7ff ff55 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017364:	b988      	cbnz	r0, 801738a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017366:	f8bd 3000 	ldrh.w	r3, [sp]
 801736a:	4669      	mov	r1, sp
 801736c:	88a2      	ldrh	r2, [r4, #4]
 801736e:	4620      	mov	r0, r4
 8017370:	1a9b      	subs	r3, r3, r2
 8017372:	88e2      	ldrh	r2, [r4, #6]
 8017374:	f8ad 3000 	strh.w	r3, [sp]
 8017378:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801737c:	1a9b      	subs	r3, r3, r2
 801737e:	4632      	mov	r2, r6
 8017380:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017384:	6823      	ldr	r3, [r4, #0]
 8017386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017388:	4798      	blx	r3
 801738a:	69a4      	ldr	r4, [r4, #24]
 801738c:	e7db      	b.n	8017346 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801738e:	b002      	add	sp, #8
 8017390:	bd70      	pop	{r4, r5, r6, pc}

08017392 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8017392:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017396:	4770      	bx	lr

08017398 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8017398:	4770      	bx	lr

0801739a <_ZN8touchgfx3HAL10FlushCacheEv>:
 801739a:	4770      	bx	lr

0801739c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801739c:	6803      	ldr	r3, [r0, #0]
 801739e:	b513      	push	{r0, r1, r4, lr}
 80173a0:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80173a4:	2300      	movs	r3, #0
 80173a6:	e9cd 3300 	strd	r3, r3, [sp]
 80173aa:	466b      	mov	r3, sp
 80173ac:	47a0      	blx	r4
 80173ae:	b002      	add	sp, #8
 80173b0:	bd10      	pop	{r4, pc}

080173b2 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80173b2:	2301      	movs	r3, #1
 80173b4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80173b8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80173bc:	4770      	bx	lr

080173be <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80173be:	2301      	movs	r3, #1
 80173c0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80173c4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80173c8:	4770      	bx	lr

080173ca <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80173ca:	6843      	ldr	r3, [r0, #4]
 80173cc:	2201      	movs	r2, #1
 80173ce:	725a      	strb	r2, [r3, #9]
 80173d0:	6840      	ldr	r0, [r0, #4]
 80173d2:	6803      	ldr	r3, [r0, #0]
 80173d4:	691b      	ldr	r3, [r3, #16]
 80173d6:	4718      	bx	r3

080173d8 <_ZN8touchgfx3HAL8flushDMAEv>:
 80173d8:	6840      	ldr	r0, [r0, #4]
 80173da:	6803      	ldr	r3, [r0, #0]
 80173dc:	689b      	ldr	r3, [r3, #8]
 80173de:	4718      	bx	r3

080173e0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80173e0:	4b04      	ldr	r3, [pc, #16]	; (80173f4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	b123      	cbz	r3, 80173f0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80173e6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80173ea:	f080 0001 	eor.w	r0, r0, #1
 80173ee:	4770      	bx	lr
 80173f0:	2001      	movs	r0, #1
 80173f2:	4770      	bx	lr
 80173f4:	20005942 	.word	0x20005942

080173f8 <_ZN8touchgfx3HAL8endFrameEv>:
 80173f8:	b510      	push	{r4, lr}
 80173fa:	4604      	mov	r4, r0
 80173fc:	6840      	ldr	r0, [r0, #4]
 80173fe:	6803      	ldr	r3, [r0, #0]
 8017400:	689b      	ldr	r3, [r3, #8]
 8017402:	4798      	blx	r3
 8017404:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8017408:	b113      	cbz	r3, 8017410 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801740a:	2301      	movs	r3, #1
 801740c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017410:	bd10      	pop	{r4, pc}

08017412 <_ZN8touchgfx3HAL9taskEntryEv>:
 8017412:	b508      	push	{r3, lr}
 8017414:	6803      	ldr	r3, [r0, #0]
 8017416:	4604      	mov	r4, r0
 8017418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801741a:	4798      	blx	r3
 801741c:	6823      	ldr	r3, [r4, #0]
 801741e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017420:	4620      	mov	r0, r4
 8017422:	4798      	blx	r3
 8017424:	f7fd ff44 	bl	80152b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8017428:	6823      	ldr	r3, [r4, #0]
 801742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801742c:	e7f8      	b.n	8017420 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08017430 <_ZN8touchgfx3HAL4tickEv>:
 8017430:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017432:	6803      	ldr	r3, [r0, #0]
 8017434:	4604      	mov	r4, r0
 8017436:	4d5c      	ldr	r5, [pc, #368]	; (80175a8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8017438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801743c:	4798      	blx	r3
 801743e:	2800      	cmp	r0, #0
 8017440:	f000 8097 	beq.w	8017572 <_ZN8touchgfx3HAL4tickEv+0x142>
 8017444:	2001      	movs	r0, #1
 8017446:	2600      	movs	r6, #0
 8017448:	f7fd fca8 	bl	8014d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801744c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017450:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017454:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017458:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801745c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017460:	b133      	cbz	r3, 8017470 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017462:	6823      	ldr	r3, [r4, #0]
 8017464:	4620      	mov	r0, r4
 8017466:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801746a:	4798      	blx	r3
 801746c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017470:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017474:	2601      	movs	r6, #1
 8017476:	6862      	ldr	r2, [r4, #4]
 8017478:	f083 0301 	eor.w	r3, r3, #1
 801747c:	702e      	strb	r6, [r5, #0]
 801747e:	7253      	strb	r3, [r2, #9]
 8017480:	f003 f9be 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 8017484:	6803      	ldr	r3, [r0, #0]
 8017486:	4631      	mov	r1, r6
 8017488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801748a:	4798      	blx	r3
 801748c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017490:	b90b      	cbnz	r3, 8017496 <_ZN8touchgfx3HAL4tickEv+0x66>
 8017492:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017496:	f003 f9b3 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 801749a:	6803      	ldr	r3, [r0, #0]
 801749c:	695b      	ldr	r3, [r3, #20]
 801749e:	4798      	blx	r3
 80174a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174a2:	6803      	ldr	r3, [r0, #0]
 80174a4:	691b      	ldr	r3, [r3, #16]
 80174a6:	4798      	blx	r3
 80174a8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80174ac:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80174b0:	3b01      	subs	r3, #1
 80174b2:	b2db      	uxtb	r3, r3
 80174b4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80174b8:	b10a      	cbz	r2, 80174be <_ZN8touchgfx3HAL4tickEv+0x8e>
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d1eb      	bne.n	8017496 <_ZN8touchgfx3HAL4tickEv+0x66>
 80174be:	4a3b      	ldr	r2, [pc, #236]	; (80175ac <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80174c0:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80174c4:	7813      	ldrb	r3, [r2, #0]
 80174c6:	3301      	adds	r3, #1
 80174c8:	b25b      	sxtb	r3, r3
 80174ca:	4299      	cmp	r1, r3
 80174cc:	7013      	strb	r3, [r2, #0]
 80174ce:	dc10      	bgt.n	80174f2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80174d0:	2300      	movs	r3, #0
 80174d2:	68e0      	ldr	r0, [r4, #12]
 80174d4:	a902      	add	r1, sp, #8
 80174d6:	7013      	strb	r3, [r2, #0]
 80174d8:	aa03      	add	r2, sp, #12
 80174da:	6803      	ldr	r3, [r0, #0]
 80174dc:	68db      	ldr	r3, [r3, #12]
 80174de:	4798      	blx	r3
 80174e0:	6823      	ldr	r3, [r4, #0]
 80174e2:	2800      	cmp	r0, #0
 80174e4:	d051      	beq.n	801758a <_ZN8touchgfx3HAL4tickEv+0x15a>
 80174e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80174ea:	4620      	mov	r0, r4
 80174ec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80174f0:	4798      	blx	r3
 80174f2:	2300      	movs	r3, #0
 80174f4:	6960      	ldr	r0, [r4, #20]
 80174f6:	f88d 3007 	strb.w	r3, [sp, #7]
 80174fa:	b158      	cbz	r0, 8017514 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80174fc:	6803      	ldr	r3, [r0, #0]
 80174fe:	f10d 0107 	add.w	r1, sp, #7
 8017502:	68db      	ldr	r3, [r3, #12]
 8017504:	4798      	blx	r3
 8017506:	b128      	cbz	r0, 8017514 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8017508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801750a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801750e:	6803      	ldr	r3, [r0, #0]
 8017510:	68db      	ldr	r3, [r3, #12]
 8017512:	4798      	blx	r3
 8017514:	f104 001c 	add.w	r0, r4, #28
 8017518:	f011 fff4 	bl	8029504 <_ZN8touchgfx8Gestures4tickEv>
 801751c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8017520:	b30b      	cbz	r3, 8017566 <_ZN8touchgfx3HAL4tickEv+0x136>
 8017522:	6920      	ldr	r0, [r4, #16]
 8017524:	6803      	ldr	r3, [r0, #0]
 8017526:	691b      	ldr	r3, [r3, #16]
 8017528:	4798      	blx	r3
 801752a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801752c:	4606      	mov	r6, r0
 801752e:	b903      	cbnz	r3, 8017532 <_ZN8touchgfx3HAL4tickEv+0x102>
 8017530:	6720      	str	r0, [r4, #112]	; 0x70
 8017532:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017534:	4a1e      	ldr	r2, [pc, #120]	; (80175b0 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8017536:	1af3      	subs	r3, r6, r3
 8017538:	4293      	cmp	r3, r2
 801753a:	d914      	bls.n	8017566 <_ZN8touchgfx3HAL4tickEv+0x136>
 801753c:	6920      	ldr	r0, [r4, #16]
 801753e:	6803      	ldr	r3, [r0, #0]
 8017540:	699b      	ldr	r3, [r3, #24]
 8017542:	4798      	blx	r3
 8017544:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017546:	2264      	movs	r2, #100	; 0x64
 8017548:	1af3      	subs	r3, r6, r3
 801754a:	fbb3 f3f2 	udiv	r3, r3, r2
 801754e:	fbb0 f0f3 	udiv	r0, r0, r3
 8017552:	2800      	cmp	r0, #0
 8017554:	dc1e      	bgt.n	8017594 <_ZN8touchgfx3HAL4tickEv+0x164>
 8017556:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801755a:	6920      	ldr	r0, [r4, #16]
 801755c:	2100      	movs	r1, #0
 801755e:	6803      	ldr	r3, [r0, #0]
 8017560:	69db      	ldr	r3, [r3, #28]
 8017562:	4798      	blx	r3
 8017564:	6726      	str	r6, [r4, #112]	; 0x70
 8017566:	f003 f94b 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 801756a:	6803      	ldr	r3, [r0, #0]
 801756c:	2100      	movs	r1, #0
 801756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017570:	4798      	blx	r3
 8017572:	6823      	ldr	r3, [r4, #0]
 8017574:	4620      	mov	r0, r4
 8017576:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801757a:	4798      	blx	r3
 801757c:	2001      	movs	r0, #1
 801757e:	f7fd fc18 	bl	8014db2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017582:	2300      	movs	r3, #0
 8017584:	702b      	strb	r3, [r5, #0]
 8017586:	b004      	add	sp, #16
 8017588:	bd70      	pop	{r4, r5, r6, pc}
 801758a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801758e:	4620      	mov	r0, r4
 8017590:	4798      	blx	r3
 8017592:	e7ae      	b.n	80174f2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017594:	2863      	cmp	r0, #99	; 0x63
 8017596:	bfcb      	itete	gt
 8017598:	2300      	movgt	r3, #0
 801759a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801759e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80175a2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80175a6:	e7d8      	b.n	801755a <_ZN8touchgfx3HAL4tickEv+0x12a>
 80175a8:	20005948 	.word	0x20005948
 80175ac:	20005949 	.word	0x20005949
 80175b0:	05f5e100 	.word	0x05f5e100

080175b4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80175b4:	f7fd be48 	b.w	8015248 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080175b8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80175b8:	6581      	str	r1, [r0, #88]	; 0x58
 80175ba:	301c      	adds	r0, #28
 80175bc:	f011 bfa0 	b.w	8029500 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080175c0 <_ZN8touchgfx3HAL5touchEll>:
 80175c0:	b530      	push	{r4, r5, lr}
 80175c2:	b087      	sub	sp, #28
 80175c4:	4604      	mov	r4, r0
 80175c6:	a804      	add	r0, sp, #16
 80175c8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80175cc:	f002 fee2 	bl	801a394 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80175d0:	9b04      	ldr	r3, [sp, #16]
 80175d2:	a906      	add	r1, sp, #24
 80175d4:	a803      	add	r0, sp, #12
 80175d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80175da:	9b05      	ldr	r3, [sp, #20]
 80175dc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80175e0:	f002 ff16 	bl	801a410 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80175e4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80175e8:	f104 001c 	add.w	r0, r4, #28
 80175ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80175f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80175f4:	b189      	cbz	r1, 801761a <_ZN8touchgfx3HAL5touchEll+0x5a>
 80175f6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80175fa:	9300      	str	r3, [sp, #0]
 80175fc:	4613      	mov	r3, r2
 80175fe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017602:	462a      	mov	r2, r5
 8017604:	f011 ff8c 	bl	8029520 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017608:	b128      	cbz	r0, 8017616 <_ZN8touchgfx3HAL5touchEll+0x56>
 801760a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801760e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017610:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017614:	6623      	str	r3, [r4, #96]	; 0x60
 8017616:	b007      	add	sp, #28
 8017618:	bd30      	pop	{r4, r5, pc}
 801761a:	f011 ffc5 	bl	80295a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801761e:	2301      	movs	r3, #1
 8017620:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017624:	e7f1      	b.n	801760a <_ZN8touchgfx3HAL5touchEll+0x4a>

08017626 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017626:	b570      	push	{r4, r5, r6, lr}
 8017628:	2b00      	cmp	r3, #0
 801762a:	d050      	beq.n	80176ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801762c:	ea81 0002 	eor.w	r0, r1, r2
 8017630:	07c6      	lsls	r6, r0, #31
 8017632:	d508      	bpl.n	8017646 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017634:	3a01      	subs	r2, #1
 8017636:	18cc      	adds	r4, r1, r3
 8017638:	42a1      	cmp	r1, r4
 801763a:	d048      	beq.n	80176ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801763c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017640:	f801 0b01 	strb.w	r0, [r1], #1
 8017644:	e7f8      	b.n	8017638 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017646:	07d5      	lsls	r5, r2, #31
 8017648:	bf42      	ittt	mi
 801764a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801764e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017652:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017656:	2b01      	cmp	r3, #1
 8017658:	d915      	bls.n	8017686 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801765a:	ea82 0001 	eor.w	r0, r2, r1
 801765e:	0784      	lsls	r4, r0, #30
 8017660:	d02d      	beq.n	80176be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8017662:	1e94      	subs	r4, r2, #2
 8017664:	4608      	mov	r0, r1
 8017666:	18ce      	adds	r6, r1, r3
 8017668:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801766c:	f820 5b02 	strh.w	r5, [r0], #2
 8017670:	1a35      	subs	r5, r6, r0
 8017672:	2d01      	cmp	r5, #1
 8017674:	d8f8      	bhi.n	8017668 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8017676:	1e98      	subs	r0, r3, #2
 8017678:	f003 0301 	and.w	r3, r3, #1
 801767c:	f020 0001 	bic.w	r0, r0, #1
 8017680:	3002      	adds	r0, #2
 8017682:	4401      	add	r1, r0
 8017684:	4402      	add	r2, r0
 8017686:	1f14      	subs	r4, r2, #4
 8017688:	4608      	mov	r0, r1
 801768a:	18ce      	adds	r6, r1, r3
 801768c:	1a35      	subs	r5, r6, r0
 801768e:	2d03      	cmp	r5, #3
 8017690:	d810      	bhi.n	80176b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8017692:	089c      	lsrs	r4, r3, #2
 8017694:	00a0      	lsls	r0, r4, #2
 8017696:	4401      	add	r1, r0
 8017698:	3801      	subs	r0, #1
 801769a:	4402      	add	r2, r0
 801769c:	f06f 0003 	mvn.w	r0, #3
 80176a0:	fb00 3404 	mla	r4, r0, r4, r3
 80176a4:	440c      	add	r4, r1
 80176a6:	42a1      	cmp	r1, r4
 80176a8:	d011      	beq.n	80176ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80176aa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80176ae:	f801 3b01 	strb.w	r3, [r1], #1
 80176b2:	e7f8      	b.n	80176a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 80176b4:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80176b8:	f840 5b04 	str.w	r5, [r0], #4
 80176bc:	e7e6      	b.n	801768c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80176be:	0790      	lsls	r0, r2, #30
 80176c0:	d0e1      	beq.n	8017686 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80176c2:	f832 0b02 	ldrh.w	r0, [r2], #2
 80176c6:	3b02      	subs	r3, #2
 80176c8:	f821 0b02 	strh.w	r0, [r1], #2
 80176cc:	e7db      	b.n	8017686 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80176ce:	2001      	movs	r0, #1
 80176d0:	bd70      	pop	{r4, r5, r6, pc}

080176d2 <_ZN8touchgfx3HAL7noTouchEv>:
 80176d2:	b510      	push	{r4, lr}
 80176d4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80176d8:	4604      	mov	r4, r0
 80176da:	b153      	cbz	r3, 80176f2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80176dc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80176e0:	2101      	movs	r1, #1
 80176e2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80176e6:	301c      	adds	r0, #28
 80176e8:	f011 ff5e 	bl	80295a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80176ec:	2300      	movs	r3, #0
 80176ee:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80176f2:	bd10      	pop	{r4, pc}

080176f4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80176f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176f8:	4604      	mov	r4, r0
 80176fa:	6980      	ldr	r0, [r0, #24]
 80176fc:	b085      	sub	sp, #20
 80176fe:	460f      	mov	r7, r1
 8017700:	4690      	mov	r8, r2
 8017702:	4699      	mov	r9, r3
 8017704:	b930      	cbnz	r0, 8017714 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8017706:	4b1c      	ldr	r3, [pc, #112]	; (8017778 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8017708:	f44f 71a1 	mov.w	r1, #322	; 0x142
 801770c:	4a1b      	ldr	r2, [pc, #108]	; (801777c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801770e:	481c      	ldr	r0, [pc, #112]	; (8017780 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8017710:	f011 ffe0 	bl	80296d4 <__assert_func>
 8017714:	ad04      	add	r5, sp, #16
 8017716:	2600      	movs	r6, #0
 8017718:	f845 6d04 	str.w	r6, [r5, #-4]!
 801771c:	6806      	ldr	r6, [r0, #0]
 801771e:	9501      	str	r5, [sp, #4]
 8017720:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8017724:	9500      	str	r5, [sp, #0]
 8017726:	6835      	ldr	r5, [r6, #0]
 8017728:	47a8      	blx	r5
 801772a:	4d16      	ldr	r5, [pc, #88]	; (8017784 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801772c:	4606      	mov	r6, r0
 801772e:	f8a5 9000 	strh.w	r9, [r5]
 8017732:	f7fa fcd1 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 8017736:	6803      	ldr	r3, [r0, #0]
 8017738:	6a1b      	ldr	r3, [r3, #32]
 801773a:	4798      	blx	r3
 801773c:	2801      	cmp	r0, #1
 801773e:	d012      	beq.n	8017766 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8017740:	d306      	bcc.n	8017750 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8017742:	280d      	cmp	r0, #13
 8017744:	d80b      	bhi.n	801775e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017746:	4b10      	ldr	r3, [pc, #64]	; (8017788 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017748:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801774c:	4a0b      	ldr	r2, [pc, #44]	; (801777c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801774e:	e7de      	b.n	801770e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017750:	882b      	ldrh	r3, [r5, #0]
 8017752:	fb08 7203 	mla	r2, r8, r3, r7
 8017756:	9b03      	ldr	r3, [sp, #12]
 8017758:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801775c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801775e:	4630      	mov	r0, r6
 8017760:	b005      	add	sp, #20
 8017762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017766:	882a      	ldrh	r2, [r5, #0]
 8017768:	9b03      	ldr	r3, [sp, #12]
 801776a:	fb08 7202 	mla	r2, r8, r2, r7
 801776e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017772:	1a9a      	subs	r2, r3, r2
 8017774:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017776:	e7f2      	b.n	801775e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017778:	0802c795 	.word	0x0802c795
 801777c:	0802caae 	.word	0x0802caae
 8017780:	0802c7da 	.word	0x0802c7da
 8017784:	2000593e 	.word	0x2000593e
 8017788:	0802c800 	.word	0x0802c800

0801778c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801778c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017790:	4698      	mov	r8, r3
 8017792:	6803      	ldr	r3, [r0, #0]
 8017794:	b087      	sub	sp, #28
 8017796:	460e      	mov	r6, r1
 8017798:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801779a:	4617      	mov	r7, r2
 801779c:	4b0d      	ldr	r3, [pc, #52]	; (80177d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801779e:	4604      	mov	r4, r0
 80177a0:	f8b3 9000 	ldrh.w	r9, [r3]
 80177a4:	f7fa fc98 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 80177a8:	6803      	ldr	r3, [r0, #0]
 80177aa:	6a1b      	ldr	r3, [r3, #32]
 80177ac:	4798      	blx	r3
 80177ae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80177b2:	463a      	mov	r2, r7
 80177b4:	4631      	mov	r1, r6
 80177b6:	9302      	str	r3, [sp, #8]
 80177b8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80177bc:	9301      	str	r3, [sp, #4]
 80177be:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80177c2:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80177c6:	9300      	str	r3, [sp, #0]
 80177c8:	4620      	mov	r0, r4
 80177ca:	4643      	mov	r3, r8
 80177cc:	47a8      	blx	r5
 80177ce:	b007      	add	sp, #28
 80177d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177d4:	2000593e 	.word	0x2000593e

080177d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80177d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177dc:	4604      	mov	r4, r0
 80177de:	b08b      	sub	sp, #44	; 0x2c
 80177e0:	4610      	mov	r0, r2
 80177e2:	460d      	mov	r5, r1
 80177e4:	4691      	mov	r9, r2
 80177e6:	461e      	mov	r6, r3
 80177e8:	f006 f890 	bl	801d90c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80177ec:	2800      	cmp	r0, #0
 80177ee:	f000 80a0 	beq.w	8017932 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80177f2:	6823      	ldr	r3, [r4, #0]
 80177f4:	4620      	mov	r0, r4
 80177f6:	f8df b170 	ldr.w	fp, [pc, #368]	; 8017968 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 80177fa:	af0a      	add	r7, sp, #40	; 0x28
 80177fc:	6a1b      	ldr	r3, [r3, #32]
 80177fe:	4798      	blx	r3
 8017800:	6823      	ldr	r3, [r4, #0]
 8017802:	4620      	mov	r0, r4
 8017804:	f8df a164 	ldr.w	sl, [pc, #356]	; 801796c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 8017808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801780a:	4798      	blx	r3
 801780c:	f8bb 3000 	ldrh.w	r3, [fp]
 8017810:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 8017814:	4638      	mov	r0, r7
 8017816:	9301      	str	r3, [sp, #4]
 8017818:	f8ba 3000 	ldrh.w	r3, [sl]
 801781c:	9302      	str	r3, [sp, #8]
 801781e:	4b4f      	ldr	r3, [pc, #316]	; (801795c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8017820:	881a      	ldrh	r2, [r3, #0]
 8017822:	4698      	mov	r8, r3
 8017824:	9203      	str	r2, [sp, #12]
 8017826:	4a4e      	ldr	r2, [pc, #312]	; (8017960 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8017828:	8812      	ldrh	r2, [r2, #0]
 801782a:	9204      	str	r2, [sp, #16]
 801782c:	4a4d      	ldr	r2, [pc, #308]	; (8017964 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 801782e:	7812      	ldrb	r2, [r2, #0]
 8017830:	2a00      	cmp	r2, #0
 8017832:	f040 8081 	bne.w	8017938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 8017836:	f006 f923 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801783a:	f8ab 0000 	strh.w	r0, [fp]
 801783e:	4638      	mov	r0, r7
 8017840:	f006 f958 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017844:	f8aa 0000 	strh.w	r0, [sl]
 8017848:	4638      	mov	r0, r7
 801784a:	f006 f919 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801784e:	f8a8 0000 	strh.w	r0, [r8]
 8017852:	4638      	mov	r0, r7
 8017854:	f006 f94e 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017858:	4b41      	ldr	r3, [pc, #260]	; (8017960 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 801785a:	8018      	strh	r0, [r3, #0]
 801785c:	4648      	mov	r0, r9
 801785e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017862:	f006 f853 	bl	801d90c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017866:	2200      	movs	r2, #0
 8017868:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801786c:	4611      	mov	r1, r2
 801786e:	4628      	mov	r0, r5
 8017870:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017874:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017878:	f7fa fb2b 	bl	8011ed2 <_ZN8touchgfx8Drawable5setXYEss>
 801787c:	2301      	movs	r3, #1
 801787e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017882:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017886:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801788a:	2b00      	cmp	r3, #0
 801788c:	dd5c      	ble.n	8017948 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 801788e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017892:	2b00      	cmp	r3, #0
 8017894:	dd58      	ble.n	8017948 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8017896:	462a      	mov	r2, r5
 8017898:	ab08      	add	r3, sp, #32
 801789a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801789e:	6851      	ldr	r1, [r2, #4]
 80178a0:	c303      	stmia	r3!, {r0, r1}
 80178a2:	4631      	mov	r1, r6
 80178a4:	a808      	add	r0, sp, #32
 80178a6:	f7ff fc6f 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 80178aa:	a807      	add	r0, sp, #28
 80178ac:	f006 fa7a 	bl	801dda4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80178b0:	4606      	mov	r6, r0
 80178b2:	f7fa fc11 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 80178b6:	6803      	ldr	r3, [r0, #0]
 80178b8:	6a1b      	ldr	r3, [r3, #32]
 80178ba:	4798      	blx	r3
 80178bc:	4286      	cmp	r6, r0
 80178be:	d04a      	beq.n	8017956 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 80178c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80178c2:	b150      	cbz	r0, 80178da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 80178c4:	a807      	add	r0, sp, #28
 80178c6:	f006 fa6d 	bl	801dda4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80178ca:	4606      	mov	r6, r0
 80178cc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80178ce:	6803      	ldr	r3, [r0, #0]
 80178d0:	6a1b      	ldr	r3, [r3, #32]
 80178d2:	4798      	blx	r3
 80178d4:	1a33      	subs	r3, r6, r0
 80178d6:	4258      	negs	r0, r3
 80178d8:	4158      	adcs	r0, r3
 80178da:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80178de:	2600      	movs	r6, #0
 80178e0:	696b      	ldr	r3, [r5, #20]
 80178e2:	a908      	add	r1, sp, #32
 80178e4:	682a      	ldr	r2, [r5, #0]
 80178e6:	4628      	mov	r0, r5
 80178e8:	9305      	str	r3, [sp, #20]
 80178ea:	616e      	str	r6, [r5, #20]
 80178ec:	6892      	ldr	r2, [r2, #8]
 80178ee:	4790      	blx	r2
 80178f0:	9b05      	ldr	r3, [sp, #20]
 80178f2:	4652      	mov	r2, sl
 80178f4:	4649      	mov	r1, r9
 80178f6:	616b      	str	r3, [r5, #20]
 80178f8:	4628      	mov	r0, r5
 80178fa:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80178fe:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017902:	f7fa fae6 	bl	8011ed2 <_ZN8touchgfx8Drawable5setXYEss>
 8017906:	9a01      	ldr	r2, [sp, #4]
 8017908:	4b17      	ldr	r3, [pc, #92]	; (8017968 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 801790a:	4620      	mov	r0, r4
 801790c:	801a      	strh	r2, [r3, #0]
 801790e:	9a02      	ldr	r2, [sp, #8]
 8017910:	4b16      	ldr	r3, [pc, #88]	; (801796c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 8017912:	801a      	strh	r2, [r3, #0]
 8017914:	9a03      	ldr	r2, [sp, #12]
 8017916:	4b11      	ldr	r3, [pc, #68]	; (801795c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8017918:	801a      	strh	r2, [r3, #0]
 801791a:	4b11      	ldr	r3, [pc, #68]	; (8017960 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 801791c:	9a04      	ldr	r2, [sp, #16]
 801791e:	801a      	strh	r2, [r3, #0]
 8017920:	6823      	ldr	r3, [r4, #0]
 8017922:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017926:	6a1b      	ldr	r3, [r3, #32]
 8017928:	4798      	blx	r3
 801792a:	6823      	ldr	r3, [r4, #0]
 801792c:	4620      	mov	r0, r4
 801792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017930:	4798      	blx	r3
 8017932:	b00b      	add	sp, #44	; 0x2c
 8017934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017938:	f006 f8dc 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801793c:	f8ab 0000 	strh.w	r0, [fp]
 8017940:	4638      	mov	r0, r7
 8017942:	f006 f89d 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017946:	e77d      	b.n	8017844 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8017948:	462a      	mov	r2, r5
 801794a:	ab08      	add	r3, sp, #32
 801794c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017950:	6851      	ldr	r1, [r2, #4]
 8017952:	c303      	stmia	r3!, {r0, r1}
 8017954:	e7a9      	b.n	80178aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 8017956:	2000      	movs	r0, #0
 8017958:	e7bf      	b.n	80178da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 801795a:	bf00      	nop
 801795c:	20005938 	.word	0x20005938
 8017960:	2000593a 	.word	0x2000593a
 8017964:	2000593c 	.word	0x2000593c
 8017968:	2000593e 	.word	0x2000593e
 801796c:	20005940 	.word	0x20005940

08017970 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017970:	4b07      	ldr	r3, [pc, #28]	; (8017990 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017972:	b510      	push	{r4, lr}
 8017974:	781b      	ldrb	r3, [r3, #0]
 8017976:	4604      	mov	r4, r0
 8017978:	b13b      	cbz	r3, 801798a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801797a:	6803      	ldr	r3, [r0, #0]
 801797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801797e:	4798      	blx	r3
 8017980:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017982:	4283      	cmp	r3, r0
 8017984:	d101      	bne.n	801798a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017986:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017988:	bd10      	pop	{r4, pc}
 801798a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801798c:	e7fc      	b.n	8017988 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801798e:	bf00      	nop
 8017990:	20005942 	.word	0x20005942

08017994 <_ZN8touchgfx3HAL10initializeEv>:
 8017994:	b510      	push	{r4, lr}
 8017996:	4604      	mov	r4, r0
 8017998:	f7fd fc14 	bl	80151c4 <_ZN8touchgfx10OSWrappers10initializeEv>
 801799c:	6860      	ldr	r0, [r4, #4]
 801799e:	6803      	ldr	r3, [r0, #0]
 80179a0:	68db      	ldr	r3, [r3, #12]
 80179a2:	4798      	blx	r3
 80179a4:	68e0      	ldr	r0, [r4, #12]
 80179a6:	6803      	ldr	r3, [r0, #0]
 80179a8:	689b      	ldr	r3, [r3, #8]
 80179aa:	4798      	blx	r3
 80179ac:	6823      	ldr	r3, [r4, #0]
 80179ae:	4620      	mov	r0, r4
 80179b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80179b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179b6:	4718      	bx	r3

080179b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80179b8:	b508      	push	{r3, lr}
 80179ba:	290d      	cmp	r1, #13
 80179bc:	d817      	bhi.n	80179ee <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80179be:	e8df f001 	tbb	[pc, r1]
 80179c2:	090b      	.short	0x090b
 80179c4:	0d0d0d07 	.word	0x0d0d0d07
 80179c8:	1414140d 	.word	0x1414140d
 80179cc:	0d0d1414 	.word	0x0d0d1414
 80179d0:	2020      	movs	r0, #32
 80179d2:	bd08      	pop	{r3, pc}
 80179d4:	2018      	movs	r0, #24
 80179d6:	e7fc      	b.n	80179d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80179d8:	2010      	movs	r0, #16
 80179da:	e7fa      	b.n	80179d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80179dc:	4b05      	ldr	r3, [pc, #20]	; (80179f4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80179de:	f44f 7111 	mov.w	r1, #580	; 0x244
 80179e2:	4a05      	ldr	r2, [pc, #20]	; (80179f8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80179e4:	4805      	ldr	r0, [pc, #20]	; (80179fc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80179e6:	f011 fe75 	bl	80296d4 <__assert_func>
 80179ea:	2008      	movs	r0, #8
 80179ec:	e7f1      	b.n	80179d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80179ee:	2000      	movs	r0, #0
 80179f0:	e7ef      	b.n	80179d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80179f2:	bf00      	nop
 80179f4:	0802c8d3 	.word	0x0802c8d3
 80179f8:	0802cc70 	.word	0x0802cc70
 80179fc:	0802c7da 	.word	0x0802c7da

08017a00 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8017a00:	b570      	push	{r4, r5, r6, lr}
 8017a02:	460d      	mov	r5, r1
 8017a04:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8017a08:	4616      	mov	r6, r2
 8017a0a:	461c      	mov	r4, r3
 8017a0c:	f7ff ffd4 	bl	80179b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8017a10:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8017a14:	10c0      	asrs	r0, r0, #3
 8017a16:	fb06 5101 	mla	r1, r6, r1, r5
 8017a1a:	fb00 4001 	mla	r0, r0, r1, r4
 8017a1e:	bd70      	pop	{r4, r5, r6, pc}

08017a20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8017a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a24:	b08a      	sub	sp, #40	; 0x28
 8017a26:	f04f 0c00 	mov.w	ip, #0
 8017a2a:	4604      	mov	r4, r0
 8017a2c:	469a      	mov	sl, r3
 8017a2e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8017a32:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8017a36:	f1b8 0f02 	cmp.w	r8, #2
 8017a3a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8017a3e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017a42:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017a46:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8017a4a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8017a4e:	f8cd c020 	str.w	ip, [sp, #32]
 8017a52:	d030      	beq.n	8017ab6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8017a54:	2bff      	cmp	r3, #255	; 0xff
 8017a56:	d12c      	bne.n	8017ab2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8017a58:	4560      	cmp	r0, ip
 8017a5a:	bf14      	ite	ne
 8017a5c:	2004      	movne	r0, #4
 8017a5e:	2001      	moveq	r0, #1
 8017a60:	9204      	str	r2, [sp, #16]
 8017a62:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8017a66:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017a6a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017a6e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017a72:	f8ad 501a 	strh.w	r5, [sp, #26]
 8017a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017a7a:	4620      	mov	r0, r4
 8017a7c:	f7ff ff78 	bl	8017970 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017a80:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8017a84:	4603      	mov	r3, r0
 8017a86:	4651      	mov	r1, sl
 8017a88:	4620      	mov	r0, r4
 8017a8a:	e9cd 9700 	strd	r9, r7, [sp]
 8017a8e:	f7ff ffb7 	bl	8017a00 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017a92:	f8ad 901e 	strh.w	r9, [sp, #30]
 8017a96:	9005      	str	r0, [sp, #20]
 8017a98:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8017a9c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8017aa0:	b106      	cbz	r6, 8017aa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8017aa2:	b98d      	cbnz	r5, 8017ac8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8017aa4:	4b12      	ldr	r3, [pc, #72]	; (8017af0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8017aa6:	f240 11c3 	movw	r1, #451	; 0x1c3
 8017aaa:	4a12      	ldr	r2, [pc, #72]	; (8017af4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8017aac:	4812      	ldr	r0, [pc, #72]	; (8017af8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8017aae:	f011 fe11 	bl	80296d4 <__assert_func>
 8017ab2:	2004      	movs	r0, #4
 8017ab4:	e7d4      	b.n	8017a60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017ab6:	2bff      	cmp	r3, #255	; 0xff
 8017ab8:	d104      	bne.n	8017ac4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8017aba:	2800      	cmp	r0, #0
 8017abc:	bf14      	ite	ne
 8017abe:	2040      	movne	r0, #64	; 0x40
 8017ac0:	2020      	moveq	r0, #32
 8017ac2:	e7cd      	b.n	8017a60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017ac4:	2040      	movs	r0, #64	; 0x40
 8017ac6:	e7cb      	b.n	8017a60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017ac8:	6823      	ldr	r3, [r4, #0]
 8017aca:	4620      	mov	r0, r4
 8017acc:	9d02      	ldr	r5, [sp, #8]
 8017ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ad0:	4798      	blx	r3
 8017ad2:	4228      	tst	r0, r5
 8017ad4:	d104      	bne.n	8017ae0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8017ad6:	4b09      	ldr	r3, [pc, #36]	; (8017afc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8017ad8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8017adc:	4a05      	ldr	r2, [pc, #20]	; (8017af4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8017ade:	e7e5      	b.n	8017aac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8017ae0:	6860      	ldr	r0, [r4, #4]
 8017ae2:	a902      	add	r1, sp, #8
 8017ae4:	6803      	ldr	r3, [r0, #0]
 8017ae6:	685b      	ldr	r3, [r3, #4]
 8017ae8:	4798      	blx	r3
 8017aea:	b00a      	add	sp, #40	; 0x28
 8017aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017af0:	0802c856 	.word	0x0802c856
 8017af4:	0802cb12 	.word	0x0802cb12
 8017af8:	0802c7da 	.word	0x0802c7da
 8017afc:	0802c88e 	.word	0x0802c88e

08017b00 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8017b00:	b510      	push	{r4, lr}
 8017b02:	b08a      	sub	sp, #40	; 0x28
 8017b04:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8017b08:	9408      	str	r4, [sp, #32]
 8017b0a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8017b0e:	9407      	str	r4, [sp, #28]
 8017b10:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8017b14:	9406      	str	r4, [sp, #24]
 8017b16:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8017b1a:	9405      	str	r4, [sp, #20]
 8017b1c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8017b20:	9404      	str	r4, [sp, #16]
 8017b22:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8017b26:	9403      	str	r4, [sp, #12]
 8017b28:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8017b2c:	9402      	str	r4, [sp, #8]
 8017b2e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8017b32:	e9cd 3400 	strd	r3, r4, [sp]
 8017b36:	4613      	mov	r3, r2
 8017b38:	2200      	movs	r2, #0
 8017b3a:	f7ff ff71 	bl	8017a20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017b3e:	b00a      	add	sp, #40	; 0x28
 8017b40:	bd10      	pop	{r4, pc}
	...

08017b44 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8017b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b46:	b08b      	sub	sp, #44	; 0x2c
 8017b48:	4616      	mov	r6, r2
 8017b4a:	460d      	mov	r5, r1
 8017b4c:	461f      	mov	r7, r3
 8017b4e:	4604      	mov	r4, r0
 8017b50:	f7fa fac2 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 8017b54:	6803      	ldr	r3, [r0, #0]
 8017b56:	6a1b      	ldr	r3, [r3, #32]
 8017b58:	4798      	blx	r3
 8017b5a:	4b0e      	ldr	r3, [pc, #56]	; (8017b94 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	4629      	mov	r1, r5
 8017b60:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017b64:	881b      	ldrh	r3, [r3, #0]
 8017b66:	4620      	mov	r0, r4
 8017b68:	9306      	str	r3, [sp, #24]
 8017b6a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017b6e:	9305      	str	r3, [sp, #20]
 8017b70:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017b74:	9304      	str	r3, [sp, #16]
 8017b76:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017b7a:	9303      	str	r3, [sp, #12]
 8017b7c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017b80:	9302      	str	r3, [sp, #8]
 8017b82:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017b86:	e9cd 7300 	strd	r7, r3, [sp]
 8017b8a:	4633      	mov	r3, r6
 8017b8c:	f7ff ff48 	bl	8017a20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017b90:	b00b      	add	sp, #44	; 0x2c
 8017b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b94:	2000593e 	.word	0x2000593e

08017b98 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8017b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b9c:	461f      	mov	r7, r3
 8017b9e:	4b14      	ldr	r3, [pc, #80]	; (8017bf0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8017ba0:	b08a      	sub	sp, #40	; 0x28
 8017ba2:	4616      	mov	r6, r2
 8017ba4:	f8b3 8000 	ldrh.w	r8, [r3]
 8017ba8:	460d      	mov	r5, r1
 8017baa:	4604      	mov	r4, r0
 8017bac:	f7fa fa94 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 8017bb0:	6803      	ldr	r3, [r0, #0]
 8017bb2:	6a1b      	ldr	r3, [r3, #32]
 8017bb4:	4798      	blx	r3
 8017bb6:	2302      	movs	r3, #2
 8017bb8:	9008      	str	r0, [sp, #32]
 8017bba:	2200      	movs	r2, #0
 8017bbc:	4629      	mov	r1, r5
 8017bbe:	4620      	mov	r0, r4
 8017bc0:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8017bc4:	2301      	movs	r3, #1
 8017bc6:	9305      	str	r3, [sp, #20]
 8017bc8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017bcc:	9304      	str	r3, [sp, #16]
 8017bce:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017bd2:	9303      	str	r3, [sp, #12]
 8017bd4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017bd8:	9302      	str	r3, [sp, #8]
 8017bda:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017bde:	e9cd 7300 	strd	r7, r3, [sp]
 8017be2:	4633      	mov	r3, r6
 8017be4:	f7ff ff1c 	bl	8017a20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017be8:	b00a      	add	sp, #40	; 0x28
 8017bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bee:	bf00      	nop
 8017bf0:	2000593e 	.word	0x2000593e

08017bf4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8017bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bf8:	b08b      	sub	sp, #44	; 0x2c
 8017bfa:	469b      	mov	fp, r3
 8017bfc:	4604      	mov	r4, r0
 8017bfe:	4692      	mov	sl, r2
 8017c00:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8017c04:	2600      	movs	r6, #0
 8017c06:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8017c0a:	4689      	mov	r9, r1
 8017c0c:	2fff      	cmp	r7, #255	; 0xff
 8017c0e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8017c12:	9608      	str	r6, [sp, #32]
 8017c14:	bf14      	ite	ne
 8017c16:	2308      	movne	r3, #8
 8017c18:	2302      	moveq	r3, #2
 8017c1a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8017c1e:	f7ff fea7 	bl	8017970 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017c22:	465a      	mov	r2, fp
 8017c24:	4603      	mov	r3, r0
 8017c26:	4651      	mov	r1, sl
 8017c28:	4620      	mov	r0, r4
 8017c2a:	e9cd 8500 	strd	r8, r5, [sp]
 8017c2e:	f7ff fee7 	bl	8017a00 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017c32:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017c36:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8017c3a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017c3e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017c42:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8017c46:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017c4a:	6823      	ldr	r3, [r4, #0]
 8017c4c:	9d02      	ldr	r5, [sp, #8]
 8017c4e:	9005      	str	r0, [sp, #20]
 8017c50:	4620      	mov	r0, r4
 8017c52:	f8ad 601c 	strh.w	r6, [sp, #28]
 8017c56:	f8ad 801e 	strh.w	r8, [sp, #30]
 8017c5a:	f8cd 9020 	str.w	r9, [sp, #32]
 8017c5e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8017c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c64:	4798      	blx	r3
 8017c66:	4228      	tst	r0, r5
 8017c68:	d106      	bne.n	8017c78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8017c6a:	4b07      	ldr	r3, [pc, #28]	; (8017c88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8017c6c:	f240 11fb 	movw	r1, #507	; 0x1fb
 8017c70:	4a06      	ldr	r2, [pc, #24]	; (8017c8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8017c72:	4807      	ldr	r0, [pc, #28]	; (8017c90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8017c74:	f011 fd2e 	bl	80296d4 <__assert_func>
 8017c78:	6860      	ldr	r0, [r4, #4]
 8017c7a:	a902      	add	r1, sp, #8
 8017c7c:	6803      	ldr	r3, [r0, #0]
 8017c7e:	685b      	ldr	r3, [r3, #4]
 8017c80:	4798      	blx	r3
 8017c82:	b00b      	add	sp, #44	; 0x2c
 8017c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c88:	0802c88e 	.word	0x0802c88e
 8017c8c:	0802cbdb 	.word	0x0802cbdb
 8017c90:	0802c7da 	.word	0x0802c7da

08017c94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017c94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017c98:	461f      	mov	r7, r3
 8017c9a:	4b0b      	ldr	r3, [pc, #44]	; (8017cc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017c9c:	460d      	mov	r5, r1
 8017c9e:	4616      	mov	r6, r2
 8017ca0:	f8b3 8000 	ldrh.w	r8, [r3]
 8017ca4:	4604      	mov	r4, r0
 8017ca6:	f7fa fa17 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 8017caa:	6803      	ldr	r3, [r0, #0]
 8017cac:	6a1b      	ldr	r3, [r3, #32]
 8017cae:	4798      	blx	r3
 8017cb0:	463b      	mov	r3, r7
 8017cb2:	4632      	mov	r2, r6
 8017cb4:	4629      	mov	r1, r5
 8017cb6:	e9cd 8000 	strd	r8, r0, [sp]
 8017cba:	4620      	mov	r0, r4
 8017cbc:	f7ff fea0 	bl	8017a00 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017cc0:	b002      	add	sp, #8
 8017cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cc6:	bf00      	nop
 8017cc8:	2000593e 	.word	0x2000593e

08017ccc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8017ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cd0:	4698      	mov	r8, r3
 8017cd2:	b088      	sub	sp, #32
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	4617      	mov	r7, r2
 8017cd8:	4604      	mov	r4, r0
 8017cda:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8017cde:	9306      	str	r3, [sp, #24]
 8017ce0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017ce4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017ce8:	f8ad 6010 	strh.w	r6, [sp, #16]
 8017cec:	f8ad 5012 	strh.w	r5, [sp, #18]
 8017cf0:	e9cd 3100 	strd	r3, r1, [sp]
 8017cf4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017cf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017cfc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8017d00:	f88d 301c 	strb.w	r3, [sp, #28]
 8017d04:	f7ff fe34 	bl	8017970 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017d08:	4642      	mov	r2, r8
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	4639      	mov	r1, r7
 8017d0e:	4620      	mov	r0, r4
 8017d10:	f7ff ffc0 	bl	8017c94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017d14:	4b16      	ldr	r3, [pc, #88]	; (8017d70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8017d16:	9003      	str	r0, [sp, #12]
 8017d18:	881b      	ldrh	r3, [r3, #0]
 8017d1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017d1e:	f7fa f9db 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 8017d22:	6803      	ldr	r3, [r0, #0]
 8017d24:	6a1b      	ldr	r3, [r3, #32]
 8017d26:	4798      	blx	r3
 8017d28:	f88d 001e 	strb.w	r0, [sp, #30]
 8017d2c:	f88d 001d 	strb.w	r0, [sp, #29]
 8017d30:	b106      	cbz	r6, 8017d34 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8017d32:	b935      	cbnz	r5, 8017d42 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8017d34:	4b0f      	ldr	r3, [pc, #60]	; (8017d74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8017d36:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8017d3a:	4a0f      	ldr	r2, [pc, #60]	; (8017d78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8017d3c:	480f      	ldr	r0, [pc, #60]	; (8017d7c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8017d3e:	f011 fcc9 	bl	80296d4 <__assert_func>
 8017d42:	6823      	ldr	r3, [r4, #0]
 8017d44:	4620      	mov	r0, r4
 8017d46:	9d00      	ldr	r5, [sp, #0]
 8017d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d4a:	4798      	blx	r3
 8017d4c:	4228      	tst	r0, r5
 8017d4e:	d104      	bne.n	8017d5a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8017d50:	4b0b      	ldr	r3, [pc, #44]	; (8017d80 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8017d52:	f240 11e1 	movw	r1, #481	; 0x1e1
 8017d56:	4a08      	ldr	r2, [pc, #32]	; (8017d78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8017d58:	e7f0      	b.n	8017d3c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8017d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017d5c:	4669      	mov	r1, sp
 8017d5e:	6860      	ldr	r0, [r4, #4]
 8017d60:	9306      	str	r3, [sp, #24]
 8017d62:	6803      	ldr	r3, [r0, #0]
 8017d64:	685b      	ldr	r3, [r3, #4]
 8017d66:	4798      	blx	r3
 8017d68:	b008      	add	sp, #32
 8017d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d6e:	bf00      	nop
 8017d70:	2000593e 	.word	0x2000593e
 8017d74:	0802c856 	.word	0x0802c856
 8017d78:	0802c9c4 	.word	0x0802c9c4
 8017d7c:	0802c7da 	.word	0x0802c7da
 8017d80:	0802c88e 	.word	0x0802c88e

08017d84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8017d84:	b570      	push	{r4, r5, r6, lr}
 8017d86:	b08a      	sub	sp, #40	; 0x28
 8017d88:	4604      	mov	r4, r0
 8017d8a:	466b      	mov	r3, sp
 8017d8c:	e883 0006 	stmia.w	r3, {r1, r2}
 8017d90:	4b1f      	ldr	r3, [pc, #124]	; (8017e10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8017d92:	781b      	ldrb	r3, [r3, #0]
 8017d94:	b933      	cbnz	r3, 8017da4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8017d96:	4b1f      	ldr	r3, [pc, #124]	; (8017e14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8017d98:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8017d9c:	4a1e      	ldr	r2, [pc, #120]	; (8017e18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8017d9e:	481f      	ldr	r0, [pc, #124]	; (8017e1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8017da0:	f011 fc98 	bl	80296d4 <__assert_func>
 8017da4:	2300      	movs	r3, #0
 8017da6:	f8bd 5000 	ldrh.w	r5, [sp]
 8017daa:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8017dae:	9308      	str	r3, [sp, #32]
 8017db0:	2301      	movs	r3, #1
 8017db2:	9302      	str	r3, [sp, #8]
 8017db4:	6803      	ldr	r3, [r0, #0]
 8017db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017db8:	4798      	blx	r3
 8017dba:	4632      	mov	r2, r6
 8017dbc:	4629      	mov	r1, r5
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	f7ff ff67 	bl	8017c94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017dc8:	9003      	str	r0, [sp, #12]
 8017dca:	9305      	str	r3, [sp, #20]
 8017dcc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017dd0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017dd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017dd8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017ddc:	4b10      	ldr	r3, [pc, #64]	; (8017e20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8017dde:	881b      	ldrh	r3, [r3, #0]
 8017de0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017de4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017de8:	f7fa f976 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 8017dec:	6803      	ldr	r3, [r0, #0]
 8017dee:	6a1b      	ldr	r3, [r3, #32]
 8017df0:	4798      	blx	r3
 8017df2:	23ff      	movs	r3, #255	; 0xff
 8017df4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8017df8:	a902      	add	r1, sp, #8
 8017dfa:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8017dfe:	6860      	ldr	r0, [r4, #4]
 8017e00:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017e04:	6803      	ldr	r3, [r0, #0]
 8017e06:	685b      	ldr	r3, [r3, #4]
 8017e08:	4798      	blx	r3
 8017e0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017e0c:	b00a      	add	sp, #40	; 0x28
 8017e0e:	bd70      	pop	{r4, r5, r6, pc}
 8017e10:	20005943 	.word	0x20005943
 8017e14:	0802c727 	.word	0x0802c727
 8017e18:	0802ca68 	.word	0x0802ca68
 8017e1c:	0802c7da 	.word	0x0802c7da
 8017e20:	2000593e 	.word	0x2000593e

08017e24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e26:	b08b      	sub	sp, #44	; 0x2c
 8017e28:	4604      	mov	r4, r0
 8017e2a:	466d      	mov	r5, sp
 8017e2c:	e885 0006 	stmia.w	r5, {r1, r2}
 8017e30:	461d      	mov	r5, r3
 8017e32:	2300      	movs	r3, #0
 8017e34:	f8bd 6000 	ldrh.w	r6, [sp]
 8017e38:	9308      	str	r3, [sp, #32]
 8017e3a:	2301      	movs	r3, #1
 8017e3c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8017e40:	9302      	str	r3, [sp, #8]
 8017e42:	6803      	ldr	r3, [r0, #0]
 8017e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e46:	4798      	blx	r3
 8017e48:	463a      	mov	r2, r7
 8017e4a:	4631      	mov	r1, r6
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	4620      	mov	r0, r4
 8017e50:	f7ff ff20 	bl	8017c94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017e54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017e58:	9003      	str	r0, [sp, #12]
 8017e5a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017e5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017e62:	9505      	str	r5, [sp, #20]
 8017e64:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017e68:	4b0d      	ldr	r3, [pc, #52]	; (8017ea0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8017e6a:	881b      	ldrh	r3, [r3, #0]
 8017e6c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017e70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e72:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017e76:	f7fa f92f 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 8017e7a:	6803      	ldr	r3, [r0, #0]
 8017e7c:	6a1b      	ldr	r3, [r3, #32]
 8017e7e:	4798      	blx	r3
 8017e80:	23ff      	movs	r3, #255	; 0xff
 8017e82:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8017e86:	a902      	add	r1, sp, #8
 8017e88:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8017e8c:	6860      	ldr	r0, [r4, #4]
 8017e8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017e92:	6803      	ldr	r3, [r0, #0]
 8017e94:	685b      	ldr	r3, [r3, #4]
 8017e96:	4798      	blx	r3
 8017e98:	4628      	mov	r0, r5
 8017e9a:	b00b      	add	sp, #44	; 0x2c
 8017e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e9e:	bf00      	nop
 8017ea0:	2000593e 	.word	0x2000593e

08017ea4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017ea4:	b570      	push	{r4, r5, r6, lr}
 8017ea6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8017eaa:	4604      	mov	r4, r0
 8017eac:	b19b      	cbz	r3, 8017ed6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8017eae:	2002      	movs	r0, #2
 8017eb0:	f7fc ff8a 	bl	8014dc8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017ebc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8017ec0:	6823      	ldr	r3, [r4, #0]
 8017ec2:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8017ec6:	f7ff fd53 	bl	8017970 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017eca:	4601      	mov	r1, r0
 8017ecc:	4620      	mov	r0, r4
 8017ece:	462b      	mov	r3, r5
 8017ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ed4:	4718      	bx	r3
 8017ed6:	bd70      	pop	{r4, r5, r6, pc}

08017ed8 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8017ed8:	b538      	push	{r3, r4, r5, lr}
 8017eda:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8017ede:	4604      	mov	r4, r0
 8017ee0:	460d      	mov	r5, r1
 8017ee2:	428a      	cmp	r2, r1
 8017ee4:	d008      	beq.n	8017ef8 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 8017ee6:	2a01      	cmp	r2, #1
 8017ee8:	6803      	ldr	r3, [r0, #0]
 8017eea:	d106      	bne.n	8017efa <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8017eec:	b929      	cbnz	r1, 8017efa <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8017eee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017ef2:	4798      	blx	r3
 8017ef4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8017ef8:	bd38      	pop	{r3, r4, r5, pc}
 8017efa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017efe:	4620      	mov	r0, r4
 8017f00:	e7f7      	b.n	8017ef2 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

08017f04 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017f04:	4b0d      	ldr	r3, [pc, #52]	; (8017f3c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8017f06:	b510      	push	{r4, lr}
 8017f08:	781b      	ldrb	r3, [r3, #0]
 8017f0a:	4604      	mov	r4, r0
 8017f0c:	b95b      	cbnz	r3, 8017f26 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017f0e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017f12:	2b02      	cmp	r3, #2
 8017f14:	d007      	beq.n	8017f26 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017f16:	6840      	ldr	r0, [r0, #4]
 8017f18:	f000 f92c 	bl	8018174 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017f1c:	b118      	cbz	r0, 8017f26 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017f1e:	6862      	ldr	r2, [r4, #4]
 8017f20:	7a53      	ldrb	r3, [r2, #9]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d0fc      	beq.n	8017f20 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017f26:	f7fd f981 	bl	801522c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017f2a:	4620      	mov	r0, r4
 8017f2c:	2100      	movs	r1, #0
 8017f2e:	f7ff ffd3 	bl	8017ed8 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8017f32:	4620      	mov	r0, r4
 8017f34:	f7ff fd1c 	bl	8017970 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017f38:	bd10      	pop	{r4, pc}
 8017f3a:	bf00      	nop
 8017f3c:	20005942 	.word	0x20005942

08017f40 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8017f40:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017f44:	1a13      	subs	r3, r2, r0
 8017f46:	4258      	negs	r0, r3
 8017f48:	4158      	adcs	r0, r3
 8017f4a:	4770      	bx	lr

08017f4c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8017f4c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8017f50:	1a9b      	subs	r3, r3, r2
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	bfdc      	itt	le
 8017f56:	6882      	ldrle	r2, [r0, #8]
 8017f58:	189b      	addle	r3, r3, r2
 8017f5a:	2b01      	cmp	r3, #1
 8017f5c:	bfcc      	ite	gt
 8017f5e:	2000      	movgt	r0, #0
 8017f60:	2001      	movle	r0, #1
 8017f62:	4770      	bx	lr

08017f64 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017f64:	6902      	ldr	r2, [r0, #16]
 8017f66:	6840      	ldr	r0, [r0, #4]
 8017f68:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8017f6c:	4770      	bx	lr

08017f6e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8017f6e:	6803      	ldr	r3, [r0, #0]
 8017f70:	691b      	ldr	r3, [r3, #16]
 8017f72:	4718      	bx	r3

08017f74 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8017f74:	4770      	bx	lr

08017f76 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8017f76:	4770      	bx	lr

08017f78 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017f78:	2301      	movs	r3, #1
 8017f7a:	b570      	push	{r4, r5, r6, lr}
 8017f7c:	7203      	strb	r3, [r0, #8]
 8017f7e:	4604      	mov	r4, r0
 8017f80:	6840      	ldr	r0, [r0, #4]
 8017f82:	6803      	ldr	r3, [r0, #0]
 8017f84:	699b      	ldr	r3, [r3, #24]
 8017f86:	4798      	blx	r3
 8017f88:	6803      	ldr	r3, [r0, #0]
 8017f8a:	4605      	mov	r5, r0
 8017f8c:	2b08      	cmp	r3, #8
 8017f8e:	d01e      	beq.n	8017fce <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8017f90:	d80b      	bhi.n	8017faa <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017f92:	2b02      	cmp	r3, #2
 8017f94:	d027      	beq.n	8017fe6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8017f96:	2b04      	cmp	r3, #4
 8017f98:	d011      	beq.n	8017fbe <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8017f9a:	2b01      	cmp	r3, #1
 8017f9c:	d028      	beq.n	8017ff0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017f9e:	4b17      	ldr	r3, [pc, #92]	; (8017ffc <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8017fa0:	218c      	movs	r1, #140	; 0x8c
 8017fa2:	4a17      	ldr	r2, [pc, #92]	; (8018000 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8017fa4:	4817      	ldr	r0, [pc, #92]	; (8018004 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8017fa6:	f011 fb95 	bl	80296d4 <__assert_func>
 8017faa:	2b40      	cmp	r3, #64	; 0x40
 8017fac:	d020      	beq.n	8017ff0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017fae:	d801      	bhi.n	8017fb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8017fb0:	2b20      	cmp	r3, #32
 8017fb2:	e7f3      	b.n	8017f9c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8017fb4:	2b80      	cmp	r3, #128	; 0x80
 8017fb6:	d01b      	beq.n	8017ff0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017fbc:	e7ee      	b.n	8017f9c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8017fbe:	6823      	ldr	r3, [r4, #0]
 8017fc0:	7f01      	ldrb	r1, [r0, #28]
 8017fc2:	4620      	mov	r0, r4
 8017fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fc6:	4798      	blx	r3
 8017fc8:	6823      	ldr	r3, [r4, #0]
 8017fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fcc:	e006      	b.n	8017fdc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8017fce:	6823      	ldr	r3, [r4, #0]
 8017fd0:	7f01      	ldrb	r1, [r0, #28]
 8017fd2:	4620      	mov	r0, r4
 8017fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fd6:	4798      	blx	r3
 8017fd8:	6823      	ldr	r3, [r4, #0]
 8017fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fdc:	4629      	mov	r1, r5
 8017fde:	4620      	mov	r0, r4
 8017fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fe4:	4718      	bx	r3
 8017fe6:	6823      	ldr	r3, [r4, #0]
 8017fe8:	4620      	mov	r0, r4
 8017fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017fec:	4798      	blx	r3
 8017fee:	e7f3      	b.n	8017fd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8017ff0:	6823      	ldr	r3, [r4, #0]
 8017ff2:	4620      	mov	r0, r4
 8017ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ff6:	4798      	blx	r3
 8017ff8:	e7e6      	b.n	8017fc8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8017ffa:	bf00      	nop
 8017ffc:	0802ccb9 	.word	0x0802ccb9
 8018000:	0802cdc8 	.word	0x0802cdc8
 8018004:	0802ccde 	.word	0x0802ccde

08018008 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018008:	b570      	push	{r4, r5, r6, lr}
 801800a:	4604      	mov	r4, r0
 801800c:	460e      	mov	r6, r1
 801800e:	6860      	ldr	r0, [r4, #4]
 8018010:	6803      	ldr	r3, [r0, #0]
 8018012:	685b      	ldr	r3, [r3, #4]
 8018014:	4798      	blx	r3
 8018016:	2800      	cmp	r0, #0
 8018018:	d1f9      	bne.n	801800e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801801a:	4d0d      	ldr	r5, [pc, #52]	; (8018050 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801801c:	6828      	ldr	r0, [r5, #0]
 801801e:	6803      	ldr	r3, [r0, #0]
 8018020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018022:	4798      	blx	r3
 8018024:	f7fd f91c 	bl	8015260 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018028:	6828      	ldr	r0, [r5, #0]
 801802a:	2101      	movs	r1, #1
 801802c:	f7ff ff54 	bl	8017ed8 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8018030:	6860      	ldr	r0, [r4, #4]
 8018032:	4631      	mov	r1, r6
 8018034:	6803      	ldr	r3, [r0, #0]
 8018036:	689b      	ldr	r3, [r3, #8]
 8018038:	4798      	blx	r3
 801803a:	6823      	ldr	r3, [r4, #0]
 801803c:	4620      	mov	r0, r4
 801803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018040:	4798      	blx	r3
 8018042:	6828      	ldr	r0, [r5, #0]
 8018044:	6803      	ldr	r3, [r0, #0]
 8018046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801804a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801804c:	4718      	bx	r3
 801804e:	bf00      	nop
 8018050:	20005944 	.word	0x20005944

08018054 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018054:	b508      	push	{r3, lr}
 8018056:	f7fd f8e9 	bl	801522c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801805a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801805e:	f7fd b8f3 	b.w	8015248 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018062 <_ZN8touchgfx13DMA_Interface5startEv>:
 8018062:	b510      	push	{r4, lr}
 8018064:	4604      	mov	r4, r0
 8018066:	6840      	ldr	r0, [r0, #4]
 8018068:	6803      	ldr	r3, [r0, #0]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	4798      	blx	r3
 801806e:	b948      	cbnz	r0, 8018084 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018070:	7a63      	ldrb	r3, [r4, #9]
 8018072:	b13b      	cbz	r3, 8018084 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018074:	7a23      	ldrb	r3, [r4, #8]
 8018076:	b92b      	cbnz	r3, 8018084 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018078:	6823      	ldr	r3, [r4, #0]
 801807a:	4620      	mov	r0, r4
 801807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801807e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018082:	4718      	bx	r3
 8018084:	bd10      	pop	{r4, pc}
	...

08018088 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8018088:	b510      	push	{r4, lr}
 801808a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801808e:	1b12      	subs	r2, r2, r4
 8018090:	2a00      	cmp	r2, #0
 8018092:	bfdc      	itt	le
 8018094:	6883      	ldrle	r3, [r0, #8]
 8018096:	18d2      	addle	r2, r2, r3
 8018098:	2a01      	cmp	r2, #1
 801809a:	dd18      	ble.n	80180ce <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801809c:	6843      	ldr	r3, [r0, #4]
 801809e:	f101 021c 	add.w	r2, r1, #28
 80180a2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80180a6:	f851 4b04 	ldr.w	r4, [r1], #4
 80180aa:	4291      	cmp	r1, r2
 80180ac:	f843 4b04 	str.w	r4, [r3], #4
 80180b0:	d1f9      	bne.n	80180a6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80180b2:	880a      	ldrh	r2, [r1, #0]
 80180b4:	801a      	strh	r2, [r3, #0]
 80180b6:	788a      	ldrb	r2, [r1, #2]
 80180b8:	709a      	strb	r2, [r3, #2]
 80180ba:	68c3      	ldr	r3, [r0, #12]
 80180bc:	6882      	ldr	r2, [r0, #8]
 80180be:	f3bf 8f5b 	dmb	ish
 80180c2:	3301      	adds	r3, #1
 80180c4:	429a      	cmp	r2, r3
 80180c6:	bfd8      	it	le
 80180c8:	1a9b      	suble	r3, r3, r2
 80180ca:	60c3      	str	r3, [r0, #12]
 80180cc:	bd10      	pop	{r4, pc}
 80180ce:	4b03      	ldr	r3, [pc, #12]	; (80180dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80180d0:	2139      	movs	r1, #57	; 0x39
 80180d2:	4a03      	ldr	r2, [pc, #12]	; (80180e0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80180d4:	4803      	ldr	r0, [pc, #12]	; (80180e4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80180d6:	f011 fafd 	bl	80296d4 <__assert_func>
 80180da:	bf00      	nop
 80180dc:	0802cd04 	.word	0x0802cd04
 80180e0:	0802cdf8 	.word	0x0802cdf8
 80180e4:	0802ccde 	.word	0x0802ccde

080180e8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80180e8:	b510      	push	{r4, lr}
 80180ea:	6803      	ldr	r3, [r0, #0]
 80180ec:	4604      	mov	r4, r0
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	4798      	blx	r3
 80180f2:	b128      	cbz	r0, 8018100 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80180f4:	4b07      	ldr	r3, [pc, #28]	; (8018114 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80180f6:	213f      	movs	r1, #63	; 0x3f
 80180f8:	4a07      	ldr	r2, [pc, #28]	; (8018118 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80180fa:	4808      	ldr	r0, [pc, #32]	; (801811c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80180fc:	f011 faea 	bl	80296d4 <__assert_func>
 8018100:	6923      	ldr	r3, [r4, #16]
 8018102:	68a2      	ldr	r2, [r4, #8]
 8018104:	f3bf 8f5b 	dmb	ish
 8018108:	3301      	adds	r3, #1
 801810a:	429a      	cmp	r2, r3
 801810c:	bfd8      	it	le
 801810e:	1a9b      	suble	r3, r3, r2
 8018110:	6123      	str	r3, [r4, #16]
 8018112:	bd10      	pop	{r4, pc}
 8018114:	0802cd27 	.word	0x0802cd27
 8018118:	0802ce46 	.word	0x0802ce46
 801811c:	0802ccde 	.word	0x0802ccde

08018120 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018120:	b570      	push	{r4, r5, r6, lr}
 8018122:	4604      	mov	r4, r0
 8018124:	6840      	ldr	r0, [r0, #4]
 8018126:	6803      	ldr	r3, [r0, #0]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	4798      	blx	r3
 801812c:	4605      	mov	r5, r0
 801812e:	b930      	cbnz	r0, 801813e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018130:	7a23      	ldrb	r3, [r4, #8]
 8018132:	b123      	cbz	r3, 801813e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018134:	6860      	ldr	r0, [r4, #4]
 8018136:	6803      	ldr	r3, [r0, #0]
 8018138:	695b      	ldr	r3, [r3, #20]
 801813a:	4798      	blx	r3
 801813c:	7225      	strb	r5, [r4, #8]
 801813e:	6860      	ldr	r0, [r4, #4]
 8018140:	6803      	ldr	r3, [r0, #0]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	4798      	blx	r3
 8018146:	b928      	cbnz	r0, 8018154 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018148:	6823      	ldr	r3, [r4, #0]
 801814a:	4620      	mov	r0, r4
 801814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801814e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018152:	4718      	bx	r3
 8018154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018158:	f7fd b88e 	b.w	8015278 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801815c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801815c:	b510      	push	{r4, lr}
 801815e:	6082      	str	r2, [r0, #8]
 8018160:	2200      	movs	r2, #0
 8018162:	4c03      	ldr	r4, [pc, #12]	; (8018170 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018164:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018168:	e9c0 4100 	strd	r4, r1, [r0]
 801816c:	bd10      	pop	{r4, pc}
 801816e:	bf00      	nop
 8018170:	0802cdac 	.word	0x0802cdac

08018174 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018174:	6840      	ldr	r0, [r0, #4]
 8018176:	6803      	ldr	r3, [r0, #0]
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	4718      	bx	r3

0801817c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801817c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8018180:	4770      	bx	lr

08018182 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8018182:	b510      	push	{r4, lr}
 8018184:	4604      	mov	r4, r0
 8018186:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018188:	b150      	cbz	r0, 80181a0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801818a:	6803      	ldr	r3, [r0, #0]
 801818c:	68db      	ldr	r3, [r3, #12]
 801818e:	4798      	blx	r3
 8018190:	b130      	cbz	r0, 80181a0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8018192:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018194:	4621      	mov	r1, r4
 8018196:	6803      	ldr	r3, [r0, #0]
 8018198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801819c:	689b      	ldr	r3, [r3, #8]
 801819e:	4718      	bx	r3
 80181a0:	bd10      	pop	{r4, pc}

080181a2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80181a2:	790b      	ldrb	r3, [r1, #4]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	bf0c      	ite	eq
 80181a8:	2301      	moveq	r3, #1
 80181aa:	2300      	movne	r3, #0
 80181ac:	b570      	push	{r4, r5, r6, lr}
 80181ae:	4604      	mov	r4, r0
 80181b0:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80181b4:	460e      	mov	r6, r1
 80181b6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80181ba:	d109      	bne.n	80181d0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80181bc:	b14d      	cbz	r5, 80181d2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80181be:	7933      	ldrb	r3, [r6, #4]
 80181c0:	2b01      	cmp	r3, #1
 80181c2:	d10c      	bne.n	80181de <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80181c4:	6823      	ldr	r3, [r4, #0]
 80181c6:	4620      	mov	r0, r4
 80181c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80181ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181ce:	4718      	bx	r3
 80181d0:	b12d      	cbz	r5, 80181de <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80181d2:	6823      	ldr	r3, [r4, #0]
 80181d4:	4620      	mov	r0, r4
 80181d6:	695b      	ldr	r3, [r3, #20]
 80181d8:	4798      	blx	r3
 80181da:	2d00      	cmp	r5, #0
 80181dc:	d1ef      	bne.n	80181be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80181de:	bd70      	pop	{r4, r5, r6, pc}

080181e0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 80181e0:	6803      	ldr	r3, [r0, #0]
 80181e2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80181e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80181e8:	4718      	bx	r3

080181ea <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 80181ea:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80181ee:	2bff      	cmp	r3, #255	; 0xff
 80181f0:	b510      	push	{r4, lr}
 80181f2:	d104      	bne.n	80181fe <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 80181f4:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 80181f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80181fa:	429a      	cmp	r2, r3
 80181fc:	d105      	bne.n	801820a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 80181fe:	2300      	movs	r3, #0
 8018200:	8003      	strh	r3, [r0, #0]
 8018202:	8043      	strh	r3, [r0, #2]
 8018204:	8083      	strh	r3, [r0, #4]
 8018206:	80c3      	strh	r3, [r0, #6]
 8018208:	bd10      	pop	{r4, pc}
 801820a:	2300      	movs	r3, #0
 801820c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8018210:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8018214:	8003      	strh	r3, [r0, #0]
 8018216:	8043      	strh	r3, [r0, #2]
 8018218:	8084      	strh	r4, [r0, #4]
 801821a:	80c2      	strh	r2, [r0, #6]
 801821c:	e7f4      	b.n	8018208 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801821e <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801821e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018222:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8018226:	b087      	sub	sp, #28
 8018228:	4604      	mov	r4, r0
 801822a:	4689      	mov	r9, r1
 801822c:	b363      	cbz	r3, 8018288 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801822e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018234:	429a      	cmp	r2, r3
 8018236:	d027      	beq.n	8018288 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8018238:	ad06      	add	r5, sp, #24
 801823a:	2700      	movs	r7, #0
 801823c:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8018240:	4628      	mov	r0, r5
 8018242:	f005 fc1d 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018246:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801824a:	a904      	add	r1, sp, #16
 801824c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018250:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018254:	4620      	mov	r0, r4
 8018256:	6823      	ldr	r3, [r4, #0]
 8018258:	9704      	str	r7, [sp, #16]
 801825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801825c:	4798      	blx	r3
 801825e:	f7f9 ff3b 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 8018262:	6803      	ldr	r3, [r0, #0]
 8018264:	4606      	mov	r6, r0
 8018266:	4628      	mov	r0, r5
 8018268:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801826c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801826e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018272:	f005 fd0d 	bl	801dc90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018276:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801827a:	4601      	mov	r1, r0
 801827c:	9701      	str	r7, [sp, #4]
 801827e:	aa04      	add	r2, sp, #16
 8018280:	9300      	str	r3, [sp, #0]
 8018282:	4630      	mov	r0, r6
 8018284:	464b      	mov	r3, r9
 8018286:	47c0      	blx	r8
 8018288:	b007      	add	sp, #28
 801828a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801828e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801828e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018290:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018294:	460d      	mov	r5, r1
 8018296:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801829a:	2100      	movs	r1, #0
 801829c:	f8ad 3006 	strh.w	r3, [sp, #6]
 80182a0:	4604      	mov	r4, r0
 80182a2:	6803      	ldr	r3, [r0, #0]
 80182a4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80182a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182aa:	9100      	str	r1, [sp, #0]
 80182ac:	4669      	mov	r1, sp
 80182ae:	4798      	blx	r3
 80182b0:	4621      	mov	r1, r4
 80182b2:	a802      	add	r0, sp, #8
 80182b4:	f003 faf8 	bl	801b8a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80182b8:	f7f9 ff0e 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 80182bc:	6803      	ldr	r3, [r0, #0]
 80182be:	aa02      	add	r2, sp, #8
 80182c0:	4669      	mov	r1, sp
 80182c2:	695e      	ldr	r6, [r3, #20]
 80182c4:	462b      	mov	r3, r5
 80182c6:	47b0      	blx	r6
 80182c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182cc:	2800      	cmp	r0, #0
 80182ce:	bf08      	it	eq
 80182d0:	461d      	moveq	r5, r3
 80182d2:	84e5      	strh	r5, [r4, #38]	; 0x26
 80182d4:	b004      	add	sp, #16
 80182d6:	bd70      	pop	{r4, r5, r6, pc}

080182d8 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 80182d8:	2200      	movs	r2, #0
 80182da:	8082      	strh	r2, [r0, #4]
 80182dc:	80c2      	strh	r2, [r0, #6]
 80182de:	8102      	strh	r2, [r0, #8]
 80182e0:	8142      	strh	r2, [r0, #10]
 80182e2:	8182      	strh	r2, [r0, #12]
 80182e4:	81c2      	strh	r2, [r0, #14]
 80182e6:	8202      	strh	r2, [r0, #16]
 80182e8:	8242      	strh	r2, [r0, #18]
 80182ea:	61c2      	str	r2, [r0, #28]
 80182ec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80182f0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80182f4:	2201      	movs	r2, #1
 80182f6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 80182fa:	4a04      	ldr	r2, [pc, #16]	; (801830c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 80182fc:	6002      	str	r2, [r0, #0]
 80182fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018302:	84c2      	strh	r2, [r0, #38]	; 0x26
 8018304:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8018308:	4770      	bx	lr
 801830a:	bf00      	nop
 801830c:	0802ceec 	.word	0x0802ceec

08018310 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8018310:	2200      	movs	r2, #0
 8018312:	8002      	strh	r2, [r0, #0]
 8018314:	8042      	strh	r2, [r0, #2]
 8018316:	8082      	strh	r2, [r0, #4]
 8018318:	80c2      	strh	r2, [r0, #6]
 801831a:	4770      	bx	lr

0801831c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801831c:	b570      	push	{r4, r5, r6, lr}
 801831e:	6803      	ldr	r3, [r0, #0]
 8018320:	4604      	mov	r4, r0
 8018322:	4615      	mov	r5, r2
 8018324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018326:	4798      	blx	r3
 8018328:	6823      	ldr	r3, [r4, #0]
 801832a:	4629      	mov	r1, r5
 801832c:	4620      	mov	r0, r4
 801832e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018334:	4718      	bx	r3
	...

08018338 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018338:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801833a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801833e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018340:	4299      	cmp	r1, r3
 8018342:	d029      	beq.n	8018398 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8018344:	4b15      	ldr	r3, [pc, #84]	; (801839c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	b92b      	cbnz	r3, 8018356 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801834a:	4b15      	ldr	r3, [pc, #84]	; (80183a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801834c:	21b1      	movs	r1, #177	; 0xb1
 801834e:	4a15      	ldr	r2, [pc, #84]	; (80183a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8018350:	4815      	ldr	r0, [pc, #84]	; (80183a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8018352:	f011 f9bf 	bl	80296d4 <__assert_func>
 8018356:	4a15      	ldr	r2, [pc, #84]	; (80183ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8018358:	8812      	ldrh	r2, [r2, #0]
 801835a:	428a      	cmp	r2, r1
 801835c:	d803      	bhi.n	8018366 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801835e:	4b14      	ldr	r3, [pc, #80]	; (80183b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8018360:	21b2      	movs	r1, #178	; 0xb2
 8018362:	4a10      	ldr	r2, [pc, #64]	; (80183a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8018364:	e7f4      	b.n	8018350 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8018366:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801836a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801836e:	4b11      	ldr	r3, [pc, #68]	; (80183b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8018370:	7854      	ldrb	r4, [r2, #1]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018378:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801837c:	682b      	ldr	r3, [r5, #0]
 801837e:	69de      	ldr	r6, [r3, #28]
 8018380:	4b0d      	ldr	r3, [pc, #52]	; (80183b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8018382:	6818      	ldr	r0, [r3, #0]
 8018384:	f7fc f9d4 	bl	8014730 <_ZNK8touchgfx5Texts7getTextEt>
 8018388:	2300      	movs	r3, #0
 801838a:	4602      	mov	r2, r0
 801838c:	4621      	mov	r1, r4
 801838e:	9300      	str	r3, [sp, #0]
 8018390:	4628      	mov	r0, r5
 8018392:	47b0      	blx	r6
 8018394:	b002      	add	sp, #8
 8018396:	bd70      	pop	{r4, r5, r6, pc}
 8018398:	2000      	movs	r0, #0
 801839a:	e7fb      	b.n	8018394 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 801839c:	20005994 	.word	0x20005994
 80183a0:	0802cf50 	.word	0x0802cf50
 80183a4:	0802d088 	.word	0x0802d088
 80183a8:	0802cf92 	.word	0x0802cf92
 80183ac:	20005998 	.word	0x20005998
 80183b0:	0802cfbb 	.word	0x0802cfbb
 80183b4:	2000599c 	.word	0x2000599c
 80183b8:	200059a0 	.word	0x200059a0

080183bc <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80183bc:	b570      	push	{r4, r5, r6, lr}
 80183be:	6803      	ldr	r3, [r0, #0]
 80183c0:	4604      	mov	r4, r0
 80183c2:	b28d      	uxth	r5, r1
 80183c4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80183c6:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80183c8:	4b10      	ldr	r3, [pc, #64]	; (801840c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	b92b      	cbnz	r3, 80183da <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 80183ce:	4b10      	ldr	r3, [pc, #64]	; (8018410 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80183d0:	21b1      	movs	r1, #177	; 0xb1
 80183d2:	4a10      	ldr	r2, [pc, #64]	; (8018414 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80183d4:	4810      	ldr	r0, [pc, #64]	; (8018418 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80183d6:	f011 f97d 	bl	80296d4 <__assert_func>
 80183da:	4910      	ldr	r1, [pc, #64]	; (801841c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80183dc:	8809      	ldrh	r1, [r1, #0]
 80183de:	4291      	cmp	r1, r2
 80183e0:	d803      	bhi.n	80183ea <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80183e2:	4b0f      	ldr	r3, [pc, #60]	; (8018420 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80183e4:	21b2      	movs	r1, #178	; 0xb2
 80183e6:	4a0b      	ldr	r2, [pc, #44]	; (8018414 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80183e8:	e7f4      	b.n	80183d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 80183ea:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80183ee:	4b0d      	ldr	r3, [pc, #52]	; (8018424 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80183f6:	6803      	ldr	r3, [r0, #0]
 80183f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183fa:	4798      	blx	r3
 80183fc:	1a29      	subs	r1, r5, r0
 80183fe:	4633      	mov	r3, r6
 8018400:	4620      	mov	r0, r4
 8018402:	b209      	sxth	r1, r1
 8018404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018408:	4718      	bx	r3
 801840a:	bf00      	nop
 801840c:	20005994 	.word	0x20005994
 8018410:	0802cf50 	.word	0x0802cf50
 8018414:	0802d088 	.word	0x0802d088
 8018418:	0802cf92 	.word	0x0802cf92
 801841c:	20005998 	.word	0x20005998
 8018420:	0802cfbb 	.word	0x0802cfbb
 8018424:	2000599c 	.word	0x2000599c

08018428 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801842c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018430:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018432:	b08c      	sub	sp, #48	; 0x30
 8018434:	4604      	mov	r4, r0
 8018436:	4293      	cmp	r3, r2
 8018438:	4688      	mov	r8, r1
 801843a:	d05f      	beq.n	80184fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801843c:	4e31      	ldr	r6, [pc, #196]	; (8018504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801843e:	6832      	ldr	r2, [r6, #0]
 8018440:	b92a      	cbnz	r2, 801844e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8018442:	4b31      	ldr	r3, [pc, #196]	; (8018508 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8018444:	21b1      	movs	r1, #177	; 0xb1
 8018446:	4a31      	ldr	r2, [pc, #196]	; (801850c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018448:	4831      	ldr	r0, [pc, #196]	; (8018510 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801844a:	f011 f943 	bl	80296d4 <__assert_func>
 801844e:	4d31      	ldr	r5, [pc, #196]	; (8018514 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8018450:	8829      	ldrh	r1, [r5, #0]
 8018452:	4299      	cmp	r1, r3
 8018454:	d803      	bhi.n	801845e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8018456:	4b30      	ldr	r3, [pc, #192]	; (8018518 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8018458:	21b2      	movs	r1, #178	; 0xb2
 801845a:	4a2c      	ldr	r2, [pc, #176]	; (801850c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801845c:	e7f4      	b.n	8018448 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801845e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018462:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018466:	4b2d      	ldr	r3, [pc, #180]	; (801851c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801846e:	2a00      	cmp	r2, #0
 8018470:	d044      	beq.n	80184fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8018472:	784b      	ldrb	r3, [r1, #1]
 8018474:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8018478:	f3c3 0901 	ubfx	r9, r3, #0, #2
 801847c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018480:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8018484:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8018488:	4b25      	ldr	r3, [pc, #148]	; (8018520 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801848a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8018494:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018498:	9207      	str	r2, [sp, #28]
 801849a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801849c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80184a0:	9009      	str	r0, [sp, #36]	; 0x24
 80184a2:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80184a6:	f88d 9020 	strb.w	r9, [sp, #32]
 80184aa:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80184ae:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80184b2:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80184b6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80184ba:	b10a      	cbz	r2, 80184c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80184bc:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80184be:	b907      	cbnz	r7, 80184c2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80184c0:	689f      	ldr	r7, [r3, #8]
 80184c2:	f10d 0914 	add.w	r9, sp, #20
 80184c6:	4621      	mov	r1, r4
 80184c8:	4648      	mov	r0, r9
 80184ca:	f003 f9ed 	bl	801b8a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80184ce:	6833      	ldr	r3, [r6, #0]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d0b6      	beq.n	8018442 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80184d4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80184d6:	882b      	ldrh	r3, [r5, #0]
 80184d8:	428b      	cmp	r3, r1
 80184da:	d9bc      	bls.n	8018456 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80184dc:	4b11      	ldr	r3, [pc, #68]	; (8018524 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80184de:	6818      	ldr	r0, [r3, #0]
 80184e0:	f7fc f926 	bl	8014730 <_ZNK8touchgfx5Texts7getTextEt>
 80184e4:	2300      	movs	r3, #0
 80184e6:	9001      	str	r0, [sp, #4]
 80184e8:	4638      	mov	r0, r7
 80184ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80184ee:	ab07      	add	r3, sp, #28
 80184f0:	9300      	str	r3, [sp, #0]
 80184f2:	4643      	mov	r3, r8
 80184f4:	e899 0006 	ldmia.w	r9, {r1, r2}
 80184f8:	f7fc f8ab 	bl	8014652 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80184fc:	b00c      	add	sp, #48	; 0x30
 80184fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018502:	bf00      	nop
 8018504:	20005994 	.word	0x20005994
 8018508:	0802cf50 	.word	0x0802cf50
 801850c:	0802d088 	.word	0x0802d088
 8018510:	0802cf92 	.word	0x0802cf92
 8018514:	20005998 	.word	0x20005998
 8018518:	0802cfbb 	.word	0x0802cfbb
 801851c:	2000599c 	.word	0x2000599c
 8018520:	20005944 	.word	0x20005944
 8018524:	200059a0 	.word	0x200059a0

08018528 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018528:	b40e      	push	{r1, r2, r3}
 801852a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801852e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018532:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018534:	b09b      	sub	sp, #108	; 0x6c
 8018536:	4604      	mov	r4, r0
 8018538:	4293      	cmp	r3, r2
 801853a:	d061      	beq.n	8018600 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 801853c:	aa24      	add	r2, sp, #144	; 0x90
 801853e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018614 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8018542:	9203      	str	r2, [sp, #12]
 8018544:	f8da 2000 	ldr.w	r2, [sl]
 8018548:	b92a      	cbnz	r2, 8018556 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801854a:	4b2e      	ldr	r3, [pc, #184]	; (8018604 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 801854c:	21b1      	movs	r1, #177	; 0xb1
 801854e:	4a2e      	ldr	r2, [pc, #184]	; (8018608 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8018550:	482e      	ldr	r0, [pc, #184]	; (801860c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8018552:	f011 f8bf 	bl	80296d4 <__assert_func>
 8018556:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8018618 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 801855a:	f8b8 1000 	ldrh.w	r1, [r8]
 801855e:	4299      	cmp	r1, r3
 8018560:	d803      	bhi.n	801856a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8018562:	4b2b      	ldr	r3, [pc, #172]	; (8018610 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8018564:	21b2      	movs	r1, #178	; 0xb2
 8018566:	4a28      	ldr	r2, [pc, #160]	; (8018608 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8018568:	e7f2      	b.n	8018550 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801856a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801861c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 801856e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018572:	f8d9 3000 	ldr.w	r3, [r9]
 8018576:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	4638      	mov	r0, r7
 801857e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018580:	4798      	blx	r3
 8018582:	4606      	mov	r6, r0
 8018584:	b205      	sxth	r5, r0
 8018586:	a804      	add	r0, sp, #16
 8018588:	f003 fe8f 	bl	801c2aa <_ZN8touchgfx12TextProviderC1Ev>
 801858c:	683b      	ldr	r3, [r7, #0]
 801858e:	4638      	mov	r0, r7
 8018590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018592:	4798      	blx	r3
 8018594:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8018596:	4603      	mov	r3, r0
 8018598:	9a03      	ldr	r2, [sp, #12]
 801859a:	a804      	add	r0, sp, #16
 801859c:	f003 feca 	bl	801c334 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80185a0:	f8da 3000 	ldr.w	r3, [sl]
 80185a4:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d0ce      	beq.n	801854a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 80185ac:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80185ae:	f8b8 0000 	ldrh.w	r0, [r8]
 80185b2:	4290      	cmp	r0, r2
 80185b4:	d9d5      	bls.n	8018562 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 80185b6:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 80185ba:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80185be:	f8d9 3000 	ldr.w	r3, [r9]
 80185c2:	787a      	ldrb	r2, [r7, #1]
 80185c4:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 80185c8:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80185cc:	9700      	str	r7, [sp, #0]
 80185ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80185d2:	a804      	add	r0, sp, #16
 80185d4:	f001 fc89 	bl	8019eea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80185d8:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80185dc:	b203      	sxth	r3, r0
 80185de:	18a9      	adds	r1, r5, r2
 80185e0:	2900      	cmp	r1, #0
 80185e2:	dd0b      	ble.n	80185fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 80185e4:	3b01      	subs	r3, #1
 80185e6:	fb13 f302 	smulbb	r3, r3, r2
 80185ea:	fb16 3300 	smlabb	r3, r6, r0, r3
 80185ee:	b21d      	sxth	r5, r3
 80185f0:	4628      	mov	r0, r5
 80185f2:	b01b      	add	sp, #108	; 0x6c
 80185f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185f8:	b003      	add	sp, #12
 80185fa:	4770      	bx	lr
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	dcf7      	bgt.n	80185f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8018600:	2500      	movs	r5, #0
 8018602:	e7f5      	b.n	80185f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8018604:	0802cf50 	.word	0x0802cf50
 8018608:	0802d088 	.word	0x0802d088
 801860c:	0802cf92 	.word	0x0802cf92
 8018610:	0802cfbb 	.word	0x0802cfbb
 8018614:	20005994 	.word	0x20005994
 8018618:	20005998 	.word	0x20005998
 801861c:	2000599c 	.word	0x2000599c

08018620 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8018620:	b570      	push	{r4, r5, r6, lr}
 8018622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018626:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018628:	4604      	mov	r4, r0
 801862a:	4299      	cmp	r1, r3
 801862c:	d01e      	beq.n	801866c <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801862e:	6803      	ldr	r3, [r0, #0]
 8018630:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8018632:	4b0f      	ldr	r3, [pc, #60]	; (8018670 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	b92b      	cbnz	r3, 8018644 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8018638:	4b0e      	ldr	r3, [pc, #56]	; (8018674 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801863a:	21b1      	movs	r1, #177	; 0xb1
 801863c:	4a0e      	ldr	r2, [pc, #56]	; (8018678 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801863e:	480f      	ldr	r0, [pc, #60]	; (801867c <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8018640:	f011 f848 	bl	80296d4 <__assert_func>
 8018644:	4b0e      	ldr	r3, [pc, #56]	; (8018680 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8018646:	881b      	ldrh	r3, [r3, #0]
 8018648:	428b      	cmp	r3, r1
 801864a:	d803      	bhi.n	8018654 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 801864c:	4b0d      	ldr	r3, [pc, #52]	; (8018684 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801864e:	21b2      	movs	r1, #178	; 0xb2
 8018650:	4a09      	ldr	r2, [pc, #36]	; (8018678 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8018652:	e7f4      	b.n	801863e <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8018654:	4b0c      	ldr	r3, [pc, #48]	; (8018688 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8018656:	6818      	ldr	r0, [r3, #0]
 8018658:	f7fc f86a 	bl	8014730 <_ZNK8touchgfx5Texts7getTextEt>
 801865c:	2300      	movs	r3, #0
 801865e:	4601      	mov	r1, r0
 8018660:	46ac      	mov	ip, r5
 8018662:	4620      	mov	r0, r4
 8018664:	461a      	mov	r2, r3
 8018666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801866a:	4760      	bx	ip
 801866c:	2000      	movs	r0, #0
 801866e:	bd70      	pop	{r4, r5, r6, pc}
 8018670:	20005994 	.word	0x20005994
 8018674:	0802cf50 	.word	0x0802cf50
 8018678:	0802d088 	.word	0x0802d088
 801867c:	0802cf92 	.word	0x0802cf92
 8018680:	20005998 	.word	0x20005998
 8018684:	0802cfbb 	.word	0x0802cfbb
 8018688:	200059a0 	.word	0x200059a0

0801868c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801868c:	b538      	push	{r3, r4, r5, lr}
 801868e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018692:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018694:	4604      	mov	r4, r0
 8018696:	429a      	cmp	r2, r3
 8018698:	d014      	beq.n	80186c4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801869a:	6803      	ldr	r3, [r0, #0]
 801869c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801869e:	4798      	blx	r3
 80186a0:	6823      	ldr	r3, [r4, #0]
 80186a2:	4605      	mov	r5, r0
 80186a4:	4620      	mov	r0, r4
 80186a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80186a8:	4798      	blx	r3
 80186aa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80186ae:	b22d      	sxth	r5, r5
 80186b0:	4601      	mov	r1, r0
 80186b2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80186b6:	bf06      	itte	eq
 80186b8:	4602      	moveq	r2, r0
 80186ba:	4629      	moveq	r1, r5
 80186bc:	462a      	movne	r2, r5
 80186be:	4620      	mov	r0, r4
 80186c0:	f7f9 fc63 	bl	8011f8a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80186c4:	bd38      	pop	{r3, r4, r5, pc}

080186c6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 80186c6:	888a      	ldrh	r2, [r1, #4]
 80186c8:	8582      	strh	r2, [r0, #44]	; 0x2c
 80186ca:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80186ce:	b922      	cbnz	r2, 80186da <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 80186d0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80186d4:	b90b      	cbnz	r3, 80186da <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 80186d6:	f7ff bfd9 	b.w	801868c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80186da:	4770      	bx	lr

080186dc <_ZNK8touchgfx3Box12getSolidRectEv>:
 80186dc:	2300      	movs	r3, #0
 80186de:	8083      	strh	r3, [r0, #4]
 80186e0:	80c3      	strh	r3, [r0, #6]
 80186e2:	8003      	strh	r3, [r0, #0]
 80186e4:	8043      	strh	r3, [r0, #2]
 80186e6:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80186ea:	2bff      	cmp	r3, #255	; 0xff
 80186ec:	bf01      	itttt	eq
 80186ee:	890b      	ldrheq	r3, [r1, #8]
 80186f0:	8083      	strheq	r3, [r0, #4]
 80186f2:	894b      	ldrheq	r3, [r1, #10]
 80186f4:	80c3      	strheq	r3, [r0, #6]
 80186f6:	4770      	bx	lr

080186f8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80186f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80186fa:	4604      	mov	r4, r0
 80186fc:	466b      	mov	r3, sp
 80186fe:	6808      	ldr	r0, [r1, #0]
 8018700:	6849      	ldr	r1, [r1, #4]
 8018702:	c303      	stmia	r3!, {r0, r1}
 8018704:	6823      	ldr	r3, [r4, #0]
 8018706:	4669      	mov	r1, sp
 8018708:	4620      	mov	r0, r4
 801870a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801870c:	4798      	blx	r3
 801870e:	4b08      	ldr	r3, [pc, #32]	; (8018730 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018716:	b10a      	cbz	r2, 801871c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018718:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801871a:	b900      	cbnz	r0, 801871e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801871c:	6898      	ldr	r0, [r3, #8]
 801871e:	6803      	ldr	r3, [r0, #0]
 8018720:	4669      	mov	r1, sp
 8018722:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018724:	699d      	ldr	r5, [r3, #24]
 8018726:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801872a:	47a8      	blx	r5
 801872c:	b003      	add	sp, #12
 801872e:	bd30      	pop	{r4, r5, pc}
 8018730:	20005944 	.word	0x20005944

08018734 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8018734:	b570      	push	{r4, r5, r6, lr}
 8018736:	6803      	ldr	r3, [r0, #0]
 8018738:	4604      	mov	r4, r0
 801873a:	4615      	mov	r5, r2
 801873c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801873e:	4798      	blx	r3
 8018740:	6823      	ldr	r3, [r4, #0]
 8018742:	4629      	mov	r1, r5
 8018744:	4620      	mov	r0, r4
 8018746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801874c:	4718      	bx	r3

0801874e <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801874e:	b570      	push	{r4, r5, r6, lr}
 8018750:	6803      	ldr	r3, [r0, #0]
 8018752:	4604      	mov	r4, r0
 8018754:	460e      	mov	r6, r1
 8018756:	4615      	mov	r5, r2
 8018758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801875a:	4798      	blx	r3
 801875c:	8030      	strh	r0, [r6, #0]
 801875e:	6823      	ldr	r3, [r4, #0]
 8018760:	4620      	mov	r0, r4
 8018762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018764:	4798      	blx	r3
 8018766:	8028      	strh	r0, [r5, #0]
 8018768:	bd70      	pop	{r4, r5, r6, pc}

0801876a <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801876a:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801876e:	4770      	bx	lr

08018770 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8018770:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8018774:	4770      	bx	lr

08018776 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8018776:	b510      	push	{r4, lr}
 8018778:	4604      	mov	r4, r0
 801877a:	f000 fb5d 	bl	8018e38 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801877e:	6823      	ldr	r3, [r4, #0]
 8018780:	4620      	mov	r0, r4
 8018782:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8018786:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801878a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801878c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018790:	4718      	bx	r3

08018792 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8018792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018794:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8018798:	4605      	mov	r5, r0
 801879a:	8541      	strh	r1, [r0, #42]	; 0x2a
 801879c:	4630      	mov	r0, r6
 801879e:	f005 f96f 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80187a2:	b1a0      	cbz	r0, 80187ce <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 80187a4:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 80187a8:	4630      	mov	r0, r6
 80187aa:	f005 f969 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80187ae:	fb97 f4f0 	sdiv	r4, r7, r0
 80187b2:	fb04 7410 	mls	r4, r4, r0, r7
 80187b6:	4630      	mov	r0, r6
 80187b8:	f005 f962 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80187bc:	4404      	add	r4, r0
 80187be:	4630      	mov	r0, r6
 80187c0:	f005 f95e 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80187c4:	fb94 f3f0 	sdiv	r3, r4, r0
 80187c8:	fb03 4010 	mls	r0, r3, r0, r4
 80187cc:	8568      	strh	r0, [r5, #42]	; 0x2a
 80187ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080187d0 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 80187d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187d2:	f100 0626 	add.w	r6, r0, #38	; 0x26
 80187d6:	4605      	mov	r5, r0
 80187d8:	8581      	strh	r1, [r0, #44]	; 0x2c
 80187da:	4630      	mov	r0, r6
 80187dc:	f005 f98a 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80187e0:	b1a0      	cbz	r0, 801880c <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 80187e2:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 80187e6:	4630      	mov	r0, r6
 80187e8:	f005 f984 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80187ec:	fb97 f4f0 	sdiv	r4, r7, r0
 80187f0:	fb04 7410 	mls	r4, r4, r0, r7
 80187f4:	4630      	mov	r0, r6
 80187f6:	f005 f97d 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80187fa:	4404      	add	r4, r0
 80187fc:	4630      	mov	r0, r6
 80187fe:	f005 f979 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018802:	fb94 f3f0 	sdiv	r3, r4, r0
 8018806:	fb03 4010 	mls	r0, r3, r0, r4
 801880a:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801880c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018810 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8018810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018814:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 8018818:	b093      	sub	sp, #76	; 0x4c
 801881a:	4607      	mov	r7, r0
 801881c:	460e      	mov	r6, r1
 801881e:	4658      	mov	r0, fp
 8018820:	f005 f92e 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018824:	4605      	mov	r5, r0
 8018826:	4658      	mov	r0, fp
 8018828:	f005 f964 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801882c:	4680      	mov	r8, r0
 801882e:	2d00      	cmp	r5, #0
 8018830:	f000 80c5 	beq.w	80189be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8018834:	2800      	cmp	r0, #0
 8018836:	f000 80c2 	beq.w	80189be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801883a:	2300      	movs	r3, #0
 801883c:	a90e      	add	r1, sp, #56	; 0x38
 801883e:	4638      	mov	r0, r7
 8018840:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8018844:	683b      	ldr	r3, [r7, #0]
 8018846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018848:	4798      	blx	r3
 801884a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801884e:	f9b6 3000 	ldrsh.w	r3, [r6]
 8018852:	88b1      	ldrh	r1, [r6, #4]
 8018854:	189c      	adds	r4, r3, r2
 8018856:	440b      	add	r3, r1
 8018858:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801885c:	fa02 f383 	sxtah	r3, r2, r3
 8018860:	3b01      	subs	r3, #1
 8018862:	fb93 f3f5 	sdiv	r3, r3, r5
 8018866:	fb94 f4f5 	sdiv	r4, r4, r5
 801886a:	fb13 f305 	smulbb	r3, r3, r5
 801886e:	fb14 f405 	smulbb	r4, r4, r5
 8018872:	b21b      	sxth	r3, r3
 8018874:	1aa4      	subs	r4, r4, r2
 8018876:	930b      	str	r3, [sp, #44]	; 0x2c
 8018878:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801887c:	b2a4      	uxth	r4, r4
 801887e:	185a      	adds	r2, r3, r1
 8018880:	fb92 f2f8 	sdiv	r2, r2, r8
 8018884:	fb12 f208 	smulbb	r2, r2, r8
 8018888:	1a52      	subs	r2, r2, r1
 801888a:	b212      	sxth	r2, r2
 801888c:	920c      	str	r2, [sp, #48]	; 0x30
 801888e:	88f2      	ldrh	r2, [r6, #6]
 8018890:	4413      	add	r3, r2
 8018892:	fa01 f383 	sxtah	r3, r1, r3
 8018896:	3b01      	subs	r3, #1
 8018898:	fb93 f3f8 	sdiv	r3, r3, r8
 801889c:	fb13 f308 	smulbb	r3, r3, r8
 80188a0:	b21b      	sxth	r3, r3
 80188a2:	930d      	str	r3, [sp, #52]	; 0x34
 80188a4:	1963      	adds	r3, r4, r5
 80188a6:	fa1f fa83 	uxth.w	sl, r3
 80188aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80188ac:	b223      	sxth	r3, r4
 80188ae:	4293      	cmp	r3, r2
 80188b0:	9305      	str	r3, [sp, #20]
 80188b2:	f300 8084 	bgt.w	80189be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80188b6:	fa0f f38a 	sxth.w	r3, sl
 80188ba:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80188be:	930a      	str	r3, [sp, #40]	; 0x28
 80188c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188c2:	4599      	cmp	r9, r3
 80188c4:	dd04      	ble.n	80188d0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 80188c6:	442c      	add	r4, r5
 80188c8:	eb05 030a 	add.w	r3, r5, sl
 80188cc:	b2a4      	uxth	r4, r4
 80188ce:	e7ea      	b.n	80188a6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 80188d0:	f9b6 c000 	ldrsh.w	ip, [r6]
 80188d4:	88b2      	ldrh	r2, [r6, #4]
 80188d6:	4462      	add	r2, ip
 80188d8:	b292      	uxth	r2, r2
 80188da:	b213      	sxth	r3, r2
 80188dc:	9308      	str	r3, [sp, #32]
 80188de:	fa1f f389 	uxth.w	r3, r9
 80188e2:	eb08 0103 	add.w	r1, r8, r3
 80188e6:	9306      	str	r3, [sp, #24]
 80188e8:	b289      	uxth	r1, r1
 80188ea:	b208      	sxth	r0, r1
 80188ec:	9007      	str	r0, [sp, #28]
 80188ee:	9805      	ldr	r0, [sp, #20]
 80188f0:	4603      	mov	r3, r0
 80188f2:	9808      	ldr	r0, [sp, #32]
 80188f4:	4283      	cmp	r3, r0
 80188f6:	da5e      	bge.n	80189b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80188f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80188fa:	4584      	cmp	ip, r0
 80188fc:	da5b      	bge.n	80189b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80188fe:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8018902:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8018906:	4486      	add	lr, r0
 8018908:	fa1f fe8e 	uxth.w	lr, lr
 801890c:	fa0f f38e 	sxth.w	r3, lr
 8018910:	4599      	cmp	r9, r3
 8018912:	9309      	str	r3, [sp, #36]	; 0x24
 8018914:	da4f      	bge.n	80189b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8018916:	9b07      	ldr	r3, [sp, #28]
 8018918:	4298      	cmp	r0, r3
 801891a:	da4c      	bge.n	80189b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801891c:	9b05      	ldr	r3, [sp, #20]
 801891e:	459c      	cmp	ip, r3
 8018920:	bfb8      	it	lt
 8018922:	469c      	movlt	ip, r3
 8018924:	4548      	cmp	r0, r9
 8018926:	9b08      	ldr	r3, [sp, #32]
 8018928:	bfb8      	it	lt
 801892a:	4648      	movlt	r0, r9
 801892c:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 8018930:	4699      	mov	r9, r3
 8018932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018934:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8018938:	4599      	cmp	r9, r3
 801893a:	bfc8      	it	gt
 801893c:	4652      	movgt	r2, sl
 801893e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018940:	eba2 020c 	sub.w	r2, r2, ip
 8018944:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8018948:	9a07      	ldr	r2, [sp, #28]
 801894a:	4293      	cmp	r3, r2
 801894c:	bfd8      	it	le
 801894e:	4671      	movle	r1, lr
 8018950:	1a09      	subs	r1, r1, r0
 8018952:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8018956:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801895a:	9b06      	ldr	r3, [sp, #24]
 801895c:	1b12      	subs	r2, r2, r4
 801895e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018962:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018966:	1ad2      	subs	r2, r2, r3
 8018968:	4b16      	ldr	r3, [pc, #88]	; (80189c4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801896a:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801896e:	681a      	ldr	r2, [r3, #0]
 8018970:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8018974:	b109      	cbz	r1, 801897a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 8018976:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8018978:	b900      	cbnz	r0, 801897c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801897a:	6890      	ldr	r0, [r2, #8]
 801897c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018980:	f04f 0c01 	mov.w	ip, #1
 8018984:	9b06      	ldr	r3, [sp, #24]
 8018986:	6801      	ldr	r1, [r0, #0]
 8018988:	4413      	add	r3, r2
 801898a:	f8cd c008 	str.w	ip, [sp, #8]
 801898e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018992:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8018996:	b21b      	sxth	r3, r3
 8018998:	4422      	add	r2, r4
 801899a:	f8cd c004 	str.w	ip, [sp, #4]
 801899e:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80189a2:	b212      	sxth	r2, r2
 80189a4:	f8cd c000 	str.w	ip, [sp]
 80189a8:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80189ac:	4659      	mov	r1, fp
 80189ae:	47c8      	blx	r9
 80189b0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80189b4:	e784      	b.n	80188c0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 80189b6:	2300      	movs	r3, #0
 80189b8:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 80189bc:	e7cb      	b.n	8018956 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 80189be:	b013      	add	sp, #76	; 0x4c
 80189c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189c4:	20005944 	.word	0x20005944

080189c8 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 80189c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189cc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80189d0:	4606      	mov	r6, r0
 80189d2:	4689      	mov	r9, r1
 80189d4:	2bff      	cmp	r3, #255	; 0xff
 80189d6:	d008      	beq.n	80189ea <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80189d8:	2300      	movs	r3, #0
 80189da:	8003      	strh	r3, [r0, #0]
 80189dc:	8043      	strh	r3, [r0, #2]
 80189de:	8083      	strh	r3, [r0, #4]
 80189e0:	4630      	mov	r0, r6
 80189e2:	80f3      	strh	r3, [r6, #6]
 80189e4:	b003      	add	sp, #12
 80189e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ea:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 80189ee:	4668      	mov	r0, sp
 80189f0:	4659      	mov	r1, fp
 80189f2:	f005 f8b9 	bl	801db68 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80189f6:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80189fa:	4658      	mov	r0, fp
 80189fc:	f9bd 7000 	ldrsh.w	r7, [sp]
 8018a00:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8018a04:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8018a08:	f005 f83a 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018a0c:	4284      	cmp	r4, r0
 8018a0e:	d10d      	bne.n	8018a2c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8018a10:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8018a14:	4658      	mov	r0, fp
 8018a16:	f005 f86d 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018a1a:	4580      	cmp	r8, r0
 8018a1c:	d12a      	bne.n	8018a74 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 8018a1e:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 8018a22:	8037      	strh	r7, [r6, #0]
 8018a24:	f8a6 a002 	strh.w	sl, [r6, #2]
 8018a28:	80b5      	strh	r5, [r6, #4]
 8018a2a:	e7d9      	b.n	80189e0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8018a2c:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 8018a30:	4658      	mov	r0, fp
 8018a32:	f005 f825 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018a36:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8018a3a:	1b7f      	subs	r7, r7, r5
 8018a3c:	b2a3      	uxth	r3, r4
 8018a3e:	b2bd      	uxth	r5, r7
 8018a40:	b22f      	sxth	r7, r5
 8018a42:	4428      	add	r0, r5
 8018a44:	2f00      	cmp	r7, #0
 8018a46:	b280      	uxth	r0, r0
 8018a48:	bfb8      	it	lt
 8018a4a:	18ed      	addlt	r5, r5, r3
 8018a4c:	4403      	add	r3, r0
 8018a4e:	bfac      	ite	ge
 8018a50:	4625      	movge	r5, r4
 8018a52:	2700      	movlt	r7, #0
 8018a54:	b29b      	uxth	r3, r3
 8018a56:	bfb8      	it	lt
 8018a58:	b22d      	sxthlt	r5, r5
 8018a5a:	b219      	sxth	r1, r3
 8018a5c:	bfb8      	it	lt
 8018a5e:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8018a62:	4291      	cmp	r1, r2
 8018a64:	bfc4      	itt	gt
 8018a66:	1a9c      	subgt	r4, r3, r2
 8018a68:	b224      	sxthgt	r4, r4
 8018a6a:	42ac      	cmp	r4, r5
 8018a6c:	bfc4      	itt	gt
 8018a6e:	b207      	sxthgt	r7, r0
 8018a70:	4625      	movgt	r5, r4
 8018a72:	e7cf      	b.n	8018a14 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8018a74:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8018a78:	4658      	mov	r0, fp
 8018a7a:	f005 f83b 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018a7e:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8018a82:	ebaa 0404 	sub.w	r4, sl, r4
 8018a86:	fa1f f288 	uxth.w	r2, r8
 8018a8a:	b2a4      	uxth	r4, r4
 8018a8c:	fa0f fa84 	sxth.w	sl, r4
 8018a90:	4420      	add	r0, r4
 8018a92:	f1ba 0f00 	cmp.w	sl, #0
 8018a96:	b280      	uxth	r0, r0
 8018a98:	bfb8      	it	lt
 8018a9a:	18a3      	addlt	r3, r4, r2
 8018a9c:	4402      	add	r2, r0
 8018a9e:	bfac      	ite	ge
 8018aa0:	4643      	movge	r3, r8
 8018aa2:	f04f 0a00 	movlt.w	sl, #0
 8018aa6:	b292      	uxth	r2, r2
 8018aa8:	bfb8      	it	lt
 8018aaa:	b21b      	sxthlt	r3, r3
 8018aac:	b214      	sxth	r4, r2
 8018aae:	bfb8      	it	lt
 8018ab0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018ab4:	428c      	cmp	r4, r1
 8018ab6:	bfc4      	itt	gt
 8018ab8:	eba2 0801 	subgt.w	r8, r2, r1
 8018abc:	fa0f f888 	sxthgt.w	r8, r8
 8018ac0:	4598      	cmp	r8, r3
 8018ac2:	bfc4      	itt	gt
 8018ac4:	fa0f fa80 	sxthgt.w	sl, r0
 8018ac8:	4643      	movgt	r3, r8
 8018aca:	e7aa      	b.n	8018a22 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08018acc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8018acc:	b570      	push	{r4, r5, r6, lr}
 8018ace:	880b      	ldrh	r3, [r1, #0]
 8018ad0:	4605      	mov	r5, r0
 8018ad2:	4604      	mov	r4, r0
 8018ad4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018ad6:	8813      	ldrh	r3, [r2, #0]
 8018ad8:	f825 3f30 	strh.w	r3, [r5, #48]!
 8018adc:	4628      	mov	r0, r5
 8018ade:	f004 ffcf 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018ae2:	4606      	mov	r6, r0
 8018ae4:	4628      	mov	r0, r5
 8018ae6:	f005 f805 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018aea:	6823      	ldr	r3, [r4, #0]
 8018aec:	4605      	mov	r5, r0
 8018aee:	b231      	sxth	r1, r6
 8018af0:	4620      	mov	r0, r4
 8018af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018af4:	4798      	blx	r3
 8018af6:	6823      	ldr	r3, [r4, #0]
 8018af8:	b229      	sxth	r1, r5
 8018afa:	4620      	mov	r0, r4
 8018afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b02:	4718      	bx	r3

08018b04 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8018b04:	b510      	push	{r4, lr}
 8018b06:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8018b0a:	4604      	mov	r4, r0
 8018b0c:	2bff      	cmp	r3, #255	; 0xff
 8018b0e:	d006      	beq.n	8018b1e <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8018b10:	2300      	movs	r3, #0
 8018b12:	8003      	strh	r3, [r0, #0]
 8018b14:	8043      	strh	r3, [r0, #2]
 8018b16:	8083      	strh	r3, [r0, #4]
 8018b18:	80c3      	strh	r3, [r0, #6]
 8018b1a:	4620      	mov	r0, r4
 8018b1c:	bd10      	pop	{r4, pc}
 8018b1e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8018b22:	b11b      	cbz	r3, 8018b2c <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8018b24:	3130      	adds	r1, #48	; 0x30
 8018b26:	f005 f81f 	bl	801db68 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018b2a:	e7f6      	b.n	8018b1a <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8018b2c:	312e      	adds	r1, #46	; 0x2e
 8018b2e:	e7fa      	b.n	8018b26 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08018b30 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8018b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b34:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8018b38:	b08a      	sub	sp, #40	; 0x28
 8018b3a:	4604      	mov	r4, r0
 8018b3c:	4688      	mov	r8, r1
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d044      	beq.n	8018bcc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8018b42:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018b44:	a805      	add	r0, sp, #20
 8018b46:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018b4a:	f004 ff99 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018b4e:	4605      	mov	r5, r0
 8018b50:	b206      	sxth	r6, r0
 8018b52:	a805      	add	r0, sp, #20
 8018b54:	f004 ffce 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018b58:	f9b8 2000 	ldrsh.w	r2, [r8]
 8018b5c:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8018b60:	2300      	movs	r3, #0
 8018b62:	fa0f fc80 	sxth.w	ip, r0
 8018b66:	4417      	add	r7, r2
 8018b68:	9306      	str	r3, [sp, #24]
 8018b6a:	b2bf      	uxth	r7, r7
 8018b6c:	fa0f fe87 	sxth.w	lr, r7
 8018b70:	459e      	cmp	lr, r3
 8018b72:	dd2d      	ble.n	8018bd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018b74:	4296      	cmp	r6, r2
 8018b76:	dd2b      	ble.n	8018bd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018b78:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8018b7c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8018b80:	4419      	add	r1, r3
 8018b82:	b289      	uxth	r1, r1
 8018b84:	fa0f f881 	sxth.w	r8, r1
 8018b88:	f1b8 0f00 	cmp.w	r8, #0
 8018b8c:	dd20      	ble.n	8018bd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018b8e:	459c      	cmp	ip, r3
 8018b90:	dd1e      	ble.n	8018bd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018b92:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8018b96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b9a:	4576      	cmp	r6, lr
 8018b9c:	bfa8      	it	ge
 8018b9e:	463d      	movge	r5, r7
 8018ba0:	45c4      	cmp	ip, r8
 8018ba2:	bfa8      	it	ge
 8018ba4:	4608      	movge	r0, r1
 8018ba6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018baa:	1aad      	subs	r5, r5, r2
 8018bac:	1ac0      	subs	r0, r0, r3
 8018bae:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018bb2:	f8ad 501c 	strh.w	r5, [sp, #28]
 8018bb6:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018bba:	4b1f      	ldr	r3, [pc, #124]	; (8018c38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	b953      	cbnz	r3, 8018bd6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8018bc0:	4b1e      	ldr	r3, [pc, #120]	; (8018c3c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8018bc2:	218b      	movs	r1, #139	; 0x8b
 8018bc4:	4a1e      	ldr	r2, [pc, #120]	; (8018c40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8018bc6:	481f      	ldr	r0, [pc, #124]	; (8018c44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8018bc8:	f010 fd84 	bl	80296d4 <__assert_func>
 8018bcc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018bce:	e7b9      	b.n	8018b44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	9307      	str	r3, [sp, #28]
 8018bd4:	e7f1      	b.n	8018bba <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8018bd6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018bde:	429a      	cmp	r2, r3
 8018be0:	d026      	beq.n	8018c30 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018be2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	dd22      	ble.n	8018c30 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018bea:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	dd1e      	ble.n	8018c30 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	a908      	add	r1, sp, #32
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8018bfc:	6823      	ldr	r3, [r4, #0]
 8018bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c00:	4798      	blx	r3
 8018c02:	4b11      	ldr	r3, [pc, #68]	; (8018c48 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018c0a:	b10a      	cbz	r2, 8018c10 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8018c0c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018c0e:	b900      	cbnz	r0, 8018c12 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8018c10:	6898      	ldr	r0, [r3, #8]
 8018c12:	2501      	movs	r5, #1
 8018c14:	6801      	ldr	r1, [r0, #0]
 8018c16:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8018c1a:	9502      	str	r5, [sp, #8]
 8018c1c:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8018c20:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018c24:	9401      	str	r4, [sp, #4]
 8018c26:	ac06      	add	r4, sp, #24
 8018c28:	9400      	str	r4, [sp, #0]
 8018c2a:	688c      	ldr	r4, [r1, #8]
 8018c2c:	a905      	add	r1, sp, #20
 8018c2e:	47a0      	blx	r4
 8018c30:	b00a      	add	sp, #40	; 0x28
 8018c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c36:	bf00      	nop
 8018c38:	200059cc 	.word	0x200059cc
 8018c3c:	0802c26c 	.word	0x0802c26c
 8018c40:	0802d20c 	.word	0x0802d20c
 8018c44:	0802c2a8 	.word	0x0802c2a8
 8018c48:	20005944 	.word	0x20005944

08018c4c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8018c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c52:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018c54:	4606      	mov	r6, r0
 8018c56:	4299      	cmp	r1, r3
 8018c58:	d02a      	beq.n	8018cb0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8018c5a:	4b16      	ldr	r3, [pc, #88]	; (8018cb4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	b92b      	cbnz	r3, 8018c6c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8018c60:	4b15      	ldr	r3, [pc, #84]	; (8018cb8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8018c62:	21b1      	movs	r1, #177	; 0xb1
 8018c64:	4a15      	ldr	r2, [pc, #84]	; (8018cbc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018c66:	4816      	ldr	r0, [pc, #88]	; (8018cc0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8018c68:	f010 fd34 	bl	80296d4 <__assert_func>
 8018c6c:	4a15      	ldr	r2, [pc, #84]	; (8018cc4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8018c6e:	8812      	ldrh	r2, [r2, #0]
 8018c70:	428a      	cmp	r2, r1
 8018c72:	d803      	bhi.n	8018c7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8018c74:	4b14      	ldr	r3, [pc, #80]	; (8018cc8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8018c76:	21b2      	movs	r1, #178	; 0xb2
 8018c78:	4a10      	ldr	r2, [pc, #64]	; (8018cbc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018c7a:	e7f4      	b.n	8018c66 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8018c7c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018c80:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018c84:	4b11      	ldr	r3, [pc, #68]	; (8018ccc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8018c86:	7854      	ldrb	r4, [r2, #1]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018c8e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8018c92:	682b      	ldr	r3, [r5, #0]
 8018c94:	69df      	ldr	r7, [r3, #28]
 8018c96:	4b0e      	ldr	r3, [pc, #56]	; (8018cd0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8018c98:	6818      	ldr	r0, [r3, #0]
 8018c9a:	f7fb fd49 	bl	8014730 <_ZNK8touchgfx5Texts7getTextEt>
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	4602      	mov	r2, r0
 8018ca2:	4621      	mov	r1, r4
 8018ca4:	9300      	str	r3, [sp, #0]
 8018ca6:	4628      	mov	r0, r5
 8018ca8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8018caa:	47b8      	blx	r7
 8018cac:	b003      	add	sp, #12
 8018cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cb0:	2000      	movs	r0, #0
 8018cb2:	e7fb      	b.n	8018cac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8018cb4:	20005994 	.word	0x20005994
 8018cb8:	0802cf50 	.word	0x0802cf50
 8018cbc:	0802d2b8 	.word	0x0802d2b8
 8018cc0:	0802cf92 	.word	0x0802cf92
 8018cc4:	20005998 	.word	0x20005998
 8018cc8:	0802cfbb 	.word	0x0802cfbb
 8018ccc:	2000599c 	.word	0x2000599c
 8018cd0:	200059a0 	.word	0x200059a0

08018cd4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8018cd4:	b570      	push	{r4, r5, r6, lr}
 8018cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018cda:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018cdc:	4604      	mov	r4, r0
 8018cde:	4299      	cmp	r1, r3
 8018ce0:	d01e      	beq.n	8018d20 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8018ce2:	6803      	ldr	r3, [r0, #0]
 8018ce4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8018ce6:	4b0f      	ldr	r3, [pc, #60]	; (8018d24 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	b92b      	cbnz	r3, 8018cf8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8018cec:	4b0e      	ldr	r3, [pc, #56]	; (8018d28 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8018cee:	21b1      	movs	r1, #177	; 0xb1
 8018cf0:	4a0e      	ldr	r2, [pc, #56]	; (8018d2c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018cf2:	480f      	ldr	r0, [pc, #60]	; (8018d30 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8018cf4:	f010 fcee 	bl	80296d4 <__assert_func>
 8018cf8:	4b0e      	ldr	r3, [pc, #56]	; (8018d34 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8018cfa:	881b      	ldrh	r3, [r3, #0]
 8018cfc:	428b      	cmp	r3, r1
 8018cfe:	d803      	bhi.n	8018d08 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8018d00:	4b0d      	ldr	r3, [pc, #52]	; (8018d38 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8018d02:	21b2      	movs	r1, #178	; 0xb2
 8018d04:	4a09      	ldr	r2, [pc, #36]	; (8018d2c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018d06:	e7f4      	b.n	8018cf2 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8018d08:	4b0c      	ldr	r3, [pc, #48]	; (8018d3c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8018d0a:	6818      	ldr	r0, [r3, #0]
 8018d0c:	f7fb fd10 	bl	8014730 <_ZNK8touchgfx5Texts7getTextEt>
 8018d10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018d12:	4601      	mov	r1, r0
 8018d14:	46ac      	mov	ip, r5
 8018d16:	4620      	mov	r0, r4
 8018d18:	2300      	movs	r3, #0
 8018d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d1e:	4760      	bx	ip
 8018d20:	2000      	movs	r0, #0
 8018d22:	bd70      	pop	{r4, r5, r6, pc}
 8018d24:	20005994 	.word	0x20005994
 8018d28:	0802cf50 	.word	0x0802cf50
 8018d2c:	0802d2b8 	.word	0x0802d2b8
 8018d30:	0802cf92 	.word	0x0802cf92
 8018d34:	20005998 	.word	0x20005998
 8018d38:	0802cfbb 	.word	0x0802cfbb
 8018d3c:	200059a0 	.word	0x200059a0

08018d40 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8018d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d48:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018d4a:	b08c      	sub	sp, #48	; 0x30
 8018d4c:	4604      	mov	r4, r0
 8018d4e:	4293      	cmp	r3, r2
 8018d50:	460e      	mov	r6, r1
 8018d52:	d05d      	beq.n	8018e10 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018d54:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8018e34 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8018d58:	f8d8 2000 	ldr.w	r2, [r8]
 8018d5c:	b92a      	cbnz	r2, 8018d6a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8018d5e:	4b2e      	ldr	r3, [pc, #184]	; (8018e18 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8018d60:	21b1      	movs	r1, #177	; 0xb1
 8018d62:	4a2e      	ldr	r2, [pc, #184]	; (8018e1c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018d64:	482e      	ldr	r0, [pc, #184]	; (8018e20 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8018d66:	f010 fcb5 	bl	80296d4 <__assert_func>
 8018d6a:	4f2e      	ldr	r7, [pc, #184]	; (8018e24 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8018d6c:	8839      	ldrh	r1, [r7, #0]
 8018d6e:	4299      	cmp	r1, r3
 8018d70:	d803      	bhi.n	8018d7a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8018d72:	4b2d      	ldr	r3, [pc, #180]	; (8018e28 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8018d74:	21b2      	movs	r1, #178	; 0xb2
 8018d76:	4a29      	ldr	r2, [pc, #164]	; (8018e1c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018d78:	e7f4      	b.n	8018d64 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8018d7a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018d7e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018d82:	4b2a      	ldr	r3, [pc, #168]	; (8018e2c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018d8a:	2a00      	cmp	r2, #0
 8018d8c:	d040      	beq.n	8018e10 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018d8e:	784b      	ldrb	r3, [r1, #1]
 8018d90:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8018d94:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018d98:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8018d9c:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8018da0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018da4:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8018da8:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8018dac:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8018db0:	ad05      	add	r5, sp, #20
 8018db2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018db4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8018db8:	9207      	str	r2, [sp, #28]
 8018dba:	f88d 9020 	strb.w	r9, [sp, #32]
 8018dbe:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8018dc2:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8018dc6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8018dca:	9009      	str	r0, [sp, #36]	; 0x24
 8018dcc:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8018dd0:	f7f9 f982 	bl	80120d8 <_ZN8touchgfx3HAL3lcdEv>
 8018dd4:	4621      	mov	r1, r4
 8018dd6:	4681      	mov	r9, r0
 8018dd8:	4628      	mov	r0, r5
 8018dda:	f002 fd65 	bl	801b8a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018dde:	f8d8 3000 	ldr.w	r3, [r8]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d0bb      	beq.n	8018d5e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8018de6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018de8:	883b      	ldrh	r3, [r7, #0]
 8018dea:	428b      	cmp	r3, r1
 8018dec:	d9c1      	bls.n	8018d72 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8018dee:	4b10      	ldr	r3, [pc, #64]	; (8018e30 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8018df0:	6818      	ldr	r0, [r3, #0]
 8018df2:	f7fb fc9d 	bl	8014730 <_ZNK8touchgfx5Texts7getTextEt>
 8018df6:	2300      	movs	r3, #0
 8018df8:	9303      	str	r3, [sp, #12]
 8018dfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018dfc:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8018e00:	ab07      	add	r3, sp, #28
 8018e02:	4648      	mov	r0, r9
 8018e04:	9300      	str	r3, [sp, #0]
 8018e06:	4633      	mov	r3, r6
 8018e08:	e895 0006 	ldmia.w	r5, {r1, r2}
 8018e0c:	f7fb fc21 	bl	8014652 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018e10:	b00c      	add	sp, #48	; 0x30
 8018e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e16:	bf00      	nop
 8018e18:	0802cf50 	.word	0x0802cf50
 8018e1c:	0802d2b8 	.word	0x0802d2b8
 8018e20:	0802cf92 	.word	0x0802cf92
 8018e24:	20005998 	.word	0x20005998
 8018e28:	0802cfbb 	.word	0x0802cfbb
 8018e2c:	2000599c 	.word	0x2000599c
 8018e30:	200059a0 	.word	0x200059a0
 8018e34:	20005994 	.word	0x20005994

08018e38 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8018e38:	b570      	push	{r4, r5, r6, lr}
 8018e3a:	880b      	ldrh	r3, [r1, #0]
 8018e3c:	460d      	mov	r5, r1
 8018e3e:	4604      	mov	r4, r0
 8018e40:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018e42:	4608      	mov	r0, r1
 8018e44:	f004 fe1c 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018e48:	4606      	mov	r6, r0
 8018e4a:	4628      	mov	r0, r5
 8018e4c:	f004 fe52 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018e50:	6823      	ldr	r3, [r4, #0]
 8018e52:	4605      	mov	r5, r0
 8018e54:	b231      	sxth	r1, r6
 8018e56:	4620      	mov	r0, r4
 8018e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e5a:	4798      	blx	r3
 8018e5c:	6823      	ldr	r3, [r4, #0]
 8018e5e:	b229      	sxth	r1, r5
 8018e60:	4620      	mov	r0, r4
 8018e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e68:	4718      	bx	r3

08018e6a <_ZNK8touchgfx5Image12getSolidRectEv>:
 8018e6a:	b510      	push	{r4, lr}
 8018e6c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018e70:	4604      	mov	r4, r0
 8018e72:	2bff      	cmp	r3, #255	; 0xff
 8018e74:	d006      	beq.n	8018e84 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8018e76:	2300      	movs	r3, #0
 8018e78:	8003      	strh	r3, [r0, #0]
 8018e7a:	8043      	strh	r3, [r0, #2]
 8018e7c:	8083      	strh	r3, [r0, #4]
 8018e7e:	80c3      	strh	r3, [r0, #6]
 8018e80:	4620      	mov	r0, r4
 8018e82:	bd10      	pop	{r4, pc}
 8018e84:	3126      	adds	r1, #38	; 0x26
 8018e86:	f004 fe6f 	bl	801db68 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018e8a:	e7f9      	b.n	8018e80 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018e8c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e90:	4604      	mov	r4, r0
 8018e92:	b088      	sub	sp, #32
 8018e94:	2500      	movs	r5, #0
 8018e96:	460f      	mov	r7, r1
 8018e98:	f854 3b26 	ldr.w	r3, [r4], #38
 8018e9c:	a904      	add	r1, sp, #16
 8018e9e:	4606      	mov	r6, r0
 8018ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ea2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018ea6:	4798      	blx	r3
 8018ea8:	4620      	mov	r0, r4
 8018eaa:	f004 fde9 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018eae:	4680      	mov	r8, r0
 8018eb0:	4620      	mov	r0, r4
 8018eb2:	f004 fe1f 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018eb6:	9506      	str	r5, [sp, #24]
 8018eb8:	ad06      	add	r5, sp, #24
 8018eba:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018ebe:	4639      	mov	r1, r7
 8018ec0:	f8ad 801c 	strh.w	r8, [sp, #28]
 8018ec4:	4628      	mov	r0, r5
 8018ec6:	f7fe f95f 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 8018eca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	dd19      	ble.n	8018f06 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018ed2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	dd15      	ble.n	8018f06 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018eda:	4b0c      	ldr	r3, [pc, #48]	; (8018f0c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018ee2:	b10a      	cbz	r2, 8018ee8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8018ee4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018ee6:	b900      	cbnz	r0, 8018eea <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8018ee8:	6898      	ldr	r0, [r3, #8]
 8018eea:	2701      	movs	r7, #1
 8018eec:	6801      	ldr	r1, [r0, #0]
 8018eee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018ef2:	9702      	str	r7, [sp, #8]
 8018ef4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8018ef8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018efc:	e9cd 5600 	strd	r5, r6, [sp]
 8018f00:	688d      	ldr	r5, [r1, #8]
 8018f02:	4621      	mov	r1, r4
 8018f04:	47a8      	blx	r5
 8018f06:	b008      	add	sp, #32
 8018f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f0c:	20005944 	.word	0x20005944

08018f10 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f14:	4696      	mov	lr, r2
 8018f16:	b097      	sub	sp, #92	; 0x5c
 8018f18:	4605      	mov	r5, r0
 8018f1a:	4614      	mov	r4, r2
 8018f1c:	460e      	mov	r6, r1
 8018f1e:	461f      	mov	r7, r3
 8018f20:	f10d 0c1c 	add.w	ip, sp, #28
 8018f24:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8018f28:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8018f2c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8018f30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f38:	f8de 3000 	ldr.w	r3, [lr]
 8018f3c:	f104 0e14 	add.w	lr, r4, #20
 8018f40:	f8cc 3000 	str.w	r3, [ip]
 8018f44:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018f48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f50:	f8de 3000 	ldr.w	r3, [lr]
 8018f54:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018f58:	f8cc 3000 	str.w	r3, [ip]
 8018f5c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018f60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f68:	f8de 3000 	ldr.w	r3, [lr]
 8018f6c:	4631      	mov	r1, r6
 8018f6e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018f70:	4628      	mov	r0, r5
 8018f72:	f8cc 3000 	str.w	r3, [ip]
 8018f76:	682b      	ldr	r3, [r5, #0]
 8018f78:	9201      	str	r2, [sp, #4]
 8018f7a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018f7c:	f8cd 8008 	str.w	r8, [sp, #8]
 8018f80:	9200      	str	r2, [sp, #0]
 8018f82:	aa07      	add	r2, sp, #28
 8018f84:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018f88:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 8018f8c:	463b      	mov	r3, r7
 8018f8e:	47d8      	blx	fp
 8018f90:	46a6      	mov	lr, r4
 8018f92:	f10d 0c1c 	add.w	ip, sp, #28
 8018f96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f9e:	f8de 3000 	ldr.w	r3, [lr]
 8018fa2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018fa6:	343c      	adds	r4, #60	; 0x3c
 8018fa8:	f8cc 3000 	str.w	r3, [ip]
 8018fac:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018fb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018fb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018fb8:	f8de 3000 	ldr.w	r3, [lr]
 8018fbc:	f8cc 3000 	str.w	r3, [ip]
 8018fc0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018fc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018fca:	6823      	ldr	r3, [r4, #0]
 8018fcc:	4631      	mov	r1, r6
 8018fce:	4628      	mov	r0, r5
 8018fd0:	f8cc 3000 	str.w	r3, [ip]
 8018fd4:	682b      	ldr	r3, [r5, #0]
 8018fd6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018fda:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018fdc:	f8cd 8008 	str.w	r8, [sp, #8]
 8018fe0:	9201      	str	r2, [sp, #4]
 8018fe2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018fe4:	9200      	str	r2, [sp, #0]
 8018fe6:	aa07      	add	r2, sp, #28
 8018fe8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8018fea:	463b      	mov	r3, r7
 8018fec:	47a0      	blx	r4
 8018fee:	b017      	add	sp, #92	; 0x5c
 8018ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ff4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018ff4:	2000      	movs	r0, #0
 8018ff6:	4770      	bx	lr

08018ff8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ffc:	b08d      	sub	sp, #52	; 0x34
 8018ffe:	4688      	mov	r8, r1
 8019000:	f8d3 c000 	ldr.w	ip, [r3]
 8019004:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019006:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801900a:	680f      	ldr	r7, [r1, #0]
 801900c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8019010:	eba7 070c 	sub.w	r7, r7, ip
 8019014:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8019018:	edd3 6a07 	vldr	s13, [r3, #28]
 801901c:	42bc      	cmp	r4, r7
 801901e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019020:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8019024:	bfa8      	it	ge
 8019026:	463c      	movge	r4, r7
 8019028:	f9b1 9000 	ldrsh.w	r9, [r1]
 801902c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8019030:	ee07 4a90 	vmov	s15, r4
 8019034:	eb09 0e0c 	add.w	lr, r9, ip
 8019038:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801903c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019040:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019044:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8019048:	4571      	cmp	r1, lr
 801904a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801904e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019052:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019056:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801905a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801905e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019062:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019066:	ee36 0a84 	vadd.f32	s0, s13, s8
 801906a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801906e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019072:	f340 808c 	ble.w	801918e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8019076:	eba1 060e 	sub.w	r6, r1, lr
 801907a:	fb96 f5f4 	sdiv	r5, r6, r4
 801907e:	ee07 5a10 	vmov	s14, r5
 8019082:	2d00      	cmp	r5, #0
 8019084:	fb04 6615 	mls	r6, r4, r5, r6
 8019088:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801908c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019090:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019094:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019098:	dd12      	ble.n	80190c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801909a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801909e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80190a2:	ee31 2a45 	vsub.f32	s4, s2, s10
 80190a6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80190aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ae:	bf14      	ite	ne
 80190b0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80190b4:	eeb0 7a67 	vmoveq.f32	s14, s15
 80190b8:	ee61 1a87 	vmul.f32	s3, s3, s14
 80190bc:	ee22 2a07 	vmul.f32	s4, s4, s14
 80190c0:	fb05 f204 	mul.w	r2, r5, r4
 80190c4:	1abf      	subs	r7, r7, r2
 80190c6:	4494      	add	ip, r2
 80190c8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80190cc:	4411      	add	r1, r2
 80190ce:	eb09 020c 	add.w	r2, r9, ip
 80190d2:	b209      	sxth	r1, r1
 80190d4:	443a      	add	r2, r7
 80190d6:	428a      	cmp	r2, r1
 80190d8:	bfc4      	itt	gt
 80190da:	eba1 0209 	subgt.w	r2, r1, r9
 80190de:	eba2 070c 	subgt.w	r7, r2, ip
 80190e2:	2f00      	cmp	r7, #0
 80190e4:	dd50      	ble.n	8019188 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80190e6:	fb97 f1f4 	sdiv	r1, r7, r4
 80190ea:	fb04 7211 	mls	r2, r4, r1, r7
 80190ee:	b90a      	cbnz	r2, 80190f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80190f0:	3901      	subs	r1, #1
 80190f2:	4622      	mov	r2, r4
 80190f4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80190f8:	6840      	ldr	r0, [r0, #4]
 80190fa:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80190fe:	44b6      	add	lr, r6
 8019100:	f8d0 a000 	ldr.w	sl, [r0]
 8019104:	2900      	cmp	r1, #0
 8019106:	bfcc      	ite	gt
 8019108:	46a1      	movgt	r9, r4
 801910a:	4691      	movle	r9, r2
 801910c:	900b      	str	r0, [sp, #44]	; 0x2c
 801910e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019110:	fb04 e505 	mla	r5, r4, r5, lr
 8019114:	eef0 6a42 	vmov.f32	s13, s4
 8019118:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801911c:	9008      	str	r0, [sp, #32]
 801911e:	eeb0 7a61 	vmov.f32	s14, s3
 8019122:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019124:	695b      	ldr	r3, [r3, #20]
 8019126:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801912a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801912e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019132:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019134:	445b      	add	r3, fp
 8019136:	9307      	str	r3, [sp, #28]
 8019138:	ee16 3a90 	vmov	r3, s13
 801913c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019140:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019144:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019148:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801914c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019150:	ee17 7a90 	vmov	r7, s15
 8019154:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019158:	fb97 f7f4 	sdiv	r7, r7, r4
 801915c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019160:	ee17 ca90 	vmov	ip, s15
 8019164:	fb9c fcf4 	sdiv	ip, ip, r4
 8019168:	fb0c 3306 	mla	r3, ip, r6, r3
 801916c:	9302      	str	r3, [sp, #8]
 801916e:	ee17 3a10 	vmov	r3, s14
 8019172:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019176:	fb07 3706 	mla	r7, r7, r6, r3
 801917a:	eba9 0306 	sub.w	r3, r9, r6
 801917e:	e9cd 4700 	strd	r4, r7, [sp]
 8019182:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019186:	47a0      	blx	r4
 8019188:	b00d      	add	sp, #52	; 0x34
 801918a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801918e:	2500      	movs	r5, #0
 8019190:	462e      	mov	r6, r5
 8019192:	e799      	b.n	80190c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019198:	b0db      	sub	sp, #364	; 0x16c
 801919a:	461d      	mov	r5, r3
 801919c:	4614      	mov	r4, r2
 801919e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80191a2:	910f      	str	r1, [sp, #60]	; 0x3c
 80191a4:	4629      	mov	r1, r5
 80191a6:	930a      	str	r3, [sp, #40]	; 0x28
 80191a8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80191ac:	9009      	str	r0, [sp, #36]	; 0x24
 80191ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80191b0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80191b4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80191b8:	9310      	str	r3, [sp, #64]	; 0x40
 80191ba:	6803      	ldr	r3, [r0, #0]
 80191bc:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 80191be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80191c2:	47b8      	blx	r7
 80191c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191c6:	6058      	str	r0, [r3, #4]
 80191c8:	2800      	cmp	r0, #0
 80191ca:	f000 83a1 	beq.w	8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80191ce:	682b      	ldr	r3, [r5, #0]
 80191d0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80191d4:	ed94 7a02 	vldr	s14, [r4, #8]
 80191d8:	9314      	str	r3, [sp, #80]	; 0x50
 80191da:	686b      	ldr	r3, [r5, #4]
 80191dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80191e0:	9315      	str	r3, [sp, #84]	; 0x54
 80191e2:	4bc1      	ldr	r3, [pc, #772]	; (80194e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80191e4:	7819      	ldrb	r1, [r3, #0]
 80191e6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80191ea:	2900      	cmp	r1, #0
 80191ec:	bf16      	itet	ne
 80191ee:	4619      	movne	r1, r3
 80191f0:	4611      	moveq	r1, r2
 80191f2:	4613      	movne	r3, r2
 80191f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191f8:	9116      	str	r1, [sp, #88]	; 0x58
 80191fa:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80191fe:	f240 8387 	bls.w	8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019202:	ed94 7a07 	vldr	s14, [r4, #28]
 8019206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801920a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801920e:	f240 837f 	bls.w	8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019212:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8019216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801921a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801921e:	f240 8377 	bls.w	8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019222:	6822      	ldr	r2, [r4, #0]
 8019224:	4bb1      	ldr	r3, [pc, #708]	; (80194ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019226:	429a      	cmp	r2, r3
 8019228:	f2c0 8372 	blt.w	8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801922c:	49b0      	ldr	r1, [pc, #704]	; (80194f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801922e:	6963      	ldr	r3, [r4, #20]
 8019230:	428a      	cmp	r2, r1
 8019232:	f300 836d 	bgt.w	8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019236:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801923a:	48ae      	ldr	r0, [pc, #696]	; (80194f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801923c:	33ff      	adds	r3, #255	; 0xff
 801923e:	4283      	cmp	r3, r0
 8019240:	f200 8366 	bhi.w	8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019244:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019246:	4dac      	ldr	r5, [pc, #688]	; (80194f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019248:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801924c:	33ff      	adds	r3, #255	; 0xff
 801924e:	42ab      	cmp	r3, r5
 8019250:	f200 835e 	bhi.w	8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019254:	6862      	ldr	r2, [r4, #4]
 8019256:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801925a:	33ff      	adds	r3, #255	; 0xff
 801925c:	4283      	cmp	r3, r0
 801925e:	f200 8357 	bhi.w	8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019262:	69a1      	ldr	r1, [r4, #24]
 8019264:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8019268:	33ff      	adds	r3, #255	; 0xff
 801926a:	4283      	cmp	r3, r0
 801926c:	f200 8350 	bhi.w	8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019270:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019272:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8019276:	30ff      	adds	r0, #255	; 0xff
 8019278:	42a8      	cmp	r0, r5
 801927a:	f200 8349 	bhi.w	8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801927e:	428a      	cmp	r2, r1
 8019280:	f280 8110 	bge.w	80194a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019284:	429a      	cmp	r2, r3
 8019286:	f300 8119 	bgt.w	80194bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801928a:	4299      	cmp	r1, r3
 801928c:	f280 811d 	bge.w	80194ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019290:	2502      	movs	r5, #2
 8019292:	2701      	movs	r7, #1
 8019294:	46a9      	mov	r9, r5
 8019296:	46b8      	mov	r8, r7
 8019298:	f04f 0a00 	mov.w	sl, #0
 801929c:	4621      	mov	r1, r4
 801929e:	a849      	add	r0, sp, #292	; 0x124
 80192a0:	f003 fdbc 	bl	801ce1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80192a4:	4622      	mov	r2, r4
 80192a6:	4653      	mov	r3, sl
 80192a8:	a949      	add	r1, sp, #292	; 0x124
 80192aa:	f8cd 9000 	str.w	r9, [sp]
 80192ae:	a819      	add	r0, sp, #100	; 0x64
 80192b0:	f003 fee4 	bl	801d07c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80192b4:	4622      	mov	r2, r4
 80192b6:	4653      	mov	r3, sl
 80192b8:	a949      	add	r1, sp, #292	; 0x124
 80192ba:	f8cd 8000 	str.w	r8, [sp]
 80192be:	a829      	add	r0, sp, #164	; 0xa4
 80192c0:	f003 fedc 	bl	801d07c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80192c4:	4643      	mov	r3, r8
 80192c6:	4622      	mov	r2, r4
 80192c8:	a949      	add	r1, sp, #292	; 0x124
 80192ca:	f8cd 9000 	str.w	r9, [sp]
 80192ce:	a839      	add	r0, sp, #228	; 0xe4
 80192d0:	f003 fed4 	bl	801d07c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80192d4:	42af      	cmp	r7, r5
 80192d6:	af12      	add	r7, sp, #72	; 0x48
 80192d8:	bfb7      	itett	lt
 80192da:	2300      	movlt	r3, #0
 80192dc:	2301      	movge	r3, #1
 80192de:	ad29      	addlt	r5, sp, #164	; 0xa4
 80192e0:	ac19      	addlt	r4, sp, #100	; 0x64
 80192e2:	bfb1      	iteee	lt
 80192e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80192e6:	ad19      	addge	r5, sp, #100	; 0x64
 80192e8:	930e      	strge	r3, [sp, #56]	; 0x38
 80192ea:	ac29      	addge	r4, sp, #164	; 0xa4
 80192ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80192ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80192f2:	e887 0003 	stmia.w	r7, {r0, r1}
 80192f6:	b928      	cbnz	r0, 8019304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80192f8:	4b80      	ldr	r3, [pc, #512]	; (80194fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80192fa:	6818      	ldr	r0, [r3, #0]
 80192fc:	6803      	ldr	r3, [r0, #0]
 80192fe:	6a1b      	ldr	r3, [r3, #32]
 8019300:	4798      	blx	r3
 8019302:	6038      	str	r0, [r7, #0]
 8019304:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019306:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801930a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801930e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019310:	930c      	str	r3, [sp, #48]	; 0x30
 8019312:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019314:	6963      	ldr	r3, [r4, #20]
 8019316:	440b      	add	r3, r1
 8019318:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801931c:	4408      	add	r0, r1
 801931e:	b200      	sxth	r0, r0
 8019320:	4283      	cmp	r3, r0
 8019322:	900d      	str	r0, [sp, #52]	; 0x34
 8019324:	f280 80dd 	bge.w	80194e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019328:	428b      	cmp	r3, r1
 801932a:	da08      	bge.n	801933e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801932c:	2a00      	cmp	r2, #0
 801932e:	dd06      	ble.n	801933e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019330:	1acb      	subs	r3, r1, r3
 8019332:	429a      	cmp	r2, r3
 8019334:	f2c0 80e4 	blt.w	8019500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019338:	2b00      	cmp	r3, #0
 801933a:	f300 80e2 	bgt.w	8019502 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801933e:	6967      	ldr	r7, [r4, #20]
 8019340:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019346:	443b      	add	r3, r7
 8019348:	461f      	mov	r7, r3
 801934a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801934c:	1bdf      	subs	r7, r3, r7
 801934e:	4297      	cmp	r7, r2
 8019350:	bfa8      	it	ge
 8019352:	4617      	movge	r7, r2
 8019354:	2f00      	cmp	r7, #0
 8019356:	f340 8166 	ble.w	8019626 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801935a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801935c:	6829      	ldr	r1, [r5, #0]
 801935e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019362:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019366:	4411      	add	r1, r2
 8019368:	6820      	ldr	r0, [r4, #0]
 801936a:	4299      	cmp	r1, r3
 801936c:	dd1a      	ble.n	80193a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801936e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019372:	4402      	add	r2, r0
 8019374:	440b      	add	r3, r1
 8019376:	b21b      	sxth	r3, r3
 8019378:	429a      	cmp	r2, r3
 801937a:	dc13      	bgt.n	80193a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801937c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801937e:	a912      	add	r1, sp, #72	; 0x48
 8019380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019382:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	9206      	str	r2, [sp, #24]
 8019388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801938a:	9500      	str	r5, [sp, #0]
 801938c:	9205      	str	r2, [sp, #20]
 801938e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019390:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019394:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019396:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801939a:	aa49      	add	r2, sp, #292	; 0x124
 801939c:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 80193a0:	4623      	mov	r3, r4
 80193a2:	47c8      	blx	r9
 80193a4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80193a8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80193ac:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80193b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80193b4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80193b8:	68a1      	ldr	r1, [r4, #8]
 80193ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80193be:	ed94 6a08 	vldr	s12, [r4, #32]
 80193c2:	edd4 6a07 	vldr	s13, [r4, #28]
 80193c6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80193ca:	ee76 6a86 	vadd.f32	s13, s13, s12
 80193ce:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80193d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80193d6:	edc4 6a07 	vstr	s13, [r4, #28]
 80193da:	441a      	add	r2, r3
 80193dc:	6963      	ldr	r3, [r4, #20]
 80193de:	3301      	adds	r3, #1
 80193e0:	6022      	str	r2, [r4, #0]
 80193e2:	6163      	str	r3, [r4, #20]
 80193e4:	69a3      	ldr	r3, [r4, #24]
 80193e6:	3b01      	subs	r3, #1
 80193e8:	61a3      	str	r3, [r4, #24]
 80193ea:	6923      	ldr	r3, [r4, #16]
 80193ec:	440b      	add	r3, r1
 80193ee:	68e1      	ldr	r1, [r4, #12]
 80193f0:	428b      	cmp	r3, r1
 80193f2:	6123      	str	r3, [r4, #16]
 80193f4:	db15      	blt.n	8019422 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80193f6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80193fa:	3201      	adds	r2, #1
 80193fc:	1a5b      	subs	r3, r3, r1
 80193fe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019402:	6022      	str	r2, [r4, #0]
 8019404:	6123      	str	r3, [r4, #16]
 8019406:	edc4 6a07 	vstr	s13, [r4, #28]
 801940a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801940e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019412:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019416:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801941a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801941e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019422:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019426:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801942a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801942e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019432:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019436:	68a9      	ldr	r1, [r5, #8]
 8019438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801943c:	ed95 6a08 	vldr	s12, [r5, #32]
 8019440:	edd5 6a07 	vldr	s13, [r5, #28]
 8019444:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019448:	ee76 6a86 	vadd.f32	s13, s13, s12
 801944c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019450:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019454:	edc5 6a07 	vstr	s13, [r5, #28]
 8019458:	441a      	add	r2, r3
 801945a:	696b      	ldr	r3, [r5, #20]
 801945c:	3301      	adds	r3, #1
 801945e:	602a      	str	r2, [r5, #0]
 8019460:	616b      	str	r3, [r5, #20]
 8019462:	69ab      	ldr	r3, [r5, #24]
 8019464:	3b01      	subs	r3, #1
 8019466:	61ab      	str	r3, [r5, #24]
 8019468:	692b      	ldr	r3, [r5, #16]
 801946a:	440b      	add	r3, r1
 801946c:	68e9      	ldr	r1, [r5, #12]
 801946e:	428b      	cmp	r3, r1
 8019470:	612b      	str	r3, [r5, #16]
 8019472:	db15      	blt.n	80194a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019474:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019478:	3201      	adds	r2, #1
 801947a:	1a5b      	subs	r3, r3, r1
 801947c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019480:	602a      	str	r2, [r5, #0]
 8019482:	612b      	str	r3, [r5, #16]
 8019484:	edc5 6a07 	vstr	s13, [r5, #28]
 8019488:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801948c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019490:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019494:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019498:	ee77 7a27 	vadd.f32	s15, s14, s15
 801949c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80194a0:	3f01      	subs	r7, #1
 80194a2:	e757      	b.n	8019354 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80194a4:	4299      	cmp	r1, r3
 80194a6:	dc13      	bgt.n	80194d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80194a8:	429a      	cmp	r2, r3
 80194aa:	da14      	bge.n	80194d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80194ac:	2502      	movs	r5, #2
 80194ae:	2703      	movs	r7, #3
 80194b0:	f04f 0800 	mov.w	r8, #0
 80194b4:	46a9      	mov	r9, r5
 80194b6:	f04f 0a01 	mov.w	sl, #1
 80194ba:	e6ef      	b.n	801929c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80194bc:	2501      	movs	r5, #1
 80194be:	2700      	movs	r7, #0
 80194c0:	46a9      	mov	r9, r5
 80194c2:	46b8      	mov	r8, r7
 80194c4:	f04f 0a02 	mov.w	sl, #2
 80194c8:	e6e8      	b.n	801929c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80194ca:	2501      	movs	r5, #1
 80194cc:	2702      	movs	r7, #2
 80194ce:	e6e1      	b.n	8019294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80194d0:	2500      	movs	r5, #0
 80194d2:	2701      	movs	r7, #1
 80194d4:	e7f4      	b.n	80194c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80194d6:	2702      	movs	r7, #2
 80194d8:	2503      	movs	r5, #3
 80194da:	f04f 0900 	mov.w	r9, #0
 80194de:	46b8      	mov	r8, r7
 80194e0:	e7e9      	b.n	80194b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80194e2:	4613      	mov	r3, r2
 80194e4:	e728      	b.n	8019338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80194e6:	bf00      	nop
 80194e8:	2000593c 	.word	0x2000593c
 80194ec:	fffd8f01 	.word	0xfffd8f01
 80194f0:	00027100 	.word	0x00027100
 80194f4:	0004e1ff 	.word	0x0004e1ff
 80194f8:	0004e1fe 	.word	0x0004e1fe
 80194fc:	20005944 	.word	0x20005944
 8019500:	4613      	mov	r3, r2
 8019502:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019504:	469e      	mov	lr, r3
 8019506:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8019508:	469c      	mov	ip, r3
 801950a:	9111      	str	r1, [sp, #68]	; 0x44
 801950c:	f04f 0900 	mov.w	r9, #0
 8019510:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8019514:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8019518:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801951c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8019520:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8019524:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019528:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801952c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8019530:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8019534:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8019538:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801953c:	f1bc 0f00 	cmp.w	ip, #0
 8019540:	d147      	bne.n	80195d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019542:	eb03 0c07 	add.w	ip, r3, r7
 8019546:	1ad7      	subs	r7, r2, r3
 8019548:	f1b9 0f00 	cmp.w	r9, #0
 801954c:	d009      	beq.n	8019562 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801954e:	9029      	str	r0, [sp, #164]	; 0xa4
 8019550:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019554:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8019558:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801955c:	912d      	str	r1, [sp, #180]	; 0xb4
 801955e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8019562:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019564:	f04f 0800 	mov.w	r8, #0
 8019568:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801956c:	9111      	str	r1, [sp, #68]	; 0x44
 801956e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019572:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019576:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801957a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801957e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019582:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019586:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801958a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801958e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019592:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019596:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801959a:	f1be 0f00 	cmp.w	lr, #0
 801959e:	d031      	beq.n	8019604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80195a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80195a2:	4450      	add	r0, sl
 80195a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80195a8:	4431      	add	r1, r6
 80195aa:	ee37 7a04 	vadd.f32	s14, s14, s8
 80195ae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80195b2:	4549      	cmp	r1, r9
 80195b4:	db08      	blt.n	80195c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80195b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80195ba:	3001      	adds	r0, #1
 80195bc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80195c0:	eba1 0109 	sub.w	r1, r1, r9
 80195c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80195c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80195cc:	f04f 0801 	mov.w	r8, #1
 80195d0:	e7e3      	b.n	801959a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80195d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80195d4:	4450      	add	r0, sl
 80195d6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80195da:	4431      	add	r1, r6
 80195dc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80195e0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80195e4:	4541      	cmp	r1, r8
 80195e6:	db08      	blt.n	80195fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80195e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80195ec:	3001      	adds	r0, #1
 80195ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 80195f2:	eba1 0108 	sub.w	r1, r1, r8
 80195f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80195fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80195fe:	f04f 0901 	mov.w	r9, #1
 8019602:	e79b      	b.n	801953c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019604:	449c      	add	ip, r3
 8019606:	1aff      	subs	r7, r7, r3
 8019608:	f1b8 0f00 	cmp.w	r8, #0
 801960c:	d009      	beq.n	8019622 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801960e:	9019      	str	r0, [sp, #100]	; 0x64
 8019610:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019614:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019618:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801961c:	911d      	str	r1, [sp, #116]	; 0x74
 801961e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019622:	1ad2      	subs	r2, r2, r3
 8019624:	e68b      	b.n	801933e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019628:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801962a:	2b00      	cmp	r3, #0
 801962c:	f000 80d1 	beq.w	80197d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019630:	ad19      	add	r5, sp, #100	; 0x64
 8019632:	ac39      	add	r4, sp, #228	; 0xe4
 8019634:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019636:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801963a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801963e:	930c      	str	r3, [sp, #48]	; 0x30
 8019640:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019642:	6963      	ldr	r3, [r4, #20]
 8019644:	440b      	add	r3, r1
 8019646:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801964a:	4408      	add	r0, r1
 801964c:	b200      	sxth	r0, r0
 801964e:	4283      	cmp	r3, r0
 8019650:	900d      	str	r0, [sp, #52]	; 0x34
 8019652:	f280 80c1 	bge.w	80197d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019656:	428b      	cmp	r3, r1
 8019658:	da08      	bge.n	801966c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801965a:	2a00      	cmp	r2, #0
 801965c:	dd06      	ble.n	801966c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801965e:	1acb      	subs	r3, r1, r3
 8019660:	429a      	cmp	r2, r3
 8019662:	f2c0 80bb 	blt.w	80197dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019666:	2b00      	cmp	r3, #0
 8019668:	f300 80b9 	bgt.w	80197de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801966c:	6967      	ldr	r7, [r4, #20]
 801966e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019674:	443b      	add	r3, r7
 8019676:	461f      	mov	r7, r3
 8019678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801967a:	1bdf      	subs	r7, r3, r7
 801967c:	4297      	cmp	r7, r2
 801967e:	bfa8      	it	ge
 8019680:	4617      	movge	r7, r2
 8019682:	2f00      	cmp	r7, #0
 8019684:	f340 813c 	ble.w	8019900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019688:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801968a:	6829      	ldr	r1, [r5, #0]
 801968c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019690:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019694:	4411      	add	r1, r2
 8019696:	6820      	ldr	r0, [r4, #0]
 8019698:	4299      	cmp	r1, r3
 801969a:	dd1a      	ble.n	80196d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801969c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80196a0:	4402      	add	r2, r0
 80196a2:	440b      	add	r3, r1
 80196a4:	b21b      	sxth	r3, r3
 80196a6:	429a      	cmp	r2, r3
 80196a8:	dc13      	bgt.n	80196d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80196aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80196ac:	a912      	add	r1, sp, #72	; 0x48
 80196ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	9206      	str	r2, [sp, #24]
 80196b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80196b8:	9500      	str	r5, [sp, #0]
 80196ba:	9205      	str	r2, [sp, #20]
 80196bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196be:	e9cd b203 	strd	fp, r2, [sp, #12]
 80196c2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80196c4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80196c8:	aa49      	add	r2, sp, #292	; 0x124
 80196ca:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 80196ce:	4623      	mov	r3, r4
 80196d0:	47c8      	blx	r9
 80196d2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80196d6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80196da:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80196de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80196e2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80196e6:	68a1      	ldr	r1, [r4, #8]
 80196e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80196ec:	ed94 6a08 	vldr	s12, [r4, #32]
 80196f0:	edd4 6a07 	vldr	s13, [r4, #28]
 80196f4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80196f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80196fc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019700:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019704:	edc4 6a07 	vstr	s13, [r4, #28]
 8019708:	441a      	add	r2, r3
 801970a:	6963      	ldr	r3, [r4, #20]
 801970c:	3301      	adds	r3, #1
 801970e:	6022      	str	r2, [r4, #0]
 8019710:	6163      	str	r3, [r4, #20]
 8019712:	69a3      	ldr	r3, [r4, #24]
 8019714:	3b01      	subs	r3, #1
 8019716:	61a3      	str	r3, [r4, #24]
 8019718:	6923      	ldr	r3, [r4, #16]
 801971a:	440b      	add	r3, r1
 801971c:	68e1      	ldr	r1, [r4, #12]
 801971e:	428b      	cmp	r3, r1
 8019720:	6123      	str	r3, [r4, #16]
 8019722:	db15      	blt.n	8019750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019724:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019728:	3201      	adds	r2, #1
 801972a:	1a5b      	subs	r3, r3, r1
 801972c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019730:	6022      	str	r2, [r4, #0]
 8019732:	6123      	str	r3, [r4, #16]
 8019734:	edc4 6a07 	vstr	s13, [r4, #28]
 8019738:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801973c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019740:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019744:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019748:	ee77 7a27 	vadd.f32	s15, s14, s15
 801974c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019750:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019754:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019758:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801975c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019760:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019764:	68a9      	ldr	r1, [r5, #8]
 8019766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801976a:	ed95 6a08 	vldr	s12, [r5, #32]
 801976e:	edd5 6a07 	vldr	s13, [r5, #28]
 8019772:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019776:	ee76 6a86 	vadd.f32	s13, s13, s12
 801977a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801977e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019782:	edc5 6a07 	vstr	s13, [r5, #28]
 8019786:	441a      	add	r2, r3
 8019788:	696b      	ldr	r3, [r5, #20]
 801978a:	3301      	adds	r3, #1
 801978c:	602a      	str	r2, [r5, #0]
 801978e:	616b      	str	r3, [r5, #20]
 8019790:	69ab      	ldr	r3, [r5, #24]
 8019792:	3b01      	subs	r3, #1
 8019794:	61ab      	str	r3, [r5, #24]
 8019796:	692b      	ldr	r3, [r5, #16]
 8019798:	440b      	add	r3, r1
 801979a:	68e9      	ldr	r1, [r5, #12]
 801979c:	428b      	cmp	r3, r1
 801979e:	612b      	str	r3, [r5, #16]
 80197a0:	db15      	blt.n	80197ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80197a2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80197a6:	3201      	adds	r2, #1
 80197a8:	1a5b      	subs	r3, r3, r1
 80197aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80197ae:	602a      	str	r2, [r5, #0]
 80197b0:	612b      	str	r3, [r5, #16]
 80197b2:	edc5 6a07 	vstr	s13, [r5, #28]
 80197b6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80197ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 80197be:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80197c2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80197c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197ca:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80197ce:	3f01      	subs	r7, #1
 80197d0:	e757      	b.n	8019682 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80197d2:	ad39      	add	r5, sp, #228	; 0xe4
 80197d4:	ac19      	add	r4, sp, #100	; 0x64
 80197d6:	e72d      	b.n	8019634 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80197d8:	4613      	mov	r3, r2
 80197da:	e744      	b.n	8019666 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80197dc:	4613      	mov	r3, r2
 80197de:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80197e0:	469e      	mov	lr, r3
 80197e2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80197e6:	461f      	mov	r7, r3
 80197e8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80197ec:	f04f 0900 	mov.w	r9, #0
 80197f0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80197f4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80197f8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80197fc:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8019800:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8019804:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8019806:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801980a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801980e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8019812:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8019816:	960e      	str	r6, [sp, #56]	; 0x38
 8019818:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801981c:	2f00      	cmp	r7, #0
 801981e:	d146      	bne.n	80198ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019820:	449c      	add	ip, r3
 8019822:	1ad7      	subs	r7, r2, r3
 8019824:	f1b9 0f00 	cmp.w	r9, #0
 8019828:	d009      	beq.n	801983e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801982a:	9039      	str	r0, [sp, #228]	; 0xe4
 801982c:	913d      	str	r1, [sp, #244]	; 0xf4
 801982e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8019832:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8019836:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801983a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801983e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019840:	f04f 0800 	mov.w	r8, #0
 8019844:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019848:	910e      	str	r1, [sp, #56]	; 0x38
 801984a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801984e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019852:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019856:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801985a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801985e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019862:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019866:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801986a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801986e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019872:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019876:	f1be 0f00 	cmp.w	lr, #0
 801987a:	d030      	beq.n	80198de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801987c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801987e:	4450      	add	r0, sl
 8019880:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019884:	4431      	add	r1, r6
 8019886:	ee37 7a04 	vadd.f32	s14, s14, s8
 801988a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801988e:	4549      	cmp	r1, r9
 8019890:	db08      	blt.n	80198a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019892:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019896:	3001      	adds	r0, #1
 8019898:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801989c:	eba1 0109 	sub.w	r1, r1, r9
 80198a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80198a4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80198a8:	f04f 0801 	mov.w	r8, #1
 80198ac:	e7e3      	b.n	8019876 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80198ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80198b0:	4450      	add	r0, sl
 80198b2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80198b6:	4431      	add	r1, r6
 80198b8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80198bc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80198c0:	4541      	cmp	r1, r8
 80198c2:	db08      	blt.n	80198d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80198c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80198c8:	3001      	adds	r0, #1
 80198ca:	ee37 7a25 	vadd.f32	s14, s14, s11
 80198ce:	eba1 0108 	sub.w	r1, r1, r8
 80198d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80198d6:	3f01      	subs	r7, #1
 80198d8:	f04f 0901 	mov.w	r9, #1
 80198dc:	e79e      	b.n	801981c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80198de:	449c      	add	ip, r3
 80198e0:	1aff      	subs	r7, r7, r3
 80198e2:	f1b8 0f00 	cmp.w	r8, #0
 80198e6:	d009      	beq.n	80198fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80198e8:	9019      	str	r0, [sp, #100]	; 0x64
 80198ea:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80198ee:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80198f2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80198f6:	911d      	str	r1, [sp, #116]	; 0x74
 80198f8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80198fc:	1ad2      	subs	r2, r2, r3
 80198fe:	e6b5      	b.n	801966c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	b923      	cbnz	r3, 8019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019906:	4b04      	ldr	r3, [pc, #16]	; (8019918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019908:	6818      	ldr	r0, [r3, #0]
 801990a:	6803      	ldr	r3, [r0, #0]
 801990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801990e:	4798      	blx	r3
 8019910:	b05b      	add	sp, #364	; 0x16c
 8019912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019916:	bf00      	nop
 8019918:	20005944 	.word	0x20005944

0801991c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801991c:	b570      	push	{r4, r5, r6, lr}
 801991e:	4604      	mov	r4, r0
 8019920:	2500      	movs	r5, #0
 8019922:	9804      	ldr	r0, [sp, #16]
 8019924:	7223      	strb	r3, [r4, #8]
 8019926:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801992a:	8025      	strh	r5, [r4, #0]
 801992c:	6061      	str	r1, [r4, #4]
 801992e:	7263      	strb	r3, [r4, #9]
 8019930:	60e0      	str	r0, [r4, #12]
 8019932:	8222      	strh	r2, [r4, #16]
 8019934:	8265      	strh	r5, [r4, #18]
 8019936:	82a5      	strh	r5, [r4, #20]
 8019938:	82e5      	strh	r5, [r4, #22]
 801993a:	8325      	strh	r5, [r4, #24]
 801993c:	8365      	strh	r5, [r4, #26]
 801993e:	83a5      	strh	r5, [r4, #28]
 8019940:	77a5      	strb	r5, [r4, #30]
 8019942:	6803      	ldr	r3, [r0, #0]
 8019944:	695b      	ldr	r3, [r3, #20]
 8019946:	4798      	blx	r3
 8019948:	4606      	mov	r6, r0
 801994a:	b1f8      	cbz	r0, 801998c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801994c:	68e0      	ldr	r0, [r4, #12]
 801994e:	4631      	mov	r1, r6
 8019950:	6803      	ldr	r3, [r0, #0]
 8019952:	68db      	ldr	r3, [r3, #12]
 8019954:	4798      	blx	r3
 8019956:	7b43      	ldrb	r3, [r0, #13]
 8019958:	7a82      	ldrb	r2, [r0, #10]
 801995a:	4605      	mov	r5, r0
 801995c:	005b      	lsls	r3, r3, #1
 801995e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019962:	4313      	orrs	r3, r2
 8019964:	83a3      	strh	r3, [r4, #28]
 8019966:	7a63      	ldrb	r3, [r4, #9]
 8019968:	2b04      	cmp	r3, #4
 801996a:	d10f      	bne.n	801998c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801996c:	68e0      	ldr	r0, [r4, #12]
 801996e:	462a      	mov	r2, r5
 8019970:	4631      	mov	r1, r6
 8019972:	6803      	ldr	r3, [r0, #0]
 8019974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019976:	4798      	blx	r3
 8019978:	7b6b      	ldrb	r3, [r5, #13]
 801997a:	005b      	lsls	r3, r3, #1
 801997c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019980:	7aab      	ldrb	r3, [r5, #10]
 8019982:	4313      	orrs	r3, r2
 8019984:	4418      	add	r0, r3
 8019986:	8ba3      	ldrh	r3, [r4, #28]
 8019988:	4418      	add	r0, r3
 801998a:	83a0      	strh	r0, [r4, #28]
 801998c:	4620      	mov	r0, r4
 801998e:	bd70      	pop	{r4, r5, r6, pc}

08019990 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019994:	2400      	movs	r4, #0
 8019996:	b085      	sub	sp, #20
 8019998:	4681      	mov	r9, r0
 801999a:	4688      	mov	r8, r1
 801999c:	4692      	mov	sl, r2
 801999e:	469b      	mov	fp, r3
 80199a0:	4627      	mov	r7, r4
 80199a2:	4625      	mov	r5, r4
 80199a4:	4626      	mov	r6, r4
 80199a6:	4554      	cmp	r4, sl
 80199a8:	da2a      	bge.n	8019a00 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80199aa:	2300      	movs	r3, #0
 80199ac:	9303      	str	r3, [sp, #12]
 80199ae:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80199b2:	429d      	cmp	r5, r3
 80199b4:	d004      	beq.n	80199c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80199b6:	f242 030b 	movw	r3, #8203	; 0x200b
 80199ba:	429d      	cmp	r5, r3
 80199bc:	bf18      	it	ne
 80199be:	462f      	movne	r7, r5
 80199c0:	ab03      	add	r3, sp, #12
 80199c2:	4642      	mov	r2, r8
 80199c4:	4659      	mov	r1, fp
 80199c6:	4648      	mov	r0, r9
 80199c8:	f002 ffae 	bl	801c928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80199cc:	4605      	mov	r5, r0
 80199ce:	b1b8      	cbz	r0, 8019a00 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80199d0:	280a      	cmp	r0, #10
 80199d2:	d015      	beq.n	8019a00 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80199d4:	9a03      	ldr	r2, [sp, #12]
 80199d6:	b18a      	cbz	r2, 80199fc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80199d8:	7b50      	ldrb	r0, [r2, #13]
 80199da:	4639      	mov	r1, r7
 80199dc:	7a93      	ldrb	r3, [r2, #10]
 80199de:	0040      	lsls	r0, r0, #1
 80199e0:	8895      	ldrh	r5, [r2, #4]
 80199e2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80199e6:	4303      	orrs	r3, r0
 80199e8:	4640      	mov	r0, r8
 80199ea:	9301      	str	r3, [sp, #4]
 80199ec:	f8d8 3000 	ldr.w	r3, [r8]
 80199f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199f2:	4798      	blx	r3
 80199f4:	9b01      	ldr	r3, [sp, #4]
 80199f6:	4418      	add	r0, r3
 80199f8:	4406      	add	r6, r0
 80199fa:	b2b6      	uxth	r6, r6
 80199fc:	3401      	adds	r4, #1
 80199fe:	e7d2      	b.n	80199a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8019a00:	4630      	mov	r0, r6
 8019a02:	b005      	add	sp, #20
 8019a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a08 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019a08:	2a02      	cmp	r2, #2
 8019a0a:	b530      	push	{r4, r5, lr}
 8019a0c:	d011      	beq.n	8019a32 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019a0e:	2a03      	cmp	r2, #3
 8019a10:	d01c      	beq.n	8019a4c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019a12:	2a01      	cmp	r2, #1
 8019a14:	d10c      	bne.n	8019a30 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019a16:	888b      	ldrh	r3, [r1, #4]
 8019a18:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019a1c:	8801      	ldrh	r1, [r0, #0]
 8019a1e:	1a9b      	subs	r3, r3, r2
 8019a20:	8844      	ldrh	r4, [r0, #2]
 8019a22:	1a5b      	subs	r3, r3, r1
 8019a24:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019a28:	8004      	strh	r4, [r0, #0]
 8019a2a:	8043      	strh	r3, [r0, #2]
 8019a2c:	8081      	strh	r1, [r0, #4]
 8019a2e:	80c2      	strh	r2, [r0, #6]
 8019a30:	bd30      	pop	{r4, r5, pc}
 8019a32:	88cb      	ldrh	r3, [r1, #6]
 8019a34:	88c2      	ldrh	r2, [r0, #6]
 8019a36:	1a9b      	subs	r3, r3, r2
 8019a38:	8842      	ldrh	r2, [r0, #2]
 8019a3a:	1a9b      	subs	r3, r3, r2
 8019a3c:	888a      	ldrh	r2, [r1, #4]
 8019a3e:	8881      	ldrh	r1, [r0, #4]
 8019a40:	8043      	strh	r3, [r0, #2]
 8019a42:	1a52      	subs	r2, r2, r1
 8019a44:	8801      	ldrh	r1, [r0, #0]
 8019a46:	1a52      	subs	r2, r2, r1
 8019a48:	8002      	strh	r2, [r0, #0]
 8019a4a:	e7f1      	b.n	8019a30 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019a4c:	88cb      	ldrh	r3, [r1, #6]
 8019a4e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019a52:	8841      	ldrh	r1, [r0, #2]
 8019a54:	1a9b      	subs	r3, r3, r2
 8019a56:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019a5a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019a5e:	1a5b      	subs	r3, r3, r1
 8019a60:	8045      	strh	r5, [r0, #2]
 8019a62:	8082      	strh	r2, [r0, #4]
 8019a64:	8003      	strh	r3, [r0, #0]
 8019a66:	80c4      	strh	r4, [r0, #6]
 8019a68:	e7e2      	b.n	8019a30 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019a6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019a6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a6e:	b09f      	sub	sp, #124	; 0x7c
 8019a70:	9116      	str	r1, [sp, #88]	; 0x58
 8019a72:	9317      	str	r3, [sp, #92]	; 0x5c
 8019a74:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019a76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019a78:	8809      	ldrh	r1, [r1, #0]
 8019a7a:	889b      	ldrh	r3, [r3, #4]
 8019a7c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019a80:	440b      	add	r3, r1
 8019a82:	9212      	str	r2, [sp, #72]	; 0x48
 8019a84:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019a88:	b21b      	sxth	r3, r3
 8019a8a:	9011      	str	r0, [sp, #68]	; 0x44
 8019a8c:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019a90:	9310      	str	r3, [sp, #64]	; 0x40
 8019a92:	f8d8 3000 	ldr.w	r3, [r8]
 8019a96:	7a59      	ldrb	r1, [r3, #9]
 8019a98:	7a1b      	ldrb	r3, [r3, #8]
 8019a9a:	9114      	str	r1, [sp, #80]	; 0x50
 8019a9c:	9315      	str	r3, [sp, #84]	; 0x54
 8019a9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019aa4:	2a00      	cmp	r2, #0
 8019aa6:	d067      	beq.n	8019b78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8019aa8:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019aac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019aae:	2b04      	cmp	r3, #4
 8019ab0:	bf14      	ite	ne
 8019ab2:	2301      	movne	r3, #1
 8019ab4:	2302      	moveq	r3, #2
 8019ab6:	4413      	add	r3, r2
 8019ab8:	f04f 0900 	mov.w	r9, #0
 8019abc:	930f      	str	r3, [sp, #60]	; 0x3c
 8019abe:	464c      	mov	r4, r9
 8019ac0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019ac4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019ac8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019acc:	4293      	cmp	r3, r2
 8019ace:	f280 808c 	bge.w	8019bea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	931c      	str	r3, [sp, #112]	; 0x70
 8019ad6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019ada:	429c      	cmp	r4, r3
 8019adc:	d006      	beq.n	8019aec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8019ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ae0:	f242 020b 	movw	r2, #8203	; 0x200b
 8019ae4:	4294      	cmp	r4, r2
 8019ae6:	bf18      	it	ne
 8019ae8:	4623      	movne	r3, r4
 8019aea:	930d      	str	r3, [sp, #52]	; 0x34
 8019aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019aee:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8019af0:	f8d8 2000 	ldr.w	r2, [r8]
 8019af4:	428b      	cmp	r3, r1
 8019af6:	db41      	blt.n	8019b7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019af8:	6813      	ldr	r3, [r2, #0]
 8019afa:	4610      	mov	r0, r2
 8019afc:	695b      	ldr	r3, [r3, #20]
 8019afe:	4798      	blx	r3
 8019b00:	4604      	mov	r4, r0
 8019b02:	f8d8 0000 	ldr.w	r0, [r8]
 8019b06:	aa1d      	add	r2, sp, #116	; 0x74
 8019b08:	4621      	mov	r1, r4
 8019b0a:	6803      	ldr	r3, [r0, #0]
 8019b0c:	689e      	ldr	r6, [r3, #8]
 8019b0e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019b12:	47b0      	blx	r6
 8019b14:	901c      	str	r0, [sp, #112]	; 0x70
 8019b16:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019b1a:	429c      	cmp	r4, r3
 8019b1c:	f000 80ea 	beq.w	8019cf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019b20:	f242 030b 	movw	r3, #8203	; 0x200b
 8019b24:	429c      	cmp	r4, r3
 8019b26:	f000 80e5 	beq.w	8019cf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019b2a:	2c00      	cmp	r4, #0
 8019b2c:	f000 80f7 	beq.w	8019d1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8019b30:	2c0a      	cmp	r4, #10
 8019b32:	d060      	beq.n	8019bf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019b34:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019b36:	b36a      	cbz	r2, 8019b94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8019b38:	8894      	ldrh	r4, [r2, #4]
 8019b3a:	f1bb 0f00 	cmp.w	fp, #0
 8019b3e:	d03b      	beq.n	8019bb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8019b40:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019b44:	f1bb 0f01 	cmp.w	fp, #1
 8019b48:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019b4c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019b50:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019b54:	ea49 0903 	orr.w	r9, r9, r3
 8019b58:	d134      	bne.n	8019bc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8019b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b5c:	eba5 0509 	sub.w	r5, r5, r9
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d14f      	bne.n	8019c04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019b64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b66:	eb09 0305 	add.w	r3, r9, r5
 8019b6a:	4413      	add	r3, r2
 8019b6c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019b6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019b72:	4293      	cmp	r3, r2
 8019b74:	da51      	bge.n	8019c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019b76:	e038      	b.n	8019bea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019b78:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019b7a:	e79d      	b.n	8019ab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8019b7c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019b80:	4659      	mov	r1, fp
 8019b82:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019b84:	9301      	str	r3, [sp, #4]
 8019b86:	ab1d      	add	r3, sp, #116	; 0x74
 8019b88:	9300      	str	r3, [sp, #0]
 8019b8a:	ab1c      	add	r3, sp, #112	; 0x70
 8019b8c:	f002 ff24 	bl	801c9d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019b90:	4604      	mov	r4, r0
 8019b92:	e7c0      	b.n	8019b16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8019b94:	f8d8 0000 	ldr.w	r0, [r8]
 8019b98:	6803      	ldr	r3, [r0, #0]
 8019b9a:	691b      	ldr	r3, [r3, #16]
 8019b9c:	4798      	blx	r3
 8019b9e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019ba2:	4298      	cmp	r0, r3
 8019ba4:	f000 80a6 	beq.w	8019cf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019ba8:	f242 030b 	movw	r3, #8203	; 0x200b
 8019bac:	4298      	cmp	r0, r3
 8019bae:	f000 80a1 	beq.w	8019cf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019bb2:	f1bb 0f00 	cmp.w	fp, #0
 8019bb6:	d100      	bne.n	8019bba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8019bb8:	444d      	add	r5, r9
 8019bba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019bbc:	2a00      	cmp	r2, #0
 8019bbe:	d1bf      	bne.n	8019b40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8019bc0:	4691      	mov	r9, r2
 8019bc2:	e097      	b.n	8019cf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	f000 80ab 	beq.w	8019d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019bcc:	f1bb 0f00 	cmp.w	fp, #0
 8019bd0:	d118      	bne.n	8019c04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019bd2:	f8d8 0000 	ldr.w	r0, [r8]
 8019bd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019bd8:	6803      	ldr	r3, [r0, #0]
 8019bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019bdc:	4798      	blx	r3
 8019bde:	4405      	add	r5, r0
 8019be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019be2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019be4:	1aeb      	subs	r3, r5, r3
 8019be6:	4293      	cmp	r3, r2
 8019be8:	dd17      	ble.n	8019c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019bea:	2c00      	cmp	r4, #0
 8019bec:	f000 8097 	beq.w	8019d1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8019bf0:	2c0a      	cmp	r4, #10
 8019bf2:	f040 8085 	bne.w	8019d00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8019bf6:	240a      	movs	r4, #10
 8019bf8:	fab4 f084 	clz	r0, r4
 8019bfc:	0940      	lsrs	r0, r0, #5
 8019bfe:	b01f      	add	sp, #124	; 0x7c
 8019c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c04:	f8d8 0000 	ldr.w	r0, [r8]
 8019c08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019c0a:	6803      	ldr	r3, [r0, #0]
 8019c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c0e:	4798      	blx	r3
 8019c10:	f1bb 0f01 	cmp.w	fp, #1
 8019c14:	eba5 0500 	sub.w	r5, r5, r0
 8019c18:	d0a4      	beq.n	8019b64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8019c1a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019c1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019c1e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019c22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019c26:	7b43      	ldrb	r3, [r0, #13]
 8019c28:	4429      	add	r1, r5
 8019c2a:	015b      	lsls	r3, r3, #5
 8019c2c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019c30:	7983      	ldrb	r3, [r0, #6]
 8019c32:	4313      	orrs	r3, r2
 8019c34:	440b      	add	r3, r1
 8019c36:	42b3      	cmp	r3, r6
 8019c38:	db5c      	blt.n	8019cf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019c3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c3c:	4299      	cmp	r1, r3
 8019c3e:	da59      	bge.n	8019cf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019c40:	f8d8 0000 	ldr.w	r0, [r8]
 8019c44:	42ae      	cmp	r6, r5
 8019c46:	6803      	ldr	r3, [r0, #0]
 8019c48:	bfcc      	ite	gt
 8019c4a:	1b76      	subgt	r6, r6, r5
 8019c4c:	2600      	movle	r6, #0
 8019c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c50:	bfc8      	it	gt
 8019c52:	b2b6      	uxthgt	r6, r6
 8019c54:	4798      	blx	r3
 8019c56:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019c58:	7b5a      	ldrb	r2, [r3, #13]
 8019c5a:	00d1      	lsls	r1, r2, #3
 8019c5c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8019c60:	7a19      	ldrb	r1, [r3, #8]
 8019c62:	4339      	orrs	r1, r7
 8019c64:	0657      	lsls	r7, r2, #25
 8019c66:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019c68:	bf48      	it	mi
 8019c6a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019c6e:	4407      	add	r7, r0
 8019c70:	bf48      	it	mi
 8019c72:	b209      	sxthmi	r1, r1
 8019c74:	1a7f      	subs	r7, r7, r1
 8019c76:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019c78:	b2bf      	uxth	r7, r7
 8019c7a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019c7e:	fa0f fa87 	sxth.w	sl, r7
 8019c82:	4551      	cmp	r1, sl
 8019c84:	dd3a      	ble.n	8019cfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019c86:	0112      	lsls	r2, r2, #4
 8019c88:	79d8      	ldrb	r0, [r3, #7]
 8019c8a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019c8e:	4302      	orrs	r2, r0
 8019c90:	4492      	add	sl, r2
 8019c92:	4551      	cmp	r1, sl
 8019c94:	dc2e      	bgt.n	8019cf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019c96:	1bcf      	subs	r7, r1, r7
 8019c98:	468a      	mov	sl, r1
 8019c9a:	b2bf      	uxth	r7, r7
 8019c9c:	9319      	str	r3, [sp, #100]	; 0x64
 8019c9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019ca0:	f8d8 0000 	ldr.w	r0, [r8]
 8019ca4:	681a      	ldr	r2, [r3, #0]
 8019ca6:	6801      	ldr	r1, [r0, #0]
 8019ca8:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8019caa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019cac:	9313      	str	r3, [sp, #76]	; 0x4c
 8019cae:	9218      	str	r2, [sp, #96]	; 0x60
 8019cb0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8019cb2:	4788      	blx	r1
 8019cb4:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019cb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019cba:	910b      	str	r1, [sp, #44]	; 0x2c
 8019cbc:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019cc0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019cc2:	910a      	str	r1, [sp, #40]	; 0x28
 8019cc4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8019cc8:	9109      	str	r1, [sp, #36]	; 0x24
 8019cca:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019cce:	9305      	str	r3, [sp, #20]
 8019cd0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019cd2:	9206      	str	r2, [sp, #24]
 8019cd4:	e9cd a601 	strd	sl, r6, [sp, #4]
 8019cd8:	442e      	add	r6, r5
 8019cda:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8019cde:	b236      	sxth	r6, r6
 8019ce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019ce2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019ce6:	9600      	str	r6, [sp, #0]
 8019ce8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019cea:	681a      	ldr	r2, [r3, #0]
 8019cec:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019cee:	685b      	ldr	r3, [r3, #4]
 8019cf0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019cf2:	47b0      	blx	r6
 8019cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019cf6:	3301      	adds	r3, #1
 8019cf8:	930e      	str	r3, [sp, #56]	; 0x38
 8019cfa:	e6e5      	b.n	8019ac8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8019cfc:	2700      	movs	r7, #0
 8019cfe:	e7cd      	b.n	8019c9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8019d00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019d02:	3501      	adds	r5, #1
 8019d04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019d06:	429d      	cmp	r5, r3
 8019d08:	f6bf af76 	bge.w	8019bf8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019d0c:	4659      	mov	r1, fp
 8019d0e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019d10:	f7fa fbee 	bl	80144f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019d14:	4604      	mov	r4, r0
 8019d16:	b110      	cbz	r0, 8019d1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8019d18:	280a      	cmp	r0, #10
 8019d1a:	d1f2      	bne.n	8019d02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8019d1c:	e76b      	b.n	8019bf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019d1e:	2400      	movs	r4, #0
 8019d20:	e76a      	b.n	8019bf8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019d22:	f1bb 0f00 	cmp.w	fp, #0
 8019d26:	f43f af5b 	beq.w	8019be0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019d2a:	e776      	b.n	8019c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08019d2c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019d2c:	b530      	push	{r4, r5, lr}
 8019d2e:	8a44      	ldrh	r4, [r0, #18]
 8019d30:	8ac5      	ldrh	r5, [r0, #22]
 8019d32:	82c3      	strh	r3, [r0, #22]
 8019d34:	442c      	add	r4, r5
 8019d36:	1ae4      	subs	r4, r4, r3
 8019d38:	8b03      	ldrh	r3, [r0, #24]
 8019d3a:	8244      	strh	r4, [r0, #18]
 8019d3c:	8a84      	ldrh	r4, [r0, #20]
 8019d3e:	4422      	add	r2, r4
 8019d40:	440c      	add	r4, r1
 8019d42:	1a59      	subs	r1, r3, r1
 8019d44:	8342      	strh	r2, [r0, #26]
 8019d46:	8284      	strh	r4, [r0, #20]
 8019d48:	8301      	strh	r1, [r0, #24]
 8019d4a:	bd30      	pop	{r4, r5, pc}

08019d4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d50:	7a43      	ldrb	r3, [r0, #9]
 8019d52:	b087      	sub	sp, #28
 8019d54:	4604      	mov	r4, r0
 8019d56:	460f      	mov	r7, r1
 8019d58:	1eda      	subs	r2, r3, #3
 8019d5a:	b2d2      	uxtb	r2, r2
 8019d5c:	2900      	cmp	r1, #0
 8019d5e:	d036      	beq.n	8019dce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8019d60:	2a01      	cmp	r2, #1
 8019d62:	d932      	bls.n	8019dca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019d64:	1e58      	subs	r0, r3, #1
 8019d66:	f1d0 0b00 	rsbs	fp, r0, #0
 8019d6a:	eb4b 0b00 	adc.w	fp, fp, r0
 8019d6e:	1e99      	subs	r1, r3, #2
 8019d70:	424b      	negs	r3, r1
 8019d72:	414b      	adcs	r3, r1
 8019d74:	9303      	str	r3, [sp, #12]
 8019d76:	2300      	movs	r3, #0
 8019d78:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019d7c:	2500      	movs	r5, #0
 8019d7e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8019d82:	46a9      	mov	r9, r5
 8019d84:	8265      	strh	r5, [r4, #18]
 8019d86:	82a5      	strh	r5, [r4, #20]
 8019d88:	2300      	movs	r3, #0
 8019d8a:	9305      	str	r3, [sp, #20]
 8019d8c:	8823      	ldrh	r3, [r4, #0]
 8019d8e:	2b20      	cmp	r3, #32
 8019d90:	d02b      	beq.n	8019dea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8019d92:	eba3 020a 	sub.w	r2, r3, sl
 8019d96:	4256      	negs	r6, r2
 8019d98:	4156      	adcs	r6, r2
 8019d9a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019d9e:	4293      	cmp	r3, r2
 8019da0:	d004      	beq.n	8019dac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019da2:	4553      	cmp	r3, sl
 8019da4:	bf16      	itet	ne
 8019da6:	4699      	movne	r9, r3
 8019da8:	2601      	moveq	r6, #1
 8019daa:	2600      	movne	r6, #0
 8019dac:	ab05      	add	r3, sp, #20
 8019dae:	68e2      	ldr	r2, [r4, #12]
 8019db0:	7a21      	ldrb	r1, [r4, #8]
 8019db2:	6860      	ldr	r0, [r4, #4]
 8019db4:	f002 fdb8 	bl	801c928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019db8:	8020      	strh	r0, [r4, #0]
 8019dba:	b9c8      	cbnz	r0, 8019df0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8019dbc:	8b22      	ldrh	r2, [r4, #24]
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	4611      	mov	r1, r2
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	f7ff ffb2 	bl	8019d2c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019dc8:	e066      	b.n	8019e98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019dca:	468b      	mov	fp, r1
 8019dcc:	e7cf      	b.n	8019d6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8019dce:	3b01      	subs	r3, #1
 8019dd0:	2a01      	cmp	r2, #1
 8019dd2:	9103      	str	r1, [sp, #12]
 8019dd4:	468b      	mov	fp, r1
 8019dd6:	bf8c      	ite	hi
 8019dd8:	2200      	movhi	r2, #0
 8019dda:	2201      	movls	r2, #1
 8019ddc:	2b01      	cmp	r3, #1
 8019dde:	9202      	str	r2, [sp, #8]
 8019de0:	bf8c      	ite	hi
 8019de2:	2300      	movhi	r3, #0
 8019de4:	2301      	movls	r3, #1
 8019de6:	9301      	str	r3, [sp, #4]
 8019de8:	e7c8      	b.n	8019d7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8019dea:	4699      	mov	r9, r3
 8019dec:	2601      	movs	r6, #1
 8019dee:	e7dd      	b.n	8019dac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019df0:	8ae3      	ldrh	r3, [r4, #22]
 8019df2:	280a      	cmp	r0, #10
 8019df4:	f103 0301 	add.w	r3, r3, #1
 8019df8:	82e3      	strh	r3, [r4, #22]
 8019dfa:	d0df      	beq.n	8019dbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8019dfc:	9a05      	ldr	r2, [sp, #20]
 8019dfe:	bb42      	cbnz	r2, 8019e52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8019e00:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019e04:	4298      	cmp	r0, r3
 8019e06:	d001      	beq.n	8019e0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019e08:	4550      	cmp	r0, sl
 8019e0a:	d1bd      	bne.n	8019d88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019e0c:	8823      	ldrh	r3, [r4, #0]
 8019e0e:	8b21      	ldrh	r1, [r4, #24]
 8019e10:	2b20      	cmp	r3, #32
 8019e12:	d001      	beq.n	8019e18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8019e14:	4553      	cmp	r3, sl
 8019e16:	d131      	bne.n	8019e7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8019e18:	2e00      	cmp	r6, #0
 8019e1a:	bf0a      	itet	eq
 8019e1c:	460d      	moveq	r5, r1
 8019e1e:	4630      	movne	r0, r6
 8019e20:	2001      	moveq	r0, #1
 8019e22:	440a      	add	r2, r1
 8019e24:	8aa3      	ldrh	r3, [r4, #20]
 8019e26:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019e2a:	b292      	uxth	r2, r2
 8019e2c:	8322      	strh	r2, [r4, #24]
 8019e2e:	4413      	add	r3, r2
 8019e30:	2f00      	cmp	r7, #0
 8019e32:	d03a      	beq.n	8019eaa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8019e34:	f1bb 0f00 	cmp.w	fp, #0
 8019e38:	d102      	bne.n	8019e40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8019e3a:	9903      	ldr	r1, [sp, #12]
 8019e3c:	b301      	cbz	r1, 8019e80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019e3e:	b1f8      	cbz	r0, 8019e80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019e40:	8ba1      	ldrh	r1, [r4, #28]
 8019e42:	4419      	add	r1, r3
 8019e44:	458c      	cmp	ip, r1
 8019e46:	da2a      	bge.n	8019e9e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019e48:	8a61      	ldrh	r1, [r4, #18]
 8019e4a:	b341      	cbz	r1, 8019e9e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019e4c:	4563      	cmp	r3, ip
 8019e4e:	dd9b      	ble.n	8019d88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019e50:	e01c      	b.n	8019e8c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8019e52:	8893      	ldrh	r3, [r2, #4]
 8019e54:	4649      	mov	r1, r9
 8019e56:	8023      	strh	r3, [r4, #0]
 8019e58:	f892 800d 	ldrb.w	r8, [r2, #13]
 8019e5c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8019e60:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8019e64:	f892 800a 	ldrb.w	r8, [r2, #10]
 8019e68:	ea48 0800 	orr.w	r8, r8, r0
 8019e6c:	68e0      	ldr	r0, [r4, #12]
 8019e6e:	6803      	ldr	r3, [r0, #0]
 8019e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e72:	4798      	blx	r3
 8019e74:	eb08 0200 	add.w	r2, r8, r0
 8019e78:	b292      	uxth	r2, r2
 8019e7a:	e7c7      	b.n	8019e0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019e7c:	2000      	movs	r0, #0
 8019e7e:	e7d0      	b.n	8019e22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8019e80:	4563      	cmp	r3, ip
 8019e82:	dd81      	ble.n	8019d88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019e84:	8a63      	ldrh	r3, [r4, #18]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	f43f af7e 	beq.w	8019d88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	8ba2      	ldrh	r2, [r4, #28]
 8019e90:	77a3      	strb	r3, [r4, #30]
 8019e92:	8b63      	ldrh	r3, [r4, #26]
 8019e94:	4413      	add	r3, r2
 8019e96:	8363      	strh	r3, [r4, #26]
 8019e98:	b007      	add	sp, #28
 8019e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	4611      	mov	r1, r2
 8019ea2:	4620      	mov	r0, r4
 8019ea4:	f7ff ff42 	bl	8019d2c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019ea8:	e76e      	b.n	8019d88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019eaa:	4563      	cmp	r3, ip
 8019eac:	dd14      	ble.n	8019ed8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8019eae:	9b02      	ldr	r3, [sp, #8]
 8019eb0:	b113      	cbz	r3, 8019eb8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8019eb2:	2301      	movs	r3, #1
 8019eb4:	460a      	mov	r2, r1
 8019eb6:	e783      	b.n	8019dc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8019eb8:	9b01      	ldr	r3, [sp, #4]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	f43f af64 	beq.w	8019d88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019ec0:	2800      	cmp	r0, #0
 8019ec2:	f47f af61 	bne.w	8019d88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019ec6:	b116      	cbz	r6, 8019ece <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8019ec8:	2301      	movs	r3, #1
 8019eca:	462a      	mov	r2, r5
 8019ecc:	e779      	b.n	8019dc2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8019ece:	8a63      	ldrh	r3, [r4, #18]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	f43f af59 	beq.w	8019d88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019ed6:	e7df      	b.n	8019e98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019ed8:	2800      	cmp	r0, #0
 8019eda:	f47f af55 	bne.w	8019d88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019ede:	2e00      	cmp	r6, #0
 8019ee0:	f43f af52 	beq.w	8019d88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019ee4:	2301      	movs	r3, #1
 8019ee6:	462a      	mov	r2, r5
 8019ee8:	e7db      	b.n	8019ea2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08019eea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8019eea:	b530      	push	{r4, r5, lr}
 8019eec:	4605      	mov	r5, r0
 8019eee:	b08b      	sub	sp, #44	; 0x2c
 8019ef0:	b191      	cbz	r1, 8019f18 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8019ef2:	2401      	movs	r4, #1
 8019ef4:	e9cd 3100 	strd	r3, r1, [sp]
 8019ef8:	4613      	mov	r3, r2
 8019efa:	4601      	mov	r1, r0
 8019efc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8019f00:	a802      	add	r0, sp, #8
 8019f02:	f7ff fd0b 	bl	801991c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019f06:	2100      	movs	r1, #0
 8019f08:	a802      	add	r0, sp, #8
 8019f0a:	f7ff ff1f 	bl	8019d4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019f0e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019f12:	b163      	cbz	r3, 8019f2e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8019f14:	3401      	adds	r4, #1
 8019f16:	e7f6      	b.n	8019f06 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8019f18:	2401      	movs	r4, #1
 8019f1a:	f002 fdfd 	bl	801cb18 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019f1e:	280a      	cmp	r0, #10
 8019f20:	4628      	mov	r0, r5
 8019f22:	bf08      	it	eq
 8019f24:	3401      	addeq	r4, #1
 8019f26:	f002 fdf7 	bl	801cb18 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019f2a:	2800      	cmp	r0, #0
 8019f2c:	d1f7      	bne.n	8019f1e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8019f2e:	b2a0      	uxth	r0, r4
 8019f30:	b00b      	add	sp, #44	; 0x2c
 8019f32:	bd30      	pop	{r4, r5, pc}

08019f34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f38:	b0db      	sub	sp, #364	; 0x16c
 8019f3a:	4689      	mov	r9, r1
 8019f3c:	461c      	mov	r4, r3
 8019f3e:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8019f42:	900a      	str	r0, [sp, #40]	; 0x28
 8019f44:	f1ba 0f00 	cmp.w	sl, #0
 8019f48:	f000 80a5 	beq.w	801a096 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	f000 80a1 	beq.w	801a096 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019f54:	7ba3      	ldrb	r3, [r4, #14]
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	f000 809d 	beq.w	801a096 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019f5c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8019f60:	6810      	ldr	r0, [r2, #0]
 8019f62:	6851      	ldr	r1, [r2, #4]
 8019f64:	2500      	movs	r5, #0
 8019f66:	4643      	mov	r3, r8
 8019f68:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8019f6c:	950e      	str	r5, [sp, #56]	; 0x38
 8019f6e:	af18      	add	r7, sp, #96	; 0x60
 8019f70:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019f74:	79a2      	ldrb	r2, [r4, #6]
 8019f76:	c303      	stmia	r3!, {r0, r1}
 8019f78:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8019f7c:	a90e      	add	r1, sp, #56	; 0x38
 8019f7e:	4640      	mov	r0, r8
 8019f80:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019f84:	f7ff fd40 	bl	8019a08 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019f88:	a90e      	add	r1, sp, #56	; 0x38
 8019f8a:	79a2      	ldrb	r2, [r4, #6]
 8019f8c:	4608      	mov	r0, r1
 8019f8e:	f7ff fd3b 	bl	8019a08 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019f92:	4638      	mov	r0, r7
 8019f94:	f002 f989 	bl	801c2aa <_ZN8touchgfx12TextProviderC1Ev>
 8019f98:	6820      	ldr	r0, [r4, #0]
 8019f9a:	6803      	ldr	r3, [r0, #0]
 8019f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f9e:	4798      	blx	r3
 8019fa0:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	4651      	mov	r1, sl
 8019fa6:	4638      	mov	r0, r7
 8019fa8:	f002 f9c4 	bl	801c334 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019fac:	7923      	ldrb	r3, [r4, #4]
 8019fae:	6820      	ldr	r0, [r4, #0]
 8019fb0:	9308      	str	r3, [sp, #32]
 8019fb2:	6803      	ldr	r3, [r0, #0]
 8019fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019fb6:	4798      	blx	r3
 8019fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019fbc:	181e      	adds	r6, r3, r0
 8019fbe:	42ae      	cmp	r6, r5
 8019fc0:	dd06      	ble.n	8019fd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8019fc2:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8019fc6:	4282      	cmp	r2, r0
 8019fc8:	bfa4      	itt	ge
 8019fca:	189d      	addge	r5, r3, r2
 8019fcc:	fb95 f5f6 	sdivge	r5, r5, r6
 8019fd0:	a82e      	add	r0, sp, #184	; 0xb8
 8019fd2:	f002 f96a 	bl	801c2aa <_ZN8touchgfx12TextProviderC1Ev>
 8019fd6:	7c23      	ldrb	r3, [r4, #16]
 8019fd8:	b14b      	cbz	r3, 8019fee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8019fda:	6820      	ldr	r0, [r4, #0]
 8019fdc:	6803      	ldr	r3, [r0, #0]
 8019fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019fe0:	4798      	blx	r3
 8019fe2:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019fe4:	4603      	mov	r3, r0
 8019fe6:	4651      	mov	r1, sl
 8019fe8:	a82e      	add	r0, sp, #184	; 0xb8
 8019fea:	f002 f9a3 	bl	801c334 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019fee:	7c21      	ldrb	r1, [r4, #16]
 8019ff0:	a810      	add	r0, sp, #64	; 0x40
 8019ff2:	7963      	ldrb	r3, [r4, #5]
 8019ff4:	9101      	str	r1, [sp, #4]
 8019ff6:	6821      	ldr	r1, [r4, #0]
 8019ff8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8019ffc:	9100      	str	r1, [sp, #0]
 8019ffe:	a92e      	add	r1, sp, #184	; 0xb8
 801a000:	f7ff fc8c 	bl	801991c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a004:	7c23      	ldrb	r3, [r4, #16]
 801a006:	b9bb      	cbnz	r3, 801a038 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 801a008:	fa1f fa86 	uxth.w	sl, r6
 801a00c:	2d00      	cmp	r5, #0
 801a00e:	dd45      	ble.n	801a09c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801a010:	4638      	mov	r0, r7
 801a012:	f002 fd81 	bl	801cb18 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a016:	2800      	cmp	r0, #0
 801a018:	d03d      	beq.n	801a096 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801a01a:	280a      	cmp	r0, #10
 801a01c:	d1f6      	bne.n	801a00c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801a01e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a022:	3d01      	subs	r5, #1
 801a024:	4453      	add	r3, sl
 801a026:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a02a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a02e:	eba3 030a 	sub.w	r3, r3, sl
 801a032:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a036:	e7e9      	b.n	801a00c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801a038:	0073      	lsls	r3, r6, #1
 801a03a:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801a03e:	fa1f fa86 	uxth.w	sl, r6
 801a042:	9309      	str	r3, [sp, #36]	; 0x24
 801a044:	2d00      	cmp	r5, #0
 801a046:	dd29      	ble.n	801a09c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801a048:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801a04c:	a810      	add	r0, sp, #64	; 0x40
 801a04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a050:	428b      	cmp	r3, r1
 801a052:	bfd4      	ite	le
 801a054:	2100      	movle	r1, #0
 801a056:	2101      	movgt	r1, #1
 801a058:	f7ff fe78 	bl	8019d4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a05c:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 801a060:	3b01      	subs	r3, #1
 801a062:	b29b      	uxth	r3, r3
 801a064:	455b      	cmp	r3, fp
 801a066:	930b      	str	r3, [sp, #44]	; 0x2c
 801a068:	d005      	beq.n	801a076 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801a06a:	7961      	ldrb	r1, [r4, #5]
 801a06c:	4638      	mov	r0, r7
 801a06e:	f7fa fa3f 	bl	80144f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a074:	e7f4      	b.n	801a060 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 801a076:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a07a:	3d01      	subs	r5, #1
 801a07c:	4453      	add	r3, sl
 801a07e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a082:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a086:	eba3 030a 	sub.w	r3, r3, sl
 801a08a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a08e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a092:	2b00      	cmp	r3, #0
 801a094:	d1d6      	bne.n	801a044 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 801a096:	b05b      	add	sp, #364	; 0x16c
 801a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a09c:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801a0a0:	ad44      	add	r5, sp, #272	; 0x110
 801a0a2:	f04f 0b00 	mov.w	fp, #0
 801a0a6:	7c23      	ldrb	r3, [r4, #16]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d067      	beq.n	801a17c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801a0ac:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801a0b0:	a810      	add	r0, sp, #64	; 0x40
 801a0b2:	458a      	cmp	sl, r1
 801a0b4:	bfd4      	ite	le
 801a0b6:	2100      	movle	r1, #0
 801a0b8:	2101      	movgt	r1, #1
 801a0ba:	f7ff fe47 	bl	8019d4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a0be:	9b08      	ldr	r3, [sp, #32]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d056      	beq.n	801a172 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a0c4:	7c23      	ldrb	r3, [r4, #16]
 801a0c6:	2258      	movs	r2, #88	; 0x58
 801a0c8:	4639      	mov	r1, r7
 801a0ca:	4628      	mov	r0, r5
 801a0cc:	9309      	str	r3, [sp, #36]	; 0x24
 801a0ce:	f00f fc79 	bl	80299c4 <memcpy>
 801a0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d059      	beq.n	801a18c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801a0d8:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801a0dc:	7922      	ldrb	r2, [r4, #4]
 801a0de:	2a01      	cmp	r2, #1
 801a0e0:	d13d      	bne.n	801a15e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 801a0e2:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801a0e6:	1ac0      	subs	r0, r0, r3
 801a0e8:	2302      	movs	r3, #2
 801a0ea:	fb90 f0f3 	sdiv	r0, r0, r3
 801a0ee:	b200      	sxth	r0, r0
 801a0f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a0f4:	4418      	add	r0, r3
 801a0f6:	7c23      	ldrb	r3, [r4, #16]
 801a0f8:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d03a      	beq.n	801a176 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801a100:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801a104:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801a108:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a10c:	9500      	str	r5, [sp, #0]
 801a10e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a110:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a114:	e9cd b703 	strd	fp, r7, [sp, #12]
 801a118:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801a11c:	464a      	mov	r2, r9
 801a11e:	2100      	movs	r1, #0
 801a120:	f7ff fca3 	bl	8019a6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a124:	2800      	cmp	r0, #0
 801a126:	d1b6      	bne.n	801a096 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801a128:	b2b2      	uxth	r2, r6
 801a12a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a12e:	4611      	mov	r1, r2
 801a130:	4413      	add	r3, r2
 801a132:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801a136:	b21b      	sxth	r3, r3
 801a138:	1a52      	subs	r2, r2, r1
 801a13a:	7c21      	ldrb	r1, [r4, #16]
 801a13c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a140:	b212      	sxth	r2, r2
 801a142:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a146:	b109      	cbz	r1, 801a14c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801a148:	42b2      	cmp	r2, r6
 801a14a:	dba4      	blt.n	801a096 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801a14c:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801a150:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801a154:	440a      	add	r2, r1
 801a156:	b212      	sxth	r2, r2
 801a158:	4293      	cmp	r3, r2
 801a15a:	dda4      	ble.n	801a0a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 801a15c:	e79b      	b.n	801a096 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801a15e:	2a02      	cmp	r2, #2
 801a160:	d105      	bne.n	801a16e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 801a162:	7be2      	ldrb	r2, [r4, #15]
 801a164:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801a168:	1a80      	subs	r0, r0, r2
 801a16a:	1ac0      	subs	r0, r0, r3
 801a16c:	e7bf      	b.n	801a0ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 801a16e:	2000      	movs	r0, #0
 801a170:	e7be      	b.n	801a0f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801a172:	7be0      	ldrb	r0, [r4, #15]
 801a174:	e7bc      	b.n	801a0f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801a176:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a17a:	e7c3      	b.n	801a104 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 801a17c:	9b08      	ldr	r3, [sp, #32]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d0f7      	beq.n	801a172 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a182:	2258      	movs	r2, #88	; 0x58
 801a184:	4639      	mov	r1, r7
 801a186:	4628      	mov	r0, r5
 801a188:	f00f fc1c 	bl	80299c4 <memcpy>
 801a18c:	2300      	movs	r3, #0
 801a18e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a192:	6821      	ldr	r1, [r4, #0]
 801a194:	4628      	mov	r0, r5
 801a196:	f7ff fbfb 	bl	8019990 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a19a:	b203      	sxth	r3, r0
 801a19c:	e79e      	b.n	801a0dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

0801a19e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a19e:	2b02      	cmp	r3, #2
 801a1a0:	b510      	push	{r4, lr}
 801a1a2:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a1a6:	d00b      	beq.n	801a1c0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a1a8:	2b03      	cmp	r3, #3
 801a1aa:	d00e      	beq.n	801a1ca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801a1ac:	2b01      	cmp	r3, #1
 801a1ae:	d001      	beq.n	801a1b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801a1b0:	1860      	adds	r0, r4, r1
 801a1b2:	bd10      	pop	{r4, pc}
 801a1b4:	8880      	ldrh	r0, [r0, #4]
 801a1b6:	4420      	add	r0, r4
 801a1b8:	b200      	sxth	r0, r0
 801a1ba:	1a80      	subs	r0, r0, r2
 801a1bc:	3801      	subs	r0, #1
 801a1be:	e7f8      	b.n	801a1b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a1c0:	8880      	ldrh	r0, [r0, #4]
 801a1c2:	4420      	add	r0, r4
 801a1c4:	b200      	sxth	r0, r0
 801a1c6:	1a40      	subs	r0, r0, r1
 801a1c8:	e7f8      	b.n	801a1bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a1ca:	18a0      	adds	r0, r4, r2
 801a1cc:	e7f1      	b.n	801a1b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801a1ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a1ce:	2b02      	cmp	r3, #2
 801a1d0:	b510      	push	{r4, lr}
 801a1d2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a1d6:	d006      	beq.n	801a1e6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801a1d8:	2b03      	cmp	r3, #3
 801a1da:	d00a      	beq.n	801a1f2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a1dc:	2b01      	cmp	r3, #1
 801a1de:	bf14      	ite	ne
 801a1e0:	18a0      	addne	r0, r4, r2
 801a1e2:	1860      	addeq	r0, r4, r1
 801a1e4:	bd10      	pop	{r4, pc}
 801a1e6:	88c0      	ldrh	r0, [r0, #6]
 801a1e8:	4420      	add	r0, r4
 801a1ea:	b200      	sxth	r0, r0
 801a1ec:	1a80      	subs	r0, r0, r2
 801a1ee:	3801      	subs	r0, #1
 801a1f0:	e7f8      	b.n	801a1e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a1f2:	88c0      	ldrh	r0, [r0, #6]
 801a1f4:	4420      	add	r0, r4
 801a1f6:	b200      	sxth	r0, r0
 801a1f8:	1a40      	subs	r0, r0, r1
 801a1fa:	e7f8      	b.n	801a1ee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801a1fc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a1fc:	4b01      	ldr	r3, [pc, #4]	; (801a204 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a1fe:	2200      	movs	r2, #0
 801a200:	601a      	str	r2, [r3, #0]
 801a202:	4770      	bx	lr
 801a204:	2000594c 	.word	0x2000594c

0801a208 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a208:	4603      	mov	r3, r0
 801a20a:	b1c8      	cbz	r0, 801a240 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a20c:	0c02      	lsrs	r2, r0, #16
 801a20e:	0412      	lsls	r2, r2, #16
 801a210:	b9a2      	cbnz	r2, 801a23c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a212:	0403      	lsls	r3, r0, #16
 801a214:	2010      	movs	r0, #16
 801a216:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a21a:	bf04      	itt	eq
 801a21c:	021b      	lsleq	r3, r3, #8
 801a21e:	3008      	addeq	r0, #8
 801a220:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a224:	bf04      	itt	eq
 801a226:	011b      	lsleq	r3, r3, #4
 801a228:	3004      	addeq	r0, #4
 801a22a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a22e:	bf04      	itt	eq
 801a230:	009b      	lsleq	r3, r3, #2
 801a232:	3002      	addeq	r0, #2
 801a234:	2b00      	cmp	r3, #0
 801a236:	db04      	blt.n	801a242 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a238:	3001      	adds	r0, #1
 801a23a:	4770      	bx	lr
 801a23c:	2000      	movs	r0, #0
 801a23e:	e7ea      	b.n	801a216 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a240:	2020      	movs	r0, #32
 801a242:	4770      	bx	lr

0801a244 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a248:	b087      	sub	sp, #28
 801a24a:	4681      	mov	r9, r0
 801a24c:	4698      	mov	r8, r3
 801a24e:	4610      	mov	r0, r2
 801a250:	460d      	mov	r5, r1
 801a252:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801a256:	b981      	cbnz	r1, 801a27a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801a258:	b14b      	cbz	r3, 801a26e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801a25a:	460b      	mov	r3, r1
 801a25c:	464a      	mov	r2, r9
 801a25e:	4641      	mov	r1, r8
 801a260:	e9cd 4700 	strd	r4, r7, [sp]
 801a264:	f7ff ffee 	bl	801a244 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a268:	b007      	add	sp, #28
 801a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a26e:	f04f 33ff 	mov.w	r3, #4294967295
 801a272:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a276:	603b      	str	r3, [r7, #0]
 801a278:	e7f6      	b.n	801a268 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a27a:	fa32 fa01 	lsrs.w	sl, r2, r1
 801a27e:	d107      	bne.n	801a290 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801a280:	fb09 f602 	mul.w	r6, r9, r2
 801a284:	fbb6 f0f4 	udiv	r0, r6, r4
 801a288:	fb04 6610 	mls	r6, r4, r0, r6
 801a28c:	603e      	str	r6, [r7, #0]
 801a28e:	e7eb      	b.n	801a268 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a290:	2601      	movs	r6, #1
 801a292:	fa09 fb01 	lsl.w	fp, r9, r1
 801a296:	408e      	lsls	r6, r1
 801a298:	fbbb f3f4 	udiv	r3, fp, r4
 801a29c:	3e01      	subs	r6, #1
 801a29e:	9302      	str	r3, [sp, #8]
 801a2a0:	fb0a f303 	mul.w	r3, sl, r3
 801a2a4:	4016      	ands	r6, r2
 801a2a6:	9303      	str	r3, [sp, #12]
 801a2a8:	4630      	mov	r0, r6
 801a2aa:	f7ff ffad 	bl	801a208 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a2ae:	464a      	mov	r2, r9
 801a2b0:	460b      	mov	r3, r1
 801a2b2:	4601      	mov	r1, r0
 801a2b4:	4630      	mov	r0, r6
 801a2b6:	e9cd 4700 	strd	r4, r7, [sp]
 801a2ba:	f7ff ffc3 	bl	801a244 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a2be:	9b02      	ldr	r3, [sp, #8]
 801a2c0:	4606      	mov	r6, r0
 801a2c2:	eb05 0108 	add.w	r1, r5, r8
 801a2c6:	fb04 bb13 	mls	fp, r4, r3, fp
 801a2ca:	4658      	mov	r0, fp
 801a2cc:	f7ff ff9c 	bl	801a208 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a2d0:	ab05      	add	r3, sp, #20
 801a2d2:	465a      	mov	r2, fp
 801a2d4:	e9cd 4300 	strd	r4, r3, [sp]
 801a2d8:	4603      	mov	r3, r0
 801a2da:	4650      	mov	r0, sl
 801a2dc:	f7ff ffb2 	bl	801a244 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a2e0:	6839      	ldr	r1, [r7, #0]
 801a2e2:	9a05      	ldr	r2, [sp, #20]
 801a2e4:	9b03      	ldr	r3, [sp, #12]
 801a2e6:	4411      	add	r1, r2
 801a2e8:	fbb1 f2f4 	udiv	r2, r1, r4
 801a2ec:	18d3      	adds	r3, r2, r3
 801a2ee:	fb04 1412 	mls	r4, r4, r2, r1
 801a2f2:	441e      	add	r6, r3
 801a2f4:	603c      	str	r4, [r7, #0]
 801a2f6:	4430      	add	r0, r6
 801a2f8:	e7b6      	b.n	801a268 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801a2fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a2fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a2fe:	b085      	sub	sp, #20
 801a300:	f1b0 0900 	subs.w	r9, r0, #0
 801a304:	461d      	mov	r5, r3
 801a306:	4617      	mov	r7, r2
 801a308:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a30a:	bfbb      	ittet	lt
 801a30c:	f1c9 0900 	rsblt	r9, r9, #0
 801a310:	f04f 36ff 	movlt.w	r6, #4294967295
 801a314:	2601      	movge	r6, #1
 801a316:	6823      	ldrlt	r3, [r4, #0]
 801a318:	bfbc      	itt	lt
 801a31a:	425b      	neglt	r3, r3
 801a31c:	6023      	strlt	r3, [r4, #0]
 801a31e:	2a00      	cmp	r2, #0
 801a320:	da04      	bge.n	801a32c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a322:	6823      	ldr	r3, [r4, #0]
 801a324:	4257      	negs	r7, r2
 801a326:	4276      	negs	r6, r6
 801a328:	425b      	negs	r3, r3
 801a32a:	6023      	str	r3, [r4, #0]
 801a32c:	2d00      	cmp	r5, #0
 801a32e:	4638      	mov	r0, r7
 801a330:	bfba      	itte	lt
 801a332:	426d      	neglt	r5, r5
 801a334:	f04f 38ff 	movlt.w	r8, #4294967295
 801a338:	f04f 0801 	movge.w	r8, #1
 801a33c:	f7ff ff64 	bl	801a208 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a340:	ab03      	add	r3, sp, #12
 801a342:	463a      	mov	r2, r7
 801a344:	e9cd 5300 	strd	r5, r3, [sp]
 801a348:	4603      	mov	r3, r0
 801a34a:	4648      	mov	r0, r9
 801a34c:	f7ff ff7a 	bl	801a244 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a350:	6823      	ldr	r3, [r4, #0]
 801a352:	9a03      	ldr	r2, [sp, #12]
 801a354:	4546      	cmp	r6, r8
 801a356:	441a      	add	r2, r3
 801a358:	fb92 f3f5 	sdiv	r3, r2, r5
 801a35c:	4418      	add	r0, r3
 801a35e:	fb05 2313 	mls	r3, r5, r3, r2
 801a362:	bf18      	it	ne
 801a364:	4240      	negne	r0, r0
 801a366:	1c72      	adds	r2, r6, #1
 801a368:	6023      	str	r3, [r4, #0]
 801a36a:	d105      	bne.n	801a378 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	f1c3 0200 	rsb	r2, r3, #0
 801a372:	db0b      	blt.n	801a38c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a374:	6022      	str	r2, [r4, #0]
 801a376:	e006      	b.n	801a386 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a378:	2e01      	cmp	r6, #1
 801a37a:	d104      	bne.n	801a386 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	da02      	bge.n	801a386 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a380:	442b      	add	r3, r5
 801a382:	3801      	subs	r0, #1
 801a384:	6023      	str	r3, [r4, #0]
 801a386:	b005      	add	sp, #20
 801a388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a38c:	3801      	subs	r0, #1
 801a38e:	1b52      	subs	r2, r2, r5
 801a390:	e7f0      	b.n	801a374 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801a394 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a394:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a398:	4c1c      	ldr	r4, [pc, #112]	; (801a40c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a39a:	4605      	mov	r5, r0
 801a39c:	6807      	ldr	r7, [r0, #0]
 801a39e:	69a3      	ldr	r3, [r4, #24]
 801a3a0:	b92b      	cbnz	r3, 801a3ae <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a3a2:	6840      	ldr	r0, [r0, #4]
 801a3a4:	e9c5 7000 	strd	r7, r0, [r5]
 801a3a8:	b004      	add	sp, #16
 801a3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3ae:	f04f 0802 	mov.w	r8, #2
 801a3b2:	68a2      	ldr	r2, [r4, #8]
 801a3b4:	ae04      	add	r6, sp, #16
 801a3b6:	6820      	ldr	r0, [r4, #0]
 801a3b8:	fb93 f1f8 	sdiv	r1, r3, r8
 801a3bc:	440a      	add	r2, r1
 801a3be:	69e1      	ldr	r1, [r4, #28]
 801a3c0:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a3c4:	463a      	mov	r2, r7
 801a3c6:	9600      	str	r6, [sp, #0]
 801a3c8:	f7ff ff97 	bl	801a2fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a3cc:	69a3      	ldr	r3, [r4, #24]
 801a3ce:	4607      	mov	r7, r0
 801a3d0:	686a      	ldr	r2, [r5, #4]
 801a3d2:	6a21      	ldr	r1, [r4, #32]
 801a3d4:	9600      	str	r6, [sp, #0]
 801a3d6:	6860      	ldr	r0, [r4, #4]
 801a3d8:	f7ff ff8f 	bl	801a2fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a3dc:	69a3      	ldr	r3, [r4, #24]
 801a3de:	6962      	ldr	r2, [r4, #20]
 801a3e0:	4407      	add	r7, r0
 801a3e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a3e4:	9600      	str	r6, [sp, #0]
 801a3e6:	68e0      	ldr	r0, [r4, #12]
 801a3e8:	fb93 f8f8 	sdiv	r8, r3, r8
 801a3ec:	4442      	add	r2, r8
 801a3ee:	9203      	str	r2, [sp, #12]
 801a3f0:	682a      	ldr	r2, [r5, #0]
 801a3f2:	f7ff ff82 	bl	801a2fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a3f6:	4680      	mov	r8, r0
 801a3f8:	9600      	str	r6, [sp, #0]
 801a3fa:	69a3      	ldr	r3, [r4, #24]
 801a3fc:	686a      	ldr	r2, [r5, #4]
 801a3fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a400:	6920      	ldr	r0, [r4, #16]
 801a402:	f7ff ff7a 	bl	801a2fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a406:	4440      	add	r0, r8
 801a408:	e7cc      	b.n	801a3a4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a40a:	bf00      	nop
 801a40c:	20005950 	.word	0x20005950

0801a410 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a410:	4b07      	ldr	r3, [pc, #28]	; (801a430 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a412:	b510      	push	{r4, lr}
 801a414:	781b      	ldrb	r3, [r3, #0]
 801a416:	2b01      	cmp	r3, #1
 801a418:	d108      	bne.n	801a42c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a41a:	4b06      	ldr	r3, [pc, #24]	; (801a434 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a41c:	880c      	ldrh	r4, [r1, #0]
 801a41e:	881b      	ldrh	r3, [r3, #0]
 801a420:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a424:	3b01      	subs	r3, #1
 801a426:	1b1b      	subs	r3, r3, r4
 801a428:	8003      	strh	r3, [r0, #0]
 801a42a:	800a      	strh	r2, [r1, #0]
 801a42c:	bd10      	pop	{r4, pc}
 801a42e:	bf00      	nop
 801a430:	2000593c 	.word	0x2000593c
 801a434:	20005940 	.word	0x20005940

0801a438 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a438:	4b0a      	ldr	r3, [pc, #40]	; (801a464 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a43a:	b510      	push	{r4, lr}
 801a43c:	781b      	ldrb	r3, [r3, #0]
 801a43e:	2b01      	cmp	r3, #1
 801a440:	d10e      	bne.n	801a460 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a442:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a446:	8843      	ldrh	r3, [r0, #2]
 801a448:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a44c:	18ca      	adds	r2, r1, r3
 801a44e:	4b06      	ldr	r3, [pc, #24]	; (801a468 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a450:	8044      	strh	r4, [r0, #2]
 801a452:	881b      	ldrh	r3, [r3, #0]
 801a454:	1a9b      	subs	r3, r3, r2
 801a456:	8003      	strh	r3, [r0, #0]
 801a458:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a45c:	8081      	strh	r1, [r0, #4]
 801a45e:	80c3      	strh	r3, [r0, #6]
 801a460:	bd10      	pop	{r4, pc}
 801a462:	bf00      	nop
 801a464:	2000593c 	.word	0x2000593c
 801a468:	20005938 	.word	0x20005938

0801a46c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a46c:	4b07      	ldr	r3, [pc, #28]	; (801a48c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a46e:	b510      	push	{r4, lr}
 801a470:	781b      	ldrb	r3, [r3, #0]
 801a472:	2b01      	cmp	r3, #1
 801a474:	d108      	bne.n	801a488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a476:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a47a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a47e:	8003      	strh	r3, [r0, #0]
 801a480:	8893      	ldrh	r3, [r2, #4]
 801a482:	3b01      	subs	r3, #1
 801a484:	1b1b      	subs	r3, r3, r4
 801a486:	800b      	strh	r3, [r1, #0]
 801a488:	bd10      	pop	{r4, pc}
 801a48a:	bf00      	nop
 801a48c:	2000593c 	.word	0x2000593c

0801a490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a490:	4b08      	ldr	r3, [pc, #32]	; (801a4b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a492:	b513      	push	{r0, r1, r4, lr}
 801a494:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a498:	2400      	movs	r4, #0
 801a49a:	4b07      	ldr	r3, [pc, #28]	; (801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801a49c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a4a0:	466a      	mov	r2, sp
 801a4a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a4a6:	9400      	str	r4, [sp, #0]
 801a4a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a4ac:	f7ff ffde 	bl	801a46c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a4b0:	b002      	add	sp, #8
 801a4b2:	bd10      	pop	{r4, pc}
 801a4b4:	20005938 	.word	0x20005938
 801a4b8:	2000593a 	.word	0x2000593a

0801a4bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a4bc:	4b0a      	ldr	r3, [pc, #40]	; (801a4e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a4be:	460a      	mov	r2, r1
 801a4c0:	b510      	push	{r4, lr}
 801a4c2:	781b      	ldrb	r3, [r3, #0]
 801a4c4:	2b01      	cmp	r3, #1
 801a4c6:	d10d      	bne.n	801a4e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a4c8:	8881      	ldrh	r1, [r0, #4]
 801a4ca:	8803      	ldrh	r3, [r0, #0]
 801a4cc:	440b      	add	r3, r1
 801a4ce:	4601      	mov	r1, r0
 801a4d0:	3b01      	subs	r3, #1
 801a4d2:	f821 3b02 	strh.w	r3, [r1], #2
 801a4d6:	f7ff ffc9 	bl	801a46c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a4da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a4de:	88c2      	ldrh	r2, [r0, #6]
 801a4e0:	80c3      	strh	r3, [r0, #6]
 801a4e2:	8082      	strh	r2, [r0, #4]
 801a4e4:	bd10      	pop	{r4, pc}
 801a4e6:	bf00      	nop
 801a4e8:	2000593c 	.word	0x2000593c

0801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a4ec:	4b09      	ldr	r3, [pc, #36]	; (801a514 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a4ee:	b507      	push	{r0, r1, r2, lr}
 801a4f0:	2100      	movs	r1, #0
 801a4f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a4f6:	4b08      	ldr	r3, [pc, #32]	; (801a518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801a4f8:	9100      	str	r1, [sp, #0]
 801a4fa:	4669      	mov	r1, sp
 801a4fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a500:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a504:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a508:	f7ff ffd8 	bl	801a4bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a50c:	b003      	add	sp, #12
 801a50e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a512:	bf00      	nop
 801a514:	20005938 	.word	0x20005938
 801a518:	2000593a 	.word	0x2000593a

0801a51c <_ZN8touchgfx11Application13requestRedrawEv>:
 801a51c:	4b06      	ldr	r3, [pc, #24]	; (801a538 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a51e:	2100      	movs	r1, #0
 801a520:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a524:	4b05      	ldr	r3, [pc, #20]	; (801a53c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a526:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801a52a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a52e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801a532:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801a536:	4770      	bx	lr
 801a538:	20005938 	.word	0x20005938
 801a53c:	2000593a 	.word	0x2000593a

0801a540 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a540:	4b03      	ldr	r3, [pc, #12]	; (801a550 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a542:	6818      	ldr	r0, [r3, #0]
 801a544:	b110      	cbz	r0, 801a54c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a546:	6803      	ldr	r3, [r0, #0]
 801a548:	699b      	ldr	r3, [r3, #24]
 801a54a:	4718      	bx	r3
 801a54c:	4770      	bx	lr
 801a54e:	bf00      	nop
 801a550:	20005980 	.word	0x20005980

0801a554 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a554:	4770      	bx	lr
	...

0801a558 <_ZN8touchgfx11Application4drawEv>:
 801a558:	4b09      	ldr	r3, [pc, #36]	; (801a580 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a55a:	b507      	push	{r0, r1, r2, lr}
 801a55c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a560:	2100      	movs	r1, #0
 801a562:	4b08      	ldr	r3, [pc, #32]	; (801a584 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a564:	9100      	str	r1, [sp, #0]
 801a566:	4669      	mov	r1, sp
 801a568:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a56c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a570:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a574:	6803      	ldr	r3, [r0, #0]
 801a576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a578:	4798      	blx	r3
 801a57a:	b003      	add	sp, #12
 801a57c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a580:	20005938 	.word	0x20005938
 801a584:	2000593a 	.word	0x2000593a

0801a588 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a588:	4b03      	ldr	r3, [pc, #12]	; (801a598 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a58a:	6818      	ldr	r0, [r3, #0]
 801a58c:	b110      	cbz	r0, 801a594 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a58e:	6803      	ldr	r3, [r0, #0]
 801a590:	69db      	ldr	r3, [r3, #28]
 801a592:	4718      	bx	r3
 801a594:	4770      	bx	lr
 801a596:	bf00      	nop
 801a598:	20005980 	.word	0x20005980

0801a59c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a59c:	4b03      	ldr	r3, [pc, #12]	; (801a5ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a59e:	6818      	ldr	r0, [r3, #0]
 801a5a0:	b110      	cbz	r0, 801a5a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a5a2:	6803      	ldr	r3, [r0, #0]
 801a5a4:	6a1b      	ldr	r3, [r3, #32]
 801a5a6:	4718      	bx	r3
 801a5a8:	4770      	bx	lr
 801a5aa:	bf00      	nop
 801a5ac:	20005980 	.word	0x20005980

0801a5b0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a5b0:	4b03      	ldr	r3, [pc, #12]	; (801a5c0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a5b2:	6818      	ldr	r0, [r3, #0]
 801a5b4:	b110      	cbz	r0, 801a5bc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a5b6:	6803      	ldr	r3, [r0, #0]
 801a5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5ba:	4718      	bx	r3
 801a5bc:	4770      	bx	lr
 801a5be:	bf00      	nop
 801a5c0:	20005980 	.word	0x20005980

0801a5c4 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a5c4:	b570      	push	{r4, r5, r6, lr}
 801a5c6:	4d34      	ldr	r5, [pc, #208]	; (801a698 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801a5c8:	4604      	mov	r4, r0
 801a5ca:	6828      	ldr	r0, [r5, #0]
 801a5cc:	b140      	cbz	r0, 801a5e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a5ce:	7a03      	ldrb	r3, [r0, #8]
 801a5d0:	b933      	cbnz	r3, 801a5e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a5d2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a5d6:	6803      	ldr	r3, [r0, #0]
 801a5d8:	689b      	ldr	r3, [r3, #8]
 801a5da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5de:	4718      	bx	r3
 801a5e0:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801a5e4:	b97b      	cbnz	r3, 801a606 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a5e6:	b170      	cbz	r0, 801a606 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a5e8:	7a03      	ldrb	r3, [r0, #8]
 801a5ea:	b163      	cbz	r3, 801a606 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a5ec:	4b2b      	ldr	r3, [pc, #172]	; (801a69c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a5ee:	6818      	ldr	r0, [r3, #0]
 801a5f0:	b110      	cbz	r0, 801a5f8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a5f2:	6803      	ldr	r3, [r0, #0]
 801a5f4:	691b      	ldr	r3, [r3, #16]
 801a5f6:	4798      	blx	r3
 801a5f8:	6828      	ldr	r0, [r5, #0]
 801a5fa:	6803      	ldr	r3, [r0, #0]
 801a5fc:	68db      	ldr	r3, [r3, #12]
 801a5fe:	4798      	blx	r3
 801a600:	2301      	movs	r3, #1
 801a602:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a606:	2500      	movs	r5, #0
 801a608:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801a60c:	42a8      	cmp	r0, r5
 801a60e:	dd0c      	ble.n	801a62a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801a610:	1963      	adds	r3, r4, r5
 801a612:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a616:	b132      	cbz	r2, 801a626 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801a618:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a61c:	4413      	add	r3, r2
 801a61e:	6858      	ldr	r0, [r3, #4]
 801a620:	6803      	ldr	r3, [r0, #0]
 801a622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a624:	4798      	blx	r3
 801a626:	3501      	adds	r5, #1
 801a628:	e7ee      	b.n	801a608 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a62a:	2300      	movs	r3, #0
 801a62c:	461a      	mov	r2, r3
 801a62e:	4298      	cmp	r0, r3
 801a630:	d114      	bne.n	801a65c <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801a632:	1d25      	adds	r5, r4, #4
 801a634:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801a638:	1e48      	subs	r0, r1, #1
 801a63a:	b280      	uxth	r0, r0
 801a63c:	4291      	cmp	r1, r2
 801a63e:	dd24      	ble.n	801a68a <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801a640:	4288      	cmp	r0, r1
 801a642:	d2fb      	bcs.n	801a63c <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801a644:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801a648:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801a64c:	3304      	adds	r3, #4
 801a64e:	428b      	cmp	r3, r1
 801a650:	d018      	beq.n	801a684 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801a652:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801a656:	f843 6c04 	str.w	r6, [r3, #-4]
 801a65a:	e7f8      	b.n	801a64e <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801a65c:	18e1      	adds	r1, r4, r3
 801a65e:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801a662:	b16d      	cbz	r5, 801a680 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801a664:	429a      	cmp	r2, r3
 801a666:	d00a      	beq.n	801a67e <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801a668:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801a66c:	4431      	add	r1, r6
 801a66e:	684e      	ldr	r6, [r1, #4]
 801a670:	b291      	uxth	r1, r2
 801a672:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a676:	604e      	str	r6, [r1, #4]
 801a678:	18a1      	adds	r1, r4, r2
 801a67a:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801a67e:	3201      	adds	r2, #1
 801a680:	3301      	adds	r3, #1
 801a682:	e7d4      	b.n	801a62e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801a684:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801a688:	e7d4      	b.n	801a634 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801a68a:	4b04      	ldr	r3, [pc, #16]	; (801a69c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a68c:	6818      	ldr	r0, [r3, #0]
 801a68e:	b110      	cbz	r0, 801a696 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801a690:	6803      	ldr	r3, [r0, #0]
 801a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a694:	e7a1      	b.n	801a5da <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a696:	bd70      	pop	{r4, r5, r6, pc}
 801a698:	20005984 	.word	0x20005984
 801a69c:	20005980 	.word	0x20005980

0801a6a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a6a0:	b570      	push	{r4, r5, r6, lr}
 801a6a2:	4606      	mov	r6, r0
 801a6a4:	460c      	mov	r4, r1
 801a6a6:	b929      	cbnz	r1, 801a6b4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801a6a8:	4b0c      	ldr	r3, [pc, #48]	; (801a6dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801a6aa:	2164      	movs	r1, #100	; 0x64
 801a6ac:	4a0c      	ldr	r2, [pc, #48]	; (801a6e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801a6ae:	480d      	ldr	r0, [pc, #52]	; (801a6e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801a6b0:	f00f f810 	bl	80296d4 <__assert_func>
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	4d0c      	ldr	r5, [pc, #48]	; (801a6e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801a6b8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a6bc:	6828      	ldr	r0, [r5, #0]
 801a6be:	b110      	cbz	r0, 801a6c6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801a6c0:	6803      	ldr	r3, [r0, #0]
 801a6c2:	695b      	ldr	r3, [r3, #20]
 801a6c4:	4798      	blx	r3
 801a6c6:	602c      	str	r4, [r5, #0]
 801a6c8:	4620      	mov	r0, r4
 801a6ca:	6823      	ldr	r3, [r4, #0]
 801a6cc:	68db      	ldr	r3, [r3, #12]
 801a6ce:	4798      	blx	r3
 801a6d0:	6833      	ldr	r3, [r6, #0]
 801a6d2:	4630      	mov	r0, r6
 801a6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a6d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a6da:	4718      	bx	r3
 801a6dc:	0802d3a4 	.word	0x0802d3a4
 801a6e0:	0802d49c 	.word	0x0802d49c
 801a6e4:	0802d3ae 	.word	0x0802d3ae
 801a6e8:	20005980 	.word	0x20005980

0801a6ec <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a6ec:	b510      	push	{r4, lr}
 801a6ee:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a6f2:	888a      	ldrh	r2, [r1, #4]
 801a6f4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a6f8:	4422      	add	r2, r4
 801a6fa:	b212      	sxth	r2, r2
 801a6fc:	4293      	cmp	r3, r2
 801a6fe:	da15      	bge.n	801a72c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a700:	8882      	ldrh	r2, [r0, #4]
 801a702:	4413      	add	r3, r2
 801a704:	b21b      	sxth	r3, r3
 801a706:	429c      	cmp	r4, r3
 801a708:	da10      	bge.n	801a72c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a70a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a70e:	88c9      	ldrh	r1, [r1, #6]
 801a710:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a714:	4419      	add	r1, r3
 801a716:	b209      	sxth	r1, r1
 801a718:	428a      	cmp	r2, r1
 801a71a:	da07      	bge.n	801a72c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a71c:	88c0      	ldrh	r0, [r0, #6]
 801a71e:	4410      	add	r0, r2
 801a720:	b200      	sxth	r0, r0
 801a722:	4283      	cmp	r3, r0
 801a724:	bfac      	ite	ge
 801a726:	2000      	movge	r0, #0
 801a728:	2001      	movlt	r0, #1
 801a72a:	bd10      	pop	{r4, pc}
 801a72c:	2000      	movs	r0, #0
 801a72e:	e7fc      	b.n	801a72a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a730 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a730:	b570      	push	{r4, r5, r6, lr}
 801a732:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a736:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a73a:	42ac      	cmp	r4, r5
 801a73c:	db18      	blt.n	801a770 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a73e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a742:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a746:	429a      	cmp	r2, r3
 801a748:	db12      	blt.n	801a770 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a74a:	8886      	ldrh	r6, [r0, #4]
 801a74c:	4435      	add	r5, r6
 801a74e:	888e      	ldrh	r6, [r1, #4]
 801a750:	4434      	add	r4, r6
 801a752:	b22d      	sxth	r5, r5
 801a754:	b224      	sxth	r4, r4
 801a756:	42a5      	cmp	r5, r4
 801a758:	db0a      	blt.n	801a770 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a75a:	88c0      	ldrh	r0, [r0, #6]
 801a75c:	4418      	add	r0, r3
 801a75e:	88cb      	ldrh	r3, [r1, #6]
 801a760:	441a      	add	r2, r3
 801a762:	b200      	sxth	r0, r0
 801a764:	b212      	sxth	r2, r2
 801a766:	4290      	cmp	r0, r2
 801a768:	bfb4      	ite	lt
 801a76a:	2000      	movlt	r0, #0
 801a76c:	2001      	movge	r0, #1
 801a76e:	bd70      	pop	{r4, r5, r6, pc}
 801a770:	2000      	movs	r0, #0
 801a772:	e7fc      	b.n	801a76e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801a774 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a776:	4604      	mov	r4, r0
 801a778:	4608      	mov	r0, r1
 801a77a:	460d      	mov	r5, r1
 801a77c:	f7fc fd47 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a780:	b978      	cbnz	r0, 801a7a2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801a782:	4620      	mov	r0, r4
 801a784:	f7fc fd43 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a788:	f9b5 6000 	ldrsh.w	r6, [r5]
 801a78c:	b150      	cbz	r0, 801a7a4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801a78e:	8026      	strh	r6, [r4, #0]
 801a790:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a794:	8063      	strh	r3, [r4, #2]
 801a796:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801a79a:	80a3      	strh	r3, [r4, #4]
 801a79c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a7a0:	80e3      	strh	r3, [r4, #6]
 801a7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7a4:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a7a8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a7ac:	42b1      	cmp	r1, r6
 801a7ae:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801a7b2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801a7b6:	460f      	mov	r7, r1
 801a7b8:	88ed      	ldrh	r5, [r5, #6]
 801a7ba:	bfa8      	it	ge
 801a7bc:	4637      	movge	r7, r6
 801a7be:	4293      	cmp	r3, r2
 801a7c0:	4618      	mov	r0, r3
 801a7c2:	4466      	add	r6, ip
 801a7c4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a7c8:	bfa8      	it	ge
 801a7ca:	4610      	movge	r0, r2
 801a7cc:	442a      	add	r2, r5
 801a7ce:	88e5      	ldrh	r5, [r4, #6]
 801a7d0:	4461      	add	r1, ip
 801a7d2:	b236      	sxth	r6, r6
 801a7d4:	8027      	strh	r7, [r4, #0]
 801a7d6:	442b      	add	r3, r5
 801a7d8:	b209      	sxth	r1, r1
 801a7da:	b212      	sxth	r2, r2
 801a7dc:	8060      	strh	r0, [r4, #2]
 801a7de:	b21b      	sxth	r3, r3
 801a7e0:	428e      	cmp	r6, r1
 801a7e2:	bfac      	ite	ge
 801a7e4:	ebc7 0106 	rsbge	r1, r7, r6
 801a7e8:	ebc7 0101 	rsblt	r1, r7, r1
 801a7ec:	429a      	cmp	r2, r3
 801a7ee:	bfac      	ite	ge
 801a7f0:	ebc0 0202 	rsbge	r2, r0, r2
 801a7f4:	ebc0 0203 	rsblt	r2, r0, r3
 801a7f8:	80a1      	strh	r1, [r4, #4]
 801a7fa:	80e2      	strh	r2, [r4, #6]
 801a7fc:	e7d1      	b.n	801a7a2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801a800 <_ZN8touchgfx11Application11getInstanceEv>:
 801a800:	4b01      	ldr	r3, [pc, #4]	; (801a808 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a802:	6818      	ldr	r0, [r3, #0]
 801a804:	4770      	bx	lr
 801a806:	bf00      	nop
 801a808:	20005990 	.word	0x20005990

0801a80c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801a80c:	b570      	push	{r4, r5, r6, lr}
 801a80e:	2200      	movs	r2, #0
 801a810:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801a814:	1d04      	adds	r4, r0, #4
 801a816:	b295      	uxth	r5, r2
 801a818:	42ab      	cmp	r3, r5
 801a81a:	d90e      	bls.n	801a83a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801a81c:	f854 6b04 	ldr.w	r6, [r4], #4
 801a820:	4615      	mov	r5, r2
 801a822:	3201      	adds	r2, #1
 801a824:	428e      	cmp	r6, r1
 801a826:	d1f6      	bne.n	801a816 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801a828:	4428      	add	r0, r5
 801a82a:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801a82e:	2bff      	cmp	r3, #255	; 0xff
 801a830:	d002      	beq.n	801a838 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801a832:	3301      	adds	r3, #1
 801a834:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801a838:	bd70      	pop	{r4, r5, r6, pc}
 801a83a:	2b20      	cmp	r3, #32
 801a83c:	d106      	bne.n	801a84c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801a83e:	4b09      	ldr	r3, [pc, #36]	; (801a864 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801a840:	f44f 7117 	mov.w	r1, #604	; 0x25c
 801a844:	4a08      	ldr	r2, [pc, #32]	; (801a868 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801a846:	4809      	ldr	r0, [pc, #36]	; (801a86c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801a848:	f00e ff44 	bl	80296d4 <__assert_func>
 801a84c:	18c2      	adds	r2, r0, r3
 801a84e:	2401      	movs	r4, #1
 801a850:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801a854:	191a      	adds	r2, r3, r4
 801a856:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801a85a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801a85e:	6041      	str	r1, [r0, #4]
 801a860:	e7ea      	b.n	801a838 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801a862:	bf00      	nop
 801a864:	0802d3d8 	.word	0x0802d3d8
 801a868:	0802d4e0 	.word	0x0802d4e0
 801a86c:	0802d3ae 	.word	0x0802d3ae

0801a870 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801a870:	b570      	push	{r4, r5, r6, lr}
 801a872:	2300      	movs	r3, #0
 801a874:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801a878:	1d04      	adds	r4, r0, #4
 801a87a:	b29a      	uxth	r2, r3
 801a87c:	4296      	cmp	r6, r2
 801a87e:	d90a      	bls.n	801a896 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801a880:	f854 2b04 	ldr.w	r2, [r4], #4
 801a884:	428a      	cmp	r2, r1
 801a886:	d107      	bne.n	801a898 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801a888:	18c5      	adds	r5, r0, r3
 801a88a:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801a88e:	b11a      	cbz	r2, 801a898 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801a890:	3a01      	subs	r2, #1
 801a892:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801a896:	bd70      	pop	{r4, r5, r6, pc}
 801a898:	3301      	adds	r3, #1
 801a89a:	e7ee      	b.n	801a87a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801a89c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a89c:	2300      	movs	r3, #0
 801a89e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a8a2:	30a8      	adds	r0, #168	; 0xa8
 801a8a4:	f820 3c24 	strh.w	r3, [r0, #-36]
 801a8a8:	f802 3b01 	strb.w	r3, [r2], #1
 801a8ac:	4282      	cmp	r2, r0
 801a8ae:	d1fb      	bne.n	801a8a8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a8b0:	4770      	bx	lr

0801a8b2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a8b2:	4603      	mov	r3, r0
 801a8b4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	801a      	strh	r2, [r3, #0]
 801a8bc:	3308      	adds	r3, #8
 801a8be:	f823 2c06 	strh.w	r2, [r3, #-6]
 801a8c2:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a8c6:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a8ca:	428b      	cmp	r3, r1
 801a8cc:	d1f5      	bne.n	801a8ba <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a8ce:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a8d2:	4770      	bx	lr

0801a8d4 <_ZN8touchgfx11ApplicationC1Ev>:
 801a8d4:	b570      	push	{r4, r5, r6, lr}
 801a8d6:	4b1a      	ldr	r3, [pc, #104]	; (801a940 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a8d8:	2500      	movs	r5, #0
 801a8da:	4604      	mov	r4, r0
 801a8dc:	30a8      	adds	r0, #168	; 0xa8
 801a8de:	f840 3ca8 	str.w	r3, [r0, #-168]
 801a8e2:	f820 5c24 	strh.w	r5, [r0, #-36]
 801a8e6:	f7ff ffe4 	bl	801a8b2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a8ea:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a8ee:	f7ff ffe0 	bl	801a8b2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a8f2:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801a8f6:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801a8fa:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801a8fe:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801a902:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801a906:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801a90a:	490e      	ldr	r1, [pc, #56]	; (801a944 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a90c:	480e      	ldr	r0, [pc, #56]	; (801a948 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a90e:	f00e fdab 	bl	8029468 <CRC_Lock>
 801a912:	4e0e      	ldr	r6, [pc, #56]	; (801a94c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801a914:	4b0e      	ldr	r3, [pc, #56]	; (801a950 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801a916:	b158      	cbz	r0, 801a930 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801a918:	801d      	strh	r5, [r3, #0]
 801a91a:	2300      	movs	r3, #0
 801a91c:	4a0d      	ldr	r2, [pc, #52]	; (801a954 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801a91e:	4620      	mov	r0, r4
 801a920:	6013      	str	r3, [r2, #0]
 801a922:	4a0d      	ldr	r2, [pc, #52]	; (801a958 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801a924:	6033      	str	r3, [r6, #0]
 801a926:	6013      	str	r3, [r2, #0]
 801a928:	f7ff ffb8 	bl	801a89c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a92c:	4620      	mov	r0, r4
 801a92e:	bd70      	pop	{r4, r5, r6, pc}
 801a930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a934:	2002      	movs	r0, #2
 801a936:	801a      	strh	r2, [r3, #0]
 801a938:	6030      	str	r0, [r6, #0]
 801a93a:	f001 fb07 	bl	801bf4c <_ZN8touchgfx6Screen4drawEv>
 801a93e:	e7ec      	b.n	801a91a <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801a940:	0802d460 	.word	0x0802d460
 801a944:	b5e8b5cd 	.word	0xb5e8b5cd
 801a948:	f407a5c2 	.word	0xf407a5c2
 801a94c:	20005980 	.word	0x20005980
 801a950:	20000148 	.word	0x20000148
 801a954:	20005990 	.word	0x20005990
 801a958:	20005984 	.word	0x20005984

0801a95c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a95c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801a960:	428b      	cmp	r3, r1
 801a962:	b510      	push	{r4, lr}
 801a964:	d90e      	bls.n	801a984 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a966:	3b01      	subs	r3, #1
 801a968:	b29b      	uxth	r3, r3
 801a96a:	428b      	cmp	r3, r1
 801a96c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801a970:	d908      	bls.n	801a984 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a972:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a976:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801a97a:	681a      	ldr	r2, [r3, #0]
 801a97c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801a980:	685a      	ldr	r2, [r3, #4]
 801a982:	6062      	str	r2, [r4, #4]
 801a984:	bd10      	pop	{r4, pc}
	...

0801a988 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801a988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a98a:	466b      	mov	r3, sp
 801a98c:	4604      	mov	r4, r0
 801a98e:	e883 0006 	stmia.w	r3, {r1, r2}
 801a992:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801a996:	2a07      	cmp	r2, #7
 801a998:	d906      	bls.n	801a9a8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801a99a:	4b09      	ldr	r3, [pc, #36]	; (801a9c0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801a99c:	f240 118f 	movw	r1, #399	; 0x18f
 801a9a0:	4a08      	ldr	r2, [pc, #32]	; (801a9c4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801a9a2:	4809      	ldr	r0, [pc, #36]	; (801a9c8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801a9a4:	f00e fe96 	bl	80296d4 <__assert_func>
 801a9a8:	1c51      	adds	r1, r2, #1
 801a9aa:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801a9ae:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a9b2:	cb03      	ldmia	r3!, {r0, r1}
 801a9b4:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801a9b8:	6069      	str	r1, [r5, #4]
 801a9ba:	b003      	add	sp, #12
 801a9bc:	bd30      	pop	{r4, r5, pc}
 801a9be:	bf00      	nop
 801a9c0:	0802d400 	.word	0x0802d400
 801a9c4:	0802d525 	.word	0x0802d525
 801a9c8:	0802d42f 	.word	0x0802d42f

0801a9cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9d0:	b08d      	sub	sp, #52	; 0x34
 801a9d2:	4683      	mov	fp, r0
 801a9d4:	ac08      	add	r4, sp, #32
 801a9d6:	4620      	mov	r0, r4
 801a9d8:	e884 0006 	stmia.w	r4, {r1, r2}
 801a9dc:	f7fc fc17 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a9e0:	2800      	cmp	r0, #0
 801a9e2:	d16a      	bne.n	801aaba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a9e4:	9402      	str	r4, [sp, #8]
 801a9e6:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a9ea:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a9ee:	2400      	movs	r4, #0
 801a9f0:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801a9f4:	9301      	str	r3, [sp, #4]
 801a9f6:	36a0      	adds	r6, #160	; 0xa0
 801a9f8:	42a5      	cmp	r5, r4
 801a9fa:	d00d      	beq.n	801aa18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801a9fc:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801aa00:	9802      	ldr	r0, [sp, #8]
 801aa02:	f7ff fe95 	bl	801a730 <_ZNK8touchgfx4Rect8includesERKS0_>
 801aa06:	b128      	cbz	r0, 801aa14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801aa08:	1e69      	subs	r1, r5, #1
 801aa0a:	9801      	ldr	r0, [sp, #4]
 801aa0c:	1b09      	subs	r1, r1, r4
 801aa0e:	b289      	uxth	r1, r1
 801aa10:	f7ff ffa4 	bl	801a95c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801aa14:	3401      	adds	r4, #1
 801aa16:	e7ef      	b.n	801a9f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801aa18:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801aa1c:	1e7b      	subs	r3, r7, #1
 801aa1e:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801aa22:	9703      	str	r7, [sp, #12]
 801aa24:	9300      	str	r3, [sp, #0]
 801aa26:	2400      	movs	r4, #0
 801aa28:	4655      	mov	r5, sl
 801aa2a:	9704      	str	r7, [sp, #16]
 801aa2c:	4626      	mov	r6, r4
 801aa2e:	9b04      	ldr	r3, [sp, #16]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d078      	beq.n	801ab26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801aa34:	9902      	ldr	r1, [sp, #8]
 801aa36:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801aa3a:	f7ff fe57 	bl	801a6ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 801aa3e:	b360      	cbz	r0, 801aa9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801aa40:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801aa44:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801aa48:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801aa4c:	45e6      	cmp	lr, ip
 801aa4e:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801aa52:	db35      	blt.n	801aac0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801aa54:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801aa58:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801aa5c:	4472      	add	r2, lr
 801aa5e:	4463      	add	r3, ip
 801aa60:	b212      	sxth	r2, r2
 801aa62:	b21b      	sxth	r3, r3
 801aa64:	429a      	cmp	r2, r3
 801aa66:	dc2b      	bgt.n	801aac0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801aa68:	fa1f f288 	uxth.w	r2, r8
 801aa6c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801aa70:	45c1      	cmp	r9, r8
 801aa72:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801aa76:	4413      	add	r3, r2
 801aa78:	fa1f fc89 	uxth.w	ip, r9
 801aa7c:	b29b      	uxth	r3, r3
 801aa7e:	fa0f fe83 	sxth.w	lr, r3
 801aa82:	db0f      	blt.n	801aaa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801aa84:	eba3 030c 	sub.w	r3, r3, ip
 801aa88:	1ac9      	subs	r1, r1, r3
 801aa8a:	b209      	sxth	r1, r1
 801aa8c:	2900      	cmp	r1, #0
 801aa8e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801aa92:	dd12      	ble.n	801aaba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801aa94:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801aa98:	4604      	mov	r4, r0
 801aa9a:	9b04      	ldr	r3, [sp, #16]
 801aa9c:	3d08      	subs	r5, #8
 801aa9e:	3b01      	subs	r3, #1
 801aaa0:	9304      	str	r3, [sp, #16]
 801aaa2:	e7c4      	b.n	801aa2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801aaa4:	4461      	add	r1, ip
 801aaa6:	b209      	sxth	r1, r1
 801aaa8:	4571      	cmp	r1, lr
 801aaaa:	dc3a      	bgt.n	801ab22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801aaac:	eba2 020c 	sub.w	r2, r2, ip
 801aab0:	b212      	sxth	r2, r2
 801aab2:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801aab6:	2a00      	cmp	r2, #0
 801aab8:	dcee      	bgt.n	801aa98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801aaba:	b00d      	add	sp, #52	; 0x34
 801aabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aac0:	45c1      	cmp	r9, r8
 801aac2:	db2e      	blt.n	801ab22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801aac4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801aac8:	4499      	add	r9, r3
 801aaca:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801aace:	4498      	add	r8, r3
 801aad0:	fa0f f989 	sxth.w	r9, r9
 801aad4:	fa0f f888 	sxth.w	r8, r8
 801aad8:	45c1      	cmp	r9, r8
 801aada:	dc22      	bgt.n	801ab22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801aadc:	fa1f f28c 	uxth.w	r2, ip
 801aae0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801aae4:	45e6      	cmp	lr, ip
 801aae6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801aaea:	4413      	add	r3, r2
 801aaec:	fa1f f88e 	uxth.w	r8, lr
 801aaf0:	b29b      	uxth	r3, r3
 801aaf2:	fa0f f983 	sxth.w	r9, r3
 801aaf6:	db0a      	blt.n	801ab0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801aaf8:	eba3 0308 	sub.w	r3, r3, r8
 801aafc:	1ac9      	subs	r1, r1, r3
 801aafe:	b209      	sxth	r1, r1
 801ab00:	2900      	cmp	r1, #0
 801ab02:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801ab06:	ddd8      	ble.n	801aaba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801ab08:	f8ad 9020 	strh.w	r9, [sp, #32]
 801ab0c:	e7c4      	b.n	801aa98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801ab0e:	4441      	add	r1, r8
 801ab10:	b209      	sxth	r1, r1
 801ab12:	4549      	cmp	r1, r9
 801ab14:	dc05      	bgt.n	801ab22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801ab16:	eba2 0208 	sub.w	r2, r2, r8
 801ab1a:	b212      	sxth	r2, r2
 801ab1c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801ab20:	e7c9      	b.n	801aab6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801ab22:	4606      	mov	r6, r0
 801ab24:	e7b9      	b.n	801aa9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801ab26:	2c00      	cmp	r4, #0
 801ab28:	f47f af7d 	bne.w	801aa26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801ab2c:	2e00      	cmp	r6, #0
 801ab2e:	f000 81dc 	beq.w	801aeea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ab32:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801ab36:	4655      	mov	r5, sl
 801ab38:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801ab3c:	b2b9      	uxth	r1, r7
 801ab3e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ab42:	b2b3      	uxth	r3, r6
 801ab44:	9104      	str	r1, [sp, #16]
 801ab46:	9804      	ldr	r0, [sp, #16]
 801ab48:	441a      	add	r2, r3
 801ab4a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ab4e:	b292      	uxth	r2, r2
 801ab50:	4401      	add	r1, r0
 801ab52:	fa0f f882 	sxth.w	r8, r2
 801ab56:	b289      	uxth	r1, r1
 801ab58:	9105      	str	r1, [sp, #20]
 801ab5a:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801ab5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ab62:	9b03      	ldr	r3, [sp, #12]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d054      	beq.n	801ac12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801ab68:	9902      	ldr	r1, [sp, #8]
 801ab6a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801ab6e:	f7ff fdbd 	bl	801a6ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ab72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ab76:	b1d8      	cbz	r0, 801abb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ab78:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801ab7c:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801ab80:	4576      	cmp	r6, lr
 801ab82:	dc26      	bgt.n	801abd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ab84:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801ab88:	44f4      	add	ip, lr
 801ab8a:	fa0f fc8c 	sxth.w	ip, ip
 801ab8e:	45e0      	cmp	r8, ip
 801ab90:	db1f      	blt.n	801abd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ab92:	428f      	cmp	r7, r1
 801ab94:	fa1f fc81 	uxth.w	ip, r1
 801ab98:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801ab9c:	dc0f      	bgt.n	801abbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801ab9e:	9805      	ldr	r0, [sp, #20]
 801aba0:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801aba4:	eba0 0c0c 	sub.w	ip, r0, ip
 801aba8:	eba1 010c 	sub.w	r1, r1, ip
 801abac:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801abb0:	4620      	mov	r0, r4
 801abb2:	9903      	ldr	r1, [sp, #12]
 801abb4:	3d08      	subs	r5, #8
 801abb6:	4604      	mov	r4, r0
 801abb8:	3901      	subs	r1, #1
 801abba:	9103      	str	r1, [sp, #12]
 801abbc:	e7cf      	b.n	801ab5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801abbe:	4461      	add	r1, ip
 801abc0:	b209      	sxth	r1, r1
 801abc2:	4549      	cmp	r1, r9
 801abc4:	dcf5      	bgt.n	801abb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801abc6:	9904      	ldr	r1, [sp, #16]
 801abc8:	eba1 0c0c 	sub.w	ip, r1, ip
 801abcc:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801abd0:	e7ee      	b.n	801abb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801abd2:	428f      	cmp	r7, r1
 801abd4:	dced      	bgt.n	801abb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801abd6:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801abda:	4461      	add	r1, ip
 801abdc:	b209      	sxth	r1, r1
 801abde:	4589      	cmp	r9, r1
 801abe0:	dbe7      	blt.n	801abb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801abe2:	4576      	cmp	r6, lr
 801abe4:	fa1f fc8e 	uxth.w	ip, lr
 801abe8:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801abec:	dc08      	bgt.n	801ac00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801abee:	eba2 0c0c 	sub.w	ip, r2, ip
 801abf2:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801abf6:	eba1 010c 	sub.w	r1, r1, ip
 801abfa:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801abfe:	e7d7      	b.n	801abb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ac00:	4461      	add	r1, ip
 801ac02:	b209      	sxth	r1, r1
 801ac04:	4588      	cmp	r8, r1
 801ac06:	dbd4      	blt.n	801abb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ac08:	eba3 0c0c 	sub.w	ip, r3, ip
 801ac0c:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801ac10:	e7ce      	b.n	801abb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ac12:	2c00      	cmp	r4, #0
 801ac14:	f000 8169 	beq.w	801aeea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ac18:	9b00      	ldr	r3, [sp, #0]
 801ac1a:	3301      	adds	r3, #1
 801ac1c:	f000 8165 	beq.w	801aeea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ac20:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801ac24:	9802      	ldr	r0, [sp, #8]
 801ac26:	4621      	mov	r1, r4
 801ac28:	f7ff fd82 	bl	801a730 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ac2c:	b120      	cbz	r0, 801ac38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801ac2e:	f8bd 1000 	ldrh.w	r1, [sp]
 801ac32:	9801      	ldr	r0, [sp, #4]
 801ac34:	f7ff fe92 	bl	801a95c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ac38:	9902      	ldr	r1, [sp, #8]
 801ac3a:	4620      	mov	r0, r4
 801ac3c:	f7ff fd56 	bl	801a6ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ac40:	2800      	cmp	r0, #0
 801ac42:	f000 809b 	beq.w	801ad7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801ac46:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801ac4a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801ac4e:	fa1f f288 	uxth.w	r2, r8
 801ac52:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801ac56:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801ac5a:	19d5      	adds	r5, r2, r7
 801ac5c:	b2a1      	uxth	r1, r4
 801ac5e:	45a0      	cmp	r8, r4
 801ac60:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ac64:	fa1f f985 	uxth.w	r9, r5
 801ac68:	440b      	add	r3, r1
 801ac6a:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801ac6e:	fa0f f589 	sxth.w	r5, r9
 801ac72:	b29b      	uxth	r3, r3
 801ac74:	9503      	str	r5, [sp, #12]
 801ac76:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801ac7a:	9507      	str	r5, [sp, #28]
 801ac7c:	f340 809d 	ble.w	801adba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801ac80:	1a52      	subs	r2, r2, r1
 801ac82:	4584      	cmp	ip, r0
 801ac84:	fa0f fe83 	sxth.w	lr, r3
 801ac88:	b292      	uxth	r2, r2
 801ac8a:	b215      	sxth	r5, r2
 801ac8c:	dd2f      	ble.n	801acee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801ac8e:	9e00      	ldr	r6, [sp, #0]
 801ac90:	fa1f fc8c 	uxth.w	ip, ip
 801ac94:	b280      	uxth	r0, r0
 801ac96:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ac9a:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801ac9e:	9e03      	ldr	r6, [sp, #12]
 801aca0:	ebac 0300 	sub.w	r3, ip, r0
 801aca4:	448c      	add	ip, r1
 801aca6:	eba6 060e 	sub.w	r6, r6, lr
 801acaa:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801acae:	b29b      	uxth	r3, r3
 801acb0:	4470      	add	r0, lr
 801acb2:	fa0f fc8c 	sxth.w	ip, ip
 801acb6:	b21c      	sxth	r4, r3
 801acb8:	b200      	sxth	r0, r0
 801acba:	4366      	muls	r6, r4
 801acbc:	ebac 0000 	sub.w	r0, ip, r0
 801acc0:	4368      	muls	r0, r5
 801acc2:	4286      	cmp	r6, r0
 801acc4:	db09      	blt.n	801acda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801acc6:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801acca:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801acce:	4417      	add	r7, r2
 801acd0:	f8ad 3020 	strh.w	r3, [sp, #32]
 801acd4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801acd8:	e685      	b.n	801a9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801acda:	440b      	add	r3, r1
 801acdc:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801ace0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801ace4:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801ace8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801acec:	e67b      	b.n	801a9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801acee:	9e03      	ldr	r6, [sp, #12]
 801acf0:	45b6      	cmp	lr, r6
 801acf2:	da28      	bge.n	801ad46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801acf4:	9b00      	ldr	r3, [sp, #0]
 801acf6:	eba6 060e 	sub.w	r6, r6, lr
 801acfa:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801acfe:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801ad02:	eb04 030c 	add.w	r3, r4, ip
 801ad06:	fa1f f883 	uxth.w	r8, r3
 801ad0a:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801ad0e:	4403      	add	r3, r0
 801ad10:	fa0f f988 	sxth.w	r9, r8
 801ad14:	eba0 000c 	sub.w	r0, r0, ip
 801ad18:	eba3 0308 	sub.w	r3, r3, r8
 801ad1c:	4368      	muls	r0, r5
 801ad1e:	b29b      	uxth	r3, r3
 801ad20:	fa0f f883 	sxth.w	r8, r3
 801ad24:	fb08 f606 	mul.w	r6, r8, r6
 801ad28:	42b0      	cmp	r0, r6
 801ad2a:	dc06      	bgt.n	801ad3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801ad2c:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801ad30:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801ad34:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801ad38:	e7c9      	b.n	801acce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801ad3a:	4423      	add	r3, r4
 801ad3c:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801ad40:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801ad44:	e64f      	b.n	801a9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ad46:	eba3 0309 	sub.w	r3, r3, r9
 801ad4a:	9807      	ldr	r0, [sp, #28]
 801ad4c:	b29b      	uxth	r3, r3
 801ad4e:	2806      	cmp	r0, #6
 801ad50:	fa0f fc83 	sxth.w	ip, r3
 801ad54:	d818      	bhi.n	801ad88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801ad56:	4652      	mov	r2, sl
 801ad58:	ab0a      	add	r3, sp, #40	; 0x28
 801ad5a:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801ad5e:	6851      	ldr	r1, [r2, #4]
 801ad60:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801ad64:	c303      	stmia	r3!, {r0, r1}
 801ad66:	9b03      	ldr	r3, [sp, #12]
 801ad68:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801ad6c:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801ad70:	ab0a      	add	r3, sp, #40	; 0x28
 801ad72:	9801      	ldr	r0, [sp, #4]
 801ad74:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ad78:	f7ff fe06 	bl	801a988 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ad7c:	9b00      	ldr	r3, [sp, #0]
 801ad7e:	f1aa 0a08 	sub.w	sl, sl, #8
 801ad82:	3b01      	subs	r3, #1
 801ad84:	9300      	str	r3, [sp, #0]
 801ad86:	e747      	b.n	801ac18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801ad88:	9800      	ldr	r0, [sp, #0]
 801ad8a:	45ac      	cmp	ip, r5
 801ad8c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801ad90:	db0c      	blt.n	801adac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801ad92:	4417      	add	r7, r2
 801ad94:	4458      	add	r0, fp
 801ad96:	f8ad 4020 	strh.w	r4, [sp, #32]
 801ad9a:	b2bf      	uxth	r7, r7
 801ad9c:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801ada0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801ada4:	440f      	add	r7, r1
 801ada6:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801adaa:	e61c      	b.n	801a9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801adac:	4458      	add	r0, fp
 801adae:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801adb2:	443b      	add	r3, r7
 801adb4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801adb8:	e615      	b.n	801a9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801adba:	fa1f f18c 	uxth.w	r1, ip
 801adbe:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801adc2:	b282      	uxth	r2, r0
 801adc4:	4584      	cmp	ip, r0
 801adc6:	eb01 0e05 	add.w	lr, r1, r5
 801adca:	9204      	str	r2, [sp, #16]
 801adcc:	fa1f fe8e 	uxth.w	lr, lr
 801add0:	9e04      	ldr	r6, [sp, #16]
 801add2:	fa0f f28e 	sxth.w	r2, lr
 801add6:	9205      	str	r2, [sp, #20]
 801add8:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801addc:	4432      	add	r2, r6
 801adde:	b292      	uxth	r2, r2
 801ade0:	9206      	str	r2, [sp, #24]
 801ade2:	da26      	bge.n	801ae32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801ade4:	eba3 0309 	sub.w	r3, r3, r9
 801ade8:	eba2 020e 	sub.w	r2, r2, lr
 801adec:	eba0 000c 	sub.w	r0, r0, ip
 801adf0:	eba4 0408 	sub.w	r4, r4, r8
 801adf4:	b29b      	uxth	r3, r3
 801adf6:	b292      	uxth	r2, r2
 801adf8:	fa0f fa83 	sxth.w	sl, r3
 801adfc:	b211      	sxth	r1, r2
 801adfe:	fb0a f000 	mul.w	r0, sl, r0
 801ae02:	434c      	muls	r4, r1
 801ae04:	42a0      	cmp	r0, r4
 801ae06:	9800      	ldr	r0, [sp, #0]
 801ae08:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801ae0c:	dc06      	bgt.n	801ae1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801ae0e:	4458      	add	r0, fp
 801ae10:	9a05      	ldr	r2, [sp, #20]
 801ae12:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801ae16:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801ae1a:	e7ca      	b.n	801adb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801ae1c:	eb0b 0300 	add.w	r3, fp, r0
 801ae20:	9903      	ldr	r1, [sp, #12]
 801ae22:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801ae26:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801ae2a:	442a      	add	r2, r5
 801ae2c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801ae30:	e5d9      	b.n	801a9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ae32:	9e04      	ldr	r6, [sp, #16]
 801ae34:	9a03      	ldr	r2, [sp, #12]
 801ae36:	1b89      	subs	r1, r1, r6
 801ae38:	b21e      	sxth	r6, r3
 801ae3a:	b289      	uxth	r1, r1
 801ae3c:	4296      	cmp	r6, r2
 801ae3e:	fa0f fc81 	sxth.w	ip, r1
 801ae42:	dd25      	ble.n	801ae90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801ae44:	eba3 0309 	sub.w	r3, r3, r9
 801ae48:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ae4c:	9e05      	ldr	r6, [sp, #20]
 801ae4e:	eba4 0408 	sub.w	r4, r4, r8
 801ae52:	b29b      	uxth	r3, r3
 801ae54:	eba6 0902 	sub.w	r9, r6, r2
 801ae58:	fb0c f404 	mul.w	r4, ip, r4
 801ae5c:	b218      	sxth	r0, r3
 801ae5e:	9a00      	ldr	r2, [sp, #0]
 801ae60:	fb00 f909 	mul.w	r9, r0, r9
 801ae64:	00d2      	lsls	r2, r2, #3
 801ae66:	454c      	cmp	r4, r9
 801ae68:	db03      	blt.n	801ae72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801ae6a:	445a      	add	r2, fp
 801ae6c:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801ae70:	e79f      	b.n	801adb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801ae72:	eb0b 0302 	add.w	r3, fp, r2
 801ae76:	9a03      	ldr	r2, [sp, #12]
 801ae78:	4429      	add	r1, r5
 801ae7a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801ae7e:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801ae82:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801ae86:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801ae8a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ae8e:	e5aa      	b.n	801a9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ae90:	9b06      	ldr	r3, [sp, #24]
 801ae92:	9c07      	ldr	r4, [sp, #28]
 801ae94:	eba3 020e 	sub.w	r2, r3, lr
 801ae98:	2c06      	cmp	r4, #6
 801ae9a:	b292      	uxth	r2, r2
 801ae9c:	b213      	sxth	r3, r2
 801ae9e:	d80d      	bhi.n	801aebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801aea0:	4651      	mov	r1, sl
 801aea2:	aa0a      	add	r2, sp, #40	; 0x28
 801aea4:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801aea8:	6849      	ldr	r1, [r1, #4]
 801aeaa:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801aeae:	9b05      	ldr	r3, [sp, #20]
 801aeb0:	c203      	stmia	r2!, {r0, r1}
 801aeb2:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801aeb6:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801aeba:	e759      	b.n	801ad70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801aebc:	9c00      	ldr	r4, [sp, #0]
 801aebe:	4563      	cmp	r3, ip
 801aec0:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801aec4:	db0d      	blt.n	801aee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801aec6:	4429      	add	r1, r5
 801aec8:	9a04      	ldr	r2, [sp, #16]
 801aeca:	445c      	add	r4, fp
 801aecc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801aed0:	b289      	uxth	r1, r1
 801aed2:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801aed6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801aeda:	4411      	add	r1, r2
 801aedc:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801aee0:	e581      	b.n	801a9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801aee2:	445c      	add	r4, fp
 801aee4:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801aee8:	e79f      	b.n	801ae2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801aeea:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801aeee:	2f07      	cmp	r7, #7
 801aef0:	d806      	bhi.n	801af00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801aef2:	ab08      	add	r3, sp, #32
 801aef4:	9801      	ldr	r0, [sp, #4]
 801aef6:	e893 0006 	ldmia.w	r3, {r1, r2}
 801aefa:	f7ff fd45 	bl	801a988 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801aefe:	e5dc      	b.n	801aaba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801af00:	f107 39ff 	add.w	r9, r7, #4294967295
 801af04:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801af08:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801af0c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801af10:	f04f 35ff 	mov.w	r5, #4294967295
 801af14:	2400      	movs	r4, #0
 801af16:	9304      	str	r3, [sp, #16]
 801af18:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801af1c:	f109 32ff 	add.w	r2, r9, #4294967295
 801af20:	9300      	str	r3, [sp, #0]
 801af22:	4690      	mov	r8, r2
 801af24:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801af28:	9303      	str	r3, [sp, #12]
 801af2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801af2e:	f1b8 3fff 	cmp.w	r8, #4294967295
 801af32:	6818      	ldr	r0, [r3, #0]
 801af34:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801af38:	9206      	str	r2, [sp, #24]
 801af3a:	bf16      	itet	ne
 801af3c:	9904      	ldrne	r1, [sp, #16]
 801af3e:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801af42:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801af46:	9305      	str	r3, [sp, #20]
 801af48:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801af4c:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801af50:	fb16 f601 	smulbb	r6, r6, r1
 801af54:	6859      	ldr	r1, [r3, #4]
 801af56:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801af5a:	4671      	mov	r1, lr
 801af5c:	a80a      	add	r0, sp, #40	; 0x28
 801af5e:	f7ff fc09 	bl	801a774 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801af62:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801af66:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801af6a:	9b03      	ldr	r3, [sp, #12]
 801af6c:	9a00      	ldr	r2, [sp, #0]
 801af6e:	fb11 f100 	smulbb	r1, r1, r0
 801af72:	2008      	movs	r0, #8
 801af74:	fb02 6603 	mla	r6, r2, r3, r6
 801af78:	1b8e      	subs	r6, r1, r6
 801af7a:	fb91 f1f0 	sdiv	r1, r1, r0
 801af7e:	42b1      	cmp	r1, r6
 801af80:	dc21      	bgt.n	801afc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801af82:	4556      	cmp	r6, sl
 801af84:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801af88:	da03      	bge.n	801af92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801af8a:	b1e6      	cbz	r6, 801afc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801af8c:	46b2      	mov	sl, r6
 801af8e:	4645      	mov	r5, r8
 801af90:	464c      	mov	r4, r9
 801af92:	f108 38ff 	add.w	r8, r8, #4294967295
 801af96:	f118 0f02 	cmn.w	r8, #2
 801af9a:	d1c8      	bne.n	801af2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801af9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801afa0:	f1a7 0708 	sub.w	r7, r7, #8
 801afa4:	4691      	mov	r9, r2
 801afa6:	d1b7      	bne.n	801af18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801afa8:	9b01      	ldr	r3, [sp, #4]
 801afaa:	b2a6      	uxth	r6, r4
 801afac:	00e4      	lsls	r4, r4, #3
 801afae:	1918      	adds	r0, r3, r4
 801afb0:	1c6b      	adds	r3, r5, #1
 801afb2:	d10b      	bne.n	801afcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801afb4:	4601      	mov	r1, r0
 801afb6:	9802      	ldr	r0, [sp, #8]
 801afb8:	f7ff fbdc 	bl	801a774 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801afbc:	4631      	mov	r1, r6
 801afbe:	9801      	ldr	r0, [sp, #4]
 801afc0:	f7ff fccc 	bl	801a95c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801afc4:	e50f      	b.n	801a9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801afc6:	4645      	mov	r5, r8
 801afc8:	464c      	mov	r4, r9
 801afca:	e7ed      	b.n	801afa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801afcc:	9b01      	ldr	r3, [sp, #4]
 801afce:	00ed      	lsls	r5, r5, #3
 801afd0:	445c      	add	r4, fp
 801afd2:	1959      	adds	r1, r3, r5
 801afd4:	445d      	add	r5, fp
 801afd6:	f7ff fbcd 	bl	801a774 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801afda:	9b02      	ldr	r3, [sp, #8]
 801afdc:	cb03      	ldmia	r3!, {r0, r1}
 801afde:	9b02      	ldr	r3, [sp, #8]
 801afe0:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801afe4:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801afe8:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801afec:	6861      	ldr	r1, [r4, #4]
 801afee:	c303      	stmia	r3!, {r0, r1}
 801aff0:	e7e4      	b.n	801afbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801aff4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801aff4:	4b1d      	ldr	r3, [pc, #116]	; (801b06c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801aff6:	b530      	push	{r4, r5, lr}
 801aff8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801affc:	b085      	sub	sp, #20
 801affe:	4b1c      	ldr	r3, [pc, #112]	; (801b070 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801b000:	460c      	mov	r4, r1
 801b002:	2100      	movs	r1, #0
 801b004:	4605      	mov	r5, r0
 801b006:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b00a:	6820      	ldr	r0, [r4, #0]
 801b00c:	9100      	str	r1, [sp, #0]
 801b00e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b012:	ab02      	add	r3, sp, #8
 801b014:	6861      	ldr	r1, [r4, #4]
 801b016:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b01a:	c303      	stmia	r3!, {r0, r1}
 801b01c:	4669      	mov	r1, sp
 801b01e:	a802      	add	r0, sp, #8
 801b020:	f7fc f8b2 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 801b024:	ab02      	add	r3, sp, #8
 801b026:	cb03      	ldmia	r3!, {r0, r1}
 801b028:	4b12      	ldr	r3, [pc, #72]	; (801b074 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801b02a:	6020      	str	r0, [r4, #0]
 801b02c:	6818      	ldr	r0, [r3, #0]
 801b02e:	6061      	str	r1, [r4, #4]
 801b030:	b138      	cbz	r0, 801b042 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b032:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801b036:	b133      	cbz	r3, 801b046 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801b038:	6821      	ldr	r1, [r4, #0]
 801b03a:	4628      	mov	r0, r5
 801b03c:	6862      	ldr	r2, [r4, #4]
 801b03e:	f7ff fcc5 	bl	801a9cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b042:	b005      	add	sp, #20
 801b044:	bd30      	pop	{r4, r5, pc}
 801b046:	6803      	ldr	r3, [r0, #0]
 801b048:	4621      	mov	r1, r4
 801b04a:	689b      	ldr	r3, [r3, #8]
 801b04c:	4798      	blx	r3
 801b04e:	4b0a      	ldr	r3, [pc, #40]	; (801b078 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801b050:	6818      	ldr	r0, [r3, #0]
 801b052:	b118      	cbz	r0, 801b05c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801b054:	6803      	ldr	r3, [r0, #0]
 801b056:	4621      	mov	r1, r4
 801b058:	689b      	ldr	r3, [r3, #8]
 801b05a:	4798      	blx	r3
 801b05c:	4b07      	ldr	r3, [pc, #28]	; (801b07c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801b05e:	4621      	mov	r1, r4
 801b060:	6818      	ldr	r0, [r3, #0]
 801b062:	6803      	ldr	r3, [r0, #0]
 801b064:	695b      	ldr	r3, [r3, #20]
 801b066:	4798      	blx	r3
 801b068:	e7eb      	b.n	801b042 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b06a:	bf00      	nop
 801b06c:	20005938 	.word	0x20005938
 801b070:	2000593a 	.word	0x2000593a
 801b074:	20005980 	.word	0x20005980
 801b078:	2000597c 	.word	0x2000597c
 801b07c:	20005944 	.word	0x20005944

0801b080 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b084:	4604      	mov	r4, r0
 801b086:	b09b      	sub	sp, #108	; 0x6c
 801b088:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801b08c:	b129      	cbz	r1, 801b09a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801b08e:	2300      	movs	r3, #0
 801b090:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b094:	b01b      	add	sp, #108	; 0x6c
 801b096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b09a:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801b09e:	4630      	mov	r0, r6
 801b0a0:	f7fc f8b5 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0a4:	4605      	mov	r5, r0
 801b0a6:	b940      	cbnz	r0, 801b0ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801b0a8:	4620      	mov	r0, r4
 801b0aa:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b0ae:	f7ff fc8d 	bl	801a9cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b0b2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801b0b6:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801b0ba:	4ba6      	ldr	r3, [pc, #664]	; (801b354 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	b33b      	cbz	r3, 801b110 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b0c0:	4da5      	ldr	r5, [pc, #660]	; (801b358 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801b0c2:	4628      	mov	r0, r5
 801b0c4:	f7fc f8a3 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0c8:	4606      	mov	r6, r0
 801b0ca:	bb08      	cbnz	r0, 801b110 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b0cc:	4628      	mov	r0, r5
 801b0ce:	f7ff f9b3 	bl	801a438 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b0d2:	6829      	ldr	r1, [r5, #0]
 801b0d4:	686a      	ldr	r2, [r5, #4]
 801b0d6:	4620      	mov	r0, r4
 801b0d8:	f7ff fc78 	bl	801a9cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b0dc:	802e      	strh	r6, [r5, #0]
 801b0de:	806e      	strh	r6, [r5, #2]
 801b0e0:	80ae      	strh	r6, [r5, #4]
 801b0e2:	80ee      	strh	r6, [r5, #6]
 801b0e4:	4f9d      	ldr	r7, [pc, #628]	; (801b35c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801b0e6:	a809      	add	r0, sp, #36	; 0x24
 801b0e8:	f7ff fbe3 	bl	801a8b2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b0ec:	883d      	ldrh	r5, [r7, #0]
 801b0ee:	462e      	mov	r6, r5
 801b0f0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b0f4:	42b3      	cmp	r3, r6
 801b0f6:	d910      	bls.n	801b11a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801b0f8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b0fc:	3601      	adds	r6, #1
 801b0fe:	a809      	add	r0, sp, #36	; 0x24
 801b100:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801b104:	b2b6      	uxth	r6, r6
 801b106:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801b10a:	f7ff fc3d 	bl	801a988 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b10e:	e7ef      	b.n	801b0f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801b110:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b114:	2b00      	cmp	r3, #0
 801b116:	d1e5      	bne.n	801b0e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801b118:	e7bc      	b.n	801b094 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b11a:	462e      	mov	r6, r5
 801b11c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b120:	42b3      	cmp	r3, r6
 801b122:	d90b      	bls.n	801b13c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801b124:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b128:	3601      	adds	r6, #1
 801b12a:	4620      	mov	r0, r4
 801b12c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b130:	b2b6      	uxth	r6, r6
 801b132:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b136:	f7ff fc49 	bl	801a9cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b13a:	e7ef      	b.n	801b11c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801b13c:	4a88      	ldr	r2, [pc, #544]	; (801b360 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801b13e:	6813      	ldr	r3, [r2, #0]
 801b140:	4690      	mov	r8, r2
 801b142:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b146:	2b01      	cmp	r3, #1
 801b148:	f040 8093 	bne.w	801b272 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 801b14c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b150:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801b154:	f04f 0900 	mov.w	r9, #0
 801b158:	33aa      	adds	r3, #170	; 0xaa
 801b15a:	42a8      	cmp	r0, r5
 801b15c:	f103 0308 	add.w	r3, r3, #8
 801b160:	dd0a      	ble.n	801b178 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801b162:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b166:	3501      	adds	r5, #1
 801b168:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801b16c:	440a      	add	r2, r1
 801b16e:	b212      	sxth	r2, r2
 801b170:	4591      	cmp	r9, r2
 801b172:	bfb8      	it	lt
 801b174:	4691      	movlt	r9, r2
 801b176:	e7f0      	b.n	801b15a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801b178:	4b7a      	ldr	r3, [pc, #488]	; (801b364 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801b17a:	4e7b      	ldr	r6, [pc, #492]	; (801b368 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801b17c:	881d      	ldrh	r5, [r3, #0]
 801b17e:	2300      	movs	r3, #0
 801b180:	2d0f      	cmp	r5, #15
 801b182:	bf8c      	ite	hi
 801b184:	08ed      	lsrhi	r5, r5, #3
 801b186:	2501      	movls	r5, #1
 801b188:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b18c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b190:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801b194:	f8d8 0000 	ldr.w	r0, [r8]
 801b198:	440b      	add	r3, r1
 801b19a:	6802      	ldr	r2, [r0, #0]
 801b19c:	b21b      	sxth	r3, r3
 801b19e:	4599      	cmp	r9, r3
 801b1a0:	dd4a      	ble.n	801b238 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801b1a2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801b1a6:	4798      	blx	r3
 801b1a8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b1ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b1b0:	4413      	add	r3, r2
 801b1b2:	b21b      	sxth	r3, r3
 801b1b4:	195a      	adds	r2, r3, r5
 801b1b6:	4290      	cmp	r0, r2
 801b1b8:	da07      	bge.n	801b1ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b1ba:	4581      	cmp	r9, r0
 801b1bc:	dd05      	ble.n	801b1ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b1be:	4298      	cmp	r0, r3
 801b1c0:	da33      	bge.n	801b22a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	dd31      	ble.n	801b22a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b1c6:	4648      	mov	r0, r9
 801b1c8:	e004      	b.n	801b1d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801b1ca:	4298      	cmp	r0, r3
 801b1cc:	dbfb      	blt.n	801b1c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801b1ce:	4548      	cmp	r0, r9
 801b1d0:	bfa8      	it	ge
 801b1d2:	4648      	movge	r0, r9
 801b1d4:	f9b6 2000 	ldrsh.w	r2, [r6]
 801b1d8:	2100      	movs	r1, #0
 801b1da:	1ac0      	subs	r0, r0, r3
 801b1dc:	f8b7 a000 	ldrh.w	sl, [r7]
 801b1e0:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b1e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b1e8:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b1ec:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b1f0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b1f4:	4553      	cmp	r3, sl
 801b1f6:	d9c9      	bls.n	801b18c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b1f8:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b1fc:	ab07      	add	r3, sp, #28
 801b1fe:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b202:	6851      	ldr	r1, [r2, #4]
 801b204:	c303      	stmia	r3!, {r0, r1}
 801b206:	a807      	add	r0, sp, #28
 801b208:	a905      	add	r1, sp, #20
 801b20a:	f7fb ffbd 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 801b20e:	a807      	add	r0, sp, #28
 801b210:	f7fb fffd 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b214:	b920      	cbnz	r0, 801b220 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801b216:	6823      	ldr	r3, [r4, #0]
 801b218:	a907      	add	r1, sp, #28
 801b21a:	4620      	mov	r0, r4
 801b21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b21e:	4798      	blx	r3
 801b220:	f10a 0a01 	add.w	sl, sl, #1
 801b224:	fa1f fa8a 	uxth.w	sl, sl
 801b228:	e7e2      	b.n	801b1f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801b22a:	f8d8 0000 	ldr.w	r0, [r8]
 801b22e:	2101      	movs	r1, #1
 801b230:	6803      	ldr	r3, [r0, #0]
 801b232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b234:	4798      	blx	r3
 801b236:	e7a9      	b.n	801b18c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b238:	69d3      	ldr	r3, [r2, #28]
 801b23a:	4798      	blx	r3
 801b23c:	4b4b      	ldr	r3, [pc, #300]	; (801b36c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801b23e:	781b      	ldrb	r3, [r3, #0]
 801b240:	2b00      	cmp	r3, #0
 801b242:	f43f af27 	beq.w	801b094 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b246:	2300      	movs	r3, #0
 801b248:	883d      	ldrh	r5, [r7, #0]
 801b24a:	34ea      	adds	r4, #234	; 0xea
 801b24c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b250:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801b254:	42ab      	cmp	r3, r5
 801b256:	f67f af1d 	bls.w	801b094 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b25a:	ab1a      	add	r3, sp, #104	; 0x68
 801b25c:	4620      	mov	r0, r4
 801b25e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b262:	3501      	adds	r5, #1
 801b264:	3b44      	subs	r3, #68	; 0x44
 801b266:	b2ad      	uxth	r5, r5
 801b268:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b26c:	f7ff fb8c 	bl	801a988 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b270:	e7ee      	b.n	801b250 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 801b272:	2b02      	cmp	r3, #2
 801b274:	f040 813d 	bne.w	801b4f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801b278:	4b3d      	ldr	r3, [pc, #244]	; (801b370 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801b27a:	781b      	ldrb	r3, [r3, #0]
 801b27c:	2b01      	cmp	r3, #1
 801b27e:	d02c      	beq.n	801b2da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 801b280:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801b284:	883a      	ldrh	r2, [r7, #0]
 801b286:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801b28a:	3201      	adds	r2, #1
 801b28c:	b292      	uxth	r2, r2
 801b28e:	2900      	cmp	r1, #0
 801b290:	d0d4      	beq.n	801b23c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801b292:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801b296:	4610      	mov	r0, r2
 801b298:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801b29c:	f04f 0a00 	mov.w	sl, #0
 801b2a0:	441d      	add	r5, r3
 801b2a2:	b22d      	sxth	r5, r5
 801b2a4:	b283      	uxth	r3, r0
 801b2a6:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801b2aa:	4299      	cmp	r1, r3
 801b2ac:	f240 80c4 	bls.w	801b438 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801b2b0:	4426      	add	r6, r4
 801b2b2:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801b2b6:	4684      	mov	ip, r0
 801b2b8:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801b2bc:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801b2c0:	4573      	cmp	r3, lr
 801b2c2:	f340 80a6 	ble.w	801b412 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801b2c6:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801b2ca:	4475      	add	r5, lr
 801b2cc:	b22d      	sxth	r5, r5
 801b2ce:	429d      	cmp	r5, r3
 801b2d0:	bfa8      	it	ge
 801b2d2:	461d      	movge	r5, r3
 801b2d4:	3001      	adds	r0, #1
 801b2d6:	46e2      	mov	sl, ip
 801b2d8:	e7e4      	b.n	801b2a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 801b2da:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801b2de:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801b2e2:	f1bb 0f00 	cmp.w	fp, #0
 801b2e6:	d0a9      	beq.n	801b23c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801b2e8:	883b      	ldrh	r3, [r7, #0]
 801b2ea:	2600      	movs	r6, #0
 801b2ec:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801b2f0:	3301      	adds	r3, #1
 801b2f2:	b29b      	uxth	r3, r3
 801b2f4:	b299      	uxth	r1, r3
 801b2f6:	00f5      	lsls	r5, r6, #3
 801b2f8:	458b      	cmp	fp, r1
 801b2fa:	d93b      	bls.n	801b374 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801b2fc:	4425      	add	r5, r4
 801b2fe:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801b302:	469c      	mov	ip, r3
 801b304:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801b308:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801b30c:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801b310:	4408      	add	r0, r1
 801b312:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801b316:	4471      	add	r1, lr
 801b318:	b200      	sxth	r0, r0
 801b31a:	b209      	sxth	r1, r1
 801b31c:	4288      	cmp	r0, r1
 801b31e:	da06      	bge.n	801b32e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ae>
 801b320:	4586      	cmp	lr, r0
 801b322:	4672      	mov	r2, lr
 801b324:	bfb8      	it	lt
 801b326:	4602      	movlt	r2, r0
 801b328:	3301      	adds	r3, #1
 801b32a:	4666      	mov	r6, ip
 801b32c:	e7e2      	b.n	801b2f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 801b32e:	d10b      	bne.n	801b348 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801b330:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801b334:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801b338:	458c      	cmp	ip, r1
 801b33a:	bfb4      	ite	lt
 801b33c:	469c      	movlt	ip, r3
 801b33e:	46b4      	movge	ip, r6
 801b340:	4572      	cmp	r2, lr
 801b342:	bfb8      	it	lt
 801b344:	4672      	movlt	r2, lr
 801b346:	e7ef      	b.n	801b328 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801b348:	428a      	cmp	r2, r1
 801b34a:	46b4      	mov	ip, r6
 801b34c:	bfb8      	it	lt
 801b34e:	460a      	movlt	r2, r1
 801b350:	e7ea      	b.n	801b328 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801b352:	bf00      	nop
 801b354:	2000597c 	.word	0x2000597c
 801b358:	20005988 	.word	0x20005988
 801b35c:	20000148 	.word	0x20000148
 801b360:	20005944 	.word	0x20005944
 801b364:	2000593a 	.word	0x2000593a
 801b368:	20005938 	.word	0x20005938
 801b36c:	20005942 	.word	0x20005942
 801b370:	2000593c 	.word	0x2000593c
 801b374:	1961      	adds	r1, r4, r5
 801b376:	ab07      	add	r3, sp, #28
 801b378:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801b37c:	6849      	ldr	r1, [r1, #4]
 801b37e:	c303      	stmia	r3!, {r0, r1}
 801b380:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b384:	a807      	add	r0, sp, #28
 801b386:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b38a:	2b13      	cmp	r3, #19
 801b38c:	440b      	add	r3, r1
 801b38e:	bfd8      	it	le
 801b390:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b394:	1a9b      	subs	r3, r3, r2
 801b396:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b39a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b39e:	f7ff f8a5 	bl	801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b3a2:	a807      	add	r0, sp, #28
 801b3a4:	f7fb ff33 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b3a8:	2800      	cmp	r0, #0
 801b3aa:	d198      	bne.n	801b2de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801b3ac:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b3b0:	4425      	add	r5, r4
 801b3b2:	f8d8 0000 	ldr.w	r0, [r8]
 801b3b6:	f1bc 0f14 	cmp.w	ip, #20
 801b3ba:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b3be:	f8d0 e000 	ldr.w	lr, [r0]
 801b3c2:	bfa8      	it	ge
 801b3c4:	f04f 0c14 	movge.w	ip, #20
 801b3c8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b3cc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b3d0:	fa1f fc8c 	uxth.w	ip, ip
 801b3d4:	f8cd c000 	str.w	ip, [sp]
 801b3d8:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 801b3dc:	47d0      	blx	sl
 801b3de:	4682      	mov	sl, r0
 801b3e0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b3e4:	a807      	add	r0, sp, #28
 801b3e6:	f7ff f827 	bl	801a438 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b3ea:	6823      	ldr	r3, [r4, #0]
 801b3ec:	4620      	mov	r0, r4
 801b3ee:	a907      	add	r1, sp, #28
 801b3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b3f2:	4798      	blx	r3
 801b3f4:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801b3f8:	eba0 000a 	sub.w	r0, r0, sl
 801b3fc:	b200      	sxth	r0, r0
 801b3fe:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801b402:	2800      	cmp	r0, #0
 801b404:	f47f af6b 	bne.w	801b2de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801b408:	b2b1      	uxth	r1, r6
 801b40a:	4648      	mov	r0, r9
 801b40c:	f7ff faa6 	bl	801a95c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b410:	e765      	b.n	801b2de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801b412:	d10c      	bne.n	801b42e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801b414:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801b418:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801b41c:	45b4      	cmp	ip, r6
 801b41e:	bfb4      	ite	lt
 801b420:	4684      	movlt	ip, r0
 801b422:	46d4      	movge	ip, sl
 801b424:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801b428:	4433      	add	r3, r6
 801b42a:	b21b      	sxth	r3, r3
 801b42c:	e74f      	b.n	801b2ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 801b42e:	4575      	cmp	r5, lr
 801b430:	46d4      	mov	ip, sl
 801b432:	bfa8      	it	ge
 801b434:	4675      	movge	r5, lr
 801b436:	e74d      	b.n	801b2d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 801b438:	eb0b 0006 	add.w	r0, fp, r6
 801b43c:	4426      	add	r6, r4
 801b43e:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801b442:	f1b9 0f13 	cmp.w	r9, #19
 801b446:	bfdc      	itt	le
 801b448:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801b44c:	444d      	addle	r5, r9
 801b44e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b452:	bfd8      	it	le
 801b454:	b22d      	sxthle	r5, r5
 801b456:	f7fb feda 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b45a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801b45e:	2800      	cmp	r0, #0
 801b460:	f47f af15 	bne.w	801b28e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 801b464:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801b468:	fa1f f989 	uxth.w	r9, r9
 801b46c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b470:	eba5 050c 	sub.w	r5, r5, ip
 801b474:	fa1f f28c 	uxth.w	r2, ip
 801b478:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801b47c:	eb02 0009 	add.w	r0, r2, r9
 801b480:	2d14      	cmp	r5, #20
 801b482:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801b486:	bfa8      	it	ge
 801b488:	2514      	movge	r5, #20
 801b48a:	b200      	sxth	r0, r0
 801b48c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b490:	b289      	uxth	r1, r1
 801b492:	fa1f fe85 	uxth.w	lr, r5
 801b496:	eba0 000c 	sub.w	r0, r0, ip
 801b49a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b49e:	4586      	cmp	lr, r0
 801b4a0:	f8d8 0000 	ldr.w	r0, [r8]
 801b4a4:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b4a8:	b29b      	uxth	r3, r3
 801b4aa:	bfb8      	it	lt
 801b4ac:	46f1      	movlt	r9, lr
 801b4ae:	6805      	ldr	r5, [r0, #0]
 801b4b0:	f8cd 9000 	str.w	r9, [sp]
 801b4b4:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 801b4b6:	47a8      	blx	r5
 801b4b8:	6823      	ldr	r3, [r4, #0]
 801b4ba:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b4be:	a907      	add	r1, sp, #28
 801b4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b4c2:	4620      	mov	r0, r4
 801b4c4:	4798      	blx	r3
 801b4c6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b4ca:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801b4ce:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801b4d2:	1a5b      	subs	r3, r3, r1
 801b4d4:	440a      	add	r2, r1
 801b4d6:	b21b      	sxth	r3, r3
 801b4d8:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801b4dc:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	f47f aecf 	bne.w	801b284 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801b4e6:	fa1f f18a 	uxth.w	r1, sl
 801b4ea:	4658      	mov	r0, fp
 801b4ec:	f7ff fa36 	bl	801a95c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b4f0:	e6c8      	b.n	801b284 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801b4f2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b4f6:	42ab      	cmp	r3, r5
 801b4f8:	f67f aea0 	bls.w	801b23c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801b4fc:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b500:	ab07      	add	r3, sp, #28
 801b502:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b506:	6851      	ldr	r1, [r2, #4]
 801b508:	c303      	stmia	r3!, {r0, r1}
 801b50a:	a807      	add	r0, sp, #28
 801b50c:	f7fb fe7f 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b510:	b920      	cbnz	r0, 801b51c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49c>
 801b512:	6823      	ldr	r3, [r4, #0]
 801b514:	a907      	add	r1, sp, #28
 801b516:	4620      	mov	r0, r4
 801b518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b51a:	4798      	blx	r3
 801b51c:	3501      	adds	r5, #1
 801b51e:	b2ad      	uxth	r5, r5
 801b520:	e7e7      	b.n	801b4f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801b522:	bf00      	nop

0801b524 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b524:	4b03      	ldr	r3, [pc, #12]	; (801b534 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b526:	2200      	movs	r2, #0
 801b528:	801a      	strh	r2, [r3, #0]
 801b52a:	805a      	strh	r2, [r3, #2]
 801b52c:	809a      	strh	r2, [r3, #4]
 801b52e:	80da      	strh	r2, [r3, #6]
 801b530:	4770      	bx	lr
 801b532:	bf00      	nop
 801b534:	20005988 	.word	0x20005988

0801b538 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b53c:	b099      	sub	sp, #100	; 0x64
 801b53e:	4607      	mov	r7, r0
 801b540:	4614      	mov	r4, r2
 801b542:	461d      	mov	r5, r3
 801b544:	a802      	add	r0, sp, #8
 801b546:	468a      	mov	sl, r1
 801b548:	f000 feaf 	bl	801c2aa <_ZN8touchgfx12TextProviderC1Ev>
 801b54c:	683b      	ldr	r3, [r7, #0]
 801b54e:	4638      	mov	r0, r7
 801b550:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b556:	4798      	blx	r3
 801b558:	462a      	mov	r2, r5
 801b55a:	2500      	movs	r5, #0
 801b55c:	4621      	mov	r1, r4
 801b55e:	4603      	mov	r3, r0
 801b560:	a802      	add	r0, sp, #8
 801b562:	462c      	mov	r4, r5
 801b564:	46a9      	mov	r9, r5
 801b566:	46a8      	mov	r8, r5
 801b568:	f000 fee4 	bl	801c334 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b56c:	2300      	movs	r3, #0
 801b56e:	9301      	str	r3, [sp, #4]
 801b570:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b574:	429c      	cmp	r4, r3
 801b576:	d002      	beq.n	801b57e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801b578:	455c      	cmp	r4, fp
 801b57a:	bf18      	it	ne
 801b57c:	4625      	movne	r5, r4
 801b57e:	ab01      	add	r3, sp, #4
 801b580:	463a      	mov	r2, r7
 801b582:	4651      	mov	r1, sl
 801b584:	a802      	add	r0, sp, #8
 801b586:	f001 f9cf 	bl	801c928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b58a:	4604      	mov	r4, r0
 801b58c:	b108      	cbz	r0, 801b592 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801b58e:	280a      	cmp	r0, #10
 801b590:	d10a      	bne.n	801b5a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801b592:	45c1      	cmp	r9, r8
 801b594:	bf38      	it	cc
 801b596:	46c1      	movcc	r9, r8
 801b598:	f04f 0800 	mov.w	r8, #0
 801b59c:	2c00      	cmp	r4, #0
 801b59e:	d1e5      	bne.n	801b56c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b5a0:	4648      	mov	r0, r9
 801b5a2:	b019      	add	sp, #100	; 0x64
 801b5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5a8:	9a01      	ldr	r2, [sp, #4]
 801b5aa:	2a00      	cmp	r2, #0
 801b5ac:	d0de      	beq.n	801b56c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b5ae:	7b56      	ldrb	r6, [r2, #13]
 801b5b0:	4629      	mov	r1, r5
 801b5b2:	683b      	ldr	r3, [r7, #0]
 801b5b4:	0076      	lsls	r6, r6, #1
 801b5b6:	8894      	ldrh	r4, [r2, #4]
 801b5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b5ba:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801b5be:	7a96      	ldrb	r6, [r2, #10]
 801b5c0:	4306      	orrs	r6, r0
 801b5c2:	4638      	mov	r0, r7
 801b5c4:	4798      	blx	r3
 801b5c6:	4430      	add	r0, r6
 801b5c8:	4480      	add	r8, r0
 801b5ca:	fa1f f888 	uxth.w	r8, r8
 801b5ce:	e7e5      	b.n	801b59c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801b5d0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b5d0:	b508      	push	{r3, lr}
 801b5d2:	6803      	ldr	r3, [r0, #0]
 801b5d4:	68db      	ldr	r3, [r3, #12]
 801b5d6:	4798      	blx	r3
 801b5d8:	b128      	cbz	r0, 801b5e6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b5da:	7b43      	ldrb	r3, [r0, #13]
 801b5dc:	7a80      	ldrb	r0, [r0, #10]
 801b5de:	005b      	lsls	r3, r3, #1
 801b5e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b5e4:	4318      	orrs	r0, r3
 801b5e6:	bd08      	pop	{r3, pc}

0801b5e8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b5e8:	b40e      	push	{r1, r2, r3}
 801b5ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5ec:	b098      	sub	sp, #96	; 0x60
 801b5ee:	4605      	mov	r5, r0
 801b5f0:	ab1d      	add	r3, sp, #116	; 0x74
 801b5f2:	a802      	add	r0, sp, #8
 801b5f4:	ae18      	add	r6, sp, #96	; 0x60
 801b5f6:	f853 4b04 	ldr.w	r4, [r3], #4
 801b5fa:	9300      	str	r3, [sp, #0]
 801b5fc:	f000 fe55 	bl	801c2aa <_ZN8touchgfx12TextProviderC1Ev>
 801b600:	682b      	ldr	r3, [r5, #0]
 801b602:	4628      	mov	r0, r5
 801b604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b606:	4798      	blx	r3
 801b608:	4621      	mov	r1, r4
 801b60a:	2400      	movs	r4, #0
 801b60c:	4603      	mov	r3, r0
 801b60e:	9a00      	ldr	r2, [sp, #0]
 801b610:	a802      	add	r0, sp, #8
 801b612:	f000 fe8f 	bl	801c334 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b616:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801b61a:	462a      	mov	r2, r5
 801b61c:	4633      	mov	r3, r6
 801b61e:	4621      	mov	r1, r4
 801b620:	a802      	add	r0, sp, #8
 801b622:	f001 f981 	bl	801c928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b626:	b300      	cbz	r0, 801b66a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801b628:	280a      	cmp	r0, #10
 801b62a:	d01a      	beq.n	801b662 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801b62c:	9f01      	ldr	r7, [sp, #4]
 801b62e:	b1c7      	cbz	r7, 801b662 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801b630:	7b78      	ldrb	r0, [r7, #13]
 801b632:	7a3b      	ldrb	r3, [r7, #8]
 801b634:	00c1      	lsls	r1, r0, #3
 801b636:	88aa      	ldrh	r2, [r5, #4]
 801b638:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b63c:	4319      	orrs	r1, r3
 801b63e:	0643      	lsls	r3, r0, #25
 801b640:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801b644:	bf48      	it	mi
 801b646:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b64a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b64e:	bf48      	it	mi
 801b650:	b219      	sxthmi	r1, r3
 801b652:	79fb      	ldrb	r3, [r7, #7]
 801b654:	4303      	orrs	r3, r0
 801b656:	4413      	add	r3, r2
 801b658:	1a5b      	subs	r3, r3, r1
 801b65a:	b29b      	uxth	r3, r3
 801b65c:	42a3      	cmp	r3, r4
 801b65e:	bfc8      	it	gt
 801b660:	b21c      	sxthgt	r4, r3
 801b662:	4633      	mov	r3, r6
 801b664:	462a      	mov	r2, r5
 801b666:	2100      	movs	r1, #0
 801b668:	e7da      	b.n	801b620 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801b66a:	b2a0      	uxth	r0, r4
 801b66c:	b018      	add	sp, #96	; 0x60
 801b66e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b672:	b003      	add	sp, #12
 801b674:	4770      	bx	lr

0801b676 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b676:	b40e      	push	{r1, r2, r3}
 801b678:	b530      	push	{r4, r5, lr}
 801b67a:	b098      	sub	sp, #96	; 0x60
 801b67c:	4604      	mov	r4, r0
 801b67e:	ab1b      	add	r3, sp, #108	; 0x6c
 801b680:	a802      	add	r0, sp, #8
 801b682:	f853 5b04 	ldr.w	r5, [r3], #4
 801b686:	9301      	str	r3, [sp, #4]
 801b688:	f000 fe0f 	bl	801c2aa <_ZN8touchgfx12TextProviderC1Ev>
 801b68c:	6823      	ldr	r3, [r4, #0]
 801b68e:	4620      	mov	r0, r4
 801b690:	2401      	movs	r4, #1
 801b692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b694:	4798      	blx	r3
 801b696:	9a01      	ldr	r2, [sp, #4]
 801b698:	4603      	mov	r3, r0
 801b69a:	4629      	mov	r1, r5
 801b69c:	a802      	add	r0, sp, #8
 801b69e:	f000 fe49 	bl	801c334 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b6a2:	a802      	add	r0, sp, #8
 801b6a4:	f001 fa38 	bl	801cb18 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b6a8:	b2a3      	uxth	r3, r4
 801b6aa:	b138      	cbz	r0, 801b6bc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801b6ac:	280a      	cmp	r0, #10
 801b6ae:	a802      	add	r0, sp, #8
 801b6b0:	bf04      	itt	eq
 801b6b2:	3301      	addeq	r3, #1
 801b6b4:	b21c      	sxtheq	r4, r3
 801b6b6:	f001 fa2f 	bl	801cb18 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b6ba:	e7f5      	b.n	801b6a8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801b6bc:	4618      	mov	r0, r3
 801b6be:	b018      	add	sp, #96	; 0x60
 801b6c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b6c4:	b003      	add	sp, #12
 801b6c6:	4770      	bx	lr

0801b6c8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b6c8:	b40e      	push	{r1, r2, r3}
 801b6ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6cc:	b098      	sub	sp, #96	; 0x60
 801b6ce:	4604      	mov	r4, r0
 801b6d0:	26ff      	movs	r6, #255	; 0xff
 801b6d2:	ab1d      	add	r3, sp, #116	; 0x74
 801b6d4:	a802      	add	r0, sp, #8
 801b6d6:	f853 5b04 	ldr.w	r5, [r3], #4
 801b6da:	9300      	str	r3, [sp, #0]
 801b6dc:	f000 fde5 	bl	801c2aa <_ZN8touchgfx12TextProviderC1Ev>
 801b6e0:	6823      	ldr	r3, [r4, #0]
 801b6e2:	4620      	mov	r0, r4
 801b6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6e6:	4798      	blx	r3
 801b6e8:	4629      	mov	r1, r5
 801b6ea:	4603      	mov	r3, r0
 801b6ec:	9a00      	ldr	r2, [sp, #0]
 801b6ee:	a802      	add	r0, sp, #8
 801b6f0:	ad18      	add	r5, sp, #96	; 0x60
 801b6f2:	f000 fe1f 	bl	801c334 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b6f6:	2100      	movs	r1, #0
 801b6f8:	4622      	mov	r2, r4
 801b6fa:	a802      	add	r0, sp, #8
 801b6fc:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801b700:	462b      	mov	r3, r5
 801b702:	f001 f911 	bl	801c928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b706:	b1d8      	cbz	r0, 801b740 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801b708:	280a      	cmp	r0, #10
 801b70a:	d012      	beq.n	801b732 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b70c:	9801      	ldr	r0, [sp, #4]
 801b70e:	b180      	cbz	r0, 801b732 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b710:	7b47      	ldrb	r7, [r0, #13]
 801b712:	7922      	ldrb	r2, [r4, #4]
 801b714:	00fb      	lsls	r3, r7, #3
 801b716:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b71a:	7a03      	ldrb	r3, [r0, #8]
 801b71c:	430b      	orrs	r3, r1
 801b71e:	0679      	lsls	r1, r7, #25
 801b720:	bf44      	itt	mi
 801b722:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b726:	b21b      	sxthmi	r3, r3
 801b728:	1ad3      	subs	r3, r2, r3
 801b72a:	b2db      	uxtb	r3, r3
 801b72c:	429e      	cmp	r6, r3
 801b72e:	bf28      	it	cs
 801b730:	461e      	movcs	r6, r3
 801b732:	462b      	mov	r3, r5
 801b734:	4622      	mov	r2, r4
 801b736:	2100      	movs	r1, #0
 801b738:	a802      	add	r0, sp, #8
 801b73a:	f001 f8f5 	bl	801c928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b73e:	e7e2      	b.n	801b706 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801b740:	4630      	mov	r0, r6
 801b742:	b018      	add	sp, #96	; 0x60
 801b744:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b748:	b003      	add	sp, #12
 801b74a:	4770      	bx	lr

0801b74c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b74c:	b513      	push	{r0, r1, r4, lr}
 801b74e:	1d01      	adds	r1, r0, #4
 801b750:	4603      	mov	r3, r0
 801b752:	466a      	mov	r2, sp
 801b754:	c903      	ldmia	r1, {r0, r1}
 801b756:	e882 0003 	stmia.w	r2, {r0, r1}
 801b75a:	2100      	movs	r1, #0
 801b75c:	4618      	mov	r0, r3
 801b75e:	9100      	str	r1, [sp, #0]
 801b760:	6819      	ldr	r1, [r3, #0]
 801b762:	690c      	ldr	r4, [r1, #16]
 801b764:	4611      	mov	r1, r2
 801b766:	47a0      	blx	r4
 801b768:	b002      	add	sp, #8
 801b76a:	bd10      	pop	{r4, pc}

0801b76c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b76c:	b538      	push	{r3, r4, r5, lr}
 801b76e:	680b      	ldr	r3, [r1, #0]
 801b770:	460c      	mov	r4, r1
 801b772:	4605      	mov	r5, r0
 801b774:	68db      	ldr	r3, [r3, #12]
 801b776:	4798      	blx	r3
 801b778:	6823      	ldr	r3, [r4, #0]
 801b77a:	4620      	mov	r0, r4
 801b77c:	4629      	mov	r1, r5
 801b77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b780:	4798      	blx	r3
 801b782:	4628      	mov	r0, r5
 801b784:	bd38      	pop	{r3, r4, r5, pc}

0801b786 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b786:	b410      	push	{r4}
 801b788:	880a      	ldrh	r2, [r1, #0]
 801b78a:	8884      	ldrh	r4, [r0, #4]
 801b78c:	4422      	add	r2, r4
 801b78e:	800a      	strh	r2, [r1, #0]
 801b790:	884a      	ldrh	r2, [r1, #2]
 801b792:	88c4      	ldrh	r4, [r0, #6]
 801b794:	4422      	add	r2, r4
 801b796:	804a      	strh	r2, [r1, #2]
 801b798:	6940      	ldr	r0, [r0, #20]
 801b79a:	b120      	cbz	r0, 801b7a6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b79c:	6803      	ldr	r3, [r0, #0]
 801b79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b7a4:	4718      	bx	r3
 801b7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7aa:	4770      	bx	lr

0801b7ac <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7ae:	460b      	mov	r3, r1
 801b7b0:	b085      	sub	sp, #20
 801b7b2:	4604      	mov	r4, r0
 801b7b4:	b901      	cbnz	r1, 801b7b8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b7b6:	b322      	cbz	r2, 801b802 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801b7b8:	1d27      	adds	r7, r4, #4
 801b7ba:	466e      	mov	r6, sp
 801b7bc:	88e5      	ldrh	r5, [r4, #6]
 801b7be:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b7c2:	442a      	add	r2, r5
 801b7c4:	e886 0003 	stmia.w	r6, {r0, r1}
 801b7c8:	88a1      	ldrh	r1, [r4, #4]
 801b7ca:	4620      	mov	r0, r4
 801b7cc:	b215      	sxth	r5, r2
 801b7ce:	4419      	add	r1, r3
 801b7d0:	6823      	ldr	r3, [r4, #0]
 801b7d2:	b209      	sxth	r1, r1
 801b7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7d6:	4798      	blx	r3
 801b7d8:	6823      	ldr	r3, [r4, #0]
 801b7da:	4629      	mov	r1, r5
 801b7dc:	4620      	mov	r0, r4
 801b7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b7e0:	ad02      	add	r5, sp, #8
 801b7e2:	4798      	blx	r3
 801b7e4:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b7e8:	e885 0003 	stmia.w	r5, {r0, r1}
 801b7ec:	6960      	ldr	r0, [r4, #20]
 801b7ee:	b150      	cbz	r0, 801b806 <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801b7f0:	6803      	ldr	r3, [r0, #0]
 801b7f2:	4631      	mov	r1, r6
 801b7f4:	691b      	ldr	r3, [r3, #16]
 801b7f6:	4798      	blx	r3
 801b7f8:	6960      	ldr	r0, [r4, #20]
 801b7fa:	6803      	ldr	r3, [r0, #0]
 801b7fc:	691b      	ldr	r3, [r3, #16]
 801b7fe:	4629      	mov	r1, r5
 801b800:	4798      	blx	r3
 801b802:	b005      	add	sp, #20
 801b804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b806:	f7fe fffb 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 801b80a:	6803      	ldr	r3, [r0, #0]
 801b80c:	4631      	mov	r1, r6
 801b80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b810:	4798      	blx	r3
 801b812:	f7fe fff5 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 801b816:	6803      	ldr	r3, [r0, #0]
 801b818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b81a:	e7f0      	b.n	801b7fe <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801b81c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b81e:	8882      	ldrh	r2, [r0, #4]
 801b820:	4605      	mov	r5, r0
 801b822:	880b      	ldrh	r3, [r1, #0]
 801b824:	460c      	mov	r4, r1
 801b826:	4413      	add	r3, r2
 801b828:	800b      	strh	r3, [r1, #0]
 801b82a:	884b      	ldrh	r3, [r1, #2]
 801b82c:	88c2      	ldrh	r2, [r0, #6]
 801b82e:	4413      	add	r3, r2
 801b830:	4602      	mov	r2, r0
 801b832:	804b      	strh	r3, [r1, #2]
 801b834:	466b      	mov	r3, sp
 801b836:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b83a:	6851      	ldr	r1, [r2, #4]
 801b83c:	c303      	stmia	r3!, {r0, r1}
 801b83e:	4621      	mov	r1, r4
 801b840:	4668      	mov	r0, sp
 801b842:	f7fb fca1 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 801b846:	466b      	mov	r3, sp
 801b848:	cb03      	ldmia	r3!, {r0, r1}
 801b84a:	6020      	str	r0, [r4, #0]
 801b84c:	6061      	str	r1, [r4, #4]
 801b84e:	6968      	ldr	r0, [r5, #20]
 801b850:	b128      	cbz	r0, 801b85e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801b852:	6803      	ldr	r3, [r0, #0]
 801b854:	691b      	ldr	r3, [r3, #16]
 801b856:	4621      	mov	r1, r4
 801b858:	4798      	blx	r3
 801b85a:	b003      	add	sp, #12
 801b85c:	bd30      	pop	{r4, r5, pc}
 801b85e:	f7fe ffcf 	bl	801a800 <_ZN8touchgfx11Application11getInstanceEv>
 801b862:	6803      	ldr	r3, [r0, #0]
 801b864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b866:	e7f6      	b.n	801b856 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801b868 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b868:	b570      	push	{r4, r5, r6, lr}
 801b86a:	8882      	ldrh	r2, [r0, #4]
 801b86c:	460c      	mov	r4, r1
 801b86e:	880b      	ldrh	r3, [r1, #0]
 801b870:	4605      	mov	r5, r0
 801b872:	4413      	add	r3, r2
 801b874:	800b      	strh	r3, [r1, #0]
 801b876:	884b      	ldrh	r3, [r1, #2]
 801b878:	88c2      	ldrh	r2, [r0, #6]
 801b87a:	4413      	add	r3, r2
 801b87c:	804b      	strh	r3, [r1, #2]
 801b87e:	1d01      	adds	r1, r0, #4
 801b880:	4620      	mov	r0, r4
 801b882:	f7fb fc81 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 801b886:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	dd0b      	ble.n	801b8a6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b88e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b892:	2b00      	cmp	r3, #0
 801b894:	dd07      	ble.n	801b8a6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b896:	6968      	ldr	r0, [r5, #20]
 801b898:	b128      	cbz	r0, 801b8a6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b89a:	6803      	ldr	r3, [r0, #0]
 801b89c:	4621      	mov	r1, r4
 801b89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b8a4:	4718      	bx	r3
 801b8a6:	bd70      	pop	{r4, r5, r6, pc}

0801b8a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b8a8:	b510      	push	{r4, lr}
 801b8aa:	2300      	movs	r3, #0
 801b8ac:	4604      	mov	r4, r0
 801b8ae:	4608      	mov	r0, r1
 801b8b0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b8b4:	8023      	strh	r3, [r4, #0]
 801b8b6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b8ba:	8063      	strh	r3, [r4, #2]
 801b8bc:	6803      	ldr	r3, [r0, #0]
 801b8be:	80a1      	strh	r1, [r4, #4]
 801b8c0:	4621      	mov	r1, r4
 801b8c2:	80e2      	strh	r2, [r4, #6]
 801b8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8c6:	4798      	blx	r3
 801b8c8:	4620      	mov	r0, r4
 801b8ca:	bd10      	pop	{r4, pc}

0801b8cc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b8cc:	b530      	push	{r4, r5, lr}
 801b8ce:	8083      	strh	r3, [r0, #4]
 801b8d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b8d4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b8d8:	7183      	strb	r3, [r0, #6]
 801b8da:	79c3      	ldrb	r3, [r0, #7]
 801b8dc:	6101      	str	r1, [r0, #16]
 801b8de:	f365 0306 	bfi	r3, r5, #0, #7
 801b8e2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b8e6:	8282      	strh	r2, [r0, #20]
 801b8e8:	f365 13c7 	bfi	r3, r5, #7, #1
 801b8ec:	71c3      	strb	r3, [r0, #7]
 801b8ee:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b8f2:	7203      	strb	r3, [r0, #8]
 801b8f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b8f8:	7243      	strb	r3, [r0, #9]
 801b8fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b8fe:	8143      	strh	r3, [r0, #10]
 801b900:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b904:	8183      	strh	r3, [r0, #12]
 801b906:	4b01      	ldr	r3, [pc, #4]	; (801b90c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b908:	6003      	str	r3, [r0, #0]
 801b90a:	bd30      	pop	{r4, r5, pc}
 801b90c:	0802d5f8 	.word	0x0802d5f8

0801b910 <_ZNK8touchgfx9ConstFont4findEt>:
 801b910:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b912:	6904      	ldr	r4, [r0, #16]
 801b914:	b3bc      	cbz	r4, 801b986 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b916:	88a3      	ldrh	r3, [r4, #4]
 801b918:	8a82      	ldrh	r2, [r0, #20]
 801b91a:	1acb      	subs	r3, r1, r3
 801b91c:	f102 32ff 	add.w	r2, r2, #4294967295
 801b920:	d431      	bmi.n	801b986 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b922:	4293      	cmp	r3, r2
 801b924:	dd0c      	ble.n	801b940 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b926:	230e      	movs	r3, #14
 801b928:	fb03 4302 	mla	r3, r3, r2, r4
 801b92c:	889b      	ldrh	r3, [r3, #4]
 801b92e:	1a5b      	subs	r3, r3, r1
 801b930:	1ad3      	subs	r3, r2, r3
 801b932:	429a      	cmp	r2, r3
 801b934:	db27      	blt.n	801b986 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b936:	2b00      	cmp	r3, #0
 801b938:	bfbc      	itt	lt
 801b93a:	2302      	movlt	r3, #2
 801b93c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b940:	2500      	movs	r5, #0
 801b942:	260e      	movs	r6, #14
 801b944:	4295      	cmp	r5, r2
 801b946:	dc1e      	bgt.n	801b986 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b948:	fb06 4003 	mla	r0, r6, r3, r4
 801b94c:	8887      	ldrh	r7, [r0, #4]
 801b94e:	42b9      	cmp	r1, r7
 801b950:	d01a      	beq.n	801b988 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b952:	d20d      	bcs.n	801b970 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b954:	1e5a      	subs	r2, r3, #1
 801b956:	4295      	cmp	r5, r2
 801b958:	dc15      	bgt.n	801b986 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b95a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b95e:	1a5b      	subs	r3, r3, r1
 801b960:	1ad3      	subs	r3, r2, r3
 801b962:	429a      	cmp	r2, r3
 801b964:	db0f      	blt.n	801b986 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b966:	429d      	cmp	r5, r3
 801b968:	ddec      	ble.n	801b944 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b96a:	1953      	adds	r3, r2, r5
 801b96c:	105b      	asrs	r3, r3, #1
 801b96e:	e7e9      	b.n	801b944 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b970:	1c5d      	adds	r5, r3, #1
 801b972:	42aa      	cmp	r2, r5
 801b974:	db07      	blt.n	801b986 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b976:	8a43      	ldrh	r3, [r0, #18]
 801b978:	1acb      	subs	r3, r1, r3
 801b97a:	442b      	add	r3, r5
 801b97c:	429d      	cmp	r5, r3
 801b97e:	dc02      	bgt.n	801b986 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b980:	429a      	cmp	r2, r3
 801b982:	dadf      	bge.n	801b944 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b984:	e7f1      	b.n	801b96a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b986:	2000      	movs	r0, #0
 801b988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b98a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b98a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b98c:	4604      	mov	r4, r0
 801b98e:	4617      	mov	r7, r2
 801b990:	461e      	mov	r6, r3
 801b992:	b911      	cbnz	r1, 801b99a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b994:	2500      	movs	r5, #0
 801b996:	4628      	mov	r0, r5
 801b998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b99a:	290a      	cmp	r1, #10
 801b99c:	d0fa      	beq.n	801b994 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b99e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b9a2:	4291      	cmp	r1, r2
 801b9a4:	d0f6      	beq.n	801b994 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b9a6:	f242 020b 	movw	r2, #8203	; 0x200b
 801b9aa:	4291      	cmp	r1, r2
 801b9ac:	d0f2      	beq.n	801b994 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b9ae:	f7ff ffaf 	bl	801b910 <_ZNK8touchgfx9ConstFont4findEt>
 801b9b2:	4605      	mov	r5, r0
 801b9b4:	b950      	cbnz	r0, 801b9cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b9b6:	6823      	ldr	r3, [r4, #0]
 801b9b8:	4620      	mov	r0, r4
 801b9ba:	691b      	ldr	r3, [r3, #16]
 801b9bc:	4798      	blx	r3
 801b9be:	4601      	mov	r1, r0
 801b9c0:	4620      	mov	r0, r4
 801b9c2:	f7ff ffa5 	bl	801b910 <_ZNK8touchgfx9ConstFont4findEt>
 801b9c6:	4605      	mov	r5, r0
 801b9c8:	2800      	cmp	r0, #0
 801b9ca:	d0e3      	beq.n	801b994 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b9cc:	6823      	ldr	r3, [r4, #0]
 801b9ce:	4629      	mov	r1, r5
 801b9d0:	4620      	mov	r0, r4
 801b9d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b9d4:	4798      	blx	r3
 801b9d6:	6038      	str	r0, [r7, #0]
 801b9d8:	6823      	ldr	r3, [r4, #0]
 801b9da:	4620      	mov	r0, r4
 801b9dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b9de:	4798      	blx	r3
 801b9e0:	7030      	strb	r0, [r6, #0]
 801b9e2:	e7d8      	b.n	801b996 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b9e4 <_ZN8touchgfx6memsetEPvhm>:
 801b9e4:	4402      	add	r2, r0
 801b9e6:	4290      	cmp	r0, r2
 801b9e8:	d002      	beq.n	801b9f0 <_ZN8touchgfx6memsetEPvhm+0xc>
 801b9ea:	f800 1b01 	strb.w	r1, [r0], #1
 801b9ee:	e7fa      	b.n	801b9e6 <_ZN8touchgfx6memsetEPvhm+0x2>
 801b9f0:	4770      	bx	lr

0801b9f2 <_ZN8touchgfx4clzuEm>:
 801b9f2:	4603      	mov	r3, r0
 801b9f4:	b1c8      	cbz	r0, 801ba2a <_ZN8touchgfx4clzuEm+0x38>
 801b9f6:	0c02      	lsrs	r2, r0, #16
 801b9f8:	0412      	lsls	r2, r2, #16
 801b9fa:	b9a2      	cbnz	r2, 801ba26 <_ZN8touchgfx4clzuEm+0x34>
 801b9fc:	0403      	lsls	r3, r0, #16
 801b9fe:	2010      	movs	r0, #16
 801ba00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ba04:	bf04      	itt	eq
 801ba06:	021b      	lsleq	r3, r3, #8
 801ba08:	3008      	addeq	r0, #8
 801ba0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ba0e:	bf04      	itt	eq
 801ba10:	011b      	lsleq	r3, r3, #4
 801ba12:	3004      	addeq	r0, #4
 801ba14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ba18:	bf04      	itt	eq
 801ba1a:	009b      	lsleq	r3, r3, #2
 801ba1c:	3002      	addeq	r0, #2
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	db04      	blt.n	801ba2c <_ZN8touchgfx4clzuEm+0x3a>
 801ba22:	3001      	adds	r0, #1
 801ba24:	4770      	bx	lr
 801ba26:	2000      	movs	r0, #0
 801ba28:	e7ea      	b.n	801ba00 <_ZN8touchgfx4clzuEm+0xe>
 801ba2a:	2020      	movs	r0, #32
 801ba2c:	4770      	bx	lr

0801ba2e <_ZN8touchgfx7muldivuEmmmRm>:
 801ba2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba32:	4680      	mov	r8, r0
 801ba34:	460f      	mov	r7, r1
 801ba36:	4615      	mov	r5, r2
 801ba38:	461e      	mov	r6, r3
 801ba3a:	f7ff ffda 	bl	801b9f2 <_ZN8touchgfx4clzuEm>
 801ba3e:	b998      	cbnz	r0, 801ba68 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801ba40:	4608      	mov	r0, r1
 801ba42:	f7ff ffd6 	bl	801b9f2 <_ZN8touchgfx4clzuEm>
 801ba46:	2800      	cmp	r0, #0
 801ba48:	dd08      	ble.n	801ba5c <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801ba4a:	4633      	mov	r3, r6
 801ba4c:	462a      	mov	r2, r5
 801ba4e:	4641      	mov	r1, r8
 801ba50:	4638      	mov	r0, r7
 801ba52:	f7ff ffec 	bl	801ba2e <_ZN8touchgfx7muldivuEmmmRm>
 801ba56:	b003      	add	sp, #12
 801ba58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba5c:	f04f 33ff 	mov.w	r3, #4294967295
 801ba60:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ba64:	6033      	str	r3, [r6, #0]
 801ba66:	e7f6      	b.n	801ba56 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801ba68:	fa31 f900 	lsrs.w	r9, r1, r0
 801ba6c:	fb01 f308 	mul.w	r3, r1, r8
 801ba70:	d105      	bne.n	801ba7e <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801ba72:	fbb3 f0f5 	udiv	r0, r3, r5
 801ba76:	fb05 3510 	mls	r5, r5, r0, r3
 801ba7a:	6035      	str	r5, [r6, #0]
 801ba7c:	e7eb      	b.n	801ba56 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801ba7e:	2301      	movs	r3, #1
 801ba80:	fa08 fb00 	lsl.w	fp, r8, r0
 801ba84:	462a      	mov	r2, r5
 801ba86:	4641      	mov	r1, r8
 801ba88:	fa03 f000 	lsl.w	r0, r3, r0
 801ba8c:	4633      	mov	r3, r6
 801ba8e:	fbbb faf5 	udiv	sl, fp, r5
 801ba92:	3801      	subs	r0, #1
 801ba94:	fb09 f40a 	mul.w	r4, r9, sl
 801ba98:	4038      	ands	r0, r7
 801ba9a:	f7ff ffc8 	bl	801ba2e <_ZN8touchgfx7muldivuEmmmRm>
 801ba9e:	462a      	mov	r2, r5
 801baa0:	4607      	mov	r7, r0
 801baa2:	ab01      	add	r3, sp, #4
 801baa4:	fb05 b11a 	mls	r1, r5, sl, fp
 801baa8:	4648      	mov	r0, r9
 801baaa:	f7ff ffc0 	bl	801ba2e <_ZN8touchgfx7muldivuEmmmRm>
 801baae:	9b01      	ldr	r3, [sp, #4]
 801bab0:	6832      	ldr	r2, [r6, #0]
 801bab2:	441a      	add	r2, r3
 801bab4:	fbb2 f3f5 	udiv	r3, r2, r5
 801bab8:	441c      	add	r4, r3
 801baba:	fb05 2513 	mls	r5, r5, r3, r2
 801babe:	443c      	add	r4, r7
 801bac0:	4420      	add	r0, r4
 801bac2:	e7da      	b.n	801ba7a <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801bac4 <_ZN8touchgfx6muldivElllRl>:
 801bac4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bac6:	2800      	cmp	r0, #0
 801bac8:	461e      	mov	r6, r3
 801baca:	bfba      	itte	lt
 801bacc:	4240      	neglt	r0, r0
 801bace:	f04f 34ff 	movlt.w	r4, #4294967295
 801bad2:	2401      	movge	r4, #1
 801bad4:	2900      	cmp	r1, #0
 801bad6:	bfbc      	itt	lt
 801bad8:	4249      	neglt	r1, r1
 801bada:	4264      	neglt	r4, r4
 801badc:	2a00      	cmp	r2, #0
 801bade:	bfb6      	itet	lt
 801bae0:	4265      	neglt	r5, r4
 801bae2:	4625      	movge	r5, r4
 801bae4:	4252      	neglt	r2, r2
 801bae6:	4288      	cmp	r0, r1
 801bae8:	bfc2      	ittt	gt
 801baea:	4603      	movgt	r3, r0
 801baec:	4608      	movgt	r0, r1
 801baee:	4619      	movgt	r1, r3
 801baf0:	ab01      	add	r3, sp, #4
 801baf2:	f7ff ff9c 	bl	801ba2e <_ZN8touchgfx7muldivuEmmmRm>
 801baf6:	9b01      	ldr	r3, [sp, #4]
 801baf8:	4368      	muls	r0, r5
 801bafa:	435c      	muls	r4, r3
 801bafc:	6034      	str	r4, [r6, #0]
 801bafe:	b002      	add	sp, #8
 801bb00:	bd70      	pop	{r4, r5, r6, pc}

0801bb02 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801bb02:	2000      	movs	r0, #0
 801bb04:	4770      	bx	lr

0801bb06 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801bb06:	2001      	movs	r0, #1
 801bb08:	4770      	bx	lr

0801bb0a <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801bb0a:	2002      	movs	r0, #2
 801bb0c:	4770      	bx	lr

0801bb0e <_ZN8touchgfx12GestureEventD1Ev>:
 801bb0e:	4770      	bx	lr

0801bb10 <_ZN8touchgfx9DragEventD1Ev>:
 801bb10:	4770      	bx	lr

0801bb12 <_ZN8touchgfx10ClickEventD1Ev>:
 801bb12:	4770      	bx	lr

0801bb14 <_ZN8touchgfx10ClickEventD0Ev>:
 801bb14:	b510      	push	{r4, lr}
 801bb16:	4604      	mov	r4, r0
 801bb18:	210c      	movs	r1, #12
 801bb1a:	f00d fdac 	bl	8029676 <_ZdlPvj>
 801bb1e:	4620      	mov	r0, r4
 801bb20:	bd10      	pop	{r4, pc}

0801bb22 <_ZN8touchgfx9DragEventD0Ev>:
 801bb22:	b510      	push	{r4, lr}
 801bb24:	4604      	mov	r4, r0
 801bb26:	2110      	movs	r1, #16
 801bb28:	f00d fda5 	bl	8029676 <_ZdlPvj>
 801bb2c:	4620      	mov	r0, r4
 801bb2e:	bd10      	pop	{r4, pc}

0801bb30 <_ZN8touchgfx12GestureEventD0Ev>:
 801bb30:	b510      	push	{r4, lr}
 801bb32:	4604      	mov	r4, r0
 801bb34:	210c      	movs	r1, #12
 801bb36:	f00d fd9e 	bl	8029676 <_ZdlPvj>
 801bb3a:	4620      	mov	r0, r4
 801bb3c:	bd10      	pop	{r4, pc}
	...

0801bb40 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801bb40:	b530      	push	{r4, r5, lr}
 801bb42:	460d      	mov	r5, r1
 801bb44:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801bb46:	b087      	sub	sp, #28
 801bb48:	4604      	mov	r4, r0
 801bb4a:	b301      	cbz	r1, 801bb8e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801bb4c:	a801      	add	r0, sp, #4
 801bb4e:	f7ff feab 	bl	801b8a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bb52:	892a      	ldrh	r2, [r5, #8]
 801bb54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801bb58:	7928      	ldrb	r0, [r5, #4]
 801bb5a:	1ad2      	subs	r2, r2, r3
 801bb5c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801bb5e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bb62:	441a      	add	r2, r3
 801bb64:	896b      	ldrh	r3, [r5, #10]
 801bb66:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801bb6a:	f88d 0010 	strb.w	r0, [sp, #16]
 801bb6e:	1b5b      	subs	r3, r3, r5
 801bb70:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801bb72:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bb74:	442b      	add	r3, r5
 801bb76:	4d07      	ldr	r5, [pc, #28]	; (801bb94 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801bb78:	f8ad 1012 	strh.w	r1, [sp, #18]
 801bb7c:	a903      	add	r1, sp, #12
 801bb7e:	9503      	str	r5, [sp, #12]
 801bb80:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bb84:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bb88:	6803      	ldr	r3, [r0, #0]
 801bb8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb8c:	4798      	blx	r3
 801bb8e:	b007      	add	sp, #28
 801bb90:	bd30      	pop	{r4, r5, pc}
 801bb92:	bf00      	nop
 801bb94:	0802d674 	.word	0x0802d674

0801bb98 <_ZNK8touchgfx4Rect9intersectEss>:
 801bb98:	b510      	push	{r4, lr}
 801bb9a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bb9e:	428b      	cmp	r3, r1
 801bba0:	dc10      	bgt.n	801bbc4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801bba2:	8884      	ldrh	r4, [r0, #4]
 801bba4:	4423      	add	r3, r4
 801bba6:	b21b      	sxth	r3, r3
 801bba8:	4299      	cmp	r1, r3
 801bbaa:	da0b      	bge.n	801bbc4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801bbac:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bbb0:	4293      	cmp	r3, r2
 801bbb2:	dc07      	bgt.n	801bbc4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801bbb4:	88c0      	ldrh	r0, [r0, #6]
 801bbb6:	4418      	add	r0, r3
 801bbb8:	b200      	sxth	r0, r0
 801bbba:	4282      	cmp	r2, r0
 801bbbc:	bfac      	ite	ge
 801bbbe:	2000      	movge	r0, #0
 801bbc0:	2001      	movlt	r0, #1
 801bbc2:	bd10      	pop	{r4, pc}
 801bbc4:	2000      	movs	r0, #0
 801bbc6:	e7fc      	b.n	801bbc2 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801bbc8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801bbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbca:	460c      	mov	r4, r1
 801bbcc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801bbce:	b089      	sub	sp, #36	; 0x24
 801bbd0:	4605      	mov	r5, r0
 801bbd2:	2900      	cmp	r1, #0
 801bbd4:	d054      	beq.n	801bc80 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801bbd6:	4668      	mov	r0, sp
 801bbd8:	f7ff fe66 	bl	801b8a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bbdc:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801bbde:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801bbe0:	4668      	mov	r0, sp
 801bbe2:	8922      	ldrh	r2, [r4, #8]
 801bbe4:	88e1      	ldrh	r1, [r4, #6]
 801bbe6:	443a      	add	r2, r7
 801bbe8:	4431      	add	r1, r6
 801bbea:	b212      	sxth	r2, r2
 801bbec:	b209      	sxth	r1, r1
 801bbee:	f7ff ffd3 	bl	801bb98 <_ZNK8touchgfx4Rect9intersectEss>
 801bbf2:	b1d0      	cbz	r0, 801bc2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801bbf4:	89a2      	ldrh	r2, [r4, #12]
 801bbf6:	4668      	mov	r0, sp
 801bbf8:	8961      	ldrh	r1, [r4, #10]
 801bbfa:	443a      	add	r2, r7
 801bbfc:	4431      	add	r1, r6
 801bbfe:	b212      	sxth	r2, r2
 801bc00:	b209      	sxth	r1, r1
 801bc02:	f7ff ffc9 	bl	801bb98 <_ZNK8touchgfx4Rect9intersectEss>
 801bc06:	4603      	mov	r3, r0
 801bc08:	b978      	cbnz	r0, 801bc2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801bc0a:	4a1e      	ldr	r2, [pc, #120]	; (801bc84 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801bc0c:	a904      	add	r1, sp, #16
 801bc0e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bc10:	9204      	str	r2, [sp, #16]
 801bc12:	2202      	movs	r2, #2
 801bc14:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bc18:	f88d 2014 	strb.w	r2, [sp, #20]
 801bc1c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bc20:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bc24:	6803      	ldr	r3, [r0, #0]
 801bc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc28:	4798      	blx	r3
 801bc2a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801bc2c:	a802      	add	r0, sp, #8
 801bc2e:	f7ff fe3b 	bl	801b8a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bc32:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bc36:	88e0      	ldrh	r0, [r4, #6]
 801bc38:	8961      	ldrh	r1, [r4, #10]
 801bc3a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801bc3e:	1a80      	subs	r0, r0, r2
 801bc40:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801bc44:	1a89      	subs	r1, r1, r2
 801bc46:	8923      	ldrh	r3, [r4, #8]
 801bc48:	4460      	add	r0, ip
 801bc4a:	89a2      	ldrh	r2, [r4, #12]
 801bc4c:	4461      	add	r1, ip
 801bc4e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801bc50:	eba3 030e 	sub.w	r3, r3, lr
 801bc54:	eba2 020e 	sub.w	r2, r2, lr
 801bc58:	f8ad 0016 	strh.w	r0, [sp, #22]
 801bc5c:	7927      	ldrb	r7, [r4, #4]
 801bc5e:	4433      	add	r3, r6
 801bc60:	4432      	add	r2, r6
 801bc62:	4c09      	ldr	r4, [pc, #36]	; (801bc88 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801bc64:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bc66:	f8ad 101a 	strh.w	r1, [sp, #26]
 801bc6a:	a904      	add	r1, sp, #16
 801bc6c:	9404      	str	r4, [sp, #16]
 801bc6e:	f88d 7014 	strb.w	r7, [sp, #20]
 801bc72:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bc76:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bc7a:	6803      	ldr	r3, [r0, #0]
 801bc7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bc7e:	4798      	blx	r3
 801bc80:	b009      	add	sp, #36	; 0x24
 801bc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc84:	0802d64c 	.word	0x0802d64c
 801bc88:	0802d660 	.word	0x0802d660

0801bc8c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc90:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801bc94:	b0a1      	sub	sp, #132	; 0x84
 801bc96:	4604      	mov	r4, r0
 801bc98:	460d      	mov	r5, r1
 801bc9a:	790b      	ldrb	r3, [r1, #4]
 801bc9c:	f1b9 0f00 	cmp.w	r9, #0
 801bca0:	d00f      	beq.n	801bcc2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	f040 80a2 	bne.w	801bdec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801bca8:	b021      	add	sp, #132	; 0x84
 801bcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcae:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801bcb2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801bcb6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bcba:	1d20      	adds	r0, r4, #4
 801bcbc:	f7fb f9b2 	bl	8017024 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bcc0:	e094      	b.n	801bdec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d1f0      	bne.n	801bca8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bcc6:	4b5f      	ldr	r3, [pc, #380]	; (801be44 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801bcce:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801bcd2:	f1ba 0f03 	cmp.w	sl, #3
 801bcd6:	ddea      	ble.n	801bcae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801bcd8:	f1ba 0f0c 	cmp.w	sl, #12
 801bcdc:	f04f 0303 	mov.w	r3, #3
 801bce0:	f04f 0600 	mov.w	r6, #0
 801bce4:	4958      	ldr	r1, [pc, #352]	; (801be48 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801bce6:	bfd8      	it	le
 801bce8:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801bcec:	960a      	str	r6, [sp, #40]	; 0x28
 801bcee:	bfd8      	it	le
 801bcf0:	fb92 f3f3 	sdivle	r3, r2, r3
 801bcf4:	9301      	str	r3, [sp, #4]
 801bcf6:	4b55      	ldr	r3, [pc, #340]	; (801be4c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801bcf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bcfc:	4b54      	ldr	r3, [pc, #336]	; (801be50 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801bcfe:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801bd02:	2248      	movs	r2, #72	; 0x48
 801bd04:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bd08:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801bd0c:	ab0e      	add	r3, sp, #56	; 0x38
 801bd0e:	4618      	mov	r0, r3
 801bd10:	f00d fe58 	bl	80299c4 <memcpy>
 801bd14:	f04f 32ff 	mov.w	r2, #4294967295
 801bd18:	f8cd a008 	str.w	sl, [sp, #8]
 801bd1c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801bd20:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bd24:	46b3      	mov	fp, r6
 801bd26:	fb93 f3f2 	sdiv	r3, r3, r2
 801bd2a:	b29b      	uxth	r3, r3
 801bd2c:	9303      	str	r3, [sp, #12]
 801bd2e:	2300      	movs	r3, #0
 801bd30:	9a03      	ldr	r2, [sp, #12]
 801bd32:	88ef      	ldrh	r7, [r5, #6]
 801bd34:	a80a      	add	r0, sp, #40	; 0x28
 801bd36:	9309      	str	r3, [sp, #36]	; 0x24
 801bd38:	9b07      	ldr	r3, [sp, #28]
 801bd3a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801bd3e:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801bd42:	fb13 f302 	smulbb	r3, r3, r2
 801bd46:	b29b      	uxth	r3, r3
 801bd48:	9304      	str	r3, [sp, #16]
 801bd4a:	9b07      	ldr	r3, [sp, #28]
 801bd4c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bd50:	685b      	ldr	r3, [r3, #4]
 801bd52:	fb13 f302 	smulbb	r3, r3, r2
 801bd56:	b29b      	uxth	r3, r3
 801bd58:	9305      	str	r3, [sp, #20]
 801bd5a:	9b04      	ldr	r3, [sp, #16]
 801bd5c:	441f      	add	r7, r3
 801bd5e:	9b05      	ldr	r3, [sp, #20]
 801bd60:	4498      	add	r8, r3
 801bd62:	b23f      	sxth	r7, r7
 801bd64:	fa0f f888 	sxth.w	r8, r8
 801bd68:	4639      	mov	r1, r7
 801bd6a:	4642      	mov	r2, r8
 801bd6c:	f7ff ff14 	bl	801bb98 <_ZNK8touchgfx4Rect9intersectEss>
 801bd70:	b380      	cbz	r0, 801bdd4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bd72:	4639      	mov	r1, r7
 801bd74:	ab09      	add	r3, sp, #36	; 0x24
 801bd76:	4642      	mov	r2, r8
 801bd78:	1d20      	adds	r0, r4, #4
 801bd7a:	f7fb f953 	bl	8017024 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bd7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bd80:	b341      	cbz	r1, 801bdd4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bd82:	4549      	cmp	r1, r9
 801bd84:	d026      	beq.n	801bdd4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bd86:	a80c      	add	r0, sp, #48	; 0x30
 801bd88:	f7ff fd8e 	bl	801b8a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bd8c:	2002      	movs	r0, #2
 801bd8e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801bd92:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801bd96:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bd9a:	fb92 f2f0 	sdiv	r2, r2, r0
 801bd9e:	440a      	add	r2, r1
 801bda0:	1a99      	subs	r1, r3, r2
 801bda2:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801bda6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801bdaa:	fb93 f3f0 	sdiv	r3, r3, r0
 801bdae:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801bdb2:	4403      	add	r3, r0
 801bdb4:	1ad3      	subs	r3, r2, r3
 801bdb6:	9a06      	ldr	r2, [sp, #24]
 801bdb8:	435b      	muls	r3, r3
 801bdba:	fb01 3301 	mla	r3, r1, r1, r3
 801bdbe:	4293      	cmp	r3, r2
 801bdc0:	d208      	bcs.n	801bdd4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bdc2:	9a04      	ldr	r2, [sp, #16]
 801bdc4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801bdc8:	86a2      	strh	r2, [r4, #52]	; 0x34
 801bdca:	9a05      	ldr	r2, [sp, #20]
 801bdcc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801bdd0:	86e2      	strh	r2, [r4, #54]	; 0x36
 801bdd2:	9306      	str	r3, [sp, #24]
 801bdd4:	f10b 0b02 	add.w	fp, fp, #2
 801bdd8:	f1bb 0f08 	cmp.w	fp, #8
 801bddc:	dda7      	ble.n	801bd2e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801bdde:	9b02      	ldr	r3, [sp, #8]
 801bde0:	3601      	adds	r6, #1
 801bde2:	4453      	add	r3, sl
 801bde4:	9302      	str	r3, [sp, #8]
 801bde6:	9b01      	ldr	r3, [sp, #4]
 801bde8:	42b3      	cmp	r3, r6
 801bdea:	d199      	bne.n	801bd20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801bdec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bdee:	2900      	cmp	r1, #0
 801bdf0:	f43f af5a 	beq.w	801bca8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bdf4:	a80c      	add	r0, sp, #48	; 0x30
 801bdf6:	2600      	movs	r6, #0
 801bdf8:	f7ff fd56 	bl	801b8a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bdfc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801be00:	88ea      	ldrh	r2, [r5, #6]
 801be02:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801be06:	1ad2      	subs	r2, r2, r3
 801be08:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801be0a:	7929      	ldrb	r1, [r5, #4]
 801be0c:	441a      	add	r2, r3
 801be0e:	892b      	ldrh	r3, [r5, #8]
 801be10:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801be14:	a90e      	add	r1, sp, #56	; 0x38
 801be16:	1a1b      	subs	r3, r3, r0
 801be18:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801be1a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801be1e:	4403      	add	r3, r0
 801be20:	480c      	ldr	r0, [pc, #48]	; (801be54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801be22:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801be26:	900e      	str	r0, [sp, #56]	; 0x38
 801be28:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801be2a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801be2e:	6803      	ldr	r3, [r0, #0]
 801be30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be32:	4798      	blx	r3
 801be34:	792b      	ldrb	r3, [r5, #4]
 801be36:	2b00      	cmp	r3, #0
 801be38:	f43f af36 	beq.w	801bca8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801be3c:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801be40:	e732      	b.n	801bca8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801be42:	bf00      	nop
 801be44:	20005944 	.word	0x20005944
 801be48:	0802b508 	.word	0x0802b508
 801be4c:	20005938 	.word	0x20005938
 801be50:	2000593a 	.word	0x2000593a
 801be54:	0802d64c 	.word	0x0802d64c

0801be58 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801be58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801be5a:	4604      	mov	r4, r0
 801be5c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801be60:	3201      	adds	r2, #1
 801be62:	d112      	bne.n	801be8a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801be64:	2500      	movs	r5, #0
 801be66:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801be6a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801be6e:	6803      	ldr	r3, [r0, #0]
 801be70:	9500      	str	r5, [sp, #0]
 801be72:	466d      	mov	r5, sp
 801be74:	f8ad 1004 	strh.w	r1, [sp, #4]
 801be78:	f8ad 2006 	strh.w	r2, [sp, #6]
 801be7c:	4629      	mov	r1, r5
 801be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be80:	4798      	blx	r3
 801be82:	e895 0003 	ldmia.w	r5, {r0, r1}
 801be86:	e884 0003 	stmia.w	r4, {r0, r1}
 801be8a:	4620      	mov	r0, r4
 801be8c:	b003      	add	sp, #12
 801be8e:	bd30      	pop	{r4, r5, pc}

0801be90 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801be90:	b513      	push	{r0, r1, r4, lr}
 801be92:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801be96:	4604      	mov	r4, r0
 801be98:	3301      	adds	r3, #1
 801be9a:	d109      	bne.n	801beb0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801be9c:	4601      	mov	r1, r0
 801be9e:	4668      	mov	r0, sp
 801bea0:	f7ff fd02 	bl	801b8a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bea4:	f8bd 3000 	ldrh.w	r3, [sp]
 801bea8:	8423      	strh	r3, [r4, #32]
 801beaa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801beae:	8463      	strh	r3, [r4, #34]	; 0x22
 801beb0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801beb4:	b002      	add	sp, #8
 801beb6:	bd10      	pop	{r4, pc}

0801beb8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801beb8:	b513      	push	{r0, r1, r4, lr}
 801beba:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801bebe:	4604      	mov	r4, r0
 801bec0:	3301      	adds	r3, #1
 801bec2:	d109      	bne.n	801bed8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801bec4:	4601      	mov	r1, r0
 801bec6:	4668      	mov	r0, sp
 801bec8:	f7ff fcee 	bl	801b8a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801becc:	f8bd 3000 	ldrh.w	r3, [sp]
 801bed0:	8423      	strh	r3, [r4, #32]
 801bed2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bed6:	8463      	strh	r3, [r4, #34]	; 0x22
 801bed8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801bedc:	b002      	add	sp, #8
 801bede:	bd10      	pop	{r4, pc}

0801bee0 <_ZN8touchgfx6ScreenC1Ev>:
 801bee0:	b570      	push	{r4, r5, r6, lr}
 801bee2:	4b16      	ldr	r3, [pc, #88]	; (801bf3c <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 801bee4:	4605      	mov	r5, r0
 801bee6:	4a16      	ldr	r2, [pc, #88]	; (801bf40 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801bee8:	2101      	movs	r1, #1
 801beea:	f845 3b04 	str.w	r3, [r5], #4
 801beee:	2300      	movs	r3, #0
 801bef0:	6042      	str	r2, [r0, #4]
 801bef2:	4604      	mov	r4, r0
 801bef4:	8103      	strh	r3, [r0, #8]
 801bef6:	8143      	strh	r3, [r0, #10]
 801bef8:	8183      	strh	r3, [r0, #12]
 801befa:	81c3      	strh	r3, [r0, #14]
 801befc:	8203      	strh	r3, [r0, #16]
 801befe:	8243      	strh	r3, [r0, #18]
 801bf00:	8283      	strh	r3, [r0, #20]
 801bf02:	82c3      	strh	r3, [r0, #22]
 801bf04:	6203      	str	r3, [r0, #32]
 801bf06:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801bf0a:	6343      	str	r3, [r0, #52]	; 0x34
 801bf0c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801bf10:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801bf14:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801bf18:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801bf1c:	4b09      	ldr	r3, [pc, #36]	; (801bf44 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801bf1e:	4628      	mov	r0, r5
 801bf20:	f9b3 6000 	ldrsh.w	r6, [r3]
 801bf24:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801bf26:	4a08      	ldr	r2, [pc, #32]	; (801bf48 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801bf28:	f9b2 1000 	ldrsh.w	r1, [r2]
 801bf2c:	4798      	blx	r3
 801bf2e:	6863      	ldr	r3, [r4, #4]
 801bf30:	4628      	mov	r0, r5
 801bf32:	4631      	mov	r1, r6
 801bf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf36:	4798      	blx	r3
 801bf38:	4620      	mov	r0, r4
 801bf3a:	bd70      	pop	{r4, r5, r6, pc}
 801bf3c:	0802d688 	.word	0x0802d688
 801bf40:	0802c66c 	.word	0x0802c66c
 801bf44:	2000593a 	.word	0x2000593a
 801bf48:	20005938 	.word	0x20005938

0801bf4c <_ZN8touchgfx6Screen4drawEv>:
 801bf4c:	4b09      	ldr	r3, [pc, #36]	; (801bf74 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801bf4e:	b507      	push	{r0, r1, r2, lr}
 801bf50:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf54:	2100      	movs	r1, #0
 801bf56:	4b08      	ldr	r3, [pc, #32]	; (801bf78 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801bf58:	9100      	str	r1, [sp, #0]
 801bf5a:	4669      	mov	r1, sp
 801bf5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bf60:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bf64:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bf68:	6803      	ldr	r3, [r0, #0]
 801bf6a:	689b      	ldr	r3, [r3, #8]
 801bf6c:	4798      	blx	r3
 801bf6e:	b003      	add	sp, #12
 801bf70:	f85d fb04 	ldr.w	pc, [sp], #4
 801bf74:	20005938 	.word	0x20005938
 801bf78:	2000593a 	.word	0x2000593a

0801bf7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801bf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf80:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801bf84:	b089      	sub	sp, #36	; 0x24
 801bf86:	4680      	mov	r8, r0
 801bf88:	460c      	mov	r4, r1
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	4615      	mov	r5, r2
 801bf8e:	dd0e      	ble.n	801bfae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bf90:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	dd0a      	ble.n	801bfae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bf98:	4628      	mov	r0, r5
 801bf9a:	f7ff ff5d 	bl	801be58 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bf9e:	4621      	mov	r1, r4
 801bfa0:	f7fe fba4 	bl	801a6ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bfa4:	69eb      	ldr	r3, [r5, #28]
 801bfa6:	b928      	cbnz	r0, 801bfb4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801bfa8:	461d      	mov	r5, r3
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d1f4      	bne.n	801bf98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801bfae:	b009      	add	sp, #36	; 0x24
 801bfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfb4:	ae04      	add	r6, sp, #16
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	f000 80b5 	beq.w	801c126 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801bfbc:	682b      	ldr	r3, [r5, #0]
 801bfbe:	4629      	mov	r1, r5
 801bfc0:	a802      	add	r0, sp, #8
 801bfc2:	68db      	ldr	r3, [r3, #12]
 801bfc4:	4798      	blx	r3
 801bfc6:	4628      	mov	r0, r5
 801bfc8:	f7ff ff62 	bl	801be90 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bfcc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801bfd0:	4407      	add	r7, r0
 801bfd2:	4628      	mov	r0, r5
 801bfd4:	f7ff ff70 	bl	801beb8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bfd8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801bfdc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801bfe0:	b23f      	sxth	r7, r7
 801bfe2:	4418      	add	r0, r3
 801bfe4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801bfe8:	4621      	mov	r1, r4
 801bfea:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bfee:	f8ad 0012 	strh.w	r0, [sp, #18]
 801bff2:	4630      	mov	r0, r6
 801bff4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bff8:	f8ad 7010 	strh.w	r7, [sp, #16]
 801bffc:	f7fb f8c4 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 801c000:	4628      	mov	r0, r5
 801c002:	f7ff ff29 	bl	801be58 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c006:	ab06      	add	r3, sp, #24
 801c008:	4602      	mov	r2, r0
 801c00a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c00e:	e883 0003 	stmia.w	r3, {r0, r1}
 801c012:	4611      	mov	r1, r2
 801c014:	4618      	mov	r0, r3
 801c016:	f7fb f8b7 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 801c01a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c01e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c022:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c026:	4299      	cmp	r1, r3
 801c028:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c02c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c030:	d10b      	bne.n	801c04a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c032:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c036:	4552      	cmp	r2, sl
 801c038:	d107      	bne.n	801c04a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c03a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c03e:	455a      	cmp	r2, fp
 801c040:	d103      	bne.n	801c04a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c042:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c046:	454a      	cmp	r2, r9
 801c048:	d06d      	beq.n	801c126 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c04a:	f1bb 0f00 	cmp.w	fp, #0
 801c04e:	dd65      	ble.n	801c11c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c050:	f1b9 0f00 	cmp.w	r9, #0
 801c054:	dd62      	ble.n	801c11c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c056:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c05a:	fa1f f08a 	uxth.w	r0, sl
 801c05e:	4552      	cmp	r2, sl
 801c060:	9000      	str	r0, [sp, #0]
 801c062:	da12      	bge.n	801c08a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c064:	9301      	str	r3, [sp, #4]
 801c066:	9b00      	ldr	r3, [sp, #0]
 801c068:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c06c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c070:	1a9a      	subs	r2, r3, r2
 801c072:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c076:	4631      	mov	r1, r6
 801c078:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c07c:	4640      	mov	r0, r8
 801c07e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c082:	69ea      	ldr	r2, [r5, #28]
 801c084:	f7ff ff7a 	bl	801bf7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c088:	9b01      	ldr	r3, [sp, #4]
 801c08a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c08e:	b29f      	uxth	r7, r3
 801c090:	429a      	cmp	r2, r3
 801c092:	da0d      	bge.n	801c0b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c094:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c098:	1aba      	subs	r2, r7, r2
 801c09a:	f8ad a012 	strh.w	sl, [sp, #18]
 801c09e:	4631      	mov	r1, r6
 801c0a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c0a4:	4640      	mov	r0, r8
 801c0a6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c0aa:	69ea      	ldr	r2, [r5, #28]
 801c0ac:	f7ff ff66 	bl	801bf7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c0b0:	8822      	ldrh	r2, [r4, #0]
 801c0b2:	445f      	add	r7, fp
 801c0b4:	88a3      	ldrh	r3, [r4, #4]
 801c0b6:	b2bf      	uxth	r7, r7
 801c0b8:	4413      	add	r3, r2
 801c0ba:	b23a      	sxth	r2, r7
 801c0bc:	b29b      	uxth	r3, r3
 801c0be:	b219      	sxth	r1, r3
 801c0c0:	4291      	cmp	r1, r2
 801c0c2:	dd0d      	ble.n	801c0e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c0c4:	1bdb      	subs	r3, r3, r7
 801c0c6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c0ca:	f8ad a012 	strh.w	sl, [sp, #18]
 801c0ce:	4631      	mov	r1, r6
 801c0d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c0d4:	4640      	mov	r0, r8
 801c0d6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c0da:	69ea      	ldr	r2, [r5, #28]
 801c0dc:	f7ff ff4e 	bl	801bf7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c0e0:	88e2      	ldrh	r2, [r4, #6]
 801c0e2:	8863      	ldrh	r3, [r4, #2]
 801c0e4:	4413      	add	r3, r2
 801c0e6:	9a00      	ldr	r2, [sp, #0]
 801c0e8:	444a      	add	r2, r9
 801c0ea:	b29b      	uxth	r3, r3
 801c0ec:	fa1f f982 	uxth.w	r9, r2
 801c0f0:	b219      	sxth	r1, r3
 801c0f2:	fa0f f289 	sxth.w	r2, r9
 801c0f6:	428a      	cmp	r2, r1
 801c0f8:	da15      	bge.n	801c126 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c0fa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c0fe:	eba3 0309 	sub.w	r3, r3, r9
 801c102:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c106:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c10a:	4631      	mov	r1, r6
 801c10c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c110:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c114:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c118:	69ea      	ldr	r2, [r5, #28]
 801c11a:	e001      	b.n	801c120 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c11c:	69ea      	ldr	r2, [r5, #28]
 801c11e:	4621      	mov	r1, r4
 801c120:	4640      	mov	r0, r8
 801c122:	f7ff ff2b 	bl	801bf7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c126:	4628      	mov	r0, r5
 801c128:	f7ff fe96 	bl	801be58 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c12c:	6861      	ldr	r1, [r4, #4]
 801c12e:	4602      	mov	r2, r0
 801c130:	4633      	mov	r3, r6
 801c132:	6820      	ldr	r0, [r4, #0]
 801c134:	c303      	stmia	r3!, {r0, r1}
 801c136:	4611      	mov	r1, r2
 801c138:	4630      	mov	r0, r6
 801c13a:	f7fb f825 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 801c13e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c142:	2b00      	cmp	r3, #0
 801c144:	f77f af33 	ble.w	801bfae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c148:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	f77f af2e 	ble.w	801bfae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c152:	4628      	mov	r0, r5
 801c154:	f7ff fe9c 	bl	801be90 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c158:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c15c:	1a18      	subs	r0, r3, r0
 801c15e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c162:	4628      	mov	r0, r5
 801c164:	f7ff fea8 	bl	801beb8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c168:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c16c:	4631      	mov	r1, r6
 801c16e:	1a18      	subs	r0, r3, r0
 801c170:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c174:	4628      	mov	r0, r5
 801c176:	682b      	ldr	r3, [r5, #0]
 801c178:	689b      	ldr	r3, [r3, #8]
 801c17a:	4798      	blx	r3
 801c17c:	e717      	b.n	801bfae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c17e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c17e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c180:	2300      	movs	r3, #0
 801c182:	aa02      	add	r2, sp, #8
 801c184:	4604      	mov	r4, r0
 801c186:	3004      	adds	r0, #4
 801c188:	f842 3d04 	str.w	r3, [r2, #-4]!
 801c18c:	460d      	mov	r5, r1
 801c18e:	f7fb f8d3 	bl	8017338 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c192:	9a01      	ldr	r2, [sp, #4]
 801c194:	b11a      	cbz	r2, 801c19e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801c196:	4629      	mov	r1, r5
 801c198:	4620      	mov	r0, r4
 801c19a:	f7ff feef 	bl	801bf7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c19e:	b003      	add	sp, #12
 801c1a0:	bd30      	pop	{r4, r5, pc}

0801c1a2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c1a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c1a4:	4602      	mov	r2, r0
 801c1a6:	4604      	mov	r4, r0
 801c1a8:	460d      	mov	r5, r1
 801c1aa:	466b      	mov	r3, sp
 801c1ac:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c1b0:	6851      	ldr	r1, [r2, #4]
 801c1b2:	c303      	stmia	r3!, {r0, r1}
 801c1b4:	4629      	mov	r1, r5
 801c1b6:	4668      	mov	r0, sp
 801c1b8:	f7fa ffe6 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 801c1bc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c1c0:	4669      	mov	r1, sp
 801c1c2:	b123      	cbz	r3, 801c1ce <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801c1c4:	4620      	mov	r0, r4
 801c1c6:	f7ff ffda 	bl	801c17e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c1ca:	b003      	add	sp, #12
 801c1cc:	bd30      	pop	{r4, r5, pc}
 801c1ce:	1d20      	adds	r0, r4, #4
 801c1d0:	f7fb f879 	bl	80172c6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c1d4:	e7f9      	b.n	801c1ca <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801c1d6 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c1d6:	460b      	mov	r3, r1
 801c1d8:	680a      	ldr	r2, [r1, #0]
 801c1da:	1d01      	adds	r1, r0, #4
 801c1dc:	6992      	ldr	r2, [r2, #24]
 801c1de:	4618      	mov	r0, r3
 801c1e0:	4710      	bx	r2

0801c1e2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801c1e2:	b510      	push	{r4, lr}
 801c1e4:	4298      	cmp	r0, r3
 801c1e6:	eb01 0402 	add.w	r4, r1, r2
 801c1ea:	b224      	sxth	r4, r4
 801c1ec:	d22c      	bcs.n	801c248 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801c1ee:	b35b      	cbz	r3, 801c248 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801c1f0:	ee07 0a90 	vmov	s15, r0
 801c1f4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801c1f8:	ee07 3a90 	vmov	s15, r3
 801c1fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801c200:	ee07 2a90 	vmov	s15, r2
 801c204:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801c208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c20c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c210:	ee07 1a90 	vmov	s15, r1
 801c214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c218:	ee37 7a66 	vsub.f32	s14, s14, s13
 801c21c:	ee67 5a07 	vmul.f32	s11, s14, s14
 801c220:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c224:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c228:	eee6 7a26 	vfma.f32	s15, s12, s13
 801c22c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c234:	bfcc      	ite	gt
 801c236:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801c23a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801c23e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c242:	ee17 3a90 	vmov	r3, s15
 801c246:	b21c      	sxth	r4, r3
 801c248:	4620      	mov	r0, r4
 801c24a:	bd10      	pop	{r4, pc}

0801c24c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801c24c:	b510      	push	{r4, lr}
 801c24e:	4298      	cmp	r0, r3
 801c250:	eb01 0402 	add.w	r4, r1, r2
 801c254:	b224      	sxth	r4, r4
 801c256:	d226      	bcs.n	801c2a6 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801c258:	b32b      	cbz	r3, 801c2a6 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801c25a:	ee07 2a90 	vmov	s15, r2
 801c25e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c262:	ee07 0a90 	vmov	s15, r0
 801c266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c26a:	ee07 3a90 	vmov	s15, r3
 801c26e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c272:	ee07 1a90 	vmov	s15, r1
 801c276:	ee67 6a26 	vmul.f32	s13, s14, s13
 801c27a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c27e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801c282:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c286:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c28a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c292:	bfcc      	ite	gt
 801c294:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801c298:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801c29c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c2a0:	ee17 3a90 	vmov	r3, s15
 801c2a4:	b21c      	sxth	r4, r3
 801c2a6:	4620      	mov	r0, r4
 801c2a8:	bd10      	pop	{r4, pc}

0801c2aa <_ZN8touchgfx12TextProviderC1Ev>:
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	2201      	movs	r2, #1
 801c2ae:	b510      	push	{r4, lr}
 801c2b0:	4604      	mov	r4, r0
 801c2b2:	60c3      	str	r3, [r0, #12]
 801c2b4:	7403      	strb	r3, [r0, #16]
 801c2b6:	82c3      	strh	r3, [r0, #22]
 801c2b8:	8303      	strh	r3, [r0, #24]
 801c2ba:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801c2bc:	8603      	strh	r3, [r0, #48]	; 0x30
 801c2be:	86c3      	strh	r3, [r0, #54]	; 0x36
 801c2c0:	8703      	strh	r3, [r0, #56]	; 0x38
 801c2c2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c2c4:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c2c8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c2cc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801c2d0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801c2d4:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801c2d8:	e9c0 3300 	strd	r3, r3, [r0]
 801c2dc:	f7f8 f9ae 	bl	801463c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c2e0:	4620      	mov	r0, r4
 801c2e2:	bd10      	pop	{r4, pc}

0801c2e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c2e4:	b530      	push	{r4, r5, lr}
 801c2e6:	2500      	movs	r5, #0
 801c2e8:	2401      	movs	r4, #1
 801c2ea:	6843      	ldr	r3, [r0, #4]
 801c2ec:	b913      	cbnz	r3, 801c2f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c2ee:	6803      	ldr	r3, [r0, #0]
 801c2f0:	b1f3      	cbz	r3, 801c330 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c2f2:	6043      	str	r3, [r0, #4]
 801c2f4:	7c03      	ldrb	r3, [r0, #16]
 801c2f6:	b143      	cbz	r3, 801c30a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c2f8:	68c3      	ldr	r3, [r0, #12]
 801c2fa:	b12b      	cbz	r3, 801c308 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c2fc:	881a      	ldrh	r2, [r3, #0]
 801c2fe:	b11a      	cbz	r2, 801c308 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c300:	1c9a      	adds	r2, r3, #2
 801c302:	60c2      	str	r2, [r0, #12]
 801c304:	8818      	ldrh	r0, [r3, #0]
 801c306:	bd30      	pop	{r4, r5, pc}
 801c308:	7405      	strb	r5, [r0, #16]
 801c30a:	6843      	ldr	r3, [r0, #4]
 801c30c:	8819      	ldrh	r1, [r3, #0]
 801c30e:	b179      	cbz	r1, 801c330 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c310:	1c9a      	adds	r2, r3, #2
 801c312:	2902      	cmp	r1, #2
 801c314:	6042      	str	r2, [r0, #4]
 801c316:	d1f5      	bne.n	801c304 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c318:	6883      	ldr	r3, [r0, #8]
 801c31a:	1d1a      	adds	r2, r3, #4
 801c31c:	6082      	str	r2, [r0, #8]
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	60c3      	str	r3, [r0, #12]
 801c322:	2b00      	cmp	r3, #0
 801c324:	d0e1      	beq.n	801c2ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c326:	881b      	ldrh	r3, [r3, #0]
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d0de      	beq.n	801c2ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c32c:	7404      	strb	r4, [r0, #16]
 801c32e:	e7dc      	b.n	801c2ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c330:	2000      	movs	r0, #0
 801c332:	e7e8      	b.n	801c306 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c334 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801c334:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c336:	2300      	movs	r3, #0
 801c338:	6082      	str	r2, [r0, #8]
 801c33a:	6001      	str	r1, [r0, #0]
 801c33c:	6043      	str	r3, [r0, #4]
 801c33e:	60c3      	str	r3, [r0, #12]
 801c340:	7403      	strb	r3, [r0, #16]
 801c342:	8603      	strh	r3, [r0, #48]	; 0x30
 801c344:	8303      	strh	r3, [r0, #24]
 801c346:	8703      	strh	r3, [r0, #56]	; 0x38
 801c348:	b410      	push	{r4}
 801c34a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c34e:	f7f8 b975 	b.w	801463c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c352 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c352:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c354:	4605      	mov	r5, r0
 801c356:	4608      	mov	r0, r1
 801c358:	b1f1      	cbz	r1, 801c398 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801c35a:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801c35e:	460b      	mov	r3, r1
 801c360:	f101 0708 	add.w	r7, r1, #8
 801c364:	4622      	mov	r2, r4
 801c366:	6818      	ldr	r0, [r3, #0]
 801c368:	3308      	adds	r3, #8
 801c36a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c36e:	4626      	mov	r6, r4
 801c370:	42bb      	cmp	r3, r7
 801c372:	c603      	stmia	r6!, {r0, r1}
 801c374:	4634      	mov	r4, r6
 801c376:	d1f6      	bne.n	801c366 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c378:	6818      	ldr	r0, [r3, #0]
 801c37a:	6030      	str	r0, [r6, #0]
 801c37c:	4610      	mov	r0, r2
 801c37e:	889b      	ldrh	r3, [r3, #4]
 801c380:	80b3      	strh	r3, [r6, #4]
 801c382:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801c386:	015b      	lsls	r3, r3, #5
 801c388:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c38c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801c390:	430b      	orrs	r3, r1
 801c392:	425b      	negs	r3, r3
 801c394:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801c398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c39a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c39a:	b538      	push	{r3, r4, r5, lr}
 801c39c:	460c      	mov	r4, r1
 801c39e:	6811      	ldr	r1, [r2, #0]
 801c3a0:	4610      	mov	r0, r2
 801c3a2:	68cd      	ldr	r5, [r1, #12]
 801c3a4:	4619      	mov	r1, r3
 801c3a6:	47a8      	blx	r5
 801c3a8:	2800      	cmp	r0, #0
 801c3aa:	bf08      	it	eq
 801c3ac:	4620      	moveq	r0, r4
 801c3ae:	bd38      	pop	{r3, r4, r5, pc}

0801c3b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3b2:	4604      	mov	r4, r0
 801c3b4:	4615      	mov	r5, r2
 801c3b6:	4608      	mov	r0, r1
 801c3b8:	b93a      	cbnz	r2, 801c3ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c3ba:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801c3be:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801c3c2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801c3c6:	4628      	mov	r0, r5
 801c3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3ca:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801c3ce:	8893      	ldrh	r3, [r2, #4]
 801c3d0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801c3d4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c3d8:	79ee      	ldrb	r6, [r5, #7]
 801c3da:	4316      	orrs	r6, r2
 801c3dc:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801c3e0:	189a      	adds	r2, r3, r2
 801c3e2:	b2b7      	uxth	r7, r6
 801c3e4:	b291      	uxth	r1, r2
 801c3e6:	291d      	cmp	r1, #29
 801c3e8:	f200 8084 	bhi.w	801c4f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c3ec:	2201      	movs	r2, #1
 801c3ee:	10f6      	asrs	r6, r6, #3
 801c3f0:	408a      	lsls	r2, r1
 801c3f2:	4978      	ldr	r1, [pc, #480]	; (801c5d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801c3f4:	420a      	tst	r2, r1
 801c3f6:	d12e      	bne.n	801c456 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801c3f8:	f412 7f60 	tst.w	r2, #896	; 0x380
 801c3fc:	d07a      	beq.n	801c4f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c3fe:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801c402:	462b      	mov	r3, r5
 801c404:	f105 0e08 	add.w	lr, r5, #8
 801c408:	4615      	mov	r5, r2
 801c40a:	6818      	ldr	r0, [r3, #0]
 801c40c:	3308      	adds	r3, #8
 801c40e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c412:	4694      	mov	ip, r2
 801c414:	4573      	cmp	r3, lr
 801c416:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c41a:	4662      	mov	r2, ip
 801c41c:	d1f5      	bne.n	801c40a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801c41e:	6818      	ldr	r0, [r3, #0]
 801c420:	f8cc 0000 	str.w	r0, [ip]
 801c424:	889b      	ldrh	r3, [r3, #4]
 801c426:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c42a:	b2b3      	uxth	r3, r6
 801c42c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801c430:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801c434:	1aca      	subs	r2, r1, r3
 801c436:	1bcf      	subs	r7, r1, r7
 801c438:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801c43c:	b292      	uxth	r2, r2
 801c43e:	1afb      	subs	r3, r7, r3
 801c440:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801c444:	10d2      	asrs	r2, r2, #3
 801c446:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801c44a:	4302      	orrs	r2, r0
 801c44c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801c450:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801c454:	e7b7      	b.n	801c3c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c456:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c458:	b92b      	cbnz	r3, 801c466 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801c45a:	4b5f      	ldr	r3, [pc, #380]	; (801c5d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801c45c:	21c0      	movs	r1, #192	; 0xc0
 801c45e:	4a5f      	ldr	r2, [pc, #380]	; (801c5dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801c460:	485f      	ldr	r0, [pc, #380]	; (801c5e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801c462:	f00d f937 	bl	80296d4 <__assert_func>
 801c466:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801c468:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c46c:	8b59      	ldrh	r1, [r3, #26]
 801c46e:	f640 6333 	movw	r3, #3635	; 0xe33
 801c472:	4299      	cmp	r1, r3
 801c474:	d110      	bne.n	801c498 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801c476:	6803      	ldr	r3, [r0, #0]
 801c478:	68db      	ldr	r3, [r3, #12]
 801c47a:	4798      	blx	r3
 801c47c:	7b41      	ldrb	r1, [r0, #13]
 801c47e:	00cb      	lsls	r3, r1, #3
 801c480:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c484:	7a03      	ldrb	r3, [r0, #8]
 801c486:	0648      	lsls	r0, r1, #25
 801c488:	ea43 0302 	orr.w	r3, r3, r2
 801c48c:	bf44      	itt	mi
 801c48e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c492:	b21b      	sxthmi	r3, r3
 801c494:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c498:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801c49c:	462a      	mov	r2, r5
 801c49e:	f105 0c08 	add.w	ip, r5, #8
 801c4a2:	443b      	add	r3, r7
 801c4a4:	4433      	add	r3, r6
 801c4a6:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801c4aa:	b29b      	uxth	r3, r3
 801c4ac:	4635      	mov	r5, r6
 801c4ae:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c4b2:	6810      	ldr	r0, [r2, #0]
 801c4b4:	3208      	adds	r2, #8
 801c4b6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801c4ba:	4637      	mov	r7, r6
 801c4bc:	4562      	cmp	r2, ip
 801c4be:	c703      	stmia	r7!, {r0, r1}
 801c4c0:	463e      	mov	r6, r7
 801c4c2:	d1f6      	bne.n	801c4b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801c4c4:	6810      	ldr	r0, [r2, #0]
 801c4c6:	6038      	str	r0, [r7, #0]
 801c4c8:	8892      	ldrh	r2, [r2, #4]
 801c4ca:	80ba      	strh	r2, [r7, #4]
 801c4cc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c4d0:	10db      	asrs	r3, r3, #3
 801c4d2:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c4d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c4da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c4de:	4313      	orrs	r3, r2
 801c4e0:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801c4e4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c4e8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801c4ec:	1a9b      	subs	r3, r3, r2
 801c4ee:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801c4f2:	e768      	b.n	801c3c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c4f4:	f023 0204 	bic.w	r2, r3, #4
 801c4f8:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c4fc:	428a      	cmp	r2, r1
 801c4fe:	d003      	beq.n	801c508 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801c500:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c504:	4293      	cmp	r3, r2
 801c506:	d120      	bne.n	801c54a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801c508:	3b01      	subs	r3, #1
 801c50a:	4602      	mov	r2, r0
 801c50c:	4629      	mov	r1, r5
 801c50e:	4620      	mov	r0, r4
 801c510:	b29b      	uxth	r3, r3
 801c512:	f7ff ff42 	bl	801c39a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c516:	7b41      	ldrb	r1, [r0, #13]
 801c518:	00cb      	lsls	r3, r1, #3
 801c51a:	0649      	lsls	r1, r1, #25
 801c51c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c520:	7a03      	ldrb	r3, [r0, #8]
 801c522:	ea43 0302 	orr.w	r3, r3, r2
 801c526:	bf44      	itt	mi
 801c528:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c52c:	b21b      	sxthmi	r3, r3
 801c52e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c532:	7b6b      	ldrb	r3, [r5, #13]
 801c534:	7aaa      	ldrb	r2, [r5, #10]
 801c536:	005b      	lsls	r3, r3, #1
 801c538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c53c:	4313      	orrs	r3, r2
 801c53e:	115a      	asrs	r2, r3, #5
 801c540:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c544:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c548:	e035      	b.n	801c5b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801c54a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c54e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c552:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c556:	7a2a      	ldrb	r2, [r5, #8]
 801c558:	ea42 0201 	orr.w	r2, r2, r1
 801c55c:	f640 6109 	movw	r1, #3593	; 0xe09
 801c560:	bf1c      	itt	ne
 801c562:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c566:	b212      	sxthne	r2, r2
 801c568:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801c56c:	f023 0210 	bic.w	r2, r3, #16
 801c570:	428a      	cmp	r2, r1
 801c572:	d003      	beq.n	801c57c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801c574:	f640 6213 	movw	r2, #3603	; 0xe13
 801c578:	4293      	cmp	r3, r2
 801c57a:	d129      	bne.n	801c5d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801c57c:	7b6e      	ldrb	r6, [r5, #13]
 801c57e:	4629      	mov	r1, r5
 801c580:	0076      	lsls	r6, r6, #1
 801c582:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c586:	7aae      	ldrb	r6, [r5, #10]
 801c588:	4316      	orrs	r6, r2
 801c58a:	f640 6213 	movw	r2, #3603	; 0xe13
 801c58e:	4293      	cmp	r3, r2
 801c590:	4602      	mov	r2, r0
 801c592:	4620      	mov	r0, r4
 801c594:	bf16      	itet	ne
 801c596:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c59a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c59e:	b29b      	uxthne	r3, r3
 801c5a0:	f7ff fefb 	bl	801c39a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c5a4:	7b43      	ldrb	r3, [r0, #13]
 801c5a6:	7a82      	ldrb	r2, [r0, #10]
 801c5a8:	005b      	lsls	r3, r3, #1
 801c5aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c5ae:	4313      	orrs	r3, r2
 801c5b0:	1af6      	subs	r6, r6, r3
 801c5b2:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801c5b6:	7b69      	ldrb	r1, [r5, #13]
 801c5b8:	00cb      	lsls	r3, r1, #3
 801c5ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c5be:	7a2b      	ldrb	r3, [r5, #8]
 801c5c0:	4313      	orrs	r3, r2
 801c5c2:	064a      	lsls	r2, r1, #25
 801c5c4:	bf44      	itt	mi
 801c5c6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c5ca:	b21b      	sxthmi	r3, r3
 801c5cc:	1bdb      	subs	r3, r3, r7
 801c5ce:	e73f      	b.n	801c450 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	e7b7      	b.n	801c544 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801c5d4:	3fc00079 	.word	0x3fc00079
 801c5d8:	0802d6b4 	.word	0x0802d6b4
 801c5dc:	0802d926 	.word	0x0802d926
 801c5e0:	0802d6bd 	.word	0x0802d6bd

0801c5e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c5e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c5e8:	4604      	mov	r4, r0
 801c5ea:	b942      	cbnz	r2, 801c5fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c5ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c5f0:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c5f4:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c5f8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c5fc:	e046      	b.n	801c68c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c5fe:	7b51      	ldrb	r1, [r2, #13]
 801c600:	8893      	ldrh	r3, [r2, #4]
 801c602:	010f      	lsls	r7, r1, #4
 801c604:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c608:	79d7      	ldrb	r7, [r2, #7]
 801c60a:	4307      	orrs	r7, r0
 801c60c:	2f04      	cmp	r7, #4
 801c60e:	b2bd      	uxth	r5, r7
 801c610:	bfcc      	ite	gt
 801c612:	08bf      	lsrgt	r7, r7, #2
 801c614:	2701      	movle	r7, #1
 801c616:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c61a:	f200 80ab 	bhi.w	801c774 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801c61e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c622:	4283      	cmp	r3, r0
 801c624:	d216      	bcs.n	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c626:	f240 605b 	movw	r0, #1627	; 0x65b
 801c62a:	4283      	cmp	r3, r0
 801c62c:	d859      	bhi.n	801c6e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801c62e:	f240 6057 	movw	r0, #1623	; 0x657
 801c632:	4283      	cmp	r3, r0
 801c634:	d20e      	bcs.n	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c636:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c63a:	d24a      	bcs.n	801c6d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801c63c:	f240 604e 	movw	r0, #1614	; 0x64e
 801c640:	4283      	cmp	r3, r0
 801c642:	d207      	bcs.n	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c644:	f240 601a 	movw	r0, #1562	; 0x61a
 801c648:	4283      	cmp	r3, r0
 801c64a:	d02a      	beq.n	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c64c:	d821      	bhi.n	801c692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801c64e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c652:	d35b      	bcc.n	801c70c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c654:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801c658:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c65c:	f040 80d0 	bne.w	801c800 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c660:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801c664:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c668:	f040 80ca 	bne.w	801c800 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c66c:	00cb      	lsls	r3, r1, #3
 801c66e:	0649      	lsls	r1, r1, #25
 801c670:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c674:	7a13      	ldrb	r3, [r2, #8]
 801c676:	ea43 0300 	orr.w	r3, r3, r0
 801c67a:	bf44      	itt	mi
 801c67c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c680:	b21b      	sxthmi	r3, r3
 801c682:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c686:	1b5d      	subs	r5, r3, r5
 801c688:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c68c:	4610      	mov	r0, r2
 801c68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c692:	f240 604b 	movw	r0, #1611	; 0x64b
 801c696:	4283      	cmp	r3, r0
 801c698:	d338      	bcc.n	801c70c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c69a:	f240 604c 	movw	r0, #1612	; 0x64c
 801c69e:	4283      	cmp	r3, r0
 801c6a0:	d9d8      	bls.n	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c6a2:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801c6a6:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801c6aa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c6ae:	f040 80f2 	bne.w	801c896 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c6b2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c6b6:	f040 80ee 	bne.w	801c896 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c6ba:	00cb      	lsls	r3, r1, #3
 801c6bc:	064e      	lsls	r6, r1, #25
 801c6be:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c6c2:	7a13      	ldrb	r3, [r2, #8]
 801c6c4:	ea43 0300 	orr.w	r3, r3, r0
 801c6c8:	bf44      	itt	mi
 801c6ca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c6ce:	b21b      	sxthmi	r3, r3
 801c6d0:	e7d9      	b.n	801c686 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801c6d2:	f240 6054 	movw	r0, #1620	; 0x654
 801c6d6:	4283      	cmp	r3, r0
 801c6d8:	d8e3      	bhi.n	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c6da:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c6de:	d9e0      	bls.n	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c6e0:	e7b8      	b.n	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c6e2:	f240 6074 	movw	r0, #1652	; 0x674
 801c6e6:	4283      	cmp	r3, r0
 801c6e8:	d0b4      	beq.n	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c6ea:	d82d      	bhi.n	801c748 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801c6ec:	f240 605e 	movw	r0, #1630	; 0x65e
 801c6f0:	4283      	cmp	r3, r0
 801c6f2:	d804      	bhi.n	801c6fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801c6f4:	f240 605d 	movw	r0, #1629	; 0x65d
 801c6f8:	4283      	cmp	r3, r0
 801c6fa:	d3d2      	bcc.n	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c6fc:	e7aa      	b.n	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c6fe:	f240 605f 	movw	r0, #1631	; 0x65f
 801c702:	4283      	cmp	r3, r0
 801c704:	d0cd      	beq.n	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c706:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801c70a:	d0a3      	beq.n	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c70c:	00cb      	lsls	r3, r1, #3
 801c70e:	0649      	lsls	r1, r1, #25
 801c710:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c714:	7a13      	ldrb	r3, [r2, #8]
 801c716:	ea43 0300 	orr.w	r3, r3, r0
 801c71a:	bf44      	itt	mi
 801c71c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c720:	b21b      	sxthmi	r3, r3
 801c722:	1b5d      	subs	r5, r3, r5
 801c724:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c728:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c72c:	7b53      	ldrb	r3, [r2, #13]
 801c72e:	015b      	lsls	r3, r3, #5
 801c730:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c734:	7993      	ldrb	r3, [r2, #6]
 801c736:	430b      	orrs	r3, r1
 801c738:	2105      	movs	r1, #5
 801c73a:	005b      	lsls	r3, r3, #1
 801c73c:	fb93 f3f1 	sdiv	r3, r3, r1
 801c740:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c744:	440b      	add	r3, r1
 801c746:	e757      	b.n	801c5f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c748:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801c74c:	4283      	cmp	r3, r0
 801c74e:	d809      	bhi.n	801c764 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801c750:	f240 60df 	movw	r0, #1759	; 0x6df
 801c754:	4283      	cmp	r3, r0
 801c756:	f4bf af7d 	bcs.w	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c75a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801c75e:	2b05      	cmp	r3, #5
 801c760:	d8d4      	bhi.n	801c70c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c762:	e777      	b.n	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c764:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801c768:	4283      	cmp	r3, r0
 801c76a:	d09a      	beq.n	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c76c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801c770:	4283      	cmp	r3, r0
 801c772:	e7ca      	b.n	801c70a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801c774:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801c778:	d22b      	bcs.n	801c7d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801c77a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801c77e:	4283      	cmp	r3, r0
 801c780:	d28f      	bcs.n	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c782:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c786:	4283      	cmp	r3, r0
 801c788:	d816      	bhi.n	801c7b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801c78a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801c78e:	4283      	cmp	r3, r0
 801c790:	f4bf af60 	bcs.w	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c794:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801c798:	4283      	cmp	r3, r0
 801c79a:	d80a      	bhi.n	801c7b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801c79c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801c7a0:	4283      	cmp	r3, r0
 801c7a2:	f4bf af57 	bcs.w	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c7a6:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801c7aa:	4283      	cmp	r3, r0
 801c7ac:	f43f af79 	beq.w	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c7b0:	e7ac      	b.n	801c70c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c7b2:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801c7b6:	e7f8      	b.n	801c7aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801c7b8:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801c7bc:	4283      	cmp	r3, r0
 801c7be:	d802      	bhi.n	801c7c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801c7c0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c7c4:	e798      	b.n	801c6f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801c7c6:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801c7ca:	4283      	cmp	r3, r0
 801c7cc:	f47f af42 	bne.w	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c7d0:	e767      	b.n	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c7d2:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801c7d6:	4283      	cmp	r3, r0
 801c7d8:	f43f af63 	beq.w	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c7dc:	d802      	bhi.n	801c7e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801c7de:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801c7e2:	e7f2      	b.n	801c7ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801c7e4:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801c7e8:	4283      	cmp	r3, r0
 801c7ea:	d805      	bhi.n	801c7f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801c7ec:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801c7f0:	4283      	cmp	r3, r0
 801c7f2:	f4ff af2f 	bcc.w	801c654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c7f6:	e754      	b.n	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c7f8:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801c7fc:	4283      	cmp	r3, r0
 801c7fe:	e7af      	b.n	801c760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801c800:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801c804:	4617      	mov	r7, r2
 801c806:	f102 0808 	add.w	r8, r2, #8
 801c80a:	4666      	mov	r6, ip
 801c80c:	6838      	ldr	r0, [r7, #0]
 801c80e:	3708      	adds	r7, #8
 801c810:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c814:	46e6      	mov	lr, ip
 801c816:	4547      	cmp	r7, r8
 801c818:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c81c:	46f4      	mov	ip, lr
 801c81e:	d1f5      	bne.n	801c80c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801c820:	6838      	ldr	r0, [r7, #0]
 801c822:	f8ce 0000 	str.w	r0, [lr]
 801c826:	88b9      	ldrh	r1, [r7, #4]
 801c828:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c82c:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c830:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c834:	d009      	beq.n	801c84a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801c836:	7b51      	ldrb	r1, [r2, #13]
 801c838:	7992      	ldrb	r2, [r2, #6]
 801c83a:	0149      	lsls	r1, r1, #5
 801c83c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c840:	4311      	orrs	r1, r2
 801c842:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c846:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c84a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c84e:	d00d      	beq.n	801c86c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801c850:	442b      	add	r3, r5
 801c852:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c856:	b29b      	uxth	r3, r3
 801c858:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c85c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c860:	10db      	asrs	r3, r3, #3
 801c862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c866:	4313      	orrs	r3, r2
 801c868:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c86c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c870:	00cb      	lsls	r3, r1, #3
 801c872:	064f      	lsls	r7, r1, #25
 801c874:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c878:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c87c:	ea43 0302 	orr.w	r3, r3, r2
 801c880:	bf44      	itt	mi
 801c882:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c886:	b21b      	sxthmi	r3, r3
 801c888:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c88c:	1b5d      	subs	r5, r3, r5
 801c88e:	4632      	mov	r2, r6
 801c890:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c894:	e6fa      	b.n	801c68c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c896:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801c89a:	4694      	mov	ip, r2
 801c89c:	f102 0908 	add.w	r9, r2, #8
 801c8a0:	4676      	mov	r6, lr
 801c8a2:	f8dc 0000 	ldr.w	r0, [ip]
 801c8a6:	f10c 0c08 	add.w	ip, ip, #8
 801c8aa:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801c8ae:	46f0      	mov	r8, lr
 801c8b0:	45cc      	cmp	ip, r9
 801c8b2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c8b6:	46c6      	mov	lr, r8
 801c8b8:	d1f3      	bne.n	801c8a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801c8ba:	f8dc 0000 	ldr.w	r0, [ip]
 801c8be:	f8c8 0000 	str.w	r0, [r8]
 801c8c2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801c8c6:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c8ca:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c8ce:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c8d2:	d009      	beq.n	801c8e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801c8d4:	7b51      	ldrb	r1, [r2, #13]
 801c8d6:	7992      	ldrb	r2, [r2, #6]
 801c8d8:	0149      	lsls	r1, r1, #5
 801c8da:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c8de:	4311      	orrs	r1, r2
 801c8e0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c8e4:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c8e8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c8ec:	d00d      	beq.n	801c90a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801c8ee:	1bdb      	subs	r3, r3, r7
 801c8f0:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c8f4:	b29b      	uxth	r3, r3
 801c8f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c8fa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c8fe:	10db      	asrs	r3, r3, #3
 801c900:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c904:	4313      	orrs	r3, r2
 801c906:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c90a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c90e:	00cb      	lsls	r3, r1, #3
 801c910:	0648      	lsls	r0, r1, #25
 801c912:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c916:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c91a:	ea43 0302 	orr.w	r3, r3, r2
 801c91e:	bf44      	itt	mi
 801c920:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c924:	b21b      	sxthmi	r3, r3
 801c926:	e7b1      	b.n	801c88c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801c928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c92c:	461e      	mov	r6, r3
 801c92e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c930:	4604      	mov	r4, r0
 801c932:	4617      	mov	r7, r2
 801c934:	b92b      	cbnz	r3, 801c942 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801c936:	4b25      	ldr	r3, [pc, #148]	; (801c9cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801c938:	21c0      	movs	r1, #192	; 0xc0
 801c93a:	4a25      	ldr	r2, [pc, #148]	; (801c9d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801c93c:	4825      	ldr	r0, [pc, #148]	; (801c9d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801c93e:	f00c fec9 	bl	80296d4 <__assert_func>
 801c942:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c944:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c948:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c94c:	f7f7 fdd0 	bl	80144f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c950:	4605      	mov	r5, r0
 801c952:	b918      	cbnz	r0, 801c95c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801c954:	6030      	str	r0, [r6, #0]
 801c956:	4628      	mov	r0, r5
 801c958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c95c:	683b      	ldr	r3, [r7, #0]
 801c95e:	4601      	mov	r1, r0
 801c960:	4638      	mov	r0, r7
 801c962:	68db      	ldr	r3, [r3, #12]
 801c964:	4798      	blx	r3
 801c966:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c96a:	4602      	mov	r2, r0
 801c96c:	6030      	str	r0, [r6, #0]
 801c96e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c972:	d213      	bcs.n	801c99c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801c974:	4643      	mov	r3, r8
 801c976:	4639      	mov	r1, r7
 801c978:	4620      	mov	r0, r4
 801c97a:	f7ff fe33 	bl	801c5e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c97e:	6030      	str	r0, [r6, #0]
 801c980:	6833      	ldr	r3, [r6, #0]
 801c982:	b143      	cbz	r3, 801c996 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801c984:	7b5a      	ldrb	r2, [r3, #13]
 801c986:	7a9b      	ldrb	r3, [r3, #10]
 801c988:	0052      	lsls	r2, r2, #1
 801c98a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c98e:	4313      	orrs	r3, r2
 801c990:	bf0c      	ite	eq
 801c992:	2301      	moveq	r3, #1
 801c994:	2300      	movne	r3, #0
 801c996:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c99a:	e7dc      	b.n	801c956 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801c99c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c9a0:	b29b      	uxth	r3, r3
 801c9a2:	2b7f      	cmp	r3, #127	; 0x7f
 801c9a4:	d804      	bhi.n	801c9b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801c9a6:	4639      	mov	r1, r7
 801c9a8:	4620      	mov	r0, r4
 801c9aa:	f7ff fd01 	bl	801c3b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c9ae:	e7e6      	b.n	801c97e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c9b0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d0e3      	beq.n	801c980 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c9b8:	f640 1302 	movw	r3, #2306	; 0x902
 801c9bc:	429d      	cmp	r5, r3
 801c9be:	d1df      	bne.n	801c980 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c9c0:	4601      	mov	r1, r0
 801c9c2:	4620      	mov	r0, r4
 801c9c4:	f7ff fcc5 	bl	801c352 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c9c8:	e7d9      	b.n	801c97e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c9ca:	bf00      	nop
 801c9cc:	0802d6b4 	.word	0x0802d6b4
 801c9d0:	0802d926 	.word	0x0802d926
 801c9d4:	0802d6bd 	.word	0x0802d6bd

0801c9d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c9dc:	461e      	mov	r6, r3
 801c9de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c9e0:	4604      	mov	r4, r0
 801c9e2:	4617      	mov	r7, r2
 801c9e4:	b92b      	cbnz	r3, 801c9f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801c9e6:	4b26      	ldr	r3, [pc, #152]	; (801ca80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801c9e8:	21c0      	movs	r1, #192	; 0xc0
 801c9ea:	4a26      	ldr	r2, [pc, #152]	; (801ca84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801c9ec:	4826      	ldr	r0, [pc, #152]	; (801ca88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801c9ee:	f00c fe71 	bl	80296d4 <__assert_func>
 801c9f2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c9f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c9f8:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c9fc:	f7f7 fd78 	bl	80144f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ca00:	4605      	mov	r5, r0
 801ca02:	b918      	cbnz	r0, 801ca0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801ca04:	6030      	str	r0, [r6, #0]
 801ca06:	4628      	mov	r0, r5
 801ca08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca0c:	683b      	ldr	r3, [r7, #0]
 801ca0e:	4601      	mov	r1, r0
 801ca10:	4638      	mov	r0, r7
 801ca12:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ca16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ca1a:	47c8      	blx	r9
 801ca1c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ca20:	4602      	mov	r2, r0
 801ca22:	6030      	str	r0, [r6, #0]
 801ca24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ca28:	d213      	bcs.n	801ca52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801ca2a:	4643      	mov	r3, r8
 801ca2c:	4639      	mov	r1, r7
 801ca2e:	4620      	mov	r0, r4
 801ca30:	f7ff fdd8 	bl	801c5e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ca34:	6030      	str	r0, [r6, #0]
 801ca36:	6833      	ldr	r3, [r6, #0]
 801ca38:	b143      	cbz	r3, 801ca4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ca3a:	7b5a      	ldrb	r2, [r3, #13]
 801ca3c:	7a9b      	ldrb	r3, [r3, #10]
 801ca3e:	0052      	lsls	r2, r2, #1
 801ca40:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ca44:	4313      	orrs	r3, r2
 801ca46:	bf0c      	ite	eq
 801ca48:	2301      	moveq	r3, #1
 801ca4a:	2300      	movne	r3, #0
 801ca4c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801ca50:	e7d9      	b.n	801ca06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801ca52:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ca56:	b29b      	uxth	r3, r3
 801ca58:	2b7f      	cmp	r3, #127	; 0x7f
 801ca5a:	d804      	bhi.n	801ca66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801ca5c:	4639      	mov	r1, r7
 801ca5e:	4620      	mov	r0, r4
 801ca60:	f7ff fca6 	bl	801c3b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ca64:	e7e6      	b.n	801ca34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801ca66:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d0e3      	beq.n	801ca36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801ca6e:	f640 1302 	movw	r3, #2306	; 0x902
 801ca72:	429d      	cmp	r5, r3
 801ca74:	d1df      	bne.n	801ca36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801ca76:	4601      	mov	r1, r0
 801ca78:	4620      	mov	r0, r4
 801ca7a:	f7ff fc6a 	bl	801c352 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ca7e:	e7d9      	b.n	801ca34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801ca80:	0802d6b4 	.word	0x0802d6b4
 801ca84:	0802d926 	.word	0x0802d926
 801ca88:	0802d6bd 	.word	0x0802d6bd

0801ca8c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ca8c:	b510      	push	{r4, lr}
 801ca8e:	4604      	mov	r4, r0
 801ca90:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801ca92:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ca94:	b9d9      	cbnz	r1, 801cace <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801ca96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ca98:	2b0a      	cmp	r3, #10
 801ca9a:	d036      	beq.n	801cb0a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801ca9c:	4620      	mov	r0, r4
 801ca9e:	f7ff fc21 	bl	801c2e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801caa2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801caa4:	2b09      	cmp	r3, #9
 801caa6:	d906      	bls.n	801cab6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801caa8:	4b18      	ldr	r3, [pc, #96]	; (801cb0c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801caaa:	f44f 7182 	mov.w	r1, #260	; 0x104
 801caae:	4a18      	ldr	r2, [pc, #96]	; (801cb10 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801cab0:	4818      	ldr	r0, [pc, #96]	; (801cb14 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801cab2:	f00c fe0f 	bl	80296d4 <__assert_func>
 801cab6:	1c5a      	adds	r2, r3, #1
 801cab8:	8622      	strh	r2, [r4, #48]	; 0x30
 801caba:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801cabc:	4413      	add	r3, r2
 801cabe:	b29b      	uxth	r3, r3
 801cac0:	2b09      	cmp	r3, #9
 801cac2:	bf88      	it	hi
 801cac4:	3b0a      	subhi	r3, #10
 801cac6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801caca:	8358      	strh	r0, [r3, #26]
 801cacc:	e7e3      	b.n	801ca96 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801cace:	2b0a      	cmp	r3, #10
 801cad0:	d01b      	beq.n	801cb0a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801cad2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cad4:	3901      	subs	r1, #1
 801cad6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801cada:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801cadc:	8721      	strh	r1, [r4, #56]	; 0x38
 801cade:	1c51      	adds	r1, r2, #1
 801cae0:	b289      	uxth	r1, r1
 801cae2:	2901      	cmp	r1, #1
 801cae4:	bf8a      	itet	hi
 801cae6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801caea:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801caec:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801caee:	2b09      	cmp	r3, #9
 801caf0:	d8da      	bhi.n	801caa8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801caf2:	1c5a      	adds	r2, r3, #1
 801caf4:	8622      	strh	r2, [r4, #48]	; 0x30
 801caf6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801caf8:	4413      	add	r3, r2
 801cafa:	b29b      	uxth	r3, r3
 801cafc:	2b09      	cmp	r3, #9
 801cafe:	bf88      	it	hi
 801cb00:	3b0a      	subhi	r3, #10
 801cb02:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cb06:	8358      	strh	r0, [r3, #26]
 801cb08:	e7c2      	b.n	801ca90 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801cb0a:	bd10      	pop	{r4, pc}
 801cb0c:	0802d6e9 	.word	0x0802d6e9
 801cb10:	0802da7c 	.word	0x0802da7c
 801cb14:	0802d6bd 	.word	0x0802d6bd

0801cb18 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801cb18:	b538      	push	{r3, r4, r5, lr}
 801cb1a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801cb1c:	4604      	mov	r4, r0
 801cb1e:	b92a      	cbnz	r2, 801cb2c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801cb20:	4b13      	ldr	r3, [pc, #76]	; (801cb70 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801cb22:	21d5      	movs	r1, #213	; 0xd5
 801cb24:	4a13      	ldr	r2, [pc, #76]	; (801cb74 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801cb26:	4814      	ldr	r0, [pc, #80]	; (801cb78 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801cb28:	f00c fdd4 	bl	80296d4 <__assert_func>
 801cb2c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801cb2e:	3a01      	subs	r2, #1
 801cb30:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801cb34:	8b4d      	ldrh	r5, [r1, #26]
 801cb36:	8602      	strh	r2, [r0, #48]	; 0x30
 801cb38:	1c5a      	adds	r2, r3, #1
 801cb3a:	b292      	uxth	r2, r2
 801cb3c:	2a09      	cmp	r2, #9
 801cb3e:	bf8a      	itet	hi
 801cb40:	3b09      	subhi	r3, #9
 801cb42:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801cb44:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801cb46:	f7ff ffa1 	bl	801ca8c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801cb4a:	8b23      	ldrh	r3, [r4, #24]
 801cb4c:	2b01      	cmp	r3, #1
 801cb4e:	bf9c      	itt	ls
 801cb50:	3301      	addls	r3, #1
 801cb52:	8323      	strhls	r3, [r4, #24]
 801cb54:	8ae3      	ldrh	r3, [r4, #22]
 801cb56:	b90b      	cbnz	r3, 801cb5c <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801cb58:	2302      	movs	r3, #2
 801cb5a:	82e3      	strh	r3, [r4, #22]
 801cb5c:	8ae3      	ldrh	r3, [r4, #22]
 801cb5e:	4628      	mov	r0, r5
 801cb60:	3b01      	subs	r3, #1
 801cb62:	b29b      	uxth	r3, r3
 801cb64:	82e3      	strh	r3, [r4, #22]
 801cb66:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cb6a:	8265      	strh	r5, [r4, #18]
 801cb6c:	bd38      	pop	{r3, r4, r5, pc}
 801cb6e:	bf00      	nop
 801cb70:	0802d6b4 	.word	0x0802d6b4
 801cb74:	0802d9d1 	.word	0x0802d9d1
 801cb78:	0802d6bd 	.word	0x0802d6bd

0801cb7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801cb7c:	428a      	cmp	r2, r1
 801cb7e:	b538      	push	{r3, r4, r5, lr}
 801cb80:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801cb82:	d90c      	bls.n	801cb9e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801cb84:	b92c      	cbnz	r4, 801cb92 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801cb86:	4b1c      	ldr	r3, [pc, #112]	; (801cbf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801cb88:	21e1      	movs	r1, #225	; 0xe1
 801cb8a:	4a1c      	ldr	r2, [pc, #112]	; (801cbfc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801cb8c:	481c      	ldr	r0, [pc, #112]	; (801cc00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801cb8e:	f00c fda1 	bl	80296d4 <__assert_func>
 801cb92:	3c01      	subs	r4, #1
 801cb94:	4b1b      	ldr	r3, [pc, #108]	; (801cc04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801cb96:	4a1c      	ldr	r2, [pc, #112]	; (801cc08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801cb98:	21c5      	movs	r1, #197	; 0xc5
 801cb9a:	8604      	strh	r4, [r0, #48]	; 0x30
 801cb9c:	e7f6      	b.n	801cb8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801cb9e:	428c      	cmp	r4, r1
 801cba0:	d203      	bcs.n	801cbaa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801cba2:	4b1a      	ldr	r3, [pc, #104]	; (801cc0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801cba4:	21cb      	movs	r1, #203	; 0xcb
 801cba6:	4a1a      	ldr	r2, [pc, #104]	; (801cc10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801cba8:	e7f0      	b.n	801cb8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801cbaa:	1a64      	subs	r4, r4, r1
 801cbac:	250a      	movs	r5, #10
 801cbae:	8604      	strh	r4, [r0, #48]	; 0x30
 801cbb0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801cbb2:	4421      	add	r1, r4
 801cbb4:	b289      	uxth	r1, r1
 801cbb6:	2909      	cmp	r1, #9
 801cbb8:	bf88      	it	hi
 801cbba:	390a      	subhi	r1, #10
 801cbbc:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801cbbe:	b1ba      	cbz	r2, 801cbf0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801cbc0:	3a01      	subs	r2, #1
 801cbc2:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801cbc4:	b292      	uxth	r2, r2
 801cbc6:	2909      	cmp	r1, #9
 801cbc8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801cbcc:	d903      	bls.n	801cbd6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801cbce:	4b11      	ldr	r3, [pc, #68]	; (801cc14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801cbd0:	21e6      	movs	r1, #230	; 0xe6
 801cbd2:	4a11      	ldr	r2, [pc, #68]	; (801cc18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801cbd4:	e7da      	b.n	801cb8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801cbd6:	3101      	adds	r1, #1
 801cbd8:	8601      	strh	r1, [r0, #48]	; 0x30
 801cbda:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801cbdc:	b901      	cbnz	r1, 801cbe0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801cbde:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801cbe0:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801cbe2:	3901      	subs	r1, #1
 801cbe4:	b289      	uxth	r1, r1
 801cbe6:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801cbe8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801cbec:	834c      	strh	r4, [r1, #26]
 801cbee:	e7e6      	b.n	801cbbe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801cbf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cbf4:	f7ff bf4a 	b.w	801ca8c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801cbf8:	0802d6b4 	.word	0x0802d6b4
 801cbfc:	0802d7aa 	.word	0x0802d7aa
 801cc00:	0802d6bd 	.word	0x0802d6bd
 801cc04:	0802d6f5 	.word	0x0802d6f5
 801cc08:	0802d854 	.word	0x0802d854
 801cc0c:	0802d703 	.word	0x0802d703
 801cc10:	0802db2b 	.word	0x0802db2b
 801cc14:	0802d70f 	.word	0x0802d70f
 801cc18:	0802d722 	.word	0x0802d722

0801cc1c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801cc1c:	3a01      	subs	r2, #1
 801cc1e:	b570      	push	{r4, r5, r6, lr}
 801cc20:	b292      	uxth	r2, r2
 801cc22:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801cc26:	42b2      	cmp	r2, r6
 801cc28:	d019      	beq.n	801cc5e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801cc2a:	8b04      	ldrh	r4, [r0, #24]
 801cc2c:	f831 5b02 	ldrh.w	r5, [r1], #2
 801cc30:	4294      	cmp	r4, r2
 801cc32:	d805      	bhi.n	801cc40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801cc34:	4b19      	ldr	r3, [pc, #100]	; (801cc9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801cc36:	4a1a      	ldr	r2, [pc, #104]	; (801cca0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801cc38:	21c5      	movs	r1, #197	; 0xc5
 801cc3a:	481a      	ldr	r0, [pc, #104]	; (801cca4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801cc3c:	f00c fd4a 	bl	80296d4 <__assert_func>
 801cc40:	8ac4      	ldrh	r4, [r0, #22]
 801cc42:	4414      	add	r4, r2
 801cc44:	3a01      	subs	r2, #1
 801cc46:	b2a4      	uxth	r4, r4
 801cc48:	b292      	uxth	r2, r2
 801cc4a:	2c01      	cmp	r4, #1
 801cc4c:	bf88      	it	hi
 801cc4e:	3c02      	subhi	r4, #2
 801cc50:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cc54:	8a64      	ldrh	r4, [r4, #18]
 801cc56:	42ac      	cmp	r4, r5
 801cc58:	d0e5      	beq.n	801cc26 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801cc5a:	2000      	movs	r0, #0
 801cc5c:	bd70      	pop	{r4, r5, r6, pc}
 801cc5e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cc62:	2400      	movs	r4, #0
 801cc64:	4413      	add	r3, r2
 801cc66:	b2a2      	uxth	r2, r4
 801cc68:	429a      	cmp	r2, r3
 801cc6a:	da14      	bge.n	801cc96 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801cc6c:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801cc6e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801cc72:	4296      	cmp	r6, r2
 801cc74:	d802      	bhi.n	801cc7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801cc76:	4b09      	ldr	r3, [pc, #36]	; (801cc9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801cc78:	4a0b      	ldr	r2, [pc, #44]	; (801cca8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801cc7a:	e7dd      	b.n	801cc38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801cc7c:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801cc7e:	3401      	adds	r4, #1
 801cc80:	4432      	add	r2, r6
 801cc82:	b292      	uxth	r2, r2
 801cc84:	2a09      	cmp	r2, #9
 801cc86:	bf88      	it	hi
 801cc88:	3a0a      	subhi	r2, #10
 801cc8a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cc8e:	8b52      	ldrh	r2, [r2, #26]
 801cc90:	42aa      	cmp	r2, r5
 801cc92:	d0e8      	beq.n	801cc66 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801cc94:	e7e1      	b.n	801cc5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801cc96:	2001      	movs	r0, #1
 801cc98:	e7e0      	b.n	801cc5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801cc9a:	bf00      	nop
 801cc9c:	0802d6f5 	.word	0x0802d6f5
 801cca0:	0802dbaf 	.word	0x0802dbaf
 801cca4:	0802d6bd 	.word	0x0802d6bd
 801cca8:	0802d854 	.word	0x0802d854

0801ccac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ccac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccb0:	4605      	mov	r5, r0
 801ccb2:	4616      	mov	r6, r2
 801ccb4:	1c8c      	adds	r4, r1, #2
 801ccb6:	8809      	ldrh	r1, [r1, #0]
 801ccb8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ccbc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ccc0:	42b3      	cmp	r3, r6
 801ccc2:	d124      	bne.n	801cd0e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ccc4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ccc8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801cccc:	f001 070f 	and.w	r7, r1, #15
 801ccd0:	4652      	mov	r2, sl
 801ccd2:	f8cd 8000 	str.w	r8, [sp]
 801ccd6:	464b      	mov	r3, r9
 801ccd8:	4621      	mov	r1, r4
 801ccda:	4628      	mov	r0, r5
 801ccdc:	f7ff ff9e 	bl	801cc1c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801cce0:	4683      	mov	fp, r0
 801cce2:	b168      	cbz	r0, 801cd00 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801cce4:	eb0a 0109 	add.w	r1, sl, r9
 801cce8:	463a      	mov	r2, r7
 801ccea:	4628      	mov	r0, r5
 801ccec:	4441      	add	r1, r8
 801ccee:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ccf2:	4649      	mov	r1, r9
 801ccf4:	f7ff ff42 	bl	801cb7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ccf8:	4658      	mov	r0, fp
 801ccfa:	b003      	add	sp, #12
 801ccfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd00:	eb07 010a 	add.w	r1, r7, sl
 801cd04:	4449      	add	r1, r9
 801cd06:	4441      	add	r1, r8
 801cd08:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801cd0c:	e7d2      	b.n	801ccb4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801cd0e:	f04f 0b00 	mov.w	fp, #0
 801cd12:	e7f1      	b.n	801ccf8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801cd14 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801cd14:	b570      	push	{r4, r5, r6, lr}
 801cd16:	8810      	ldrh	r0, [r2, #0]
 801cd18:	4298      	cmp	r0, r3
 801cd1a:	d817      	bhi.n	801cd4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cd1c:	1e48      	subs	r0, r1, #1
 801cd1e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801cd22:	4298      	cmp	r0, r3
 801cd24:	d312      	bcc.n	801cd4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cd26:	2400      	movs	r4, #0
 801cd28:	428c      	cmp	r4, r1
 801cd2a:	d20f      	bcs.n	801cd4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cd2c:	1860      	adds	r0, r4, r1
 801cd2e:	1040      	asrs	r0, r0, #1
 801cd30:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801cd34:	0085      	lsls	r5, r0, #2
 801cd36:	42b3      	cmp	r3, r6
 801cd38:	d902      	bls.n	801cd40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801cd3a:	3001      	adds	r0, #1
 801cd3c:	b284      	uxth	r4, r0
 801cd3e:	e7f3      	b.n	801cd28 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cd40:	d201      	bcs.n	801cd46 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801cd42:	b281      	uxth	r1, r0
 801cd44:	e7f0      	b.n	801cd28 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cd46:	442a      	add	r2, r5
 801cd48:	8850      	ldrh	r0, [r2, #2]
 801cd4a:	bd70      	pop	{r4, r5, r6, pc}
 801cd4c:	2000      	movs	r0, #0
 801cd4e:	e7fc      	b.n	801cd4a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801cd50 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801cd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd54:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801cd56:	4604      	mov	r4, r0
 801cd58:	260b      	movs	r6, #11
 801cd5a:	886f      	ldrh	r7, [r5, #2]
 801cd5c:	087f      	lsrs	r7, r7, #1
 801cd5e:	3e01      	subs	r6, #1
 801cd60:	d01b      	beq.n	801cd9a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801cd62:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cd64:	b92b      	cbnz	r3, 801cd72 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801cd66:	4b0e      	ldr	r3, [pc, #56]	; (801cda0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801cd68:	21c0      	movs	r1, #192	; 0xc0
 801cd6a:	4a0e      	ldr	r2, [pc, #56]	; (801cda4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801cd6c:	480e      	ldr	r0, [pc, #56]	; (801cda8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801cd6e:	f00c fcb1 	bl	80296d4 <__assert_func>
 801cd72:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801cd74:	462a      	mov	r2, r5
 801cd76:	4639      	mov	r1, r7
 801cd78:	4620      	mov	r0, r4
 801cd7a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cd7e:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801cd82:	4643      	mov	r3, r8
 801cd84:	f7ff ffc6 	bl	801cd14 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801cd88:	b138      	cbz	r0, 801cd9a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801cd8a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801cd8e:	4642      	mov	r2, r8
 801cd90:	4620      	mov	r0, r4
 801cd92:	f7ff ff8b 	bl	801ccac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801cd96:	2800      	cmp	r0, #0
 801cd98:	d1e1      	bne.n	801cd5e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801cd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd9e:	bf00      	nop
 801cda0:	0802d6b4 	.word	0x0802d6b4
 801cda4:	0802d926 	.word	0x0802d926
 801cda8:	0802d6bd 	.word	0x0802d6bd

0801cdac <_ZN8touchgfx8ceil28_4El>:
 801cdac:	f110 030f 	adds.w	r3, r0, #15
 801cdb0:	d401      	bmi.n	801cdb6 <_ZN8touchgfx8ceil28_4El+0xa>
 801cdb2:	1118      	asrs	r0, r3, #4
 801cdb4:	4770      	bx	lr
 801cdb6:	2210      	movs	r2, #16
 801cdb8:	f1c0 0001 	rsb	r0, r0, #1
 801cdbc:	fb93 f3f2 	sdiv	r3, r3, r2
 801cdc0:	f010 000f 	ands.w	r0, r0, #15
 801cdc4:	bf18      	it	ne
 801cdc6:	2001      	movne	r0, #1
 801cdc8:	1a18      	subs	r0, r3, r0
 801cdca:	4770      	bx	lr

0801cdcc <_ZN8touchgfx11floorDivModEllRlS0_>:
 801cdcc:	2900      	cmp	r1, #0
 801cdce:	b538      	push	{r3, r4, r5, lr}
 801cdd0:	dc05      	bgt.n	801cdde <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801cdd2:	4b0f      	ldr	r3, [pc, #60]	; (801ce10 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801cdd4:	21fa      	movs	r1, #250	; 0xfa
 801cdd6:	4a0f      	ldr	r2, [pc, #60]	; (801ce14 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801cdd8:	480f      	ldr	r0, [pc, #60]	; (801ce18 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801cdda:	f00c fc7b 	bl	80296d4 <__assert_func>
 801cdde:	2800      	cmp	r0, #0
 801cde0:	db06      	blt.n	801cdf0 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801cde2:	fb90 f4f1 	sdiv	r4, r0, r1
 801cde6:	fb01 0114 	mls	r1, r1, r4, r0
 801cdea:	6014      	str	r4, [r2, #0]
 801cdec:	6019      	str	r1, [r3, #0]
 801cdee:	bd38      	pop	{r3, r4, r5, pc}
 801cdf0:	4240      	negs	r0, r0
 801cdf2:	fb90 f4f1 	sdiv	r4, r0, r1
 801cdf6:	4265      	negs	r5, r4
 801cdf8:	fb01 0014 	mls	r0, r1, r4, r0
 801cdfc:	6015      	str	r5, [r2, #0]
 801cdfe:	6018      	str	r0, [r3, #0]
 801ce00:	2800      	cmp	r0, #0
 801ce02:	d0f4      	beq.n	801cdee <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801ce04:	6810      	ldr	r0, [r2, #0]
 801ce06:	3801      	subs	r0, #1
 801ce08:	6010      	str	r0, [r2, #0]
 801ce0a:	6818      	ldr	r0, [r3, #0]
 801ce0c:	1a09      	subs	r1, r1, r0
 801ce0e:	e7ed      	b.n	801cdec <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801ce10:	0802dc80 	.word	0x0802dc80
 801ce14:	0802dcbf 	.word	0x0802dcbf
 801ce18:	0802dc90 	.word	0x0802dc90

0801ce1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801ce1c:	b570      	push	{r4, r5, r6, lr}
 801ce1e:	694a      	ldr	r2, [r1, #20]
 801ce20:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801ce22:	684b      	ldr	r3, [r1, #4]
 801ce24:	1b54      	subs	r4, r2, r5
 801ce26:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801ce28:	f000 8106 	beq.w	801d038 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801ce2c:	1b9b      	subs	r3, r3, r6
 801ce2e:	d003      	beq.n	801ce38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ce30:	4363      	muls	r3, r4
 801ce32:	2210      	movs	r2, #16
 801ce34:	fb93 f3f2 	sdiv	r3, r3, r2
 801ce38:	680c      	ldr	r4, [r1, #0]
 801ce3a:	698a      	ldr	r2, [r1, #24]
 801ce3c:	1b65      	subs	r5, r4, r5
 801ce3e:	f000 80fd 	beq.w	801d03c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801ce42:	1b92      	subs	r2, r2, r6
 801ce44:	d003      	beq.n	801ce4e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ce46:	436a      	muls	r2, r5
 801ce48:	2410      	movs	r4, #16
 801ce4a:	fb92 f2f4 	sdiv	r2, r2, r4
 801ce4e:	1a9b      	subs	r3, r3, r2
 801ce50:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801d078 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801ce54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ce58:	460a      	mov	r2, r1
 801ce5a:	ee07 3a90 	vmov	s15, r3
 801ce5e:	f100 040c 	add.w	r4, r0, #12
 801ce62:	4603      	mov	r3, r0
 801ce64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ce68:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ce6c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801ce70:	eeb1 6a43 	vneg.f32	s12, s6
 801ce74:	edd2 7a02 	vldr	s15, [r2, #8]
 801ce78:	3214      	adds	r2, #20
 801ce7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ce7e:	ece3 6a01 	vstmia	r3!, {s13}
 801ce82:	429c      	cmp	r4, r3
 801ce84:	ed52 7a02 	vldr	s15, [r2, #-8]
 801ce88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ce8c:	edc3 7a02 	vstr	s15, [r3, #8]
 801ce90:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ce94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ce98:	edc3 7a05 	vstr	s15, [r3, #20]
 801ce9c:	d1ea      	bne.n	801ce74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801ce9e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801cea0:	698b      	ldr	r3, [r1, #24]
 801cea2:	edd0 4a02 	vldr	s9, [r0, #8]
 801cea6:	1a9b      	subs	r3, r3, r2
 801cea8:	edd0 3a00 	vldr	s7, [r0]
 801ceac:	edd0 6a01 	vldr	s13, [r0, #4]
 801ceb0:	ee07 3a90 	vmov	s15, r3
 801ceb4:	684b      	ldr	r3, [r1, #4]
 801ceb6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ceba:	ed90 5a05 	vldr	s10, [r0, #20]
 801cebe:	1a9b      	subs	r3, r3, r2
 801cec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cec4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801cec8:	ed90 2a03 	vldr	s4, [r0, #12]
 801cecc:	ee07 3a10 	vmov	s14, r3
 801ced0:	edd0 5a04 	vldr	s11, [r0, #16]
 801ced4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ced8:	ed90 1a07 	vldr	s2, [r0, #28]
 801cedc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cee0:	edd0 2a06 	vldr	s5, [r0, #24]
 801cee4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801cee8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801ceec:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cef0:	ee32 5a45 	vsub.f32	s10, s4, s10
 801cef4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cef8:	ee67 7a83 	vmul.f32	s15, s15, s6
 801cefc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801cf00:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801cf02:	694a      	ldr	r2, [r1, #20]
 801cf04:	1b13      	subs	r3, r2, r4
 801cf06:	ee07 3a10 	vmov	s14, r3
 801cf0a:	680b      	ldr	r3, [r1, #0]
 801cf0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf10:	1b1b      	subs	r3, r3, r4
 801cf12:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cf16:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801cf1a:	ee07 3a10 	vmov	s14, r3
 801cf1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf22:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cf26:	eee6 4a87 	vfma.f32	s9, s13, s14
 801cf2a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801cf2e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801cf32:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801cf34:	698b      	ldr	r3, [r1, #24]
 801cf36:	1a9b      	subs	r3, r3, r2
 801cf38:	ee06 3a90 	vmov	s13, r3
 801cf3c:	684b      	ldr	r3, [r1, #4]
 801cf3e:	1a9b      	subs	r3, r3, r2
 801cf40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cf44:	ee07 3a10 	vmov	s14, r3
 801cf48:	ee66 6a84 	vmul.f32	s13, s13, s8
 801cf4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf50:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801cf54:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cf58:	eee5 6a87 	vfma.f32	s13, s11, s14
 801cf5c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801cf60:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801cf64:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801cf66:	694a      	ldr	r2, [r1, #20]
 801cf68:	1b13      	subs	r3, r2, r4
 801cf6a:	ee07 3a10 	vmov	s14, r3
 801cf6e:	680b      	ldr	r3, [r1, #0]
 801cf70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf74:	1b1b      	subs	r3, r3, r4
 801cf76:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cf7a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801cf7e:	ee07 3a10 	vmov	s14, r3
 801cf82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf86:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cf8a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801cf8e:	edd0 5a08 	vldr	s11, [r0, #32]
 801cf92:	ee31 1a65 	vsub.f32	s2, s2, s11
 801cf96:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801cf9a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801cf9e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801cfa2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801cfa4:	698b      	ldr	r3, [r1, #24]
 801cfa6:	1a9b      	subs	r3, r3, r2
 801cfa8:	ee07 3a10 	vmov	s14, r3
 801cfac:	684b      	ldr	r3, [r1, #4]
 801cfae:	1a9b      	subs	r3, r3, r2
 801cfb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cfb4:	ee01 3a90 	vmov	s3, r3
 801cfb8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cfbc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801cfc0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801cfc4:	ee61 1a84 	vmul.f32	s3, s3, s8
 801cfc8:	eea1 7a21 	vfma.f32	s14, s2, s3
 801cfcc:	ee27 7a03 	vmul.f32	s14, s14, s6
 801cfd0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801cfd4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801cfd6:	694a      	ldr	r2, [r1, #20]
 801cfd8:	1b13      	subs	r3, r2, r4
 801cfda:	ee03 3a10 	vmov	s6, r3
 801cfde:	680b      	ldr	r3, [r1, #0]
 801cfe0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801cfe4:	1b1b      	subs	r3, r3, r4
 801cfe6:	ee23 3a04 	vmul.f32	s6, s6, s8
 801cfea:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801cfee:	ee03 3a10 	vmov	s6, r3
 801cff2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801cff6:	ee23 4a04 	vmul.f32	s8, s6, s8
 801cffa:	eee1 5a04 	vfma.f32	s11, s2, s8
 801cffe:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d002:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d006:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d00a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d00e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d016:	dd13      	ble.n	801d040 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d01c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d020:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d022:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d02e:	dd15      	ble.n	801d05c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d034:	6403      	str	r3, [r0, #64]	; 0x40
 801d036:	bd70      	pop	{r4, r5, r6, pc}
 801d038:	4623      	mov	r3, r4
 801d03a:	e6fd      	b.n	801ce38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d03c:	462a      	mov	r2, r5
 801d03e:	e706      	b.n	801ce4e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d040:	d502      	bpl.n	801d048 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d042:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d046:	e7e9      	b.n	801d01c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d048:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d04c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d050:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d058:	dade      	bge.n	801d018 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d05a:	e7f2      	b.n	801d042 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d05c:	d502      	bpl.n	801d064 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d05e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d062:	e7e7      	b.n	801d034 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d064:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d068:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d06c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d074:	dadc      	bge.n	801d030 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d076:	e7f2      	b.n	801d05e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d078:	3d800000 	.word	0x3d800000

0801d07c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d07c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d080:	f04f 0814 	mov.w	r8, #20
 801d084:	4604      	mov	r4, r0
 801d086:	4617      	mov	r7, r2
 801d088:	460d      	mov	r5, r1
 801d08a:	fb08 f903 	mul.w	r9, r8, r3
 801d08e:	461e      	mov	r6, r3
 801d090:	eb02 0a09 	add.w	sl, r2, r9
 801d094:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d098:	f7ff fe88 	bl	801cdac <_ZN8touchgfx8ceil28_4El>
 801d09c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d09e:	6160      	str	r0, [r4, #20]
 801d0a0:	fb08 f803 	mul.w	r8, r8, r3
 801d0a4:	9001      	str	r0, [sp, #4]
 801d0a6:	eb07 0b08 	add.w	fp, r7, r8
 801d0aa:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d0ae:	f7ff fe7d 	bl	801cdac <_ZN8touchgfx8ceil28_4El>
 801d0b2:	9a01      	ldr	r2, [sp, #4]
 801d0b4:	1a80      	subs	r0, r0, r2
 801d0b6:	61a0      	str	r0, [r4, #24]
 801d0b8:	2800      	cmp	r0, #0
 801d0ba:	f000 8088 	beq.w	801d1ce <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801d0be:	f857 3009 	ldr.w	r3, [r7, r9]
 801d0c2:	f857 c008 	ldr.w	ip, [r7, r8]
 801d0c6:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d0ca:	ebac 0c03 	sub.w	ip, ip, r3
 801d0ce:	f8da 1004 	ldr.w	r1, [sl, #4]
 801d0d2:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801d0d6:	1a40      	subs	r0, r0, r1
 801d0d8:	fb0b f202 	mul.w	r2, fp, r2
 801d0dc:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801d0e0:	fb0c 2211 	mls	r2, ip, r1, r2
 801d0e4:	4641      	mov	r1, r8
 801d0e6:	fb00 2003 	mla	r0, r0, r3, r2
 801d0ea:	f104 0310 	add.w	r3, r4, #16
 801d0ee:	4622      	mov	r2, r4
 801d0f0:	3801      	subs	r0, #1
 801d0f2:	4440      	add	r0, r8
 801d0f4:	f7ff fe6a 	bl	801cdcc <_ZN8touchgfx11floorDivModEllRlS0_>
 801d0f8:	f104 0308 	add.w	r3, r4, #8
 801d0fc:	1d22      	adds	r2, r4, #4
 801d0fe:	4641      	mov	r1, r8
 801d100:	4658      	mov	r0, fp
 801d102:	f7ff fe63 	bl	801cdcc <_ZN8touchgfx11floorDivModEllRlS0_>
 801d106:	f8c4 800c 	str.w	r8, [r4, #12]
 801d10a:	6962      	ldr	r2, [r4, #20]
 801d10c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801d110:	eddf 6a31 	vldr	s13, [pc, #196]	; 801d1d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d114:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d118:	6822      	ldr	r2, [r4, #0]
 801d11a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d11e:	ee07 3a10 	vmov	s14, r3
 801d122:	f857 3009 	ldr.w	r3, [r7, r9]
 801d126:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d12a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d12e:	ee07 3a90 	vmov	s15, r3
 801d132:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801d136:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d13a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d13e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d142:	edd3 6a00 	vldr	s13, [r3]
 801d146:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d14a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d14e:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d152:	edc4 6a07 	vstr	s13, [r4, #28]
 801d156:	edd4 6a01 	vldr	s13, [r4, #4]
 801d15a:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801d15e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d162:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d166:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d16a:	ed84 6a08 	vstr	s12, [r4, #32]
 801d16e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801d170:	6262      	str	r2, [r4, #36]	; 0x24
 801d172:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801d176:	ed93 6a03 	vldr	s12, [r3, #12]
 801d17a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d17e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d182:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d186:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801d18a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d18e:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801d192:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d196:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801d19a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801d19c:	6322      	str	r2, [r4, #48]	; 0x30
 801d19e:	ed93 6a06 	vldr	s12, [r3, #24]
 801d1a2:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801d1a6:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d1aa:	eeb0 7a46 	vmov.f32	s14, s12
 801d1ae:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801d1b2:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d1b6:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801d1ba:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801d1be:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801d1c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d1c6:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801d1ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801d1cc:	63e3      	str	r3, [r4, #60]	; 0x3c
 801d1ce:	4620      	mov	r0, r4
 801d1d0:	b003      	add	sp, #12
 801d1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1d6:	bf00      	nop
 801d1d8:	3d800000 	.word	0x3d800000

0801d1dc <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d1dc:	4602      	mov	r2, r0
 801d1de:	b148      	cbz	r0, 801d1f4 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	b298      	uxth	r0, r3
 801d1e4:	3301      	adds	r3, #1
 801d1e6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d1ea:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d1ee:	2900      	cmp	r1, #0
 801d1f0:	d1f7      	bne.n	801d1e2 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d1f2:	4770      	bx	lr
 801d1f4:	4770      	bx	lr

0801d1f6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d1f6:	b530      	push	{r4, r5, lr}
 801d1f8:	4604      	mov	r4, r0
 801d1fa:	b159      	cbz	r1, 801d214 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d1fc:	b148      	cbz	r0, 801d212 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d1fe:	2300      	movs	r3, #0
 801d200:	b298      	uxth	r0, r3
 801d202:	4282      	cmp	r2, r0
 801d204:	d905      	bls.n	801d212 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d206:	5ccd      	ldrb	r5, [r1, r3]
 801d208:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d20c:	3301      	adds	r3, #1
 801d20e:	2d00      	cmp	r5, #0
 801d210:	d1f6      	bne.n	801d200 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d212:	bd30      	pop	{r4, r5, pc}
 801d214:	4608      	mov	r0, r1
 801d216:	e7fc      	b.n	801d212 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d218 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801d218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d21a:	468c      	mov	ip, r1
 801d21c:	b08b      	sub	sp, #44	; 0x2c
 801d21e:	2100      	movs	r1, #0
 801d220:	ae01      	add	r6, sp, #4
 801d222:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d226:	211f      	movs	r1, #31
 801d228:	fbb0 f7f3 	udiv	r7, r0, r3
 801d22c:	fb03 0517 	mls	r5, r3, r7, r0
 801d230:	4638      	mov	r0, r7
 801d232:	b2ec      	uxtb	r4, r5
 801d234:	2d09      	cmp	r5, #9
 801d236:	bfd4      	ite	le
 801d238:	3430      	addle	r4, #48	; 0x30
 801d23a:	3457      	addgt	r4, #87	; 0x57
 801d23c:	b2e4      	uxtb	r4, r4
 801d23e:	558c      	strb	r4, [r1, r6]
 801d240:	1e4c      	subs	r4, r1, #1
 801d242:	b92f      	cbnz	r7, 801d250 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801d244:	4431      	add	r1, r6
 801d246:	4660      	mov	r0, ip
 801d248:	f7ff ffd5 	bl	801d1f6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d24c:	b00b      	add	sp, #44	; 0x2c
 801d24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d250:	4621      	mov	r1, r4
 801d252:	e7e9      	b.n	801d228 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801d254 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801d254:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d256:	4607      	mov	r7, r0
 801d258:	b08b      	sub	sp, #44	; 0x2c
 801d25a:	4608      	mov	r0, r1
 801d25c:	b341      	cbz	r1, 801d2b0 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d25e:	1e99      	subs	r1, r3, #2
 801d260:	2922      	cmp	r1, #34	; 0x22
 801d262:	d825      	bhi.n	801d2b0 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d264:	2100      	movs	r1, #0
 801d266:	463c      	mov	r4, r7
 801d268:	261f      	movs	r6, #31
 801d26a:	f10d 0c04 	add.w	ip, sp, #4
 801d26e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d272:	1e71      	subs	r1, r6, #1
 801d274:	fb94 fef3 	sdiv	lr, r4, r3
 801d278:	fb03 441e 	mls	r4, r3, lr, r4
 801d27c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d280:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801d284:	b2ec      	uxtb	r4, r5
 801d286:	2d09      	cmp	r5, #9
 801d288:	bfd4      	ite	le
 801d28a:	3430      	addle	r4, #48	; 0x30
 801d28c:	3457      	addgt	r4, #87	; 0x57
 801d28e:	b2e4      	uxtb	r4, r4
 801d290:	f80c 4006 	strb.w	r4, [ip, r6]
 801d294:	4674      	mov	r4, lr
 801d296:	b96c      	cbnz	r4, 801d2b4 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801d298:	2f00      	cmp	r7, #0
 801d29a:	da05      	bge.n	801d2a8 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801d29c:	ab0a      	add	r3, sp, #40	; 0x28
 801d29e:	4419      	add	r1, r3
 801d2a0:	232d      	movs	r3, #45	; 0x2d
 801d2a2:	f801 3c24 	strb.w	r3, [r1, #-36]
 801d2a6:	1eb1      	subs	r1, r6, #2
 801d2a8:	3101      	adds	r1, #1
 801d2aa:	4461      	add	r1, ip
 801d2ac:	f7ff ffa3 	bl	801d1f6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d2b0:	b00b      	add	sp, #44	; 0x2c
 801d2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2b4:	460e      	mov	r6, r1
 801d2b6:	e7dc      	b.n	801d272 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801d2b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801d2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2bc:	b085      	sub	sp, #20
 801d2be:	4691      	mov	r9, r2
 801d2c0:	6802      	ldr	r2, [r0, #0]
 801d2c2:	4688      	mov	r8, r1
 801d2c4:	461c      	mov	r4, r3
 801d2c6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801d2ca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d2ce:	4683      	mov	fp, r0
 801d2d0:	4610      	mov	r0, r2
 801d2d2:	9103      	str	r1, [sp, #12]
 801d2d4:	9302      	str	r3, [sp, #8]
 801d2d6:	9201      	str	r2, [sp, #4]
 801d2d8:	f7ff ff80 	bl	801d1dc <_ZN8touchgfx7Unicode6strlenEPKt>
 801d2dc:	f1b8 0f00 	cmp.w	r8, #0
 801d2e0:	bf0c      	ite	eq
 801d2e2:	4684      	moveq	ip, r0
 801d2e4:	f100 0c01 	addne.w	ip, r0, #1
 801d2e8:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801d2ec:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801d2f0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d2f2:	fa1f fc8c 	uxth.w	ip, ip
 801d2f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d2f8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801d2fc:	9903      	ldr	r1, [sp, #12]
 801d2fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d302:	d041      	beq.n	801d388 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d304:	d834      	bhi.n	801d370 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801d306:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801d30a:	d059      	beq.n	801d3c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801d30c:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801d310:	d03a      	beq.n	801d388 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d312:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801d316:	d034      	beq.n	801d382 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d318:	2400      	movs	r4, #0
 801d31a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801d31e:	3a01      	subs	r2, #1
 801d320:	b169      	cbz	r1, 801d33e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d322:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d324:	458c      	cmp	ip, r1
 801d326:	da09      	bge.n	801d33c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d328:	eba1 010c 	sub.w	r1, r1, ip
 801d32c:	b289      	uxth	r1, r1
 801d32e:	b933      	cbnz	r3, 801d33e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d330:	2e00      	cmp	r6, #0
 801d332:	d051      	beq.n	801d3d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d334:	2800      	cmp	r0, #0
 801d336:	d04f      	beq.n	801d3d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d338:	440c      	add	r4, r1
 801d33a:	b2a4      	uxth	r4, r4
 801d33c:	2100      	movs	r1, #0
 801d33e:	682b      	ldr	r3, [r5, #0]
 801d340:	4293      	cmp	r3, r2
 801d342:	da07      	bge.n	801d354 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d344:	f1b8 0f00 	cmp.w	r8, #0
 801d348:	d004      	beq.n	801d354 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d34a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801d34e:	682b      	ldr	r3, [r5, #0]
 801d350:	3301      	adds	r3, #1
 801d352:	602b      	str	r3, [r5, #0]
 801d354:	2730      	movs	r7, #48	; 0x30
 801d356:	2c00      	cmp	r4, #0
 801d358:	d04e      	beq.n	801d3f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d35a:	682e      	ldr	r6, [r5, #0]
 801d35c:	3c01      	subs	r4, #1
 801d35e:	42b2      	cmp	r2, r6
 801d360:	b2a4      	uxth	r4, r4
 801d362:	dd49      	ble.n	801d3f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d364:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d368:	682b      	ldr	r3, [r5, #0]
 801d36a:	3301      	adds	r3, #1
 801d36c:	602b      	str	r3, [r5, #0]
 801d36e:	e7f2      	b.n	801d356 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801d370:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801d374:	d01d      	beq.n	801d3b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801d376:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801d37a:	d002      	beq.n	801d382 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d37c:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801d380:	e7c9      	b.n	801d316 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801d382:	4684      	mov	ip, r0
 801d384:	f04f 0800 	mov.w	r8, #0
 801d388:	2c00      	cmp	r4, #0
 801d38a:	d0c6      	beq.n	801d31a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d38c:	b947      	cbnz	r7, 801d3a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d38e:	2801      	cmp	r0, #1
 801d390:	d106      	bne.n	801d3a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d392:	8814      	ldrh	r4, [r2, #0]
 801d394:	2c30      	cmp	r4, #48	; 0x30
 801d396:	bf02      	ittt	eq
 801d398:	3202      	addeq	r2, #2
 801d39a:	4638      	moveq	r0, r7
 801d39c:	f8cb 2000 	streq.w	r2, [fp]
 801d3a0:	45bc      	cmp	ip, r7
 801d3a2:	da14      	bge.n	801d3ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801d3a4:	b2bf      	uxth	r7, r7
 801d3a6:	eba7 040c 	sub.w	r4, r7, ip
 801d3aa:	46bc      	mov	ip, r7
 801d3ac:	b2a4      	uxth	r4, r4
 801d3ae:	2600      	movs	r6, #0
 801d3b0:	e7b3      	b.n	801d31a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d3b2:	4684      	mov	ip, r0
 801d3b4:	b16c      	cbz	r4, 801d3d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801d3b6:	42b8      	cmp	r0, r7
 801d3b8:	dd00      	ble.n	801d3bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801d3ba:	b2b8      	uxth	r0, r7
 801d3bc:	2400      	movs	r4, #0
 801d3be:	e003      	b.n	801d3c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801d3c0:	f04f 0c01 	mov.w	ip, #1
 801d3c4:	2400      	movs	r4, #0
 801d3c6:	4660      	mov	r0, ip
 801d3c8:	4626      	mov	r6, r4
 801d3ca:	46a0      	mov	r8, r4
 801d3cc:	e7a5      	b.n	801d31a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d3ce:	2400      	movs	r4, #0
 801d3d0:	e7ed      	b.n	801d3ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801d3d2:	4626      	mov	r6, r4
 801d3d4:	46a0      	mov	r8, r4
 801d3d6:	e7a0      	b.n	801d31a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d3d8:	2900      	cmp	r1, #0
 801d3da:	d0b0      	beq.n	801d33e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d3dc:	2720      	movs	r7, #32
 801d3de:	682e      	ldr	r6, [r5, #0]
 801d3e0:	2900      	cmp	r1, #0
 801d3e2:	d0ac      	beq.n	801d33e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d3e4:	3901      	subs	r1, #1
 801d3e6:	4296      	cmp	r6, r2
 801d3e8:	b289      	uxth	r1, r1
 801d3ea:	daa7      	bge.n	801d33c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d3ec:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d3f0:	682b      	ldr	r3, [r5, #0]
 801d3f2:	3301      	adds	r3, #1
 801d3f4:	602b      	str	r3, [r5, #0]
 801d3f6:	e7f2      	b.n	801d3de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801d3f8:	b188      	cbz	r0, 801d41e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d3fa:	682b      	ldr	r3, [r5, #0]
 801d3fc:	3801      	subs	r0, #1
 801d3fe:	429a      	cmp	r2, r3
 801d400:	b280      	uxth	r0, r0
 801d402:	dd0c      	ble.n	801d41e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d404:	f8db 3000 	ldr.w	r3, [fp]
 801d408:	1c9c      	adds	r4, r3, #2
 801d40a:	f8cb 4000 	str.w	r4, [fp]
 801d40e:	881c      	ldrh	r4, [r3, #0]
 801d410:	682b      	ldr	r3, [r5, #0]
 801d412:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801d416:	682b      	ldr	r3, [r5, #0]
 801d418:	3301      	adds	r3, #1
 801d41a:	602b      	str	r3, [r5, #0]
 801d41c:	e7ec      	b.n	801d3f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d41e:	2620      	movs	r6, #32
 801d420:	b151      	cbz	r1, 801d438 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d422:	6828      	ldr	r0, [r5, #0]
 801d424:	3901      	subs	r1, #1
 801d426:	4282      	cmp	r2, r0
 801d428:	b289      	uxth	r1, r1
 801d42a:	dd05      	ble.n	801d438 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d42c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801d430:	682b      	ldr	r3, [r5, #0]
 801d432:	3301      	adds	r3, #1
 801d434:	602b      	str	r3, [r5, #0]
 801d436:	e7f3      	b.n	801d420 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801d438:	b005      	add	sp, #20
 801d43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d43e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801d43e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d442:	2400      	movs	r4, #0
 801d444:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801d448:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801d44c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801d450:	8014      	strh	r4, [r2, #0]
 801d452:	701c      	strb	r4, [r3, #0]
 801d454:	f888 4000 	strb.w	r4, [r8]
 801d458:	f88c 4000 	strb.w	r4, [ip]
 801d45c:	f88e 4000 	strb.w	r4, [lr]
 801d460:	703c      	strb	r4, [r7, #0]
 801d462:	6804      	ldr	r4, [r0, #0]
 801d464:	b1a4      	cbz	r4, 801d490 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801d466:	8824      	ldrh	r4, [r4, #0]
 801d468:	f04f 0901 	mov.w	r9, #1
 801d46c:	b314      	cbz	r4, 801d4b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d46e:	2c2b      	cmp	r4, #43	; 0x2b
 801d470:	d001      	beq.n	801d476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801d472:	2c20      	cmp	r4, #32
 801d474:	d110      	bne.n	801d498 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801d476:	8014      	strh	r4, [r2, #0]
 801d478:	6804      	ldr	r4, [r0, #0]
 801d47a:	b10c      	cbz	r4, 801d480 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801d47c:	3402      	adds	r4, #2
 801d47e:	6004      	str	r4, [r0, #0]
 801d480:	680c      	ldr	r4, [r1, #0]
 801d482:	b10c      	cbz	r4, 801d488 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801d484:	3401      	adds	r4, #1
 801d486:	600c      	str	r4, [r1, #0]
 801d488:	6804      	ldr	r4, [r0, #0]
 801d48a:	b17c      	cbz	r4, 801d4ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801d48c:	8824      	ldrh	r4, [r4, #0]
 801d48e:	e7ed      	b.n	801d46c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d490:	680c      	ldr	r4, [r1, #0]
 801d492:	b17c      	cbz	r4, 801d4b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d494:	7824      	ldrb	r4, [r4, #0]
 801d496:	e7e7      	b.n	801d468 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801d498:	2c2d      	cmp	r4, #45	; 0x2d
 801d49a:	d102      	bne.n	801d4a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801d49c:	f883 9000 	strb.w	r9, [r3]
 801d4a0:	e7ea      	b.n	801d478 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d4a2:	2c23      	cmp	r4, #35	; 0x23
 801d4a4:	d107      	bne.n	801d4b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801d4a6:	f888 9000 	strb.w	r9, [r8]
 801d4aa:	e7e5      	b.n	801d478 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d4ac:	680c      	ldr	r4, [r1, #0]
 801d4ae:	b10c      	cbz	r4, 801d4b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d4b0:	7824      	ldrb	r4, [r4, #0]
 801d4b2:	e7db      	b.n	801d46c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d4b4:	2400      	movs	r4, #0
 801d4b6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801d4ba:	2b09      	cmp	r3, #9
 801d4bc:	d901      	bls.n	801d4c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801d4be:	2c2a      	cmp	r4, #42	; 0x2a
 801d4c0:	d122      	bne.n	801d508 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d4c2:	2301      	movs	r3, #1
 801d4c4:	2c30      	cmp	r4, #48	; 0x30
 801d4c6:	f88e 3000 	strb.w	r3, [lr]
 801d4ca:	d10d      	bne.n	801d4e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d4cc:	f88c 3000 	strb.w	r3, [ip]
 801d4d0:	6803      	ldr	r3, [r0, #0]
 801d4d2:	b10b      	cbz	r3, 801d4d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801d4d4:	3302      	adds	r3, #2
 801d4d6:	6003      	str	r3, [r0, #0]
 801d4d8:	680b      	ldr	r3, [r1, #0]
 801d4da:	b10b      	cbz	r3, 801d4e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801d4dc:	3301      	adds	r3, #1
 801d4de:	600b      	str	r3, [r1, #0]
 801d4e0:	6803      	ldr	r3, [r0, #0]
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d02f      	beq.n	801d546 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801d4e6:	881c      	ldrh	r4, [r3, #0]
 801d4e8:	2c2a      	cmp	r4, #42	; 0x2a
 801d4ea:	d135      	bne.n	801d558 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d4ec:	f04f 33ff 	mov.w	r3, #4294967295
 801d4f0:	6033      	str	r3, [r6, #0]
 801d4f2:	6803      	ldr	r3, [r0, #0]
 801d4f4:	b10b      	cbz	r3, 801d4fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801d4f6:	3302      	adds	r3, #2
 801d4f8:	6003      	str	r3, [r0, #0]
 801d4fa:	680b      	ldr	r3, [r1, #0]
 801d4fc:	b10b      	cbz	r3, 801d502 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801d4fe:	3301      	adds	r3, #1
 801d500:	600b      	str	r3, [r1, #0]
 801d502:	6803      	ldr	r3, [r0, #0]
 801d504:	b31b      	cbz	r3, 801d54e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801d506:	881c      	ldrh	r4, [r3, #0]
 801d508:	2c2e      	cmp	r4, #46	; 0x2e
 801d50a:	d11a      	bne.n	801d542 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d50c:	2301      	movs	r3, #1
 801d50e:	703b      	strb	r3, [r7, #0]
 801d510:	6803      	ldr	r3, [r0, #0]
 801d512:	b10b      	cbz	r3, 801d518 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801d514:	3302      	adds	r3, #2
 801d516:	6003      	str	r3, [r0, #0]
 801d518:	680b      	ldr	r3, [r1, #0]
 801d51a:	b10b      	cbz	r3, 801d520 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801d51c:	3301      	adds	r3, #1
 801d51e:	600b      	str	r3, [r1, #0]
 801d520:	6803      	ldr	r3, [r0, #0]
 801d522:	2b00      	cmp	r3, #0
 801d524:	d036      	beq.n	801d594 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801d526:	881b      	ldrh	r3, [r3, #0]
 801d528:	2b2a      	cmp	r3, #42	; 0x2a
 801d52a:	d137      	bne.n	801d59c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d52c:	f04f 33ff 	mov.w	r3, #4294967295
 801d530:	602b      	str	r3, [r5, #0]
 801d532:	6803      	ldr	r3, [r0, #0]
 801d534:	b10b      	cbz	r3, 801d53a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801d536:	3302      	adds	r3, #2
 801d538:	6003      	str	r3, [r0, #0]
 801d53a:	680b      	ldr	r3, [r1, #0]
 801d53c:	b10b      	cbz	r3, 801d542 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d53e:	3301      	adds	r3, #1
 801d540:	600b      	str	r3, [r1, #0]
 801d542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d546:	680c      	ldr	r4, [r1, #0]
 801d548:	b134      	cbz	r4, 801d558 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d54a:	7824      	ldrb	r4, [r4, #0]
 801d54c:	e7cc      	b.n	801d4e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d54e:	680b      	ldr	r3, [r1, #0]
 801d550:	2b00      	cmp	r3, #0
 801d552:	d0f6      	beq.n	801d542 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d554:	781c      	ldrb	r4, [r3, #0]
 801d556:	e7d7      	b.n	801d508 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d558:	2300      	movs	r3, #0
 801d55a:	220a      	movs	r2, #10
 801d55c:	6033      	str	r3, [r6, #0]
 801d55e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d562:	fa1f f38c 	uxth.w	r3, ip
 801d566:	2b09      	cmp	r3, #9
 801d568:	d8ce      	bhi.n	801d508 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d56a:	6833      	ldr	r3, [r6, #0]
 801d56c:	fb02 c303 	mla	r3, r2, r3, ip
 801d570:	6033      	str	r3, [r6, #0]
 801d572:	6803      	ldr	r3, [r0, #0]
 801d574:	b10b      	cbz	r3, 801d57a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801d576:	3302      	adds	r3, #2
 801d578:	6003      	str	r3, [r0, #0]
 801d57a:	680b      	ldr	r3, [r1, #0]
 801d57c:	b10b      	cbz	r3, 801d582 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801d57e:	3301      	adds	r3, #1
 801d580:	600b      	str	r3, [r1, #0]
 801d582:	6803      	ldr	r3, [r0, #0]
 801d584:	b10b      	cbz	r3, 801d58a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801d586:	881c      	ldrh	r4, [r3, #0]
 801d588:	e7e9      	b.n	801d55e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d58a:	680c      	ldr	r4, [r1, #0]
 801d58c:	2c00      	cmp	r4, #0
 801d58e:	d0e6      	beq.n	801d55e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d590:	7824      	ldrb	r4, [r4, #0]
 801d592:	e7e4      	b.n	801d55e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d594:	680b      	ldr	r3, [r1, #0]
 801d596:	b10b      	cbz	r3, 801d59c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d598:	781b      	ldrb	r3, [r3, #0]
 801d59a:	e7c5      	b.n	801d528 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801d59c:	2200      	movs	r2, #0
 801d59e:	240a      	movs	r4, #10
 801d5a0:	602a      	str	r2, [r5, #0]
 801d5a2:	3b30      	subs	r3, #48	; 0x30
 801d5a4:	682a      	ldr	r2, [r5, #0]
 801d5a6:	b29e      	uxth	r6, r3
 801d5a8:	2e09      	cmp	r6, #9
 801d5aa:	d813      	bhi.n	801d5d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801d5ac:	fb04 3302 	mla	r3, r4, r2, r3
 801d5b0:	602b      	str	r3, [r5, #0]
 801d5b2:	6803      	ldr	r3, [r0, #0]
 801d5b4:	b10b      	cbz	r3, 801d5ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801d5b6:	3302      	adds	r3, #2
 801d5b8:	6003      	str	r3, [r0, #0]
 801d5ba:	680b      	ldr	r3, [r1, #0]
 801d5bc:	b10b      	cbz	r3, 801d5c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801d5be:	3301      	adds	r3, #1
 801d5c0:	600b      	str	r3, [r1, #0]
 801d5c2:	6803      	ldr	r3, [r0, #0]
 801d5c4:	b10b      	cbz	r3, 801d5ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801d5c6:	881b      	ldrh	r3, [r3, #0]
 801d5c8:	e7eb      	b.n	801d5a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d5ca:	680b      	ldr	r3, [r1, #0]
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d0e8      	beq.n	801d5a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d5d0:	781b      	ldrb	r3, [r3, #0]
 801d5d2:	e7e6      	b.n	801d5a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d5d4:	2a06      	cmp	r2, #6
 801d5d6:	bfa8      	it	ge
 801d5d8:	2206      	movge	r2, #6
 801d5da:	602a      	str	r2, [r5, #0]
 801d5dc:	e7b1      	b.n	801d542 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801d5de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801d5de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5e2:	b0a3      	sub	sp, #140	; 0x8c
 801d5e4:	2600      	movs	r6, #0
 801d5e6:	4607      	mov	r7, r0
 801d5e8:	4688      	mov	r8, r1
 801d5ea:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801d5ee:	4631      	mov	r1, r6
 801d5f0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801d5f2:	4648      	mov	r0, r9
 801d5f4:	960d      	str	r6, [sp, #52]	; 0x34
 801d5f6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d5fa:	2242      	movs	r2, #66	; 0x42
 801d5fc:	f7fe f9f2 	bl	801b9e4 <_ZN8touchgfx6memsetEPvhm>
 801d600:	b15f      	cbz	r7, 801d61a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801d602:	f108 3aff 	add.w	sl, r8, #4294967295
 801d606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d60a:	b152      	cbz	r2, 801d622 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801d60c:	8812      	ldrh	r2, [r2, #0]
 801d60e:	b10a      	cbz	r2, 801d614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d610:	459a      	cmp	sl, r3
 801d612:	dc2e      	bgt.n	801d672 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801d614:	2200      	movs	r2, #0
 801d616:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d61a:	4638      	mov	r0, r7
 801d61c:	b023      	add	sp, #140	; 0x8c
 801d61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d622:	9a08      	ldr	r2, [sp, #32]
 801d624:	2a00      	cmp	r2, #0
 801d626:	d0f5      	beq.n	801d614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d628:	7812      	ldrb	r2, [r2, #0]
 801d62a:	e7f0      	b.n	801d60e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801d62c:	2d00      	cmp	r5, #0
 801d62e:	d0ea      	beq.n	801d606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d630:	782a      	ldrb	r2, [r5, #0]
 801d632:	b142      	cbz	r2, 801d646 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801d634:	2a25      	cmp	r2, #37	; 0x25
 801d636:	d001      	beq.n	801d63c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801d638:	459a      	cmp	sl, r3
 801d63a:	dc08      	bgt.n	801d64e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801d63c:	f1bb 0f00 	cmp.w	fp, #0
 801d640:	d121      	bne.n	801d686 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801d642:	2d00      	cmp	r5, #0
 801d644:	d0df      	beq.n	801d606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d646:	782a      	ldrb	r2, [r5, #0]
 801d648:	f04f 0b00 	mov.w	fp, #0
 801d64c:	e01d      	b.n	801d68a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801d64e:	f1bb 0f00 	cmp.w	fp, #0
 801d652:	d077      	beq.n	801d744 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801d654:	f8bb 2000 	ldrh.w	r2, [fp]
 801d658:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d65c:	f1bb 0f00 	cmp.w	fp, #0
 801d660:	d002      	beq.n	801d668 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801d662:	f10b 0202 	add.w	r2, fp, #2
 801d666:	9209      	str	r2, [sp, #36]	; 0x24
 801d668:	b10d      	cbz	r5, 801d66e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801d66a:	3501      	adds	r5, #1
 801d66c:	9508      	str	r5, [sp, #32]
 801d66e:	3301      	adds	r3, #1
 801d670:	930d      	str	r3, [sp, #52]	; 0x34
 801d672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d674:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801d678:	f1bb 0f00 	cmp.w	fp, #0
 801d67c:	d0d6      	beq.n	801d62c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801d67e:	f8bb 2000 	ldrh.w	r2, [fp]
 801d682:	2a00      	cmp	r2, #0
 801d684:	d1d6      	bne.n	801d634 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801d686:	f8bb 2000 	ldrh.w	r2, [fp]
 801d68a:	2a00      	cmp	r2, #0
 801d68c:	d0bb      	beq.n	801d606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d68e:	459a      	cmp	sl, r3
 801d690:	ddb9      	ble.n	801d606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d692:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801d696:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801d69a:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801d69e:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801d6a2:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801d6a6:	960e      	str	r6, [sp, #56]	; 0x38
 801d6a8:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801d6ac:	960f      	str	r6, [sp, #60]	; 0x3c
 801d6ae:	f1bb 0f00 	cmp.w	fp, #0
 801d6b2:	d002      	beq.n	801d6ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801d6b4:	f10b 0302 	add.w	r3, fp, #2
 801d6b8:	9309      	str	r3, [sp, #36]	; 0x24
 801d6ba:	b10d      	cbz	r5, 801d6c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801d6bc:	1c6b      	adds	r3, r5, #1
 801d6be:	9308      	str	r3, [sp, #32]
 801d6c0:	ab0f      	add	r3, sp, #60	; 0x3c
 801d6c2:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801d6c6:	a908      	add	r1, sp, #32
 801d6c8:	a809      	add	r0, sp, #36	; 0x24
 801d6ca:	9305      	str	r3, [sp, #20]
 801d6cc:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801d6d0:	9304      	str	r3, [sp, #16]
 801d6d2:	ab0e      	add	r3, sp, #56	; 0x38
 801d6d4:	9303      	str	r3, [sp, #12]
 801d6d6:	ab0c      	add	r3, sp, #48	; 0x30
 801d6d8:	9302      	str	r3, [sp, #8]
 801d6da:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801d6de:	9301      	str	r3, [sp, #4]
 801d6e0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801d6e4:	9300      	str	r3, [sp, #0]
 801d6e6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801d6ea:	f7ff fea8 	bl	801d43e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801d6ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d6f0:	2b00      	cmp	r3, #0
 801d6f2:	bfbf      	itttt	lt
 801d6f4:	6823      	ldrlt	r3, [r4, #0]
 801d6f6:	3404      	addlt	r4, #4
 801d6f8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d6fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d6fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d700:	2b00      	cmp	r3, #0
 801d702:	bfbe      	ittt	lt
 801d704:	6823      	ldrlt	r3, [r4, #0]
 801d706:	3404      	addlt	r4, #4
 801d708:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d70c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d710:	bfb8      	it	lt
 801d712:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801d714:	b1d9      	cbz	r1, 801d74e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801d716:	880b      	ldrh	r3, [r1, #0]
 801d718:	2b69      	cmp	r3, #105	; 0x69
 801d71a:	d01f      	beq.n	801d75c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d71c:	d82f      	bhi.n	801d77e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801d71e:	2b58      	cmp	r3, #88	; 0x58
 801d720:	d01c      	beq.n	801d75c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d722:	d818      	bhi.n	801d756 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801d724:	2b25      	cmp	r3, #37	; 0x25
 801d726:	d034      	beq.n	801d792 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801d728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d72a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801d72e:	f1bb 0f00 	cmp.w	fp, #0
 801d732:	f000 80b7 	beq.w	801d8a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801d736:	f8bb 5000 	ldrh.w	r5, [fp]
 801d73a:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801d73e:	3301      	adds	r3, #1
 801d740:	930d      	str	r3, [sp, #52]	; 0x34
 801d742:	e029      	b.n	801d798 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d744:	b10d      	cbz	r5, 801d74a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801d746:	782a      	ldrb	r2, [r5, #0]
 801d748:	e786      	b.n	801d658 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d74a:	462a      	mov	r2, r5
 801d74c:	e784      	b.n	801d658 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d74e:	2a00      	cmp	r2, #0
 801d750:	d0ea      	beq.n	801d728 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d752:	7813      	ldrb	r3, [r2, #0]
 801d754:	e7e0      	b.n	801d718 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801d756:	3b63      	subs	r3, #99	; 0x63
 801d758:	2b01      	cmp	r3, #1
 801d75a:	d8e5      	bhi.n	801d728 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d75c:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801d760:	b329      	cbz	r1, 801d7ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801d762:	880b      	ldrh	r3, [r1, #0]
 801d764:	2b69      	cmp	r3, #105	; 0x69
 801d766:	d063      	beq.n	801d830 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d768:	d825      	bhi.n	801d7b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801d76a:	2b63      	cmp	r3, #99	; 0x63
 801d76c:	d038      	beq.n	801d7e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801d76e:	2b64      	cmp	r3, #100	; 0x64
 801d770:	d05e      	beq.n	801d830 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d772:	2b58      	cmp	r3, #88	; 0x58
 801d774:	d07a      	beq.n	801d86c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801d776:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801d77a:	4625      	mov	r5, r4
 801d77c:	e036      	b.n	801d7ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d77e:	2b73      	cmp	r3, #115	; 0x73
 801d780:	d0ec      	beq.n	801d75c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d782:	d802      	bhi.n	801d78a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801d784:	2b6f      	cmp	r3, #111	; 0x6f
 801d786:	d1cf      	bne.n	801d728 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d788:	e7e8      	b.n	801d75c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d78a:	2b75      	cmp	r3, #117	; 0x75
 801d78c:	d0e6      	beq.n	801d75c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d78e:	2b78      	cmp	r3, #120	; 0x78
 801d790:	e7f9      	b.n	801d786 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801d792:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d794:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801d798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d79a:	b10b      	cbz	r3, 801d7a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801d79c:	3302      	adds	r3, #2
 801d79e:	9309      	str	r3, [sp, #36]	; 0x24
 801d7a0:	9b08      	ldr	r3, [sp, #32]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	f43f af2f 	beq.w	801d606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d7a8:	3301      	adds	r3, #1
 801d7aa:	9308      	str	r3, [sp, #32]
 801d7ac:	e72b      	b.n	801d606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d7ae:	2a00      	cmp	r2, #0
 801d7b0:	d0e1      	beq.n	801d776 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d7b2:	7813      	ldrb	r3, [r2, #0]
 801d7b4:	e7d6      	b.n	801d764 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801d7b6:	2b73      	cmp	r3, #115	; 0x73
 801d7b8:	d036      	beq.n	801d828 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801d7ba:	d807      	bhi.n	801d7cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801d7bc:	2b6f      	cmp	r3, #111	; 0x6f
 801d7be:	d1da      	bne.n	801d776 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d7c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d7c2:	1d25      	adds	r5, r4, #4
 801d7c4:	2308      	movs	r3, #8
 801d7c6:	eba8 0202 	sub.w	r2, r8, r2
 801d7ca:	e049      	b.n	801d860 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d7cc:	2b75      	cmp	r3, #117	; 0x75
 801d7ce:	d042      	beq.n	801d856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801d7d0:	2b78      	cmp	r3, #120	; 0x78
 801d7d2:	d1d0      	bne.n	801d776 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d7d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d7d6:	1d25      	adds	r5, r4, #4
 801d7d8:	2310      	movs	r3, #16
 801d7da:	eba8 0202 	sub.w	r2, r8, r2
 801d7de:	e03f      	b.n	801d860 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d7e0:	7823      	ldrb	r3, [r4, #0]
 801d7e2:	1d25      	adds	r5, r4, #4
 801d7e4:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801d7e8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7ee:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	d051      	beq.n	801d89a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801d7f6:	881a      	ldrh	r2, [r3, #0]
 801d7f8:	a80d      	add	r0, sp, #52	; 0x34
 801d7fa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801d7fe:	462c      	mov	r4, r5
 801d800:	9005      	str	r0, [sp, #20]
 801d802:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801d806:	9004      	str	r0, [sp, #16]
 801d808:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d80a:	9003      	str	r0, [sp, #12]
 801d80c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801d810:	9002      	str	r0, [sp, #8]
 801d812:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d814:	9001      	str	r0, [sp, #4]
 801d816:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801d81a:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801d81e:	9000      	str	r0, [sp, #0]
 801d820:	a810      	add	r0, sp, #64	; 0x40
 801d822:	f7ff fd49 	bl	801d2b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801d826:	e7b7      	b.n	801d798 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d828:	1d25      	adds	r5, r4, #4
 801d82a:	6823      	ldr	r3, [r4, #0]
 801d82c:	9310      	str	r3, [sp, #64]	; 0x40
 801d82e:	e7dd      	b.n	801d7ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d832:	230a      	movs	r3, #10
 801d834:	4649      	mov	r1, r9
 801d836:	6820      	ldr	r0, [r4, #0]
 801d838:	eba8 0202 	sub.w	r2, r8, r2
 801d83c:	1d25      	adds	r5, r4, #4
 801d83e:	b292      	uxth	r2, r2
 801d840:	f7ff fd08 	bl	801d254 <_ZN8touchgfx7Unicode4itoaElPtti>
 801d844:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d848:	2b2d      	cmp	r3, #45	; 0x2d
 801d84a:	d1cf      	bne.n	801d7ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d84c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d850:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d852:	3302      	adds	r3, #2
 801d854:	e7ea      	b.n	801d82c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801d856:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d858:	1d25      	adds	r5, r4, #4
 801d85a:	230a      	movs	r3, #10
 801d85c:	eba8 0202 	sub.w	r2, r8, r2
 801d860:	b292      	uxth	r2, r2
 801d862:	4649      	mov	r1, r9
 801d864:	6820      	ldr	r0, [r4, #0]
 801d866:	f7ff fcd7 	bl	801d218 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d86a:	e7bf      	b.n	801d7ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d86c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d86e:	2310      	movs	r3, #16
 801d870:	4649      	mov	r1, r9
 801d872:	6820      	ldr	r0, [r4, #0]
 801d874:	eba8 0202 	sub.w	r2, r8, r2
 801d878:	1d25      	adds	r5, r4, #4
 801d87a:	b292      	uxth	r2, r2
 801d87c:	f7ff fccc 	bl	801d218 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d880:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801d884:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801d888:	2b00      	cmp	r3, #0
 801d88a:	d0af      	beq.n	801d7ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d88c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801d890:	2919      	cmp	r1, #25
 801d892:	d8f7      	bhi.n	801d884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d894:	3b20      	subs	r3, #32
 801d896:	8013      	strh	r3, [r2, #0]
 801d898:	e7f4      	b.n	801d884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d89a:	9a08      	ldr	r2, [sp, #32]
 801d89c:	2a00      	cmp	r2, #0
 801d89e:	d0ab      	beq.n	801d7f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d8a0:	7812      	ldrb	r2, [r2, #0]
 801d8a2:	e7a9      	b.n	801d7f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d8a4:	2d00      	cmp	r5, #0
 801d8a6:	f43f af48 	beq.w	801d73a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801d8aa:	782d      	ldrb	r5, [r5, #0]
 801d8ac:	e745      	b.n	801d73a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801d8ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801d8ae:	b507      	push	{r0, r1, r2, lr}
 801d8b0:	9300      	str	r3, [sp, #0]
 801d8b2:	4613      	mov	r3, r2
 801d8b4:	2200      	movs	r2, #0
 801d8b6:	f7ff fe92 	bl	801d5de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801d8ba:	b003      	add	sp, #12
 801d8bc:	f85d fb04 	ldr.w	pc, [sp], #4

0801d8c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801d8c0:	b40c      	push	{r2, r3}
 801d8c2:	b507      	push	{r0, r1, r2, lr}
 801d8c4:	ab04      	add	r3, sp, #16
 801d8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d8ca:	9301      	str	r3, [sp, #4]
 801d8cc:	f7ff ffef 	bl	801d8ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801d8d0:	b003      	add	sp, #12
 801d8d2:	f85d eb04 	ldr.w	lr, [sp], #4
 801d8d6:	b002      	add	sp, #8
 801d8d8:	4770      	bx	lr
	...

0801d8dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801d8dc:	4b01      	ldr	r3, [pc, #4]	; (801d8e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801d8de:	6018      	str	r0, [r3, #0]
 801d8e0:	4770      	bx	lr
 801d8e2:	bf00      	nop
 801d8e4:	200059a4 	.word	0x200059a4

0801d8e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801d8e8:	4b06      	ldr	r3, [pc, #24]	; (801d904 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801d8ea:	881a      	ldrh	r2, [r3, #0]
 801d8ec:	4282      	cmp	r2, r0
 801d8ee:	d807      	bhi.n	801d900 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801d8f0:	4b05      	ldr	r3, [pc, #20]	; (801d908 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801d8f2:	881b      	ldrh	r3, [r3, #0]
 801d8f4:	4413      	add	r3, r2
 801d8f6:	4298      	cmp	r0, r3
 801d8f8:	bfac      	ite	ge
 801d8fa:	2000      	movge	r0, #0
 801d8fc:	2001      	movlt	r0, #1
 801d8fe:	4770      	bx	lr
 801d900:	2000      	movs	r0, #0
 801d902:	4770      	bx	lr
 801d904:	200059c4 	.word	0x200059c4
 801d908:	200059c8 	.word	0x200059c8

0801d90c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801d90c:	b508      	push	{r3, lr}
 801d90e:	4601      	mov	r1, r0
 801d910:	f7ff ffea 	bl	801d8e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d914:	b118      	cbz	r0, 801d91e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801d916:	4b02      	ldr	r3, [pc, #8]	; (801d920 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801d918:	681b      	ldr	r3, [r3, #0]
 801d91a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801d91e:	bd08      	pop	{r3, pc}
 801d920:	200059a8 	.word	0x200059a8

0801d924 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801d924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d928:	4d28      	ldr	r5, [pc, #160]	; (801d9cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801d92a:	682b      	ldr	r3, [r5, #0]
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	d04a      	beq.n	801d9c6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801d930:	4a27      	ldr	r2, [pc, #156]	; (801d9d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801d932:	4e28      	ldr	r6, [pc, #160]	; (801d9d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801d934:	8810      	ldrh	r0, [r2, #0]
 801d936:	f8b6 8000 	ldrh.w	r8, [r6]
 801d93a:	4c27      	ldr	r4, [pc, #156]	; (801d9d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801d93c:	4440      	add	r0, r8
 801d93e:	4f27      	ldr	r7, [pc, #156]	; (801d9dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801d940:	1c41      	adds	r1, r0, #1
 801d942:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801d946:	f021 0101 	bic.w	r1, r1, #1
 801d94a:	eb03 020e 	add.w	r2, r3, lr
 801d94e:	0409      	lsls	r1, r1, #16
 801d950:	6022      	str	r2, [r4, #0]
 801d952:	0c09      	lsrs	r1, r1, #16
 801d954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801d958:	eb0e 010c 	add.w	r1, lr, ip
 801d95c:	185a      	adds	r2, r3, r1
 801d95e:	603a      	str	r2, [r7, #0]
 801d960:	220e      	movs	r2, #14
 801d962:	fb02 f208 	mul.w	r2, r2, r8
 801d966:	3203      	adds	r2, #3
 801d968:	f022 0203 	bic.w	r2, r2, #3
 801d96c:	4411      	add	r1, r2
 801d96e:	440b      	add	r3, r1
 801d970:	491b      	ldr	r1, [pc, #108]	; (801d9e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801d972:	600b      	str	r3, [r1, #0]
 801d974:	2300      	movs	r3, #0
 801d976:	491b      	ldr	r1, [pc, #108]	; (801d9e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801d978:	800b      	strh	r3, [r1, #0]
 801d97a:	491b      	ldr	r1, [pc, #108]	; (801d9e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801d97c:	6809      	ldr	r1, [r1, #0]
 801d97e:	eba1 010e 	sub.w	r1, r1, lr
 801d982:	eba1 010c 	sub.w	r1, r1, ip
 801d986:	469c      	mov	ip, r3
 801d988:	1a8a      	subs	r2, r1, r2
 801d98a:	4918      	ldr	r1, [pc, #96]	; (801d9ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801d98c:	600a      	str	r2, [r1, #0]
 801d98e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d992:	4a17      	ldr	r2, [pc, #92]	; (801d9f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801d994:	8013      	strh	r3, [r2, #0]
 801d996:	4283      	cmp	r3, r0
 801d998:	d10d      	bne.n	801d9b6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801d99a:	8835      	ldrh	r5, [r6, #0]
 801d99c:	2300      	movs	r3, #0
 801d99e:	6838      	ldr	r0, [r7, #0]
 801d9a0:	240e      	movs	r4, #14
 801d9a2:	429d      	cmp	r5, r3
 801d9a4:	d90f      	bls.n	801d9c6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801d9a6:	fb04 0203 	mla	r2, r4, r3, r0
 801d9aa:	3301      	adds	r3, #1
 801d9ac:	7b11      	ldrb	r1, [r2, #12]
 801d9ae:	f36f 1145 	bfc	r1, #5, #1
 801d9b2:	7311      	strb	r1, [r2, #12]
 801d9b4:	e7f5      	b.n	801d9a2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801d9b6:	682a      	ldr	r2, [r5, #0]
 801d9b8:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801d9bc:	6822      	ldr	r2, [r4, #0]
 801d9be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801d9c2:	3301      	adds	r3, #1
 801d9c4:	e7e7      	b.n	801d996 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801d9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9ca:	bf00      	nop
 801d9cc:	200059a8 	.word	0x200059a8
 801d9d0:	200059c4 	.word	0x200059c4
 801d9d4:	200059c8 	.word	0x200059c8
 801d9d8:	200059bc 	.word	0x200059bc
 801d9dc:	200059ac 	.word	0x200059ac
 801d9e0:	200059b4 	.word	0x200059b4
 801d9e4:	200059c6 	.word	0x200059c6
 801d9e8:	200059b0 	.word	0x200059b0
 801d9ec:	200059c0 	.word	0x200059c0
 801d9f0:	200059b8 	.word	0x200059b8

0801d9f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d9f4:	4b10      	ldr	r3, [pc, #64]	; (801da38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801d9f6:	b510      	push	{r4, lr}
 801d9f8:	681b      	ldr	r3, [r3, #0]
 801d9fa:	b9db      	cbnz	r3, 801da34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d9fc:	b1d1      	cbz	r1, 801da34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d9fe:	4b0f      	ldr	r3, [pc, #60]	; (801da3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801da00:	240e      	movs	r4, #14
 801da02:	801a      	strh	r2, [r3, #0]
 801da04:	b292      	uxth	r2, r2
 801da06:	4b0e      	ldr	r3, [pc, #56]	; (801da40 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801da08:	881b      	ldrh	r3, [r3, #0]
 801da0a:	4413      	add	r3, r2
 801da0c:	4362      	muls	r2, r4
 801da0e:	2406      	movs	r4, #6
 801da10:	fb04 2203 	mla	r2, r4, r3, r2
 801da14:	428a      	cmp	r2, r1
 801da16:	d305      	bcc.n	801da24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801da18:	4b0a      	ldr	r3, [pc, #40]	; (801da44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801da1a:	2137      	movs	r1, #55	; 0x37
 801da1c:	4a0a      	ldr	r2, [pc, #40]	; (801da48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801da1e:	480b      	ldr	r0, [pc, #44]	; (801da4c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801da20:	f00b fe58 	bl	80296d4 <__assert_func>
 801da24:	4b0a      	ldr	r3, [pc, #40]	; (801da50 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801da26:	6019      	str	r1, [r3, #0]
 801da28:	4b0a      	ldr	r3, [pc, #40]	; (801da54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801da2a:	6018      	str	r0, [r3, #0]
 801da2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da30:	f7ff bf78 	b.w	801d924 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801da34:	bd10      	pop	{r4, pc}
 801da36:	bf00      	nop
 801da38:	200059b4 	.word	0x200059b4
 801da3c:	200059c8 	.word	0x200059c8
 801da40:	200059c4 	.word	0x200059c4
 801da44:	0802dd5d 	.word	0x0802dd5d
 801da48:	0802ddb6 	.word	0x0802ddb6
 801da4c:	0802dd38 	.word	0x0802dd38
 801da50:	200059b0 	.word	0x200059b0
 801da54:	200059a8 	.word	0x200059a8

0801da58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801da58:	b470      	push	{r4, r5, r6}
 801da5a:	4c07      	ldr	r4, [pc, #28]	; (801da78 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801da5c:	4605      	mov	r5, r0
 801da5e:	4610      	mov	r0, r2
 801da60:	9a03      	ldr	r2, [sp, #12]
 801da62:	6826      	ldr	r6, [r4, #0]
 801da64:	b936      	cbnz	r6, 801da74 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801da66:	6025      	str	r5, [r4, #0]
 801da68:	4c04      	ldr	r4, [pc, #16]	; (801da7c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801da6a:	8021      	strh	r1, [r4, #0]
 801da6c:	4619      	mov	r1, r3
 801da6e:	bc70      	pop	{r4, r5, r6}
 801da70:	f7ff bfc0 	b.w	801d9f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801da74:	bc70      	pop	{r4, r5, r6}
 801da76:	4770      	bx	lr
 801da78:	200059cc 	.word	0x200059cc
 801da7c:	200059c4 	.word	0x200059c4

0801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801da80:	b508      	push	{r3, lr}
 801da82:	4b14      	ldr	r3, [pc, #80]	; (801dad4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801da84:	6819      	ldr	r1, [r3, #0]
 801da86:	b931      	cbnz	r1, 801da96 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801da88:	4b13      	ldr	r3, [pc, #76]	; (801dad8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801da8a:	f240 3187 	movw	r1, #903	; 0x387
 801da8e:	4a13      	ldr	r2, [pc, #76]	; (801dadc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801da90:	4813      	ldr	r0, [pc, #76]	; (801dae0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801da92:	f00b fe1f 	bl	80296d4 <__assert_func>
 801da96:	4a13      	ldr	r2, [pc, #76]	; (801dae4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801da98:	8803      	ldrh	r3, [r0, #0]
 801da9a:	8812      	ldrh	r2, [r2, #0]
 801da9c:	4293      	cmp	r3, r2
 801da9e:	d204      	bcs.n	801daaa <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801daa0:	2214      	movs	r2, #20
 801daa2:	fb02 1303 	mla	r3, r2, r3, r1
 801daa6:	8918      	ldrh	r0, [r3, #8]
 801daa8:	bd08      	pop	{r3, pc}
 801daaa:	490f      	ldr	r1, [pc, #60]	; (801dae8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801daac:	8809      	ldrh	r1, [r1, #0]
 801daae:	4411      	add	r1, r2
 801dab0:	428b      	cmp	r3, r1
 801dab2:	da06      	bge.n	801dac2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801dab4:	1a9b      	subs	r3, r3, r2
 801dab6:	4a0d      	ldr	r2, [pc, #52]	; (801daec <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801dab8:	210e      	movs	r1, #14
 801daba:	6812      	ldr	r2, [r2, #0]
 801dabc:	fb01 2303 	mla	r3, r1, r3, r2
 801dac0:	e7f1      	b.n	801daa6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801dac2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dac6:	4293      	cmp	r3, r2
 801dac8:	bf0a      	itet	eq
 801daca:	4b09      	ldreq	r3, [pc, #36]	; (801daf0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801dacc:	2000      	movne	r0, #0
 801dace:	8818      	ldrheq	r0, [r3, #0]
 801dad0:	e7ea      	b.n	801daa8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801dad2:	bf00      	nop
 801dad4:	200059cc 	.word	0x200059cc
 801dad8:	0802c26c 	.word	0x0802c26c
 801dadc:	0802de63 	.word	0x0802de63
 801dae0:	0802dd38 	.word	0x0802dd38
 801dae4:	200059c4 	.word	0x200059c4
 801dae8:	200059c8 	.word	0x200059c8
 801daec:	200059ac 	.word	0x200059ac
 801daf0:	20005938 	.word	0x20005938

0801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801daf4:	b508      	push	{r3, lr}
 801daf6:	4b14      	ldr	r3, [pc, #80]	; (801db48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801daf8:	6819      	ldr	r1, [r3, #0]
 801dafa:	b931      	cbnz	r1, 801db0a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801dafc:	4b13      	ldr	r3, [pc, #76]	; (801db4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dafe:	f240 319b 	movw	r1, #923	; 0x39b
 801db02:	4a13      	ldr	r2, [pc, #76]	; (801db50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801db04:	4813      	ldr	r0, [pc, #76]	; (801db54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801db06:	f00b fde5 	bl	80296d4 <__assert_func>
 801db0a:	4a13      	ldr	r2, [pc, #76]	; (801db58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801db0c:	8803      	ldrh	r3, [r0, #0]
 801db0e:	8812      	ldrh	r2, [r2, #0]
 801db10:	4293      	cmp	r3, r2
 801db12:	d204      	bcs.n	801db1e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801db14:	2214      	movs	r2, #20
 801db16:	fb02 1303 	mla	r3, r2, r3, r1
 801db1a:	8958      	ldrh	r0, [r3, #10]
 801db1c:	bd08      	pop	{r3, pc}
 801db1e:	490f      	ldr	r1, [pc, #60]	; (801db5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801db20:	8809      	ldrh	r1, [r1, #0]
 801db22:	4411      	add	r1, r2
 801db24:	428b      	cmp	r3, r1
 801db26:	da06      	bge.n	801db36 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801db28:	1a9b      	subs	r3, r3, r2
 801db2a:	4a0d      	ldr	r2, [pc, #52]	; (801db60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801db2c:	210e      	movs	r1, #14
 801db2e:	6812      	ldr	r2, [r2, #0]
 801db30:	fb01 2303 	mla	r3, r1, r3, r2
 801db34:	e7f1      	b.n	801db1a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801db36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801db3a:	4293      	cmp	r3, r2
 801db3c:	bf0a      	itet	eq
 801db3e:	4b09      	ldreq	r3, [pc, #36]	; (801db64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801db40:	2000      	movne	r0, #0
 801db42:	8818      	ldrheq	r0, [r3, #0]
 801db44:	e7ea      	b.n	801db1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801db46:	bf00      	nop
 801db48:	200059cc 	.word	0x200059cc
 801db4c:	0802c26c 	.word	0x0802c26c
 801db50:	0802de8f 	.word	0x0802de8f
 801db54:	0802dd38 	.word	0x0802dd38
 801db58:	200059c4 	.word	0x200059c4
 801db5c:	200059c8 	.word	0x200059c8
 801db60:	200059ac 	.word	0x200059ac
 801db64:	2000593a 	.word	0x2000593a

0801db68 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801db68:	4b23      	ldr	r3, [pc, #140]	; (801dbf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801db6a:	b510      	push	{r4, lr}
 801db6c:	681c      	ldr	r4, [r3, #0]
 801db6e:	b934      	cbnz	r4, 801db7e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801db70:	4b22      	ldr	r3, [pc, #136]	; (801dbfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801db72:	f240 31af 	movw	r1, #943	; 0x3af
 801db76:	4a22      	ldr	r2, [pc, #136]	; (801dc00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801db78:	4822      	ldr	r0, [pc, #136]	; (801dc04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801db7a:	f00b fdab 	bl	80296d4 <__assert_func>
 801db7e:	4a22      	ldr	r2, [pc, #136]	; (801dc08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801db80:	880b      	ldrh	r3, [r1, #0]
 801db82:	8812      	ldrh	r2, [r2, #0]
 801db84:	4293      	cmp	r3, r2
 801db86:	d211      	bcs.n	801dbac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801db88:	2214      	movs	r2, #20
 801db8a:	fb02 4303 	mla	r3, r2, r3, r4
 801db8e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801db92:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801db96:	8a1a      	ldrh	r2, [r3, #16]
 801db98:	8a5b      	ldrh	r3, [r3, #18]
 801db9a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801db9e:	8004      	strh	r4, [r0, #0]
 801dba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dba4:	8041      	strh	r1, [r0, #2]
 801dba6:	8082      	strh	r2, [r0, #4]
 801dba8:	80c3      	strh	r3, [r0, #6]
 801dbaa:	e00e      	b.n	801dbca <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801dbac:	4917      	ldr	r1, [pc, #92]	; (801dc0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801dbae:	8809      	ldrh	r1, [r1, #0]
 801dbb0:	4411      	add	r1, r2
 801dbb2:	428b      	cmp	r3, r1
 801dbb4:	da0a      	bge.n	801dbcc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801dbb6:	1a9b      	subs	r3, r3, r2
 801dbb8:	4a15      	ldr	r2, [pc, #84]	; (801dc10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801dbba:	210e      	movs	r1, #14
 801dbbc:	6812      	ldr	r2, [r2, #0]
 801dbbe:	fb01 2303 	mla	r3, r1, r3, r2
 801dbc2:	681a      	ldr	r2, [r3, #0]
 801dbc4:	6002      	str	r2, [r0, #0]
 801dbc6:	685a      	ldr	r2, [r3, #4]
 801dbc8:	6042      	str	r2, [r0, #4]
 801dbca:	bd10      	pop	{r4, pc}
 801dbcc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dbd0:	4293      	cmp	r3, r2
 801dbd2:	d10b      	bne.n	801dbec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801dbd4:	4b0f      	ldr	r3, [pc, #60]	; (801dc14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801dbd6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dbda:	4b0f      	ldr	r3, [pc, #60]	; (801dc18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801dbdc:	8081      	strh	r1, [r0, #4]
 801dbde:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dbe2:	2300      	movs	r3, #0
 801dbe4:	80c2      	strh	r2, [r0, #6]
 801dbe6:	8003      	strh	r3, [r0, #0]
 801dbe8:	8043      	strh	r3, [r0, #2]
 801dbea:	e7ee      	b.n	801dbca <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801dbec:	2300      	movs	r3, #0
 801dbee:	8003      	strh	r3, [r0, #0]
 801dbf0:	8043      	strh	r3, [r0, #2]
 801dbf2:	8083      	strh	r3, [r0, #4]
 801dbf4:	e7d8      	b.n	801dba8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801dbf6:	bf00      	nop
 801dbf8:	200059cc 	.word	0x200059cc
 801dbfc:	0802c26c 	.word	0x0802c26c
 801dc00:	0802ddfc 	.word	0x0802ddfc
 801dc04:	0802dd38 	.word	0x0802dd38
 801dc08:	200059c4 	.word	0x200059c4
 801dc0c:	200059c8 	.word	0x200059c8
 801dc10:	200059ac 	.word	0x200059ac
 801dc14:	20005938 	.word	0x20005938
 801dc18:	2000593a 	.word	0x2000593a

0801dc1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801dc1c:	4b18      	ldr	r3, [pc, #96]	; (801dc80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801dc1e:	681b      	ldr	r3, [r3, #0]
 801dc20:	b34b      	cbz	r3, 801dc76 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801dc22:	4a18      	ldr	r2, [pc, #96]	; (801dc84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801dc24:	8800      	ldrh	r0, [r0, #0]
 801dc26:	8812      	ldrh	r2, [r2, #0]
 801dc28:	4290      	cmp	r0, r2
 801dc2a:	d211      	bcs.n	801dc50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801dc2c:	2214      	movs	r2, #20
 801dc2e:	fb02 3300 	mla	r3, r2, r0, r3
 801dc32:	8a1a      	ldrh	r2, [r3, #16]
 801dc34:	8919      	ldrh	r1, [r3, #8]
 801dc36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801dc3a:	428a      	cmp	r2, r1
 801dc3c:	db1d      	blt.n	801dc7a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801dc3e:	8a58      	ldrh	r0, [r3, #18]
 801dc40:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801dc44:	895b      	ldrh	r3, [r3, #10]
 801dc46:	4298      	cmp	r0, r3
 801dc48:	bfac      	ite	ge
 801dc4a:	2000      	movge	r0, #0
 801dc4c:	2001      	movlt	r0, #1
 801dc4e:	4770      	bx	lr
 801dc50:	4b0d      	ldr	r3, [pc, #52]	; (801dc88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801dc52:	881b      	ldrh	r3, [r3, #0]
 801dc54:	4413      	add	r3, r2
 801dc56:	4298      	cmp	r0, r3
 801dc58:	da0d      	bge.n	801dc76 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801dc5a:	4b0c      	ldr	r3, [pc, #48]	; (801dc8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801dc5c:	1a80      	subs	r0, r0, r2
 801dc5e:	220e      	movs	r2, #14
 801dc60:	681b      	ldr	r3, [r3, #0]
 801dc62:	fb02 3300 	mla	r3, r2, r0, r3
 801dc66:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801dc6a:	891a      	ldrh	r2, [r3, #8]
 801dc6c:	4291      	cmp	r1, r2
 801dc6e:	db04      	blt.n	801dc7a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801dc70:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801dc74:	e7e6      	b.n	801dc44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801dc76:	2000      	movs	r0, #0
 801dc78:	4770      	bx	lr
 801dc7a:	2001      	movs	r0, #1
 801dc7c:	4770      	bx	lr
 801dc7e:	bf00      	nop
 801dc80:	200059cc 	.word	0x200059cc
 801dc84:	200059c4 	.word	0x200059c4
 801dc88:	200059c8 	.word	0x200059c8
 801dc8c:	200059ac 	.word	0x200059ac

0801dc90 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801dc90:	b508      	push	{r3, lr}
 801dc92:	4b12      	ldr	r3, [pc, #72]	; (801dcdc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801dc94:	6819      	ldr	r1, [r3, #0]
 801dc96:	b931      	cbnz	r1, 801dca6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801dc98:	4b11      	ldr	r3, [pc, #68]	; (801dce0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801dc9a:	f240 31d3 	movw	r1, #979	; 0x3d3
 801dc9e:	4a11      	ldr	r2, [pc, #68]	; (801dce4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801dca0:	4811      	ldr	r0, [pc, #68]	; (801dce8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801dca2:	f00b fd17 	bl	80296d4 <__assert_func>
 801dca6:	8803      	ldrh	r3, [r0, #0]
 801dca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dcac:	4293      	cmp	r3, r2
 801dcae:	d012      	beq.n	801dcd6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801dcb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dcb4:	4293      	cmp	r3, r2
 801dcb6:	d103      	bne.n	801dcc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801dcb8:	4b0c      	ldr	r3, [pc, #48]	; (801dcec <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801dcbe:	bd08      	pop	{r3, pc}
 801dcc0:	4a0b      	ldr	r2, [pc, #44]	; (801dcf0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801dcc2:	6812      	ldr	r2, [r2, #0]
 801dcc4:	b11a      	cbz	r2, 801dcce <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801dcc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dcca:	2800      	cmp	r0, #0
 801dccc:	d1f7      	bne.n	801dcbe <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801dcce:	2214      	movs	r2, #20
 801dcd0:	4353      	muls	r3, r2
 801dcd2:	58c8      	ldr	r0, [r1, r3]
 801dcd4:	e7f3      	b.n	801dcbe <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801dcd6:	2000      	movs	r0, #0
 801dcd8:	e7f1      	b.n	801dcbe <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801dcda:	bf00      	nop
 801dcdc:	200059cc 	.word	0x200059cc
 801dce0:	0802c26c 	.word	0x0802c26c
 801dce4:	0802de32 	.word	0x0802de32
 801dce8:	0802dd38 	.word	0x0802dd38
 801dcec:	20005944 	.word	0x20005944
 801dcf0:	200059a8 	.word	0x200059a8

0801dcf4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801dcf4:	8802      	ldrh	r2, [r0, #0]
 801dcf6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801dcfa:	429a      	cmp	r2, r3
 801dcfc:	d845      	bhi.n	801dd8a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801dcfe:	4b24      	ldr	r3, [pc, #144]	; (801dd90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801dd00:	8818      	ldrh	r0, [r3, #0]
 801dd02:	4282      	cmp	r2, r0
 801dd04:	d221      	bcs.n	801dd4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801dd06:	4b23      	ldr	r3, [pc, #140]	; (801dd94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801dd08:	6819      	ldr	r1, [r3, #0]
 801dd0a:	2314      	movs	r3, #20
 801dd0c:	fb03 1302 	mla	r3, r3, r2, r1
 801dd10:	6858      	ldr	r0, [r3, #4]
 801dd12:	2800      	cmp	r0, #0
 801dd14:	d03a      	beq.n	801dd8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801dd16:	4920      	ldr	r1, [pc, #128]	; (801dd98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801dd18:	6809      	ldr	r1, [r1, #0]
 801dd1a:	2900      	cmp	r1, #0
 801dd1c:	d036      	beq.n	801dd8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801dd1e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801dd22:	2900      	cmp	r1, #0
 801dd24:	d032      	beq.n	801dd8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801dd26:	891a      	ldrh	r2, [r3, #8]
 801dd28:	8958      	ldrh	r0, [r3, #10]
 801dd2a:	4350      	muls	r0, r2
 801dd2c:	7c5a      	ldrb	r2, [r3, #17]
 801dd2e:	7cdb      	ldrb	r3, [r3, #19]
 801dd30:	0952      	lsrs	r2, r2, #5
 801dd32:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801dd36:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801dd3a:	2b0b      	cmp	r3, #11
 801dd3c:	bf18      	it	ne
 801dd3e:	0040      	lslne	r0, r0, #1
 801dd40:	3003      	adds	r0, #3
 801dd42:	f020 0003 	bic.w	r0, r0, #3
 801dd46:	4408      	add	r0, r1
 801dd48:	4770      	bx	lr
 801dd4a:	4b14      	ldr	r3, [pc, #80]	; (801dd9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801dd4c:	881b      	ldrh	r3, [r3, #0]
 801dd4e:	4403      	add	r3, r0
 801dd50:	429a      	cmp	r2, r3
 801dd52:	da1a      	bge.n	801dd8a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801dd54:	4b12      	ldr	r3, [pc, #72]	; (801dda0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801dd56:	1a10      	subs	r0, r2, r0
 801dd58:	210e      	movs	r1, #14
 801dd5a:	681b      	ldr	r3, [r3, #0]
 801dd5c:	fb01 3000 	mla	r0, r1, r0, r3
 801dd60:	7b03      	ldrb	r3, [r0, #12]
 801dd62:	f003 031f 	and.w	r3, r3, #31
 801dd66:	2b0b      	cmp	r3, #11
 801dd68:	d10b      	bne.n	801dd82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801dd6a:	8903      	ldrh	r3, [r0, #8]
 801dd6c:	8940      	ldrh	r0, [r0, #10]
 801dd6e:	4358      	muls	r0, r3
 801dd70:	4b09      	ldr	r3, [pc, #36]	; (801dd98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801dd72:	3003      	adds	r0, #3
 801dd74:	6819      	ldr	r1, [r3, #0]
 801dd76:	f020 0303 	bic.w	r3, r0, #3
 801dd7a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801dd7e:	4418      	add	r0, r3
 801dd80:	4770      	bx	lr
 801dd82:	2b0d      	cmp	r3, #13
 801dd84:	d101      	bne.n	801dd8a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801dd86:	300d      	adds	r0, #13
 801dd88:	4770      	bx	lr
 801dd8a:	2000      	movs	r0, #0
 801dd8c:	4770      	bx	lr
 801dd8e:	bf00      	nop
 801dd90:	200059c4 	.word	0x200059c4
 801dd94:	200059cc 	.word	0x200059cc
 801dd98:	200059a8 	.word	0x200059a8
 801dd9c:	200059c8 	.word	0x200059c8
 801dda0:	200059ac 	.word	0x200059ac

0801dda4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801dda4:	4b19      	ldr	r3, [pc, #100]	; (801de0c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801dda6:	6819      	ldr	r1, [r3, #0]
 801dda8:	8803      	ldrh	r3, [r0, #0]
 801ddaa:	b1e9      	cbz	r1, 801dde8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ddac:	4a18      	ldr	r2, [pc, #96]	; (801de10 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ddae:	8812      	ldrh	r2, [r2, #0]
 801ddb0:	429a      	cmp	r2, r3
 801ddb2:	d90a      	bls.n	801ddca <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ddb4:	2214      	movs	r2, #20
 801ddb6:	fb02 1303 	mla	r3, r2, r3, r1
 801ddba:	7c58      	ldrb	r0, [r3, #17]
 801ddbc:	0942      	lsrs	r2, r0, #5
 801ddbe:	7cd8      	ldrb	r0, [r3, #19]
 801ddc0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801ddc4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801ddc8:	4770      	bx	lr
 801ddca:	4912      	ldr	r1, [pc, #72]	; (801de14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801ddcc:	8809      	ldrh	r1, [r1, #0]
 801ddce:	4411      	add	r1, r2
 801ddd0:	428b      	cmp	r3, r1
 801ddd2:	da09      	bge.n	801dde8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ddd4:	1a9b      	subs	r3, r3, r2
 801ddd6:	4a10      	ldr	r2, [pc, #64]	; (801de18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801ddd8:	210e      	movs	r1, #14
 801ddda:	6812      	ldr	r2, [r2, #0]
 801dddc:	fb01 2303 	mla	r3, r1, r3, r2
 801dde0:	7b18      	ldrb	r0, [r3, #12]
 801dde2:	f000 001f 	and.w	r0, r0, #31
 801dde6:	4770      	bx	lr
 801dde8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ddec:	4293      	cmp	r3, r2
 801ddee:	d10a      	bne.n	801de06 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801ddf0:	4b0a      	ldr	r3, [pc, #40]	; (801de1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ddf8:	b10a      	cbz	r2, 801ddfe <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801ddfa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ddfc:	b900      	cbnz	r0, 801de00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801ddfe:	6898      	ldr	r0, [r3, #8]
 801de00:	6803      	ldr	r3, [r0, #0]
 801de02:	6a1b      	ldr	r3, [r3, #32]
 801de04:	4718      	bx	r3
 801de06:	2000      	movs	r0, #0
 801de08:	4770      	bx	lr
 801de0a:	bf00      	nop
 801de0c:	200059cc 	.word	0x200059cc
 801de10:	200059c4 	.word	0x200059c4
 801de14:	200059c8 	.word	0x200059c8
 801de18:	200059ac 	.word	0x200059ac
 801de1c:	20005944 	.word	0x20005944

0801de20 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801de20:	2010      	movs	r0, #16
 801de22:	4770      	bx	lr

0801de24 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801de24:	2000      	movs	r0, #0
 801de26:	4770      	bx	lr

0801de28 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 801de28:	00d2      	lsls	r2, r2, #3
 801de2a:	0209      	lsls	r1, r1, #8
 801de2c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801de30:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801de34:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 801de38:	4310      	orrs	r0, r2
 801de3a:	4770      	bx	lr

0801de3c <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 801de3c:	0a09      	lsrs	r1, r1, #8
 801de3e:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801de42:	4770      	bx	lr

0801de44 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 801de44:	08c9      	lsrs	r1, r1, #3
 801de46:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 801de4a:	4770      	bx	lr

0801de4c <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 801de4c:	00c9      	lsls	r1, r1, #3
 801de4e:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801de52:	4770      	bx	lr

0801de54 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801de54:	2bff      	cmp	r3, #255	; 0xff
 801de56:	d050      	beq.n	801defa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801de58:	2a0b      	cmp	r2, #11
 801de5a:	d04a      	beq.n	801def2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801de5c:	d80e      	bhi.n	801de7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801de5e:	2a03      	cmp	r2, #3
 801de60:	d03f      	beq.n	801dee2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801de62:	d804      	bhi.n	801de6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801de64:	2a01      	cmp	r2, #1
 801de66:	d03e      	beq.n	801dee6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801de68:	d93f      	bls.n	801deea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801de6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801de6c:	4770      	bx	lr
 801de6e:	2a09      	cmp	r2, #9
 801de70:	d03f      	beq.n	801def2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801de72:	d83c      	bhi.n	801deee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801de74:	2a08      	cmp	r2, #8
 801de76:	d03a      	beq.n	801deee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801de78:	2000      	movs	r0, #0
 801de7a:	4770      	bx	lr
 801de7c:	2a2f      	cmp	r2, #47	; 0x2f
 801de7e:	d024      	beq.n	801deca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801de80:	d80d      	bhi.n	801de9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801de82:	2a2d      	cmp	r2, #45	; 0x2d
 801de84:	d014      	beq.n	801deb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801de86:	d826      	bhi.n	801ded6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801de88:	2a2c      	cmp	r2, #44	; 0x2c
 801de8a:	d1f5      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801de8c:	684b      	ldr	r3, [r1, #4]
 801de8e:	781b      	ldrb	r3, [r3, #0]
 801de90:	2b01      	cmp	r3, #1
 801de92:	d018      	beq.n	801dec6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801de94:	d323      	bcc.n	801dede <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801de96:	2b02      	cmp	r3, #2
 801de98:	d1ee      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801de9a:	6880      	ldr	r0, [r0, #8]
 801de9c:	4770      	bx	lr
 801de9e:	2a31      	cmp	r2, #49	; 0x31
 801dea0:	d004      	beq.n	801deac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801dea2:	d328      	bcc.n	801def6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801dea4:	2a32      	cmp	r2, #50	; 0x32
 801dea6:	d026      	beq.n	801def6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801dea8:	2a33      	cmp	r2, #51	; 0x33
 801deaa:	d1e5      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801deac:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801deae:	4770      	bx	lr
 801deb0:	684b      	ldr	r3, [r1, #4]
 801deb2:	781b      	ldrb	r3, [r3, #0]
 801deb4:	2b01      	cmp	r3, #1
 801deb6:	d004      	beq.n	801dec2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801deb8:	d30b      	bcc.n	801ded2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801deba:	2b02      	cmp	r3, #2
 801debc:	d1dc      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801debe:	6900      	ldr	r0, [r0, #16]
 801dec0:	4770      	bx	lr
 801dec2:	6a00      	ldr	r0, [r0, #32]
 801dec4:	4770      	bx	lr
 801dec6:	6980      	ldr	r0, [r0, #24]
 801dec8:	4770      	bx	lr
 801deca:	684b      	ldr	r3, [r1, #4]
 801decc:	781b      	ldrb	r3, [r3, #0]
 801dece:	2b00      	cmp	r3, #0
 801ded0:	d1d2      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ded2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801ded4:	4770      	bx	lr
 801ded6:	684b      	ldr	r3, [r1, #4]
 801ded8:	781b      	ldrb	r3, [r3, #0]
 801deda:	2b00      	cmp	r3, #0
 801dedc:	d1cc      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dede:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801dee0:	4770      	bx	lr
 801dee2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801dee4:	4770      	bx	lr
 801dee6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801dee8:	4770      	bx	lr
 801deea:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801deec:	4770      	bx	lr
 801deee:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801def0:	4770      	bx	lr
 801def2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801def4:	4770      	bx	lr
 801def6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801def8:	4770      	bx	lr
 801defa:	2a0b      	cmp	r2, #11
 801defc:	d049      	beq.n	801df92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801defe:	d80e      	bhi.n	801df1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801df00:	2a03      	cmp	r2, #3
 801df02:	d040      	beq.n	801df86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801df04:	d804      	bhi.n	801df10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801df06:	2a01      	cmp	r2, #1
 801df08:	d03f      	beq.n	801df8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801df0a:	d940      	bls.n	801df8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801df0c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801df0e:	4770      	bx	lr
 801df10:	2a09      	cmp	r2, #9
 801df12:	d03e      	beq.n	801df92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801df14:	d801      	bhi.n	801df1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801df16:	2a08      	cmp	r2, #8
 801df18:	d1ae      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df1a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801df1c:	4770      	bx	lr
 801df1e:	2a2f      	cmp	r2, #47	; 0x2f
 801df20:	d024      	beq.n	801df6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801df22:	d80d      	bhi.n	801df40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801df24:	2a2d      	cmp	r2, #45	; 0x2d
 801df26:	d014      	beq.n	801df52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801df28:	d826      	bhi.n	801df78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801df2a:	2a2c      	cmp	r2, #44	; 0x2c
 801df2c:	d1a4      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df2e:	684b      	ldr	r3, [r1, #4]
 801df30:	781b      	ldrb	r3, [r3, #0]
 801df32:	2b01      	cmp	r3, #1
 801df34:	d018      	beq.n	801df68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801df36:	d324      	bcc.n	801df82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801df38:	2b02      	cmp	r3, #2
 801df3a:	d19d      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df3c:	68c0      	ldr	r0, [r0, #12]
 801df3e:	4770      	bx	lr
 801df40:	2a31      	cmp	r2, #49	; 0x31
 801df42:	d004      	beq.n	801df4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801df44:	d327      	bcc.n	801df96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801df46:	2a32      	cmp	r2, #50	; 0x32
 801df48:	d025      	beq.n	801df96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801df4a:	2a33      	cmp	r2, #51	; 0x33
 801df4c:	d194      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df4e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801df50:	4770      	bx	lr
 801df52:	684b      	ldr	r3, [r1, #4]
 801df54:	781b      	ldrb	r3, [r3, #0]
 801df56:	2b01      	cmp	r3, #1
 801df58:	d004      	beq.n	801df64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801df5a:	d30b      	bcc.n	801df74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801df5c:	2b02      	cmp	r3, #2
 801df5e:	d18b      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df60:	6940      	ldr	r0, [r0, #20]
 801df62:	4770      	bx	lr
 801df64:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801df66:	4770      	bx	lr
 801df68:	69c0      	ldr	r0, [r0, #28]
 801df6a:	4770      	bx	lr
 801df6c:	684b      	ldr	r3, [r1, #4]
 801df6e:	781b      	ldrb	r3, [r3, #0]
 801df70:	2b00      	cmp	r3, #0
 801df72:	d181      	bne.n	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df74:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801df76:	4770      	bx	lr
 801df78:	684b      	ldr	r3, [r1, #4]
 801df7a:	781b      	ldrb	r3, [r3, #0]
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	f47f af7b 	bne.w	801de78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df82:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801df84:	4770      	bx	lr
 801df86:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801df88:	4770      	bx	lr
 801df8a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801df8c:	4770      	bx	lr
 801df8e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801df90:	4770      	bx	lr
 801df92:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801df94:	4770      	bx	lr
 801df96:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801df98:	4770      	bx	lr

0801df9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801df9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df9e:	b087      	sub	sp, #28
 801dfa0:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dfa2:	9205      	str	r2, [sp, #20]
 801dfa4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801dfa8:	9101      	str	r1, [sp, #4]
 801dfaa:	9202      	str	r2, [sp, #8]
 801dfac:	6841      	ldr	r1, [r0, #4]
 801dfae:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801dfb2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801dfb6:	fb01 2404 	mla	r4, r1, r4, r2
 801dfba:	6802      	ldr	r2, [r0, #0]
 801dfbc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dfc0:	f8de 2000 	ldr.w	r2, [lr]
 801dfc4:	9203      	str	r2, [sp, #12]
 801dfc6:	f8de 2004 	ldr.w	r2, [lr, #4]
 801dfca:	3204      	adds	r2, #4
 801dfcc:	9204      	str	r2, [sp, #16]
 801dfce:	9a02      	ldr	r2, [sp, #8]
 801dfd0:	43d6      	mvns	r6, r2
 801dfd2:	b2f6      	uxtb	r6, r6
 801dfd4:	9a01      	ldr	r2, [sp, #4]
 801dfd6:	2a00      	cmp	r2, #0
 801dfd8:	dc03      	bgt.n	801dfe2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801dfda:	9a05      	ldr	r2, [sp, #20]
 801dfdc:	2a00      	cmp	r2, #0
 801dfde:	f340 8129 	ble.w	801e234 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801dfe2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dfe4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801dfe8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801dfec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dfee:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801dff2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	dd0e      	ble.n	801e018 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dffa:	1408      	asrs	r0, r1, #16
 801dffc:	d405      	bmi.n	801e00a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801dffe:	4560      	cmp	r0, ip
 801e000:	da03      	bge.n	801e00a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e002:	1410      	asrs	r0, r2, #16
 801e004:	d401      	bmi.n	801e00a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e006:	42b8      	cmp	r0, r7
 801e008:	db07      	blt.n	801e01a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e00a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e00c:	3b01      	subs	r3, #1
 801e00e:	3402      	adds	r4, #2
 801e010:	4401      	add	r1, r0
 801e012:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e014:	4402      	add	r2, r0
 801e016:	e7ee      	b.n	801dff6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e018:	d071      	beq.n	801e0fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e01a:	1e58      	subs	r0, r3, #1
 801e01c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e01e:	fb05 1500 	mla	r5, r5, r0, r1
 801e022:	142d      	asrs	r5, r5, #16
 801e024:	d45f      	bmi.n	801e0e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e026:	4565      	cmp	r5, ip
 801e028:	da5d      	bge.n	801e0e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e02a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e02c:	fb05 2000 	mla	r0, r5, r0, r2
 801e030:	1400      	asrs	r0, r0, #16
 801e032:	d458      	bmi.n	801e0e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e034:	42b8      	cmp	r0, r7
 801e036:	da56      	bge.n	801e0e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e038:	4699      	mov	r9, r3
 801e03a:	46a2      	mov	sl, r4
 801e03c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e040:	f1b9 0f00 	cmp.w	r9, #0
 801e044:	dd57      	ble.n	801e0f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e046:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e04a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e04e:	9803      	ldr	r0, [sp, #12]
 801e050:	140d      	asrs	r5, r1, #16
 801e052:	f109 39ff 	add.w	r9, r9, #4294967295
 801e056:	fb07 000c 	mla	r0, r7, ip, r0
 801e05a:	5d40      	ldrb	r0, [r0, r5]
 801e05c:	9d04      	ldr	r5, [sp, #16]
 801e05e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e062:	f8ba 5000 	ldrh.w	r5, [sl]
 801e066:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e06a:	122f      	asrs	r7, r5, #8
 801e06c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e070:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e074:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e078:	00ed      	lsls	r5, r5, #3
 801e07a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e07e:	fb17 f706 	smulbb	r7, r7, r6
 801e082:	b2ed      	uxtb	r5, r5
 801e084:	fb18 f806 	smulbb	r8, r8, r6
 801e088:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e08c:	10c7      	asrs	r7, r0, #3
 801e08e:	fb15 f506 	smulbb	r5, r5, r6
 801e092:	00c0      	lsls	r0, r0, #3
 801e094:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e098:	fa1f fc8c 	uxth.w	ip, ip
 801e09c:	b2c0      	uxtb	r0, r0
 801e09e:	fb07 870b 	mla	r7, r7, fp, r8
 801e0a2:	fb00 500b 	mla	r0, r0, fp, r5
 801e0a6:	f10c 0501 	add.w	r5, ip, #1
 801e0aa:	b2bf      	uxth	r7, r7
 801e0ac:	b280      	uxth	r0, r0
 801e0ae:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e0b2:	f107 0801 	add.w	r8, r7, #1
 801e0b6:	1c45      	adds	r5, r0, #1
 801e0b8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e0bc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e0c0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e0c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e0c6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e0ca:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e0ce:	4401      	add	r1, r0
 801e0d0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e0d4:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e0d6:	ea4c 0c05 	orr.w	ip, ip, r5
 801e0da:	4402      	add	r2, r0
 801e0dc:	ea4c 0c08 	orr.w	ip, ip, r8
 801e0e0:	f82a cb02 	strh.w	ip, [sl], #2
 801e0e4:	e7ac      	b.n	801e040 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e0e6:	f04f 0800 	mov.w	r8, #0
 801e0ea:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e0ee:	eb03 0008 	add.w	r0, r3, r8
 801e0f2:	2800      	cmp	r0, #0
 801e0f4:	dc41      	bgt.n	801e17a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e0f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e0fa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e0fe:	9b01      	ldr	r3, [sp, #4]
 801e100:	2b00      	cmp	r3, #0
 801e102:	f340 8097 	ble.w	801e234 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e10a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e10c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e110:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e114:	eef0 6a62 	vmov.f32	s13, s5
 801e118:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e11c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e120:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e124:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e128:	eef0 6a43 	vmov.f32	s13, s6
 801e12c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e130:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e134:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e138:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e13c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e140:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e144:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e148:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e14c:	ee12 2a90 	vmov	r2, s5
 801e150:	eef0 2a47 	vmov.f32	s5, s14
 801e154:	fb92 f3f3 	sdiv	r3, r2, r3
 801e158:	ee13 2a10 	vmov	r2, s6
 801e15c:	9313      	str	r3, [sp, #76]	; 0x4c
 801e15e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e160:	eeb0 3a67 	vmov.f32	s6, s15
 801e164:	fb92 f3f3 	sdiv	r3, r2, r3
 801e168:	9314      	str	r3, [sp, #80]	; 0x50
 801e16a:	9b01      	ldr	r3, [sp, #4]
 801e16c:	9a05      	ldr	r2, [sp, #20]
 801e16e:	3b01      	subs	r3, #1
 801e170:	9301      	str	r3, [sp, #4]
 801e172:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e174:	bf08      	it	eq
 801e176:	4613      	moveq	r3, r2
 801e178:	e72c      	b.n	801dfd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e17a:	140f      	asrs	r7, r1, #16
 801e17c:	d453      	bmi.n	801e226 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e17e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e182:	42bd      	cmp	r5, r7
 801e184:	dd4f      	ble.n	801e226 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e186:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e18a:	d44c      	bmi.n	801e226 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e18c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e190:	4560      	cmp	r0, ip
 801e192:	dd48      	ble.n	801e226 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e194:	9803      	ldr	r0, [sp, #12]
 801e196:	b22d      	sxth	r5, r5
 801e198:	fb0c 0505 	mla	r5, ip, r5, r0
 801e19c:	5de8      	ldrb	r0, [r5, r7]
 801e19e:	9d04      	ldr	r5, [sp, #16]
 801e1a0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e1a4:	f06f 0501 	mvn.w	r5, #1
 801e1a8:	fb05 fb08 	mul.w	fp, r5, r8
 801e1ac:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e1b0:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e1b4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e1b8:	122f      	asrs	r7, r5, #8
 801e1ba:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e1be:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e1c2:	00ed      	lsls	r5, r5, #3
 801e1c4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e1c8:	fb17 f706 	smulbb	r7, r7, r6
 801e1cc:	b2ed      	uxtb	r5, r5
 801e1ce:	fb19 f906 	smulbb	r9, r9, r6
 801e1d2:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e1d6:	10c7      	asrs	r7, r0, #3
 801e1d8:	fb15 f506 	smulbb	r5, r5, r6
 801e1dc:	00c0      	lsls	r0, r0, #3
 801e1de:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e1e2:	fa1f fc8c 	uxth.w	ip, ip
 801e1e6:	b2c0      	uxtb	r0, r0
 801e1e8:	fb07 970a 	mla	r7, r7, sl, r9
 801e1ec:	fb00 500a 	mla	r0, r0, sl, r5
 801e1f0:	f10c 0501 	add.w	r5, ip, #1
 801e1f4:	b2bf      	uxth	r7, r7
 801e1f6:	b280      	uxth	r0, r0
 801e1f8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e1fc:	f107 0901 	add.w	r9, r7, #1
 801e200:	1c45      	adds	r5, r0, #1
 801e202:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e206:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e20a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e20e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e212:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e216:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e21a:	ea4c 0c05 	orr.w	ip, ip, r5
 801e21e:	ea4c 0c09 	orr.w	ip, ip, r9
 801e222:	f824 c00b 	strh.w	ip, [r4, fp]
 801e226:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e228:	f108 38ff 	add.w	r8, r8, #4294967295
 801e22c:	4401      	add	r1, r0
 801e22e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e230:	4402      	add	r2, r0
 801e232:	e75c      	b.n	801e0ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e234:	b007      	add	sp, #28
 801e236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e23a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e23a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e23e:	b085      	sub	sp, #20
 801e240:	4693      	mov	fp, r2
 801e242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e246:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e248:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e24a:	6870      	ldr	r0, [r6, #4]
 801e24c:	9100      	str	r1, [sp, #0]
 801e24e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e252:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e256:	fb00 2404 	mla	r4, r0, r4, r2
 801e25a:	6832      	ldr	r2, [r6, #0]
 801e25c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e260:	682a      	ldr	r2, [r5, #0]
 801e262:	9201      	str	r2, [sp, #4]
 801e264:	686a      	ldr	r2, [r5, #4]
 801e266:	3204      	adds	r2, #4
 801e268:	9202      	str	r2, [sp, #8]
 801e26a:	9a00      	ldr	r2, [sp, #0]
 801e26c:	2a00      	cmp	r2, #0
 801e26e:	dc03      	bgt.n	801e278 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e270:	f1bb 0f00 	cmp.w	fp, #0
 801e274:	f340 80a0 	ble.w	801e3b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e278:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e27a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e27e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e282:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e284:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e288:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	dd0c      	ble.n	801e2aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e290:	1406      	asrs	r6, r0, #16
 801e292:	d405      	bmi.n	801e2a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e294:	454e      	cmp	r6, r9
 801e296:	da03      	bge.n	801e2a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e298:	1416      	asrs	r6, r2, #16
 801e29a:	d401      	bmi.n	801e2a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e29c:	4546      	cmp	r6, r8
 801e29e:	db05      	blt.n	801e2ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e2a0:	4470      	add	r0, lr
 801e2a2:	4462      	add	r2, ip
 801e2a4:	3b01      	subs	r3, #1
 801e2a6:	3402      	adds	r4, #2
 801e2a8:	e7f0      	b.n	801e28c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e2aa:	d00f      	beq.n	801e2cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e2ac:	1e5e      	subs	r6, r3, #1
 801e2ae:	fb0e 0706 	mla	r7, lr, r6, r0
 801e2b2:	143f      	asrs	r7, r7, #16
 801e2b4:	d541      	bpl.n	801e33a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e2b6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e2ba:	4698      	mov	r8, r3
 801e2bc:	9603      	str	r6, [sp, #12]
 801e2be:	f1b8 0f00 	cmp.w	r8, #0
 801e2c2:	dc59      	bgt.n	801e378 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e2c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e2c8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e2cc:	9b00      	ldr	r3, [sp, #0]
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	dd72      	ble.n	801e3b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e2d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e2d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e2dc:	eeb0 6a62 	vmov.f32	s12, s5
 801e2e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e2e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e2e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2ec:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e2f0:	eeb0 6a43 	vmov.f32	s12, s6
 801e2f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2f8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e2fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e300:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e304:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e308:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e30c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e310:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e314:	ee12 2a90 	vmov	r2, s5
 801e318:	eef0 2a47 	vmov.f32	s5, s14
 801e31c:	fb92 fef3 	sdiv	lr, r2, r3
 801e320:	ee13 2a10 	vmov	r2, s6
 801e324:	eeb0 3a67 	vmov.f32	s6, s15
 801e328:	fb92 fcf3 	sdiv	ip, r2, r3
 801e32c:	9b00      	ldr	r3, [sp, #0]
 801e32e:	3b01      	subs	r3, #1
 801e330:	9300      	str	r3, [sp, #0]
 801e332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e334:	bf08      	it	eq
 801e336:	465b      	moveq	r3, fp
 801e338:	e797      	b.n	801e26a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e33a:	454f      	cmp	r7, r9
 801e33c:	dabb      	bge.n	801e2b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e33e:	fb0c 2606 	mla	r6, ip, r6, r2
 801e342:	1436      	asrs	r6, r6, #16
 801e344:	d4b7      	bmi.n	801e2b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e346:	4546      	cmp	r6, r8
 801e348:	dab5      	bge.n	801e2b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e34a:	461e      	mov	r6, r3
 801e34c:	46a0      	mov	r8, r4
 801e34e:	2e00      	cmp	r6, #0
 801e350:	ddb8      	ble.n	801e2c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e352:	1417      	asrs	r7, r2, #16
 801e354:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e358:	9901      	ldr	r1, [sp, #4]
 801e35a:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e35e:	4462      	add	r2, ip
 801e360:	4470      	add	r0, lr
 801e362:	fb0a 1707 	mla	r7, sl, r7, r1
 801e366:	9902      	ldr	r1, [sp, #8]
 801e368:	3e01      	subs	r6, #1
 801e36a:	f817 7009 	ldrb.w	r7, [r7, r9]
 801e36e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e372:	f828 7b02 	strh.w	r7, [r8], #2
 801e376:	e7ea      	b.n	801e34e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e378:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e37c:	d417      	bmi.n	801e3ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e37e:	68ae      	ldr	r6, [r5, #8]
 801e380:	454e      	cmp	r6, r9
 801e382:	dd14      	ble.n	801e3ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e384:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e388:	d411      	bmi.n	801e3ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e38a:	68ef      	ldr	r7, [r5, #12]
 801e38c:	4557      	cmp	r7, sl
 801e38e:	dd0e      	ble.n	801e3ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e390:	9f01      	ldr	r7, [sp, #4]
 801e392:	b236      	sxth	r6, r6
 801e394:	f06f 0101 	mvn.w	r1, #1
 801e398:	fb0a 7606 	mla	r6, sl, r6, r7
 801e39c:	9f02      	ldr	r7, [sp, #8]
 801e39e:	f816 6009 	ldrb.w	r6, [r6, r9]
 801e3a2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e3a6:	fb01 f608 	mul.w	r6, r1, r8
 801e3aa:	9903      	ldr	r1, [sp, #12]
 801e3ac:	538f      	strh	r7, [r1, r6]
 801e3ae:	4470      	add	r0, lr
 801e3b0:	4462      	add	r2, ip
 801e3b2:	f108 38ff 	add.w	r8, r8, #4294967295
 801e3b6:	e782      	b.n	801e2be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e3b8:	b005      	add	sp, #20
 801e3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c2:	b087      	sub	sp, #28
 801e3c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e3c6:	9205      	str	r2, [sp, #20]
 801e3c8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e3cc:	9102      	str	r1, [sp, #8]
 801e3ce:	9203      	str	r2, [sp, #12]
 801e3d0:	6861      	ldr	r1, [r4, #4]
 801e3d2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e3d6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e3da:	fb01 2000 	mla	r0, r1, r0, r2
 801e3de:	6822      	ldr	r2, [r4, #0]
 801e3e0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e3e4:	9200      	str	r2, [sp, #0]
 801e3e6:	f8dc 2000 	ldr.w	r2, [ip]
 801e3ea:	9204      	str	r2, [sp, #16]
 801e3ec:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e3f0:	3204      	adds	r2, #4
 801e3f2:	9201      	str	r2, [sp, #4]
 801e3f4:	9a03      	ldr	r2, [sp, #12]
 801e3f6:	43d5      	mvns	r5, r2
 801e3f8:	b2ed      	uxtb	r5, r5
 801e3fa:	9a02      	ldr	r2, [sp, #8]
 801e3fc:	2a00      	cmp	r2, #0
 801e3fe:	dc03      	bgt.n	801e408 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e400:	9a05      	ldr	r2, [sp, #20]
 801e402:	2a00      	cmp	r2, #0
 801e404:	f340 812c 	ble.w	801e660 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e408:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e40a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e40e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e412:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e414:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e418:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	dd10      	ble.n	801e442 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e420:	140c      	asrs	r4, r1, #16
 801e422:	d405      	bmi.n	801e430 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e424:	4574      	cmp	r4, lr
 801e426:	da03      	bge.n	801e430 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e428:	1414      	asrs	r4, r2, #16
 801e42a:	d401      	bmi.n	801e430 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e42c:	42bc      	cmp	r4, r7
 801e42e:	db09      	blt.n	801e444 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e430:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e432:	3b01      	subs	r3, #1
 801e434:	9800      	ldr	r0, [sp, #0]
 801e436:	4421      	add	r1, r4
 801e438:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e43a:	3002      	adds	r0, #2
 801e43c:	4422      	add	r2, r4
 801e43e:	9000      	str	r0, [sp, #0]
 801e440:	e7ec      	b.n	801e41c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e442:	d071      	beq.n	801e528 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e444:	1e5c      	subs	r4, r3, #1
 801e446:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e448:	fb06 1604 	mla	r6, r6, r4, r1
 801e44c:	1436      	asrs	r6, r6, #16
 801e44e:	d45d      	bmi.n	801e50c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e450:	4576      	cmp	r6, lr
 801e452:	da5b      	bge.n	801e50c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e454:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e456:	fb06 2404 	mla	r4, r6, r4, r2
 801e45a:	1424      	asrs	r4, r4, #16
 801e45c:	d456      	bmi.n	801e50c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e45e:	42bc      	cmp	r4, r7
 801e460:	da54      	bge.n	801e50c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e462:	4698      	mov	r8, r3
 801e464:	f8dd 9000 	ldr.w	r9, [sp]
 801e468:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801e46c:	f1b8 0f00 	cmp.w	r8, #0
 801e470:	dd54      	ble.n	801e51c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e472:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e476:	1414      	asrs	r4, r2, #16
 801e478:	9804      	ldr	r0, [sp, #16]
 801e47a:	140e      	asrs	r6, r1, #16
 801e47c:	f108 38ff 	add.w	r8, r8, #4294967295
 801e480:	fb07 0404 	mla	r4, r7, r4, r0
 801e484:	9801      	ldr	r0, [sp, #4]
 801e486:	f814 e006 	ldrb.w	lr, [r4, r6]
 801e48a:	f8b9 4000 	ldrh.w	r4, [r9]
 801e48e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e492:	1227      	asrs	r7, r4, #8
 801e494:	eb00 0b0e 	add.w	fp, r0, lr
 801e498:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801e49c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e4a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e4a2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e4a6:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e4aa:	4401      	add	r1, r0
 801e4ac:	fb16 f60a 	smulbb	r6, r6, sl
 801e4b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e4b2:	fb1b fb0a 	smulbb	fp, fp, sl
 801e4b6:	fb07 6705 	mla	r7, r7, r5, r6
 801e4ba:	10e6      	asrs	r6, r4, #3
 801e4bc:	00e4      	lsls	r4, r4, #3
 801e4be:	4402      	add	r2, r0
 801e4c0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e4c4:	b2bf      	uxth	r7, r7
 801e4c6:	b2e4      	uxtb	r4, r4
 801e4c8:	fb06 b605 	mla	r6, r6, r5, fp
 801e4cc:	fb14 f405 	smulbb	r4, r4, r5
 801e4d0:	b2b6      	uxth	r6, r6
 801e4d2:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801e4d6:	1c7c      	adds	r4, r7, #1
 801e4d8:	f106 0b01 	add.w	fp, r6, #1
 801e4dc:	fa1f fe8e 	uxth.w	lr, lr
 801e4e0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e4e4:	f10e 0401 	add.w	r4, lr, #1
 801e4e8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e4ec:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e4f0:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801e4f4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e4f8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e4fc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e500:	4327      	orrs	r7, r4
 801e502:	ea47 070b 	orr.w	r7, r7, fp
 801e506:	f829 7b02 	strh.w	r7, [r9], #2
 801e50a:	e7af      	b.n	801e46c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801e50c:	f04f 0e00 	mov.w	lr, #0
 801e510:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801e514:	eb03 040e 	add.w	r4, r3, lr
 801e518:	2c00      	cmp	r4, #0
 801e51a:	dc43      	bgt.n	801e5a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e51c:	9a00      	ldr	r2, [sp, #0]
 801e51e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e522:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e526:	9300      	str	r3, [sp, #0]
 801e528:	9b02      	ldr	r3, [sp, #8]
 801e52a:	2b00      	cmp	r3, #0
 801e52c:	f340 8098 	ble.w	801e660 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e536:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e53a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e53e:	eef0 6a62 	vmov.f32	s13, s5
 801e542:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e546:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e54a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e54e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e552:	eef0 6a43 	vmov.f32	s13, s6
 801e556:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e55a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e55e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e562:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e566:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e56a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e56e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e572:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e576:	ee12 2a90 	vmov	r2, s5
 801e57a:	eef0 2a47 	vmov.f32	s5, s14
 801e57e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e582:	ee13 2a10 	vmov	r2, s6
 801e586:	9313      	str	r3, [sp, #76]	; 0x4c
 801e588:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e58a:	eeb0 3a67 	vmov.f32	s6, s15
 801e58e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e592:	9314      	str	r3, [sp, #80]	; 0x50
 801e594:	9b02      	ldr	r3, [sp, #8]
 801e596:	9a05      	ldr	r2, [sp, #20]
 801e598:	3b01      	subs	r3, #1
 801e59a:	9302      	str	r3, [sp, #8]
 801e59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e59e:	bf08      	it	eq
 801e5a0:	4613      	moveq	r3, r2
 801e5a2:	e72a      	b.n	801e3fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e5a4:	140f      	asrs	r7, r1, #16
 801e5a6:	d454      	bmi.n	801e652 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e5a8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e5ac:	42be      	cmp	r6, r7
 801e5ae:	dd50      	ble.n	801e652 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e5b0:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e5b4:	d44d      	bmi.n	801e652 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e5b6:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801e5ba:	4544      	cmp	r4, r8
 801e5bc:	dd49      	ble.n	801e652 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e5be:	9c04      	ldr	r4, [sp, #16]
 801e5c0:	b236      	sxth	r6, r6
 801e5c2:	f06f 0001 	mvn.w	r0, #1
 801e5c6:	fb08 4606 	mla	r6, r8, r6, r4
 801e5ca:	9c01      	ldr	r4, [sp, #4]
 801e5cc:	fb00 fa0e 	mul.w	sl, r0, lr
 801e5d0:	9800      	ldr	r0, [sp, #0]
 801e5d2:	f816 8007 	ldrb.w	r8, [r6, r7]
 801e5d6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e5da:	eb04 0b08 	add.w	fp, r4, r8
 801e5de:	f830 400a 	ldrh.w	r4, [r0, sl]
 801e5e2:	9801      	ldr	r0, [sp, #4]
 801e5e4:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e5e8:	1227      	asrs	r7, r4, #8
 801e5ea:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e5ee:	fb16 f609 	smulbb	r6, r6, r9
 801e5f2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e5f6:	f810 8008 	ldrb.w	r8, [r0, r8]
 801e5fa:	fb1b fb09 	smulbb	fp, fp, r9
 801e5fe:	fb07 6705 	mla	r7, r7, r5, r6
 801e602:	10e6      	asrs	r6, r4, #3
 801e604:	00e4      	lsls	r4, r4, #3
 801e606:	9800      	ldr	r0, [sp, #0]
 801e608:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e60c:	b2bf      	uxth	r7, r7
 801e60e:	b2e4      	uxtb	r4, r4
 801e610:	fb06 b605 	mla	r6, r6, r5, fp
 801e614:	fb14 f405 	smulbb	r4, r4, r5
 801e618:	b2b6      	uxth	r6, r6
 801e61a:	fb08 4809 	mla	r8, r8, r9, r4
 801e61e:	1c7c      	adds	r4, r7, #1
 801e620:	f106 0b01 	add.w	fp, r6, #1
 801e624:	fa1f f888 	uxth.w	r8, r8
 801e628:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e62c:	f108 0401 	add.w	r4, r8, #1
 801e630:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e634:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e638:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801e63c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e640:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e644:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e648:	4327      	orrs	r7, r4
 801e64a:	ea47 070b 	orr.w	r7, r7, fp
 801e64e:	f820 700a 	strh.w	r7, [r0, sl]
 801e652:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e654:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e658:	4401      	add	r1, r0
 801e65a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e65c:	4402      	add	r2, r0
 801e65e:	e759      	b.n	801e514 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e660:	b007      	add	sp, #28
 801e662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e668 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e66c:	b085      	sub	sp, #20
 801e66e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e672:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e674:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e676:	9203      	str	r2, [sp, #12]
 801e678:	6870      	ldr	r0, [r6, #4]
 801e67a:	686f      	ldr	r7, [r5, #4]
 801e67c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801e680:	3704      	adds	r7, #4
 801e682:	9101      	str	r1, [sp, #4]
 801e684:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e688:	fb00 2404 	mla	r4, r0, r4, r2
 801e68c:	6832      	ldr	r2, [r6, #0]
 801e68e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e692:	682a      	ldr	r2, [r5, #0]
 801e694:	9202      	str	r2, [sp, #8]
 801e696:	9a01      	ldr	r2, [sp, #4]
 801e698:	2a00      	cmp	r2, #0
 801e69a:	dc03      	bgt.n	801e6a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e69c:	9a03      	ldr	r2, [sp, #12]
 801e69e:	2a00      	cmp	r2, #0
 801e6a0:	f340 80cc 	ble.w	801e83c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e6a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e6a6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e6aa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e6ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e6b0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e6b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	dd0d      	ble.n	801e6d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e6bc:	1406      	asrs	r6, r0, #16
 801e6be:	d405      	bmi.n	801e6cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e6c0:	454e      	cmp	r6, r9
 801e6c2:	da03      	bge.n	801e6cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e6c4:	1416      	asrs	r6, r2, #16
 801e6c6:	d401      	bmi.n	801e6cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e6c8:	4546      	cmp	r6, r8
 801e6ca:	db06      	blt.n	801e6da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e6cc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e6ce:	4460      	add	r0, ip
 801e6d0:	3b01      	subs	r3, #1
 801e6d2:	3402      	adds	r4, #2
 801e6d4:	4432      	add	r2, r6
 801e6d6:	e7ef      	b.n	801e6b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e6d8:	d00f      	beq.n	801e6fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e6da:	1e5e      	subs	r6, r3, #1
 801e6dc:	fb0c 0e06 	mla	lr, ip, r6, r0
 801e6e0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e6e4:	d543      	bpl.n	801e76e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801e6e6:	4698      	mov	r8, r3
 801e6e8:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801e6ec:	f1b8 0f00 	cmp.w	r8, #0
 801e6f0:	dc71      	bgt.n	801e7d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e6f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e6f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e6fa:	9b01      	ldr	r3, [sp, #4]
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	f340 809d 	ble.w	801e83c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e702:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e708:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e70c:	eeb0 6a62 	vmov.f32	s12, s5
 801e710:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e714:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e718:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e71c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e720:	eeb0 6a43 	vmov.f32	s12, s6
 801e724:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e728:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e72c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e730:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e734:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e738:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e73c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e740:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e744:	ee12 2a90 	vmov	r2, s5
 801e748:	eef0 2a47 	vmov.f32	s5, s14
 801e74c:	fb92 fcf3 	sdiv	ip, r2, r3
 801e750:	ee13 2a10 	vmov	r2, s6
 801e754:	eeb0 3a67 	vmov.f32	s6, s15
 801e758:	fb92 f3f3 	sdiv	r3, r2, r3
 801e75c:	9312      	str	r3, [sp, #72]	; 0x48
 801e75e:	9b01      	ldr	r3, [sp, #4]
 801e760:	9a03      	ldr	r2, [sp, #12]
 801e762:	3b01      	subs	r3, #1
 801e764:	9301      	str	r3, [sp, #4]
 801e766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e768:	bf08      	it	eq
 801e76a:	4613      	moveq	r3, r2
 801e76c:	e793      	b.n	801e696 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e76e:	45ce      	cmp	lr, r9
 801e770:	dab9      	bge.n	801e6e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e772:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e774:	fb01 2606 	mla	r6, r1, r6, r2
 801e778:	1436      	asrs	r6, r6, #16
 801e77a:	d4b4      	bmi.n	801e6e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e77c:	4546      	cmp	r6, r8
 801e77e:	dab2      	bge.n	801e6e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e780:	4698      	mov	r8, r3
 801e782:	46a2      	mov	sl, r4
 801e784:	f1b8 0f00 	cmp.w	r8, #0
 801e788:	ddb3      	ble.n	801e6f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e78a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e78e:	1416      	asrs	r6, r2, #16
 801e790:	9902      	ldr	r1, [sp, #8]
 801e792:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801e796:	f108 38ff 	add.w	r8, r8, #4294967295
 801e79a:	4460      	add	r0, ip
 801e79c:	fb09 1606 	mla	r6, r9, r6, r1
 801e7a0:	4928      	ldr	r1, [pc, #160]	; (801e844 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801e7a2:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801e7a6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e7aa:	eb07 0b0e 	add.w	fp, r7, lr
 801e7ae:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801e7b2:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e7b6:	00f6      	lsls	r6, r6, #3
 801e7b8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801e7bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e7be:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e7c2:	440a      	add	r2, r1
 801e7c4:	ea49 0606 	orr.w	r6, r9, r6
 801e7c8:	f817 900e 	ldrb.w	r9, [r7, lr]
 801e7cc:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801e7d0:	f82a 6b02 	strh.w	r6, [sl], #2
 801e7d4:	e7d6      	b.n	801e784 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e7d6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e7da:	d429      	bmi.n	801e830 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e7dc:	68ae      	ldr	r6, [r5, #8]
 801e7de:	454e      	cmp	r6, r9
 801e7e0:	dd26      	ble.n	801e830 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e7e2:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e7e6:	d423      	bmi.n	801e830 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e7e8:	68e9      	ldr	r1, [r5, #12]
 801e7ea:	4559      	cmp	r1, fp
 801e7ec:	dd20      	ble.n	801e830 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e7ee:	fa0f fe86 	sxth.w	lr, r6
 801e7f2:	9902      	ldr	r1, [sp, #8]
 801e7f4:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801e7f8:	f06f 0101 	mvn.w	r1, #1
 801e7fc:	f81e e009 	ldrb.w	lr, [lr, r9]
 801e800:	fb01 f908 	mul.w	r9, r1, r8
 801e804:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801e808:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e80c:	eb07 060e 	add.w	r6, r7, lr
 801e810:	f896 b002 	ldrb.w	fp, [r6, #2]
 801e814:	7876      	ldrb	r6, [r6, #1]
 801e816:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801e81a:	00f6      	lsls	r6, r6, #3
 801e81c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e820:	ea4b 0606 	orr.w	r6, fp, r6
 801e824:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801e828:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801e82c:	f82a 6009 	strh.w	r6, [sl, r9]
 801e830:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e832:	4460      	add	r0, ip
 801e834:	f108 38ff 	add.w	r8, r8, #4294967295
 801e838:	440a      	add	r2, r1
 801e83a:	e757      	b.n	801e6ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e83c:	b005      	add	sp, #20
 801e83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e842:	bf00      	nop
 801e844:	fffff800 	.word	0xfffff800

0801e848 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e84c:	b087      	sub	sp, #28
 801e84e:	468b      	mov	fp, r1
 801e850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e854:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e856:	9204      	str	r2, [sp, #16]
 801e858:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e85c:	6841      	ldr	r1, [r0, #4]
 801e85e:	9205      	str	r2, [sp, #20]
 801e860:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e864:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e868:	fb01 2404 	mla	r4, r1, r4, r2
 801e86c:	6802      	ldr	r2, [r0, #0]
 801e86e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e872:	f8dc 2000 	ldr.w	r2, [ip]
 801e876:	9201      	str	r2, [sp, #4]
 801e878:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e87c:	3204      	adds	r2, #4
 801e87e:	9202      	str	r2, [sp, #8]
 801e880:	f1bb 0f00 	cmp.w	fp, #0
 801e884:	dc03      	bgt.n	801e88e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e886:	9a04      	ldr	r2, [sp, #16]
 801e888:	2a00      	cmp	r2, #0
 801e88a:	f340 8138 	ble.w	801eafe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e88e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e890:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e894:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e898:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e89a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801e89e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	dd0e      	ble.n	801e8c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e8a6:	1402      	asrs	r2, r0, #16
 801e8a8:	d405      	bmi.n	801e8b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e8aa:	42ba      	cmp	r2, r7
 801e8ac:	da03      	bge.n	801e8b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e8ae:	140a      	asrs	r2, r1, #16
 801e8b0:	d401      	bmi.n	801e8b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e8b2:	42b2      	cmp	r2, r6
 801e8b4:	db07      	blt.n	801e8c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e8b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e8b8:	3b01      	subs	r3, #1
 801e8ba:	3402      	adds	r4, #2
 801e8bc:	4410      	add	r0, r2
 801e8be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e8c0:	4411      	add	r1, r2
 801e8c2:	e7ee      	b.n	801e8a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e8c4:	d019      	beq.n	801e8fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801e8c6:	1e5a      	subs	r2, r3, #1
 801e8c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e8ca:	fb05 0502 	mla	r5, r5, r2, r0
 801e8ce:	142d      	asrs	r5, r5, #16
 801e8d0:	d409      	bmi.n	801e8e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e8d2:	42bd      	cmp	r5, r7
 801e8d4:	da07      	bge.n	801e8e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e8d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e8d8:	fb05 1202 	mla	r2, r5, r2, r1
 801e8dc:	1412      	asrs	r2, r2, #16
 801e8de:	d402      	bmi.n	801e8e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e8e0:	42b2      	cmp	r2, r6
 801e8e2:	f2c0 80ac 	blt.w	801ea3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801e8e6:	f04f 0e00 	mov.w	lr, #0
 801e8ea:	eb03 020e 	add.w	r2, r3, lr
 801e8ee:	2a00      	cmp	r2, #0
 801e8f0:	dc3e      	bgt.n	801e970 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e8f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e8fa:	f1bb 0f00 	cmp.w	fp, #0
 801e8fe:	f340 80fe 	ble.w	801eafe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e902:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e906:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e908:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e90c:	f1bb 0b01 	subs.w	fp, fp, #1
 801e910:	eeb0 6a62 	vmov.f32	s12, s5
 801e914:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e918:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e91c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e920:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e924:	eeb0 6a43 	vmov.f32	s12, s6
 801e928:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e92c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e930:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e934:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e938:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e93c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e940:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e944:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e948:	ee12 2a90 	vmov	r2, s5
 801e94c:	eef0 2a47 	vmov.f32	s5, s14
 801e950:	fb92 f3f3 	sdiv	r3, r2, r3
 801e954:	ee13 2a10 	vmov	r2, s6
 801e958:	9313      	str	r3, [sp, #76]	; 0x4c
 801e95a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e95c:	eeb0 3a67 	vmov.f32	s6, s15
 801e960:	fb92 f3f3 	sdiv	r3, r2, r3
 801e964:	9a04      	ldr	r2, [sp, #16]
 801e966:	9314      	str	r3, [sp, #80]	; 0x50
 801e968:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e96a:	bf08      	it	eq
 801e96c:	4613      	moveq	r3, r2
 801e96e:	e787      	b.n	801e880 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e970:	1406      	asrs	r6, r0, #16
 801e972:	d45d      	bmi.n	801ea30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e974:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801e978:	42b5      	cmp	r5, r6
 801e97a:	dd59      	ble.n	801ea30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e97c:	140f      	asrs	r7, r1, #16
 801e97e:	d457      	bmi.n	801ea30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e980:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e984:	42ba      	cmp	r2, r7
 801e986:	dd53      	ble.n	801ea30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e988:	9a01      	ldr	r2, [sp, #4]
 801e98a:	b22d      	sxth	r5, r5
 801e98c:	fb07 2505 	mla	r5, r7, r5, r2
 801e990:	5daa      	ldrb	r2, [r5, r6]
 801e992:	9d02      	ldr	r5, [sp, #8]
 801e994:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801e998:	0e2e      	lsrs	r6, r5, #24
 801e99a:	d049      	beq.n	801ea30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e99c:	f06f 0201 	mvn.w	r2, #1
 801e9a0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e9a4:	fb02 f20e 	mul.w	r2, r2, lr
 801e9a8:	f834 8002 	ldrh.w	r8, [r4, r2]
 801e9ac:	9203      	str	r2, [sp, #12]
 801e9ae:	9a05      	ldr	r2, [sp, #20]
 801e9b0:	ea4f 2728 	mov.w	r7, r8, asr #8
 801e9b4:	4356      	muls	r6, r2
 801e9b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e9ba:	1c72      	adds	r2, r6, #1
 801e9bc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801e9c0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e9c4:	b2ed      	uxtb	r5, r5
 801e9c6:	1212      	asrs	r2, r2, #8
 801e9c8:	fa1f f982 	uxth.w	r9, r2
 801e9cc:	43d2      	mvns	r2, r2
 801e9ce:	fb16 f609 	smulbb	r6, r6, r9
 801e9d2:	b2d2      	uxtb	r2, r2
 801e9d4:	fb15 f509 	smulbb	r5, r5, r9
 801e9d8:	fb07 6702 	mla	r7, r7, r2, r6
 801e9dc:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e9e0:	fb1a fa09 	smulbb	sl, sl, r9
 801e9e4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e9e8:	b2bf      	uxth	r7, r7
 801e9ea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e9ee:	fa5f f888 	uxtb.w	r8, r8
 801e9f2:	fb06 a602 	mla	r6, r6, r2, sl
 801e9f6:	fb08 5502 	mla	r5, r8, r2, r5
 801e9fa:	1c7a      	adds	r2, r7, #1
 801e9fc:	b2b6      	uxth	r6, r6
 801e9fe:	b2ad      	uxth	r5, r5
 801ea00:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ea04:	9a03      	ldr	r2, [sp, #12]
 801ea06:	f105 0a01 	add.w	sl, r5, #1
 801ea0a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ea0e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ea12:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ea16:	ea47 070a 	orr.w	r7, r7, sl
 801ea1a:	f106 0a01 	add.w	sl, r6, #1
 801ea1e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ea22:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ea26:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ea2a:	ea47 070a 	orr.w	r7, r7, sl
 801ea2e:	52a7      	strh	r7, [r4, r2]
 801ea30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ea32:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ea36:	4410      	add	r0, r2
 801ea38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea3a:	4411      	add	r1, r2
 801ea3c:	e755      	b.n	801e8ea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ea3e:	f04f 0800 	mov.w	r8, #0
 801ea42:	eba3 0208 	sub.w	r2, r3, r8
 801ea46:	2a00      	cmp	r2, #0
 801ea48:	f77f af53 	ble.w	801e8f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ea4c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801ea50:	140a      	asrs	r2, r1, #16
 801ea52:	9f01      	ldr	r7, [sp, #4]
 801ea54:	1405      	asrs	r5, r0, #16
 801ea56:	fb06 7202 	mla	r2, r6, r2, r7
 801ea5a:	5d52      	ldrb	r2, [r2, r5]
 801ea5c:	9d02      	ldr	r5, [sp, #8]
 801ea5e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ea62:	0e2e      	lsrs	r6, r5, #24
 801ea64:	d044      	beq.n	801eaf0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ea66:	9a05      	ldr	r2, [sp, #20]
 801ea68:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ea6c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801ea70:	4356      	muls	r6, r2
 801ea72:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ea76:	1c72      	adds	r2, r6, #1
 801ea78:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ea7c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ea80:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ea84:	b2ed      	uxtb	r5, r5
 801ea86:	1212      	asrs	r2, r2, #8
 801ea88:	fa1f f982 	uxth.w	r9, r2
 801ea8c:	43d2      	mvns	r2, r2
 801ea8e:	fb16 f609 	smulbb	r6, r6, r9
 801ea92:	b2d2      	uxtb	r2, r2
 801ea94:	fb15 f509 	smulbb	r5, r5, r9
 801ea98:	fb07 6702 	mla	r7, r7, r2, r6
 801ea9c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801eaa0:	fb1a fa09 	smulbb	sl, sl, r9
 801eaa4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eaa8:	b2bf      	uxth	r7, r7
 801eaaa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eaae:	fa5f fe8e 	uxtb.w	lr, lr
 801eab2:	fb06 a602 	mla	r6, r6, r2, sl
 801eab6:	fb0e 5502 	mla	r5, lr, r2, r5
 801eaba:	1c7a      	adds	r2, r7, #1
 801eabc:	b2b6      	uxth	r6, r6
 801eabe:	b2ad      	uxth	r5, r5
 801eac0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801eac4:	f105 0a01 	add.w	sl, r5, #1
 801eac8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801eacc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ead0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ead4:	ea47 070a 	orr.w	r7, r7, sl
 801ead8:	f106 0a01 	add.w	sl, r6, #1
 801eadc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eae0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eae4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eae8:	ea47 070a 	orr.w	r7, r7, sl
 801eaec:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801eaf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eaf2:	f108 0801 	add.w	r8, r8, #1
 801eaf6:	4410      	add	r0, r2
 801eaf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eafa:	4411      	add	r1, r2
 801eafc:	e7a1      	b.n	801ea42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801eafe:	b007      	add	sp, #28
 801eb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb08:	b085      	sub	sp, #20
 801eb0a:	468b      	mov	fp, r1
 801eb0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eb10:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801eb12:	9203      	str	r2, [sp, #12]
 801eb14:	6841      	ldr	r1, [r0, #4]
 801eb16:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801eb1a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801eb1e:	fb01 2404 	mla	r4, r1, r4, r2
 801eb22:	6802      	ldr	r2, [r0, #0]
 801eb24:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eb28:	f8de 2000 	ldr.w	r2, [lr]
 801eb2c:	9200      	str	r2, [sp, #0]
 801eb2e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801eb32:	3204      	adds	r2, #4
 801eb34:	9201      	str	r2, [sp, #4]
 801eb36:	f1bb 0f00 	cmp.w	fp, #0
 801eb3a:	dc03      	bgt.n	801eb44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801eb3c:	9a03      	ldr	r2, [sp, #12]
 801eb3e:	2a00      	cmp	r2, #0
 801eb40:	f340 8153 	ble.w	801edea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801eb44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eb46:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801eb4a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801eb4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eb50:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801eb54:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	dd0e      	ble.n	801eb7a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eb5c:	1408      	asrs	r0, r1, #16
 801eb5e:	d405      	bmi.n	801eb6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801eb60:	42b8      	cmp	r0, r7
 801eb62:	da03      	bge.n	801eb6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801eb64:	1410      	asrs	r0, r2, #16
 801eb66:	d401      	bmi.n	801eb6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801eb68:	42b0      	cmp	r0, r6
 801eb6a:	db07      	blt.n	801eb7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801eb6c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801eb6e:	3b01      	subs	r3, #1
 801eb70:	3402      	adds	r4, #2
 801eb72:	4401      	add	r1, r0
 801eb74:	9812      	ldr	r0, [sp, #72]	; 0x48
 801eb76:	4402      	add	r2, r0
 801eb78:	e7ee      	b.n	801eb58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801eb7a:	d017      	beq.n	801ebac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801eb7c:	1e58      	subs	r0, r3, #1
 801eb7e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801eb80:	fb05 1500 	mla	r5, r5, r0, r1
 801eb84:	142d      	asrs	r5, r5, #16
 801eb86:	d409      	bmi.n	801eb9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801eb88:	42bd      	cmp	r5, r7
 801eb8a:	da07      	bge.n	801eb9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801eb8c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801eb8e:	fb05 2000 	mla	r0, r5, r0, r2
 801eb92:	1400      	asrs	r0, r0, #16
 801eb94:	d402      	bmi.n	801eb9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801eb96:	42b0      	cmp	r0, r6
 801eb98:	f2c0 80bc 	blt.w	801ed14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801eb9c:	2600      	movs	r6, #0
 801eb9e:	1998      	adds	r0, r3, r6
 801eba0:	2800      	cmp	r0, #0
 801eba2:	dc3e      	bgt.n	801ec22 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801eba4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eba8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ebac:	f1bb 0f00 	cmp.w	fp, #0
 801ebb0:	f340 811b 	ble.w	801edea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ebb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ebb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ebba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ebbe:	f1bb 0b01 	subs.w	fp, fp, #1
 801ebc2:	eeb0 6a62 	vmov.f32	s12, s5
 801ebc6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ebca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ebce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebd2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ebd6:	eeb0 6a43 	vmov.f32	s12, s6
 801ebda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebde:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ebe2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ebe6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ebea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ebee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ebf2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ebf6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ebfa:	ee12 2a90 	vmov	r2, s5
 801ebfe:	eef0 2a47 	vmov.f32	s5, s14
 801ec02:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec06:	ee13 2a10 	vmov	r2, s6
 801ec0a:	9311      	str	r3, [sp, #68]	; 0x44
 801ec0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec0e:	eeb0 3a67 	vmov.f32	s6, s15
 801ec12:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec16:	9a03      	ldr	r2, [sp, #12]
 801ec18:	9312      	str	r3, [sp, #72]	; 0x48
 801ec1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec1c:	bf08      	it	eq
 801ec1e:	4613      	moveq	r3, r2
 801ec20:	e789      	b.n	801eb36 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ec22:	140f      	asrs	r7, r1, #16
 801ec24:	d45e      	bmi.n	801ece4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ec26:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ec2a:	42bd      	cmp	r5, r7
 801ec2c:	dd5a      	ble.n	801ece4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ec2e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ec32:	d457      	bmi.n	801ece4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ec34:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ec38:	4560      	cmp	r0, ip
 801ec3a:	dd53      	ble.n	801ece4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ec3c:	9800      	ldr	r0, [sp, #0]
 801ec3e:	b22d      	sxth	r5, r5
 801ec40:	fb0c 0505 	mla	r5, ip, r5, r0
 801ec44:	5de8      	ldrb	r0, [r5, r7]
 801ec46:	9d01      	ldr	r5, [sp, #4]
 801ec48:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ec4c:	0e07      	lsrs	r7, r0, #24
 801ec4e:	2fff      	cmp	r7, #255	; 0xff
 801ec50:	d04e      	beq.n	801ecf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801ec52:	b2fd      	uxtb	r5, r7
 801ec54:	2f00      	cmp	r7, #0
 801ec56:	d045      	beq.n	801ece4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ec58:	f06f 0701 	mvn.w	r7, #1
 801ec5c:	fa1f f985 	uxth.w	r9, r5
 801ec60:	43ed      	mvns	r5, r5
 801ec62:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ec66:	4377      	muls	r7, r6
 801ec68:	fb1a fa09 	smulbb	sl, sl, r9
 801ec6c:	b2ed      	uxtb	r5, r5
 801ec6e:	f834 8007 	ldrh.w	r8, [r4, r7]
 801ec72:	9702      	str	r7, [sp, #8]
 801ec74:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ec78:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ec7c:	fb17 f709 	smulbb	r7, r7, r9
 801ec80:	b2c0      	uxtb	r0, r0
 801ec82:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ec86:	fb10 f009 	smulbb	r0, r0, r9
 801ec8a:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ec8e:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ec92:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ec96:	fa1f fc8c 	uxth.w	ip, ip
 801ec9a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ec9e:	fa5f f888 	uxtb.w	r8, r8
 801eca2:	fb07 a705 	mla	r7, r7, r5, sl
 801eca6:	fb08 0005 	mla	r0, r8, r5, r0
 801ecaa:	f10c 0501 	add.w	r5, ip, #1
 801ecae:	b2bf      	uxth	r7, r7
 801ecb0:	b280      	uxth	r0, r0
 801ecb2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ecb6:	f100 0a01 	add.w	sl, r0, #1
 801ecba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ecbe:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ecc2:	9802      	ldr	r0, [sp, #8]
 801ecc4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ecc8:	ea4c 0c0a 	orr.w	ip, ip, sl
 801eccc:	f107 0a01 	add.w	sl, r7, #1
 801ecd0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ecd4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ecd8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ecdc:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ece0:	f824 c000 	strh.w	ip, [r4, r0]
 801ece4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ece6:	3e01      	subs	r6, #1
 801ece8:	4401      	add	r1, r0
 801ecea:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ecec:	4402      	add	r2, r0
 801ecee:	e756      	b.n	801eb9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ecf0:	f06f 0501 	mvn.w	r5, #1
 801ecf4:	fb05 f706 	mul.w	r7, r5, r6
 801ecf8:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ecfc:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ed00:	0945      	lsrs	r5, r0, #5
 801ed02:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ed06:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ed0a:	ea4c 0505 	orr.w	r5, ip, r5
 801ed0e:	4305      	orrs	r5, r0
 801ed10:	53e5      	strh	r5, [r4, r7]
 801ed12:	e7e7      	b.n	801ece4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ed14:	f04f 0800 	mov.w	r8, #0
 801ed18:	eba3 0008 	sub.w	r0, r3, r8
 801ed1c:	2800      	cmp	r0, #0
 801ed1e:	f77f af41 	ble.w	801eba4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ed22:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ed26:	1410      	asrs	r0, r2, #16
 801ed28:	9f00      	ldr	r7, [sp, #0]
 801ed2a:	140d      	asrs	r5, r1, #16
 801ed2c:	fb06 7000 	mla	r0, r6, r0, r7
 801ed30:	5d40      	ldrb	r0, [r0, r5]
 801ed32:	9d01      	ldr	r5, [sp, #4]
 801ed34:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ed38:	0e06      	lsrs	r6, r0, #24
 801ed3a:	2eff      	cmp	r6, #255	; 0xff
 801ed3c:	d048      	beq.n	801edd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801ed3e:	b2f5      	uxtb	r5, r6
 801ed40:	2e00      	cmp	r6, #0
 801ed42:	d03e      	beq.n	801edc2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801ed44:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801ed48:	fa1f f985 	uxth.w	r9, r5
 801ed4c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801ed50:	43ed      	mvns	r5, r5
 801ed52:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ed56:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ed5a:	fb16 f609 	smulbb	r6, r6, r9
 801ed5e:	b2ed      	uxtb	r5, r5
 801ed60:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ed64:	b2c0      	uxtb	r0, r0
 801ed66:	fb1a fa09 	smulbb	sl, sl, r9
 801ed6a:	fb07 6705 	mla	r7, r7, r5, r6
 801ed6e:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ed72:	fb10 f009 	smulbb	r0, r0, r9
 801ed76:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ed7a:	b2bf      	uxth	r7, r7
 801ed7c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ed80:	fa5f fc8c 	uxtb.w	ip, ip
 801ed84:	fb06 a605 	mla	r6, r6, r5, sl
 801ed88:	fb0c 0005 	mla	r0, ip, r5, r0
 801ed8c:	1c7d      	adds	r5, r7, #1
 801ed8e:	b2b6      	uxth	r6, r6
 801ed90:	b280      	uxth	r0, r0
 801ed92:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801ed96:	f100 0a01 	add.w	sl, r0, #1
 801ed9a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ed9e:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801eda2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eda6:	ea47 070a 	orr.w	r7, r7, sl
 801edaa:	f106 0a01 	add.w	sl, r6, #1
 801edae:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801edb2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801edb6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801edba:	ea47 070a 	orr.w	r7, r7, sl
 801edbe:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801edc2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801edc4:	f108 0801 	add.w	r8, r8, #1
 801edc8:	4401      	add	r1, r0
 801edca:	9812      	ldr	r0, [sp, #72]	; 0x48
 801edcc:	4402      	add	r2, r0
 801edce:	e7a3      	b.n	801ed18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801edd0:	4d07      	ldr	r5, [pc, #28]	; (801edf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801edd2:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801edd6:	0945      	lsrs	r5, r0, #5
 801edd8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801eddc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ede0:	4335      	orrs	r5, r6
 801ede2:	4305      	orrs	r5, r0
 801ede4:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801ede8:	e7eb      	b.n	801edc2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801edea:	b005      	add	sp, #20
 801edec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edf0:	fffff800 	.word	0xfffff800

0801edf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edf8:	b087      	sub	sp, #28
 801edfa:	468b      	mov	fp, r1
 801edfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ee00:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ee02:	9204      	str	r2, [sp, #16]
 801ee04:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ee08:	6861      	ldr	r1, [r4, #4]
 801ee0a:	9205      	str	r2, [sp, #20]
 801ee0c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801ee10:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801ee14:	fb01 2000 	mla	r0, r1, r0, r2
 801ee18:	6822      	ldr	r2, [r4, #0]
 801ee1a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ee1e:	f8de 2000 	ldr.w	r2, [lr]
 801ee22:	9201      	str	r2, [sp, #4]
 801ee24:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ee28:	9202      	str	r2, [sp, #8]
 801ee2a:	f1bb 0f00 	cmp.w	fp, #0
 801ee2e:	dc03      	bgt.n	801ee38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ee30:	9a04      	ldr	r2, [sp, #16]
 801ee32:	2a00      	cmp	r2, #0
 801ee34:	f340 8142 	ble.w	801f0bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ee38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee3a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ee3e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ee42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ee44:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ee48:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	dd0e      	ble.n	801ee6e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ee50:	140c      	asrs	r4, r1, #16
 801ee52:	d405      	bmi.n	801ee60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ee54:	42bc      	cmp	r4, r7
 801ee56:	da03      	bge.n	801ee60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ee58:	1414      	asrs	r4, r2, #16
 801ee5a:	d401      	bmi.n	801ee60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ee5c:	42b4      	cmp	r4, r6
 801ee5e:	db07      	blt.n	801ee70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ee60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ee62:	3b01      	subs	r3, #1
 801ee64:	3002      	adds	r0, #2
 801ee66:	4421      	add	r1, r4
 801ee68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ee6a:	4422      	add	r2, r4
 801ee6c:	e7ee      	b.n	801ee4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ee6e:	d019      	beq.n	801eea4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ee70:	1e5c      	subs	r4, r3, #1
 801ee72:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ee74:	fb05 1504 	mla	r5, r5, r4, r1
 801ee78:	142d      	asrs	r5, r5, #16
 801ee7a:	d409      	bmi.n	801ee90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ee7c:	42bd      	cmp	r5, r7
 801ee7e:	da07      	bge.n	801ee90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ee80:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ee82:	fb05 2404 	mla	r4, r5, r4, r2
 801ee86:	1424      	asrs	r4, r4, #16
 801ee88:	d402      	bmi.n	801ee90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ee8a:	42b4      	cmp	r4, r6
 801ee8c:	f2c0 80b1 	blt.w	801eff2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801ee90:	f04f 0800 	mov.w	r8, #0
 801ee94:	eb03 0408 	add.w	r4, r3, r8
 801ee98:	2c00      	cmp	r4, #0
 801ee9a:	dc3e      	bgt.n	801ef1a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ee9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eea0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801eea4:	f1bb 0f00 	cmp.w	fp, #0
 801eea8:	f340 8108 	ble.w	801f0bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801eeac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eeb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eeb2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eeb6:	f1bb 0b01 	subs.w	fp, fp, #1
 801eeba:	eeb0 6a62 	vmov.f32	s12, s5
 801eebe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eec2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eec6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eeca:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801eece:	eeb0 6a43 	vmov.f32	s12, s6
 801eed2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eed6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801eeda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eede:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eee2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eee6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eeea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eeee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eef2:	ee12 2a90 	vmov	r2, s5
 801eef6:	eef0 2a47 	vmov.f32	s5, s14
 801eefa:	fb92 f3f3 	sdiv	r3, r2, r3
 801eefe:	ee13 2a10 	vmov	r2, s6
 801ef02:	9313      	str	r3, [sp, #76]	; 0x4c
 801ef04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef06:	eeb0 3a67 	vmov.f32	s6, s15
 801ef0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef0e:	9a04      	ldr	r2, [sp, #16]
 801ef10:	9314      	str	r3, [sp, #80]	; 0x50
 801ef12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef14:	bf08      	it	eq
 801ef16:	4613      	moveq	r3, r2
 801ef18:	e787      	b.n	801ee2a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ef1a:	140e      	asrs	r6, r1, #16
 801ef1c:	d462      	bmi.n	801efe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ef1e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ef22:	42b5      	cmp	r5, r6
 801ef24:	dd5e      	ble.n	801efe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ef26:	1417      	asrs	r7, r2, #16
 801ef28:	d45c      	bmi.n	801efe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ef2a:	f8de 400c 	ldr.w	r4, [lr, #12]
 801ef2e:	42bc      	cmp	r4, r7
 801ef30:	dd58      	ble.n	801efe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ef32:	b22d      	sxth	r5, r5
 801ef34:	9c02      	ldr	r4, [sp, #8]
 801ef36:	fb07 6505 	mla	r5, r7, r5, r6
 801ef3a:	5d66      	ldrb	r6, [r4, r5]
 801ef3c:	2e00      	cmp	r6, #0
 801ef3e:	d051      	beq.n	801efe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ef40:	9c01      	ldr	r4, [sp, #4]
 801ef42:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801ef46:	f06f 0401 	mvn.w	r4, #1
 801ef4a:	fb04 f408 	mul.w	r4, r4, r8
 801ef4e:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801ef52:	5b05      	ldrh	r5, [r0, r4]
 801ef54:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ef58:	9403      	str	r4, [sp, #12]
 801ef5a:	9c05      	ldr	r4, [sp, #20]
 801ef5c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ef60:	4366      	muls	r6, r4
 801ef62:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ef66:	1c74      	adds	r4, r6, #1
 801ef68:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801ef6c:	122e      	asrs	r6, r5, #8
 801ef6e:	1224      	asrs	r4, r4, #8
 801ef70:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ef74:	00ed      	lsls	r5, r5, #3
 801ef76:	b2a7      	uxth	r7, r4
 801ef78:	43e4      	mvns	r4, r4
 801ef7a:	b2ed      	uxtb	r5, r5
 801ef7c:	b2e4      	uxtb	r4, r4
 801ef7e:	fb16 f604 	smulbb	r6, r6, r4
 801ef82:	fb15 f504 	smulbb	r5, r5, r4
 801ef86:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ef8a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801ef8e:	fb1a fa04 	smulbb	sl, sl, r4
 801ef92:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ef96:	fa1f fc8c 	uxth.w	ip, ip
 801ef9a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ef9e:	fa5f f989 	uxtb.w	r9, r9
 801efa2:	fb06 a607 	mla	r6, r6, r7, sl
 801efa6:	f10c 0401 	add.w	r4, ip, #1
 801efaa:	fb09 5507 	mla	r5, r9, r7, r5
 801efae:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801efb2:	9c03      	ldr	r4, [sp, #12]
 801efb4:	b2ad      	uxth	r5, r5
 801efb6:	b2b6      	uxth	r6, r6
 801efb8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801efbc:	f105 0a01 	add.w	sl, r5, #1
 801efc0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801efc4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801efc8:	ea4c 0c0a 	orr.w	ip, ip, sl
 801efcc:	f106 0a01 	add.w	sl, r6, #1
 801efd0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801efd4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801efd8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801efdc:	ea4c 0c0a 	orr.w	ip, ip, sl
 801efe0:	f820 c004 	strh.w	ip, [r0, r4]
 801efe4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801efe6:	f108 38ff 	add.w	r8, r8, #4294967295
 801efea:	4421      	add	r1, r4
 801efec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801efee:	4422      	add	r2, r4
 801eff0:	e750      	b.n	801ee94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801eff2:	f04f 0900 	mov.w	r9, #0
 801eff6:	eba3 0409 	sub.w	r4, r3, r9
 801effa:	2c00      	cmp	r4, #0
 801effc:	f77f af4e 	ble.w	801ee9c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f000:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f004:	140d      	asrs	r5, r1, #16
 801f006:	1414      	asrs	r4, r2, #16
 801f008:	fb06 5404 	mla	r4, r6, r4, r5
 801f00c:	9d02      	ldr	r5, [sp, #8]
 801f00e:	5d2e      	ldrb	r6, [r5, r4]
 801f010:	2e00      	cmp	r6, #0
 801f012:	d04c      	beq.n	801f0ae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f014:	9d01      	ldr	r5, [sp, #4]
 801f016:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f01a:	9c05      	ldr	r4, [sp, #20]
 801f01c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f020:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f024:	4366      	muls	r6, r4
 801f026:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f02a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f02e:	1c74      	adds	r4, r6, #1
 801f030:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f034:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f038:	122e      	asrs	r6, r5, #8
 801f03a:	1224      	asrs	r4, r4, #8
 801f03c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f040:	00ed      	lsls	r5, r5, #3
 801f042:	b2a7      	uxth	r7, r4
 801f044:	43e4      	mvns	r4, r4
 801f046:	b2ed      	uxtb	r5, r5
 801f048:	b2e4      	uxtb	r4, r4
 801f04a:	fb16 f604 	smulbb	r6, r6, r4
 801f04e:	fb15 f504 	smulbb	r5, r5, r4
 801f052:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f056:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f05a:	fb1a fa04 	smulbb	sl, sl, r4
 801f05e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f062:	fa1f fc8c 	uxth.w	ip, ip
 801f066:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f06a:	fa5f f888 	uxtb.w	r8, r8
 801f06e:	fb06 a607 	mla	r6, r6, r7, sl
 801f072:	f10c 0401 	add.w	r4, ip, #1
 801f076:	fb08 5507 	mla	r5, r8, r7, r5
 801f07a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f07e:	b2ad      	uxth	r5, r5
 801f080:	b2b6      	uxth	r6, r6
 801f082:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f086:	f105 0a01 	add.w	sl, r5, #1
 801f08a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f08e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f092:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f096:	f106 0a01 	add.w	sl, r6, #1
 801f09a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f09e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f0a2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f0a6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f0aa:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f0ae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f0b0:	f109 0901 	add.w	r9, r9, #1
 801f0b4:	4421      	add	r1, r4
 801f0b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f0b8:	4422      	add	r2, r4
 801f0ba:	e79c      	b.n	801eff6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f0bc:	b007      	add	sp, #28
 801f0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f0c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0c6:	b085      	sub	sp, #20
 801f0c8:	468b      	mov	fp, r1
 801f0ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f0ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f0d0:	9203      	str	r2, [sp, #12]
 801f0d2:	6861      	ldr	r1, [r4, #4]
 801f0d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f0d8:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f0dc:	fb01 2000 	mla	r0, r1, r0, r2
 801f0e0:	6822      	ldr	r2, [r4, #0]
 801f0e2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f0e6:	f8d8 2000 	ldr.w	r2, [r8]
 801f0ea:	9200      	str	r2, [sp, #0]
 801f0ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f0f0:	9201      	str	r2, [sp, #4]
 801f0f2:	f1bb 0f00 	cmp.w	fp, #0
 801f0f6:	dc03      	bgt.n	801f100 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f0f8:	9a03      	ldr	r2, [sp, #12]
 801f0fa:	2a00      	cmp	r2, #0
 801f0fc:	f340 8146 	ble.w	801f38c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f102:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f106:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f10a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f10c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f110:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f114:	2b00      	cmp	r3, #0
 801f116:	dd0e      	ble.n	801f136 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f118:	140c      	asrs	r4, r1, #16
 801f11a:	d405      	bmi.n	801f128 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f11c:	42bc      	cmp	r4, r7
 801f11e:	da03      	bge.n	801f128 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f120:	1414      	asrs	r4, r2, #16
 801f122:	d401      	bmi.n	801f128 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f124:	42b4      	cmp	r4, r6
 801f126:	db07      	blt.n	801f138 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f128:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f12a:	3b01      	subs	r3, #1
 801f12c:	3002      	adds	r0, #2
 801f12e:	4421      	add	r1, r4
 801f130:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f132:	4422      	add	r2, r4
 801f134:	e7ee      	b.n	801f114 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f136:	d017      	beq.n	801f168 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f138:	1e5c      	subs	r4, r3, #1
 801f13a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f13c:	fb05 1504 	mla	r5, r5, r4, r1
 801f140:	142d      	asrs	r5, r5, #16
 801f142:	d409      	bmi.n	801f158 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f144:	42bd      	cmp	r5, r7
 801f146:	da07      	bge.n	801f158 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f148:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f14a:	fb05 2404 	mla	r4, r5, r4, r2
 801f14e:	1424      	asrs	r4, r4, #16
 801f150:	d402      	bmi.n	801f158 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f152:	42b4      	cmp	r4, r6
 801f154:	f2c0 80b3 	blt.w	801f2be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f158:	2600      	movs	r6, #0
 801f15a:	199c      	adds	r4, r3, r6
 801f15c:	2c00      	cmp	r4, #0
 801f15e:	dc3e      	bgt.n	801f1de <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f160:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f164:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f168:	f1bb 0f00 	cmp.w	fp, #0
 801f16c:	f340 810e 	ble.w	801f38c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f170:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f176:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f17a:	f1bb 0b01 	subs.w	fp, fp, #1
 801f17e:	eeb0 6a62 	vmov.f32	s12, s5
 801f182:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f186:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f18a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f18e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f192:	eeb0 6a43 	vmov.f32	s12, s6
 801f196:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f19a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f19e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f1a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f1a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f1aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f1ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f1b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f1b6:	ee12 2a90 	vmov	r2, s5
 801f1ba:	eef0 2a47 	vmov.f32	s5, s14
 801f1be:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1c2:	ee13 2a10 	vmov	r2, s6
 801f1c6:	9311      	str	r3, [sp, #68]	; 0x44
 801f1c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f1ca:	eeb0 3a67 	vmov.f32	s6, s15
 801f1ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1d2:	9a03      	ldr	r2, [sp, #12]
 801f1d4:	9312      	str	r3, [sp, #72]	; 0x48
 801f1d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f1d8:	bf08      	it	eq
 801f1da:	4613      	moveq	r3, r2
 801f1dc:	e789      	b.n	801f0f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f1de:	140f      	asrs	r7, r1, #16
 801f1e0:	d45f      	bmi.n	801f2a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f1e2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f1e6:	42bd      	cmp	r5, r7
 801f1e8:	dd5b      	ble.n	801f2a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f1ea:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f1ee:	d458      	bmi.n	801f2a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f1f0:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f1f4:	4564      	cmp	r4, ip
 801f1f6:	dd54      	ble.n	801f2a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f1f8:	b22d      	sxth	r5, r5
 801f1fa:	9c01      	ldr	r4, [sp, #4]
 801f1fc:	fb0c 7505 	mla	r5, ip, r5, r7
 801f200:	5d64      	ldrb	r4, [r4, r5]
 801f202:	2cff      	cmp	r4, #255	; 0xff
 801f204:	d053      	beq.n	801f2ae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801f206:	2c00      	cmp	r4, #0
 801f208:	d04b      	beq.n	801f2a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f20a:	9f00      	ldr	r7, [sp, #0]
 801f20c:	fa1f fc84 	uxth.w	ip, r4
 801f210:	43e4      	mvns	r4, r4
 801f212:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f216:	f06f 0501 	mvn.w	r5, #1
 801f21a:	b2e4      	uxtb	r4, r4
 801f21c:	4375      	muls	r5, r6
 801f21e:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f222:	9502      	str	r5, [sp, #8]
 801f224:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f228:	5b45      	ldrh	r5, [r0, r5]
 801f22a:	122f      	asrs	r7, r5, #8
 801f22c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f230:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f234:	00ed      	lsls	r5, r5, #3
 801f236:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f23a:	fb17 f704 	smulbb	r7, r7, r4
 801f23e:	b2ed      	uxtb	r5, r5
 801f240:	fb1a fa04 	smulbb	sl, sl, r4
 801f244:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f248:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f24c:	fb15 f504 	smulbb	r5, r5, r4
 801f250:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f254:	fa1f fe8e 	uxth.w	lr, lr
 801f258:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f25c:	fa5f f989 	uxtb.w	r9, r9
 801f260:	fb07 a70c 	mla	r7, r7, ip, sl
 801f264:	f10e 0401 	add.w	r4, lr, #1
 801f268:	fb09 550c 	mla	r5, r9, ip, r5
 801f26c:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f270:	9c02      	ldr	r4, [sp, #8]
 801f272:	b2ad      	uxth	r5, r5
 801f274:	b2bf      	uxth	r7, r7
 801f276:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f27a:	f105 0a01 	add.w	sl, r5, #1
 801f27e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f282:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f286:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f28a:	f107 0a01 	add.w	sl, r7, #1
 801f28e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f292:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f296:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f29a:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f29e:	f820 e004 	strh.w	lr, [r0, r4]
 801f2a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f2a4:	3e01      	subs	r6, #1
 801f2a6:	4421      	add	r1, r4
 801f2a8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f2aa:	4422      	add	r2, r4
 801f2ac:	e755      	b.n	801f15a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f2ae:	9c00      	ldr	r4, [sp, #0]
 801f2b0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f2b4:	f06f 0401 	mvn.w	r4, #1
 801f2b8:	4374      	muls	r4, r6
 801f2ba:	5305      	strh	r5, [r0, r4]
 801f2bc:	e7f1      	b.n	801f2a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f2be:	f04f 0900 	mov.w	r9, #0
 801f2c2:	eba3 0409 	sub.w	r4, r3, r9
 801f2c6:	2c00      	cmp	r4, #0
 801f2c8:	f77f af4a 	ble.w	801f160 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f2cc:	1414      	asrs	r4, r2, #16
 801f2ce:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f2d2:	140d      	asrs	r5, r1, #16
 801f2d4:	fb06 5504 	mla	r5, r6, r4, r5
 801f2d8:	9c01      	ldr	r4, [sp, #4]
 801f2da:	5d64      	ldrb	r4, [r4, r5]
 801f2dc:	2cff      	cmp	r4, #255	; 0xff
 801f2de:	d04f      	beq.n	801f380 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801f2e0:	2c00      	cmp	r4, #0
 801f2e2:	d046      	beq.n	801f372 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f2e4:	9e00      	ldr	r6, [sp, #0]
 801f2e6:	b2a7      	uxth	r7, r4
 801f2e8:	43e4      	mvns	r4, r4
 801f2ea:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801f2ee:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f2f2:	b2e4      	uxtb	r4, r4
 801f2f4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f2f8:	122e      	asrs	r6, r5, #8
 801f2fa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f2fe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f302:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f306:	00ed      	lsls	r5, r5, #3
 801f308:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f30c:	fb16 f604 	smulbb	r6, r6, r4
 801f310:	b2ed      	uxtb	r5, r5
 801f312:	fb1a fa04 	smulbb	sl, sl, r4
 801f316:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f31a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f31e:	fb15 f504 	smulbb	r5, r5, r4
 801f322:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f326:	fa1f fc8c 	uxth.w	ip, ip
 801f32a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f32e:	fa5f fe8e 	uxtb.w	lr, lr
 801f332:	fb06 a607 	mla	r6, r6, r7, sl
 801f336:	f10c 0401 	add.w	r4, ip, #1
 801f33a:	fb0e 5507 	mla	r5, lr, r7, r5
 801f33e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f342:	b2ad      	uxth	r5, r5
 801f344:	b2b6      	uxth	r6, r6
 801f346:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f34a:	f105 0a01 	add.w	sl, r5, #1
 801f34e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f352:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f356:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f35a:	f106 0a01 	add.w	sl, r6, #1
 801f35e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f362:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f366:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f36a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f36e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f372:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f374:	f109 0901 	add.w	r9, r9, #1
 801f378:	4421      	add	r1, r4
 801f37a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f37c:	4422      	add	r2, r4
 801f37e:	e7a0      	b.n	801f2c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f380:	9c00      	ldr	r4, [sp, #0]
 801f382:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f386:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801f38a:	e7f2      	b.n	801f372 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f38c:	b005      	add	sp, #20
 801f38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f392 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f396:	b085      	sub	sp, #20
 801f398:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f39a:	9203      	str	r2, [sp, #12]
 801f39c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f3a0:	9100      	str	r1, [sp, #0]
 801f3a2:	9201      	str	r2, [sp, #4]
 801f3a4:	6841      	ldr	r1, [r0, #4]
 801f3a6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f3aa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f3ae:	fb01 2404 	mla	r4, r1, r4, r2
 801f3b2:	6802      	ldr	r2, [r0, #0]
 801f3b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f3b8:	f8de 2000 	ldr.w	r2, [lr]
 801f3bc:	9202      	str	r2, [sp, #8]
 801f3be:	9a01      	ldr	r2, [sp, #4]
 801f3c0:	43d6      	mvns	r6, r2
 801f3c2:	b2f6      	uxtb	r6, r6
 801f3c4:	9a00      	ldr	r2, [sp, #0]
 801f3c6:	2a00      	cmp	r2, #0
 801f3c8:	dc03      	bgt.n	801f3d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f3ca:	9a03      	ldr	r2, [sp, #12]
 801f3cc:	2a00      	cmp	r2, #0
 801f3ce:	f340 8124 	ble.w	801f61a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f3d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f3d4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f3d8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f3dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f3de:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f3e2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	dd0e      	ble.n	801f408 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f3ea:	1408      	asrs	r0, r1, #16
 801f3ec:	d405      	bmi.n	801f3fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f3ee:	4560      	cmp	r0, ip
 801f3f0:	da03      	bge.n	801f3fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f3f2:	1410      	asrs	r0, r2, #16
 801f3f4:	d401      	bmi.n	801f3fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f3f6:	42b8      	cmp	r0, r7
 801f3f8:	db07      	blt.n	801f40a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f3fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f3fc:	3b01      	subs	r3, #1
 801f3fe:	3402      	adds	r4, #2
 801f400:	4401      	add	r1, r0
 801f402:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f404:	4402      	add	r2, r0
 801f406:	e7ee      	b.n	801f3e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f408:	d06e      	beq.n	801f4e8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f40a:	1e58      	subs	r0, r3, #1
 801f40c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f40e:	fb05 1500 	mla	r5, r5, r0, r1
 801f412:	142d      	asrs	r5, r5, #16
 801f414:	d45c      	bmi.n	801f4d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f416:	4565      	cmp	r5, ip
 801f418:	da5a      	bge.n	801f4d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f41a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f41c:	fb05 2000 	mla	r0, r5, r0, r2
 801f420:	1400      	asrs	r0, r0, #16
 801f422:	d455      	bmi.n	801f4d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f424:	42b8      	cmp	r0, r7
 801f426:	da53      	bge.n	801f4d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f428:	4699      	mov	r9, r3
 801f42a:	46a2      	mov	sl, r4
 801f42c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801f430:	f1b9 0f00 	cmp.w	r9, #0
 801f434:	dd54      	ble.n	801f4e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f436:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f43a:	140d      	asrs	r5, r1, #16
 801f43c:	1410      	asrs	r0, r2, #16
 801f43e:	f109 39ff 	add.w	r9, r9, #4294967295
 801f442:	fb07 5000 	mla	r0, r7, r0, r5
 801f446:	9d02      	ldr	r5, [sp, #8]
 801f448:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f44c:	f8ba 5000 	ldrh.w	r5, [sl]
 801f450:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f454:	122f      	asrs	r7, r5, #8
 801f456:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f45a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f45e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f462:	00ed      	lsls	r5, r5, #3
 801f464:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f468:	fb17 f706 	smulbb	r7, r7, r6
 801f46c:	b2ed      	uxtb	r5, r5
 801f46e:	fb18 f806 	smulbb	r8, r8, r6
 801f472:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f476:	10c7      	asrs	r7, r0, #3
 801f478:	fb15 f506 	smulbb	r5, r5, r6
 801f47c:	00c0      	lsls	r0, r0, #3
 801f47e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f482:	fa1f fc8c 	uxth.w	ip, ip
 801f486:	b2c0      	uxtb	r0, r0
 801f488:	fb07 870b 	mla	r7, r7, fp, r8
 801f48c:	fb00 500b 	mla	r0, r0, fp, r5
 801f490:	f10c 0501 	add.w	r5, ip, #1
 801f494:	b2bf      	uxth	r7, r7
 801f496:	b280      	uxth	r0, r0
 801f498:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f49c:	f107 0801 	add.w	r8, r7, #1
 801f4a0:	1c45      	adds	r5, r0, #1
 801f4a2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f4a6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f4aa:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f4ae:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f4b0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f4b4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f4b8:	4401      	add	r1, r0
 801f4ba:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f4be:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f4c0:	ea4c 0c05 	orr.w	ip, ip, r5
 801f4c4:	4402      	add	r2, r0
 801f4c6:	ea4c 0c08 	orr.w	ip, ip, r8
 801f4ca:	f82a cb02 	strh.w	ip, [sl], #2
 801f4ce:	e7af      	b.n	801f430 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f4d0:	f04f 0800 	mov.w	r8, #0
 801f4d4:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801f4d8:	eb03 0008 	add.w	r0, r3, r8
 801f4dc:	2800      	cmp	r0, #0
 801f4de:	dc41      	bgt.n	801f564 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f4e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f4e8:	9b00      	ldr	r3, [sp, #0]
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	f340 8095 	ble.w	801f61a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f4f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f4f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4fe:	eef0 6a62 	vmov.f32	s13, s5
 801f502:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f506:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f50a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f50e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801f512:	eef0 6a43 	vmov.f32	s13, s6
 801f516:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f51a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801f51e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f522:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f526:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f52a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f52e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f532:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f536:	ee12 2a90 	vmov	r2, s5
 801f53a:	eef0 2a47 	vmov.f32	s5, s14
 801f53e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f542:	ee13 2a10 	vmov	r2, s6
 801f546:	9311      	str	r3, [sp, #68]	; 0x44
 801f548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f54a:	eeb0 3a67 	vmov.f32	s6, s15
 801f54e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f552:	9312      	str	r3, [sp, #72]	; 0x48
 801f554:	9b00      	ldr	r3, [sp, #0]
 801f556:	9a03      	ldr	r2, [sp, #12]
 801f558:	3b01      	subs	r3, #1
 801f55a:	9300      	str	r3, [sp, #0]
 801f55c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f55e:	bf08      	it	eq
 801f560:	4613      	moveq	r3, r2
 801f562:	e72f      	b.n	801f3c4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f564:	140f      	asrs	r7, r1, #16
 801f566:	d451      	bmi.n	801f60c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f568:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f56c:	42bd      	cmp	r5, r7
 801f56e:	dd4d      	ble.n	801f60c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f570:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f574:	d44a      	bmi.n	801f60c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f576:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f57a:	4560      	cmp	r0, ip
 801f57c:	dd46      	ble.n	801f60c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f57e:	b22d      	sxth	r5, r5
 801f580:	9802      	ldr	r0, [sp, #8]
 801f582:	fb0c 7505 	mla	r5, ip, r5, r7
 801f586:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801f58a:	f06f 0501 	mvn.w	r5, #1
 801f58e:	fb05 fb08 	mul.w	fp, r5, r8
 801f592:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f596:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f59a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f59e:	122f      	asrs	r7, r5, #8
 801f5a0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f5a4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f5a8:	00ed      	lsls	r5, r5, #3
 801f5aa:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f5ae:	fb17 f706 	smulbb	r7, r7, r6
 801f5b2:	b2ed      	uxtb	r5, r5
 801f5b4:	fb19 f906 	smulbb	r9, r9, r6
 801f5b8:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f5bc:	10c7      	asrs	r7, r0, #3
 801f5be:	fb15 f506 	smulbb	r5, r5, r6
 801f5c2:	00c0      	lsls	r0, r0, #3
 801f5c4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f5c8:	fa1f fc8c 	uxth.w	ip, ip
 801f5cc:	b2c0      	uxtb	r0, r0
 801f5ce:	fb07 970a 	mla	r7, r7, sl, r9
 801f5d2:	fb00 500a 	mla	r0, r0, sl, r5
 801f5d6:	f10c 0501 	add.w	r5, ip, #1
 801f5da:	b2bf      	uxth	r7, r7
 801f5dc:	b280      	uxth	r0, r0
 801f5de:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f5e2:	f107 0901 	add.w	r9, r7, #1
 801f5e6:	1c45      	adds	r5, r0, #1
 801f5e8:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f5ec:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f5f0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f5f4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f5f8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f5fc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f600:	ea4c 0c05 	orr.w	ip, ip, r5
 801f604:	ea4c 0c09 	orr.w	ip, ip, r9
 801f608:	f824 c00b 	strh.w	ip, [r4, fp]
 801f60c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f60e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f612:	4401      	add	r1, r0
 801f614:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f616:	4402      	add	r2, r0
 801f618:	e75e      	b.n	801f4d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f61a:	b005      	add	sp, #20
 801f61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f620 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f624:	b085      	sub	sp, #20
 801f626:	4693      	mov	fp, r2
 801f628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f62c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f62e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f630:	6870      	ldr	r0, [r6, #4]
 801f632:	9101      	str	r1, [sp, #4]
 801f634:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f638:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f63c:	fb00 2404 	mla	r4, r0, r4, r2
 801f640:	6832      	ldr	r2, [r6, #0]
 801f642:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f646:	682a      	ldr	r2, [r5, #0]
 801f648:	9202      	str	r2, [sp, #8]
 801f64a:	9a01      	ldr	r2, [sp, #4]
 801f64c:	2a00      	cmp	r2, #0
 801f64e:	dc03      	bgt.n	801f658 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f650:	f1bb 0f00 	cmp.w	fp, #0
 801f654:	f340 809a 	ble.w	801f78c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f65a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f65e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f662:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f664:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f668:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f66c:	2b00      	cmp	r3, #0
 801f66e:	dd0c      	ble.n	801f68a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f670:	1406      	asrs	r6, r0, #16
 801f672:	d405      	bmi.n	801f680 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f674:	454e      	cmp	r6, r9
 801f676:	da03      	bge.n	801f680 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f678:	1416      	asrs	r6, r2, #16
 801f67a:	d401      	bmi.n	801f680 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f67c:	4546      	cmp	r6, r8
 801f67e:	db05      	blt.n	801f68c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f680:	4470      	add	r0, lr
 801f682:	4462      	add	r2, ip
 801f684:	3b01      	subs	r3, #1
 801f686:	3402      	adds	r4, #2
 801f688:	e7f0      	b.n	801f66c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f68a:	d00f      	beq.n	801f6ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f68c:	1e5e      	subs	r6, r3, #1
 801f68e:	fb0e 0706 	mla	r7, lr, r6, r0
 801f692:	143f      	asrs	r7, r7, #16
 801f694:	d541      	bpl.n	801f71a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f696:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f69a:	4698      	mov	r8, r3
 801f69c:	9603      	str	r6, [sp, #12]
 801f69e:	f1b8 0f00 	cmp.w	r8, #0
 801f6a2:	dc56      	bgt.n	801f752 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f6a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f6a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f6ac:	9b01      	ldr	r3, [sp, #4]
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	dd6c      	ble.n	801f78c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f6b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f6b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f6b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f6bc:	eeb0 6a62 	vmov.f32	s12, s5
 801f6c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f6c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f6c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6cc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f6d0:	eeb0 6a43 	vmov.f32	s12, s6
 801f6d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6d8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f6dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f6f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f6f4:	ee12 2a90 	vmov	r2, s5
 801f6f8:	eef0 2a47 	vmov.f32	s5, s14
 801f6fc:	fb92 fef3 	sdiv	lr, r2, r3
 801f700:	ee13 2a10 	vmov	r2, s6
 801f704:	eeb0 3a67 	vmov.f32	s6, s15
 801f708:	fb92 fcf3 	sdiv	ip, r2, r3
 801f70c:	9b01      	ldr	r3, [sp, #4]
 801f70e:	3b01      	subs	r3, #1
 801f710:	9301      	str	r3, [sp, #4]
 801f712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f714:	bf08      	it	eq
 801f716:	465b      	moveq	r3, fp
 801f718:	e797      	b.n	801f64a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f71a:	454f      	cmp	r7, r9
 801f71c:	dabb      	bge.n	801f696 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f71e:	fb0c 2606 	mla	r6, ip, r6, r2
 801f722:	1436      	asrs	r6, r6, #16
 801f724:	d4b7      	bmi.n	801f696 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f726:	4546      	cmp	r6, r8
 801f728:	dab5      	bge.n	801f696 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f72a:	461e      	mov	r6, r3
 801f72c:	46a0      	mov	r8, r4
 801f72e:	2e00      	cmp	r6, #0
 801f730:	ddb8      	ble.n	801f6a4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f732:	1417      	asrs	r7, r2, #16
 801f734:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f738:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f73c:	9902      	ldr	r1, [sp, #8]
 801f73e:	4470      	add	r0, lr
 801f740:	4462      	add	r2, ip
 801f742:	fb0a 9707 	mla	r7, sl, r7, r9
 801f746:	3e01      	subs	r6, #1
 801f748:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f74c:	f828 7b02 	strh.w	r7, [r8], #2
 801f750:	e7ed      	b.n	801f72e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f752:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f756:	d414      	bmi.n	801f782 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f758:	68ae      	ldr	r6, [r5, #8]
 801f75a:	454e      	cmp	r6, r9
 801f75c:	dd11      	ble.n	801f782 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f75e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f762:	d40e      	bmi.n	801f782 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f764:	68ef      	ldr	r7, [r5, #12]
 801f766:	4557      	cmp	r7, sl
 801f768:	dd0b      	ble.n	801f782 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f76a:	b236      	sxth	r6, r6
 801f76c:	f06f 0101 	mvn.w	r1, #1
 801f770:	9f02      	ldr	r7, [sp, #8]
 801f772:	fb0a 9606 	mla	r6, sl, r6, r9
 801f776:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f77a:	fb01 f608 	mul.w	r6, r1, r8
 801f77e:	9903      	ldr	r1, [sp, #12]
 801f780:	538f      	strh	r7, [r1, r6]
 801f782:	4470      	add	r0, lr
 801f784:	4462      	add	r2, ip
 801f786:	f108 38ff 	add.w	r8, r8, #4294967295
 801f78a:	e788      	b.n	801f69e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f78c:	b005      	add	sp, #20
 801f78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f792 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f796:	b085      	sub	sp, #20
 801f798:	468b      	mov	fp, r1
 801f79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f79e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f7a0:	9202      	str	r2, [sp, #8]
 801f7a2:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f7a6:	6841      	ldr	r1, [r0, #4]
 801f7a8:	9203      	str	r2, [sp, #12]
 801f7aa:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f7ae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f7b2:	fb01 2404 	mla	r4, r1, r4, r2
 801f7b6:	6802      	ldr	r2, [r0, #0]
 801f7b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f7bc:	f8d8 2000 	ldr.w	r2, [r8]
 801f7c0:	9200      	str	r2, [sp, #0]
 801f7c2:	f1bb 0f00 	cmp.w	fp, #0
 801f7c6:	dc03      	bgt.n	801f7d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f7c8:	9a02      	ldr	r2, [sp, #8]
 801f7ca:	2a00      	cmp	r2, #0
 801f7cc:	f340 8134 	ble.w	801fa38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f7d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f7d2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f7d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f7da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f7dc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f7e0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	dd0e      	ble.n	801f806 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f7e8:	1402      	asrs	r2, r0, #16
 801f7ea:	d405      	bmi.n	801f7f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f7ec:	42ba      	cmp	r2, r7
 801f7ee:	da03      	bge.n	801f7f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f7f0:	140a      	asrs	r2, r1, #16
 801f7f2:	d401      	bmi.n	801f7f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f7f4:	42b2      	cmp	r2, r6
 801f7f6:	db07      	blt.n	801f808 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f7f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f7fa:	3b01      	subs	r3, #1
 801f7fc:	3402      	adds	r4, #2
 801f7fe:	4410      	add	r0, r2
 801f800:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f802:	4411      	add	r1, r2
 801f804:	e7ee      	b.n	801f7e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f806:	d019      	beq.n	801f83c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f808:	1e5a      	subs	r2, r3, #1
 801f80a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f80c:	fb05 0502 	mla	r5, r5, r2, r0
 801f810:	142d      	asrs	r5, r5, #16
 801f812:	d409      	bmi.n	801f828 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f814:	42bd      	cmp	r5, r7
 801f816:	da07      	bge.n	801f828 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f818:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f81a:	fb05 1202 	mla	r2, r5, r2, r1
 801f81e:	1412      	asrs	r2, r2, #16
 801f820:	d402      	bmi.n	801f828 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f822:	42b2      	cmp	r2, r6
 801f824:	f2c0 80aa 	blt.w	801f97c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f828:	f04f 0c00 	mov.w	ip, #0
 801f82c:	eb03 020c 	add.w	r2, r3, ip
 801f830:	2a00      	cmp	r2, #0
 801f832:	dc3e      	bgt.n	801f8b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f834:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f838:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f83c:	f1bb 0f00 	cmp.w	fp, #0
 801f840:	f340 80fa 	ble.w	801fa38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f844:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f84a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f84e:	f1bb 0b01 	subs.w	fp, fp, #1
 801f852:	eeb0 6a62 	vmov.f32	s12, s5
 801f856:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f85a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f85e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f862:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f866:	eeb0 6a43 	vmov.f32	s12, s6
 801f86a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f86e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f872:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f876:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f87a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f87e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f882:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f886:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f88a:	ee12 2a90 	vmov	r2, s5
 801f88e:	eef0 2a47 	vmov.f32	s5, s14
 801f892:	fb92 f3f3 	sdiv	r3, r2, r3
 801f896:	ee13 2a10 	vmov	r2, s6
 801f89a:	9311      	str	r3, [sp, #68]	; 0x44
 801f89c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f89e:	eeb0 3a67 	vmov.f32	s6, s15
 801f8a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8a6:	9a02      	ldr	r2, [sp, #8]
 801f8a8:	9312      	str	r3, [sp, #72]	; 0x48
 801f8aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f8ac:	bf08      	it	eq
 801f8ae:	4613      	moveq	r3, r2
 801f8b0:	e787      	b.n	801f7c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f8b2:	1406      	asrs	r6, r0, #16
 801f8b4:	d45b      	bmi.n	801f96e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f8b6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f8ba:	42b5      	cmp	r5, r6
 801f8bc:	dd57      	ble.n	801f96e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f8be:	140f      	asrs	r7, r1, #16
 801f8c0:	d455      	bmi.n	801f96e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f8c2:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801f8c6:	42ba      	cmp	r2, r7
 801f8c8:	dd51      	ble.n	801f96e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f8ca:	b22d      	sxth	r5, r5
 801f8cc:	9a00      	ldr	r2, [sp, #0]
 801f8ce:	fb07 6505 	mla	r5, r7, r5, r6
 801f8d2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801f8d6:	0e2e      	lsrs	r6, r5, #24
 801f8d8:	d049      	beq.n	801f96e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f8da:	f06f 0201 	mvn.w	r2, #1
 801f8de:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f8e2:	fb02 f20c 	mul.w	r2, r2, ip
 801f8e6:	f834 e002 	ldrh.w	lr, [r4, r2]
 801f8ea:	9201      	str	r2, [sp, #4]
 801f8ec:	9a03      	ldr	r2, [sp, #12]
 801f8ee:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f8f2:	4356      	muls	r6, r2
 801f8f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f8f8:	1c72      	adds	r2, r6, #1
 801f8fa:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f8fe:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f902:	b2ed      	uxtb	r5, r5
 801f904:	1212      	asrs	r2, r2, #8
 801f906:	fa1f f982 	uxth.w	r9, r2
 801f90a:	43d2      	mvns	r2, r2
 801f90c:	fb16 f609 	smulbb	r6, r6, r9
 801f910:	b2d2      	uxtb	r2, r2
 801f912:	fb15 f509 	smulbb	r5, r5, r9
 801f916:	fb07 6702 	mla	r7, r7, r2, r6
 801f91a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f91e:	fb1a fa09 	smulbb	sl, sl, r9
 801f922:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f926:	b2bf      	uxth	r7, r7
 801f928:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f92c:	fa5f fe8e 	uxtb.w	lr, lr
 801f930:	fb06 a602 	mla	r6, r6, r2, sl
 801f934:	fb0e 5502 	mla	r5, lr, r2, r5
 801f938:	1c7a      	adds	r2, r7, #1
 801f93a:	b2b6      	uxth	r6, r6
 801f93c:	b2ad      	uxth	r5, r5
 801f93e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f942:	9a01      	ldr	r2, [sp, #4]
 801f944:	f105 0a01 	add.w	sl, r5, #1
 801f948:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f94c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f950:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f954:	ea47 070a 	orr.w	r7, r7, sl
 801f958:	f106 0a01 	add.w	sl, r6, #1
 801f95c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f960:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f964:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f968:	ea47 070a 	orr.w	r7, r7, sl
 801f96c:	52a7      	strh	r7, [r4, r2]
 801f96e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f970:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f974:	4410      	add	r0, r2
 801f976:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f978:	4411      	add	r1, r2
 801f97a:	e757      	b.n	801f82c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f97c:	f04f 0e00 	mov.w	lr, #0
 801f980:	eba3 020e 	sub.w	r2, r3, lr
 801f984:	2a00      	cmp	r2, #0
 801f986:	f77f af55 	ble.w	801f834 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f98a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f98e:	1405      	asrs	r5, r0, #16
 801f990:	140a      	asrs	r2, r1, #16
 801f992:	fb06 5202 	mla	r2, r6, r2, r5
 801f996:	9d00      	ldr	r5, [sp, #0]
 801f998:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f99c:	0e2e      	lsrs	r6, r5, #24
 801f99e:	d044      	beq.n	801fa2a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801f9a0:	9a03      	ldr	r2, [sp, #12]
 801f9a2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f9a6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f9aa:	4356      	muls	r6, r2
 801f9ac:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f9b0:	1c72      	adds	r2, r6, #1
 801f9b2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f9b6:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f9ba:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f9be:	b2ed      	uxtb	r5, r5
 801f9c0:	1212      	asrs	r2, r2, #8
 801f9c2:	fa1f f982 	uxth.w	r9, r2
 801f9c6:	43d2      	mvns	r2, r2
 801f9c8:	fb16 f609 	smulbb	r6, r6, r9
 801f9cc:	b2d2      	uxtb	r2, r2
 801f9ce:	fb15 f509 	smulbb	r5, r5, r9
 801f9d2:	fb07 6702 	mla	r7, r7, r2, r6
 801f9d6:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f9da:	fb1a fa09 	smulbb	sl, sl, r9
 801f9de:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f9e2:	b2bf      	uxth	r7, r7
 801f9e4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f9e8:	fa5f fc8c 	uxtb.w	ip, ip
 801f9ec:	fb06 a602 	mla	r6, r6, r2, sl
 801f9f0:	fb0c 5502 	mla	r5, ip, r2, r5
 801f9f4:	1c7a      	adds	r2, r7, #1
 801f9f6:	b2b6      	uxth	r6, r6
 801f9f8:	b2ad      	uxth	r5, r5
 801f9fa:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f9fe:	f105 0a01 	add.w	sl, r5, #1
 801fa02:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fa06:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fa0a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fa0e:	ea47 070a 	orr.w	r7, r7, sl
 801fa12:	f106 0a01 	add.w	sl, r6, #1
 801fa16:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fa1a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fa1e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fa22:	ea47 070a 	orr.w	r7, r7, sl
 801fa26:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801fa2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fa2c:	f10e 0e01 	add.w	lr, lr, #1
 801fa30:	4410      	add	r0, r2
 801fa32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fa34:	4411      	add	r1, r2
 801fa36:	e7a3      	b.n	801f980 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fa38:	b005      	add	sp, #20
 801fa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fa40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa44:	b085      	sub	sp, #20
 801fa46:	468b      	mov	fp, r1
 801fa48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fa4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fa4e:	9203      	str	r2, [sp, #12]
 801fa50:	6861      	ldr	r1, [r4, #4]
 801fa52:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 801fa56:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801fa5a:	fb01 2000 	mla	r0, r1, r0, r2
 801fa5e:	6822      	ldr	r2, [r4, #0]
 801fa60:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801fa64:	f8d9 2000 	ldr.w	r2, [r9]
 801fa68:	9200      	str	r2, [sp, #0]
 801fa6a:	f1bb 0f00 	cmp.w	fp, #0
 801fa6e:	dc03      	bgt.n	801fa78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fa70:	9a03      	ldr	r2, [sp, #12]
 801fa72:	2a00      	cmp	r2, #0
 801fa74:	f340 8154 	ble.w	801fd20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fa78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fa7a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801fa7e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fa82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fa84:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801fa88:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	dd0e      	ble.n	801faae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fa90:	140c      	asrs	r4, r1, #16
 801fa92:	d405      	bmi.n	801faa0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fa94:	42bc      	cmp	r4, r7
 801fa96:	da03      	bge.n	801faa0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fa98:	1414      	asrs	r4, r2, #16
 801fa9a:	d401      	bmi.n	801faa0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fa9c:	42b4      	cmp	r4, r6
 801fa9e:	db07      	blt.n	801fab0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801faa0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801faa2:	3b01      	subs	r3, #1
 801faa4:	3002      	adds	r0, #2
 801faa6:	4421      	add	r1, r4
 801faa8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801faaa:	4422      	add	r2, r4
 801faac:	e7ee      	b.n	801fa8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801faae:	d017      	beq.n	801fae0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fab0:	1e5c      	subs	r4, r3, #1
 801fab2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fab4:	fb05 1504 	mla	r5, r5, r4, r1
 801fab8:	142d      	asrs	r5, r5, #16
 801faba:	d409      	bmi.n	801fad0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fabc:	42bd      	cmp	r5, r7
 801fabe:	da07      	bge.n	801fad0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fac0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fac2:	fb05 2404 	mla	r4, r5, r4, r2
 801fac6:	1424      	asrs	r4, r4, #16
 801fac8:	d402      	bmi.n	801fad0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801faca:	42b4      	cmp	r4, r6
 801facc:	f2c0 80c0 	blt.w	801fc50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fad0:	2700      	movs	r7, #0
 801fad2:	19dc      	adds	r4, r3, r7
 801fad4:	2c00      	cmp	r4, #0
 801fad6:	dc3e      	bgt.n	801fb56 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fad8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fadc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fae0:	f1bb 0f00 	cmp.w	fp, #0
 801fae4:	f340 811c 	ble.w	801fd20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fae8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801faec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801faee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801faf2:	f1bb 0b01 	subs.w	fp, fp, #1
 801faf6:	eeb0 6a62 	vmov.f32	s12, s5
 801fafa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fafe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fb02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fb06:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fb0a:	eeb0 6a43 	vmov.f32	s12, s6
 801fb0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fb12:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fb16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fb1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fb1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fb22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fb26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fb2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fb2e:	ee12 2a90 	vmov	r2, s5
 801fb32:	eef0 2a47 	vmov.f32	s5, s14
 801fb36:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb3a:	ee13 2a10 	vmov	r2, s6
 801fb3e:	9311      	str	r3, [sp, #68]	; 0x44
 801fb40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb42:	eeb0 3a67 	vmov.f32	s6, s15
 801fb46:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb4a:	9a03      	ldr	r2, [sp, #12]
 801fb4c:	9312      	str	r3, [sp, #72]	; 0x48
 801fb4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb50:	bf08      	it	eq
 801fb52:	4613      	moveq	r3, r2
 801fb54:	e789      	b.n	801fa6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fb56:	140e      	asrs	r6, r1, #16
 801fb58:	d461      	bmi.n	801fc1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fb5a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801fb5e:	42b5      	cmp	r5, r6
 801fb60:	dd5d      	ble.n	801fc1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fb62:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fb66:	d45a      	bmi.n	801fc1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fb68:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801fb6c:	4564      	cmp	r4, ip
 801fb6e:	dd56      	ble.n	801fc1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fb70:	b22d      	sxth	r5, r5
 801fb72:	9c00      	ldr	r4, [sp, #0]
 801fb74:	fb0c 6505 	mla	r5, ip, r5, r6
 801fb78:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801fb7c:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 801fb80:	d04d      	beq.n	801fc1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fb82:	0a26      	lsrs	r6, r4, #8
 801fb84:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fb88:	fa5f f58e 	uxtb.w	r5, lr
 801fb8c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801fb90:	9601      	str	r6, [sp, #4]
 801fb92:	d04a      	beq.n	801fc2a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fb94:	f06f 0601 	mvn.w	r6, #1
 801fb98:	fa1f fa85 	uxth.w	sl, r5
 801fb9c:	fa5f fc8c 	uxtb.w	ip, ip
 801fba0:	43ed      	mvns	r5, r5
 801fba2:	437e      	muls	r6, r7
 801fba4:	b2e4      	uxtb	r4, r4
 801fba6:	fb1c fc0a 	smulbb	ip, ip, sl
 801fbaa:	b2ed      	uxtb	r5, r5
 801fbac:	f830 8006 	ldrh.w	r8, [r0, r6]
 801fbb0:	fb14 f40a 	smulbb	r4, r4, sl
 801fbb4:	9602      	str	r6, [sp, #8]
 801fbb6:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801fbba:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801fbbe:	fb16 f60a 	smulbb	r6, r6, sl
 801fbc2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fbc6:	fb0e cc05 	mla	ip, lr, r5, ip
 801fbca:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 801fbce:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fbd2:	fa1f fc8c 	uxth.w	ip, ip
 801fbd6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801fbda:	fa5f f888 	uxtb.w	r8, r8
 801fbde:	fb0e 6e05 	mla	lr, lr, r5, r6
 801fbe2:	fb08 4405 	mla	r4, r8, r5, r4
 801fbe6:	f10c 0501 	add.w	r5, ip, #1
 801fbea:	fa1f fe8e 	uxth.w	lr, lr
 801fbee:	b2a4      	uxth	r4, r4
 801fbf0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fbf4:	1c66      	adds	r6, r4, #1
 801fbf6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fbfa:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fbfe:	9c02      	ldr	r4, [sp, #8]
 801fc00:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fc04:	ea4c 0c06 	orr.w	ip, ip, r6
 801fc08:	f10e 0601 	add.w	r6, lr, #1
 801fc0c:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 801fc10:	0976      	lsrs	r6, r6, #5
 801fc12:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fc16:	ea4c 0c06 	orr.w	ip, ip, r6
 801fc1a:	f820 c004 	strh.w	ip, [r0, r4]
 801fc1e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fc20:	3f01      	subs	r7, #1
 801fc22:	4421      	add	r1, r4
 801fc24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fc26:	4422      	add	r2, r4
 801fc28:	e753      	b.n	801fad2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fc2a:	4e3f      	ldr	r6, [pc, #252]	; (801fd28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801fc2c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fc30:	f06f 0501 	mvn.w	r5, #1
 801fc34:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 801fc38:	437d      	muls	r5, r7
 801fc3a:	ea4c 0c04 	orr.w	ip, ip, r4
 801fc3e:	9c01      	ldr	r4, [sp, #4]
 801fc40:	00e6      	lsls	r6, r4, #3
 801fc42:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801fc46:	ea4c 0c04 	orr.w	ip, ip, r4
 801fc4a:	f820 c005 	strh.w	ip, [r0, r5]
 801fc4e:	e7e6      	b.n	801fc1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fc50:	f04f 0800 	mov.w	r8, #0
 801fc54:	eba3 0408 	sub.w	r4, r3, r8
 801fc58:	2c00      	cmp	r4, #0
 801fc5a:	f77f af3d 	ble.w	801fad8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fc5e:	140d      	asrs	r5, r1, #16
 801fc60:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801fc64:	1414      	asrs	r4, r2, #16
 801fc66:	fb06 5404 	mla	r4, r6, r4, r5
 801fc6a:	9d00      	ldr	r5, [sp, #0]
 801fc6c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801fc70:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801fc74:	d042      	beq.n	801fcfc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801fc76:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fc7a:	fa5f f58c 	uxtb.w	r5, ip
 801fc7e:	ea4f 4714 	mov.w	r7, r4, lsr #16
 801fc82:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801fc86:	d040      	beq.n	801fd0a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801fc88:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801fc8c:	fa1f fa85 	uxth.w	sl, r5
 801fc90:	b2ff      	uxtb	r7, r7
 801fc92:	43ed      	mvns	r5, r5
 801fc94:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fc98:	fb17 f70a 	smulbb	r7, r7, sl
 801fc9c:	b2ed      	uxtb	r5, r5
 801fc9e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fca2:	b2e4      	uxtb	r4, r4
 801fca4:	b2f6      	uxtb	r6, r6
 801fca6:	fb0c 7705 	mla	r7, ip, r5, r7
 801fcaa:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801fcae:	fb14 f40a 	smulbb	r4, r4, sl
 801fcb2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fcb6:	b2bf      	uxth	r7, r7
 801fcb8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fcbc:	fb16 f60a 	smulbb	r6, r6, sl
 801fcc0:	fa5f fe8e 	uxtb.w	lr, lr
 801fcc4:	fb0e 4405 	mla	r4, lr, r5, r4
 801fcc8:	fb0c 6c05 	mla	ip, ip, r5, r6
 801fccc:	1c7d      	adds	r5, r7, #1
 801fcce:	b2a4      	uxth	r4, r4
 801fcd0:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801fcd4:	1c66      	adds	r6, r4, #1
 801fcd6:	fa1f fc8c 	uxth.w	ip, ip
 801fcda:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fcde:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fce2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fce6:	4337      	orrs	r7, r6
 801fce8:	f10c 0601 	add.w	r6, ip, #1
 801fcec:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801fcf0:	0976      	lsrs	r6, r6, #5
 801fcf2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fcf6:	4337      	orrs	r7, r6
 801fcf8:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 801fcfc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fcfe:	f108 0801 	add.w	r8, r8, #1
 801fd02:	4421      	add	r1, r4
 801fd04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fd06:	4422      	add	r2, r4
 801fd08:	e7a4      	b.n	801fc54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fd0a:	4d07      	ldr	r5, [pc, #28]	; (801fd28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801fd0c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fd10:	00f6      	lsls	r6, r6, #3
 801fd12:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 801fd16:	4327      	orrs	r7, r4
 801fd18:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801fd1c:	4327      	orrs	r7, r4
 801fd1e:	e7eb      	b.n	801fcf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801fd20:	b005      	add	sp, #20
 801fd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd26:	bf00      	nop
 801fd28:	fffff800 	.word	0xfffff800

0801fd2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd30:	b087      	sub	sp, #28
 801fd32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fd36:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fd38:	9204      	str	r2, [sp, #16]
 801fd3a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fd3e:	9101      	str	r1, [sp, #4]
 801fd40:	9205      	str	r2, [sp, #20]
 801fd42:	6841      	ldr	r1, [r0, #4]
 801fd44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801fd48:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801fd4c:	fb01 2404 	mla	r4, r1, r4, r2
 801fd50:	6802      	ldr	r2, [r0, #0]
 801fd52:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fd56:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801fd5a:	3201      	adds	r2, #1
 801fd5c:	f022 0201 	bic.w	r2, r2, #1
 801fd60:	9202      	str	r2, [sp, #8]
 801fd62:	f8d8 2000 	ldr.w	r2, [r8]
 801fd66:	9203      	str	r2, [sp, #12]
 801fd68:	9a01      	ldr	r2, [sp, #4]
 801fd6a:	2a00      	cmp	r2, #0
 801fd6c:	dc03      	bgt.n	801fd76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fd6e:	9a04      	ldr	r2, [sp, #16]
 801fd70:	2a00      	cmp	r2, #0
 801fd72:	f340 814d 	ble.w	8020010 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fd76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd78:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fd7c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fd80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fd82:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fd86:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fd8a:	2b00      	cmp	r3, #0
 801fd8c:	dd0e      	ble.n	801fdac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fd8e:	1402      	asrs	r2, r0, #16
 801fd90:	d405      	bmi.n	801fd9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fd92:	42ba      	cmp	r2, r7
 801fd94:	da03      	bge.n	801fd9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fd96:	140a      	asrs	r2, r1, #16
 801fd98:	d401      	bmi.n	801fd9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fd9a:	42b2      	cmp	r2, r6
 801fd9c:	db07      	blt.n	801fdae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fd9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fda0:	3b01      	subs	r3, #1
 801fda2:	3402      	adds	r4, #2
 801fda4:	4410      	add	r0, r2
 801fda6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fda8:	4411      	add	r1, r2
 801fdaa:	e7ee      	b.n	801fd8a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801fdac:	d019      	beq.n	801fde2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801fdae:	1e5a      	subs	r2, r3, #1
 801fdb0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fdb2:	fb05 0502 	mla	r5, r5, r2, r0
 801fdb6:	142d      	asrs	r5, r5, #16
 801fdb8:	d409      	bmi.n	801fdce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fdba:	42bd      	cmp	r5, r7
 801fdbc:	da07      	bge.n	801fdce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fdbe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fdc0:	fb05 1202 	mla	r2, r5, r2, r1
 801fdc4:	1412      	asrs	r2, r2, #16
 801fdc6:	d402      	bmi.n	801fdce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fdc8:	42b2      	cmp	r2, r6
 801fdca:	f2c0 80b7 	blt.w	801ff3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fdce:	f04f 0c00 	mov.w	ip, #0
 801fdd2:	eb03 020c 	add.w	r2, r3, ip
 801fdd6:	2a00      	cmp	r2, #0
 801fdd8:	dc3f      	bgt.n	801fe5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801fdda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fdde:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fde2:	9b01      	ldr	r3, [sp, #4]
 801fde4:	2b00      	cmp	r3, #0
 801fde6:	f340 8113 	ble.w	8020010 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fdea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fdee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fdf0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fdf4:	eeb0 6a62 	vmov.f32	s12, s5
 801fdf8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fdfc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe04:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fe08:	eeb0 6a43 	vmov.f32	s12, s6
 801fe0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe10:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fe14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe18:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe2c:	ee12 2a90 	vmov	r2, s5
 801fe30:	eef0 2a47 	vmov.f32	s5, s14
 801fe34:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe38:	ee13 2a10 	vmov	r2, s6
 801fe3c:	9313      	str	r3, [sp, #76]	; 0x4c
 801fe3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe40:	eeb0 3a67 	vmov.f32	s6, s15
 801fe44:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe48:	9314      	str	r3, [sp, #80]	; 0x50
 801fe4a:	9b01      	ldr	r3, [sp, #4]
 801fe4c:	9a04      	ldr	r2, [sp, #16]
 801fe4e:	3b01      	subs	r3, #1
 801fe50:	9301      	str	r3, [sp, #4]
 801fe52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe54:	bf08      	it	eq
 801fe56:	4613      	moveq	r3, r2
 801fe58:	e786      	b.n	801fd68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fe5a:	1405      	asrs	r5, r0, #16
 801fe5c:	d467      	bmi.n	801ff2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801fe5e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801fe62:	42aa      	cmp	r2, r5
 801fe64:	dd63      	ble.n	801ff2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801fe66:	140e      	asrs	r6, r1, #16
 801fe68:	d461      	bmi.n	801ff2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801fe6a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801fe6e:	42b2      	cmp	r2, r6
 801fe70:	dd5d      	ble.n	801ff2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801fe72:	9a02      	ldr	r2, [sp, #8]
 801fe74:	fb06 5502 	mla	r5, r6, r2, r5
 801fe78:	9e03      	ldr	r6, [sp, #12]
 801fe7a:	086a      	lsrs	r2, r5, #1
 801fe7c:	5cb2      	ldrb	r2, [r6, r2]
 801fe7e:	07ee      	lsls	r6, r5, #31
 801fe80:	bf54      	ite	pl
 801fe82:	f002 020f 	andpl.w	r2, r2, #15
 801fe86:	1112      	asrmi	r2, r2, #4
 801fe88:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fe8c:	b2d2      	uxtb	r2, r2
 801fe8e:	2a00      	cmp	r2, #0
 801fe90:	d04d      	beq.n	801ff2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801fe92:	f06f 0601 	mvn.w	r6, #1
 801fe96:	4d60      	ldr	r5, [pc, #384]	; (8020018 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801fe98:	fb06 fb0c 	mul.w	fp, r6, ip
 801fe9c:	9e05      	ldr	r6, [sp, #20]
 801fe9e:	682d      	ldr	r5, [r5, #0]
 801fea0:	4372      	muls	r2, r6
 801fea2:	f834 e00b 	ldrh.w	lr, [r4, fp]
 801fea6:	0a2f      	lsrs	r7, r5, #8
 801fea8:	1c56      	adds	r6, r2, #1
 801feaa:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801feae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801feb2:	00ed      	lsls	r5, r5, #3
 801feb4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801feb8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801febc:	ea4f 262e 	mov.w	r6, lr, asr #8
 801fec0:	1212      	asrs	r2, r2, #8
 801fec2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fec6:	b2ed      	uxtb	r5, r5
 801fec8:	fa1f fa82 	uxth.w	sl, r2
 801fecc:	43d2      	mvns	r2, r2
 801fece:	fb17 f70a 	smulbb	r7, r7, sl
 801fed2:	b2d2      	uxtb	r2, r2
 801fed4:	fb19 f90a 	smulbb	r9, r9, sl
 801fed8:	fb06 7602 	mla	r6, r6, r2, r7
 801fedc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fee0:	fb15 f50a 	smulbb	r5, r5, sl
 801fee4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fee8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801feec:	b2b6      	uxth	r6, r6
 801feee:	fa5f fe8e 	uxtb.w	lr, lr
 801fef2:	fb07 9702 	mla	r7, r7, r2, r9
 801fef6:	fb0e 5502 	mla	r5, lr, r2, r5
 801fefa:	b2bf      	uxth	r7, r7
 801fefc:	b2ad      	uxth	r5, r5
 801fefe:	f107 0901 	add.w	r9, r7, #1
 801ff02:	f105 0e01 	add.w	lr, r5, #1
 801ff06:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801ff0a:	f106 0901 	add.w	r9, r6, #1
 801ff0e:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801ff12:	097f      	lsrs	r7, r7, #5
 801ff14:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801ff18:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801ff1c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ff20:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ff24:	4337      	orrs	r7, r6
 801ff26:	ea47 070e 	orr.w	r7, r7, lr
 801ff2a:	f824 700b 	strh.w	r7, [r4, fp]
 801ff2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ff30:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ff34:	4410      	add	r0, r2
 801ff36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ff38:	4411      	add	r1, r2
 801ff3a:	e74a      	b.n	801fdd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ff3c:	f04f 0e00 	mov.w	lr, #0
 801ff40:	eba3 020e 	sub.w	r2, r3, lr
 801ff44:	2a00      	cmp	r2, #0
 801ff46:	f77f af48 	ble.w	801fdda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ff4a:	1402      	asrs	r2, r0, #16
 801ff4c:	9e02      	ldr	r6, [sp, #8]
 801ff4e:	140d      	asrs	r5, r1, #16
 801ff50:	fb06 2505 	mla	r5, r6, r5, r2
 801ff54:	9e03      	ldr	r6, [sp, #12]
 801ff56:	086a      	lsrs	r2, r5, #1
 801ff58:	07ed      	lsls	r5, r5, #31
 801ff5a:	5cb2      	ldrb	r2, [r6, r2]
 801ff5c:	bf54      	ite	pl
 801ff5e:	f002 020f 	andpl.w	r2, r2, #15
 801ff62:	1112      	asrmi	r2, r2, #4
 801ff64:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ff68:	b2d2      	uxtb	r2, r2
 801ff6a:	2a00      	cmp	r2, #0
 801ff6c:	d049      	beq.n	8020002 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ff6e:	9e05      	ldr	r6, [sp, #20]
 801ff70:	4d29      	ldr	r5, [pc, #164]	; (8020018 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ff72:	4372      	muls	r2, r6
 801ff74:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ff78:	682d      	ldr	r5, [r5, #0]
 801ff7a:	1c56      	adds	r6, r2, #1
 801ff7c:	0a2f      	lsrs	r7, r5, #8
 801ff7e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ff82:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ff86:	ea4f 262c 	mov.w	r6, ip, asr #8
 801ff8a:	1212      	asrs	r2, r2, #8
 801ff8c:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801ff90:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ff94:	fa1f fa82 	uxth.w	sl, r2
 801ff98:	43d2      	mvns	r2, r2
 801ff9a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ff9e:	00ed      	lsls	r5, r5, #3
 801ffa0:	fb17 f70a 	smulbb	r7, r7, sl
 801ffa4:	b2d2      	uxtb	r2, r2
 801ffa6:	fb19 f90a 	smulbb	r9, r9, sl
 801ffaa:	b2ed      	uxtb	r5, r5
 801ffac:	fb06 7602 	mla	r6, r6, r2, r7
 801ffb0:	ea4f 07ec 	mov.w	r7, ip, asr #3
 801ffb4:	fb15 f50a 	smulbb	r5, r5, sl
 801ffb8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ffbc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ffc0:	b2b6      	uxth	r6, r6
 801ffc2:	fa5f fc8c 	uxtb.w	ip, ip
 801ffc6:	fb07 9702 	mla	r7, r7, r2, r9
 801ffca:	f106 0b01 	add.w	fp, r6, #1
 801ffce:	fb0c 5502 	mla	r5, ip, r2, r5
 801ffd2:	b2bf      	uxth	r7, r7
 801ffd4:	b2ad      	uxth	r5, r5
 801ffd6:	f107 0901 	add.w	r9, r7, #1
 801ffda:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801ffde:	f105 0c01 	add.w	ip, r5, #1
 801ffe2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801ffe6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ffea:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801ffee:	097f      	lsrs	r7, r7, #5
 801fff0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fff4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fff8:	4337      	orrs	r7, r6
 801fffa:	ea47 070c 	orr.w	r7, r7, ip
 801fffe:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8020002:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020004:	f10e 0e01 	add.w	lr, lr, #1
 8020008:	4410      	add	r0, r2
 802000a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802000c:	4411      	add	r1, r2
 802000e:	e797      	b.n	801ff40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020010:	b007      	add	sp, #28
 8020012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020016:	bf00      	nop
 8020018:	2000594c 	.word	0x2000594c

0802001c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802001c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020020:	b087      	sub	sp, #28
 8020022:	468b      	mov	fp, r1
 8020024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020028:	9815      	ldr	r0, [sp, #84]	; 0x54
 802002a:	9205      	str	r2, [sp, #20]
 802002c:	6841      	ldr	r1, [r0, #4]
 802002e:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8020032:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020036:	fb01 2404 	mla	r4, r1, r4, r2
 802003a:	6802      	ldr	r2, [r0, #0]
 802003c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020040:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8020044:	3201      	adds	r2, #1
 8020046:	f022 0201 	bic.w	r2, r2, #1
 802004a:	9201      	str	r2, [sp, #4]
 802004c:	f8d8 2000 	ldr.w	r2, [r8]
 8020050:	9202      	str	r2, [sp, #8]
 8020052:	f1bb 0f00 	cmp.w	fp, #0
 8020056:	dc03      	bgt.n	8020060 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020058:	9a05      	ldr	r2, [sp, #20]
 802005a:	2a00      	cmp	r2, #0
 802005c:	f340 8158 	ble.w	8020310 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020060:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020062:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020066:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802006a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802006c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020070:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020074:	2b00      	cmp	r3, #0
 8020076:	dd0e      	ble.n	8020096 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020078:	1402      	asrs	r2, r0, #16
 802007a:	d405      	bmi.n	8020088 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802007c:	42ba      	cmp	r2, r7
 802007e:	da03      	bge.n	8020088 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020080:	140a      	asrs	r2, r1, #16
 8020082:	d401      	bmi.n	8020088 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020084:	42b2      	cmp	r2, r6
 8020086:	db07      	blt.n	8020098 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020088:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802008a:	3b01      	subs	r3, #1
 802008c:	3402      	adds	r4, #2
 802008e:	4410      	add	r0, r2
 8020090:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020092:	4411      	add	r1, r2
 8020094:	e7ee      	b.n	8020074 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020096:	d017      	beq.n	80200c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8020098:	1e5a      	subs	r2, r3, #1
 802009a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802009c:	fb05 0502 	mla	r5, r5, r2, r0
 80200a0:	142d      	asrs	r5, r5, #16
 80200a2:	d409      	bmi.n	80200b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80200a4:	42bd      	cmp	r5, r7
 80200a6:	da07      	bge.n	80200b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80200a8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80200aa:	fb05 1202 	mla	r2, r5, r2, r1
 80200ae:	1412      	asrs	r2, r2, #16
 80200b0:	d402      	bmi.n	80200b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80200b2:	42b2      	cmp	r2, r6
 80200b4:	f2c0 80c0 	blt.w	8020238 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 80200b8:	2600      	movs	r6, #0
 80200ba:	199a      	adds	r2, r3, r6
 80200bc:	2a00      	cmp	r2, #0
 80200be:	dc3e      	bgt.n	802013e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80200c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80200c4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80200c8:	f1bb 0f00 	cmp.w	fp, #0
 80200cc:	f340 8120 	ble.w	8020310 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80200d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80200d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80200d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80200da:	f1bb 0b01 	subs.w	fp, fp, #1
 80200de:	eeb0 6a62 	vmov.f32	s12, s5
 80200e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80200e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80200ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80200ee:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80200f2:	eeb0 6a43 	vmov.f32	s12, s6
 80200f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80200fa:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80200fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020102:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020106:	ee77 2a62 	vsub.f32	s5, s14, s5
 802010a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802010e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020112:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020116:	ee12 2a90 	vmov	r2, s5
 802011a:	eef0 2a47 	vmov.f32	s5, s14
 802011e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020122:	ee13 2a10 	vmov	r2, s6
 8020126:	9313      	str	r3, [sp, #76]	; 0x4c
 8020128:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802012a:	eeb0 3a67 	vmov.f32	s6, s15
 802012e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020132:	9a05      	ldr	r2, [sp, #20]
 8020134:	9314      	str	r3, [sp, #80]	; 0x50
 8020136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020138:	bf08      	it	eq
 802013a:	4613      	moveq	r3, r2
 802013c:	e789      	b.n	8020052 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802013e:	1405      	asrs	r5, r0, #16
 8020140:	d467      	bmi.n	8020212 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8020142:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8020146:	42aa      	cmp	r2, r5
 8020148:	dd63      	ble.n	8020212 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 802014a:	140f      	asrs	r7, r1, #16
 802014c:	d461      	bmi.n	8020212 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 802014e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8020152:	42ba      	cmp	r2, r7
 8020154:	dd5d      	ble.n	8020212 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8020156:	9a01      	ldr	r2, [sp, #4]
 8020158:	fb07 5502 	mla	r5, r7, r2, r5
 802015c:	9f02      	ldr	r7, [sp, #8]
 802015e:	086a      	lsrs	r2, r5, #1
 8020160:	5cba      	ldrb	r2, [r7, r2]
 8020162:	07ef      	lsls	r7, r5, #31
 8020164:	bf54      	ite	pl
 8020166:	f002 020f 	andpl.w	r2, r2, #15
 802016a:	1112      	asrmi	r2, r2, #4
 802016c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020170:	b2d2      	uxtb	r2, r2
 8020172:	2a00      	cmp	r2, #0
 8020174:	d04d      	beq.n	8020212 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8020176:	4d68      	ldr	r5, [pc, #416]	; (8020318 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8020178:	2aff      	cmp	r2, #255	; 0xff
 802017a:	682f      	ldr	r7, [r5, #0]
 802017c:	ea4f 05d7 	mov.w	r5, r7, lsr #3
 8020180:	ea4f 2917 	mov.w	r9, r7, lsr #8
 8020184:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020188:	ea4f 07c7 	mov.w	r7, r7, lsl #3
 802018c:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8020190:	9503      	str	r5, [sp, #12]
 8020192:	b2ff      	uxtb	r7, r7
 8020194:	d043      	beq.n	802021e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8020196:	f06f 0501 	mvn.w	r5, #1
 802019a:	fa1f fa82 	uxth.w	sl, r2
 802019e:	43d2      	mvns	r2, r2
 80201a0:	fb19 f90a 	smulbb	r9, r9, sl
 80201a4:	4375      	muls	r5, r6
 80201a6:	fb17 f70a 	smulbb	r7, r7, sl
 80201aa:	b2d2      	uxtb	r2, r2
 80201ac:	f834 e005 	ldrh.w	lr, [r4, r5]
 80201b0:	9504      	str	r5, [sp, #16]
 80201b2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80201b6:	9d03      	ldr	r5, [sp, #12]
 80201b8:	fb15 f50a 	smulbb	r5, r5, sl
 80201bc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80201c0:	fb0c 9c02 	mla	ip, ip, r2, r9
 80201c4:	ea4f 09ee 	mov.w	r9, lr, asr #3
 80201c8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80201cc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80201d0:	fa1f fc8c 	uxth.w	ip, ip
 80201d4:	fa5f fe8e 	uxtb.w	lr, lr
 80201d8:	fb09 5502 	mla	r5, r9, r2, r5
 80201dc:	fb0e 7702 	mla	r7, lr, r2, r7
 80201e0:	b2ad      	uxth	r5, r5
 80201e2:	b2bf      	uxth	r7, r7
 80201e4:	f105 0901 	add.w	r9, r5, #1
 80201e8:	1c7a      	adds	r2, r7, #1
 80201ea:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80201ee:	f10c 0901 	add.w	r9, ip, #1
 80201f2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80201f6:	9a04      	ldr	r2, [sp, #16]
 80201f8:	096d      	lsrs	r5, r5, #5
 80201fa:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80201fe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020202:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020206:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802020a:	ea45 050c 	orr.w	r5, r5, ip
 802020e:	433d      	orrs	r5, r7
 8020210:	52a5      	strh	r5, [r4, r2]
 8020212:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020214:	3e01      	subs	r6, #1
 8020216:	4410      	add	r0, r2
 8020218:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802021a:	4411      	add	r1, r2
 802021c:	e74d      	b.n	80200ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802021e:	f06f 0201 	mvn.w	r2, #1
 8020222:	fb02 fe06 	mul.w	lr, r2, r6
 8020226:	9a03      	ldr	r2, [sp, #12]
 8020228:	00d5      	lsls	r5, r2, #3
 802022a:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 802022e:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 8020232:	f824 500e 	strh.w	r5, [r4, lr]
 8020236:	e7ec      	b.n	8020212 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8020238:	f04f 0e00 	mov.w	lr, #0
 802023c:	eba3 020e 	sub.w	r2, r3, lr
 8020240:	2a00      	cmp	r2, #0
 8020242:	f77f af3d 	ble.w	80200c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020246:	1402      	asrs	r2, r0, #16
 8020248:	9e01      	ldr	r6, [sp, #4]
 802024a:	140d      	asrs	r5, r1, #16
 802024c:	fb06 2505 	mla	r5, r6, r5, r2
 8020250:	9e02      	ldr	r6, [sp, #8]
 8020252:	086a      	lsrs	r2, r5, #1
 8020254:	07ed      	lsls	r5, r5, #31
 8020256:	5cb2      	ldrb	r2, [r6, r2]
 8020258:	bf54      	ite	pl
 802025a:	f002 020f 	andpl.w	r2, r2, #15
 802025e:	1112      	asrmi	r2, r2, #4
 8020260:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020264:	b2d2      	uxtb	r2, r2
 8020266:	2a00      	cmp	r2, #0
 8020268:	d045      	beq.n	80202f6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802026a:	4d2b      	ldr	r5, [pc, #172]	; (8020318 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 802026c:	2aff      	cmp	r2, #255	; 0xff
 802026e:	682e      	ldr	r6, [r5, #0]
 8020270:	ea4f 2916 	mov.w	r9, r6, lsr #8
 8020274:	ea4f 05d6 	mov.w	r5, r6, lsr #3
 8020278:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 802027c:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8020280:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020284:	b2f6      	uxtb	r6, r6
 8020286:	d03d      	beq.n	8020304 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8020288:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 802028c:	fa1f fa82 	uxth.w	sl, r2
 8020290:	43d2      	mvns	r2, r2
 8020292:	fb19 f90a 	smulbb	r9, r9, sl
 8020296:	ea4f 272c 	mov.w	r7, ip, asr #8
 802029a:	fb15 f50a 	smulbb	r5, r5, sl
 802029e:	b2d2      	uxtb	r2, r2
 80202a0:	fb16 f60a 	smulbb	r6, r6, sl
 80202a4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80202a8:	fb07 9702 	mla	r7, r7, r2, r9
 80202ac:	ea4f 09ec 	mov.w	r9, ip, asr #3
 80202b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80202b4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80202b8:	b2bf      	uxth	r7, r7
 80202ba:	fa5f fc8c 	uxtb.w	ip, ip
 80202be:	fb09 5502 	mla	r5, r9, r2, r5
 80202c2:	fb0c 6602 	mla	r6, ip, r2, r6
 80202c6:	b2ad      	uxth	r5, r5
 80202c8:	b2b6      	uxth	r6, r6
 80202ca:	f105 0901 	add.w	r9, r5, #1
 80202ce:	1c72      	adds	r2, r6, #1
 80202d0:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80202d4:	f107 0901 	add.w	r9, r7, #1
 80202d8:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80202dc:	096d      	lsrs	r5, r5, #5
 80202de:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80202e2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80202e6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80202ea:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80202ee:	433d      	orrs	r5, r7
 80202f0:	4335      	orrs	r5, r6
 80202f2:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 80202f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80202f8:	f10e 0e01 	add.w	lr, lr, #1
 80202fc:	4410      	add	r0, r2
 80202fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020300:	4411      	add	r1, r2
 8020302:	e79b      	b.n	802023c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8020304:	00ed      	lsls	r5, r5, #3
 8020306:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 802030a:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
 802030e:	e7f0      	b.n	80202f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020310:	b007      	add	sp, #28
 8020312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020316:	bf00      	nop
 8020318:	2000594c 	.word	0x2000594c

0802031c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 802031c:	4770      	bx	lr

0802031e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 802031e:	4770      	bx	lr

08020320 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020320:	4770      	bx	lr

08020322 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020322:	4770      	bx	lr

08020324 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020324:	4770      	bx	lr

08020326 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020326:	4770      	bx	lr

08020328 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020328:	4770      	bx	lr

0802032a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802032a:	4770      	bx	lr

0802032c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802032c:	4770      	bx	lr

0802032e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 802032e:	4770      	bx	lr

08020330 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020330:	4770      	bx	lr

08020332 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020332:	4770      	bx	lr

08020334 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020334:	4770      	bx	lr

08020336 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020336:	4770      	bx	lr

08020338 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020338:	4770      	bx	lr

0802033a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802033a:	4770      	bx	lr

0802033c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802033c:	4770      	bx	lr

0802033e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802033e:	4770      	bx	lr

08020340 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020340:	4770      	bx	lr

08020342 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020342:	4770      	bx	lr

08020344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020344:	4770      	bx	lr

08020346 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020346:	4770      	bx	lr

08020348 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020348:	4770      	bx	lr

0802034a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802034a:	4770      	bx	lr

0802034c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802034c:	4770      	bx	lr

0802034e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 802034e:	4770      	bx	lr

08020350 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020350:	4770      	bx	lr

08020352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020352:	4770      	bx	lr

08020354 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8020354:	b508      	push	{r3, lr}
 8020356:	4b06      	ldr	r3, [pc, #24]	; (8020370 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8020358:	8818      	ldrh	r0, [r3, #0]
 802035a:	b928      	cbnz	r0, 8020368 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 802035c:	4b05      	ldr	r3, [pc, #20]	; (8020374 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 802035e:	2154      	movs	r1, #84	; 0x54
 8020360:	4a05      	ldr	r2, [pc, #20]	; (8020378 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8020362:	4806      	ldr	r0, [pc, #24]	; (802037c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8020364:	f009 f9b6 	bl	80296d4 <__assert_func>
 8020368:	0040      	lsls	r0, r0, #1
 802036a:	b280      	uxth	r0, r0
 802036c:	bd08      	pop	{r3, pc}
 802036e:	bf00      	nop
 8020370:	2000593e 	.word	0x2000593e
 8020374:	0802e289 	.word	0x0802e289
 8020378:	0802e813 	.word	0x0802e813
 802037c:	0802e2cb 	.word	0x0802e2cb

08020380 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020384:	b08b      	sub	sp, #44	; 0x2c
 8020386:	460f      	mov	r7, r1
 8020388:	4616      	mov	r6, r2
 802038a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 802038e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020392:	f1bb 0f00 	cmp.w	fp, #0
 8020396:	d046      	beq.n	8020426 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8020398:	6810      	ldr	r0, [r2, #0]
 802039a:	ad06      	add	r5, sp, #24
 802039c:	6851      	ldr	r1, [r2, #4]
 802039e:	c503      	stmia	r5!, {r0, r1}
 80203a0:	6818      	ldr	r0, [r3, #0]
 80203a2:	ad08      	add	r5, sp, #32
 80203a4:	6859      	ldr	r1, [r3, #4]
 80203a6:	c503      	stmia	r5!, {r0, r1}
 80203a8:	a806      	add	r0, sp, #24
 80203aa:	f7fa f89f 	bl	801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80203ae:	4631      	mov	r1, r6
 80203b0:	a808      	add	r0, sp, #32
 80203b2:	f7fa f883 	bl	801a4bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80203b6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80203ba:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80203be:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80203c2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80203c6:	fb16 2103 	smlabb	r1, r6, r3, r2
 80203ca:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80203ce:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80203d2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80203d6:	4f5d      	ldr	r7, [pc, #372]	; (802054c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 80203d8:	440a      	add	r2, r1
 80203da:	6838      	ldr	r0, [r7, #0]
 80203dc:	46b9      	mov	r9, r7
 80203de:	f8ad 2020 	strh.w	r2, [sp, #32]
 80203e2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80203e6:	4413      	add	r3, r2
 80203e8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80203ec:	6803      	ldr	r3, [r0, #0]
 80203ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80203f0:	4798      	blx	r3
 80203f2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80203f6:	d019      	beq.n	802042c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80203f8:	f010 0f04 	tst.w	r0, #4
 80203fc:	d01a      	beq.n	8020434 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80203fe:	f8d9 0000 	ldr.w	r0, [r9]
 8020402:	b2ad      	uxth	r5, r5
 8020404:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020408:	6801      	ldr	r1, [r0, #0]
 802040a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802040e:	9501      	str	r5, [sp, #4]
 8020410:	e9cd b403 	strd	fp, r4, [sp, #12]
 8020414:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8020418:	9402      	str	r4, [sp, #8]
 802041a:	fa1f f488 	uxth.w	r4, r8
 802041e:	9400      	str	r4, [sp, #0]
 8020420:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8020422:	4631      	mov	r1, r6
 8020424:	47a0      	blx	r4
 8020426:	b00b      	add	sp, #44	; 0x2c
 8020428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802042c:	b914      	cbnz	r4, 8020434 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 802042e:	f010 0f01 	tst.w	r0, #1
 8020432:	e7e3      	b.n	80203fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8020434:	f8d9 0000 	ldr.w	r0, [r9]
 8020438:	ea4f 0748 	mov.w	r7, r8, lsl #1
 802043c:	6803      	ldr	r3, [r0, #0]
 802043e:	6a1b      	ldr	r3, [r3, #32]
 8020440:	4798      	blx	r3
 8020442:	4b43      	ldr	r3, [pc, #268]	; (8020550 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 8020444:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8020448:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802044c:	881a      	ldrh	r2, [r3, #0]
 802044e:	469a      	mov	sl, r3
 8020450:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020454:	fb05 f502 	mul.w	r5, r5, r2
 8020458:	fb02 1404 	mla	r4, r2, r4, r1
 802045c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020460:	d058      	beq.n	8020514 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 8020462:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8020466:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 802046a:	fa1f f28b 	uxth.w	r2, fp
 802046e:	469e      	mov	lr, r3
 8020470:	fa1f f989 	uxth.w	r9, r9
 8020474:	42ac      	cmp	r4, r5
 8020476:	d263      	bcs.n	8020540 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 8020478:	eb04 0a07 	add.w	sl, r4, r7
 802047c:	4554      	cmp	r4, sl
 802047e:	d23c      	bcs.n	80204fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 8020480:	8821      	ldrh	r1, [r4, #0]
 8020482:	f836 3b02 	ldrh.w	r3, [r6], #2
 8020486:	1208      	asrs	r0, r1, #8
 8020488:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802048c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020490:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8020494:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020498:	00c9      	lsls	r1, r1, #3
 802049a:	fb10 f009 	smulbb	r0, r0, r9
 802049e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80204a2:	b2c9      	uxtb	r1, r1
 80204a4:	fb0c 0c02 	mla	ip, ip, r2, r0
 80204a8:	10d8      	asrs	r0, r3, #3
 80204aa:	fb11 f109 	smulbb	r1, r1, r9
 80204ae:	00db      	lsls	r3, r3, #3
 80204b0:	fa1f fc8c 	uxth.w	ip, ip
 80204b4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80204b8:	fb1b fb09 	smulbb	fp, fp, r9
 80204bc:	b2db      	uxtb	r3, r3
 80204be:	fb03 1302 	mla	r3, r3, r2, r1
 80204c2:	f10c 0101 	add.w	r1, ip, #1
 80204c6:	fb00 b002 	mla	r0, r0, r2, fp
 80204ca:	b29b      	uxth	r3, r3
 80204cc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80204d0:	1c59      	adds	r1, r3, #1
 80204d2:	b280      	uxth	r0, r0
 80204d4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80204d8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80204dc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80204e0:	ea4c 0c03 	orr.w	ip, ip, r3
 80204e4:	1c43      	adds	r3, r0, #1
 80204e6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80204ea:	0940      	lsrs	r0, r0, #5
 80204ec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80204f0:	ea4c 0c00 	orr.w	ip, ip, r0
 80204f4:	f824 cb02 	strh.w	ip, [r4], #2
 80204f8:	e7c0      	b.n	802047c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80204fa:	f8be 3000 	ldrh.w	r3, [lr]
 80204fe:	eba3 0308 	sub.w	r3, r3, r8
 8020502:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020506:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802050a:	eba3 0308 	sub.w	r3, r3, r8
 802050e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020512:	e7af      	b.n	8020474 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8020514:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020518:	f8d9 0000 	ldr.w	r0, [r9]
 802051c:	42ac      	cmp	r4, r5
 802051e:	6803      	ldr	r3, [r0, #0]
 8020520:	d20e      	bcs.n	8020540 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 8020522:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 8020526:	4632      	mov	r2, r6
 8020528:	463b      	mov	r3, r7
 802052a:	4621      	mov	r1, r4
 802052c:	47c0      	blx	r8
 802052e:	f8ba 3000 	ldrh.w	r3, [sl]
 8020532:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020536:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802053a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802053e:	e7eb      	b.n	8020518 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 8020540:	4b02      	ldr	r3, [pc, #8]	; (802054c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8020542:	6818      	ldr	r0, [r3, #0]
 8020544:	6803      	ldr	r3, [r0, #0]
 8020546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020548:	4798      	blx	r3
 802054a:	e76c      	b.n	8020426 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 802054c:	20005944 	.word	0x20005944
 8020550:	2000593e 	.word	0x2000593e

08020554 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020554:	b510      	push	{r4, lr}
 8020556:	4604      	mov	r4, r0
 8020558:	2104      	movs	r1, #4
 802055a:	f009 f88c 	bl	8029676 <_ZdlPvj>
 802055e:	4620      	mov	r0, r4
 8020560:	bd10      	pop	{r4, pc}

08020562 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020562:	b510      	push	{r4, lr}
 8020564:	4604      	mov	r4, r0
 8020566:	2104      	movs	r1, #4
 8020568:	f009 f885 	bl	8029676 <_ZdlPvj>
 802056c:	4620      	mov	r0, r4
 802056e:	bd10      	pop	{r4, pc}

08020570 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020570:	b510      	push	{r4, lr}
 8020572:	4604      	mov	r4, r0
 8020574:	2104      	movs	r1, #4
 8020576:	f009 f87e 	bl	8029676 <_ZdlPvj>
 802057a:	4620      	mov	r0, r4
 802057c:	bd10      	pop	{r4, pc}

0802057e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802057e:	b510      	push	{r4, lr}
 8020580:	4604      	mov	r4, r0
 8020582:	2104      	movs	r1, #4
 8020584:	f009 f877 	bl	8029676 <_ZdlPvj>
 8020588:	4620      	mov	r0, r4
 802058a:	bd10      	pop	{r4, pc}

0802058c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802058c:	b510      	push	{r4, lr}
 802058e:	4604      	mov	r4, r0
 8020590:	2104      	movs	r1, #4
 8020592:	f009 f870 	bl	8029676 <_ZdlPvj>
 8020596:	4620      	mov	r0, r4
 8020598:	bd10      	pop	{r4, pc}

0802059a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802059a:	b510      	push	{r4, lr}
 802059c:	4604      	mov	r4, r0
 802059e:	2104      	movs	r1, #4
 80205a0:	f009 f869 	bl	8029676 <_ZdlPvj>
 80205a4:	4620      	mov	r0, r4
 80205a6:	bd10      	pop	{r4, pc}

080205a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80205a8:	b510      	push	{r4, lr}
 80205aa:	4604      	mov	r4, r0
 80205ac:	2104      	movs	r1, #4
 80205ae:	f009 f862 	bl	8029676 <_ZdlPvj>
 80205b2:	4620      	mov	r0, r4
 80205b4:	bd10      	pop	{r4, pc}

080205b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80205b6:	b510      	push	{r4, lr}
 80205b8:	4604      	mov	r4, r0
 80205ba:	2104      	movs	r1, #4
 80205bc:	f009 f85b 	bl	8029676 <_ZdlPvj>
 80205c0:	4620      	mov	r0, r4
 80205c2:	bd10      	pop	{r4, pc}

080205c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80205c4:	b510      	push	{r4, lr}
 80205c6:	4604      	mov	r4, r0
 80205c8:	2104      	movs	r1, #4
 80205ca:	f009 f854 	bl	8029676 <_ZdlPvj>
 80205ce:	4620      	mov	r0, r4
 80205d0:	bd10      	pop	{r4, pc}

080205d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80205d2:	b510      	push	{r4, lr}
 80205d4:	4604      	mov	r4, r0
 80205d6:	2104      	movs	r1, #4
 80205d8:	f009 f84d 	bl	8029676 <_ZdlPvj>
 80205dc:	4620      	mov	r0, r4
 80205de:	bd10      	pop	{r4, pc}

080205e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80205e0:	b510      	push	{r4, lr}
 80205e2:	4604      	mov	r4, r0
 80205e4:	2104      	movs	r1, #4
 80205e6:	f009 f846 	bl	8029676 <_ZdlPvj>
 80205ea:	4620      	mov	r0, r4
 80205ec:	bd10      	pop	{r4, pc}

080205ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80205ee:	b510      	push	{r4, lr}
 80205f0:	4604      	mov	r4, r0
 80205f2:	2104      	movs	r1, #4
 80205f4:	f009 f83f 	bl	8029676 <_ZdlPvj>
 80205f8:	4620      	mov	r0, r4
 80205fa:	bd10      	pop	{r4, pc}

080205fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80205fc:	b510      	push	{r4, lr}
 80205fe:	4604      	mov	r4, r0
 8020600:	2104      	movs	r1, #4
 8020602:	f009 f838 	bl	8029676 <_ZdlPvj>
 8020606:	4620      	mov	r0, r4
 8020608:	bd10      	pop	{r4, pc}

0802060a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802060a:	b510      	push	{r4, lr}
 802060c:	4604      	mov	r4, r0
 802060e:	2104      	movs	r1, #4
 8020610:	f009 f831 	bl	8029676 <_ZdlPvj>
 8020614:	4620      	mov	r0, r4
 8020616:	bd10      	pop	{r4, pc}

08020618 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020618:	b510      	push	{r4, lr}
 802061a:	4604      	mov	r4, r0
 802061c:	2104      	movs	r1, #4
 802061e:	f009 f82a 	bl	8029676 <_ZdlPvj>
 8020622:	4620      	mov	r0, r4
 8020624:	bd10      	pop	{r4, pc}

08020626 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020626:	b510      	push	{r4, lr}
 8020628:	4604      	mov	r4, r0
 802062a:	2104      	movs	r1, #4
 802062c:	f009 f823 	bl	8029676 <_ZdlPvj>
 8020630:	4620      	mov	r0, r4
 8020632:	bd10      	pop	{r4, pc}

08020634 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020634:	b510      	push	{r4, lr}
 8020636:	4604      	mov	r4, r0
 8020638:	2104      	movs	r1, #4
 802063a:	f009 f81c 	bl	8029676 <_ZdlPvj>
 802063e:	4620      	mov	r0, r4
 8020640:	bd10      	pop	{r4, pc}

08020642 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020642:	b510      	push	{r4, lr}
 8020644:	4604      	mov	r4, r0
 8020646:	2104      	movs	r1, #4
 8020648:	f009 f815 	bl	8029676 <_ZdlPvj>
 802064c:	4620      	mov	r0, r4
 802064e:	bd10      	pop	{r4, pc}

08020650 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020650:	b510      	push	{r4, lr}
 8020652:	4604      	mov	r4, r0
 8020654:	2104      	movs	r1, #4
 8020656:	f009 f80e 	bl	8029676 <_ZdlPvj>
 802065a:	4620      	mov	r0, r4
 802065c:	bd10      	pop	{r4, pc}

0802065e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 802065e:	b510      	push	{r4, lr}
 8020660:	4604      	mov	r4, r0
 8020662:	2104      	movs	r1, #4
 8020664:	f009 f807 	bl	8029676 <_ZdlPvj>
 8020668:	4620      	mov	r0, r4
 802066a:	bd10      	pop	{r4, pc}

0802066c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802066c:	b510      	push	{r4, lr}
 802066e:	4604      	mov	r4, r0
 8020670:	2104      	movs	r1, #4
 8020672:	f009 f800 	bl	8029676 <_ZdlPvj>
 8020676:	4620      	mov	r0, r4
 8020678:	bd10      	pop	{r4, pc}

0802067a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802067a:	b510      	push	{r4, lr}
 802067c:	4604      	mov	r4, r0
 802067e:	2104      	movs	r1, #4
 8020680:	f008 fff9 	bl	8029676 <_ZdlPvj>
 8020684:	4620      	mov	r0, r4
 8020686:	bd10      	pop	{r4, pc}

08020688 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020688:	b510      	push	{r4, lr}
 802068a:	4604      	mov	r4, r0
 802068c:	2104      	movs	r1, #4
 802068e:	f008 fff2 	bl	8029676 <_ZdlPvj>
 8020692:	4620      	mov	r0, r4
 8020694:	bd10      	pop	{r4, pc}

08020696 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020696:	b510      	push	{r4, lr}
 8020698:	4604      	mov	r4, r0
 802069a:	2104      	movs	r1, #4
 802069c:	f008 ffeb 	bl	8029676 <_ZdlPvj>
 80206a0:	4620      	mov	r0, r4
 80206a2:	bd10      	pop	{r4, pc}

080206a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80206a4:	b510      	push	{r4, lr}
 80206a6:	4604      	mov	r4, r0
 80206a8:	2104      	movs	r1, #4
 80206aa:	f008 ffe4 	bl	8029676 <_ZdlPvj>
 80206ae:	4620      	mov	r0, r4
 80206b0:	bd10      	pop	{r4, pc}

080206b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80206b2:	b510      	push	{r4, lr}
 80206b4:	4604      	mov	r4, r0
 80206b6:	2104      	movs	r1, #4
 80206b8:	f008 ffdd 	bl	8029676 <_ZdlPvj>
 80206bc:	4620      	mov	r0, r4
 80206be:	bd10      	pop	{r4, pc}

080206c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80206c0:	b510      	push	{r4, lr}
 80206c2:	4604      	mov	r4, r0
 80206c4:	2104      	movs	r1, #4
 80206c6:	f008 ffd6 	bl	8029676 <_ZdlPvj>
 80206ca:	4620      	mov	r0, r4
 80206cc:	bd10      	pop	{r4, pc}

080206ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80206ce:	b510      	push	{r4, lr}
 80206d0:	4604      	mov	r4, r0
 80206d2:	2104      	movs	r1, #4
 80206d4:	f008 ffcf 	bl	8029676 <_ZdlPvj>
 80206d8:	4620      	mov	r0, r4
 80206da:	bd10      	pop	{r4, pc}

080206dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80206dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206e0:	460d      	mov	r5, r1
 80206e2:	b087      	sub	sp, #28
 80206e4:	4614      	mov	r4, r2
 80206e6:	4698      	mov	r8, r3
 80206e8:	b333      	cbz	r3, 8020738 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80206ea:	4608      	mov	r0, r1
 80206ec:	f7f6 fd8f 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 80206f0:	bb10      	cbnz	r0, 8020738 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80206f2:	6828      	ldr	r0, [r5, #0]
 80206f4:	ab04      	add	r3, sp, #16
 80206f6:	6869      	ldr	r1, [r5, #4]
 80206f8:	4e72      	ldr	r6, [pc, #456]	; (80208c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 80206fa:	c303      	stmia	r3!, {r0, r1}
 80206fc:	a804      	add	r0, sp, #16
 80206fe:	f7f9 fef5 	bl	801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020702:	6830      	ldr	r0, [r6, #0]
 8020704:	6803      	ldr	r3, [r0, #0]
 8020706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020708:	4798      	blx	r3
 802070a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802070e:	d016      	beq.n	802073e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020710:	f010 0f08 	tst.w	r0, #8
 8020714:	d016      	beq.n	8020744 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8020716:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 802071a:	6830      	ldr	r0, [r6, #0]
 802071c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020720:	6801      	ldr	r1, [r0, #0]
 8020722:	9501      	str	r5, [sp, #4]
 8020724:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8020728:	f8cd 8008 	str.w	r8, [sp, #8]
 802072c:	9500      	str	r5, [sp, #0]
 802072e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020732:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8020734:	4621      	mov	r1, r4
 8020736:	47a8      	blx	r5
 8020738:	b007      	add	sp, #28
 802073a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802073e:	f010 0f02 	tst.w	r0, #2
 8020742:	e7e7      	b.n	8020714 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 8020744:	6830      	ldr	r0, [r6, #0]
 8020746:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 802074a:	6803      	ldr	r3, [r0, #0]
 802074c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8020750:	6a1b      	ldr	r3, [r3, #32]
 8020752:	4798      	blx	r3
 8020754:	495c      	ldr	r1, [pc, #368]	; (80208c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 8020756:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 802075a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802075e:	880b      	ldrh	r3, [r1, #0]
 8020760:	468e      	mov	lr, r1
 8020762:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8020766:	fb03 c202 	mla	r2, r3, r2, ip
 802076a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802076e:	fb07 f203 	mul.w	r2, r7, r3
 8020772:	d053      	beq.n	802081c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 8020774:	fa1f f388 	uxth.w	r3, r8
 8020778:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 802077c:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8020780:	ea4f 2814 	mov.w	r8, r4, lsr #8
 8020784:	00e4      	lsls	r4, r4, #3
 8020786:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 802078a:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 802078e:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 8020792:	b2e4      	uxtb	r4, r4
 8020794:	fb09 f903 	mul.w	r9, r9, r3
 8020798:	fb08 f803 	mul.w	r8, r8, r3
 802079c:	006d      	lsls	r5, r5, #1
 802079e:	4363      	muls	r3, r4
 80207a0:	b2bc      	uxth	r4, r7
 80207a2:	4288      	cmp	r0, r1
 80207a4:	f080 8088 	bcs.w	80208b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80207a8:	eb00 0a05 	add.w	sl, r0, r5
 80207ac:	4550      	cmp	r0, sl
 80207ae:	d22f      	bcs.n	8020810 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 80207b0:	8802      	ldrh	r2, [r0, #0]
 80207b2:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80207b6:	10d7      	asrs	r7, r2, #3
 80207b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80207bc:	00d2      	lsls	r2, r2, #3
 80207be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80207c2:	fb1c fc04 	smulbb	ip, ip, r4
 80207c6:	b2d2      	uxtb	r2, r2
 80207c8:	fb17 f704 	smulbb	r7, r7, r4
 80207cc:	fb12 f204 	smulbb	r2, r2, r4
 80207d0:	44c4      	add	ip, r8
 80207d2:	444f      	add	r7, r9
 80207d4:	fa1f fc8c 	uxth.w	ip, ip
 80207d8:	441a      	add	r2, r3
 80207da:	b2bf      	uxth	r7, r7
 80207dc:	b292      	uxth	r2, r2
 80207de:	f10c 0b01 	add.w	fp, ip, #1
 80207e2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80207e6:	f102 0b01 	add.w	fp, r2, #1
 80207ea:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80207ee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80207f2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80207f6:	ea4c 0202 	orr.w	r2, ip, r2
 80207fa:	f107 0c01 	add.w	ip, r7, #1
 80207fe:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8020802:	097f      	lsrs	r7, r7, #5
 8020804:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020808:	433a      	orrs	r2, r7
 802080a:	f820 2b02 	strh.w	r2, [r0], #2
 802080e:	e7cd      	b.n	80207ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 8020810:	f8be 2000 	ldrh.w	r2, [lr]
 8020814:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 8020818:	4410      	add	r0, r2
 802081a:	e7c2      	b.n	80207a2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 802081c:	07db      	lsls	r3, r3, #31
 802081e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020822:	d50e      	bpl.n	8020842 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 8020824:	006d      	lsls	r5, r5, #1
 8020826:	4290      	cmp	r0, r2
 8020828:	d246      	bcs.n	80208b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 802082a:	1943      	adds	r3, r0, r5
 802082c:	4298      	cmp	r0, r3
 802082e:	d202      	bcs.n	8020836 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 8020830:	f820 4b02 	strh.w	r4, [r0], #2
 8020834:	e7fa      	b.n	802082c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 8020836:	f8be 3000 	ldrh.w	r3, [lr]
 802083a:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 802083e:	4418      	add	r0, r3
 8020840:	e7f1      	b.n	8020826 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 8020842:	0787      	lsls	r7, r0, #30
 8020844:	462b      	mov	r3, r5
 8020846:	d00a      	beq.n	802085e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 8020848:	4603      	mov	r3, r0
 802084a:	4293      	cmp	r3, r2
 802084c:	d205      	bcs.n	802085a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 802084e:	801c      	strh	r4, [r3, #0]
 8020850:	f8be 1000 	ldrh.w	r1, [lr]
 8020854:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8020858:	e7f7      	b.n	802084a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 802085a:	3002      	adds	r0, #2
 802085c:	1e6b      	subs	r3, r5, #1
 802085e:	07dd      	lsls	r5, r3, #31
 8020860:	d50d      	bpl.n	802087e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 8020862:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020866:	3901      	subs	r1, #1
 8020868:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 802086c:	4291      	cmp	r1, r2
 802086e:	d205      	bcs.n	802087c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 8020870:	800c      	strh	r4, [r1, #0]
 8020872:	f8be 5000 	ldrh.w	r5, [lr]
 8020876:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 802087a:	e7f7      	b.n	802086c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 802087c:	3b01      	subs	r3, #1
 802087e:	b1db      	cbz	r3, 80208b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8020880:	b2a1      	uxth	r1, r4
 8020882:	105b      	asrs	r3, r3, #1
 8020884:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8020888:	009b      	lsls	r3, r3, #2
 802088a:	4290      	cmp	r0, r2
 802088c:	d214      	bcs.n	80208b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 802088e:	0781      	lsls	r1, r0, #30
 8020890:	d006      	beq.n	80208a0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 8020892:	4b0e      	ldr	r3, [pc, #56]	; (80208cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 8020894:	f44f 7162 	mov.w	r1, #904	; 0x388
 8020898:	4a0d      	ldr	r2, [pc, #52]	; (80208d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 802089a:	480e      	ldr	r0, [pc, #56]	; (80208d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 802089c:	f008 ff1a 	bl	80296d4 <__assert_func>
 80208a0:	18c5      	adds	r5, r0, r3
 80208a2:	4601      	mov	r1, r0
 80208a4:	42a9      	cmp	r1, r5
 80208a6:	d202      	bcs.n	80208ae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 80208a8:	f841 4b04 	str.w	r4, [r1], #4
 80208ac:	e7fa      	b.n	80208a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 80208ae:	f8be 1000 	ldrh.w	r1, [lr]
 80208b2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80208b6:	e7e8      	b.n	802088a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 80208b8:	6830      	ldr	r0, [r6, #0]
 80208ba:	6803      	ldr	r3, [r0, #0]
 80208bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80208be:	4798      	blx	r3
 80208c0:	e73a      	b.n	8020738 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80208c2:	bf00      	nop
 80208c4:	20005944 	.word	0x20005944
 80208c8:	2000593e 	.word	0x2000593e
 80208cc:	0802e228 	.word	0x0802e228
 80208d0:	0802e9e0 	.word	0x0802e9e0
 80208d4:	0802e257 	.word	0x0802e257

080208d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80208d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208dc:	4f97      	ldr	r7, [pc, #604]	; (8020b3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 80208de:	4616      	mov	r6, r2
 80208e0:	b08f      	sub	sp, #60	; 0x3c
 80208e2:	4604      	mov	r4, r0
 80208e4:	683a      	ldr	r2, [r7, #0]
 80208e6:	4689      	mov	r9, r1
 80208e8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80208ec:	2a02      	cmp	r2, #2
 80208ee:	d106      	bne.n	80208fe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80208f0:	4b93      	ldr	r3, [pc, #588]	; (8020b40 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 80208f2:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 80208f6:	4a93      	ldr	r2, [pc, #588]	; (8020b44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80208f8:	4893      	ldr	r0, [pc, #588]	; (8020b48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 80208fa:	f008 feeb 	bl	80296d4 <__assert_func>
 80208fe:	ad0e      	add	r5, sp, #56	; 0x38
 8020900:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8020904:	4628      	mov	r0, r5
 8020906:	f7fd fa4d 	bl	801dda4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802090a:	6823      	ldr	r3, [r4, #0]
 802090c:	4680      	mov	r8, r0
 802090e:	4620      	mov	r0, r4
 8020910:	6a1b      	ldr	r3, [r3, #32]
 8020912:	4798      	blx	r3
 8020914:	4580      	cmp	r8, r0
 8020916:	d004      	beq.n	8020922 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020918:	4b8c      	ldr	r3, [pc, #560]	; (8020b4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 802091a:	f240 21ca 	movw	r1, #714	; 0x2ca
 802091e:	4a89      	ldr	r2, [pc, #548]	; (8020b44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020920:	e7ea      	b.n	80208f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020922:	4628      	mov	r0, r5
 8020924:	f7fd f9b4 	bl	801dc90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020928:	4680      	mov	r8, r0
 802092a:	b920      	cbnz	r0, 8020936 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 802092c:	4b88      	ldr	r3, [pc, #544]	; (8020b50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 802092e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020932:	4a84      	ldr	r2, [pc, #528]	; (8020b44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020934:	e7e0      	b.n	80208f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020936:	6830      	ldr	r0, [r6, #0]
 8020938:	ab06      	add	r3, sp, #24
 802093a:	6871      	ldr	r1, [r6, #4]
 802093c:	f10d 0b20 	add.w	fp, sp, #32
 8020940:	f9b6 a000 	ldrsh.w	sl, [r6]
 8020944:	c303      	stmia	r3!, {r0, r1}
 8020946:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802094a:	ab08      	add	r3, sp, #32
 802094c:	f8d9 0000 	ldr.w	r0, [r9]
 8020950:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8020954:	c303      	stmia	r3!, {r0, r1}
 8020956:	4628      	mov	r0, r5
 8020958:	f7fd f892 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802095c:	4606      	mov	r6, r0
 802095e:	4628      	mov	r0, r5
 8020960:	4d7c      	ldr	r5, [pc, #496]	; (8020b54 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8020962:	f7fd f8c7 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020966:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 802096a:	a806      	add	r0, sp, #24
 802096c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8020970:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8020974:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8020978:	f7f9 fdb8 	bl	801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802097c:	4658      	mov	r0, fp
 802097e:	f7f9 fdb5 	bl	801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020982:	a80a      	add	r0, sp, #40	; 0x28
 8020984:	f7f9 fdb2 	bl	801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020988:	4b73      	ldr	r3, [pc, #460]	; (8020b58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802098a:	2100      	movs	r1, #0
 802098c:	f9b5 2000 	ldrsh.w	r2, [r5]
 8020990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020994:	4658      	mov	r0, fp
 8020996:	910c      	str	r1, [sp, #48]	; 0x30
 8020998:	a90c      	add	r1, sp, #48	; 0x30
 802099a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 802099e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80209a2:	f7f6 fbf1 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 80209a6:	4658      	mov	r0, fp
 80209a8:	f7f6 fc31 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 80209ac:	2800      	cmp	r0, #0
 80209ae:	f040 809a 	bne.w	8020ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80209b2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80209b6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80209ba:	4288      	cmp	r0, r1
 80209bc:	db38      	blt.n	8020a30 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80209be:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80209c2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80209c6:	429a      	cmp	r2, r3
 80209c8:	db32      	blt.n	8020a30 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80209ca:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80209ce:	4430      	add	r0, r6
 80209d0:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80209d4:	4431      	add	r1, r6
 80209d6:	b200      	sxth	r0, r0
 80209d8:	b209      	sxth	r1, r1
 80209da:	4288      	cmp	r0, r1
 80209dc:	dc28      	bgt.n	8020a30 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80209de:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80209e2:	440a      	add	r2, r1
 80209e4:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80209e8:	440b      	add	r3, r1
 80209ea:	b212      	sxth	r2, r2
 80209ec:	b21b      	sxth	r3, r3
 80209ee:	429a      	cmp	r2, r3
 80209f0:	dc1e      	bgt.n	8020a30 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80209f2:	6823      	ldr	r3, [r4, #0]
 80209f4:	4620      	mov	r0, r4
 80209f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80209f8:	4798      	blx	r3
 80209fa:	4682      	mov	sl, r0
 80209fc:	6838      	ldr	r0, [r7, #0]
 80209fe:	6803      	ldr	r3, [r0, #0]
 8020a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a02:	4798      	blx	r3
 8020a04:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020a08:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020a0c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8020a10:	1a5b      	subs	r3, r3, r1
 8020a12:	b29b      	uxth	r3, r3
 8020a14:	b21c      	sxth	r4, r3
 8020a16:	2c00      	cmp	r4, #0
 8020a18:	dc0f      	bgt.n	8020a3a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8020a1a:	bf18      	it	ne
 8020a1c:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8020a20:	4644      	mov	r4, r8
 8020a22:	bf1e      	ittt	ne
 8020a24:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8020a28:	185b      	addne	r3, r3, r1
 8020a2a:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8020a2e:	e009      	b.n	8020a44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8020a30:	4b4a      	ldr	r3, [pc, #296]	; (8020b5c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8020a32:	f240 21da 	movw	r1, #730	; 0x2da
 8020a36:	4a43      	ldr	r2, [pc, #268]	; (8020b44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020a38:	e75e      	b.n	80208f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020a3a:	1ad3      	subs	r3, r2, r3
 8020a3c:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8020a40:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020a44:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8020a48:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020a4c:	1b9b      	subs	r3, r3, r6
 8020a4e:	b29b      	uxth	r3, r3
 8020a50:	b219      	sxth	r1, r3
 8020a52:	2900      	cmp	r1, #0
 8020a54:	dd4b      	ble.n	8020aee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8020a56:	4351      	muls	r1, r2
 8020a58:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8020a5c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8020a60:	1acb      	subs	r3, r1, r3
 8020a62:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8020a66:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020a6a:	2e00      	cmp	r6, #0
 8020a6c:	dd3b      	ble.n	8020ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020a6e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8020a72:	2b00      	cmp	r3, #0
 8020a74:	dd37      	ble.n	8020ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020a76:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8020a7a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020a7e:	fb0a f90c 	mul.w	r9, sl, ip
 8020a82:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8020a86:	4481      	add	r9, r0
 8020a88:	8828      	ldrh	r0, [r5, #0]
 8020a8a:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8020a8e:	1a41      	subs	r1, r0, r1
 8020a90:	42ae      	cmp	r6, r5
 8020a92:	bfa8      	it	ge
 8020a94:	462e      	movge	r6, r5
 8020a96:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020a9a:	428e      	cmp	r6, r1
 8020a9c:	bfa8      	it	ge
 8020a9e:	460e      	movge	r6, r1
 8020aa0:	429d      	cmp	r5, r3
 8020aa2:	bfa8      	it	ge
 8020aa4:	461d      	movge	r5, r3
 8020aa6:	4b2c      	ldr	r3, [pc, #176]	; (8020b58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020aa8:	881b      	ldrh	r3, [r3, #0]
 8020aaa:	eba3 030c 	sub.w	r3, r3, ip
 8020aae:	429d      	cmp	r5, r3
 8020ab0:	bfa8      	it	ge
 8020ab2:	461d      	movge	r5, r3
 8020ab4:	42b0      	cmp	r0, r6
 8020ab6:	d12c      	bne.n	8020b12 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8020ab8:	4290      	cmp	r0, r2
 8020aba:	d12a      	bne.n	8020b12 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8020abc:	6838      	ldr	r0, [r7, #0]
 8020abe:	9203      	str	r2, [sp, #12]
 8020ac0:	6803      	ldr	r3, [r0, #0]
 8020ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ac4:	4798      	blx	r3
 8020ac6:	07c3      	lsls	r3, r0, #31
 8020ac8:	d51a      	bpl.n	8020b00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020aca:	9a03      	ldr	r2, [sp, #12]
 8020acc:	6838      	ldr	r0, [r7, #0]
 8020ace:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8020ad2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8020ad6:	6803      	ldr	r3, [r0, #0]
 8020ad8:	9200      	str	r2, [sp, #0]
 8020ada:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8020adc:	4623      	mov	r3, r4
 8020ade:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8020ae2:	47a8      	blx	r5
 8020ae4:	4680      	mov	r8, r0
 8020ae6:	4640      	mov	r0, r8
 8020ae8:	b00f      	add	sp, #60	; 0x3c
 8020aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020aee:	bf1f      	itttt	ne
 8020af0:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8020af4:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8020af8:	185b      	addne	r3, r3, r1
 8020afa:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8020afe:	e7b2      	b.n	8020a66 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8020b00:	6838      	ldr	r0, [r7, #0]
 8020b02:	464a      	mov	r2, r9
 8020b04:	4621      	mov	r1, r4
 8020b06:	6803      	ldr	r3, [r0, #0]
 8020b08:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8020b0a:	fb05 f30a 	mul.w	r3, r5, sl
 8020b0e:	47b0      	blx	r6
 8020b10:	e7e9      	b.n	8020ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020b12:	4355      	muls	r5, r2
 8020b14:	0076      	lsls	r6, r6, #1
 8020b16:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8020b1a:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8020b1e:	9303      	str	r3, [sp, #12]
 8020b20:	9b03      	ldr	r3, [sp, #12]
 8020b22:	429c      	cmp	r4, r3
 8020b24:	d2df      	bcs.n	8020ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020b26:	6838      	ldr	r0, [r7, #0]
 8020b28:	464a      	mov	r2, r9
 8020b2a:	4621      	mov	r1, r4
 8020b2c:	44d1      	add	r9, sl
 8020b2e:	6803      	ldr	r3, [r0, #0]
 8020b30:	445c      	add	r4, fp
 8020b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020b34:	461d      	mov	r5, r3
 8020b36:	4633      	mov	r3, r6
 8020b38:	47a8      	blx	r5
 8020b3a:	e7f1      	b.n	8020b20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8020b3c:	20005944 	.word	0x20005944
 8020b40:	0802e04e 	.word	0x0802e04e
 8020b44:	0802e8c3 	.word	0x0802e8c3
 8020b48:	0802e257 	.word	0x0802e257
 8020b4c:	0802e100 	.word	0x0802e100
 8020b50:	0802e155 	.word	0x0802e155
 8020b54:	2000593e 	.word	0x2000593e
 8020b58:	20005940 	.word	0x20005940
 8020b5c:	0802e193 	.word	0x0802e193

08020b60 <_ZN8touchgfx8LCD16bppC1Ev>:
 8020b60:	2200      	movs	r2, #0
 8020b62:	4910      	ldr	r1, [pc, #64]	; (8020ba4 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8020b64:	6042      	str	r2, [r0, #4]
 8020b66:	6001      	str	r1, [r0, #0]
 8020b68:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020b6c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020b70:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020b74:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020b78:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020b7c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020b80:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020b84:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020b88:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020b8c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020b90:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8020b94:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8020b98:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8020b9c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8020ba0:	4770      	bx	lr
 8020ba2:	bf00      	nop
 8020ba4:	0802e538 	.word	0x0802e538

08020ba8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bac:	b08b      	sub	sp, #44	; 0x2c
 8020bae:	460d      	mov	r5, r1
 8020bb0:	4604      	mov	r4, r0
 8020bb2:	4699      	mov	r9, r3
 8020bb4:	6808      	ldr	r0, [r1, #0]
 8020bb6:	ab06      	add	r3, sp, #24
 8020bb8:	6849      	ldr	r1, [r1, #4]
 8020bba:	c303      	stmia	r3!, {r0, r1}
 8020bbc:	6810      	ldr	r0, [r2, #0]
 8020bbe:	ab08      	add	r3, sp, #32
 8020bc0:	6851      	ldr	r1, [r2, #4]
 8020bc2:	c303      	stmia	r3!, {r0, r1}
 8020bc4:	a806      	add	r0, sp, #24
 8020bc6:	f7f9 fc91 	bl	801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020bca:	4629      	mov	r1, r5
 8020bcc:	a808      	add	r0, sp, #32
 8020bce:	4d63      	ldr	r5, [pc, #396]	; (8020d5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8020bd0:	f7f9 fc74 	bl	801a4bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020bd4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020bd8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020bdc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8020be0:	6828      	ldr	r0, [r5, #0]
 8020be2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020be6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8020bea:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8020bee:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020bf2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020bf6:	440a      	add	r2, r1
 8020bf8:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020bfc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020c00:	4413      	add	r3, r2
 8020c02:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020c06:	6803      	ldr	r3, [r0, #0]
 8020c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c0a:	4798      	blx	r3
 8020c0c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020c10:	d118      	bne.n	8020c44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8020c12:	f010 0f20 	tst.w	r0, #32
 8020c16:	6828      	ldr	r0, [r5, #0]
 8020c18:	d017      	beq.n	8020c4a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8020c1a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8020c1e:	b2b6      	uxth	r6, r6
 8020c20:	6801      	ldr	r1, [r0, #0]
 8020c22:	9502      	str	r5, [sp, #8]
 8020c24:	fa1f f588 	uxth.w	r5, r8
 8020c28:	f8cd 900c 	str.w	r9, [sp, #12]
 8020c2c:	9601      	str	r6, [sp, #4]
 8020c2e:	9500      	str	r5, [sp, #0]
 8020c30:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020c34:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8020c36:	4621      	mov	r1, r4
 8020c38:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020c3c:	47a8      	blx	r5
 8020c3e:	b00b      	add	sp, #44	; 0x2c
 8020c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020c48:	e7e5      	b.n	8020c16 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020c4a:	6803      	ldr	r3, [r0, #0]
 8020c4c:	6a1b      	ldr	r3, [r3, #32]
 8020c4e:	4798      	blx	r3
 8020c50:	4a43      	ldr	r2, [pc, #268]	; (8020d60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8020c52:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020c56:	f8b2 e000 	ldrh.w	lr, [r2]
 8020c5a:	4692      	mov	sl, r2
 8020c5c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020c60:	fb0e 1303 	mla	r3, lr, r3, r1
 8020c64:	fb0e fe06 	mul.w	lr, lr, r6
 8020c68:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020c6c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020c70:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 8020c74:	9305      	str	r3, [sp, #20]
 8020c76:	4570      	cmp	r0, lr
 8020c78:	d26a      	bcs.n	8020d50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 8020c7a:	9b05      	ldr	r3, [sp, #20]
 8020c7c:	4621      	mov	r1, r4
 8020c7e:	eb00 0b03 	add.w	fp, r0, r3
 8020c82:	4558      	cmp	r0, fp
 8020c84:	d257      	bcs.n	8020d36 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 8020c86:	f851 4b04 	ldr.w	r4, [r1], #4
 8020c8a:	0e22      	lsrs	r2, r4, #24
 8020c8c:	d012      	beq.n	8020cb4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8020c8e:	2aff      	cmp	r2, #255	; 0xff
 8020c90:	ea4f 2714 	mov.w	r7, r4, lsr #8
 8020c94:	d110      	bne.n	8020cb8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8020c96:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020c9a:	d10d      	bne.n	8020cb8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8020c9c:	0963      	lsrs	r3, r4, #5
 8020c9e:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8020ca2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020ca6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020caa:	f027 0707 	bic.w	r7, r7, #7
 8020cae:	431f      	orrs	r7, r3
 8020cb0:	433c      	orrs	r4, r7
 8020cb2:	8004      	strh	r4, [r0, #0]
 8020cb4:	3002      	adds	r0, #2
 8020cb6:	e7e4      	b.n	8020c82 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 8020cb8:	fb09 f302 	mul.w	r3, r9, r2
 8020cbc:	f8b0 c000 	ldrh.w	ip, [r0]
 8020cc0:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8020cc4:	b2ff      	uxtb	r7, r7
 8020cc6:	1c5a      	adds	r2, r3, #1
 8020cc8:	ea4f 262c 	mov.w	r6, ip, asr #8
 8020ccc:	b2e4      	uxtb	r4, r4
 8020cce:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8020cd2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020cd6:	1212      	asrs	r2, r2, #8
 8020cd8:	b293      	uxth	r3, r2
 8020cda:	43d2      	mvns	r2, r2
 8020cdc:	fb15 f503 	smulbb	r5, r5, r3
 8020ce0:	b2d2      	uxtb	r2, r2
 8020ce2:	fb17 f703 	smulbb	r7, r7, r3
 8020ce6:	fb06 5602 	mla	r6, r6, r2, r5
 8020cea:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020cee:	fb14 f403 	smulbb	r4, r4, r3
 8020cf2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020cf6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020cfa:	b2b6      	uxth	r6, r6
 8020cfc:	fa5f fc8c 	uxtb.w	ip, ip
 8020d00:	fb05 7702 	mla	r7, r5, r2, r7
 8020d04:	1c73      	adds	r3, r6, #1
 8020d06:	fb0c 4202 	mla	r2, ip, r2, r4
 8020d0a:	b2bf      	uxth	r7, r7
 8020d0c:	b292      	uxth	r2, r2
 8020d0e:	1c7d      	adds	r5, r7, #1
 8020d10:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020d14:	f102 0c01 	add.w	ip, r2, #1
 8020d18:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8020d1c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020d20:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020d24:	097f      	lsrs	r7, r7, #5
 8020d26:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020d2a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020d2e:	4316      	orrs	r6, r2
 8020d30:	433e      	orrs	r6, r7
 8020d32:	8006      	strh	r6, [r0, #0]
 8020d34:	e7be      	b.n	8020cb4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8020d36:	f8ba 3000 	ldrh.w	r3, [sl]
 8020d3a:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8020d3e:	eba3 0308 	sub.w	r3, r3, r8
 8020d42:	eba4 0408 	sub.w	r4, r4, r8
 8020d46:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020d4a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8020d4e:	e792      	b.n	8020c76 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8020d50:	4b02      	ldr	r3, [pc, #8]	; (8020d5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8020d52:	6818      	ldr	r0, [r3, #0]
 8020d54:	6803      	ldr	r3, [r0, #0]
 8020d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d58:	4798      	blx	r3
 8020d5a:	e770      	b.n	8020c3e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8020d5c:	20005944 	.word	0x20005944
 8020d60:	2000593e 	.word	0x2000593e

08020d64 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8020d64:	b570      	push	{r4, r5, r6, lr}
 8020d66:	9d04      	ldr	r5, [sp, #16]
 8020d68:	460c      	mov	r4, r1
 8020d6a:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8020d6e:	4619      	mov	r1, r3
 8020d70:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020d74:	2a0d      	cmp	r2, #13
 8020d76:	d820      	bhi.n	8020dba <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8020d78:	e8df f002 	tbb	[pc, r2]
 8020d7c:	18121807 	.word	0x18121807
 8020d80:	18181818 	.word	0x18181818
 8020d84:	18181818 	.word	0x18181818
 8020d88:	1818      	.short	0x1818
 8020d8a:	6802      	ldr	r2, [r0, #0]
 8020d8c:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8020d90:	68d6      	ldr	r6, [r2, #12]
 8020d92:	462b      	mov	r3, r5
 8020d94:	460a      	mov	r2, r1
 8020d96:	4621      	mov	r1, r4
 8020d98:	46b4      	mov	ip, r6
 8020d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020d9e:	4760      	bx	ip
 8020da0:	462a      	mov	r2, r5
 8020da2:	4620      	mov	r0, r4
 8020da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020da8:	f7ff befe 	b.w	8020ba8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020dac:	4b03      	ldr	r3, [pc, #12]	; (8020dbc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8020dae:	f240 21c1 	movw	r1, #705	; 0x2c1
 8020db2:	4a03      	ldr	r2, [pc, #12]	; (8020dc0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8020db4:	4803      	ldr	r0, [pc, #12]	; (8020dc4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8020db6:	f008 fc8d 	bl	80296d4 <__assert_func>
 8020dba:	bd70      	pop	{r4, r5, r6, pc}
 8020dbc:	0802e1f3 	.word	0x0802e1f3
 8020dc0:	0802e949 	.word	0x0802e949
 8020dc4:	0802e257 	.word	0x0802e257

08020dc8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8020dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dcc:	b093      	sub	sp, #76	; 0x4c
 8020dce:	880f      	ldrh	r7, [r1, #0]
 8020dd0:	4604      	mov	r4, r0
 8020dd2:	4688      	mov	r8, r1
 8020dd4:	4616      	mov	r6, r2
 8020dd6:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8020dda:	b12f      	cbz	r7, 8020de8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8020ddc:	4b6f      	ldr	r3, [pc, #444]	; (8020f9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8020dde:	21e2      	movs	r1, #226	; 0xe2
 8020de0:	4a6f      	ldr	r2, [pc, #444]	; (8020fa0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8020de2:	4870      	ldr	r0, [pc, #448]	; (8020fa4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8020de4:	f008 fc76 	bl	80296d4 <__assert_func>
 8020de8:	6810      	ldr	r0, [r2, #0]
 8020dea:	ad0e      	add	r5, sp, #56	; 0x38
 8020dec:	6851      	ldr	r1, [r2, #4]
 8020dee:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8020fac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 8020df2:	c503      	stmia	r5!, {r0, r1}
 8020df4:	6818      	ldr	r0, [r3, #0]
 8020df6:	ad10      	add	r5, sp, #64	; 0x40
 8020df8:	6859      	ldr	r1, [r3, #4]
 8020dfa:	c503      	stmia	r5!, {r0, r1}
 8020dfc:	a80e      	add	r0, sp, #56	; 0x38
 8020dfe:	f7f9 fb75 	bl	801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e02:	4631      	mov	r1, r6
 8020e04:	a810      	add	r0, sp, #64	; 0x40
 8020e06:	4e68      	ldr	r6, [pc, #416]	; (8020fa8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8020e08:	f7f9 fb58 	bl	801a4bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e0c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020e10:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8020e14:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8020e18:	f8db 0000 	ldr.w	r0, [fp]
 8020e1c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020e20:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8020e24:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8020e28:	440c      	add	r4, r1
 8020e2a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8020e2e:	440a      	add	r2, r1
 8020e30:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8020e34:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020e38:	4413      	add	r3, r2
 8020e3a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8020e3e:	6803      	ldr	r3, [r0, #0]
 8020e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020e44:	4798      	blx	r3
 8020e46:	2801      	cmp	r0, #1
 8020e48:	d11d      	bne.n	8020e86 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8020e4a:	220b      	movs	r2, #11
 8020e4c:	9708      	str	r7, [sp, #32]
 8020e4e:	b2ad      	uxth	r5, r5
 8020e50:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8020e54:	9207      	str	r2, [sp, #28]
 8020e56:	4621      	mov	r1, r4
 8020e58:	8832      	ldrh	r2, [r6, #0]
 8020e5a:	f8cd a010 	str.w	sl, [sp, #16]
 8020e5e:	9502      	str	r5, [sp, #8]
 8020e60:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8020e64:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8020e68:	9203      	str	r2, [sp, #12]
 8020e6a:	fa1f f289 	uxth.w	r2, r9
 8020e6e:	9201      	str	r2, [sp, #4]
 8020e70:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8020e74:	9200      	str	r2, [sp, #0]
 8020e76:	4642      	mov	r2, r8
 8020e78:	f8db 0000 	ldr.w	r0, [fp]
 8020e7c:	f7f6 fdd0 	bl	8017a20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020e80:	b013      	add	sp, #76	; 0x4c
 8020e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e86:	f8db 0000 	ldr.w	r0, [fp]
 8020e8a:	6803      	ldr	r3, [r0, #0]
 8020e8c:	6a1b      	ldr	r3, [r3, #32]
 8020e8e:	4798      	blx	r3
 8020e90:	8832      	ldrh	r2, [r6, #0]
 8020e92:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8020e96:	f04f 0e04 	mov.w	lr, #4
 8020e9a:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8020e9e:	4355      	muls	r5, r2
 8020ea0:	960d      	str	r6, [sp, #52]	; 0x34
 8020ea2:	fb02 1303 	mla	r3, r2, r3, r1
 8020ea6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020eaa:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 8020eae:	930c      	str	r3, [sp, #48]	; 0x30
 8020eb0:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8020eb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8020eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020eb8:	4298      	cmp	r0, r3
 8020eba:	d269      	bcs.n	8020f90 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8020ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ebe:	4621      	mov	r1, r4
 8020ec0:	eb00 0b03 	add.w	fp, r0, r3
 8020ec4:	4558      	cmp	r0, fp
 8020ec6:	460b      	mov	r3, r1
 8020ec8:	d256      	bcs.n	8020f78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8020eca:	781b      	ldrb	r3, [r3, #0]
 8020ecc:	3101      	adds	r1, #1
 8020ece:	fb1e e303 	smlabb	r3, lr, r3, lr
 8020ed2:	f858 2003 	ldr.w	r2, [r8, r3]
 8020ed6:	0e14      	lsrs	r4, r2, #24
 8020ed8:	d012      	beq.n	8020f00 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8020eda:	2cff      	cmp	r4, #255	; 0xff
 8020edc:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8020ee0:	d110      	bne.n	8020f04 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8020ee2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020ee6:	d10d      	bne.n	8020f04 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8020ee8:	0953      	lsrs	r3, r2, #5
 8020eea:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020eee:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020ef2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020ef6:	f026 0607 	bic.w	r6, r6, #7
 8020efa:	431e      	orrs	r6, r3
 8020efc:	4332      	orrs	r2, r6
 8020efe:	8002      	strh	r2, [r0, #0]
 8020f00:	3002      	adds	r0, #2
 8020f02:	e7df      	b.n	8020ec4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 8020f04:	fb0a f404 	mul.w	r4, sl, r4
 8020f08:	8807      	ldrh	r7, [r0, #0]
 8020f0a:	b2f6      	uxtb	r6, r6
 8020f0c:	1c63      	adds	r3, r4, #1
 8020f0e:	123d      	asrs	r5, r7, #8
 8020f10:	eb03 2324 	add.w	r3, r3, r4, asr #8
 8020f14:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8020f18:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020f1c:	b2d2      	uxtb	r2, r2
 8020f1e:	121b      	asrs	r3, r3, #8
 8020f20:	fa1f fc83 	uxth.w	ip, r3
 8020f24:	43db      	mvns	r3, r3
 8020f26:	fb14 f40c 	smulbb	r4, r4, ip
 8020f2a:	b2db      	uxtb	r3, r3
 8020f2c:	fb12 f20c 	smulbb	r2, r2, ip
 8020f30:	fb05 4503 	mla	r5, r5, r3, r4
 8020f34:	10fc      	asrs	r4, r7, #3
 8020f36:	fb16 f60c 	smulbb	r6, r6, ip
 8020f3a:	00ff      	lsls	r7, r7, #3
 8020f3c:	b2ad      	uxth	r5, r5
 8020f3e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8020f42:	b2ff      	uxtb	r7, r7
 8020f44:	fb04 6603 	mla	r6, r4, r3, r6
 8020f48:	fb07 2203 	mla	r2, r7, r3, r2
 8020f4c:	1c6b      	adds	r3, r5, #1
 8020f4e:	b2b6      	uxth	r6, r6
 8020f50:	b292      	uxth	r2, r2
 8020f52:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020f56:	1c54      	adds	r4, r2, #1
 8020f58:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020f5c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8020f60:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8020f64:	4325      	orrs	r5, r4
 8020f66:	1c74      	adds	r4, r6, #1
 8020f68:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020f6c:	0976      	lsrs	r6, r6, #5
 8020f6e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020f72:	4335      	orrs	r5, r6
 8020f74:	8005      	strh	r5, [r0, #0]
 8020f76:	e7c3      	b.n	8020f00 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8020f78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020f7a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8020f7e:	881b      	ldrh	r3, [r3, #0]
 8020f80:	eba4 0409 	sub.w	r4, r4, r9
 8020f84:	eba3 0309 	sub.w	r3, r3, r9
 8020f88:	440c      	add	r4, r1
 8020f8a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020f8e:	e792      	b.n	8020eb6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8020f90:	4b06      	ldr	r3, [pc, #24]	; (8020fac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8020f92:	6818      	ldr	r0, [r3, #0]
 8020f94:	6803      	ldr	r3, [r0, #0]
 8020f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f98:	4798      	blx	r3
 8020f9a:	e771      	b.n	8020e80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020f9c:	0802dffe 	.word	0x0802dffe
 8020fa0:	0802e71a 	.word	0x0802e71a
 8020fa4:	0802e257 	.word	0x0802e257
 8020fa8:	2000593e 	.word	0x2000593e
 8020fac:	20005944 	.word	0x20005944

08020fb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8020fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fb4:	4614      	mov	r4, r2
 8020fb6:	880a      	ldrh	r2, [r1, #0]
 8020fb8:	b091      	sub	sp, #68	; 0x44
 8020fba:	4607      	mov	r7, r0
 8020fbc:	2a02      	cmp	r2, #2
 8020fbe:	4689      	mov	r9, r1
 8020fc0:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 8020fc4:	d006      	beq.n	8020fd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8020fc6:	4b77      	ldr	r3, [pc, #476]	; (80211a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 8020fc8:	f240 113b 	movw	r1, #315	; 0x13b
 8020fcc:	4a76      	ldr	r2, [pc, #472]	; (80211a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8020fce:	4877      	ldr	r0, [pc, #476]	; (80211ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 8020fd0:	f008 fb80 	bl	80296d4 <__assert_func>
 8020fd4:	2e00      	cmp	r6, #0
 8020fd6:	d04b      	beq.n	8021070 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8020fd8:	6820      	ldr	r0, [r4, #0]
 8020fda:	ad0c      	add	r5, sp, #48	; 0x30
 8020fdc:	6861      	ldr	r1, [r4, #4]
 8020fde:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80211b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 8020fe2:	c503      	stmia	r5!, {r0, r1}
 8020fe4:	6818      	ldr	r0, [r3, #0]
 8020fe6:	ad0e      	add	r5, sp, #56	; 0x38
 8020fe8:	6859      	ldr	r1, [r3, #4]
 8020fea:	c503      	stmia	r5!, {r0, r1}
 8020fec:	a80c      	add	r0, sp, #48	; 0x30
 8020fee:	f7f9 fa7d 	bl	801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ff2:	4621      	mov	r1, r4
 8020ff4:	a80e      	add	r0, sp, #56	; 0x38
 8020ff6:	f7f9 fa61 	bl	801a4bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020ffa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020ffe:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021002:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021006:	f8da 0000 	ldr.w	r0, [sl]
 802100a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802100e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8021012:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8021016:	187c      	adds	r4, r7, r1
 8021018:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 802101c:	4f64      	ldr	r7, [pc, #400]	; (80211b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 802101e:	440a      	add	r2, r1
 8021020:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021024:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8021028:	4413      	add	r3, r2
 802102a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 802102e:	6803      	ldr	r3, [r0, #0]
 8021030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021034:	4798      	blx	r3
 8021036:	2801      	cmp	r0, #1
 8021038:	d11d      	bne.n	8021076 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 802103a:	2200      	movs	r2, #0
 802103c:	210b      	movs	r1, #11
 802103e:	b2ad      	uxth	r5, r5
 8021040:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021044:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8021048:	8839      	ldrh	r1, [r7, #0]
 802104a:	9604      	str	r6, [sp, #16]
 802104c:	9502      	str	r5, [sp, #8]
 802104e:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8021052:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021056:	4621      	mov	r1, r4
 8021058:	9203      	str	r2, [sp, #12]
 802105a:	fa1f f288 	uxth.w	r2, r8
 802105e:	9201      	str	r2, [sp, #4]
 8021060:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021064:	9200      	str	r2, [sp, #0]
 8021066:	464a      	mov	r2, r9
 8021068:	f8da 0000 	ldr.w	r0, [sl]
 802106c:	f7f6 fcd8 	bl	8017a20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021070:	b011      	add	sp, #68	; 0x44
 8021072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021076:	f8da 0000 	ldr.w	r0, [sl]
 802107a:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 802107e:	6803      	ldr	r3, [r0, #0]
 8021080:	6a1b      	ldr	r3, [r3, #32]
 8021082:	4798      	blx	r3
 8021084:	8839      	ldrh	r1, [r7, #0]
 8021086:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802108a:	2eff      	cmp	r6, #255	; 0xff
 802108c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021090:	fb05 f501 	mul.w	r5, r5, r1
 8021094:	fb01 2303 	mla	r3, r1, r3, r2
 8021098:	f109 0204 	add.w	r2, r9, #4
 802109c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80210a0:	d05f      	beq.n	8021162 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 80210a2:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 80210a6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80210aa:	b2b6      	uxth	r6, r6
 80210ac:	970b      	str	r7, [sp, #44]	; 0x2c
 80210ae:	fa1f f989 	uxth.w	r9, r9
 80210b2:	42a8      	cmp	r0, r5
 80210b4:	d26f      	bcs.n	8021196 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 80210b6:	eb00 010b 	add.w	r1, r0, fp
 80210ba:	4288      	cmp	r0, r1
 80210bc:	4623      	mov	r3, r4
 80210be:	d244      	bcs.n	802114a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 80210c0:	8807      	ldrh	r7, [r0, #0]
 80210c2:	3401      	adds	r4, #1
 80210c4:	781b      	ldrb	r3, [r3, #0]
 80210c6:	ea4f 2c27 	mov.w	ip, r7, asr #8
 80210ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80210ce:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 80210d2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80210d6:	00ff      	lsls	r7, r7, #3
 80210d8:	ea4f 2e23 	mov.w	lr, r3, asr #8
 80210dc:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80210e0:	fb1c fc09 	smulbb	ip, ip, r9
 80210e4:	b2ff      	uxtb	r7, r7
 80210e6:	fb1a fa09 	smulbb	sl, sl, r9
 80210ea:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80210ee:	fb17 f709 	smulbb	r7, r7, r9
 80210f2:	fb0e ce06 	mla	lr, lr, r6, ip
 80210f6:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 80210fa:	00db      	lsls	r3, r3, #3
 80210fc:	fa1f fe8e 	uxth.w	lr, lr
 8021100:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021104:	b2db      	uxtb	r3, r3
 8021106:	fb0c ac06 	mla	ip, ip, r6, sl
 802110a:	f10e 0a01 	add.w	sl, lr, #1
 802110e:	fb03 7306 	mla	r3, r3, r6, r7
 8021112:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8021116:	b29b      	uxth	r3, r3
 8021118:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 802111c:	fa1f fc8c 	uxth.w	ip, ip
 8021120:	f103 0e01 	add.w	lr, r3, #1
 8021124:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8021128:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802112c:	ea4a 0e03 	orr.w	lr, sl, r3
 8021130:	f10c 0a01 	add.w	sl, ip, #1
 8021134:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8021138:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802113c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021140:	ea4e 0e0c 	orr.w	lr, lr, ip
 8021144:	f820 eb02 	strh.w	lr, [r0], #2
 8021148:	e7b7      	b.n	80210ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 802114a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802114c:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8021150:	881b      	ldrh	r3, [r3, #0]
 8021152:	eba1 0108 	sub.w	r1, r1, r8
 8021156:	eba3 0308 	sub.w	r3, r3, r8
 802115a:	440c      	add	r4, r1
 802115c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021160:	e7a7      	b.n	80210b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 8021162:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8021166:	42a8      	cmp	r0, r5
 8021168:	d215      	bcs.n	8021196 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 802116a:	eb00 010b 	add.w	r1, r0, fp
 802116e:	4288      	cmp	r0, r1
 8021170:	d206      	bcs.n	8021180 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 8021172:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802117a:	f820 3b02 	strh.w	r3, [r0], #2
 802117e:	e7f6      	b.n	802116e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 8021180:	883b      	ldrh	r3, [r7, #0]
 8021182:	eba3 0308 	sub.w	r3, r3, r8
 8021186:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802118a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802118e:	eba3 0308 	sub.w	r3, r3, r8
 8021192:	441c      	add	r4, r3
 8021194:	e7e7      	b.n	8021166 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 8021196:	4b07      	ldr	r3, [pc, #28]	; (80211b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 8021198:	6818      	ldr	r0, [r3, #0]
 802119a:	6803      	ldr	r3, [r0, #0]
 802119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802119e:	4798      	blx	r3
 80211a0:	e766      	b.n	8021070 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80211a2:	bf00      	nop
 80211a4:	0802debc 	.word	0x0802debc
 80211a8:	0802e584 	.word	0x0802e584
 80211ac:	0802e257 	.word	0x0802e257
 80211b0:	2000593e 	.word	0x2000593e
 80211b4:	20005944 	.word	0x20005944

080211b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80211b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211bc:	4614      	mov	r4, r2
 80211be:	880a      	ldrh	r2, [r1, #0]
 80211c0:	b091      	sub	sp, #68	; 0x44
 80211c2:	4606      	mov	r6, r0
 80211c4:	2a01      	cmp	r2, #1
 80211c6:	4688      	mov	r8, r1
 80211c8:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80211cc:	d006      	beq.n	80211dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 80211ce:	4b7c      	ldr	r3, [pc, #496]	; (80213c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 80211d0:	f240 1197 	movw	r1, #407	; 0x197
 80211d4:	4a7b      	ldr	r2, [pc, #492]	; (80213c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 80211d6:	487c      	ldr	r0, [pc, #496]	; (80213c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 80211d8:	f008 fa7c 	bl	80296d4 <__assert_func>
 80211dc:	2f00      	cmp	r7, #0
 80211de:	d04b      	beq.n	8021278 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 80211e0:	6820      	ldr	r0, [r4, #0]
 80211e2:	ad0c      	add	r5, sp, #48	; 0x30
 80211e4:	6861      	ldr	r1, [r4, #4]
 80211e6:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 80213d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80211ea:	c503      	stmia	r5!, {r0, r1}
 80211ec:	6818      	ldr	r0, [r3, #0]
 80211ee:	ad0e      	add	r5, sp, #56	; 0x38
 80211f0:	6859      	ldr	r1, [r3, #4]
 80211f2:	c503      	stmia	r5!, {r0, r1}
 80211f4:	a80c      	add	r0, sp, #48	; 0x30
 80211f6:	f7f9 f979 	bl	801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211fa:	4621      	mov	r1, r4
 80211fc:	a80e      	add	r0, sp, #56	; 0x38
 80211fe:	f7f9 f95d 	bl	801a4bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021202:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021206:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802120a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 802120e:	f8da 0000 	ldr.w	r0, [sl]
 8021212:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021216:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 802121a:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 802121e:	1874      	adds	r4, r6, r1
 8021220:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021224:	4e69      	ldr	r6, [pc, #420]	; (80213cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 8021226:	440a      	add	r2, r1
 8021228:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 802122c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8021230:	4413      	add	r3, r2
 8021232:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021236:	6803      	ldr	r3, [r0, #0]
 8021238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802123c:	4798      	blx	r3
 802123e:	2801      	cmp	r0, #1
 8021240:	d11d      	bne.n	802127e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8021242:	220b      	movs	r2, #11
 8021244:	2100      	movs	r1, #0
 8021246:	b2ad      	uxth	r5, r5
 8021248:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802124c:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8021250:	8832      	ldrh	r2, [r6, #0]
 8021252:	4621      	mov	r1, r4
 8021254:	9704      	str	r7, [sp, #16]
 8021256:	9501      	str	r5, [sp, #4]
 8021258:	e9cd 0205 	strd	r0, r2, [sp, #20]
 802125c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021260:	9203      	str	r2, [sp, #12]
 8021262:	fa1f f289 	uxth.w	r2, r9
 8021266:	9202      	str	r2, [sp, #8]
 8021268:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802126c:	9200      	str	r2, [sp, #0]
 802126e:	4642      	mov	r2, r8
 8021270:	f8da 0000 	ldr.w	r0, [sl]
 8021274:	f7f6 fbd4 	bl	8017a20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021278:	b011      	add	sp, #68	; 0x44
 802127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802127e:	f8da 0000 	ldr.w	r0, [sl]
 8021282:	6803      	ldr	r3, [r0, #0]
 8021284:	6a1b      	ldr	r3, [r3, #32]
 8021286:	4798      	blx	r3
 8021288:	8832      	ldrh	r2, [r6, #0]
 802128a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802128e:	2fff      	cmp	r7, #255	; 0xff
 8021290:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8021294:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8021298:	fb09 f902 	mul.w	r9, r9, r2
 802129c:	fb02 1303 	mla	r3, r2, r3, r1
 80212a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80212a4:	d056      	beq.n	8021354 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 80212a6:	ea6f 0c07 	mvn.w	ip, r7
 80212aa:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 80212ae:	b2bb      	uxth	r3, r7
 80212b0:	960b      	str	r6, [sp, #44]	; 0x2c
 80212b2:	fa5f fc8c 	uxtb.w	ip, ip
 80212b6:	4548      	cmp	r0, r9
 80212b8:	d27b      	bcs.n	80213b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 80212ba:	eb00 0a0e 	add.w	sl, r0, lr
 80212be:	4550      	cmp	r0, sl
 80212c0:	4622      	mov	r2, r4
 80212c2:	d23d      	bcs.n	8021340 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 80212c4:	7811      	ldrb	r1, [r2, #0]
 80212c6:	2604      	movs	r6, #4
 80212c8:	2203      	movs	r2, #3
 80212ca:	3401      	adds	r4, #1
 80212cc:	fb12 6101 	smlabb	r1, r2, r1, r6
 80212d0:	8802      	ldrh	r2, [r0, #0]
 80212d2:	eb08 0b01 	add.w	fp, r8, r1
 80212d6:	1217      	asrs	r7, r2, #8
 80212d8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80212dc:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80212e0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80212e4:	f89b b001 	ldrb.w	fp, [fp, #1]
 80212e8:	fb16 f603 	smulbb	r6, r6, r3
 80212ec:	fb1b fb03 	smulbb	fp, fp, r3
 80212f0:	fb07 670c 	mla	r7, r7, ip, r6
 80212f4:	10d6      	asrs	r6, r2, #3
 80212f6:	00d2      	lsls	r2, r2, #3
 80212f8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80212fc:	b2bf      	uxth	r7, r7
 80212fe:	b2d2      	uxtb	r2, r2
 8021300:	fb06 b60c 	mla	r6, r6, ip, fp
 8021304:	fb12 f20c 	smulbb	r2, r2, ip
 8021308:	b2b6      	uxth	r6, r6
 802130a:	fb01 2103 	mla	r1, r1, r3, r2
 802130e:	1c7a      	adds	r2, r7, #1
 8021310:	f106 0b01 	add.w	fp, r6, #1
 8021314:	b289      	uxth	r1, r1
 8021316:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802131a:	1c4a      	adds	r2, r1, #1
 802131c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8021320:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021324:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8021328:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802132c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021330:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021334:	4317      	orrs	r7, r2
 8021336:	ea47 070b 	orr.w	r7, r7, fp
 802133a:	f820 7b02 	strh.w	r7, [r0], #2
 802133e:	e7be      	b.n	80212be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8021340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021342:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8021346:	8812      	ldrh	r2, [r2, #0]
 8021348:	1b49      	subs	r1, r1, r5
 802134a:	1b52      	subs	r2, r2, r5
 802134c:	440c      	add	r4, r1
 802134e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021352:	e7b0      	b.n	80212b6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 8021354:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 8021358:	2203      	movs	r2, #3
 802135a:	2704      	movs	r7, #4
 802135c:	491c      	ldr	r1, [pc, #112]	; (80213d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 802135e:	4548      	cmp	r0, r9
 8021360:	d227      	bcs.n	80213b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8021362:	eb00 0c0e 	add.w	ip, r0, lr
 8021366:	4560      	cmp	r0, ip
 8021368:	4623      	mov	r3, r4
 802136a:	d219      	bcs.n	80213a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 802136c:	f893 a000 	ldrb.w	sl, [r3]
 8021370:	3401      	adds	r4, #1
 8021372:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 8021376:	eb08 0b0a 	add.w	fp, r8, sl
 802137a:	f818 a00a 	ldrb.w	sl, [r8, sl]
 802137e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021382:	f89b b001 	ldrb.w	fp, [fp, #1]
 8021386:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 802138a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802138e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021392:	ea43 030b 	orr.w	r3, r3, fp
 8021396:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 802139a:	f820 3b02 	strh.w	r3, [r0], #2
 802139e:	e7e2      	b.n	8021366 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 80213a0:	8833      	ldrh	r3, [r6, #0]
 80213a2:	1b5b      	subs	r3, r3, r5
 80213a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80213a8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80213ac:	1b5b      	subs	r3, r3, r5
 80213ae:	441c      	add	r4, r3
 80213b0:	e7d5      	b.n	802135e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 80213b2:	4b08      	ldr	r3, [pc, #32]	; (80213d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 80213b4:	6818      	ldr	r0, [r3, #0]
 80213b6:	6803      	ldr	r3, [r0, #0]
 80213b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213ba:	4798      	blx	r3
 80213bc:	e75c      	b.n	8021278 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 80213be:	bf00      	nop
 80213c0:	0802df0a 	.word	0x0802df0a
 80213c4:	0802e60d 	.word	0x0802e60d
 80213c8:	0802e257 	.word	0x0802e257
 80213cc:	2000593e 	.word	0x2000593e
 80213d0:	fffff800 	.word	0xfffff800
 80213d4:	20005944 	.word	0x20005944

080213d8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80213d8:	b430      	push	{r4, r5}
 80213da:	780d      	ldrb	r5, [r1, #0]
 80213dc:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80213e0:	2d01      	cmp	r5, #1
 80213e2:	d00a      	beq.n	80213fa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80213e4:	d305      	bcc.n	80213f2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80213e6:	2d02      	cmp	r5, #2
 80213e8:	d10b      	bne.n	8021402 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80213ea:	9402      	str	r4, [sp, #8]
 80213ec:	bc30      	pop	{r4, r5}
 80213ee:	f7ff bddf 	b.w	8020fb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80213f2:	9402      	str	r4, [sp, #8]
 80213f4:	bc30      	pop	{r4, r5}
 80213f6:	f7ff bce7 	b.w	8020dc8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80213fa:	9402      	str	r4, [sp, #8]
 80213fc:	bc30      	pop	{r4, r5}
 80213fe:	f7ff bedb 	b.w	80211b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8021402:	bc30      	pop	{r4, r5}
 8021404:	4770      	bx	lr
	...

08021408 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8021408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802140c:	b087      	sub	sp, #28
 802140e:	4604      	mov	r4, r0
 8021410:	460e      	mov	r6, r1
 8021412:	6810      	ldr	r0, [r2, #0]
 8021414:	6851      	ldr	r1, [r2, #4]
 8021416:	ad02      	add	r5, sp, #8
 8021418:	4617      	mov	r7, r2
 802141a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 802141e:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8021650 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8021422:	c503      	stmia	r5!, {r0, r1}
 8021424:	6818      	ldr	r0, [r3, #0]
 8021426:	ad04      	add	r5, sp, #16
 8021428:	6859      	ldr	r1, [r3, #4]
 802142a:	c503      	stmia	r5!, {r0, r1}
 802142c:	a802      	add	r0, sp, #8
 802142e:	f7f9 f85d 	bl	801a4ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021432:	4639      	mov	r1, r7
 8021434:	a804      	add	r0, sp, #16
 8021436:	f7f9 f841 	bl	801a4bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802143a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802143e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021442:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021446:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802144a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802144e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8021452:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021456:	440e      	add	r6, r1
 8021458:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802145c:	440a      	add	r2, r1
 802145e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021462:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021466:	4413      	add	r3, r2
 8021468:	f8ad 3012 	strh.w	r3, [sp, #18]
 802146c:	4b77      	ldr	r3, [pc, #476]	; (802164c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802146e:	6818      	ldr	r0, [r3, #0]
 8021470:	6803      	ldr	r3, [r0, #0]
 8021472:	6a1b      	ldr	r3, [r3, #32]
 8021474:	4798      	blx	r3
 8021476:	f8b9 b000 	ldrh.w	fp, [r9]
 802147a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802147e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021482:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021486:	fb05 f50b 	mul.w	r5, r5, fp
 802148a:	fb0b 2303 	mla	r3, fp, r3, r2
 802148e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021492:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021496:	9300      	str	r3, [sp, #0]
 8021498:	d068      	beq.n	802156c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 802149a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 802149e:	4558      	cmp	r0, fp
 80214a0:	f080 80cc 	bcs.w	802163c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80214a4:	9b00      	ldr	r3, [sp, #0]
 80214a6:	4631      	mov	r1, r6
 80214a8:	18c3      	adds	r3, r0, r3
 80214aa:	9301      	str	r3, [sp, #4]
 80214ac:	9b01      	ldr	r3, [sp, #4]
 80214ae:	4298      	cmp	r0, r3
 80214b0:	d24e      	bcs.n	8021550 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 80214b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80214b6:	2a00      	cmp	r2, #0
 80214b8:	d047      	beq.n	802154a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 80214ba:	fb0a f202 	mul.w	r2, sl, r2
 80214be:	1c53      	adds	r3, r2, #1
 80214c0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80214c4:	121b      	asrs	r3, r3, #8
 80214c6:	d040      	beq.n	802154a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 80214c8:	8802      	ldrh	r2, [r0, #0]
 80214ca:	b29e      	uxth	r6, r3
 80214cc:	f8b4 c000 	ldrh.w	ip, [r4]
 80214d0:	43db      	mvns	r3, r3
 80214d2:	1215      	asrs	r5, r2, #8
 80214d4:	b2db      	uxtb	r3, r3
 80214d6:	ea4f 272c 	mov.w	r7, ip, asr #8
 80214da:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80214de:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80214e2:	fb15 f503 	smulbb	r5, r5, r3
 80214e6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80214ea:	00d2      	lsls	r2, r2, #3
 80214ec:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80214f0:	fb07 5706 	mla	r7, r7, r6, r5
 80214f4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80214f8:	b2d2      	uxtb	r2, r2
 80214fa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80214fe:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021502:	fb1e fe03 	smulbb	lr, lr, r3
 8021506:	b2bf      	uxth	r7, r7
 8021508:	fb12 f203 	smulbb	r2, r2, r3
 802150c:	fa5f fc8c 	uxtb.w	ip, ip
 8021510:	fb05 e506 	mla	r5, r5, r6, lr
 8021514:	1c7b      	adds	r3, r7, #1
 8021516:	fb0c 2c06 	mla	ip, ip, r6, r2
 802151a:	b2ad      	uxth	r5, r5
 802151c:	fa1f fc8c 	uxth.w	ip, ip
 8021520:	f105 0e01 	add.w	lr, r5, #1
 8021524:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021528:	f10c 0601 	add.w	r6, ip, #1
 802152c:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8021530:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021534:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021538:	096d      	lsrs	r5, r5, #5
 802153a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802153e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021542:	ea47 070c 	orr.w	r7, r7, ip
 8021546:	432f      	orrs	r7, r5
 8021548:	8007      	strh	r7, [r0, #0]
 802154a:	3002      	adds	r0, #2
 802154c:	3402      	adds	r4, #2
 802154e:	e7ad      	b.n	80214ac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8021550:	f8b9 3000 	ldrh.w	r3, [r9]
 8021554:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021558:	eba3 0308 	sub.w	r3, r3, r8
 802155c:	eba6 0608 	sub.w	r6, r6, r8
 8021560:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021564:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021568:	440e      	add	r6, r1
 802156a:	e798      	b.n	802149e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 802156c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8021570:	42a8      	cmp	r0, r5
 8021572:	d263      	bcs.n	802163c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021574:	9b00      	ldr	r3, [sp, #0]
 8021576:	4631      	mov	r1, r6
 8021578:	eb00 0b03 	add.w	fp, r0, r3
 802157c:	4558      	cmp	r0, fp
 802157e:	d24f      	bcs.n	8021620 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8021580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021584:	b12b      	cbz	r3, 8021592 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 8021586:	2bff      	cmp	r3, #255	; 0xff
 8021588:	f8b4 e000 	ldrh.w	lr, [r4]
 802158c:	d104      	bne.n	8021598 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 802158e:	f8a0 e000 	strh.w	lr, [r0]
 8021592:	3002      	adds	r0, #2
 8021594:	3402      	adds	r4, #2
 8021596:	e7f1      	b.n	802157c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 8021598:	8802      	ldrh	r2, [r0, #0]
 802159a:	b29f      	uxth	r7, r3
 802159c:	43db      	mvns	r3, r3
 802159e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80215a2:	1216      	asrs	r6, r2, #8
 80215a4:	b2db      	uxtb	r3, r3
 80215a6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80215aa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80215ae:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80215b2:	00d2      	lsls	r2, r2, #3
 80215b4:	fb16 f603 	smulbb	r6, r6, r3
 80215b8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80215bc:	b2d2      	uxtb	r2, r2
 80215be:	fb0c 6c07 	mla	ip, ip, r7, r6
 80215c2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80215c6:	fb1a fa03 	smulbb	sl, sl, r3
 80215ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80215ce:	fb12 f303 	smulbb	r3, r2, r3
 80215d2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80215d6:	fa5f fe8e 	uxtb.w	lr, lr
 80215da:	fb06 a607 	mla	r6, r6, r7, sl
 80215de:	fa1f fc8c 	uxth.w	ip, ip
 80215e2:	fb0e 3e07 	mla	lr, lr, r7, r3
 80215e6:	b2b6      	uxth	r6, r6
 80215e8:	f10c 0201 	add.w	r2, ip, #1
 80215ec:	fa1f fe8e 	uxth.w	lr, lr
 80215f0:	f106 0a01 	add.w	sl, r6, #1
 80215f4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80215f8:	f10e 0301 	add.w	r3, lr, #1
 80215fc:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021600:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021604:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8021608:	0976      	lsrs	r6, r6, #5
 802160a:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802160e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021612:	ea4c 0c0e 	orr.w	ip, ip, lr
 8021616:	ea4c 0c06 	orr.w	ip, ip, r6
 802161a:	f8a0 c000 	strh.w	ip, [r0]
 802161e:	e7b8      	b.n	8021592 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 8021620:	f8b9 3000 	ldrh.w	r3, [r9]
 8021624:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021628:	eba3 0308 	sub.w	r3, r3, r8
 802162c:	eba6 0608 	sub.w	r6, r6, r8
 8021630:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021634:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021638:	440e      	add	r6, r1
 802163a:	e799      	b.n	8021570 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 802163c:	4b03      	ldr	r3, [pc, #12]	; (802164c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802163e:	6818      	ldr	r0, [r3, #0]
 8021640:	6803      	ldr	r3, [r0, #0]
 8021642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021644:	4798      	blx	r3
 8021646:	b007      	add	sp, #28
 8021648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802164c:	20005944 	.word	0x20005944
 8021650:	2000593e 	.word	0x2000593e

08021654 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021658:	b089      	sub	sp, #36	; 0x24
 802165a:	4682      	mov	sl, r0
 802165c:	460d      	mov	r5, r1
 802165e:	4691      	mov	r9, r2
 8021660:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8021664:	4698      	mov	r8, r3
 8021666:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021668:	b3ae      	cbz	r6, 80216d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 802166a:	4608      	mov	r0, r1
 802166c:	f7fc fa08 	bl	801da80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021670:	4607      	mov	r7, r0
 8021672:	4628      	mov	r0, r5
 8021674:	f7fc fa3e 	bl	801daf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021678:	f8ad 000e 	strh.w	r0, [sp, #14]
 802167c:	4628      	mov	r0, r5
 802167e:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021682:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021686:	f8ad 700c 	strh.w	r7, [sp, #12]
 802168a:	f7fc fb8b 	bl	801dda4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802168e:	b178      	cbz	r0, 80216b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8021690:	4628      	mov	r0, r5
 8021692:	f7fc fb87 	bl	801dda4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021696:	2802      	cmp	r0, #2
 8021698:	d00a      	beq.n	80216b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802169a:	4628      	mov	r0, r5
 802169c:	f7fc fb82 	bl	801dda4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80216a0:	280b      	cmp	r0, #11
 80216a2:	d005      	beq.n	80216b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80216a4:	4b69      	ldr	r3, [pc, #420]	; (802184c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 80216a6:	214b      	movs	r1, #75	; 0x4b
 80216a8:	4a69      	ldr	r2, [pc, #420]	; (8021850 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 80216aa:	486a      	ldr	r0, [pc, #424]	; (8021854 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 80216ac:	f008 f812 	bl	80296d4 <__assert_func>
 80216b0:	4628      	mov	r0, r5
 80216b2:	f7fc faed 	bl	801dc90 <_ZNK8touchgfx6Bitmap7getDataEv>
 80216b6:	4607      	mov	r7, r0
 80216b8:	4628      	mov	r0, r5
 80216ba:	f7fc fb1b 	bl	801dcf4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80216be:	4681      	mov	r9, r0
 80216c0:	4628      	mov	r0, r5
 80216c2:	f7fc fb6f 	bl	801dda4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80216c6:	2802      	cmp	r0, #2
 80216c8:	d108      	bne.n	80216dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 80216ca:	4633      	mov	r3, r6
 80216cc:	4622      	mov	r2, r4
 80216ce:	a902      	add	r1, sp, #8
 80216d0:	4638      	mov	r0, r7
 80216d2:	f7ff fa69 	bl	8020ba8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80216d6:	b009      	add	sp, #36	; 0x24
 80216d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216dc:	4628      	mov	r0, r5
 80216de:	f7fc fb61 	bl	801dda4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80216e2:	280b      	cmp	r0, #11
 80216e4:	d107      	bne.n	80216f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80216e6:	9600      	str	r6, [sp, #0]
 80216e8:	4623      	mov	r3, r4
 80216ea:	aa02      	add	r2, sp, #8
 80216ec:	4649      	mov	r1, r9
 80216ee:	4638      	mov	r0, r7
 80216f0:	f7ff fe72 	bl	80213d8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80216f4:	e7ef      	b.n	80216d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80216f6:	4628      	mov	r0, r5
 80216f8:	f7fc fa90 	bl	801dc1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80216fc:	b950      	cbnz	r0, 8021714 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80216fe:	f8da 3000 	ldr.w	r3, [sl]
 8021702:	aa02      	add	r2, sp, #8
 8021704:	4639      	mov	r1, r7
 8021706:	e9cd 6000 	strd	r6, r0, [sp]
 802170a:	4650      	mov	r0, sl
 802170c:	68dd      	ldr	r5, [r3, #12]
 802170e:	4623      	mov	r3, r4
 8021710:	47a8      	blx	r5
 8021712:	e7e0      	b.n	80216d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8021714:	f10d 0818 	add.w	r8, sp, #24
 8021718:	4629      	mov	r1, r5
 802171a:	ad04      	add	r5, sp, #16
 802171c:	4640      	mov	r0, r8
 802171e:	f7fc fa23 	bl	801db68 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021722:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021726:	e885 0003 	stmia.w	r5, {r0, r1}
 802172a:	4628      	mov	r0, r5
 802172c:	4621      	mov	r1, r4
 802172e:	f7f5 fd2b 	bl	8017188 <_ZN8touchgfx4RectaNERKS0_>
 8021732:	4628      	mov	r0, r5
 8021734:	f7f5 fd6b 	bl	801720e <_ZNK8touchgfx4Rect7isEmptyEv>
 8021738:	b138      	cbz	r0, 802174a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 802173a:	4623      	mov	r3, r4
 802173c:	9600      	str	r6, [sp, #0]
 802173e:	aa02      	add	r2, sp, #8
 8021740:	4649      	mov	r1, r9
 8021742:	4638      	mov	r0, r7
 8021744:	f7ff fe60 	bl	8021408 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021748:	e7c5      	b.n	80216d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 802174a:	f8da 3000 	ldr.w	r3, [sl]
 802174e:	aa02      	add	r2, sp, #8
 8021750:	4639      	mov	r1, r7
 8021752:	e9cd 6000 	strd	r6, r0, [sp]
 8021756:	4650      	mov	r0, sl
 8021758:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 802175c:	462b      	mov	r3, r5
 802175e:	47d8      	blx	fp
 8021760:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021764:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021768:	4293      	cmp	r3, r2
 802176a:	dd13      	ble.n	8021794 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 802176c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021770:	1a9b      	subs	r3, r3, r2
 8021772:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021776:	f8ad 0018 	strh.w	r0, [sp, #24]
 802177a:	4638      	mov	r0, r7
 802177c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021780:	aa02      	add	r2, sp, #8
 8021782:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021786:	4649      	mov	r1, r9
 8021788:	f8ad 301e 	strh.w	r3, [sp, #30]
 802178c:	4643      	mov	r3, r8
 802178e:	9600      	str	r6, [sp, #0]
 8021790:	f7ff fe3a 	bl	8021408 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021794:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021798:	f9b4 2000 	ldrsh.w	r2, [r4]
 802179c:	4293      	cmp	r3, r2
 802179e:	dd13      	ble.n	80217c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 80217a0:	1a9b      	subs	r3, r3, r2
 80217a2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80217a6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80217aa:	f8ad 2018 	strh.w	r2, [sp, #24]
 80217ae:	aa02      	add	r2, sp, #8
 80217b0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80217b4:	4638      	mov	r0, r7
 80217b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80217ba:	4643      	mov	r3, r8
 80217bc:	f8ad 101e 	strh.w	r1, [sp, #30]
 80217c0:	4649      	mov	r1, r9
 80217c2:	9600      	str	r6, [sp, #0]
 80217c4:	f7ff fe20 	bl	8021408 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80217c8:	88a2      	ldrh	r2, [r4, #4]
 80217ca:	8823      	ldrh	r3, [r4, #0]
 80217cc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80217d0:	4413      	add	r3, r2
 80217d2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80217d6:	440a      	add	r2, r1
 80217d8:	b29b      	uxth	r3, r3
 80217da:	b292      	uxth	r2, r2
 80217dc:	b218      	sxth	r0, r3
 80217de:	b211      	sxth	r1, r2
 80217e0:	4288      	cmp	r0, r1
 80217e2:	dd13      	ble.n	802180c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 80217e4:	1a9b      	subs	r3, r3, r2
 80217e6:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80217ea:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 80217ee:	aa02      	add	r2, sp, #8
 80217f0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80217f4:	4649      	mov	r1, r9
 80217f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80217fa:	4643      	mov	r3, r8
 80217fc:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021800:	4638      	mov	r0, r7
 8021802:	9600      	str	r6, [sp, #0]
 8021804:	f8ad 501a 	strh.w	r5, [sp, #26]
 8021808:	f7ff fdfe 	bl	8021408 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802180c:	88e2      	ldrh	r2, [r4, #6]
 802180e:	8863      	ldrh	r3, [r4, #2]
 8021810:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021814:	4413      	add	r3, r2
 8021816:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802181a:	440a      	add	r2, r1
 802181c:	b29b      	uxth	r3, r3
 802181e:	b292      	uxth	r2, r2
 8021820:	b218      	sxth	r0, r3
 8021822:	b211      	sxth	r1, r2
 8021824:	4288      	cmp	r0, r1
 8021826:	f77f af56 	ble.w	80216d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 802182a:	f9b4 5000 	ldrsh.w	r5, [r4]
 802182e:	1a9b      	subs	r3, r3, r2
 8021830:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021834:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021838:	4643      	mov	r3, r8
 802183a:	f8ad 5018 	strh.w	r5, [sp, #24]
 802183e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021842:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021846:	9600      	str	r6, [sp, #0]
 8021848:	e779      	b.n	802173e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 802184a:	bf00      	nop
 802184c:	0802df58 	.word	0x0802df58
 8021850:	0802e696 	.word	0x0802e696
 8021854:	0802e257 	.word	0x0802e257

08021858 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021858:	b508      	push	{r3, lr}
 802185a:	b180      	cbz	r0, 802187e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 802185c:	2902      	cmp	r1, #2
 802185e:	d014      	beq.n	802188a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8021860:	2903      	cmp	r1, #3
 8021862:	d01d      	beq.n	80218a0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8021864:	2901      	cmp	r1, #1
 8021866:	d101      	bne.n	802186c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8021868:	2001      	movs	r0, #1
 802186a:	bd08      	pop	{r3, pc}
 802186c:	4b0e      	ldr	r3, [pc, #56]	; (80218a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 802186e:	8818      	ldrh	r0, [r3, #0]
 8021870:	b990      	cbnz	r0, 8021898 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021872:	4b0e      	ldr	r3, [pc, #56]	; (80218ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8021874:	2154      	movs	r1, #84	; 0x54
 8021876:	4a0e      	ldr	r2, [pc, #56]	; (80218b0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8021878:	480e      	ldr	r0, [pc, #56]	; (80218b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 802187a:	f007 ff2b 	bl	80296d4 <__assert_func>
 802187e:	2902      	cmp	r1, #2
 8021880:	d00e      	beq.n	80218a0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8021882:	2903      	cmp	r1, #3
 8021884:	d0f2      	beq.n	802186c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8021886:	2901      	cmp	r1, #1
 8021888:	d1ee      	bne.n	8021868 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 802188a:	4b07      	ldr	r3, [pc, #28]	; (80218a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 802188c:	8818      	ldrh	r0, [r3, #0]
 802188e:	2800      	cmp	r0, #0
 8021890:	d0ef      	beq.n	8021872 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8021892:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021896:	e7e8      	b.n	802186a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021898:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802189c:	4240      	negs	r0, r0
 802189e:	e7e4      	b.n	802186a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80218a0:	f04f 30ff 	mov.w	r0, #4294967295
 80218a4:	e7e1      	b.n	802186a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80218a6:	bf00      	nop
 80218a8:	2000593e 	.word	0x2000593e
 80218ac:	0802e289 	.word	0x0802e289
 80218b0:	0802e813 	.word	0x0802e813
 80218b4:	0802e2cb 	.word	0x0802e2cb

080218b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80218b8:	b508      	push	{r3, lr}
 80218ba:	b180      	cbz	r0, 80218de <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80218bc:	2902      	cmp	r1, #2
 80218be:	d014      	beq.n	80218ea <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 80218c0:	2903      	cmp	r1, #3
 80218c2:	d018      	beq.n	80218f6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80218c4:	2901      	cmp	r1, #1
 80218c6:	d001      	beq.n	80218cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80218c8:	2001      	movs	r0, #1
 80218ca:	e013      	b.n	80218f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80218cc:	4b0e      	ldr	r3, [pc, #56]	; (8021908 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80218ce:	8818      	ldrh	r0, [r3, #0]
 80218d0:	b970      	cbnz	r0, 80218f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 80218d2:	4b0e      	ldr	r3, [pc, #56]	; (802190c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 80218d4:	2154      	movs	r1, #84	; 0x54
 80218d6:	4a0e      	ldr	r2, [pc, #56]	; (8021910 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 80218d8:	480e      	ldr	r0, [pc, #56]	; (8021914 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 80218da:	f007 fefb 	bl	80296d4 <__assert_func>
 80218de:	2902      	cmp	r1, #2
 80218e0:	d009      	beq.n	80218f6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80218e2:	2903      	cmp	r1, #3
 80218e4:	d0f0      	beq.n	80218c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 80218e6:	2901      	cmp	r1, #1
 80218e8:	d1f0      	bne.n	80218cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80218ea:	f04f 30ff 	mov.w	r0, #4294967295
 80218ee:	e001      	b.n	80218f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80218f0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80218f4:	bd08      	pop	{r3, pc}
 80218f6:	4b04      	ldr	r3, [pc, #16]	; (8021908 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80218f8:	8818      	ldrh	r0, [r3, #0]
 80218fa:	2800      	cmp	r0, #0
 80218fc:	d0e9      	beq.n	80218d2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 80218fe:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021902:	4240      	negs	r0, r0
 8021904:	e7f6      	b.n	80218f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8021906:	bf00      	nop
 8021908:	2000593e 	.word	0x2000593e
 802190c:	0802e289 	.word	0x0802e289
 8021910:	0802e813 	.word	0x0802e813
 8021914:	0802e2cb 	.word	0x0802e2cb

08021918 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802191c:	b099      	sub	sp, #100	; 0x64
 802191e:	910b      	str	r1, [sp, #44]	; 0x2c
 8021920:	a914      	add	r1, sp, #80	; 0x50
 8021922:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8021926:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 802192a:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 802192e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8021932:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8021936:	e881 000c 	stmia.w	r1, {r2, r3}
 802193a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 802193e:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 8021942:	9308      	str	r3, [sp, #32]
 8021944:	910c      	str	r1, [sp, #48]	; 0x30
 8021946:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 802194a:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 802194e:	910d      	str	r1, [sp, #52]	; 0x34
 8021950:	f893 b00d 	ldrb.w	fp, [r3, #13]
 8021954:	7998      	ldrb	r0, [r3, #6]
 8021956:	ea4f 114b 	mov.w	r1, fp, lsl #5
 802195a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 802195e:	4301      	orrs	r1, r0
 8021960:	9109      	str	r1, [sp, #36]	; 0x24
 8021962:	f000 81e4 	beq.w	8021d2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8021966:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 802196a:	79d9      	ldrb	r1, [r3, #7]
 802196c:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 8021970:	ea51 0b0b 	orrs.w	fp, r1, fp
 8021974:	f000 81db 	beq.w	8021d2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8021978:	f993 3009 	ldrsb.w	r3, [r3, #9]
 802197c:	b29b      	uxth	r3, r3
 802197e:	2e00      	cmp	r6, #0
 8021980:	f000 80fd 	beq.w	8021b7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8021984:	1af6      	subs	r6, r6, r3
 8021986:	b2b6      	uxth	r6, r6
 8021988:	0433      	lsls	r3, r6, #16
 802198a:	d502      	bpl.n	8021992 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802198c:	1bad      	subs	r5, r5, r6
 802198e:	2600      	movs	r6, #0
 8021990:	b22d      	sxth	r5, r5
 8021992:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021996:	a814      	add	r0, sp, #80	; 0x50
 8021998:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 802199c:	428d      	cmp	r5, r1
 802199e:	b28b      	uxth	r3, r1
 80219a0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80219a4:	bfbf      	itttt	lt
 80219a6:	18f6      	addlt	r6, r6, r3
 80219a8:	1b75      	sublt	r5, r6, r5
 80219aa:	b2ae      	uxthlt	r6, r5
 80219ac:	460d      	movlt	r5, r1
 80219ae:	8891      	ldrh	r1, [r2, #4]
 80219b0:	440b      	add	r3, r1
 80219b2:	4629      	mov	r1, r5
 80219b4:	b21b      	sxth	r3, r3
 80219b6:	9311      	str	r3, [sp, #68]	; 0x44
 80219b8:	8853      	ldrh	r3, [r2, #2]
 80219ba:	88d2      	ldrh	r2, [r2, #6]
 80219bc:	4413      	add	r3, r2
 80219be:	9a08      	ldr	r2, [sp, #32]
 80219c0:	b21b      	sxth	r3, r3
 80219c2:	9310      	str	r3, [sp, #64]	; 0x40
 80219c4:	4bb1      	ldr	r3, [pc, #708]	; (8021c8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 80219c6:	f893 9000 	ldrb.w	r9, [r3]
 80219ca:	f109 3cff 	add.w	ip, r9, #4294967295
 80219ce:	f1dc 0300 	rsbs	r3, ip, #0
 80219d2:	eb43 030c 	adc.w	r3, r3, ip
 80219d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80219d8:	4653      	mov	r3, sl
 80219da:	f7f8 fbe0 	bl	801a19e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80219de:	4629      	mov	r1, r5
 80219e0:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80219e4:	4653      	mov	r3, sl
 80219e6:	9a08      	ldr	r2, [sp, #32]
 80219e8:	a814      	add	r0, sp, #80	; 0x50
 80219ea:	f7f8 fbf0 	bl	801a1ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80219ee:	a918      	add	r1, sp, #96	; 0x60
 80219f0:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80219f4:	a817      	add	r0, sp, #92	; 0x5c
 80219f6:	f7f8 fd4b 	bl	801a490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80219fa:	f1ba 0f00 	cmp.w	sl, #0
 80219fe:	f040 80c1 	bne.w	8021b84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 8021a02:	f1b9 0f01 	cmp.w	r9, #1
 8021a06:	f040 80c5 	bne.w	8021b94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 8021a0a:	2301      	movs	r3, #1
 8021a0c:	f1b8 0f01 	cmp.w	r8, #1
 8021a10:	fa03 f308 	lsl.w	r3, r3, r8
 8021a14:	f103 33ff 	add.w	r3, r3, #4294967295
 8021a18:	b2db      	uxtb	r3, r3
 8021a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8021a1c:	f000 80e5 	beq.w	8021bea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 8021a20:	f1b8 0f02 	cmp.w	r8, #2
 8021a24:	f000 80e4 	beq.w	8021bf0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8021a28:	f1b8 0f04 	cmp.w	r8, #4
 8021a2c:	bf15      	itete	ne
 8021a2e:	46c1      	movne	r9, r8
 8021a30:	f04f 0904 	moveq.w	r9, #4
 8021a34:	2301      	movne	r3, #1
 8021a36:	2311      	moveq	r3, #17
 8021a38:	9307      	str	r3, [sp, #28]
 8021a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a3c:	b153      	cbz	r3, 8021a54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8021a3e:	2408      	movs	r4, #8
 8021a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a42:	fb94 f3f9 	sdiv	r3, r4, r9
 8021a46:	1e5c      	subs	r4, r3, #1
 8021a48:	4414      	add	r4, r2
 8021a4a:	fb94 f4f3 	sdiv	r4, r4, r3
 8021a4e:	fb14 f403 	smulbb	r4, r4, r3
 8021a52:	b2a4      	uxth	r4, r4
 8021a54:	b906      	cbnz	r6, 8021a58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8021a56:	b16f      	cbz	r7, 8021a74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 8021a58:	fb07 6304 	mla	r3, r7, r4, r6
 8021a5c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021a5e:	4639      	mov	r1, r7
 8021a60:	fb08 f303 	mul.w	r3, r8, r3
 8021a64:	f003 0707 	and.w	r7, r3, #7
 8021a68:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8021a6c:	9328      	str	r3, [sp, #160]	; 0xa0
 8021a6e:	ebab 0301 	sub.w	r3, fp, r1
 8021a72:	930e      	str	r3, [sp, #56]	; 0x38
 8021a74:	4651      	mov	r1, sl
 8021a76:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021a78:	f7ff feee 	bl	8021858 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8021a7c:	4651      	mov	r1, sl
 8021a7e:	4683      	mov	fp, r0
 8021a80:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021a82:	f7ff ff19 	bl	80218b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8021a86:	9a08      	ldr	r2, [sp, #32]
 8021a88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021a8a:	4682      	mov	sl, r0
 8021a8c:	1a9b      	subs	r3, r3, r2
 8021a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021a90:	429a      	cmp	r2, r3
 8021a92:	bfa8      	it	ge
 8021a94:	461a      	movge	r2, r3
 8021a96:	2a00      	cmp	r2, #0
 8021a98:	9208      	str	r2, [sp, #32]
 8021a9a:	f340 8148 	ble.w	8021d2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8021a9e:	1bad      	subs	r5, r5, r6
 8021aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021aa2:	1b5d      	subs	r5, r3, r5
 8021aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021aa6:	429d      	cmp	r5, r3
 8021aa8:	bfd4      	ite	le
 8021aaa:	ebc6 0605 	rsble	r6, r6, r5
 8021aae:	ebc6 0603 	rsbgt	r6, r6, r3
 8021ab2:	2e00      	cmp	r6, #0
 8021ab4:	f340 813b 	ble.w	8021d2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8021ab8:	1ba4      	subs	r4, r4, r6
 8021aba:	fb09 f304 	mul.w	r3, r9, r4
 8021abe:	930e      	str	r3, [sp, #56]	; 0x38
 8021ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	f040 809d 	bne.w	8021c02 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 8021ac8:	4b71      	ldr	r3, [pc, #452]	; (8021c90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8021aca:	6818      	ldr	r0, [r3, #0]
 8021acc:	6803      	ldr	r3, [r0, #0]
 8021ace:	6a1b      	ldr	r3, [r3, #32]
 8021ad0:	4798      	blx	r3
 8021ad2:	4970      	ldr	r1, [pc, #448]	; (8021c94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8021ad4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8021ad8:	880c      	ldrh	r4, [r1, #0]
 8021ada:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8021ade:	fb04 1303 	mla	r3, r4, r3, r1
 8021ae2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8021ae8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021aea:	7819      	ldrb	r1, [r3, #0]
 8021aec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021aee:	4139      	asrs	r1, r7
 8021af0:	0a1b      	lsrs	r3, r3, #8
 8021af2:	b2c9      	uxtb	r1, r1
 8021af4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021af8:	930f      	str	r3, [sp, #60]	; 0x3c
 8021afa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021afc:	08db      	lsrs	r3, r3, #3
 8021afe:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021b02:	9310      	str	r3, [sp, #64]	; 0x40
 8021b04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021b06:	00db      	lsls	r3, r3, #3
 8021b08:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021b0c:	9311      	str	r3, [sp, #68]	; 0x44
 8021b0e:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8021b12:	fb0b ab16 	mls	fp, fp, r6, sl
 8021b16:	fb03 fa06 	mul.w	sl, r3, r6
 8021b1a:	930c      	str	r3, [sp, #48]	; 0x30
 8021b1c:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 8021b20:	9312      	str	r3, [sp, #72]	; 0x48
 8021b22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021b24:	b29b      	uxth	r3, r3
 8021b26:	9313      	str	r3, [sp, #76]	; 0x4c
 8021b28:	9b08      	ldr	r3, [sp, #32]
 8021b2a:	3b01      	subs	r3, #1
 8021b2c:	9308      	str	r3, [sp, #32]
 8021b2e:	3301      	adds	r3, #1
 8021b30:	f000 80c4 	beq.w	8021cbc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8021b34:	46b2      	mov	sl, r6
 8021b36:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021b3a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8021b3e:	f0c0 80ab 	bcc.w	8021c98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8021b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b44:	400b      	ands	r3, r1
 8021b46:	d00a      	beq.n	8021b5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 8021b48:	9807      	ldr	r0, [sp, #28]
 8021b4a:	fb13 f300 	smulbb	r3, r3, r0
 8021b4e:	2bfe      	cmp	r3, #254	; 0xfe
 8021b50:	dd59      	ble.n	8021c06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8021b52:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021b54:	28ff      	cmp	r0, #255	; 0xff
 8021b56:	d156      	bne.n	8021c06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8021b58:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021b5a:	f8ae 4000 	strh.w	r4, [lr]
 8021b5e:	4447      	add	r7, r8
 8021b60:	b2bf      	uxth	r7, r7
 8021b62:	2f07      	cmp	r7, #7
 8021b64:	bf89      	itett	hi
 8021b66:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8021b68:	fa41 f109 	asrls.w	r1, r1, r9
 8021b6c:	2700      	movhi	r7, #0
 8021b6e:	7859      	ldrbhi	r1, [r3, #1]
 8021b70:	bf8a      	itet	hi
 8021b72:	3301      	addhi	r3, #1
 8021b74:	b2c9      	uxtbls	r1, r1
 8021b76:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8021b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b7a:	449e      	add	lr, r3
 8021b7c:	e7dd      	b.n	8021b3a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8021b7e:	441d      	add	r5, r3
 8021b80:	b22d      	sxth	r5, r5
 8021b82:	e706      	b.n	8021992 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8021b84:	f1ba 0f01 	cmp.w	sl, #1
 8021b88:	f47f af3f 	bne.w	8021a0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8021b8c:	f1b9 0f01 	cmp.w	r9, #1
 8021b90:	f47f af3b 	bne.w	8021a0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8021b94:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8021c90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8021b98:	f8d9 0000 	ldr.w	r0, [r9]
 8021b9c:	6803      	ldr	r3, [r0, #0]
 8021b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ba0:	4798      	blx	r3
 8021ba2:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8021ba6:	464a      	mov	r2, r9
 8021ba8:	d006      	beq.n	8021bb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8021baa:	f1b8 0f04 	cmp.w	r8, #4
 8021bae:	d11a      	bne.n	8021be6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8021bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021bb2:	3300      	adds	r3, #0
 8021bb4:	bf18      	it	ne
 8021bb6:	2301      	movne	r3, #1
 8021bb8:	05c0      	lsls	r0, r0, #23
 8021bba:	f140 8088 	bpl.w	8021cce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8021bbe:	f1b8 0f08 	cmp.w	r8, #8
 8021bc2:	f040 8084 	bne.w	8021cce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8021bc6:	2b00      	cmp	r3, #0
 8021bc8:	bf14      	ite	ne
 8021bca:	2180      	movne	r1, #128	; 0x80
 8021bcc:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8021bd0:	2e00      	cmp	r6, #0
 8021bd2:	f040 80af 	bne.w	8021d34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 8021bd6:	2f00      	cmp	r7, #0
 8021bd8:	f000 8083 	beq.w	8021ce2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8021bdc:	23ff      	movs	r3, #255	; 0xff
 8021bde:	46c1      	mov	r9, r8
 8021be0:	930a      	str	r3, [sp, #40]	; 0x28
 8021be2:	2301      	movs	r3, #1
 8021be4:	e728      	b.n	8021a38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8021be6:	2300      	movs	r3, #0
 8021be8:	e7e6      	b.n	8021bb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8021bea:	46c1      	mov	r9, r8
 8021bec:	23ff      	movs	r3, #255	; 0xff
 8021bee:	e723      	b.n	8021a38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8021bf0:	46c1      	mov	r9, r8
 8021bf2:	2355      	movs	r3, #85	; 0x55
 8021bf4:	e720      	b.n	8021a38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8021bf6:	23ff      	movs	r3, #255	; 0xff
 8021bf8:	46c1      	mov	r9, r8
 8021bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8021bfc:	2301      	movs	r3, #1
 8021bfe:	9307      	str	r3, [sp, #28]
 8021c00:	e71d      	b.n	8021a3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8021c02:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021c04:	e765      	b.n	8021ad2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 8021c06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021c08:	f8be 5000 	ldrh.w	r5, [lr]
 8021c0c:	fb10 f303 	smulbb	r3, r0, r3
 8021c10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021c12:	122c      	asrs	r4, r5, #8
 8021c14:	b29b      	uxth	r3, r3
 8021c16:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021c1a:	1c58      	adds	r0, r3, #1
 8021c1c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021c20:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021c22:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021c26:	fa1f fc83 	uxth.w	ip, r3
 8021c2a:	43db      	mvns	r3, r3
 8021c2c:	fb10 f00c 	smulbb	r0, r0, ip
 8021c30:	b2db      	uxtb	r3, r3
 8021c32:	fb1c fb02 	smulbb	fp, ip, r2
 8021c36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021c38:	fb04 0403 	mla	r4, r4, r3, r0
 8021c3c:	10e8      	asrs	r0, r5, #3
 8021c3e:	fb1c fc02 	smulbb	ip, ip, r2
 8021c42:	00ed      	lsls	r5, r5, #3
 8021c44:	b2a4      	uxth	r4, r4
 8021c46:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021c4a:	b2ed      	uxtb	r5, r5
 8021c4c:	fb00 b003 	mla	r0, r0, r3, fp
 8021c50:	fb05 cc03 	mla	ip, r5, r3, ip
 8021c54:	1c63      	adds	r3, r4, #1
 8021c56:	b280      	uxth	r0, r0
 8021c58:	fa1f fc8c 	uxth.w	ip, ip
 8021c5c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021c60:	f10c 0b01 	add.w	fp, ip, #1
 8021c64:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021c68:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8021c6c:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8021c70:	ea44 040b 	orr.w	r4, r4, fp
 8021c74:	f100 0b01 	add.w	fp, r0, #1
 8021c78:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8021c7c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8021c80:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021c84:	ea44 040b 	orr.w	r4, r4, fp
 8021c88:	e767      	b.n	8021b5a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 8021c8a:	bf00      	nop
 8021c8c:	2000593c 	.word	0x2000593c
 8021c90:	20005944 	.word	0x20005944
 8021c94:	2000593e 	.word	0x2000593e
 8021c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c9a:	b153      	cbz	r3, 8021cb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8021c9c:	441f      	add	r7, r3
 8021c9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ca0:	b2bf      	uxth	r7, r7
 8021ca2:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8021ca6:	f007 0707 	and.w	r7, r7, #7
 8021caa:	7819      	ldrb	r1, [r3, #0]
 8021cac:	9328      	str	r3, [sp, #160]	; 0xa0
 8021cae:	4139      	asrs	r1, r7
 8021cb0:	b2c9      	uxtb	r1, r1
 8021cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021cb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021cb6:	441a      	add	r2, r3
 8021cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8021cba:	e735      	b.n	8021b28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 8021cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021cbe:	2b00      	cmp	r3, #0
 8021cc0:	d135      	bne.n	8021d2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8021cc2:	4b21      	ldr	r3, [pc, #132]	; (8021d48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 8021cc4:	6818      	ldr	r0, [r3, #0]
 8021cc6:	6803      	ldr	r3, [r0, #0]
 8021cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021cca:	4798      	blx	r3
 8021ccc:	e02f      	b.n	8021d2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8021cce:	2b00      	cmp	r3, #0
 8021cd0:	f43f ae9b 	beq.w	8021a0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8021cd4:	2e00      	cmp	r6, #0
 8021cd6:	f47f ae98 	bne.w	8021a0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8021cda:	2f00      	cmp	r7, #0
 8021cdc:	f47f ae95 	bne.w	8021a0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8021ce0:	2180      	movs	r1, #128	; 0x80
 8021ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ce4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021ce6:	18eb      	adds	r3, r5, r3
 8021ce8:	4283      	cmp	r3, r0
 8021cea:	f73f ae8e 	bgt.w	8021a0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8021cee:	9b08      	ldr	r3, [sp, #32]
 8021cf0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021cf2:	445b      	add	r3, fp
 8021cf4:	4283      	cmp	r3, r0
 8021cf6:	f73f ae88 	bgt.w	8021a0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8021cfa:	f1b8 0f08 	cmp.w	r8, #8
 8021cfe:	6810      	ldr	r0, [r2, #0]
 8021d00:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8021d04:	bf18      	it	ne
 8021d06:	3401      	addne	r4, #1
 8021d08:	6805      	ldr	r5, [r0, #0]
 8021d0a:	9105      	str	r1, [sp, #20]
 8021d0c:	bf18      	it	ne
 8021d0e:	f024 0401 	bicne.w	r4, r4, #1
 8021d12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021d14:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8021d18:	bf18      	it	ne
 8021d1a:	b2a4      	uxthne	r4, r4
 8021d1c:	9104      	str	r1, [sp, #16]
 8021d1e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021d20:	e9cd 4b00 	strd	r4, fp, [sp]
 8021d24:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8021d28:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021d2a:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8021d2c:	47a0      	blx	r4
 8021d2e:	b019      	add	sp, #100	; 0x64
 8021d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d36:	2b00      	cmp	r3, #0
 8021d38:	f47f af5d 	bne.w	8021bf6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8021d3c:	23ff      	movs	r3, #255	; 0xff
 8021d3e:	46c1      	mov	r9, r8
 8021d40:	930a      	str	r3, [sp, #40]	; 0x28
 8021d42:	2301      	movs	r3, #1
 8021d44:	9307      	str	r3, [sp, #28]
 8021d46:	e687      	b.n	8021a58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8021d48:	20005944 	.word	0x20005944

08021d4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8021d4c:	b538      	push	{r3, r4, r5, lr}
 8021d4e:	4c15      	ldr	r4, [pc, #84]	; (8021da4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8021d50:	4605      	mov	r5, r0
 8021d52:	7823      	ldrb	r3, [r4, #0]
 8021d54:	f3bf 8f5b 	dmb	ish
 8021d58:	07da      	lsls	r2, r3, #31
 8021d5a:	d40b      	bmi.n	8021d74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021d5c:	4620      	mov	r0, r4
 8021d5e:	f007 fc8c 	bl	802967a <__cxa_guard_acquire>
 8021d62:	b138      	cbz	r0, 8021d74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021d64:	4620      	mov	r0, r4
 8021d66:	f007 fc94 	bl	8029692 <__cxa_guard_release>
 8021d6a:	4a0f      	ldr	r2, [pc, #60]	; (8021da8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021d6c:	490f      	ldr	r1, [pc, #60]	; (8021dac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8021d6e:	4810      	ldr	r0, [pc, #64]	; (8021db0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021d70:	f007 fc7c 	bl	802966c <__aeabi_atexit>
 8021d74:	4c0f      	ldr	r4, [pc, #60]	; (8021db4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8021d76:	7823      	ldrb	r3, [r4, #0]
 8021d78:	f3bf 8f5b 	dmb	ish
 8021d7c:	07db      	lsls	r3, r3, #31
 8021d7e:	d40b      	bmi.n	8021d98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021d80:	4620      	mov	r0, r4
 8021d82:	f007 fc7a 	bl	802967a <__cxa_guard_acquire>
 8021d86:	b138      	cbz	r0, 8021d98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021d88:	4620      	mov	r0, r4
 8021d8a:	f007 fc82 	bl	8029692 <__cxa_guard_release>
 8021d8e:	4a06      	ldr	r2, [pc, #24]	; (8021da8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021d90:	4909      	ldr	r1, [pc, #36]	; (8021db8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8021d92:	480a      	ldr	r0, [pc, #40]	; (8021dbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021d94:	f007 fc6a 	bl	802966c <__aeabi_atexit>
 8021d98:	4b05      	ldr	r3, [pc, #20]	; (8021db0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021d9a:	612b      	str	r3, [r5, #16]
 8021d9c:	4b07      	ldr	r3, [pc, #28]	; (8021dbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021d9e:	616b      	str	r3, [r5, #20]
 8021da0:	bd38      	pop	{r3, r4, r5, pc}
 8021da2:	bf00      	nop
 8021da4:	20005a10 	.word	0x20005a10
 8021da8:	20000000 	.word	0x20000000
 8021dac:	0802034f 	.word	0x0802034f
 8021db0:	2000018c 	.word	0x2000018c
 8021db4:	20005a14 	.word	0x20005a14
 8021db8:	0802034d 	.word	0x0802034d
 8021dbc:	20000190 	.word	0x20000190

08021dc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8021dc0:	b538      	push	{r3, r4, r5, lr}
 8021dc2:	4c15      	ldr	r4, [pc, #84]	; (8021e18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8021dc4:	4605      	mov	r5, r0
 8021dc6:	7823      	ldrb	r3, [r4, #0]
 8021dc8:	f3bf 8f5b 	dmb	ish
 8021dcc:	07da      	lsls	r2, r3, #31
 8021dce:	d40b      	bmi.n	8021de8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021dd0:	4620      	mov	r0, r4
 8021dd2:	f007 fc52 	bl	802967a <__cxa_guard_acquire>
 8021dd6:	b138      	cbz	r0, 8021de8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021dd8:	4620      	mov	r0, r4
 8021dda:	f007 fc5a 	bl	8029692 <__cxa_guard_release>
 8021dde:	4a0f      	ldr	r2, [pc, #60]	; (8021e1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021de0:	490f      	ldr	r1, [pc, #60]	; (8021e20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8021de2:	4810      	ldr	r0, [pc, #64]	; (8021e24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021de4:	f007 fc42 	bl	802966c <__aeabi_atexit>
 8021de8:	4c0f      	ldr	r4, [pc, #60]	; (8021e28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8021dea:	7823      	ldrb	r3, [r4, #0]
 8021dec:	f3bf 8f5b 	dmb	ish
 8021df0:	07db      	lsls	r3, r3, #31
 8021df2:	d40b      	bmi.n	8021e0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021df4:	4620      	mov	r0, r4
 8021df6:	f007 fc40 	bl	802967a <__cxa_guard_acquire>
 8021dfa:	b138      	cbz	r0, 8021e0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021dfc:	4620      	mov	r0, r4
 8021dfe:	f007 fc48 	bl	8029692 <__cxa_guard_release>
 8021e02:	4a06      	ldr	r2, [pc, #24]	; (8021e1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021e04:	4909      	ldr	r1, [pc, #36]	; (8021e2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8021e06:	480a      	ldr	r0, [pc, #40]	; (8021e30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021e08:	f007 fc30 	bl	802966c <__aeabi_atexit>
 8021e0c:	4b05      	ldr	r3, [pc, #20]	; (8021e24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021e0e:	60ab      	str	r3, [r5, #8]
 8021e10:	4b07      	ldr	r3, [pc, #28]	; (8021e30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021e12:	60eb      	str	r3, [r5, #12]
 8021e14:	bd38      	pop	{r3, r4, r5, pc}
 8021e16:	bf00      	nop
 8021e18:	200059e8 	.word	0x200059e8
 8021e1c:	20000000 	.word	0x20000000
 8021e20:	08020353 	.word	0x08020353
 8021e24:	20000164 	.word	0x20000164
 8021e28:	200059ec 	.word	0x200059ec
 8021e2c:	08020351 	.word	0x08020351
 8021e30:	20000168 	.word	0x20000168

08021e34 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8021e34:	b510      	push	{r4, lr}
 8021e36:	4604      	mov	r4, r0
 8021e38:	f7ff ff88 	bl	8021d4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8021e3c:	4620      	mov	r0, r4
 8021e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e42:	f7ff bfbd 	b.w	8021dc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08021e48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021e48:	b538      	push	{r3, r4, r5, lr}
 8021e4a:	4c15      	ldr	r4, [pc, #84]	; (8021ea0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021e4c:	4605      	mov	r5, r0
 8021e4e:	7823      	ldrb	r3, [r4, #0]
 8021e50:	f3bf 8f5b 	dmb	ish
 8021e54:	07da      	lsls	r2, r3, #31
 8021e56:	d40b      	bmi.n	8021e70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021e58:	4620      	mov	r0, r4
 8021e5a:	f007 fc0e 	bl	802967a <__cxa_guard_acquire>
 8021e5e:	b138      	cbz	r0, 8021e70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021e60:	4620      	mov	r0, r4
 8021e62:	f007 fc16 	bl	8029692 <__cxa_guard_release>
 8021e66:	4a0f      	ldr	r2, [pc, #60]	; (8021ea4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021e68:	490f      	ldr	r1, [pc, #60]	; (8021ea8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8021e6a:	4810      	ldr	r0, [pc, #64]	; (8021eac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021e6c:	f007 fbfe 	bl	802966c <__aeabi_atexit>
 8021e70:	4c0f      	ldr	r4, [pc, #60]	; (8021eb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021e72:	7823      	ldrb	r3, [r4, #0]
 8021e74:	f3bf 8f5b 	dmb	ish
 8021e78:	07db      	lsls	r3, r3, #31
 8021e7a:	d40b      	bmi.n	8021e94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021e7c:	4620      	mov	r0, r4
 8021e7e:	f007 fbfc 	bl	802967a <__cxa_guard_acquire>
 8021e82:	b138      	cbz	r0, 8021e94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021e84:	4620      	mov	r0, r4
 8021e86:	f007 fc04 	bl	8029692 <__cxa_guard_release>
 8021e8a:	4a06      	ldr	r2, [pc, #24]	; (8021ea4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021e8c:	4909      	ldr	r1, [pc, #36]	; (8021eb4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021e8e:	480a      	ldr	r0, [pc, #40]	; (8021eb8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021e90:	f007 fbec 	bl	802966c <__aeabi_atexit>
 8021e94:	4b05      	ldr	r3, [pc, #20]	; (8021eac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021e96:	622b      	str	r3, [r5, #32]
 8021e98:	4b07      	ldr	r3, [pc, #28]	; (8021eb8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021e9a:	626b      	str	r3, [r5, #36]	; 0x24
 8021e9c:	bd38      	pop	{r3, r4, r5, pc}
 8021e9e:	bf00      	nop
 8021ea0:	20005a18 	.word	0x20005a18
 8021ea4:	20000000 	.word	0x20000000
 8021ea8:	08020347 	.word	0x08020347
 8021eac:	20000194 	.word	0x20000194
 8021eb0:	20005a1c 	.word	0x20005a1c
 8021eb4:	08020345 	.word	0x08020345
 8021eb8:	20000198 	.word	0x20000198

08021ebc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021ebc:	b538      	push	{r3, r4, r5, lr}
 8021ebe:	4c15      	ldr	r4, [pc, #84]	; (8021f14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021ec0:	4605      	mov	r5, r0
 8021ec2:	7823      	ldrb	r3, [r4, #0]
 8021ec4:	f3bf 8f5b 	dmb	ish
 8021ec8:	07da      	lsls	r2, r3, #31
 8021eca:	d40b      	bmi.n	8021ee4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021ecc:	4620      	mov	r0, r4
 8021ece:	f007 fbd4 	bl	802967a <__cxa_guard_acquire>
 8021ed2:	b138      	cbz	r0, 8021ee4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021ed4:	4620      	mov	r0, r4
 8021ed6:	f007 fbdc 	bl	8029692 <__cxa_guard_release>
 8021eda:	4a0f      	ldr	r2, [pc, #60]	; (8021f18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021edc:	490f      	ldr	r1, [pc, #60]	; (8021f1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021ede:	4810      	ldr	r0, [pc, #64]	; (8021f20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021ee0:	f007 fbc4 	bl	802966c <__aeabi_atexit>
 8021ee4:	4c0f      	ldr	r4, [pc, #60]	; (8021f24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8021ee6:	7823      	ldrb	r3, [r4, #0]
 8021ee8:	f3bf 8f5b 	dmb	ish
 8021eec:	07db      	lsls	r3, r3, #31
 8021eee:	d40b      	bmi.n	8021f08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021ef0:	4620      	mov	r0, r4
 8021ef2:	f007 fbc2 	bl	802967a <__cxa_guard_acquire>
 8021ef6:	b138      	cbz	r0, 8021f08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021ef8:	4620      	mov	r0, r4
 8021efa:	f007 fbca 	bl	8029692 <__cxa_guard_release>
 8021efe:	4a06      	ldr	r2, [pc, #24]	; (8021f18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021f00:	4909      	ldr	r1, [pc, #36]	; (8021f28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021f02:	480a      	ldr	r0, [pc, #40]	; (8021f2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021f04:	f007 fbb2 	bl	802966c <__aeabi_atexit>
 8021f08:	4b05      	ldr	r3, [pc, #20]	; (8021f20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021f0a:	61ab      	str	r3, [r5, #24]
 8021f0c:	4b07      	ldr	r3, [pc, #28]	; (8021f2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021f0e:	61eb      	str	r3, [r5, #28]
 8021f10:	bd38      	pop	{r3, r4, r5, pc}
 8021f12:	bf00      	nop
 8021f14:	200059f0 	.word	0x200059f0
 8021f18:	20000000 	.word	0x20000000
 8021f1c:	0802034b 	.word	0x0802034b
 8021f20:	2000016c 	.word	0x2000016c
 8021f24:	200059f4 	.word	0x200059f4
 8021f28:	08020349 	.word	0x08020349
 8021f2c:	20000170 	.word	0x20000170

08021f30 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8021f30:	b510      	push	{r4, lr}
 8021f32:	4604      	mov	r4, r0
 8021f34:	f7ff ff88 	bl	8021e48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021f38:	4620      	mov	r0, r4
 8021f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f3e:	f7ff bfbd 	b.w	8021ebc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021f44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021f44:	b538      	push	{r3, r4, r5, lr}
 8021f46:	4c15      	ldr	r4, [pc, #84]	; (8021f9c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021f48:	4605      	mov	r5, r0
 8021f4a:	7823      	ldrb	r3, [r4, #0]
 8021f4c:	f3bf 8f5b 	dmb	ish
 8021f50:	07da      	lsls	r2, r3, #31
 8021f52:	d40b      	bmi.n	8021f6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021f54:	4620      	mov	r0, r4
 8021f56:	f007 fb90 	bl	802967a <__cxa_guard_acquire>
 8021f5a:	b138      	cbz	r0, 8021f6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021f5c:	4620      	mov	r0, r4
 8021f5e:	f007 fb98 	bl	8029692 <__cxa_guard_release>
 8021f62:	4a0f      	ldr	r2, [pc, #60]	; (8021fa0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021f64:	490f      	ldr	r1, [pc, #60]	; (8021fa4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021f66:	4810      	ldr	r0, [pc, #64]	; (8021fa8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021f68:	f007 fb80 	bl	802966c <__aeabi_atexit>
 8021f6c:	4c0f      	ldr	r4, [pc, #60]	; (8021fac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021f6e:	7823      	ldrb	r3, [r4, #0]
 8021f70:	f3bf 8f5b 	dmb	ish
 8021f74:	07db      	lsls	r3, r3, #31
 8021f76:	d40b      	bmi.n	8021f90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021f78:	4620      	mov	r0, r4
 8021f7a:	f007 fb7e 	bl	802967a <__cxa_guard_acquire>
 8021f7e:	b138      	cbz	r0, 8021f90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021f80:	4620      	mov	r0, r4
 8021f82:	f007 fb86 	bl	8029692 <__cxa_guard_release>
 8021f86:	4a06      	ldr	r2, [pc, #24]	; (8021fa0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021f88:	4909      	ldr	r1, [pc, #36]	; (8021fb0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021f8a:	480a      	ldr	r0, [pc, #40]	; (8021fb4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021f8c:	f007 fb6e 	bl	802966c <__aeabi_atexit>
 8021f90:	4b05      	ldr	r3, [pc, #20]	; (8021fa8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021f92:	632b      	str	r3, [r5, #48]	; 0x30
 8021f94:	4b07      	ldr	r3, [pc, #28]	; (8021fb4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021f96:	636b      	str	r3, [r5, #52]	; 0x34
 8021f98:	bd38      	pop	{r3, r4, r5, pc}
 8021f9a:	bf00      	nop
 8021f9c:	20005a28 	.word	0x20005a28
 8021fa0:	20000000 	.word	0x20000000
 8021fa4:	0802033f 	.word	0x0802033f
 8021fa8:	200001a4 	.word	0x200001a4
 8021fac:	20005a2c 	.word	0x20005a2c
 8021fb0:	0802033d 	.word	0x0802033d
 8021fb4:	200001a8 	.word	0x200001a8

08021fb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021fb8:	b538      	push	{r3, r4, r5, lr}
 8021fba:	4c15      	ldr	r4, [pc, #84]	; (8022010 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021fbc:	4605      	mov	r5, r0
 8021fbe:	7823      	ldrb	r3, [r4, #0]
 8021fc0:	f3bf 8f5b 	dmb	ish
 8021fc4:	07da      	lsls	r2, r3, #31
 8021fc6:	d40b      	bmi.n	8021fe0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021fc8:	4620      	mov	r0, r4
 8021fca:	f007 fb56 	bl	802967a <__cxa_guard_acquire>
 8021fce:	b138      	cbz	r0, 8021fe0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021fd0:	4620      	mov	r0, r4
 8021fd2:	f007 fb5e 	bl	8029692 <__cxa_guard_release>
 8021fd6:	4a0f      	ldr	r2, [pc, #60]	; (8022014 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021fd8:	490f      	ldr	r1, [pc, #60]	; (8022018 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8021fda:	4810      	ldr	r0, [pc, #64]	; (802201c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021fdc:	f007 fb46 	bl	802966c <__aeabi_atexit>
 8021fe0:	4c0f      	ldr	r4, [pc, #60]	; (8022020 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021fe2:	7823      	ldrb	r3, [r4, #0]
 8021fe4:	f3bf 8f5b 	dmb	ish
 8021fe8:	07db      	lsls	r3, r3, #31
 8021fea:	d40b      	bmi.n	8022004 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021fec:	4620      	mov	r0, r4
 8021fee:	f007 fb44 	bl	802967a <__cxa_guard_acquire>
 8021ff2:	b138      	cbz	r0, 8022004 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021ff4:	4620      	mov	r0, r4
 8021ff6:	f007 fb4c 	bl	8029692 <__cxa_guard_release>
 8021ffa:	4a06      	ldr	r2, [pc, #24]	; (8022014 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021ffc:	4909      	ldr	r1, [pc, #36]	; (8022024 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021ffe:	480a      	ldr	r0, [pc, #40]	; (8022028 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022000:	f007 fb34 	bl	802966c <__aeabi_atexit>
 8022004:	4b05      	ldr	r3, [pc, #20]	; (802201c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022006:	62ab      	str	r3, [r5, #40]	; 0x28
 8022008:	4b07      	ldr	r3, [pc, #28]	; (8022028 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802200a:	62eb      	str	r3, [r5, #44]	; 0x2c
 802200c:	bd38      	pop	{r3, r4, r5, pc}
 802200e:	bf00      	nop
 8022010:	200059f8 	.word	0x200059f8
 8022014:	20000000 	.word	0x20000000
 8022018:	08020343 	.word	0x08020343
 802201c:	20000174 	.word	0x20000174
 8022020:	200059fc 	.word	0x200059fc
 8022024:	08020341 	.word	0x08020341
 8022028:	20000178 	.word	0x20000178

0802202c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 802202c:	b510      	push	{r4, lr}
 802202e:	4604      	mov	r4, r0
 8022030:	f7ff ff88 	bl	8021f44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8022034:	4620      	mov	r0, r4
 8022036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802203a:	f7ff bfbd 	b.w	8021fb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022040 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8022040:	b538      	push	{r3, r4, r5, lr}
 8022042:	4c15      	ldr	r4, [pc, #84]	; (8022098 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8022044:	4605      	mov	r5, r0
 8022046:	7823      	ldrb	r3, [r4, #0]
 8022048:	f3bf 8f5b 	dmb	ish
 802204c:	07da      	lsls	r2, r3, #31
 802204e:	d40b      	bmi.n	8022068 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022050:	4620      	mov	r0, r4
 8022052:	f007 fb12 	bl	802967a <__cxa_guard_acquire>
 8022056:	b138      	cbz	r0, 8022068 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022058:	4620      	mov	r0, r4
 802205a:	f007 fb1a 	bl	8029692 <__cxa_guard_release>
 802205e:	4a0f      	ldr	r2, [pc, #60]	; (802209c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022060:	490f      	ldr	r1, [pc, #60]	; (80220a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8022062:	4810      	ldr	r0, [pc, #64]	; (80220a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022064:	f007 fb02 	bl	802966c <__aeabi_atexit>
 8022068:	4c0f      	ldr	r4, [pc, #60]	; (80220a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802206a:	7823      	ldrb	r3, [r4, #0]
 802206c:	f3bf 8f5b 	dmb	ish
 8022070:	07db      	lsls	r3, r3, #31
 8022072:	d40b      	bmi.n	802208c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022074:	4620      	mov	r0, r4
 8022076:	f007 fb00 	bl	802967a <__cxa_guard_acquire>
 802207a:	b138      	cbz	r0, 802208c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802207c:	4620      	mov	r0, r4
 802207e:	f007 fb08 	bl	8029692 <__cxa_guard_release>
 8022082:	4a06      	ldr	r2, [pc, #24]	; (802209c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022084:	4909      	ldr	r1, [pc, #36]	; (80220ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8022086:	480a      	ldr	r0, [pc, #40]	; (80220b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022088:	f007 faf0 	bl	802966c <__aeabi_atexit>
 802208c:	4b05      	ldr	r3, [pc, #20]	; (80220a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802208e:	652b      	str	r3, [r5, #80]	; 0x50
 8022090:	4b07      	ldr	r3, [pc, #28]	; (80220b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022092:	656b      	str	r3, [r5, #84]	; 0x54
 8022094:	bd38      	pop	{r3, r4, r5, pc}
 8022096:	bf00      	nop
 8022098:	20005a30 	.word	0x20005a30
 802209c:	20000000 	.word	0x20000000
 80220a0:	0802032f 	.word	0x0802032f
 80220a4:	200001ac 	.word	0x200001ac
 80220a8:	20005a34 	.word	0x20005a34
 80220ac:	0802032d 	.word	0x0802032d
 80220b0:	200001b0 	.word	0x200001b0

080220b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80220b4:	b538      	push	{r3, r4, r5, lr}
 80220b6:	4c15      	ldr	r4, [pc, #84]	; (802210c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80220b8:	4605      	mov	r5, r0
 80220ba:	7823      	ldrb	r3, [r4, #0]
 80220bc:	f3bf 8f5b 	dmb	ish
 80220c0:	07da      	lsls	r2, r3, #31
 80220c2:	d40b      	bmi.n	80220dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80220c4:	4620      	mov	r0, r4
 80220c6:	f007 fad8 	bl	802967a <__cxa_guard_acquire>
 80220ca:	b138      	cbz	r0, 80220dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80220cc:	4620      	mov	r0, r4
 80220ce:	f007 fae0 	bl	8029692 <__cxa_guard_release>
 80220d2:	4a0f      	ldr	r2, [pc, #60]	; (8022110 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80220d4:	490f      	ldr	r1, [pc, #60]	; (8022114 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80220d6:	4810      	ldr	r0, [pc, #64]	; (8022118 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80220d8:	f007 fac8 	bl	802966c <__aeabi_atexit>
 80220dc:	4c0f      	ldr	r4, [pc, #60]	; (802211c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80220de:	7823      	ldrb	r3, [r4, #0]
 80220e0:	f3bf 8f5b 	dmb	ish
 80220e4:	07db      	lsls	r3, r3, #31
 80220e6:	d40b      	bmi.n	8022100 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80220e8:	4620      	mov	r0, r4
 80220ea:	f007 fac6 	bl	802967a <__cxa_guard_acquire>
 80220ee:	b138      	cbz	r0, 8022100 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80220f0:	4620      	mov	r0, r4
 80220f2:	f007 face 	bl	8029692 <__cxa_guard_release>
 80220f6:	4a06      	ldr	r2, [pc, #24]	; (8022110 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80220f8:	4909      	ldr	r1, [pc, #36]	; (8022120 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80220fa:	480a      	ldr	r0, [pc, #40]	; (8022124 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80220fc:	f007 fab6 	bl	802966c <__aeabi_atexit>
 8022100:	4b05      	ldr	r3, [pc, #20]	; (8022118 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022102:	64ab      	str	r3, [r5, #72]	; 0x48
 8022104:	4b07      	ldr	r3, [pc, #28]	; (8022124 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022106:	64eb      	str	r3, [r5, #76]	; 0x4c
 8022108:	bd38      	pop	{r3, r4, r5, pc}
 802210a:	bf00      	nop
 802210c:	20005a38 	.word	0x20005a38
 8022110:	20000000 	.word	0x20000000
 8022114:	08020333 	.word	0x08020333
 8022118:	200001b4 	.word	0x200001b4
 802211c:	20005a3c 	.word	0x20005a3c
 8022120:	08020331 	.word	0x08020331
 8022124:	200001b8 	.word	0x200001b8

08022128 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022128:	b538      	push	{r3, r4, r5, lr}
 802212a:	4c15      	ldr	r4, [pc, #84]	; (8022180 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 802212c:	4605      	mov	r5, r0
 802212e:	7823      	ldrb	r3, [r4, #0]
 8022130:	f3bf 8f5b 	dmb	ish
 8022134:	07da      	lsls	r2, r3, #31
 8022136:	d40b      	bmi.n	8022150 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022138:	4620      	mov	r0, r4
 802213a:	f007 fa9e 	bl	802967a <__cxa_guard_acquire>
 802213e:	b138      	cbz	r0, 8022150 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022140:	4620      	mov	r0, r4
 8022142:	f007 faa6 	bl	8029692 <__cxa_guard_release>
 8022146:	4a0f      	ldr	r2, [pc, #60]	; (8022184 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022148:	490f      	ldr	r1, [pc, #60]	; (8022188 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802214a:	4810      	ldr	r0, [pc, #64]	; (802218c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802214c:	f007 fa8e 	bl	802966c <__aeabi_atexit>
 8022150:	4c0f      	ldr	r4, [pc, #60]	; (8022190 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8022152:	7823      	ldrb	r3, [r4, #0]
 8022154:	f3bf 8f5b 	dmb	ish
 8022158:	07db      	lsls	r3, r3, #31
 802215a:	d40b      	bmi.n	8022174 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 802215c:	4620      	mov	r0, r4
 802215e:	f007 fa8c 	bl	802967a <__cxa_guard_acquire>
 8022162:	b138      	cbz	r0, 8022174 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022164:	4620      	mov	r0, r4
 8022166:	f007 fa94 	bl	8029692 <__cxa_guard_release>
 802216a:	4a06      	ldr	r2, [pc, #24]	; (8022184 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802216c:	4909      	ldr	r1, [pc, #36]	; (8022194 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802216e:	480a      	ldr	r0, [pc, #40]	; (8022198 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022170:	f007 fa7c 	bl	802966c <__aeabi_atexit>
 8022174:	4b05      	ldr	r3, [pc, #20]	; (802218c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022176:	642b      	str	r3, [r5, #64]	; 0x40
 8022178:	4b07      	ldr	r3, [pc, #28]	; (8022198 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802217a:	646b      	str	r3, [r5, #68]	; 0x44
 802217c:	bd38      	pop	{r3, r4, r5, pc}
 802217e:	bf00      	nop
 8022180:	20005a00 	.word	0x20005a00
 8022184:	20000000 	.word	0x20000000
 8022188:	08020337 	.word	0x08020337
 802218c:	2000017c 	.word	0x2000017c
 8022190:	20005a04 	.word	0x20005a04
 8022194:	08020335 	.word	0x08020335
 8022198:	20000180 	.word	0x20000180

0802219c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 802219c:	b538      	push	{r3, r4, r5, lr}
 802219e:	4c15      	ldr	r4, [pc, #84]	; (80221f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80221a0:	4605      	mov	r5, r0
 80221a2:	7823      	ldrb	r3, [r4, #0]
 80221a4:	f3bf 8f5b 	dmb	ish
 80221a8:	07da      	lsls	r2, r3, #31
 80221aa:	d40b      	bmi.n	80221c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80221ac:	4620      	mov	r0, r4
 80221ae:	f007 fa64 	bl	802967a <__cxa_guard_acquire>
 80221b2:	b138      	cbz	r0, 80221c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80221b4:	4620      	mov	r0, r4
 80221b6:	f007 fa6c 	bl	8029692 <__cxa_guard_release>
 80221ba:	4a0f      	ldr	r2, [pc, #60]	; (80221f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80221bc:	490f      	ldr	r1, [pc, #60]	; (80221fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80221be:	4810      	ldr	r0, [pc, #64]	; (8022200 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80221c0:	f007 fa54 	bl	802966c <__aeabi_atexit>
 80221c4:	4c0f      	ldr	r4, [pc, #60]	; (8022204 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80221c6:	7823      	ldrb	r3, [r4, #0]
 80221c8:	f3bf 8f5b 	dmb	ish
 80221cc:	07db      	lsls	r3, r3, #31
 80221ce:	d40b      	bmi.n	80221e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80221d0:	4620      	mov	r0, r4
 80221d2:	f007 fa52 	bl	802967a <__cxa_guard_acquire>
 80221d6:	b138      	cbz	r0, 80221e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80221d8:	4620      	mov	r0, r4
 80221da:	f007 fa5a 	bl	8029692 <__cxa_guard_release>
 80221de:	4a06      	ldr	r2, [pc, #24]	; (80221f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80221e0:	4909      	ldr	r1, [pc, #36]	; (8022208 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80221e2:	480a      	ldr	r0, [pc, #40]	; (802220c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80221e4:	f007 fa42 	bl	802966c <__aeabi_atexit>
 80221e8:	4b05      	ldr	r3, [pc, #20]	; (8022200 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80221ea:	63ab      	str	r3, [r5, #56]	; 0x38
 80221ec:	4b07      	ldr	r3, [pc, #28]	; (802220c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80221ee:	63eb      	str	r3, [r5, #60]	; 0x3c
 80221f0:	bd38      	pop	{r3, r4, r5, pc}
 80221f2:	bf00      	nop
 80221f4:	20005a20 	.word	0x20005a20
 80221f8:	20000000 	.word	0x20000000
 80221fc:	0802033b 	.word	0x0802033b
 8022200:	2000019c 	.word	0x2000019c
 8022204:	20005a24 	.word	0x20005a24
 8022208:	08020339 	.word	0x08020339
 802220c:	200001a0 	.word	0x200001a0

08022210 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8022210:	b510      	push	{r4, lr}
 8022212:	4604      	mov	r4, r0
 8022214:	f7ff ff14 	bl	8022040 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8022218:	4620      	mov	r0, r4
 802221a:	f7ff ff85 	bl	8022128 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 802221e:	4620      	mov	r0, r4
 8022220:	f7ff ff48 	bl	80220b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8022224:	4620      	mov	r0, r4
 8022226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802222a:	f7ff bfb7 	b.w	802219c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08022230 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022230:	b538      	push	{r3, r4, r5, lr}
 8022232:	4c15      	ldr	r4, [pc, #84]	; (8022288 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022234:	4605      	mov	r5, r0
 8022236:	7823      	ldrb	r3, [r4, #0]
 8022238:	f3bf 8f5b 	dmb	ish
 802223c:	07da      	lsls	r2, r3, #31
 802223e:	d40b      	bmi.n	8022258 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022240:	4620      	mov	r0, r4
 8022242:	f007 fa1a 	bl	802967a <__cxa_guard_acquire>
 8022246:	b138      	cbz	r0, 8022258 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022248:	4620      	mov	r0, r4
 802224a:	f007 fa22 	bl	8029692 <__cxa_guard_release>
 802224e:	4a0f      	ldr	r2, [pc, #60]	; (802228c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022250:	490f      	ldr	r1, [pc, #60]	; (8022290 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8022252:	4810      	ldr	r0, [pc, #64]	; (8022294 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022254:	f007 fa0a 	bl	802966c <__aeabi_atexit>
 8022258:	4c0f      	ldr	r4, [pc, #60]	; (8022298 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802225a:	7823      	ldrb	r3, [r4, #0]
 802225c:	f3bf 8f5b 	dmb	ish
 8022260:	07db      	lsls	r3, r3, #31
 8022262:	d40b      	bmi.n	802227c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022264:	4620      	mov	r0, r4
 8022266:	f007 fa08 	bl	802967a <__cxa_guard_acquire>
 802226a:	b138      	cbz	r0, 802227c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802226c:	4620      	mov	r0, r4
 802226e:	f007 fa10 	bl	8029692 <__cxa_guard_release>
 8022272:	4a06      	ldr	r2, [pc, #24]	; (802228c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022274:	4909      	ldr	r1, [pc, #36]	; (802229c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8022276:	480a      	ldr	r0, [pc, #40]	; (80222a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022278:	f007 f9f8 	bl	802966c <__aeabi_atexit>
 802227c:	4b05      	ldr	r3, [pc, #20]	; (8022294 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802227e:	662b      	str	r3, [r5, #96]	; 0x60
 8022280:	4b07      	ldr	r3, [pc, #28]	; (80222a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022282:	666b      	str	r3, [r5, #100]	; 0x64
 8022284:	bd38      	pop	{r3, r4, r5, pc}
 8022286:	bf00      	nop
 8022288:	20005a08 	.word	0x20005a08
 802228c:	20000000 	.word	0x20000000
 8022290:	08020327 	.word	0x08020327
 8022294:	20000184 	.word	0x20000184
 8022298:	20005a0c 	.word	0x20005a0c
 802229c:	08020325 	.word	0x08020325
 80222a0:	20000188 	.word	0x20000188

080222a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80222a4:	b538      	push	{r3, r4, r5, lr}
 80222a6:	4c15      	ldr	r4, [pc, #84]	; (80222fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80222a8:	4605      	mov	r5, r0
 80222aa:	7823      	ldrb	r3, [r4, #0]
 80222ac:	f3bf 8f5b 	dmb	ish
 80222b0:	07da      	lsls	r2, r3, #31
 80222b2:	d40b      	bmi.n	80222cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80222b4:	4620      	mov	r0, r4
 80222b6:	f007 f9e0 	bl	802967a <__cxa_guard_acquire>
 80222ba:	b138      	cbz	r0, 80222cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80222bc:	4620      	mov	r0, r4
 80222be:	f007 f9e8 	bl	8029692 <__cxa_guard_release>
 80222c2:	4a0f      	ldr	r2, [pc, #60]	; (8022300 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80222c4:	490f      	ldr	r1, [pc, #60]	; (8022304 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80222c6:	4810      	ldr	r0, [pc, #64]	; (8022308 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80222c8:	f007 f9d0 	bl	802966c <__aeabi_atexit>
 80222cc:	4c0f      	ldr	r4, [pc, #60]	; (802230c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80222ce:	7823      	ldrb	r3, [r4, #0]
 80222d0:	f3bf 8f5b 	dmb	ish
 80222d4:	07db      	lsls	r3, r3, #31
 80222d6:	d40b      	bmi.n	80222f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80222d8:	4620      	mov	r0, r4
 80222da:	f007 f9ce 	bl	802967a <__cxa_guard_acquire>
 80222de:	b138      	cbz	r0, 80222f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80222e0:	4620      	mov	r0, r4
 80222e2:	f007 f9d6 	bl	8029692 <__cxa_guard_release>
 80222e6:	4a06      	ldr	r2, [pc, #24]	; (8022300 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80222e8:	4909      	ldr	r1, [pc, #36]	; (8022310 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80222ea:	480a      	ldr	r0, [pc, #40]	; (8022314 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80222ec:	f007 f9be 	bl	802966c <__aeabi_atexit>
 80222f0:	4b05      	ldr	r3, [pc, #20]	; (8022308 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80222f2:	65ab      	str	r3, [r5, #88]	; 0x58
 80222f4:	4b07      	ldr	r3, [pc, #28]	; (8022314 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80222f6:	65eb      	str	r3, [r5, #92]	; 0x5c
 80222f8:	bd38      	pop	{r3, r4, r5, pc}
 80222fa:	bf00      	nop
 80222fc:	200059e0 	.word	0x200059e0
 8022300:	20000000 	.word	0x20000000
 8022304:	0802032b 	.word	0x0802032b
 8022308:	2000015c 	.word	0x2000015c
 802230c:	200059e4 	.word	0x200059e4
 8022310:	08020329 	.word	0x08020329
 8022314:	20000160 	.word	0x20000160

08022318 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8022318:	b510      	push	{r4, lr}
 802231a:	4604      	mov	r4, r0
 802231c:	f7ff ff88 	bl	8022230 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022320:	4620      	mov	r0, r4
 8022322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022326:	f7ff bfbd 	b.w	80222a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0802232c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 802232c:	b538      	push	{r3, r4, r5, lr}
 802232e:	4c15      	ldr	r4, [pc, #84]	; (8022384 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022330:	4605      	mov	r5, r0
 8022332:	7823      	ldrb	r3, [r4, #0]
 8022334:	f3bf 8f5b 	dmb	ish
 8022338:	07da      	lsls	r2, r3, #31
 802233a:	d40b      	bmi.n	8022354 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802233c:	4620      	mov	r0, r4
 802233e:	f007 f99c 	bl	802967a <__cxa_guard_acquire>
 8022342:	b138      	cbz	r0, 8022354 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022344:	4620      	mov	r0, r4
 8022346:	f007 f9a4 	bl	8029692 <__cxa_guard_release>
 802234a:	4a0f      	ldr	r2, [pc, #60]	; (8022388 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802234c:	490f      	ldr	r1, [pc, #60]	; (802238c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802234e:	4810      	ldr	r0, [pc, #64]	; (8022390 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022350:	f007 f98c 	bl	802966c <__aeabi_atexit>
 8022354:	4c0f      	ldr	r4, [pc, #60]	; (8022394 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022356:	7823      	ldrb	r3, [r4, #0]
 8022358:	f3bf 8f5b 	dmb	ish
 802235c:	07db      	lsls	r3, r3, #31
 802235e:	d40b      	bmi.n	8022378 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022360:	4620      	mov	r0, r4
 8022362:	f007 f98a 	bl	802967a <__cxa_guard_acquire>
 8022366:	b138      	cbz	r0, 8022378 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022368:	4620      	mov	r0, r4
 802236a:	f007 f992 	bl	8029692 <__cxa_guard_release>
 802236e:	4a06      	ldr	r2, [pc, #24]	; (8022388 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022370:	4909      	ldr	r1, [pc, #36]	; (8022398 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022372:	480a      	ldr	r0, [pc, #40]	; (802239c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022374:	f007 f97a 	bl	802966c <__aeabi_atexit>
 8022378:	4b05      	ldr	r3, [pc, #20]	; (8022390 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802237a:	672b      	str	r3, [r5, #112]	; 0x70
 802237c:	4b07      	ldr	r3, [pc, #28]	; (802239c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802237e:	676b      	str	r3, [r5, #116]	; 0x74
 8022380:	bd38      	pop	{r3, r4, r5, pc}
 8022382:	bf00      	nop
 8022384:	200059d8 	.word	0x200059d8
 8022388:	20000000 	.word	0x20000000
 802238c:	0802031f 	.word	0x0802031f
 8022390:	20000154 	.word	0x20000154
 8022394:	200059dc 	.word	0x200059dc
 8022398:	0802031d 	.word	0x0802031d
 802239c:	20000158 	.word	0x20000158

080223a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80223a0:	b538      	push	{r3, r4, r5, lr}
 80223a2:	4c15      	ldr	r4, [pc, #84]	; (80223f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80223a4:	4605      	mov	r5, r0
 80223a6:	7823      	ldrb	r3, [r4, #0]
 80223a8:	f3bf 8f5b 	dmb	ish
 80223ac:	07da      	lsls	r2, r3, #31
 80223ae:	d40b      	bmi.n	80223c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80223b0:	4620      	mov	r0, r4
 80223b2:	f007 f962 	bl	802967a <__cxa_guard_acquire>
 80223b6:	b138      	cbz	r0, 80223c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80223b8:	4620      	mov	r0, r4
 80223ba:	f007 f96a 	bl	8029692 <__cxa_guard_release>
 80223be:	4a0f      	ldr	r2, [pc, #60]	; (80223fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80223c0:	490f      	ldr	r1, [pc, #60]	; (8022400 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80223c2:	4810      	ldr	r0, [pc, #64]	; (8022404 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80223c4:	f007 f952 	bl	802966c <__aeabi_atexit>
 80223c8:	4c0f      	ldr	r4, [pc, #60]	; (8022408 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80223ca:	7823      	ldrb	r3, [r4, #0]
 80223cc:	f3bf 8f5b 	dmb	ish
 80223d0:	07db      	lsls	r3, r3, #31
 80223d2:	d40b      	bmi.n	80223ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80223d4:	4620      	mov	r0, r4
 80223d6:	f007 f950 	bl	802967a <__cxa_guard_acquire>
 80223da:	b138      	cbz	r0, 80223ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80223dc:	4620      	mov	r0, r4
 80223de:	f007 f958 	bl	8029692 <__cxa_guard_release>
 80223e2:	4a06      	ldr	r2, [pc, #24]	; (80223fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80223e4:	4909      	ldr	r1, [pc, #36]	; (802240c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80223e6:	480a      	ldr	r0, [pc, #40]	; (8022410 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80223e8:	f007 f940 	bl	802966c <__aeabi_atexit>
 80223ec:	4b05      	ldr	r3, [pc, #20]	; (8022404 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80223ee:	66ab      	str	r3, [r5, #104]	; 0x68
 80223f0:	4b07      	ldr	r3, [pc, #28]	; (8022410 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80223f2:	66eb      	str	r3, [r5, #108]	; 0x6c
 80223f4:	bd38      	pop	{r3, r4, r5, pc}
 80223f6:	bf00      	nop
 80223f8:	200059d0 	.word	0x200059d0
 80223fc:	20000000 	.word	0x20000000
 8022400:	08020323 	.word	0x08020323
 8022404:	2000014c 	.word	0x2000014c
 8022408:	200059d4 	.word	0x200059d4
 802240c:	08020321 	.word	0x08020321
 8022410:	20000150 	.word	0x20000150

08022414 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8022414:	b510      	push	{r4, lr}
 8022416:	4604      	mov	r4, r0
 8022418:	f7ff ff88 	bl	802232c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 802241c:	4620      	mov	r0, r4
 802241e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022422:	f7ff bfbd 	b.w	80223a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08022426 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8022426:	b510      	push	{r4, lr}
 8022428:	4604      	mov	r4, r0
 802242a:	f7ff fff3 	bl	8022414 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 802242e:	4620      	mov	r0, r4
 8022430:	f7ff ff72 	bl	8022318 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8022434:	4620      	mov	r0, r4
 8022436:	f7ff fdf9 	bl	802202c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 802243a:	4620      	mov	r0, r4
 802243c:	f7ff fcfa 	bl	8021e34 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8022440:	4620      	mov	r0, r4
 8022442:	f7ff fd75 	bl	8021f30 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8022446:	4620      	mov	r0, r4
 8022448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802244c:	f7ff bee0 	b.w	8022210 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08022450 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8022450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022454:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8022458:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802245c:	f1be 0f00 	cmp.w	lr, #0
 8022460:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8022464:	fb0e 4708 	mla	r7, lr, r8, r4
 8022468:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 802246c:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8022470:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8022474:	eb02 0a07 	add.w	sl, r2, r7
 8022478:	8808      	ldrh	r0, [r1, #0]
 802247a:	db37      	blt.n	80224ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 802247c:	45f3      	cmp	fp, lr
 802247e:	dd35      	ble.n	80224ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8022480:	2c00      	cmp	r4, #0
 8022482:	db31      	blt.n	80224e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022484:	45a0      	cmp	r8, r4
 8022486:	dd2f      	ble.n	80224e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022488:	5dd2      	ldrb	r2, [r2, r7]
 802248a:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 802248e:	1c62      	adds	r2, r4, #1
 8022490:	d42f      	bmi.n	80224f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022492:	4590      	cmp	r8, r2
 8022494:	dd2d      	ble.n	80224f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022496:	b366      	cbz	r6, 80224f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022498:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802249c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80224a0:	f11e 0e01 	adds.w	lr, lr, #1
 80224a4:	d429      	bmi.n	80224fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80224a6:	45f3      	cmp	fp, lr
 80224a8:	dd27      	ble.n	80224fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80224aa:	f1bc 0f00 	cmp.w	ip, #0
 80224ae:	f000 80a0 	beq.w	80225f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 80224b2:	2c00      	cmp	r4, #0
 80224b4:	db1f      	blt.n	80224f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80224b6:	45a0      	cmp	r8, r4
 80224b8:	dd1d      	ble.n	80224f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80224ba:	f81a 2008 	ldrb.w	r2, [sl, r8]
 80224be:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 80224c2:	3401      	adds	r4, #1
 80224c4:	d41c      	bmi.n	8022500 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 80224c6:	45a0      	cmp	r8, r4
 80224c8:	dd1a      	ble.n	8022500 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 80224ca:	b1de      	cbz	r6, 8022504 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 80224cc:	44d0      	add	r8, sl
 80224ce:	f898 2001 	ldrb.w	r2, [r8, #1]
 80224d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80224d6:	2e0f      	cmp	r6, #15
 80224d8:	d915      	bls.n	8022506 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 80224da:	4b49      	ldr	r3, [pc, #292]	; (8022600 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 80224dc:	f240 11ef 	movw	r1, #495	; 0x1ef
 80224e0:	4a48      	ldr	r2, [pc, #288]	; (8022604 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 80224e2:	4849      	ldr	r0, [pc, #292]	; (8022608 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 80224e4:	f007 f8f6 	bl	80296d4 <__assert_func>
 80224e8:	4681      	mov	r9, r0
 80224ea:	e7d0      	b.n	802248e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 80224ec:	4607      	mov	r7, r0
 80224ee:	4681      	mov	r9, r0
 80224f0:	e7d6      	b.n	80224a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80224f2:	4607      	mov	r7, r0
 80224f4:	e7d4      	b.n	80224a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80224f6:	4686      	mov	lr, r0
 80224f8:	e7e3      	b.n	80224c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 80224fa:	4603      	mov	r3, r0
 80224fc:	4686      	mov	lr, r0
 80224fe:	e7ea      	b.n	80224d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8022500:	4603      	mov	r3, r0
 8022502:	e7e8      	b.n	80224d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8022504:	4603      	mov	r3, r0
 8022506:	f1bc 0f0f 	cmp.w	ip, #15
 802250a:	d8e6      	bhi.n	80224da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 802250c:	fb16 f80c 	smulbb	r8, r6, ip
 8022510:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8022514:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022518:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802251c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022520:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8022524:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022528:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802252c:	ea44 0909 	orr.w	r9, r4, r9
 8022530:	f1cc 0410 	rsb	r4, ip, #16
 8022534:	041a      	lsls	r2, r3, #16
 8022536:	ea4a 0707 	orr.w	r7, sl, r7
 802253a:	1ba4      	subs	r4, r4, r6
 802253c:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8022540:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022544:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022548:	4377      	muls	r7, r6
 802254a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802254e:	4313      	orrs	r3, r2
 8022550:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8022554:	fb04 7409 	mla	r4, r4, r9, r7
 8022558:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 802255c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022560:	b2af      	uxth	r7, r5
 8022562:	fb08 4303 	mla	r3, r8, r3, r4
 8022566:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 802256a:	43ed      	mvns	r5, r5
 802256c:	10c6      	asrs	r6, r0, #3
 802256e:	4322      	orrs	r2, r4
 8022570:	b2ed      	uxtb	r5, r5
 8022572:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022576:	fb0c 3202 	mla	r2, ip, r2, r3
 802257a:	fb16 f605 	smulbb	r6, r6, r5
 802257e:	0d53      	lsrs	r3, r2, #21
 8022580:	0952      	lsrs	r2, r2, #5
 8022582:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022586:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802258a:	431a      	orrs	r2, r3
 802258c:	b293      	uxth	r3, r2
 802258e:	1202      	asrs	r2, r0, #8
 8022590:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022594:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022598:	00dc      	lsls	r4, r3, #3
 802259a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802259e:	fb12 f205 	smulbb	r2, r2, r5
 80225a2:	b2e4      	uxtb	r4, r4
 80225a4:	fb0c 2c07 	mla	ip, ip, r7, r2
 80225a8:	10da      	asrs	r2, r3, #3
 80225aa:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80225ae:	fa1f fc8c 	uxth.w	ip, ip
 80225b2:	fb02 6207 	mla	r2, r2, r7, r6
 80225b6:	f10c 0301 	add.w	r3, ip, #1
 80225ba:	b296      	uxth	r6, r2
 80225bc:	00c2      	lsls	r2, r0, #3
 80225be:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80225c2:	b2d2      	uxtb	r2, r2
 80225c4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80225c8:	fb12 f205 	smulbb	r2, r2, r5
 80225cc:	fb04 2207 	mla	r2, r4, r7, r2
 80225d0:	b292      	uxth	r2, r2
 80225d2:	1c50      	adds	r0, r2, #1
 80225d4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80225d8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80225dc:	4313      	orrs	r3, r2
 80225de:	1c72      	adds	r2, r6, #1
 80225e0:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80225e4:	0952      	lsrs	r2, r2, #5
 80225e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80225ea:	4313      	orrs	r3, r2
 80225ec:	800b      	strh	r3, [r1, #0]
 80225ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225f2:	2e0f      	cmp	r6, #15
 80225f4:	f63f af71 	bhi.w	80224da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80225f8:	4603      	mov	r3, r0
 80225fa:	4686      	mov	lr, r0
 80225fc:	e786      	b.n	802250c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 80225fe:	bf00      	nop
 8022600:	0802e1e2 	.word	0x0802e1e2
 8022604:	0802e84e 	.word	0x0802e84e
 8022608:	0802e2cb 	.word	0x0802e2cb

0802260c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022610:	ed2d 8b08 	vpush	{d8-d11}
 8022614:	b099      	sub	sp, #100	; 0x64
 8022616:	eeb0 aa40 	vmov.f32	s20, s0
 802261a:	eef0 9a60 	vmov.f32	s19, s1
 802261e:	9215      	str	r2, [sp, #84]	; 0x54
 8022620:	eeb0 9a41 	vmov.f32	s18, s2
 8022624:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022626:	eeb0 8a62 	vmov.f32	s16, s5
 802262a:	9309      	str	r3, [sp, #36]	; 0x24
 802262c:	eef0 8a43 	vmov.f32	s17, s6
 8022630:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8022634:	eef0 ba44 	vmov.f32	s23, s8
 8022638:	9016      	str	r0, [sp, #88]	; 0x58
 802263a:	eeb0 ba64 	vmov.f32	s22, s9
 802263e:	930d      	str	r3, [sp, #52]	; 0x34
 8022640:	eef0 aa45 	vmov.f32	s21, s10
 8022644:	6850      	ldr	r0, [r2, #4]
 8022646:	910c      	str	r1, [sp, #48]	; 0x30
 8022648:	6812      	ldr	r2, [r2, #0]
 802264a:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802264e:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8022652:	fb00 1303 	mla	r3, r0, r3, r1
 8022656:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 802265a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802265c:	681b      	ldr	r3, [r3, #0]
 802265e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022660:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022662:	685e      	ldr	r6, [r3, #4]
 8022664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022666:	3604      	adds	r6, #4
 8022668:	43db      	mvns	r3, r3
 802266a:	b2db      	uxtb	r3, r3
 802266c:	930a      	str	r3, [sp, #40]	; 0x28
 802266e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022670:	2b00      	cmp	r3, #0
 8022672:	dc03      	bgt.n	802267c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022676:	2b00      	cmp	r3, #0
 8022678:	f340 8226 	ble.w	8022ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802267c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802267e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022682:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022686:	1e48      	subs	r0, r1, #1
 8022688:	1e57      	subs	r7, r2, #1
 802268a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802268c:	2b00      	cmp	r3, #0
 802268e:	f340 80e4 	ble.w	802285a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8022692:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8022696:	ea4f 4325 	mov.w	r3, r5, asr #16
 802269a:	d406      	bmi.n	80226aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802269c:	4584      	cmp	ip, r0
 802269e:	da04      	bge.n	80226aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80226a0:	2b00      	cmp	r3, #0
 80226a2:	db02      	blt.n	80226aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80226a4:	42bb      	cmp	r3, r7
 80226a6:	f2c0 80d9 	blt.w	802285c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80226aa:	f11c 0c01 	adds.w	ip, ip, #1
 80226ae:	f100 80ca 	bmi.w	8022846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80226b2:	4561      	cmp	r1, ip
 80226b4:	f2c0 80c7 	blt.w	8022846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80226b8:	3301      	adds	r3, #1
 80226ba:	f100 80c4 	bmi.w	8022846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80226be:	429a      	cmp	r2, r3
 80226c0:	f2c0 80c1 	blt.w	8022846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80226c4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80226c8:	4647      	mov	r7, r8
 80226ca:	f1bb 0f00 	cmp.w	fp, #0
 80226ce:	f340 80e4 	ble.w	802289a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 80226d2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80226d4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80226d8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80226da:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80226de:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80226e2:	ea5f 422a 	movs.w	r2, sl, asr #16
 80226e6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80226ea:	689b      	ldr	r3, [r3, #8]
 80226ec:	f100 8122 	bmi.w	8022934 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 80226f0:	f103 39ff 	add.w	r9, r3, #4294967295
 80226f4:	454a      	cmp	r2, r9
 80226f6:	f280 811d 	bge.w	8022934 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 80226fa:	f1bc 0f00 	cmp.w	ip, #0
 80226fe:	f2c0 8119 	blt.w	8022934 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8022702:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022706:	45cc      	cmp	ip, r9
 8022708:	f280 8114 	bge.w	8022934 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 802270c:	b21b      	sxth	r3, r3
 802270e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022710:	fb0c 2203 	mla	r2, ip, r3, r2
 8022714:	eb04 0902 	add.w	r9, r4, r2
 8022718:	5ca2      	ldrb	r2, [r4, r2]
 802271a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 802271e:	2800      	cmp	r0, #0
 8022720:	f000 80ff 	beq.w	8022922 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022724:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022728:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802272c:	9211      	str	r2, [sp, #68]	; 0x44
 802272e:	b151      	cbz	r1, 8022746 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022730:	eb09 0203 	add.w	r2, r9, r3
 8022734:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022738:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802273c:	930f      	str	r3, [sp, #60]	; 0x3c
 802273e:	7853      	ldrb	r3, [r2, #1]
 8022740:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022744:	9312      	str	r3, [sp, #72]	; 0x48
 8022746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022748:	fb10 f201 	smulbb	r2, r0, r1
 802274c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802274e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022752:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022756:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 802275a:	10d2      	asrs	r2, r2, #3
 802275c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022760:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8022764:	ea4c 0c03 	orr.w	ip, ip, r3
 8022768:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802276a:	041b      	lsls	r3, r3, #16
 802276c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022770:	4323      	orrs	r3, r4
 8022772:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022774:	4353      	muls	r3, r2
 8022776:	fb09 330c 	mla	r3, r9, ip, r3
 802277a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802277e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022782:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022786:	ea4c 0e0e 	orr.w	lr, ip, lr
 802278a:	f1c1 0c10 	rsb	ip, r1, #16
 802278e:	ebac 0c00 	sub.w	ip, ip, r0
 8022792:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022796:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802279a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802279e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80227a0:	0418      	lsls	r0, r3, #16
 80227a2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80227a6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80227aa:	4318      	orrs	r0, r3
 80227ac:	fb02 c200 	mla	r2, r2, r0, ip
 80227b0:	f8b7 c000 	ldrh.w	ip, [r7]
 80227b4:	0d53      	lsrs	r3, r2, #21
 80227b6:	0952      	lsrs	r2, r2, #5
 80227b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80227bc:	ea4f 212c 	mov.w	r1, ip, asr #8
 80227c0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80227c4:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80227c8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80227cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80227d0:	431a      	orrs	r2, r3
 80227d2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80227d6:	fb11 f104 	smulbb	r1, r1, r4
 80227da:	fa5f fc8c 	uxtb.w	ip, ip
 80227de:	b292      	uxth	r2, r2
 80227e0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80227e4:	fb1c fc04 	smulbb	ip, ip, r4
 80227e8:	fb1e fe04 	smulbb	lr, lr, r4
 80227ec:	1210      	asrs	r0, r2, #8
 80227ee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80227f2:	fb00 1003 	mla	r0, r0, r3, r1
 80227f6:	10d1      	asrs	r1, r2, #3
 80227f8:	00d2      	lsls	r2, r2, #3
 80227fa:	b280      	uxth	r0, r0
 80227fc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022800:	b2d2      	uxtb	r2, r2
 8022802:	fb01 e103 	mla	r1, r1, r3, lr
 8022806:	fb02 c203 	mla	r2, r2, r3, ip
 802280a:	1c43      	adds	r3, r0, #1
 802280c:	b289      	uxth	r1, r1
 802280e:	b292      	uxth	r2, r2
 8022810:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022814:	f102 0c01 	add.w	ip, r2, #1
 8022818:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802281c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022820:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022824:	4313      	orrs	r3, r2
 8022826:	1c4a      	adds	r2, r1, #1
 8022828:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802282c:	0949      	lsrs	r1, r1, #5
 802282e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022832:	430b      	orrs	r3, r1
 8022834:	803b      	strh	r3, [r7, #0]
 8022836:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022838:	3702      	adds	r7, #2
 802283a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802283e:	449a      	add	sl, r3
 8022840:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022842:	441d      	add	r5, r3
 8022844:	e741      	b.n	80226ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022846:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022848:	f108 0802 	add.w	r8, r8, #2
 802284c:	449a      	add	sl, r3
 802284e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022850:	441d      	add	r5, r3
 8022852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022854:	3b01      	subs	r3, #1
 8022856:	9309      	str	r3, [sp, #36]	; 0x24
 8022858:	e717      	b.n	802268a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802285a:	d023      	beq.n	80228a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 802285c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802285e:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8022860:	3b01      	subs	r3, #1
 8022862:	fb00 a003 	mla	r0, r0, r3, sl
 8022866:	1400      	asrs	r0, r0, #16
 8022868:	f53f af2c 	bmi.w	80226c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802286c:	3901      	subs	r1, #1
 802286e:	4288      	cmp	r0, r1
 8022870:	f6bf af28 	bge.w	80226c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022874:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022876:	fb01 5303 	mla	r3, r1, r3, r5
 802287a:	141b      	asrs	r3, r3, #16
 802287c:	f53f af22 	bmi.w	80226c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022880:	3a01      	subs	r2, #1
 8022882:	4293      	cmp	r3, r2
 8022884:	f6bf af1e 	bge.w	80226c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022888:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802288c:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8022890:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8022894:	f1be 0f00 	cmp.w	lr, #0
 8022898:	dc6c      	bgt.n	8022974 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802289a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802289c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80228a0:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80228a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	f340 810e 	ble.w	8022ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 80228ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80228b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80228b2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80228b6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80228ba:	eef0 6a48 	vmov.f32	s13, s16
 80228be:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80228c2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80228c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228ca:	ee16 aa90 	vmov	sl, s13
 80228ce:	eef0 6a68 	vmov.f32	s13, s17
 80228d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228d6:	ee16 5a90 	vmov	r5, s13
 80228da:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80228de:	ee69 7a27 	vmul.f32	s15, s18, s15
 80228e2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80228e6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80228ea:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80228ee:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80228f2:	ee18 2a10 	vmov	r2, s16
 80228f6:	eeb0 8a47 	vmov.f32	s16, s14
 80228fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80228fe:	ee18 2a90 	vmov	r2, s17
 8022902:	932d      	str	r3, [sp, #180]	; 0xb4
 8022904:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022906:	eef0 8a67 	vmov.f32	s17, s15
 802290a:	fb92 f3f3 	sdiv	r3, r2, r3
 802290e:	932e      	str	r3, [sp, #184]	; 0xb8
 8022910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022912:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022914:	3b01      	subs	r3, #1
 8022916:	930c      	str	r3, [sp, #48]	; 0x30
 8022918:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802291a:	bf08      	it	eq
 802291c:	4613      	moveq	r3, r2
 802291e:	9309      	str	r3, [sp, #36]	; 0x24
 8022920:	e6a5      	b.n	802266e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022922:	2900      	cmp	r1, #0
 8022924:	f43f af0f 	beq.w	8022746 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022928:	f819 3003 	ldrb.w	r3, [r9, r3]
 802292c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022930:	930f      	str	r3, [sp, #60]	; 0x3c
 8022932:	e708      	b.n	8022746 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022934:	f112 0901 	adds.w	r9, r2, #1
 8022938:	f53f af7d 	bmi.w	8022836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802293c:	454b      	cmp	r3, r9
 802293e:	f6ff af7a 	blt.w	8022836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022942:	f11c 0901 	adds.w	r9, ip, #1
 8022946:	f53f af76 	bmi.w	8022836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802294a:	45ce      	cmp	lr, r9
 802294c:	f6ff af73 	blt.w	8022836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022950:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022952:	b21b      	sxth	r3, r3
 8022954:	9202      	str	r2, [sp, #8]
 8022956:	fa0f f28e 	sxth.w	r2, lr
 802295a:	9300      	str	r3, [sp, #0]
 802295c:	4633      	mov	r3, r6
 802295e:	9201      	str	r2, [sp, #4]
 8022960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022962:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022966:	e9cd c003 	strd	ip, r0, [sp, #12]
 802296a:	4639      	mov	r1, r7
 802296c:	9816      	ldr	r0, [sp, #88]	; 0x58
 802296e:	f7ff fd6f 	bl	8022450 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8022972:	e760      	b.n	8022836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022974:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022976:	ea4f 422a 	mov.w	r2, sl, asr #16
 802297a:	1429      	asrs	r1, r5, #16
 802297c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802297e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022982:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8022986:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802298a:	fb03 2101 	mla	r1, r3, r1, r2
 802298e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022990:	440a      	add	r2, r1
 8022992:	5c61      	ldrb	r1, [r4, r1]
 8022994:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8022998:	f1bc 0f00 	cmp.w	ip, #0
 802299c:	f000 808c 	beq.w	8022ab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80229a0:	7857      	ldrb	r7, [r2, #1]
 80229a2:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80229a6:	9413      	str	r4, [sp, #76]	; 0x4c
 80229a8:	b140      	cbz	r0, 80229bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80229aa:	18d7      	adds	r7, r2, r3
 80229ac:	5cd3      	ldrb	r3, [r2, r3]
 80229ae:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80229b2:	9310      	str	r3, [sp, #64]	; 0x40
 80229b4:	787b      	ldrb	r3, [r7, #1]
 80229b6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80229ba:	9314      	str	r3, [sp, #80]	; 0x50
 80229bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80229be:	fb1c f200 	smulbb	r2, ip, r0
 80229c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80229c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80229c8:	041f      	lsls	r7, r3, #16
 80229ca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80229ce:	10d2      	asrs	r2, r2, #3
 80229d0:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80229d4:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80229d8:	431f      	orrs	r7, r3
 80229da:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80229de:	9317      	str	r3, [sp, #92]	; 0x5c
 80229e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80229e2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80229e4:	041b      	lsls	r3, r3, #16
 80229e6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80229ea:	ea43 030b 	orr.w	r3, r3, fp
 80229ee:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80229f2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80229f6:	4353      	muls	r3, r2
 80229f8:	fb04 3707 	mla	r7, r4, r7, r3
 80229fc:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022a00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022a02:	ea43 0b01 	orr.w	fp, r3, r1
 8022a06:	f1c0 0110 	rsb	r1, r0, #16
 8022a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022a0c:	eba1 0c0c 	sub.w	ip, r1, ip
 8022a10:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022a14:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022a18:	fb0c 770b 	mla	r7, ip, fp, r7
 8022a1c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022a20:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8022a24:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022a28:	ea4c 0c0b 	orr.w	ip, ip, fp
 8022a2c:	fb02 770c 	mla	r7, r2, ip, r7
 8022a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022a32:	0d79      	lsrs	r1, r7, #21
 8022a34:	8812      	ldrh	r2, [r2, #0]
 8022a36:	097f      	lsrs	r7, r7, #5
 8022a38:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022a3c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022a40:	430f      	orrs	r7, r1
 8022a42:	1211      	asrs	r1, r2, #8
 8022a44:	b2bb      	uxth	r3, r7
 8022a46:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022a4a:	10d7      	asrs	r7, r2, #3
 8022a4c:	fb11 f104 	smulbb	r1, r1, r4
 8022a50:	1218      	asrs	r0, r3, #8
 8022a52:	00d2      	lsls	r2, r2, #3
 8022a54:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022a58:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022a5c:	fb17 f704 	smulbb	r7, r7, r4
 8022a60:	b2d2      	uxtb	r2, r2
 8022a62:	fb00 1009 	mla	r0, r0, r9, r1
 8022a66:	10d9      	asrs	r1, r3, #3
 8022a68:	fb12 f204 	smulbb	r2, r2, r4
 8022a6c:	00db      	lsls	r3, r3, #3
 8022a6e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022a72:	b280      	uxth	r0, r0
 8022a74:	b2db      	uxtb	r3, r3
 8022a76:	fb01 7109 	mla	r1, r1, r9, r7
 8022a7a:	fb03 2309 	mla	r3, r3, r9, r2
 8022a7e:	1c42      	adds	r2, r0, #1
 8022a80:	b289      	uxth	r1, r1
 8022a82:	b29b      	uxth	r3, r3
 8022a84:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022a88:	1c4f      	adds	r7, r1, #1
 8022a8a:	1c5a      	adds	r2, r3, #1
 8022a8c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8022a90:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022a94:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a9a:	0949      	lsrs	r1, r1, #5
 8022a9c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022aa0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022aa4:	4310      	orrs	r0, r2
 8022aa6:	4308      	orrs	r0, r1
 8022aa8:	f823 0b02 	strh.w	r0, [r3], #2
 8022aac:	930e      	str	r3, [sp, #56]	; 0x38
 8022aae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022ab0:	449a      	add	sl, r3
 8022ab2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022ab4:	441d      	add	r5, r3
 8022ab6:	e6ed      	b.n	8022894 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8022ab8:	2800      	cmp	r0, #0
 8022aba:	f43f af7f 	beq.w	80229bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8022abe:	5cd3      	ldrb	r3, [r2, r3]
 8022ac0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022ac4:	9310      	str	r3, [sp, #64]	; 0x40
 8022ac6:	e779      	b.n	80229bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8022ac8:	b019      	add	sp, #100	; 0x64
 8022aca:	ecbd 8b08 	vpop	{d8-d11}
 8022ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ad8:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8022adc:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8022ae0:	2e00      	cmp	r6, #0
 8022ae2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022ae6:	fb06 570e 	mla	r7, r6, lr, r5
 8022aea:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8022aee:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8022af2:	eb02 0807 	add.w	r8, r2, r7
 8022af6:	8808      	ldrh	r0, [r1, #0]
 8022af8:	db38      	blt.n	8022b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8022afa:	45b1      	cmp	r9, r6
 8022afc:	dd36      	ble.n	8022b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8022afe:	2d00      	cmp	r5, #0
 8022b00:	db32      	blt.n	8022b68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8022b02:	45ae      	cmp	lr, r5
 8022b04:	dd30      	ble.n	8022b68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8022b06:	5dd2      	ldrb	r2, [r2, r7]
 8022b08:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022b0c:	1c6a      	adds	r2, r5, #1
 8022b0e:	d430      	bmi.n	8022b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8022b10:	4596      	cmp	lr, r2
 8022b12:	dd2e      	ble.n	8022b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8022b14:	b36c      	cbz	r4, 8022b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8022b16:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022b1a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8022b1e:	3601      	adds	r6, #1
 8022b20:	d42b      	bmi.n	8022b7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8022b22:	45b1      	cmp	r9, r6
 8022b24:	dd29      	ble.n	8022b7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8022b26:	f1bc 0f00 	cmp.w	ip, #0
 8022b2a:	d028      	beq.n	8022b7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8022b2c:	2d00      	cmp	r5, #0
 8022b2e:	db22      	blt.n	8022b76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8022b30:	45ae      	cmp	lr, r5
 8022b32:	dd20      	ble.n	8022b76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8022b34:	f818 600e 	ldrb.w	r6, [r8, lr]
 8022b38:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8022b3c:	3501      	adds	r5, #1
 8022b3e:	d407      	bmi.n	8022b50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8022b40:	45ae      	cmp	lr, r5
 8022b42:	dd05      	ble.n	8022b50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8022b44:	b134      	cbz	r4, 8022b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022b46:	44c6      	add	lr, r8
 8022b48:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8022b4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8022b50:	2c0f      	cmp	r4, #15
 8022b52:	d802      	bhi.n	8022b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8022b54:	f1bc 0f0f 	cmp.w	ip, #15
 8022b58:	d914      	bls.n	8022b84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8022b5a:	4b26      	ldr	r3, [pc, #152]	; (8022bf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8022b5c:	f240 11ef 	movw	r1, #495	; 0x1ef
 8022b60:	4a25      	ldr	r2, [pc, #148]	; (8022bf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8022b62:	4826      	ldr	r0, [pc, #152]	; (8022bfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8022b64:	f006 fdb6 	bl	80296d4 <__assert_func>
 8022b68:	4607      	mov	r7, r0
 8022b6a:	e7cf      	b.n	8022b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8022b6c:	4602      	mov	r2, r0
 8022b6e:	4607      	mov	r7, r0
 8022b70:	e7d5      	b.n	8022b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8022b72:	4602      	mov	r2, r0
 8022b74:	e7d3      	b.n	8022b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8022b76:	4606      	mov	r6, r0
 8022b78:	e7e0      	b.n	8022b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8022b7a:	4606      	mov	r6, r0
 8022b7c:	e7e8      	b.n	8022b50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8022b7e:	2c0f      	cmp	r4, #15
 8022b80:	d8eb      	bhi.n	8022b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8022b82:	4606      	mov	r6, r0
 8022b84:	fb14 f30c 	smulbb	r3, r4, ip
 8022b88:	043d      	lsls	r5, r7, #16
 8022b8a:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8022b8e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022b92:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8022b96:	10db      	asrs	r3, r3, #3
 8022b98:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022b9c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022ba0:	432f      	orrs	r7, r5
 8022ba2:	f1cc 0510 	rsb	r5, ip, #16
 8022ba6:	ea4e 0202 	orr.w	r2, lr, r2
 8022baa:	1b2d      	subs	r5, r5, r4
 8022bac:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8022bb0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8022bb4:	4354      	muls	r4, r2
 8022bb6:	fb05 4507 	mla	r5, r5, r7, r4
 8022bba:	0404      	lsls	r4, r0, #16
 8022bbc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022bc0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022bc4:	4320      	orrs	r0, r4
 8022bc6:	fb03 5400 	mla	r4, r3, r0, r5
 8022bca:	0430      	lsls	r0, r6, #16
 8022bcc:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8022bd0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022bd4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022bd8:	4330      	orrs	r0, r6
 8022bda:	fb03 4000 	mla	r0, r3, r0, r4
 8022bde:	0d43      	lsrs	r3, r0, #21
 8022be0:	0940      	lsrs	r0, r0, #5
 8022be2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022be6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022bea:	4318      	orrs	r0, r3
 8022bec:	8008      	strh	r0, [r1, #0]
 8022bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022bf2:	bf00      	nop
 8022bf4:	0802e1e2 	.word	0x0802e1e2
 8022bf8:	0802e84e 	.word	0x0802e84e
 8022bfc:	0802e2cb 	.word	0x0802e2cb

08022c00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c04:	ed2d 8b0a 	vpush	{d8-d12}
 8022c08:	b093      	sub	sp, #76	; 0x4c
 8022c0a:	eeb0 aa40 	vmov.f32	s20, s0
 8022c0e:	eef0 9a60 	vmov.f32	s19, s1
 8022c12:	920f      	str	r2, [sp, #60]	; 0x3c
 8022c14:	eeb0 9a41 	vmov.f32	s18, s2
 8022c18:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022c1a:	eeb0 8a62 	vmov.f32	s16, s5
 8022c1e:	9010      	str	r0, [sp, #64]	; 0x40
 8022c20:	eef0 8a43 	vmov.f32	s17, s6
 8022c24:	6850      	ldr	r0, [r2, #4]
 8022c26:	eeb0 ca44 	vmov.f32	s24, s8
 8022c2a:	9108      	str	r1, [sp, #32]
 8022c2c:	eef0 ba64 	vmov.f32	s23, s9
 8022c30:	9306      	str	r3, [sp, #24]
 8022c32:	eeb0 ba45 	vmov.f32	s22, s10
 8022c36:	6812      	ldr	r2, [r2, #0]
 8022c38:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8022c3c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022c40:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8022c44:	fb00 1303 	mla	r3, r0, r3, r1
 8022c48:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022c4c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022c4e:	681b      	ldr	r3, [r3, #0]
 8022c50:	9307      	str	r3, [sp, #28]
 8022c52:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022c54:	685f      	ldr	r7, [r3, #4]
 8022c56:	3704      	adds	r7, #4
 8022c58:	9b08      	ldr	r3, [sp, #32]
 8022c5a:	2b00      	cmp	r3, #0
 8022c5c:	dc03      	bgt.n	8022c66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c60:	2b00      	cmp	r3, #0
 8022c62:	f340 81b2 	ble.w	8022fca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8022c66:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022c68:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c6c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022c70:	1e48      	subs	r0, r1, #1
 8022c72:	f102 3cff 	add.w	ip, r2, #4294967295
 8022c76:	9b06      	ldr	r3, [sp, #24]
 8022c78:	2b00      	cmp	r3, #0
 8022c7a:	f340 80a9 	ble.w	8022dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8022c7e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022c82:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022c86:	d406      	bmi.n	8022c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022c88:	4586      	cmp	lr, r0
 8022c8a:	da04      	bge.n	8022c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022c8c:	2b00      	cmp	r3, #0
 8022c8e:	db02      	blt.n	8022c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022c90:	4563      	cmp	r3, ip
 8022c92:	f2c0 809e 	blt.w	8022dd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8022c96:	f11e 0e01 	adds.w	lr, lr, #1
 8022c9a:	f100 808f 	bmi.w	8022dbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8022c9e:	4571      	cmp	r1, lr
 8022ca0:	f2c0 808c 	blt.w	8022dbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8022ca4:	3301      	adds	r3, #1
 8022ca6:	f100 8089 	bmi.w	8022dbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8022caa:	429a      	cmp	r2, r3
 8022cac:	f2c0 8086 	blt.w	8022dbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8022cb0:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022cb4:	46c8      	mov	r8, r9
 8022cb6:	f1bb 0f00 	cmp.w	fp, #0
 8022cba:	f340 80a6 	ble.w	8022e0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8022cbe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022cc0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022cc4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022cc6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022cca:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022cce:	1422      	asrs	r2, r4, #16
 8022cd0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022cd4:	689b      	ldr	r3, [r3, #8]
 8022cd6:	f100 80e3 	bmi.w	8022ea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022cda:	f103 3aff 	add.w	sl, r3, #4294967295
 8022cde:	4552      	cmp	r2, sl
 8022ce0:	f280 80de 	bge.w	8022ea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022ce4:	f1bc 0f00 	cmp.w	ip, #0
 8022ce8:	f2c0 80da 	blt.w	8022ea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022cec:	f10e 3aff 	add.w	sl, lr, #4294967295
 8022cf0:	45d4      	cmp	ip, sl
 8022cf2:	f280 80d5 	bge.w	8022ea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022cf6:	b21b      	sxth	r3, r3
 8022cf8:	9d07      	ldr	r5, [sp, #28]
 8022cfa:	fb0c 2203 	mla	r2, ip, r3, r2
 8022cfe:	eb05 0a02 	add.w	sl, r5, r2
 8022d02:	5caa      	ldrb	r2, [r5, r2]
 8022d04:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8022d08:	2800      	cmp	r0, #0
 8022d0a:	f000 80c0 	beq.w	8022e8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8022d0e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022d12:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022d16:	920b      	str	r2, [sp, #44]	; 0x2c
 8022d18:	b151      	cbz	r1, 8022d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8022d1a:	eb0a 0203 	add.w	r2, sl, r3
 8022d1e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022d22:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022d26:	9309      	str	r3, [sp, #36]	; 0x24
 8022d28:	7853      	ldrb	r3, [r2, #1]
 8022d2a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022d2e:	930c      	str	r3, [sp, #48]	; 0x30
 8022d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022d32:	fb10 f201 	smulbb	r2, r0, r1
 8022d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022d38:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022d3c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022d40:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022d44:	10d2      	asrs	r2, r2, #3
 8022d46:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022d4a:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8022d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8022d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022d54:	041b      	lsls	r3, r3, #16
 8022d56:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022d5a:	432b      	orrs	r3, r5
 8022d5c:	4353      	muls	r3, r2
 8022d5e:	fb0a 330c 	mla	r3, sl, ip, r3
 8022d62:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022d66:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022d6a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022d6e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022d72:	f1c1 0c10 	rsb	ip, r1, #16
 8022d76:	ebac 0c00 	sub.w	ip, ip, r0
 8022d7a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022d7e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022d82:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d88:	0418      	lsls	r0, r3, #16
 8022d8a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022d8e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022d92:	4318      	orrs	r0, r3
 8022d94:	fb02 c200 	mla	r2, r2, r0, ip
 8022d98:	0d53      	lsrs	r3, r2, #21
 8022d9a:	0952      	lsrs	r2, r2, #5
 8022d9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022da0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022da4:	431a      	orrs	r2, r3
 8022da6:	f8a8 2000 	strh.w	r2, [r8]
 8022daa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022dac:	f108 0802 	add.w	r8, r8, #2
 8022db0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022db4:	441c      	add	r4, r3
 8022db6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022db8:	441e      	add	r6, r3
 8022dba:	e77c      	b.n	8022cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022dbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022dbe:	f109 0902 	add.w	r9, r9, #2
 8022dc2:	441c      	add	r4, r3
 8022dc4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022dc6:	441e      	add	r6, r3
 8022dc8:	9b06      	ldr	r3, [sp, #24]
 8022dca:	3b01      	subs	r3, #1
 8022dcc:	9306      	str	r3, [sp, #24]
 8022dce:	e752      	b.n	8022c76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022dd0:	d020      	beq.n	8022e14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022dd2:	9b06      	ldr	r3, [sp, #24]
 8022dd4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8022dd6:	3b01      	subs	r3, #1
 8022dd8:	fb00 4003 	mla	r0, r0, r3, r4
 8022ddc:	1400      	asrs	r0, r0, #16
 8022dde:	f53f af67 	bmi.w	8022cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022de2:	3901      	subs	r1, #1
 8022de4:	4288      	cmp	r0, r1
 8022de6:	f6bf af63 	bge.w	8022cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022dea:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022dec:	fb01 6303 	mla	r3, r1, r3, r6
 8022df0:	141b      	asrs	r3, r3, #16
 8022df2:	f53f af5d 	bmi.w	8022cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022df6:	3a01      	subs	r2, #1
 8022df8:	4293      	cmp	r3, r2
 8022dfa:	f6bf af59 	bge.w	8022cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022dfe:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022e02:	46ca      	mov	sl, r9
 8022e04:	f1b8 0f00 	cmp.w	r8, #0
 8022e08:	dc67      	bgt.n	8022eda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8022e0a:	9b06      	ldr	r3, [sp, #24]
 8022e0c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022e10:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022e14:	9b08      	ldr	r3, [sp, #32]
 8022e16:	2b00      	cmp	r3, #0
 8022e18:	f340 80d7 	ble.w	8022fca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8022e1c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8022e20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022e22:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022e26:	eef0 6a48 	vmov.f32	s13, s16
 8022e2a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022e2e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022e32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e36:	ee16 4a90 	vmov	r4, s13
 8022e3a:	eef0 6a68 	vmov.f32	s13, s17
 8022e3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e42:	ee16 6a90 	vmov	r6, s13
 8022e46:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022e4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022e4e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022e52:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022e56:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022e5a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022e5e:	ee18 2a10 	vmov	r2, s16
 8022e62:	eeb0 8a47 	vmov.f32	s16, s14
 8022e66:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e6a:	ee18 2a90 	vmov	r2, s17
 8022e6e:	9329      	str	r3, [sp, #164]	; 0xa4
 8022e70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022e72:	eef0 8a67 	vmov.f32	s17, s15
 8022e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e7a:	932a      	str	r3, [sp, #168]	; 0xa8
 8022e7c:	9b08      	ldr	r3, [sp, #32]
 8022e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022e80:	3b01      	subs	r3, #1
 8022e82:	9308      	str	r3, [sp, #32]
 8022e84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022e86:	bf08      	it	eq
 8022e88:	4613      	moveq	r3, r2
 8022e8a:	9306      	str	r3, [sp, #24]
 8022e8c:	e6e4      	b.n	8022c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022e8e:	2900      	cmp	r1, #0
 8022e90:	f43f af4e 	beq.w	8022d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8022e94:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022e98:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8022e9e:	e747      	b.n	8022d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8022ea0:	f112 0a01 	adds.w	sl, r2, #1
 8022ea4:	d481      	bmi.n	8022daa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022ea6:	4553      	cmp	r3, sl
 8022ea8:	f6ff af7f 	blt.w	8022daa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022eac:	f11c 0a01 	adds.w	sl, ip, #1
 8022eb0:	f53f af7b 	bmi.w	8022daa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022eb4:	45d6      	cmp	lr, sl
 8022eb6:	f6ff af78 	blt.w	8022daa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022eba:	b21b      	sxth	r3, r3
 8022ebc:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8022ec0:	fa0f f28e 	sxth.w	r2, lr
 8022ec4:	9300      	str	r3, [sp, #0]
 8022ec6:	463b      	mov	r3, r7
 8022ec8:	9201      	str	r2, [sp, #4]
 8022eca:	9a07      	ldr	r2, [sp, #28]
 8022ecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022ed0:	4641      	mov	r1, r8
 8022ed2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022ed4:	f7ff fdfe 	bl	8022ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022ed8:	e767      	b.n	8022daa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022eda:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022edc:	1422      	asrs	r2, r4, #16
 8022ede:	1431      	asrs	r1, r6, #16
 8022ee0:	9d07      	ldr	r5, [sp, #28]
 8022ee2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022ee6:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8022eea:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022eee:	fb03 2101 	mla	r1, r3, r1, r2
 8022ef2:	9a07      	ldr	r2, [sp, #28]
 8022ef4:	440a      	add	r2, r1
 8022ef6:	5c69      	ldrb	r1, [r5, r1]
 8022ef8:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8022efc:	f1be 0f00 	cmp.w	lr, #0
 8022f00:	d05c      	beq.n	8022fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8022f02:	f892 c001 	ldrb.w	ip, [r2, #1]
 8022f06:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8022f0a:	950d      	str	r5, [sp, #52]	; 0x34
 8022f0c:	b150      	cbz	r0, 8022f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8022f0e:	eb02 0c03 	add.w	ip, r2, r3
 8022f12:	5cd3      	ldrb	r3, [r2, r3]
 8022f14:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022f18:	930a      	str	r3, [sp, #40]	; 0x28
 8022f1a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022f1e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022f22:	930e      	str	r3, [sp, #56]	; 0x38
 8022f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022f26:	fb1e f200 	smulbb	r2, lr, r0
 8022f2a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022f2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8022f30:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022f34:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022f38:	10d2      	asrs	r2, r2, #3
 8022f3a:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8022f3e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8022f46:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8022f4a:	9311      	str	r3, [sp, #68]	; 0x44
 8022f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022f4e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022f50:	041b      	lsls	r3, r3, #16
 8022f52:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022f56:	ea43 030b 	orr.w	r3, r3, fp
 8022f5a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022f5e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022f62:	4353      	muls	r3, r2
 8022f64:	fb05 3c0c 	mla	ip, r5, ip, r3
 8022f68:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022f6c:	ea43 0b01 	orr.w	fp, r3, r1
 8022f70:	f1c0 0110 	rsb	r1, r0, #16
 8022f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f76:	eba1 0e0e 	sub.w	lr, r1, lr
 8022f7a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022f7e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022f82:	fb0e cc0b 	mla	ip, lr, fp, ip
 8022f86:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8022f8a:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8022f8e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022f92:	ea4b 0e0e 	orr.w	lr, fp, lr
 8022f96:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022f9a:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8022f9e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022fa2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022fa6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022faa:	ea43 0c0c 	orr.w	ip, r3, ip
 8022fae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022fb0:	441c      	add	r4, r3
 8022fb2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022fb4:	f82a cb02 	strh.w	ip, [sl], #2
 8022fb8:	441e      	add	r6, r3
 8022fba:	e723      	b.n	8022e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022fbc:	2800      	cmp	r0, #0
 8022fbe:	d0b1      	beq.n	8022f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8022fc0:	5cd3      	ldrb	r3, [r2, r3]
 8022fc2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8022fc8:	e7ac      	b.n	8022f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8022fca:	b013      	add	sp, #76	; 0x4c
 8022fcc:	ecbd 8b0a 	vpop	{d8-d12}
 8022fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8022fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fd8:	468b      	mov	fp, r1
 8022fda:	8809      	ldrh	r1, [r1, #0]
 8022fdc:	b089      	sub	sp, #36	; 0x24
 8022fde:	10cd      	asrs	r5, r1, #3
 8022fe0:	ea4f 2921 	mov.w	r9, r1, asr #8
 8022fe4:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8022fe8:	00c9      	lsls	r1, r1, #3
 8022fea:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022fee:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8022ff2:	9202      	str	r2, [sp, #8]
 8022ff4:	b2c9      	uxtb	r1, r1
 8022ff6:	9500      	str	r5, [sp, #0]
 8022ff8:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8022ffc:	9101      	str	r1, [sp, #4]
 8022ffe:	9900      	ldr	r1, [sp, #0]
 8023000:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8023004:	0209      	lsls	r1, r1, #8
 8023006:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 802300a:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 802300e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8023012:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8023016:	fb04 650e 	mla	r5, r4, lr, r6
 802301a:	2c00      	cmp	r4, #0
 802301c:	eb02 0805 	add.w	r8, r2, r5
 8023020:	9a01      	ldr	r2, [sp, #4]
 8023022:	ea41 0102 	orr.w	r1, r1, r2
 8023026:	9107      	str	r1, [sp, #28]
 8023028:	db43      	blt.n	80230b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 802302a:	45a2      	cmp	sl, r4
 802302c:	dd41      	ble.n	80230b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 802302e:	2e00      	cmp	r6, #0
 8023030:	db3d      	blt.n	80230ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8023032:	45b6      	cmp	lr, r6
 8023034:	dd3b      	ble.n	80230ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8023036:	9a02      	ldr	r2, [sp, #8]
 8023038:	5d55      	ldrb	r5, [r2, r5]
 802303a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802303e:	441d      	add	r5, r3
 8023040:	1c72      	adds	r2, r6, #1
 8023042:	d439      	bmi.n	80230b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8023044:	4596      	cmp	lr, r2
 8023046:	dd37      	ble.n	80230b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8023048:	2f00      	cmp	r7, #0
 802304a:	d035      	beq.n	80230b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802304c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023050:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023054:	4419      	add	r1, r3
 8023056:	3401      	adds	r4, #1
 8023058:	d432      	bmi.n	80230c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802305a:	45a2      	cmp	sl, r4
 802305c:	dd30      	ble.n	80230c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802305e:	b378      	cbz	r0, 80230c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8023060:	2e00      	cmp	r6, #0
 8023062:	db2b      	blt.n	80230bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8023064:	45b6      	cmp	lr, r6
 8023066:	dd29      	ble.n	80230bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8023068:	f818 400e 	ldrb.w	r4, [r8, lr]
 802306c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023070:	441c      	add	r4, r3
 8023072:	3601      	adds	r6, #1
 8023074:	d427      	bmi.n	80230c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8023076:	45b6      	cmp	lr, r6
 8023078:	dd25      	ble.n	80230c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802307a:	b327      	cbz	r7, 80230c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802307c:	44c6      	add	lr, r8
 802307e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023082:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023086:	4413      	add	r3, r2
 8023088:	782a      	ldrb	r2, [r5, #0]
 802308a:	2f0f      	cmp	r7, #15
 802308c:	9202      	str	r2, [sp, #8]
 802308e:	780a      	ldrb	r2, [r1, #0]
 8023090:	9203      	str	r2, [sp, #12]
 8023092:	7822      	ldrb	r2, [r4, #0]
 8023094:	9204      	str	r2, [sp, #16]
 8023096:	781a      	ldrb	r2, [r3, #0]
 8023098:	9205      	str	r2, [sp, #20]
 802309a:	d801      	bhi.n	80230a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 802309c:	280f      	cmp	r0, #15
 802309e:	d914      	bls.n	80230ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 80230a0:	4b3f      	ldr	r3, [pc, #252]	; (80231a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 80230a2:	f240 210d 	movw	r1, #525	; 0x20d
 80230a6:	4a3f      	ldr	r2, [pc, #252]	; (80231a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 80230a8:	483f      	ldr	r0, [pc, #252]	; (80231a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 80230aa:	f006 fb13 	bl	80296d4 <__assert_func>
 80230ae:	ad07      	add	r5, sp, #28
 80230b0:	e7c6      	b.n	8023040 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 80230b2:	a907      	add	r1, sp, #28
 80230b4:	460d      	mov	r5, r1
 80230b6:	e7ce      	b.n	8023056 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80230b8:	a907      	add	r1, sp, #28
 80230ba:	e7cc      	b.n	8023056 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80230bc:	ac07      	add	r4, sp, #28
 80230be:	e7d8      	b.n	8023072 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 80230c0:	ab07      	add	r3, sp, #28
 80230c2:	461c      	mov	r4, r3
 80230c4:	e7e0      	b.n	8023088 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80230c6:	ab07      	add	r3, sp, #28
 80230c8:	e7de      	b.n	8023088 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80230ca:	b2ba      	uxth	r2, r7
 80230cc:	f891 8002 	ldrb.w	r8, [r1, #2]
 80230d0:	b280      	uxth	r0, r0
 80230d2:	7849      	ldrb	r1, [r1, #1]
 80230d4:	78ae      	ldrb	r6, [r5, #2]
 80230d6:	fa1f f78c 	uxth.w	r7, ip
 80230da:	fb02 fa00 	mul.w	sl, r2, r0
 80230de:	0112      	lsls	r2, r2, #4
 80230e0:	786d      	ldrb	r5, [r5, #1]
 80230e2:	ea6f 0c0c 	mvn.w	ip, ip
 80230e6:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80230ea:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80230ee:	eba2 020a 	sub.w	r2, r2, sl
 80230f2:	fa5f fc8c 	uxtb.w	ip, ip
 80230f6:	b280      	uxth	r0, r0
 80230f8:	fb19 f90c 	smulbb	r9, r9, ip
 80230fc:	b292      	uxth	r2, r2
 80230fe:	ebae 0e00 	sub.w	lr, lr, r0
 8023102:	4351      	muls	r1, r2
 8023104:	fa1f fe8e 	uxth.w	lr, lr
 8023108:	fb02 f808 	mul.w	r8, r2, r8
 802310c:	fb0e 1505 	mla	r5, lr, r5, r1
 8023110:	7861      	ldrb	r1, [r4, #1]
 8023112:	fb0e 8806 	mla	r8, lr, r6, r8
 8023116:	78a6      	ldrb	r6, [r4, #2]
 8023118:	fb00 5501 	mla	r5, r0, r1, r5
 802311c:	7859      	ldrb	r1, [r3, #1]
 802311e:	fb00 8806 	mla	r8, r0, r6, r8
 8023122:	789e      	ldrb	r6, [r3, #2]
 8023124:	9b00      	ldr	r3, [sp, #0]
 8023126:	fb0a 5101 	mla	r1, sl, r1, r5
 802312a:	fb0a 8606 	mla	r6, sl, r6, r8
 802312e:	fb13 f50c 	smulbb	r5, r3, ip
 8023132:	9b03      	ldr	r3, [sp, #12]
 8023134:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023138:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802313c:	435a      	muls	r2, r3
 802313e:	9b02      	ldr	r3, [sp, #8]
 8023140:	fb06 9607 	mla	r6, r6, r7, r9
 8023144:	fb0e 2203 	mla	r2, lr, r3, r2
 8023148:	9b04      	ldr	r3, [sp, #16]
 802314a:	fb01 5107 	mla	r1, r1, r7, r5
 802314e:	b2b6      	uxth	r6, r6
 8023150:	fb00 2003 	mla	r0, r0, r3, r2
 8023154:	9b05      	ldr	r3, [sp, #20]
 8023156:	b289      	uxth	r1, r1
 8023158:	f106 0901 	add.w	r9, r6, #1
 802315c:	fb0a 0a03 	mla	sl, sl, r3, r0
 8023160:	9b01      	ldr	r3, [sp, #4]
 8023162:	1c4d      	adds	r5, r1, #1
 8023164:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8023168:	fb13 fc0c 	smulbb	ip, r3, ip
 802316c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023170:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8023174:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8023178:	fb0a c707 	mla	r7, sl, r7, ip
 802317c:	0949      	lsrs	r1, r1, #5
 802317e:	b2bf      	uxth	r7, r7
 8023180:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023184:	f107 0c01 	add.w	ip, r7, #1
 8023188:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 802318c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023190:	433e      	orrs	r6, r7
 8023192:	430e      	orrs	r6, r1
 8023194:	f8ab 6000 	strh.w	r6, [fp]
 8023198:	b009      	add	sp, #36	; 0x24
 802319a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802319e:	bf00      	nop
 80231a0:	0802e1e2 	.word	0x0802e1e2
 80231a4:	0802e7a5 	.word	0x0802e7a5
 80231a8:	0802e2cb 	.word	0x0802e2cb

080231ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80231ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231b0:	ed2d 8b08 	vpush	{d8-d11}
 80231b4:	b095      	sub	sp, #84	; 0x54
 80231b6:	eeb0 aa40 	vmov.f32	s20, s0
 80231ba:	eef0 9a60 	vmov.f32	s19, s1
 80231be:	9212      	str	r2, [sp, #72]	; 0x48
 80231c0:	eeb0 9a41 	vmov.f32	s18, s2
 80231c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80231c6:	eeb0 8a62 	vmov.f32	s16, s5
 80231ca:	9309      	str	r3, [sp, #36]	; 0x24
 80231cc:	eef0 8a43 	vmov.f32	s17, s6
 80231d0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80231d4:	eef0 ba44 	vmov.f32	s23, s8
 80231d8:	9013      	str	r0, [sp, #76]	; 0x4c
 80231da:	eeb0 ba64 	vmov.f32	s22, s9
 80231de:	930f      	str	r3, [sp, #60]	; 0x3c
 80231e0:	eef0 aa45 	vmov.f32	s21, s10
 80231e4:	6850      	ldr	r0, [r2, #4]
 80231e6:	910e      	str	r1, [sp, #56]	; 0x38
 80231e8:	6812      	ldr	r2, [r2, #0]
 80231ea:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80231ee:	fb00 1303 	mla	r3, r0, r3, r1
 80231f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80231f6:	930a      	str	r3, [sp, #40]	; 0x28
 80231f8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80231fa:	681b      	ldr	r3, [r3, #0]
 80231fc:	930d      	str	r3, [sp, #52]	; 0x34
 80231fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023200:	685c      	ldr	r4, [r3, #4]
 8023202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023204:	3404      	adds	r4, #4
 8023206:	43db      	mvns	r3, r3
 8023208:	b2db      	uxtb	r3, r3
 802320a:	930b      	str	r3, [sp, #44]	; 0x2c
 802320c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802320e:	2b00      	cmp	r3, #0
 8023210:	dc03      	bgt.n	802321a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023212:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023214:	2b00      	cmp	r3, #0
 8023216:	f340 8258 	ble.w	80236ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802321a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802321c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023220:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023224:	1e48      	subs	r0, r1, #1
 8023226:	1e55      	subs	r5, r2, #1
 8023228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802322a:	2b00      	cmp	r3, #0
 802322c:	f340 80fc 	ble.w	8023428 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023230:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8023232:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023234:	1436      	asrs	r6, r6, #16
 8023236:	ea4f 4323 	mov.w	r3, r3, asr #16
 802323a:	d406      	bmi.n	802324a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802323c:	4286      	cmp	r6, r0
 802323e:	da04      	bge.n	802324a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023240:	2b00      	cmp	r3, #0
 8023242:	db02      	blt.n	802324a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023244:	42ab      	cmp	r3, r5
 8023246:	f2c0 80f0 	blt.w	802342a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802324a:	3601      	adds	r6, #1
 802324c:	f100 80dd 	bmi.w	802340a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8023250:	42b1      	cmp	r1, r6
 8023252:	f2c0 80da 	blt.w	802340a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8023256:	3301      	adds	r3, #1
 8023258:	f100 80d7 	bmi.w	802340a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802325c:	429a      	cmp	r2, r3
 802325e:	f2c0 80d4 	blt.w	802340a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8023262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023264:	9311      	str	r3, [sp, #68]	; 0x44
 8023266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023268:	930c      	str	r3, [sp, #48]	; 0x30
 802326a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802326c:	2b00      	cmp	r3, #0
 802326e:	f340 80fd 	ble.w	802346c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8023272:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8023274:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023276:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023278:	68c6      	ldr	r6, [r0, #12]
 802327a:	141d      	asrs	r5, r3, #16
 802327c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802327e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023282:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023284:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023286:	1400      	asrs	r0, r0, #16
 8023288:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802328c:	6892      	ldr	r2, [r2, #8]
 802328e:	f100 8141 	bmi.w	8023514 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023292:	1e57      	subs	r7, r2, #1
 8023294:	42b8      	cmp	r0, r7
 8023296:	f280 813d 	bge.w	8023514 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802329a:	2d00      	cmp	r5, #0
 802329c:	f2c0 813a 	blt.w	8023514 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80232a0:	1e77      	subs	r7, r6, #1
 80232a2:	42bd      	cmp	r5, r7
 80232a4:	f280 8136 	bge.w	8023514 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80232a8:	b212      	sxth	r2, r2
 80232aa:	fb05 0002 	mla	r0, r5, r2, r0
 80232ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80232b0:	f815 a000 	ldrb.w	sl, [r5, r0]
 80232b4:	182e      	adds	r6, r5, r0
 80232b6:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80232ba:	eb04 050a 	add.w	r5, r4, sl
 80232be:	2b00      	cmp	r3, #0
 80232c0:	f000 811a 	beq.w	80234f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80232c4:	f896 c001 	ldrb.w	ip, [r6, #1]
 80232c8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80232cc:	44a4      	add	ip, r4
 80232ce:	2900      	cmp	r1, #0
 80232d0:	f000 811a 	beq.w	8023508 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80232d4:	18b0      	adds	r0, r6, r2
 80232d6:	5cb2      	ldrb	r2, [r6, r2]
 80232d8:	7840      	ldrb	r0, [r0, #1]
 80232da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80232de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80232e2:	4422      	add	r2, r4
 80232e4:	4420      	add	r0, r4
 80232e6:	b29b      	uxth	r3, r3
 80232e8:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80232ec:	b289      	uxth	r1, r1
 80232ee:	f895 b002 	ldrb.w	fp, [r5, #2]
 80232f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80232f4:	fb03 f901 	mul.w	r9, r3, r1
 80232f8:	011b      	lsls	r3, r3, #4
 80232fa:	f8b6 e000 	ldrh.w	lr, [r6]
 80232fe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023302:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8023306:	eba3 0309 	sub.w	r3, r3, r9
 802330a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 802330e:	b289      	uxth	r1, r1
 8023310:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8023314:	b29b      	uxth	r3, r3
 8023316:	eba8 0801 	sub.w	r8, r8, r1
 802331a:	435f      	muls	r7, r3
 802331c:	fa1f f888 	uxth.w	r8, r8
 8023320:	9310      	str	r3, [sp, #64]	; 0x40
 8023322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023324:	fb08 770b 	mla	r7, r8, fp, r7
 8023328:	f892 b002 	ldrb.w	fp, [r2, #2]
 802332c:	fb01 770b 	mla	r7, r1, fp, r7
 8023330:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023334:	fb09 770b 	mla	r7, r9, fp, r7
 8023338:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 802333c:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023340:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023344:	fb1b fb03 	smulbb	fp, fp, r3
 8023348:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802334a:	fb07 b706 	mla	r7, r7, r6, fp
 802334e:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023352:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023356:	f89c c000 	ldrb.w	ip, [ip]
 802335a:	b2bf      	uxth	r7, r7
 802335c:	435d      	muls	r5, r3
 802335e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023360:	fb08 550b 	mla	r5, r8, fp, r5
 8023364:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023368:	fb01 550b 	mla	r5, r1, fp, r5
 802336c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023370:	fb09 550b 	mla	r5, r9, fp, r5
 8023374:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8023378:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802337c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023380:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023384:	fa5f fe8e 	uxtb.w	lr, lr
 8023388:	fb1b fb03 	smulbb	fp, fp, r3
 802338c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802338e:	fb03 f30c 	mul.w	r3, r3, ip
 8023392:	f892 c000 	ldrb.w	ip, [r2]
 8023396:	fb05 b506 	mla	r5, r5, r6, fp
 802339a:	1c7a      	adds	r2, r7, #1
 802339c:	fb08 330a 	mla	r3, r8, sl, r3
 80233a0:	b2ad      	uxth	r5, r5
 80233a2:	fb01 330c 	mla	r3, r1, ip, r3
 80233a6:	f890 c000 	ldrb.w	ip, [r0]
 80233aa:	f105 0b01 	add.w	fp, r5, #1
 80233ae:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80233b2:	fb09 3c0c 	mla	ip, r9, ip, r3
 80233b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80233b8:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80233bc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80233c0:	fb1e fe03 	smulbb	lr, lr, r3
 80233c4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80233c8:	096d      	lsrs	r5, r5, #5
 80233ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233cc:	fb0c ee06 	mla	lr, ip, r6, lr
 80233d0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80233d4:	fa1f fe8e 	uxth.w	lr, lr
 80233d8:	f10e 0c01 	add.w	ip, lr, #1
 80233dc:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
 80233e0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80233e4:	ea47 070e 	orr.w	r7, r7, lr
 80233e8:	433d      	orrs	r5, r7
 80233ea:	801d      	strh	r5, [r3, #0]
 80233ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233ee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80233f0:	3302      	adds	r3, #2
 80233f2:	930c      	str	r3, [sp, #48]	; 0x30
 80233f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80233f6:	4413      	add	r3, r2
 80233f8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80233fa:	9327      	str	r3, [sp, #156]	; 0x9c
 80233fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80233fe:	4413      	add	r3, r2
 8023400:	9328      	str	r3, [sp, #160]	; 0xa0
 8023402:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023404:	3b01      	subs	r3, #1
 8023406:	9311      	str	r3, [sp, #68]	; 0x44
 8023408:	e72f      	b.n	802326a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802340a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802340c:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 802340e:	4433      	add	r3, r6
 8023410:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8023412:	9327      	str	r3, [sp, #156]	; 0x9c
 8023414:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023416:	4433      	add	r3, r6
 8023418:	9328      	str	r3, [sp, #160]	; 0xa0
 802341a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802341c:	3b01      	subs	r3, #1
 802341e:	9309      	str	r3, [sp, #36]	; 0x24
 8023420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023422:	3302      	adds	r3, #2
 8023424:	930a      	str	r3, [sp, #40]	; 0x28
 8023426:	e6ff      	b.n	8023228 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023428:	d027      	beq.n	802347a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 802342a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802342c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802342e:	3b01      	subs	r3, #1
 8023430:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8023432:	fb00 5003 	mla	r0, r0, r3, r5
 8023436:	1400      	asrs	r0, r0, #16
 8023438:	f53f af13 	bmi.w	8023262 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802343c:	3901      	subs	r1, #1
 802343e:	4288      	cmp	r0, r1
 8023440:	f6bf af0f 	bge.w	8023262 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023444:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023446:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023448:	fb01 0303 	mla	r3, r1, r3, r0
 802344c:	141b      	asrs	r3, r3, #16
 802344e:	f53f af08 	bmi.w	8023262 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023452:	3a01      	subs	r2, #1
 8023454:	4293      	cmp	r3, r2
 8023456:	f6bf af04 	bge.w	8023262 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802345a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802345c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8023460:	9311      	str	r3, [sp, #68]	; 0x44
 8023462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023464:	930c      	str	r3, [sp, #48]	; 0x30
 8023466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023468:	2b00      	cmp	r3, #0
 802346a:	dc70      	bgt.n	802354e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 802346c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802346e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023470:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023474:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023478:	930a      	str	r3, [sp, #40]	; 0x28
 802347a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802347c:	2b00      	cmp	r3, #0
 802347e:	f340 8124 	ble.w	80236ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8023482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023486:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023488:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802348c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023490:	eef0 6a48 	vmov.f32	s13, s16
 8023494:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023498:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802349c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234a0:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 80234a4:	eef0 6a68 	vmov.f32	s13, s17
 80234a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234ac:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 80234b0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80234b4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80234b8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80234bc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80234c0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80234c4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80234c8:	ee18 2a10 	vmov	r2, s16
 80234cc:	eeb0 8a47 	vmov.f32	s16, s14
 80234d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80234d4:	ee18 2a90 	vmov	r2, s17
 80234d8:	9329      	str	r3, [sp, #164]	; 0xa4
 80234da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80234dc:	eef0 8a67 	vmov.f32	s17, s15
 80234e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80234e4:	932a      	str	r3, [sp, #168]	; 0xa8
 80234e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80234e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80234ea:	3b01      	subs	r3, #1
 80234ec:	930e      	str	r3, [sp, #56]	; 0x38
 80234ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80234f0:	bf08      	it	eq
 80234f2:	4613      	moveq	r3, r2
 80234f4:	9309      	str	r3, [sp, #36]	; 0x24
 80234f6:	e689      	b.n	802320c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80234f8:	b149      	cbz	r1, 802350e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80234fa:	5cb2      	ldrb	r2, [r6, r2]
 80234fc:	4628      	mov	r0, r5
 80234fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023502:	4422      	add	r2, r4
 8023504:	46ac      	mov	ip, r5
 8023506:	e6ee      	b.n	80232e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023508:	4628      	mov	r0, r5
 802350a:	462a      	mov	r2, r5
 802350c:	e6eb      	b.n	80232e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802350e:	4628      	mov	r0, r5
 8023510:	462a      	mov	r2, r5
 8023512:	e7f7      	b.n	8023504 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023514:	1c47      	adds	r7, r0, #1
 8023516:	f53f af69 	bmi.w	80233ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802351a:	42ba      	cmp	r2, r7
 802351c:	f6ff af66 	blt.w	80233ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023520:	1c6f      	adds	r7, r5, #1
 8023522:	f53f af63 	bmi.w	80233ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023526:	42be      	cmp	r6, r7
 8023528:	f6ff af60 	blt.w	80233ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802352c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802352e:	b236      	sxth	r6, r6
 8023530:	b212      	sxth	r2, r2
 8023532:	9002      	str	r0, [sp, #8]
 8023534:	9601      	str	r6, [sp, #4]
 8023536:	9200      	str	r2, [sp, #0]
 8023538:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802353a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 802353e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023542:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023546:	4623      	mov	r3, r4
 8023548:	f7ff fd44 	bl	8022fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 802354c:	e74e      	b.n	80233ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802354e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023550:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023552:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023556:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8023558:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802355a:	1400      	asrs	r0, r0, #16
 802355c:	142d      	asrs	r5, r5, #16
 802355e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023560:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023564:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023568:	fb02 5000 	mla	r0, r2, r0, r5
 802356c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802356e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8023572:	182e      	adds	r6, r5, r0
 8023574:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023578:	eb04 0509 	add.w	r5, r4, r9
 802357c:	2b00      	cmp	r3, #0
 802357e:	f000 8096 	beq.w	80236ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 8023582:	7877      	ldrb	r7, [r6, #1]
 8023584:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023588:	4427      	add	r7, r4
 802358a:	2900      	cmp	r1, #0
 802358c:	f000 8097 	beq.w	80236be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8023590:	18b0      	adds	r0, r6, r2
 8023592:	5cb2      	ldrb	r2, [r6, r2]
 8023594:	7840      	ldrb	r0, [r0, #1]
 8023596:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802359a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802359e:	4422      	add	r2, r4
 80235a0:	4420      	add	r0, r4
 80235a2:	b29b      	uxth	r3, r3
 80235a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80235a6:	b289      	uxth	r1, r1
 80235a8:	f895 b002 	ldrb.w	fp, [r5, #2]
 80235ac:	f8b6 c000 	ldrh.w	ip, [r6]
 80235b0:	fb03 f801 	mul.w	r8, r3, r1
 80235b4:	011b      	lsls	r3, r3, #4
 80235b6:	78be      	ldrb	r6, [r7, #2]
 80235b8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80235bc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80235c0:	eba3 0308 	sub.w	r3, r3, r8
 80235c4:	f814 9009 	ldrb.w	r9, [r4, r9]
 80235c8:	b289      	uxth	r1, r1
 80235ca:	b29b      	uxth	r3, r3
 80235cc:	ebae 0e01 	sub.w	lr, lr, r1
 80235d0:	435e      	muls	r6, r3
 80235d2:	fa1f fe8e 	uxth.w	lr, lr
 80235d6:	9310      	str	r3, [sp, #64]	; 0x40
 80235d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80235da:	fb0e 660b 	mla	r6, lr, fp, r6
 80235de:	f892 b002 	ldrb.w	fp, [r2, #2]
 80235e2:	fb01 660b 	mla	r6, r1, fp, r6
 80235e6:	f890 b002 	ldrb.w	fp, [r0, #2]
 80235ea:	fb08 660b 	mla	r6, r8, fp, r6
 80235ee:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80235f2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80235f6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80235fa:	fb1b fb03 	smulbb	fp, fp, r3
 80235fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023600:	fb06 b60a 	mla	r6, r6, sl, fp
 8023604:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023608:	787d      	ldrb	r5, [r7, #1]
 802360a:	783f      	ldrb	r7, [r7, #0]
 802360c:	b2b6      	uxth	r6, r6
 802360e:	435d      	muls	r5, r3
 8023610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023612:	fb0e 550b 	mla	r5, lr, fp, r5
 8023616:	f892 b001 	ldrb.w	fp, [r2, #1]
 802361a:	fb01 550b 	mla	r5, r1, fp, r5
 802361e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023622:	fb08 550b 	mla	r5, r8, fp, r5
 8023626:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802362a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802362e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023632:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023636:	fa5f fc8c 	uxtb.w	ip, ip
 802363a:	fb1b fb03 	smulbb	fp, fp, r3
 802363e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023640:	437b      	muls	r3, r7
 8023642:	7817      	ldrb	r7, [r2, #0]
 8023644:	fb05 b50a 	mla	r5, r5, sl, fp
 8023648:	fb0e 3309 	mla	r3, lr, r9, r3
 802364c:	b2ad      	uxth	r5, r5
 802364e:	fb01 3307 	mla	r3, r1, r7, r3
 8023652:	7807      	ldrb	r7, [r0, #0]
 8023654:	f105 0b01 	add.w	fp, r5, #1
 8023658:	fb08 3707 	mla	r7, r8, r7, r3
 802365c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802365e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023662:	fb1c fc03 	smulbb	ip, ip, r3
 8023666:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802366a:	1c73      	adds	r3, r6, #1
 802366c:	096d      	lsrs	r5, r5, #5
 802366e:	fb07 c70a 	mla	r7, r7, sl, ip
 8023672:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023676:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802367a:	b2bf      	uxth	r7, r7
 802367c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802367e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8023682:	1c7a      	adds	r2, r7, #1
 8023684:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023688:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802368c:	4316      	orrs	r6, r2
 802368e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023690:	432e      	orrs	r6, r5
 8023692:	f823 6b02 	strh.w	r6, [r3], #2
 8023696:	930c      	str	r3, [sp, #48]	; 0x30
 8023698:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802369a:	4413      	add	r3, r2
 802369c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802369e:	9327      	str	r3, [sp, #156]	; 0x9c
 80236a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80236a2:	4413      	add	r3, r2
 80236a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80236a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80236a8:	3b01      	subs	r3, #1
 80236aa:	9311      	str	r3, [sp, #68]	; 0x44
 80236ac:	e6db      	b.n	8023466 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80236ae:	b149      	cbz	r1, 80236c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80236b0:	5cb2      	ldrb	r2, [r6, r2]
 80236b2:	4628      	mov	r0, r5
 80236b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80236b8:	4422      	add	r2, r4
 80236ba:	462f      	mov	r7, r5
 80236bc:	e771      	b.n	80235a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80236be:	4628      	mov	r0, r5
 80236c0:	462a      	mov	r2, r5
 80236c2:	e76e      	b.n	80235a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80236c4:	4628      	mov	r0, r5
 80236c6:	462a      	mov	r2, r5
 80236c8:	e7f7      	b.n	80236ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 80236ca:	b015      	add	sp, #84	; 0x54
 80236cc:	ecbd 8b08 	vpop	{d8-d11}
 80236d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080236d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80236d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236d8:	880e      	ldrh	r6, [r1, #0]
 80236da:	b085      	sub	sp, #20
 80236dc:	4691      	mov	r9, r2
 80236de:	0230      	lsls	r0, r6, #8
 80236e0:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80236e4:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80236e8:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 80236ec:	0170      	lsls	r0, r6, #5
 80236ee:	00f6      	lsls	r6, r6, #3
 80236f0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80236f4:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80236f8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80236fc:	b2f6      	uxtb	r6, r6
 80236fe:	ea4b 0000 	orr.w	r0, fp, r0
 8023702:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8023706:	4306      	orrs	r6, r0
 8023708:	fb05 7a0c 	mla	sl, r5, ip, r7
 802370c:	2d00      	cmp	r5, #0
 802370e:	9603      	str	r6, [sp, #12]
 8023710:	eb09 0e0a 	add.w	lr, r9, sl
 8023714:	db42      	blt.n	802379c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8023716:	45a8      	cmp	r8, r5
 8023718:	dd40      	ble.n	802379c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 802371a:	2f00      	cmp	r7, #0
 802371c:	db3c      	blt.n	8023798 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 802371e:	45bc      	cmp	ip, r7
 8023720:	dd3a      	ble.n	8023798 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8023722:	f819 600a 	ldrb.w	r6, [r9, sl]
 8023726:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802372a:	441e      	add	r6, r3
 802372c:	1c78      	adds	r0, r7, #1
 802372e:	d438      	bmi.n	80237a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8023730:	4584      	cmp	ip, r0
 8023732:	dd36      	ble.n	80237a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8023734:	b3aa      	cbz	r2, 80237a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8023736:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802373a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802373e:	4418      	add	r0, r3
 8023740:	3501      	adds	r5, #1
 8023742:	d432      	bmi.n	80237aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8023744:	45a8      	cmp	r8, r5
 8023746:	dd30      	ble.n	80237aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8023748:	b37c      	cbz	r4, 80237aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 802374a:	2f00      	cmp	r7, #0
 802374c:	db2b      	blt.n	80237a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 802374e:	45bc      	cmp	ip, r7
 8023750:	dd29      	ble.n	80237a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8023752:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8023756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802375a:	441d      	add	r5, r3
 802375c:	3701      	adds	r7, #1
 802375e:	d427      	bmi.n	80237b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8023760:	45bc      	cmp	ip, r7
 8023762:	dd25      	ble.n	80237b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8023764:	b322      	cbz	r2, 80237b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8023766:	44f4      	add	ip, lr
 8023768:	f89c 7001 	ldrb.w	r7, [ip, #1]
 802376c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023770:	443b      	add	r3, r7
 8023772:	781f      	ldrb	r7, [r3, #0]
 8023774:	2a0f      	cmp	r2, #15
 8023776:	f896 a000 	ldrb.w	sl, [r6]
 802377a:	f890 b000 	ldrb.w	fp, [r0]
 802377e:	f895 9000 	ldrb.w	r9, [r5]
 8023782:	9700      	str	r7, [sp, #0]
 8023784:	d801      	bhi.n	802378a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 8023786:	2c0f      	cmp	r4, #15
 8023788:	d914      	bls.n	80237b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 802378a:	4b2c      	ldr	r3, [pc, #176]	; (802383c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 802378c:	f240 210d 	movw	r1, #525	; 0x20d
 8023790:	4a2b      	ldr	r2, [pc, #172]	; (8023840 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8023792:	482c      	ldr	r0, [pc, #176]	; (8023844 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8023794:	f005 ff9e 	bl	80296d4 <__assert_func>
 8023798:	ae03      	add	r6, sp, #12
 802379a:	e7c7      	b.n	802372c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 802379c:	a803      	add	r0, sp, #12
 802379e:	4606      	mov	r6, r0
 80237a0:	e7ce      	b.n	8023740 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 80237a2:	a803      	add	r0, sp, #12
 80237a4:	e7cc      	b.n	8023740 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 80237a6:	ad03      	add	r5, sp, #12
 80237a8:	e7d8      	b.n	802375c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 80237aa:	ab03      	add	r3, sp, #12
 80237ac:	461d      	mov	r5, r3
 80237ae:	e7e0      	b.n	8023772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 80237b0:	ab03      	add	r3, sp, #12
 80237b2:	e7de      	b.n	8023772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 80237b4:	b292      	uxth	r2, r2
 80237b6:	f890 e002 	ldrb.w	lr, [r0, #2]
 80237ba:	b2a4      	uxth	r4, r4
 80237bc:	78b7      	ldrb	r7, [r6, #2]
 80237be:	7840      	ldrb	r0, [r0, #1]
 80237c0:	fb02 f804 	mul.w	r8, r2, r4
 80237c4:	0112      	lsls	r2, r2, #4
 80237c6:	7876      	ldrb	r6, [r6, #1]
 80237c8:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80237cc:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80237d0:	eba2 0208 	sub.w	r2, r2, r8
 80237d4:	b2a4      	uxth	r4, r4
 80237d6:	b292      	uxth	r2, r2
 80237d8:	ebac 0c04 	sub.w	ip, ip, r4
 80237dc:	fb02 fe0e 	mul.w	lr, r2, lr
 80237e0:	fa1f fc8c 	uxth.w	ip, ip
 80237e4:	fb0c ee07 	mla	lr, ip, r7, lr
 80237e8:	78af      	ldrb	r7, [r5, #2]
 80237ea:	fb04 ee07 	mla	lr, r4, r7, lr
 80237ee:	789f      	ldrb	r7, [r3, #2]
 80237f0:	785b      	ldrb	r3, [r3, #1]
 80237f2:	fb08 e707 	mla	r7, r8, r7, lr
 80237f6:	fb02 fe0b 	mul.w	lr, r2, fp
 80237fa:	4342      	muls	r2, r0
 80237fc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8023800:	7868      	ldrb	r0, [r5, #1]
 8023802:	fb0c ee0a 	mla	lr, ip, sl, lr
 8023806:	fb0c 2206 	mla	r2, ip, r6, r2
 802380a:	9701      	str	r7, [sp, #4]
 802380c:	fb04 ee09 	mla	lr, r4, r9, lr
 8023810:	9f00      	ldr	r7, [sp, #0]
 8023812:	fb04 2400 	mla	r4, r4, r0, r2
 8023816:	fb08 ee07 	mla	lr, r8, r7, lr
 802381a:	9f01      	ldr	r7, [sp, #4]
 802381c:	fb08 4803 	mla	r8, r8, r3, r4
 8023820:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023824:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8023828:	ea47 070e 	orr.w	r7, r7, lr
 802382c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8023830:	ea47 0708 	orr.w	r7, r7, r8
 8023834:	800f      	strh	r7, [r1, #0]
 8023836:	b005      	add	sp, #20
 8023838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802383c:	0802e1e2 	.word	0x0802e1e2
 8023840:	0802e7a5 	.word	0x0802e7a5
 8023844:	0802e2cb 	.word	0x0802e2cb

08023848 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802384c:	ed2d 8b08 	vpush	{d8-d11}
 8023850:	b08f      	sub	sp, #60	; 0x3c
 8023852:	eeb0 aa40 	vmov.f32	s20, s0
 8023856:	eef0 9a60 	vmov.f32	s19, s1
 802385a:	920c      	str	r2, [sp, #48]	; 0x30
 802385c:	eeb0 9a41 	vmov.f32	s18, s2
 8023860:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023862:	eeb0 8a62 	vmov.f32	s16, s5
 8023866:	900d      	str	r0, [sp, #52]	; 0x34
 8023868:	eef0 8a43 	vmov.f32	s17, s6
 802386c:	6850      	ldr	r0, [r2, #4]
 802386e:	eef0 ba44 	vmov.f32	s23, s8
 8023872:	910a      	str	r1, [sp, #40]	; 0x28
 8023874:	eeb0 ba64 	vmov.f32	s22, s9
 8023878:	9306      	str	r3, [sp, #24]
 802387a:	eef0 aa45 	vmov.f32	s21, s10
 802387e:	6812      	ldr	r2, [r2, #0]
 8023880:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8023884:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8023888:	fb00 1303 	mla	r3, r0, r3, r1
 802388c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023890:	9307      	str	r3, [sp, #28]
 8023892:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023894:	681b      	ldr	r3, [r3, #0]
 8023896:	9308      	str	r3, [sp, #32]
 8023898:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802389a:	685c      	ldr	r4, [r3, #4]
 802389c:	3404      	adds	r4, #4
 802389e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80238a0:	2b00      	cmp	r3, #0
 80238a2:	dc03      	bgt.n	80238ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80238a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80238a6:	2b00      	cmp	r3, #0
 80238a8:	f340 81d5 	ble.w	8023c56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 80238ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80238ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80238b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80238b6:	1e48      	subs	r0, r1, #1
 80238b8:	1e56      	subs	r6, r2, #1
 80238ba:	9b06      	ldr	r3, [sp, #24]
 80238bc:	2b00      	cmp	r3, #0
 80238be:	f340 80b6 	ble.w	8023a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80238c2:	ea5f 472b 	movs.w	r7, fp, asr #16
 80238c6:	ea4f 4325 	mov.w	r3, r5, asr #16
 80238ca:	d406      	bmi.n	80238da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80238cc:	4287      	cmp	r7, r0
 80238ce:	da04      	bge.n	80238da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	db02      	blt.n	80238da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80238d4:	42b3      	cmp	r3, r6
 80238d6:	f2c0 80ab 	blt.w	8023a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80238da:	3701      	adds	r7, #1
 80238dc:	f100 809c 	bmi.w	8023a18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80238e0:	42b9      	cmp	r1, r7
 80238e2:	f2c0 8099 	blt.w	8023a18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80238e6:	3301      	adds	r3, #1
 80238e8:	f100 8096 	bmi.w	8023a18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80238ec:	429a      	cmp	r2, r3
 80238ee:	f2c0 8093 	blt.w	8023a18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80238f2:	9b06      	ldr	r3, [sp, #24]
 80238f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80238f6:	9b07      	ldr	r3, [sp, #28]
 80238f8:	9309      	str	r3, [sp, #36]	; 0x24
 80238fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80238fc:	2b00      	cmp	r3, #0
 80238fe:	f340 80b4 	ble.w	8023a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8023902:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023904:	142e      	asrs	r6, r5, #16
 8023906:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023908:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802390c:	68c7      	ldr	r7, [r0, #12]
 802390e:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023912:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023916:	6892      	ldr	r2, [r2, #8]
 8023918:	f100 80fb 	bmi.w	8023b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802391c:	f102 3cff 	add.w	ip, r2, #4294967295
 8023920:	4560      	cmp	r0, ip
 8023922:	f280 80f6 	bge.w	8023b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8023926:	2e00      	cmp	r6, #0
 8023928:	f2c0 80f3 	blt.w	8023b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802392c:	f107 3cff 	add.w	ip, r7, #4294967295
 8023930:	4566      	cmp	r6, ip
 8023932:	f280 80ee 	bge.w	8023b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8023936:	b212      	sxth	r2, r2
 8023938:	fb06 0002 	mla	r0, r6, r2, r0
 802393c:	9e08      	ldr	r6, [sp, #32]
 802393e:	1837      	adds	r7, r6, r0
 8023940:	5c30      	ldrb	r0, [r6, r0]
 8023942:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8023946:	eb04 0c08 	add.w	ip, r4, r8
 802394a:	2b00      	cmp	r3, #0
 802394c:	f000 80d3 	beq.w	8023af6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8023950:	787e      	ldrb	r6, [r7, #1]
 8023952:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023956:	4426      	add	r6, r4
 8023958:	2900      	cmp	r1, #0
 802395a:	f000 80d4 	beq.w	8023b06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 802395e:	18b8      	adds	r0, r7, r2
 8023960:	5cba      	ldrb	r2, [r7, r2]
 8023962:	7840      	ldrb	r0, [r0, #1]
 8023964:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023968:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802396c:	4422      	add	r2, r4
 802396e:	4420      	add	r0, r4
 8023970:	b29b      	uxth	r3, r3
 8023972:	78b7      	ldrb	r7, [r6, #2]
 8023974:	b289      	uxth	r1, r1
 8023976:	f89c a002 	ldrb.w	sl, [ip, #2]
 802397a:	f89c c001 	ldrb.w	ip, [ip, #1]
 802397e:	fb03 f901 	mul.w	r9, r3, r1
 8023982:	011b      	lsls	r3, r3, #4
 8023984:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023988:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802398c:	eba3 0309 	sub.w	r3, r3, r9
 8023990:	b289      	uxth	r1, r1
 8023992:	b29b      	uxth	r3, r3
 8023994:	ebae 0e01 	sub.w	lr, lr, r1
 8023998:	435f      	muls	r7, r3
 802399a:	fa1f fe8e 	uxth.w	lr, lr
 802399e:	fb0e 770a 	mla	r7, lr, sl, r7
 80239a2:	f892 a002 	ldrb.w	sl, [r2, #2]
 80239a6:	fb01 770a 	mla	r7, r1, sl, r7
 80239aa:	f890 a002 	ldrb.w	sl, [r0, #2]
 80239ae:	fb09 7a0a 	mla	sl, r9, sl, r7
 80239b2:	f814 7008 	ldrb.w	r7, [r4, r8]
 80239b6:	f896 8000 	ldrb.w	r8, [r6]
 80239ba:	7876      	ldrb	r6, [r6, #1]
 80239bc:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80239c0:	fb03 f808 	mul.w	r8, r3, r8
 80239c4:	4373      	muls	r3, r6
 80239c6:	fb0e 8807 	mla	r8, lr, r7, r8
 80239ca:	7817      	ldrb	r7, [r2, #0]
 80239cc:	fb0e 330c 	mla	r3, lr, ip, r3
 80239d0:	fb01 8807 	mla	r8, r1, r7, r8
 80239d4:	7807      	ldrb	r7, [r0, #0]
 80239d6:	fb09 8707 	mla	r7, r9, r7, r8
 80239da:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80239de:	ea4a 0707 	orr.w	r7, sl, r7
 80239e2:	f892 a001 	ldrb.w	sl, [r2, #1]
 80239e6:	fb01 310a 	mla	r1, r1, sl, r3
 80239ea:	f890 a001 	ldrb.w	sl, [r0, #1]
 80239ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239f0:	fb09 1a0a 	mla	sl, r9, sl, r1
 80239f4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80239f8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80239fc:	ea47 070a 	orr.w	r7, r7, sl
 8023a00:	801f      	strh	r7, [r3, #0]
 8023a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a04:	3302      	adds	r3, #2
 8023a06:	9309      	str	r3, [sp, #36]	; 0x24
 8023a08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023a0a:	449b      	add	fp, r3
 8023a0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023a0e:	441d      	add	r5, r3
 8023a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a12:	3b01      	subs	r3, #1
 8023a14:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a16:	e770      	b.n	80238fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023a18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023a1a:	449b      	add	fp, r3
 8023a1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023a1e:	441d      	add	r5, r3
 8023a20:	9b06      	ldr	r3, [sp, #24]
 8023a22:	3b01      	subs	r3, #1
 8023a24:	9306      	str	r3, [sp, #24]
 8023a26:	9b07      	ldr	r3, [sp, #28]
 8023a28:	3302      	adds	r3, #2
 8023a2a:	9307      	str	r3, [sp, #28]
 8023a2c:	e745      	b.n	80238ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023a2e:	d023      	beq.n	8023a78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023a30:	9b06      	ldr	r3, [sp, #24]
 8023a32:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8023a34:	3b01      	subs	r3, #1
 8023a36:	fb00 b003 	mla	r0, r0, r3, fp
 8023a3a:	1400      	asrs	r0, r0, #16
 8023a3c:	f53f af59 	bmi.w	80238f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023a40:	3901      	subs	r1, #1
 8023a42:	4288      	cmp	r0, r1
 8023a44:	f6bf af55 	bge.w	80238f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023a48:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023a4a:	fb01 5303 	mla	r3, r1, r3, r5
 8023a4e:	141b      	asrs	r3, r3, #16
 8023a50:	f53f af4f 	bmi.w	80238f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023a54:	3a01      	subs	r2, #1
 8023a56:	4293      	cmp	r3, r2
 8023a58:	f6bf af4b 	bge.w	80238f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023a5c:	9b06      	ldr	r3, [sp, #24]
 8023a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8023a60:	9b07      	ldr	r3, [sp, #28]
 8023a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a66:	2b00      	cmp	r3, #0
 8023a68:	dc70      	bgt.n	8023b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8023a6a:	9b06      	ldr	r3, [sp, #24]
 8023a6c:	9a07      	ldr	r2, [sp, #28]
 8023a6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023a72:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023a76:	9307      	str	r3, [sp, #28]
 8023a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	f340 80eb 	ble.w	8023c56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8023a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023a86:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023a8a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023a8e:	eef0 6a48 	vmov.f32	s13, s16
 8023a92:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023a96:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023a9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a9e:	ee16 ba90 	vmov	fp, s13
 8023aa2:	eef0 6a68 	vmov.f32	s13, s17
 8023aa6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023aaa:	ee16 5a90 	vmov	r5, s13
 8023aae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023ab2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023ab6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023aba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023abe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023ac2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023ac6:	ee18 2a10 	vmov	r2, s16
 8023aca:	eeb0 8a47 	vmov.f32	s16, s14
 8023ace:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ad2:	ee18 2a90 	vmov	r2, s17
 8023ad6:	9323      	str	r3, [sp, #140]	; 0x8c
 8023ad8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023ada:	eef0 8a67 	vmov.f32	s17, s15
 8023ade:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ae2:	9324      	str	r3, [sp, #144]	; 0x90
 8023ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023ae8:	3b01      	subs	r3, #1
 8023aea:	930a      	str	r3, [sp, #40]	; 0x28
 8023aec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023aee:	bf08      	it	eq
 8023af0:	4613      	moveq	r3, r2
 8023af2:	9306      	str	r3, [sp, #24]
 8023af4:	e6d3      	b.n	802389e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8023af6:	b149      	cbz	r1, 8023b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8023af8:	5cba      	ldrb	r2, [r7, r2]
 8023afa:	4660      	mov	r0, ip
 8023afc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b00:	4422      	add	r2, r4
 8023b02:	4666      	mov	r6, ip
 8023b04:	e734      	b.n	8023970 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8023b06:	4660      	mov	r0, ip
 8023b08:	4662      	mov	r2, ip
 8023b0a:	e731      	b.n	8023970 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8023b0c:	4660      	mov	r0, ip
 8023b0e:	4662      	mov	r2, ip
 8023b10:	e7f7      	b.n	8023b02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8023b12:	f110 0c01 	adds.w	ip, r0, #1
 8023b16:	f53f af74 	bmi.w	8023a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023b1a:	4562      	cmp	r2, ip
 8023b1c:	f6ff af71 	blt.w	8023a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023b20:	f116 0c01 	adds.w	ip, r6, #1
 8023b24:	f53f af6d 	bmi.w	8023a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023b28:	4567      	cmp	r7, ip
 8023b2a:	f6ff af6a 	blt.w	8023a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023b2e:	b23f      	sxth	r7, r7
 8023b30:	b212      	sxth	r2, r2
 8023b32:	9701      	str	r7, [sp, #4]
 8023b34:	9200      	str	r2, [sp, #0]
 8023b36:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8023b3a:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8023b3e:	4623      	mov	r3, r4
 8023b40:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023b42:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8023b46:	f7ff fdc5 	bl	80236d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8023b4a:	e75a      	b.n	8023a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023b4c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023b4e:	ea4f 462b 	mov.w	r6, fp, asr #16
 8023b52:	1428      	asrs	r0, r5, #16
 8023b54:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023b58:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023b5c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023b60:	fb02 6000 	mla	r0, r2, r0, r6
 8023b64:	9e08      	ldr	r6, [sp, #32]
 8023b66:	f816 8000 	ldrb.w	r8, [r6, r0]
 8023b6a:	1837      	adds	r7, r6, r0
 8023b6c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023b70:	eb04 0c08 	add.w	ip, r4, r8
 8023b74:	2b00      	cmp	r3, #0
 8023b76:	d060      	beq.n	8023c3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023b78:	787e      	ldrb	r6, [r7, #1]
 8023b7a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023b7e:	4426      	add	r6, r4
 8023b80:	2900      	cmp	r1, #0
 8023b82:	d062      	beq.n	8023c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8023b84:	18b8      	adds	r0, r7, r2
 8023b86:	5cba      	ldrb	r2, [r7, r2]
 8023b88:	7840      	ldrb	r0, [r0, #1]
 8023b8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b8e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023b92:	4422      	add	r2, r4
 8023b94:	4420      	add	r0, r4
 8023b96:	b29b      	uxth	r3, r3
 8023b98:	78b7      	ldrb	r7, [r6, #2]
 8023b9a:	b289      	uxth	r1, r1
 8023b9c:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023ba0:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023ba4:	fb03 f901 	mul.w	r9, r3, r1
 8023ba8:	011b      	lsls	r3, r3, #4
 8023baa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023bae:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023bb2:	eba3 0309 	sub.w	r3, r3, r9
 8023bb6:	b289      	uxth	r1, r1
 8023bb8:	b29b      	uxth	r3, r3
 8023bba:	ebae 0e01 	sub.w	lr, lr, r1
 8023bbe:	435f      	muls	r7, r3
 8023bc0:	fa1f fe8e 	uxth.w	lr, lr
 8023bc4:	fb0e 770a 	mla	r7, lr, sl, r7
 8023bc8:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023bcc:	fb01 770a 	mla	r7, r1, sl, r7
 8023bd0:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023bd4:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023bd8:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023bdc:	f896 8000 	ldrb.w	r8, [r6]
 8023be0:	7876      	ldrb	r6, [r6, #1]
 8023be2:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8023be6:	fb03 f808 	mul.w	r8, r3, r8
 8023bea:	4373      	muls	r3, r6
 8023bec:	7856      	ldrb	r6, [r2, #1]
 8023bee:	fb0e 8807 	mla	r8, lr, r7, r8
 8023bf2:	7817      	ldrb	r7, [r2, #0]
 8023bf4:	fb0e 330c 	mla	r3, lr, ip, r3
 8023bf8:	fb01 8807 	mla	r8, r1, r7, r8
 8023bfc:	7807      	ldrb	r7, [r0, #0]
 8023bfe:	fb01 3306 	mla	r3, r1, r6, r3
 8023c02:	fb09 8707 	mla	r7, r9, r7, r8
 8023c06:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023c0a:	ea4a 0707 	orr.w	r7, sl, r7
 8023c0e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023c12:	fb09 3a0a 	mla	sl, r9, sl, r3
 8023c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c18:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023c1c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023c20:	ea47 070a 	orr.w	r7, r7, sl
 8023c24:	f823 7b02 	strh.w	r7, [r3], #2
 8023c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8023c2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023c2c:	449b      	add	fp, r3
 8023c2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023c30:	441d      	add	r5, r3
 8023c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c34:	3b01      	subs	r3, #1
 8023c36:	9309      	str	r3, [sp, #36]	; 0x24
 8023c38:	e714      	b.n	8023a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8023c3a:	b149      	cbz	r1, 8023c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8023c3c:	5cba      	ldrb	r2, [r7, r2]
 8023c3e:	4660      	mov	r0, ip
 8023c40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c44:	4422      	add	r2, r4
 8023c46:	4666      	mov	r6, ip
 8023c48:	e7a5      	b.n	8023b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8023c4a:	4660      	mov	r0, ip
 8023c4c:	4662      	mov	r2, ip
 8023c4e:	e7a2      	b.n	8023b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8023c50:	4660      	mov	r0, ip
 8023c52:	4662      	mov	r2, ip
 8023c54:	e7f7      	b.n	8023c46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8023c56:	b00f      	add	sp, #60	; 0x3c
 8023c58:	ecbd 8b08 	vpop	{d8-d11}
 8023c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023c60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8023c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c64:	880e      	ldrh	r6, [r1, #0]
 8023c66:	b085      	sub	sp, #20
 8023c68:	4691      	mov	r9, r2
 8023c6a:	ea4f 2e26 	mov.w	lr, r6, asr #8
 8023c6e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8023c72:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8023c76:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8023c7a:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 8023c7e:	00f6      	lsls	r6, r6, #3
 8023c80:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023c84:	9200      	str	r2, [sp, #0]
 8023c86:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8023c8a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8023c8e:	9201      	str	r2, [sp, #4]
 8023c90:	b2f2      	uxtb	r2, r6
 8023c92:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8023c96:	9202      	str	r2, [sp, #8]
 8023c98:	fb04 560c 	mla	r6, r4, ip, r5
 8023c9c:	2c00      	cmp	r4, #0
 8023c9e:	eb09 0e06 	add.w	lr, r9, r6
 8023ca2:	db3e      	blt.n	8023d22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8023ca4:	45a0      	cmp	r8, r4
 8023ca6:	dd3c      	ble.n	8023d22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8023ca8:	2d00      	cmp	r5, #0
 8023caa:	db38      	blt.n	8023d1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8023cac:	45ac      	cmp	ip, r5
 8023cae:	dd36      	ble.n	8023d1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8023cb0:	f819 2006 	ldrb.w	r2, [r9, r6]
 8023cb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023cb8:	1c6e      	adds	r6, r5, #1
 8023cba:	d435      	bmi.n	8023d28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8023cbc:	45b4      	cmp	ip, r6
 8023cbe:	dd33      	ble.n	8023d28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8023cc0:	b3a0      	cbz	r0, 8023d2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 8023cc2:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8023cc6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8023cca:	3401      	adds	r4, #1
 8023ccc:	d432      	bmi.n	8023d34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8023cce:	45a0      	cmp	r8, r4
 8023cd0:	dd30      	ble.n	8023d34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8023cd2:	b397      	cbz	r7, 8023d3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8023cd4:	2d00      	cmp	r5, #0
 8023cd6:	db2b      	blt.n	8023d30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8023cd8:	45ac      	cmp	ip, r5
 8023cda:	dd29      	ble.n	8023d30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8023cdc:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8023ce0:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8023ce4:	3501      	adds	r5, #1
 8023ce6:	d42b      	bmi.n	8023d40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8023ce8:	45ac      	cmp	ip, r5
 8023cea:	dd29      	ble.n	8023d40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8023cec:	b350      	cbz	r0, 8023d44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 8023cee:	44f4      	add	ip, lr
 8023cf0:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023cf4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8023cf8:	280f      	cmp	r0, #15
 8023cfa:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8023cfe:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023d02:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023d06:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8023d0a:	d801      	bhi.n	8023d10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 8023d0c:	2f0f      	cmp	r7, #15
 8023d0e:	d91b      	bls.n	8023d48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 8023d10:	4b85      	ldr	r3, [pc, #532]	; (8023f28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8023d12:	f240 210d 	movw	r1, #525	; 0x20d
 8023d16:	4a85      	ldr	r2, [pc, #532]	; (8023f2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8023d18:	4885      	ldr	r0, [pc, #532]	; (8023f30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d0>)
 8023d1a:	f005 fcdb 	bl	80296d4 <__assert_func>
 8023d1e:	2200      	movs	r2, #0
 8023d20:	e7ca      	b.n	8023cb8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 8023d22:	2600      	movs	r6, #0
 8023d24:	4632      	mov	r2, r6
 8023d26:	e7d0      	b.n	8023cca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8023d28:	2600      	movs	r6, #0
 8023d2a:	e7ce      	b.n	8023cca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8023d2c:	4606      	mov	r6, r0
 8023d2e:	e7cc      	b.n	8023cca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8023d30:	2400      	movs	r4, #0
 8023d32:	e7d7      	b.n	8023ce4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 8023d34:	2300      	movs	r3, #0
 8023d36:	461c      	mov	r4, r3
 8023d38:	e7de      	b.n	8023cf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8023d3a:	463b      	mov	r3, r7
 8023d3c:	463c      	mov	r4, r7
 8023d3e:	e7db      	b.n	8023cf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8023d40:	2300      	movs	r3, #0
 8023d42:	e7d9      	b.n	8023cf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8023d44:	4603      	mov	r3, r0
 8023d46:	e7d7      	b.n	8023cf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8023d48:	b280      	uxth	r0, r0
 8023d4a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023d4e:	b2bf      	uxth	r7, r7
 8023d50:	fb00 fe07 	mul.w	lr, r0, r7
 8023d54:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8023d58:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023d5c:	eba0 0c0e 	sub.w	ip, r0, lr
 8023d60:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8023d64:	b2bf      	uxth	r7, r7
 8023d66:	fa1f fc8c 	uxth.w	ip, ip
 8023d6a:	eba5 0507 	sub.w	r5, r5, r7
 8023d6e:	fb0c f00a 	mul.w	r0, ip, sl
 8023d72:	b2ad      	uxth	r5, r5
 8023d74:	fb05 000b 	mla	r0, r5, fp, r0
 8023d78:	fb07 0009 	mla	r0, r7, r9, r0
 8023d7c:	fb0e 0008 	mla	r0, lr, r8, r0
 8023d80:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023d84:	9003      	str	r0, [sp, #12]
 8023d86:	d018      	beq.n	8023dba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x15a>
 8023d88:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8023d8c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023d90:	fb0b f000 	mul.w	r0, fp, r0
 8023d94:	fb0b fb02 	mul.w	fp, fp, r2
 8023d98:	0a02      	lsrs	r2, r0, #8
 8023d9a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023d9e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023da2:	4402      	add	r2, r0
 8023da4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8023da8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8023dac:	0a12      	lsrs	r2, r2, #8
 8023dae:	0a00      	lsrs	r0, r0, #8
 8023db0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023db4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023db8:	4302      	orrs	r2, r0
 8023dba:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023dbe:	d019      	beq.n	8023df4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x194>
 8023dc0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8023dc4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023dc8:	fb0a fb0b 	mul.w	fp, sl, fp
 8023dcc:	fb0a fa06 	mul.w	sl, sl, r6
 8023dd0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8023dd4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023dd8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8023ddc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023de0:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8023de4:	445e      	add	r6, fp
 8023de6:	0a00      	lsrs	r0, r0, #8
 8023de8:	0a36      	lsrs	r6, r6, #8
 8023dea:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023dee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023df2:	4306      	orrs	r6, r0
 8023df4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023df8:	d019      	beq.n	8023e2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ce>
 8023dfa:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8023dfe:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023e02:	fb09 fa0a 	mul.w	sl, r9, sl
 8023e06:	fb09 f904 	mul.w	r9, r9, r4
 8023e0a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023e0e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023e12:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8023e16:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023e1a:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8023e1e:	4454      	add	r4, sl
 8023e20:	0a00      	lsrs	r0, r0, #8
 8023e22:	0a24      	lsrs	r4, r4, #8
 8023e24:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023e28:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023e2c:	4304      	orrs	r4, r0
 8023e2e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023e32:	d019      	beq.n	8023e68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x208>
 8023e34:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8023e38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e3c:	fb08 f909 	mul.w	r9, r8, r9
 8023e40:	fb08 f803 	mul.w	r8, r8, r3
 8023e44:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8023e48:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023e4c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8023e50:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e54:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8023e58:	444b      	add	r3, r9
 8023e5a:	0a00      	lsrs	r0, r0, #8
 8023e5c:	0a1b      	lsrs	r3, r3, #8
 8023e5e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023e62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e66:	4303      	orrs	r3, r0
 8023e68:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023e6c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8023e70:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023e74:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023e78:	fb0c f808 	mul.w	r8, ip, r8
 8023e7c:	fb0c f606 	mul.w	r6, ip, r6
 8023e80:	fb05 8800 	mla	r8, r5, r0, r8
 8023e84:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8023e88:	fb05 6202 	mla	r2, r5, r2, r6
 8023e8c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8023e90:	fb07 8800 	mla	r8, r7, r0, r8
 8023e94:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8023e98:	b2ad      	uxth	r5, r5
 8023e9a:	fb0e 8000 	mla	r0, lr, r0, r8
 8023e9e:	0a00      	lsrs	r0, r0, #8
 8023ea0:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8023ea4:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8023ea8:	9c00      	ldr	r4, [sp, #0]
 8023eaa:	fb07 2700 	mla	r7, r7, r0, r2
 8023eae:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8023eb2:	9b03      	ldr	r3, [sp, #12]
 8023eb4:	fb0e 7000 	mla	r0, lr, r0, r7
 8023eb8:	436b      	muls	r3, r5
 8023eba:	0a00      	lsrs	r0, r0, #8
 8023ebc:	1c5a      	adds	r2, r3, #1
 8023ebe:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023ec2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023ec6:	ea48 0000 	orr.w	r0, r8, r0
 8023eca:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8023ece:	0c03      	lsrs	r3, r0, #16
 8023ed0:	b2d2      	uxtb	r2, r2
 8023ed2:	fb14 f602 	smulbb	r6, r4, r2
 8023ed6:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8023eda:	b2c0      	uxtb	r0, r0
 8023edc:	fb03 6305 	mla	r3, r3, r5, r6
 8023ee0:	b29e      	uxth	r6, r3
 8023ee2:	9b01      	ldr	r3, [sp, #4]
 8023ee4:	fb13 f302 	smulbb	r3, r3, r2
 8023ee8:	fb04 3405 	mla	r4, r4, r5, r3
 8023eec:	9b02      	ldr	r3, [sp, #8]
 8023eee:	fb13 f202 	smulbb	r2, r3, r2
 8023ef2:	b2a4      	uxth	r4, r4
 8023ef4:	1c73      	adds	r3, r6, #1
 8023ef6:	fb00 2005 	mla	r0, r0, r5, r2
 8023efa:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8023efe:	b280      	uxth	r0, r0
 8023f00:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023f04:	1c42      	adds	r2, r0, #1
 8023f06:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023f0a:	1c62      	adds	r2, r4, #1
 8023f0c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023f10:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8023f14:	0952      	lsrs	r2, r2, #5
 8023f16:	4303      	orrs	r3, r0
 8023f18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023f1c:	4313      	orrs	r3, r2
 8023f1e:	800b      	strh	r3, [r1, #0]
 8023f20:	b005      	add	sp, #20
 8023f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f26:	bf00      	nop
 8023f28:	0802e1e2 	.word	0x0802e1e2
 8023f2c:	0802e7a5 	.word	0x0802e7a5
 8023f30:	0802e2cb 	.word	0x0802e2cb

08023f34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f38:	ed2d 8b08 	vpush	{d8-d11}
 8023f3c:	b09f      	sub	sp, #124	; 0x7c
 8023f3e:	eeb0 aa40 	vmov.f32	s20, s0
 8023f42:	eef0 9a60 	vmov.f32	s19, s1
 8023f46:	921b      	str	r2, [sp, #108]	; 0x6c
 8023f48:	eeb0 9a41 	vmov.f32	s18, s2
 8023f4c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8023f4e:	eeb0 8a62 	vmov.f32	s16, s5
 8023f52:	9309      	str	r3, [sp, #36]	; 0x24
 8023f54:	eef0 8a43 	vmov.f32	s17, s6
 8023f58:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8023f5c:	eef0 ba44 	vmov.f32	s23, s8
 8023f60:	901d      	str	r0, [sp, #116]	; 0x74
 8023f62:	eeb0 ba64 	vmov.f32	s22, s9
 8023f66:	931c      	str	r3, [sp, #112]	; 0x70
 8023f68:	eef0 aa45 	vmov.f32	s21, s10
 8023f6c:	6850      	ldr	r0, [r2, #4]
 8023f6e:	9119      	str	r1, [sp, #100]	; 0x64
 8023f70:	6812      	ldr	r2, [r2, #0]
 8023f72:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8023f74:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8023f78:	fb00 1303 	mla	r3, r0, r3, r1
 8023f7c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023f80:	930c      	str	r3, [sp, #48]	; 0x30
 8023f82:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8023f84:	681b      	ldr	r3, [r3, #0]
 8023f86:	9312      	str	r3, [sp, #72]	; 0x48
 8023f88:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8023f8a:	685e      	ldr	r6, [r3, #4]
 8023f8c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8023f90:	3604      	adds	r6, #4
 8023f92:	930d      	str	r3, [sp, #52]	; 0x34
 8023f94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023f96:	2b00      	cmp	r3, #0
 8023f98:	dc03      	bgt.n	8023fa2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023f9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	f340 838d 	ble.w	80246bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 8023fa2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8023fa4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023fa8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023fac:	1e48      	subs	r0, r1, #1
 8023fae:	1e57      	subs	r7, r2, #1
 8023fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fb2:	2b00      	cmp	r3, #0
 8023fb4:	f340 819a 	ble.w	80242ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8023fb8:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8023fba:	142b      	asrs	r3, r5, #16
 8023fbc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023fc0:	d406      	bmi.n	8023fd0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023fc2:	4584      	cmp	ip, r0
 8023fc4:	da04      	bge.n	8023fd0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023fc6:	2b00      	cmp	r3, #0
 8023fc8:	db02      	blt.n	8023fd0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023fca:	42bb      	cmp	r3, r7
 8023fcc:	f2c0 818f 	blt.w	80242ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8023fd0:	f11c 0c01 	adds.w	ip, ip, #1
 8023fd4:	f100 817d 	bmi.w	80242d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8023fd8:	4561      	cmp	r1, ip
 8023fda:	f2c0 817a 	blt.w	80242d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8023fde:	3301      	adds	r3, #1
 8023fe0:	f100 8177 	bmi.w	80242d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8023fe4:	429a      	cmp	r2, r3
 8023fe6:	f2c0 8174 	blt.w	80242d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8023fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023fee:	931a      	str	r3, [sp, #104]	; 0x68
 8023ff0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023ff2:	2b00      	cmp	r3, #0
 8023ff4:	f340 8199 	ble.w	802432a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8023ff8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023ffa:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023ffe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024002:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024006:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024008:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802400c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802400e:	141b      	asrs	r3, r3, #16
 8024010:	f100 81dc 	bmi.w	80243cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8024014:	f100 38ff 	add.w	r8, r0, #4294967295
 8024018:	4543      	cmp	r3, r8
 802401a:	f280 81d7 	bge.w	80243cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802401e:	f1bc 0f00 	cmp.w	ip, #0
 8024022:	f2c0 81d3 	blt.w	80243cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8024026:	f10e 38ff 	add.w	r8, lr, #4294967295
 802402a:	45c4      	cmp	ip, r8
 802402c:	f280 81ce 	bge.w	80243cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8024030:	b200      	sxth	r0, r0
 8024032:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024034:	fb0c 3300 	mla	r3, ip, r0, r3
 8024038:	eb04 0803 	add.w	r8, r4, r3
 802403c:	5ce3      	ldrb	r3, [r4, r3]
 802403e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024042:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024046:	2a00      	cmp	r2, #0
 8024048:	f000 81b5 	beq.w	80243b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802404c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024050:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024054:	940e      	str	r4, [sp, #56]	; 0x38
 8024056:	0e24      	lsrs	r4, r4, #24
 8024058:	9415      	str	r4, [sp, #84]	; 0x54
 802405a:	b179      	cbz	r1, 802407c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802405c:	eb08 0c00 	add.w	ip, r8, r0
 8024060:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024064:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024068:	900a      	str	r0, [sp, #40]	; 0x28
 802406a:	0e00      	lsrs	r0, r0, #24
 802406c:	9013      	str	r0, [sp, #76]	; 0x4c
 802406e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024072:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024076:	900f      	str	r0, [sp, #60]	; 0x3c
 8024078:	0e00      	lsrs	r0, r0, #24
 802407a:	9016      	str	r0, [sp, #88]	; 0x58
 802407c:	b292      	uxth	r2, r2
 802407e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024080:	b289      	uxth	r1, r1
 8024082:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024084:	fb02 f901 	mul.w	r9, r2, r1
 8024088:	0112      	lsls	r2, r2, #4
 802408a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802408e:	eba2 0809 	sub.w	r8, r2, r9
 8024092:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024096:	b289      	uxth	r1, r1
 8024098:	fa1f f888 	uxth.w	r8, r8
 802409c:	1a52      	subs	r2, r2, r1
 802409e:	fb08 f000 	mul.w	r0, r8, r0
 80240a2:	b292      	uxth	r2, r2
 80240a4:	fb02 000e 	mla	r0, r2, lr, r0
 80240a8:	fb01 0004 	mla	r0, r1, r4, r0
 80240ac:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80240ae:	fb09 0004 	mla	r0, r9, r4, r0
 80240b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80240b6:	2800      	cmp	r0, #0
 80240b8:	f000 8100 	beq.w	80242bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80240bc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80240c0:	d01b      	beq.n	80240fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80240c2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80240c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80240ca:	fb0e fa0a 	mul.w	sl, lr, sl
 80240ce:	fb0e fe03 	mul.w	lr, lr, r3
 80240d2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80240d6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80240da:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80240de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80240e2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80240e6:	4453      	add	r3, sl
 80240e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240ec:	0a1b      	lsrs	r3, r3, #8
 80240ee:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80240f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80240f6:	ea43 030c 	orr.w	r3, r3, ip
 80240fa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80240fc:	2cff      	cmp	r4, #255	; 0xff
 80240fe:	d021      	beq.n	8024144 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8024100:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024102:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024106:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024108:	fb04 fb0b 	mul.w	fp, r4, fp
 802410c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802410e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024112:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024114:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024118:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802411c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024120:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024124:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024128:	44de      	add	lr, fp
 802412a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802412e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024132:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024136:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802413a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802413e:	ea4e 040a 	orr.w	r4, lr, sl
 8024142:	940e      	str	r4, [sp, #56]	; 0x38
 8024144:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024146:	2cff      	cmp	r4, #255	; 0xff
 8024148:	d021      	beq.n	802418e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802414a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802414c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024150:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024152:	fb04 fb0b 	mul.w	fp, r4, fp
 8024156:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024158:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802415c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802415e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024162:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024166:	fb04 fa0a 	mul.w	sl, r4, sl
 802416a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802416e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024172:	44de      	add	lr, fp
 8024174:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024178:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802417c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024180:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024184:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024188:	ea4e 040a 	orr.w	r4, lr, sl
 802418c:	940a      	str	r4, [sp, #40]	; 0x28
 802418e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024190:	2cff      	cmp	r4, #255	; 0xff
 8024192:	d021      	beq.n	80241d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024194:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024196:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802419a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802419c:	fb04 fb0b 	mul.w	fp, r4, fp
 80241a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80241a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80241a6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80241a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80241ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80241b0:	fb04 fa0a 	mul.w	sl, r4, sl
 80241b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80241b8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80241bc:	44de      	add	lr, fp
 80241be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80241c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80241c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80241ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80241ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80241d2:	ea4e 040a 	orr.w	r4, lr, sl
 80241d6:	940f      	str	r4, [sp, #60]	; 0x3c
 80241d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80241da:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80241de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80241e2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80241e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80241e8:	fb08 fc0c 	mul.w	ip, r8, ip
 80241ec:	fb02 cc0e 	mla	ip, r2, lr, ip
 80241f0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80241f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80241f6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80241fa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80241fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024200:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024204:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024208:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802420a:	fb08 f80e 	mul.w	r8, r8, lr
 802420e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024212:	f8b7 e000 	ldrh.w	lr, [r7]
 8024216:	fb02 8303 	mla	r3, r2, r3, r8
 802421a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802421c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024220:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024224:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024226:	fb01 330a 	mla	r3, r1, sl, r3
 802422a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802422e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024230:	fb09 3901 	mla	r9, r9, r1, r3
 8024234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024236:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802423a:	4343      	muls	r3, r0
 802423c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024240:	1c58      	adds	r0, r3, #1
 8024242:	ea4c 0c09 	orr.w	ip, ip, r9
 8024246:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802424a:	ea4f 232e 	mov.w	r3, lr, asr #8
 802424e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8024252:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024256:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802425a:	fb11 f102 	smulbb	r1, r1, r2
 802425e:	b2c0      	uxtb	r0, r0
 8024260:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8024264:	fb03 1300 	mla	r3, r3, r0, r1
 8024268:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802426c:	b299      	uxth	r1, r3
 802426e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024272:	fa5f fc8c 	uxtb.w	ip, ip
 8024276:	fb13 f304 	smulbb	r3, r3, r4
 802427a:	fb1c fc04 	smulbb	ip, ip, r4
 802427e:	fb02 3200 	mla	r2, r2, r0, r3
 8024282:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8024286:	b2db      	uxtb	r3, r3
 8024288:	b292      	uxth	r2, r2
 802428a:	fb03 cc00 	mla	ip, r3, r0, ip
 802428e:	1c4b      	adds	r3, r1, #1
 8024290:	fa1f fc8c 	uxth.w	ip, ip
 8024294:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024298:	1c51      	adds	r1, r2, #1
 802429a:	f10c 0001 	add.w	r0, ip, #1
 802429e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80242a2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80242a6:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 80242aa:	0952      	lsrs	r2, r2, #5
 80242ac:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80242b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80242b4:	ea43 030c 	orr.w	r3, r3, ip
 80242b8:	4313      	orrs	r3, r2
 80242ba:	803b      	strh	r3, [r7, #0]
 80242bc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80242be:	3702      	adds	r7, #2
 80242c0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80242c2:	441a      	add	r2, r3
 80242c4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80242c6:	441d      	add	r5, r3
 80242c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80242ca:	9231      	str	r2, [sp, #196]	; 0xc4
 80242cc:	3b01      	subs	r3, #1
 80242ce:	931a      	str	r3, [sp, #104]	; 0x68
 80242d0:	e68e      	b.n	8023ff0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80242d2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80242d4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80242d6:	441c      	add	r4, r3
 80242d8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80242da:	441d      	add	r5, r3
 80242dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242de:	9431      	str	r4, [sp, #196]	; 0xc4
 80242e0:	3b01      	subs	r3, #1
 80242e2:	9309      	str	r3, [sp, #36]	; 0x24
 80242e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80242e6:	3302      	adds	r3, #2
 80242e8:	930c      	str	r3, [sp, #48]	; 0x30
 80242ea:	e661      	b.n	8023fb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80242ec:	d024      	beq.n	8024338 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80242ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242f0:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80242f2:	3b01      	subs	r3, #1
 80242f4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80242f6:	fb00 4003 	mla	r0, r0, r3, r4
 80242fa:	1400      	asrs	r0, r0, #16
 80242fc:	f53f ae75 	bmi.w	8023fea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024300:	3901      	subs	r1, #1
 8024302:	4288      	cmp	r0, r1
 8024304:	f6bf ae71 	bge.w	8023fea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024308:	9934      	ldr	r1, [sp, #208]	; 0xd0
 802430a:	fb01 5303 	mla	r3, r1, r3, r5
 802430e:	141b      	asrs	r3, r3, #16
 8024310:	f53f ae6b 	bmi.w	8023fea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024314:	3a01      	subs	r2, #1
 8024316:	4293      	cmp	r3, r2
 8024318:	f6bf ae67 	bge.w	8023fea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802431c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024320:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8024324:	f1bb 0f00 	cmp.w	fp, #0
 8024328:	dc70      	bgt.n	802440c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802432a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802432c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024332:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024336:	930c      	str	r3, [sp, #48]	; 0x30
 8024338:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802433a:	2b00      	cmp	r3, #0
 802433c:	f340 81be 	ble.w	80246bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 8024340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024344:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024346:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802434a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802434e:	eef0 6a48 	vmov.f32	s13, s16
 8024352:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024356:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802435a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802435e:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8024362:	eef0 6a68 	vmov.f32	s13, s17
 8024366:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802436a:	ee16 5a90 	vmov	r5, s13
 802436e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024372:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024376:	ee37 8a48 	vsub.f32	s16, s14, s16
 802437a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802437e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024382:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024386:	ee18 2a10 	vmov	r2, s16
 802438a:	eeb0 8a47 	vmov.f32	s16, s14
 802438e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024392:	ee18 2a90 	vmov	r2, s17
 8024396:	9333      	str	r3, [sp, #204]	; 0xcc
 8024398:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802439a:	eef0 8a67 	vmov.f32	s17, s15
 802439e:	fb92 f3f3 	sdiv	r3, r2, r3
 80243a2:	9334      	str	r3, [sp, #208]	; 0xd0
 80243a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80243a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80243a8:	3b01      	subs	r3, #1
 80243aa:	9319      	str	r3, [sp, #100]	; 0x64
 80243ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80243ae:	bf08      	it	eq
 80243b0:	4613      	moveq	r3, r2
 80243b2:	9309      	str	r3, [sp, #36]	; 0x24
 80243b4:	e5ee      	b.n	8023f94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80243b6:	2900      	cmp	r1, #0
 80243b8:	f43f ae60 	beq.w	802407c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80243bc:	f818 0000 	ldrb.w	r0, [r8, r0]
 80243c0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80243c4:	900a      	str	r0, [sp, #40]	; 0x28
 80243c6:	0e00      	lsrs	r0, r0, #24
 80243c8:	9013      	str	r0, [sp, #76]	; 0x4c
 80243ca:	e657      	b.n	802407c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80243cc:	f113 0801 	adds.w	r8, r3, #1
 80243d0:	f53f af74 	bmi.w	80242bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80243d4:	4540      	cmp	r0, r8
 80243d6:	f6ff af71 	blt.w	80242bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80243da:	f11c 0801 	adds.w	r8, ip, #1
 80243de:	f53f af6d 	bmi.w	80242bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80243e2:	45c6      	cmp	lr, r8
 80243e4:	f6ff af6a 	blt.w	80242bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80243e8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80243ea:	b200      	sxth	r0, r0
 80243ec:	9302      	str	r3, [sp, #8]
 80243ee:	fa0f f38e 	sxth.w	r3, lr
 80243f2:	9000      	str	r0, [sp, #0]
 80243f4:	9301      	str	r3, [sp, #4]
 80243f6:	4633      	mov	r3, r6
 80243f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80243fa:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80243fe:	e9cd c203 	strd	ip, r2, [sp, #12]
 8024402:	4639      	mov	r1, r7
 8024404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024406:	f7ff fc2b 	bl	8023c60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 802440a:	e757      	b.n	80242bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 802440c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802440e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024412:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024414:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024418:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802441a:	1427      	asrs	r7, r4, #16
 802441c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802441e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024422:	142b      	asrs	r3, r5, #16
 8024424:	fb01 7303 	mla	r3, r1, r3, r7
 8024428:	18e7      	adds	r7, r4, r3
 802442a:	5ce3      	ldrb	r3, [r4, r3]
 802442c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024430:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024434:	2a00      	cmp	r2, #0
 8024436:	f000 8137 	beq.w	80246a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 802443a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802443e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8024442:	9410      	str	r4, [sp, #64]	; 0x40
 8024444:	0e24      	lsrs	r4, r4, #24
 8024446:	9417      	str	r4, [sp, #92]	; 0x5c
 8024448:	b170      	cbz	r0, 8024468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802444a:	eb07 0e01 	add.w	lr, r7, r1
 802444e:	5c79      	ldrb	r1, [r7, r1]
 8024450:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024454:	910b      	str	r1, [sp, #44]	; 0x2c
 8024456:	0e09      	lsrs	r1, r1, #24
 8024458:	9114      	str	r1, [sp, #80]	; 0x50
 802445a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802445e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024462:	9111      	str	r1, [sp, #68]	; 0x44
 8024464:	0e09      	lsrs	r1, r1, #24
 8024466:	9118      	str	r1, [sp, #96]	; 0x60
 8024468:	b292      	uxth	r2, r2
 802446a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802446c:	b280      	uxth	r0, r0
 802446e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024470:	fb02 f800 	mul.w	r8, r2, r0
 8024474:	0112      	lsls	r2, r2, #4
 8024476:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802447a:	eba2 0e08 	sub.w	lr, r2, r8
 802447e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024482:	b280      	uxth	r0, r0
 8024484:	fa1f fe8e 	uxth.w	lr, lr
 8024488:	1a12      	subs	r2, r2, r0
 802448a:	fb0e f101 	mul.w	r1, lr, r1
 802448e:	b292      	uxth	r2, r2
 8024490:	fb02 110c 	mla	r1, r2, ip, r1
 8024494:	fb00 1104 	mla	r1, r0, r4, r1
 8024498:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802449a:	fb08 1104 	mla	r1, r8, r4, r1
 802449e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80244a2:	2900      	cmp	r1, #0
 80244a4:	f000 80f5 	beq.w	8024692 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 80244a8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80244ac:	d019      	beq.n	80244e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ae>
 80244ae:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80244b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80244b6:	fb0c fa0a 	mul.w	sl, ip, sl
 80244ba:	fb0c fc03 	mul.w	ip, ip, r3
 80244be:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80244c2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80244c6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80244ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80244ce:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80244d2:	4453      	add	r3, sl
 80244d4:	0a3f      	lsrs	r7, r7, #8
 80244d6:	0a1b      	lsrs	r3, r3, #8
 80244d8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80244dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80244e0:	433b      	orrs	r3, r7
 80244e2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80244e4:	2cff      	cmp	r4, #255	; 0xff
 80244e6:	d020      	beq.n	802452a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 80244e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80244ea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80244ee:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80244f0:	4367      	muls	r7, r4
 80244f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80244f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80244f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80244fc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80244fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024502:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024506:	fb04 fa0a 	mul.w	sl, r4, sl
 802450a:	44bc      	add	ip, r7
 802450c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024510:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024514:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024518:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802451c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024520:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024524:	ea4c 040a 	orr.w	r4, ip, sl
 8024528:	9410      	str	r4, [sp, #64]	; 0x40
 802452a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802452c:	2cff      	cmp	r4, #255	; 0xff
 802452e:	d020      	beq.n	8024572 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x63e>
 8024530:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024532:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024536:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024538:	4367      	muls	r7, r4
 802453a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802453c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024540:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024544:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024546:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802454a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802454e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024552:	44bc      	add	ip, r7
 8024554:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024558:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802455c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024560:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024564:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024568:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802456c:	ea4c 040a 	orr.w	r4, ip, sl
 8024570:	940b      	str	r4, [sp, #44]	; 0x2c
 8024572:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024574:	2cff      	cmp	r4, #255	; 0xff
 8024576:	d020      	beq.n	80245ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x686>
 8024578:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802457a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802457e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024580:	4367      	muls	r7, r4
 8024582:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024584:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024588:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802458c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802458e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024592:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024596:	fb04 fa0a 	mul.w	sl, r4, sl
 802459a:	44bc      	add	ip, r7
 802459c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80245a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80245a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80245a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80245ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80245b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80245b4:	ea4c 040a 	orr.w	r4, ip, sl
 80245b8:	9411      	str	r4, [sp, #68]	; 0x44
 80245ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80245bc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80245c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80245c4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80245c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80245ca:	fb0e f707 	mul.w	r7, lr, r7
 80245ce:	fb02 770c 	mla	r7, r2, ip, r7
 80245d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80245d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80245d8:	fb00 770c 	mla	r7, r0, ip, r7
 80245dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80245e0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80245e2:	fb08 770c 	mla	r7, r8, ip, r7
 80245e6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80245ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80245ec:	fb0e fe0c 	mul.w	lr, lr, ip
 80245f0:	0a3f      	lsrs	r7, r7, #8
 80245f2:	fb02 e303 	mla	r3, r2, r3, lr
 80245f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80245f8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80245fc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024600:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024602:	fb00 330a 	mla	r3, r0, sl, r3
 8024606:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802460a:	f8b9 0000 	ldrh.w	r0, [r9]
 802460e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024614:	1202      	asrs	r2, r0, #8
 8024616:	434b      	muls	r3, r1
 8024618:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802461c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024620:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024624:	1c59      	adds	r1, r3, #1
 8024626:	ea47 070c 	orr.w	r7, r7, ip
 802462a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802462e:	0c3b      	lsrs	r3, r7, #16
 8024630:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024634:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024638:	b2ff      	uxtb	r7, r7
 802463a:	fb13 f304 	smulbb	r3, r3, r4
 802463e:	b2c9      	uxtb	r1, r1
 8024640:	fb1c fc04 	smulbb	ip, ip, r4
 8024644:	fb02 3201 	mla	r2, r2, r1, r3
 8024648:	10c3      	asrs	r3, r0, #3
 802464a:	fb17 f704 	smulbb	r7, r7, r4
 802464e:	00c0      	lsls	r0, r0, #3
 8024650:	b292      	uxth	r2, r2
 8024652:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024656:	b2c0      	uxtb	r0, r0
 8024658:	fb03 c301 	mla	r3, r3, r1, ip
 802465c:	f102 0c01 	add.w	ip, r2, #1
 8024660:	fb00 7001 	mla	r0, r0, r1, r7
 8024664:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024668:	b280      	uxth	r0, r0
 802466a:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 802466e:	b29b      	uxth	r3, r3
 8024670:	1c42      	adds	r2, r0, #1
 8024672:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024676:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802467a:	ea4c 0200 	orr.w	r2, ip, r0
 802467e:	f103 0c01 	add.w	ip, r3, #1
 8024682:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024686:	095b      	lsrs	r3, r3, #5
 8024688:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802468c:	431a      	orrs	r2, r3
 802468e:	f8a9 2000 	strh.w	r2, [r9]
 8024692:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024694:	f109 0902 	add.w	r9, r9, #2
 8024698:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802469a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802469e:	441a      	add	r2, r3
 80246a0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80246a2:	9231      	str	r2, [sp, #196]	; 0xc4
 80246a4:	441d      	add	r5, r3
 80246a6:	e63d      	b.n	8024324 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80246a8:	2800      	cmp	r0, #0
 80246aa:	f43f aedd 	beq.w	8024468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 80246ae:	5c79      	ldrb	r1, [r7, r1]
 80246b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80246b4:	910b      	str	r1, [sp, #44]	; 0x2c
 80246b6:	0e09      	lsrs	r1, r1, #24
 80246b8:	9114      	str	r1, [sp, #80]	; 0x50
 80246ba:	e6d5      	b.n	8024468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 80246bc:	b01f      	add	sp, #124	; 0x7c
 80246be:	ecbd 8b08 	vpop	{d8-d11}
 80246c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080246c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80246c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246cc:	880e      	ldrh	r6, [r1, #0]
 80246ce:	b085      	sub	sp, #20
 80246d0:	4691      	mov	r9, r2
 80246d2:	ea4f 2e26 	mov.w	lr, r6, asr #8
 80246d6:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80246da:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80246de:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 80246e2:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 80246e6:	00f6      	lsls	r6, r6, #3
 80246e8:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80246ec:	9200      	str	r2, [sp, #0]
 80246ee:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 80246f2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80246f6:	9201      	str	r2, [sp, #4]
 80246f8:	b2f2      	uxtb	r2, r6
 80246fa:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80246fe:	9202      	str	r2, [sp, #8]
 8024700:	fb04 560c 	mla	r6, r4, ip, r5
 8024704:	2c00      	cmp	r4, #0
 8024706:	eb09 0e06 	add.w	lr, r9, r6
 802470a:	db3e      	blt.n	802478a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 802470c:	45a0      	cmp	r8, r4
 802470e:	dd3c      	ble.n	802478a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 8024710:	2d00      	cmp	r5, #0
 8024712:	db38      	blt.n	8024786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8024714:	45ac      	cmp	ip, r5
 8024716:	dd36      	ble.n	8024786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8024718:	f819 2006 	ldrb.w	r2, [r9, r6]
 802471c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024720:	1c6e      	adds	r6, r5, #1
 8024722:	d435      	bmi.n	8024790 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 8024724:	45b4      	cmp	ip, r6
 8024726:	dd33      	ble.n	8024790 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 8024728:	b3a0      	cbz	r0, 8024794 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 802472a:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802472e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8024732:	3401      	adds	r4, #1
 8024734:	d432      	bmi.n	802479c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 8024736:	45a0      	cmp	r8, r4
 8024738:	dd30      	ble.n	802479c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 802473a:	b397      	cbz	r7, 80247a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 802473c:	2d00      	cmp	r5, #0
 802473e:	db2b      	blt.n	8024798 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8024740:	45ac      	cmp	ip, r5
 8024742:	dd29      	ble.n	8024798 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8024744:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8024748:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 802474c:	3501      	adds	r5, #1
 802474e:	d42b      	bmi.n	80247a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8024750:	45ac      	cmp	ip, r5
 8024752:	dd29      	ble.n	80247a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8024754:	b350      	cbz	r0, 80247ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
 8024756:	44f4      	add	ip, lr
 8024758:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802475c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024760:	280f      	cmp	r0, #15
 8024762:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024766:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802476a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802476e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024772:	d801      	bhi.n	8024778 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
 8024774:	2f0f      	cmp	r7, #15
 8024776:	d91b      	bls.n	80247b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
 8024778:	4b7e      	ldr	r3, [pc, #504]	; (8024974 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 802477a:	f240 210d 	movw	r1, #525	; 0x20d
 802477e:	4a7e      	ldr	r2, [pc, #504]	; (8024978 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8024780:	487e      	ldr	r0, [pc, #504]	; (802497c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8024782:	f004 ffa7 	bl	80296d4 <__assert_func>
 8024786:	2200      	movs	r2, #0
 8024788:	e7ca      	b.n	8024720 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 802478a:	2600      	movs	r6, #0
 802478c:	4632      	mov	r2, r6
 802478e:	e7d0      	b.n	8024732 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8024790:	2600      	movs	r6, #0
 8024792:	e7ce      	b.n	8024732 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8024794:	4606      	mov	r6, r0
 8024796:	e7cc      	b.n	8024732 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8024798:	2400      	movs	r4, #0
 802479a:	e7d7      	b.n	802474c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
 802479c:	2300      	movs	r3, #0
 802479e:	461c      	mov	r4, r3
 80247a0:	e7de      	b.n	8024760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 80247a2:	463b      	mov	r3, r7
 80247a4:	463c      	mov	r4, r7
 80247a6:	e7db      	b.n	8024760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 80247a8:	2300      	movs	r3, #0
 80247aa:	e7d9      	b.n	8024760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 80247ac:	4603      	mov	r3, r0
 80247ae:	e7d7      	b.n	8024760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 80247b0:	b280      	uxth	r0, r0
 80247b2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80247b6:	b2bf      	uxth	r7, r7
 80247b8:	fb00 fe07 	mul.w	lr, r0, r7
 80247bc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80247c0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80247c4:	eba0 0c0e 	sub.w	ip, r0, lr
 80247c8:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80247cc:	b2bf      	uxth	r7, r7
 80247ce:	fa1f fc8c 	uxth.w	ip, ip
 80247d2:	eba5 0507 	sub.w	r5, r5, r7
 80247d6:	fb0c f00a 	mul.w	r0, ip, sl
 80247da:	b2ad      	uxth	r5, r5
 80247dc:	fb05 000b 	mla	r0, r5, fp, r0
 80247e0:	fb07 0009 	mla	r0, r7, r9, r0
 80247e4:	fb0e 0008 	mla	r0, lr, r8, r0
 80247e8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80247ec:	9003      	str	r0, [sp, #12]
 80247ee:	d018      	beq.n	8024822 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15a>
 80247f0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80247f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80247f8:	fb0b f000 	mul.w	r0, fp, r0
 80247fc:	fb0b fb02 	mul.w	fp, fp, r2
 8024800:	0a02      	lsrs	r2, r0, #8
 8024802:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024806:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802480a:	4402      	add	r2, r0
 802480c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024810:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024814:	0a12      	lsrs	r2, r2, #8
 8024816:	0a00      	lsrs	r0, r0, #8
 8024818:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802481c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024820:	4302      	orrs	r2, r0
 8024822:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024826:	d019      	beq.n	802485c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x194>
 8024828:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802482c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024830:	fb0a fb0b 	mul.w	fp, sl, fp
 8024834:	fb0a fa06 	mul.w	sl, sl, r6
 8024838:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802483c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024840:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024844:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024848:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802484c:	445e      	add	r6, fp
 802484e:	0a00      	lsrs	r0, r0, #8
 8024850:	0a36      	lsrs	r6, r6, #8
 8024852:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024856:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802485a:	4306      	orrs	r6, r0
 802485c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024860:	d019      	beq.n	8024896 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ce>
 8024862:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024866:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802486a:	fb09 fa0a 	mul.w	sl, r9, sl
 802486e:	fb09 f904 	mul.w	r9, r9, r4
 8024872:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024876:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802487a:	f509 7080 	add.w	r0, r9, #256	; 0x100
 802487e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024882:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8024886:	4454      	add	r4, sl
 8024888:	0a00      	lsrs	r0, r0, #8
 802488a:	0a24      	lsrs	r4, r4, #8
 802488c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024890:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024894:	4304      	orrs	r4, r0
 8024896:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802489a:	d019      	beq.n	80248d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x208>
 802489c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80248a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248a4:	fb08 f909 	mul.w	r9, r8, r9
 80248a8:	fb08 f803 	mul.w	r8, r8, r3
 80248ac:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80248b0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80248b4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80248b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248bc:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80248c0:	444b      	add	r3, r9
 80248c2:	0a00      	lsrs	r0, r0, #8
 80248c4:	0a1b      	lsrs	r3, r3, #8
 80248c6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80248ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248ce:	4303      	orrs	r3, r0
 80248d0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80248d4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80248d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80248dc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80248e0:	fb0c f808 	mul.w	r8, ip, r8
 80248e4:	fb0c f606 	mul.w	r6, ip, r6
 80248e8:	fb05 8800 	mla	r8, r5, r0, r8
 80248ec:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80248f0:	fb05 6202 	mla	r2, r5, r2, r6
 80248f4:	9d01      	ldr	r5, [sp, #4]
 80248f6:	fb07 8800 	mla	r8, r7, r0, r8
 80248fa:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80248fe:	fb0e 8000 	mla	r0, lr, r0, r8
 8024902:	0a00      	lsrs	r0, r0, #8
 8024904:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8024908:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 802490c:	9c02      	ldr	r4, [sp, #8]
 802490e:	fb07 2700 	mla	r7, r7, r0, r2
 8024912:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8024916:	9b03      	ldr	r3, [sp, #12]
 8024918:	fb0e 7000 	mla	r0, lr, r0, r7
 802491c:	43da      	mvns	r2, r3
 802491e:	9b00      	ldr	r3, [sp, #0]
 8024920:	0a00      	lsrs	r0, r0, #8
 8024922:	b2d2      	uxtb	r2, r2
 8024924:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024928:	4353      	muls	r3, r2
 802492a:	4354      	muls	r4, r2
 802492c:	ea48 0000 	orr.w	r0, r8, r0
 8024930:	4355      	muls	r5, r2
 8024932:	4622      	mov	r2, r4
 8024934:	1c5c      	adds	r4, r3, #1
 8024936:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 802493a:	0c03      	lsrs	r3, r0, #16
 802493c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024940:	4b0f      	ldr	r3, [pc, #60]	; (8024980 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b8>)
 8024942:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8024946:	1c54      	adds	r4, r2, #1
 8024948:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 802494c:	b2c2      	uxtb	r2, r0
 802494e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024952:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024956:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 802495a:	1c6a      	adds	r2, r5, #1
 802495c:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8024960:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024964:	00c0      	lsls	r0, r0, #3
 8024966:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802496a:	4318      	orrs	r0, r3
 802496c:	8008      	strh	r0, [r1, #0]
 802496e:	b005      	add	sp, #20
 8024970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024974:	0802e1e2 	.word	0x0802e1e2
 8024978:	0802e7a5 	.word	0x0802e7a5
 802497c:	0802e2cb 	.word	0x0802e2cb
 8024980:	fffff800 	.word	0xfffff800

08024984 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024988:	ed2d 8b08 	vpush	{d8-d11}
 802498c:	b09b      	sub	sp, #108	; 0x6c
 802498e:	eeb0 aa40 	vmov.f32	s20, s0
 8024992:	eef0 9a60 	vmov.f32	s19, s1
 8024996:	9218      	str	r2, [sp, #96]	; 0x60
 8024998:	eeb0 9a41 	vmov.f32	s18, s2
 802499c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802499e:	eeb0 8a62 	vmov.f32	s16, s5
 80249a2:	9019      	str	r0, [sp, #100]	; 0x64
 80249a4:	eef0 8a43 	vmov.f32	s17, s6
 80249a8:	6850      	ldr	r0, [r2, #4]
 80249aa:	eef0 ba44 	vmov.f32	s23, s8
 80249ae:	9116      	str	r1, [sp, #88]	; 0x58
 80249b0:	eeb0 ba64 	vmov.f32	s22, s9
 80249b4:	9307      	str	r3, [sp, #28]
 80249b6:	eef0 aa45 	vmov.f32	s21, s10
 80249ba:	6812      	ldr	r2, [r2, #0]
 80249bc:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80249be:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80249c2:	fb00 1303 	mla	r3, r0, r3, r1
 80249c6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80249ca:	930a      	str	r3, [sp, #40]	; 0x28
 80249cc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80249ce:	681b      	ldr	r3, [r3, #0]
 80249d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80249d2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80249d4:	685e      	ldr	r6, [r3, #4]
 80249d6:	3604      	adds	r6, #4
 80249d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80249da:	2b00      	cmp	r3, #0
 80249dc:	dc03      	bgt.n	80249e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80249de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80249e0:	2b00      	cmp	r3, #0
 80249e2:	f340 836f 	ble.w	80250c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 80249e6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80249e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80249ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80249f0:	1e48      	subs	r0, r1, #1
 80249f2:	1e57      	subs	r7, r2, #1
 80249f4:	9b07      	ldr	r3, [sp, #28]
 80249f6:	2b00      	cmp	r3, #0
 80249f8:	f340 8188 	ble.w	8024d0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80249fc:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80249fe:	142b      	asrs	r3, r5, #16
 8024a00:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024a04:	d406      	bmi.n	8024a14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024a06:	4584      	cmp	ip, r0
 8024a08:	da04      	bge.n	8024a14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024a0a:	2b00      	cmp	r3, #0
 8024a0c:	db02      	blt.n	8024a14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024a0e:	42bb      	cmp	r3, r7
 8024a10:	f2c0 817d 	blt.w	8024d0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024a14:	f11c 0c01 	adds.w	ip, ip, #1
 8024a18:	f100 816b 	bmi.w	8024cf2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024a1c:	4561      	cmp	r1, ip
 8024a1e:	f2c0 8168 	blt.w	8024cf2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024a22:	3301      	adds	r3, #1
 8024a24:	f100 8165 	bmi.w	8024cf2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024a28:	429a      	cmp	r2, r3
 8024a2a:	f2c0 8162 	blt.w	8024cf2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024a2e:	9b07      	ldr	r3, [sp, #28]
 8024a30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024a32:	9317      	str	r3, [sp, #92]	; 0x5c
 8024a34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024a36:	2b00      	cmp	r3, #0
 8024a38:	f340 8187 	ble.w	8024d4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8024a3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024a3e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024a42:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024a46:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024a4a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024a4c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8024a50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024a52:	141b      	asrs	r3, r3, #16
 8024a54:	f100 81ca 	bmi.w	8024dec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8024a58:	f101 38ff 	add.w	r8, r1, #4294967295
 8024a5c:	4543      	cmp	r3, r8
 8024a5e:	f280 81c5 	bge.w	8024dec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8024a62:	f1bc 0f00 	cmp.w	ip, #0
 8024a66:	f2c0 81c1 	blt.w	8024dec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8024a6a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024a6e:	45c4      	cmp	ip, r8
 8024a70:	f280 81bc 	bge.w	8024dec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8024a74:	b209      	sxth	r1, r1
 8024a76:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024a78:	fb0c 3301 	mla	r3, ip, r1, r3
 8024a7c:	eb04 0803 	add.w	r8, r4, r3
 8024a80:	5ce3      	ldrb	r3, [r4, r3]
 8024a82:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024a86:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024a8a:	2a00      	cmp	r2, #0
 8024a8c:	f000 81a3 	beq.w	8024dd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024a90:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024a94:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024a98:	940b      	str	r4, [sp, #44]	; 0x2c
 8024a9a:	0e24      	lsrs	r4, r4, #24
 8024a9c:	9412      	str	r4, [sp, #72]	; 0x48
 8024a9e:	b178      	cbz	r0, 8024ac0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8024aa0:	eb08 0c01 	add.w	ip, r8, r1
 8024aa4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024aa8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024aac:	9108      	str	r1, [sp, #32]
 8024aae:	0e09      	lsrs	r1, r1, #24
 8024ab0:	9110      	str	r1, [sp, #64]	; 0x40
 8024ab2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8024ab6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024aba:	910c      	str	r1, [sp, #48]	; 0x30
 8024abc:	0e09      	lsrs	r1, r1, #24
 8024abe:	9113      	str	r1, [sp, #76]	; 0x4c
 8024ac0:	b292      	uxth	r2, r2
 8024ac2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024ac4:	b280      	uxth	r0, r0
 8024ac6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024ac8:	fb02 f900 	mul.w	r9, r2, r0
 8024acc:	0112      	lsls	r2, r2, #4
 8024ace:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024ad2:	eba2 0809 	sub.w	r8, r2, r9
 8024ad6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024ada:	b280      	uxth	r0, r0
 8024adc:	fa1f f888 	uxth.w	r8, r8
 8024ae0:	1a12      	subs	r2, r2, r0
 8024ae2:	fb08 f101 	mul.w	r1, r8, r1
 8024ae6:	b292      	uxth	r2, r2
 8024ae8:	fb02 110e 	mla	r1, r2, lr, r1
 8024aec:	fb00 1104 	mla	r1, r0, r4, r1
 8024af0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024af2:	fb09 1104 	mla	r1, r9, r4, r1
 8024af6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024afa:	2900      	cmp	r1, #0
 8024afc:	f000 80ee 	beq.w	8024cdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024b00:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024b04:	d01b      	beq.n	8024b3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024b06:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024b0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b0e:	fb0e fa0a 	mul.w	sl, lr, sl
 8024b12:	fb0e fe03 	mul.w	lr, lr, r3
 8024b16:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024b1a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024b1e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024b22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b26:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024b2a:	4453      	add	r3, sl
 8024b2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b30:	0a1b      	lsrs	r3, r3, #8
 8024b32:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024b36:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b3a:	ea43 030c 	orr.w	r3, r3, ip
 8024b3e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024b40:	2cff      	cmp	r4, #255	; 0xff
 8024b42:	d021      	beq.n	8024b88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024b44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024b46:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024b4a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024b4c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024b50:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024b52:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024b56:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024b58:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024b5c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024b60:	fb04 fa0a 	mul.w	sl, r4, sl
 8024b64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024b68:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024b6c:	44de      	add	lr, fp
 8024b6e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024b72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024b76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024b7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024b82:	ea4e 040a 	orr.w	r4, lr, sl
 8024b86:	940b      	str	r4, [sp, #44]	; 0x2c
 8024b88:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024b8a:	2cff      	cmp	r4, #255	; 0xff
 8024b8c:	d021      	beq.n	8024bd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8024b8e:	9c08      	ldr	r4, [sp, #32]
 8024b90:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024b94:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024b96:	fb04 fb0b 	mul.w	fp, r4, fp
 8024b9a:	9c08      	ldr	r4, [sp, #32]
 8024b9c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024ba0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024ba2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024ba6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024baa:	fb04 fa0a 	mul.w	sl, r4, sl
 8024bae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024bb2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024bb6:	44de      	add	lr, fp
 8024bb8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024bbc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024bc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024bc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024bc8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024bcc:	ea4e 040a 	orr.w	r4, lr, sl
 8024bd0:	9408      	str	r4, [sp, #32]
 8024bd2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024bd4:	2cff      	cmp	r4, #255	; 0xff
 8024bd6:	d021      	beq.n	8024c1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8024bd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024bda:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024bde:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024be0:	fb04 fb0b 	mul.w	fp, r4, fp
 8024be4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024be6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024bea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024bec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024bf0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024bf4:	fb04 fa0a 	mul.w	sl, r4, sl
 8024bf8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024bfc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024c00:	44de      	add	lr, fp
 8024c02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024c06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024c0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c16:	ea4e 040a 	orr.w	r4, lr, sl
 8024c1a:	940c      	str	r4, [sp, #48]	; 0x30
 8024c1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024c1e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024c22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c26:	43c9      	mvns	r1, r1
 8024c28:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024c2c:	9c08      	ldr	r4, [sp, #32]
 8024c2e:	b2c9      	uxtb	r1, r1
 8024c30:	fb08 fc0c 	mul.w	ip, r8, ip
 8024c34:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024c38:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024c3c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024c3e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024c42:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024c46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024c48:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024c4c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024c50:	fb08 f80e 	mul.w	r8, r8, lr
 8024c54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c58:	fb02 8303 	mla	r3, r2, r3, r8
 8024c5c:	9a08      	ldr	r2, [sp, #32]
 8024c5e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c62:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024c68:	fb00 330a 	mla	r3, r0, sl, r3
 8024c6c:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8024c70:	fb09 3900 	mla	r9, r9, r0, r3
 8024c74:	883b      	ldrh	r3, [r7, #0]
 8024c76:	1218      	asrs	r0, r3, #8
 8024c78:	10da      	asrs	r2, r3, #3
 8024c7a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024c7e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024c82:	00db      	lsls	r3, r3, #3
 8024c84:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024c88:	4348      	muls	r0, r1
 8024c8a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024c8e:	b2db      	uxtb	r3, r3
 8024c90:	434a      	muls	r2, r1
 8024c92:	ea4c 0c09 	orr.w	ip, ip, r9
 8024c96:	434b      	muls	r3, r1
 8024c98:	1c41      	adds	r1, r0, #1
 8024c9a:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024c9e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8024ca2:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8024ca6:	4960      	ldr	r1, [pc, #384]	; (8024e28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8024ca8:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8024cac:	1c59      	adds	r1, r3, #1
 8024cae:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024cb2:	fa5f f38c 	uxtb.w	r3, ip
 8024cb6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024cba:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024cbe:	1c51      	adds	r1, r2, #1
 8024cc0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024cc4:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 8024cc8:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8024ccc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024cd0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024cd4:	ea43 0c0c 	orr.w	ip, r3, ip
 8024cd8:	f8a7 c000 	strh.w	ip, [r7]
 8024cdc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024cde:	3702      	adds	r7, #2
 8024ce0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024ce2:	441a      	add	r2, r3
 8024ce4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024ce6:	441d      	add	r5, r3
 8024ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024cea:	922d      	str	r2, [sp, #180]	; 0xb4
 8024cec:	3b01      	subs	r3, #1
 8024cee:	9317      	str	r3, [sp, #92]	; 0x5c
 8024cf0:	e6a0      	b.n	8024a34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8024cf2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024cf4:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8024cf6:	441c      	add	r4, r3
 8024cf8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024cfa:	441d      	add	r5, r3
 8024cfc:	9b07      	ldr	r3, [sp, #28]
 8024cfe:	942d      	str	r4, [sp, #180]	; 0xb4
 8024d00:	3b01      	subs	r3, #1
 8024d02:	9307      	str	r3, [sp, #28]
 8024d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024d06:	3302      	adds	r3, #2
 8024d08:	930a      	str	r3, [sp, #40]	; 0x28
 8024d0a:	e673      	b.n	80249f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024d0c:	d024      	beq.n	8024d58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8024d0e:	9b07      	ldr	r3, [sp, #28]
 8024d10:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8024d12:	3b01      	subs	r3, #1
 8024d14:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8024d16:	fb00 4003 	mla	r0, r0, r3, r4
 8024d1a:	1400      	asrs	r0, r0, #16
 8024d1c:	f53f ae87 	bmi.w	8024a2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024d20:	3901      	subs	r1, #1
 8024d22:	4288      	cmp	r0, r1
 8024d24:	f6bf ae83 	bge.w	8024a2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024d28:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8024d2a:	fb01 5303 	mla	r3, r1, r3, r5
 8024d2e:	141b      	asrs	r3, r3, #16
 8024d30:	f53f ae7d 	bmi.w	8024a2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024d34:	3a01      	subs	r2, #1
 8024d36:	4293      	cmp	r3, r2
 8024d38:	f6bf ae79 	bge.w	8024a2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024d3c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024d40:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8024d44:	f1bb 0f00 	cmp.w	fp, #0
 8024d48:	dc70      	bgt.n	8024e2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8024d4a:	9b07      	ldr	r3, [sp, #28]
 8024d4c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024d52:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024d56:	930a      	str	r3, [sp, #40]	; 0x28
 8024d58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024d5a:	2b00      	cmp	r3, #0
 8024d5c:	f340 81b2 	ble.w	80250c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8024d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024d64:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024d66:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024d6a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024d6e:	eef0 6a48 	vmov.f32	s13, s16
 8024d72:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024d76:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024d7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d7e:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8024d82:	eef0 6a68 	vmov.f32	s13, s17
 8024d86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d8a:	ee16 5a90 	vmov	r5, s13
 8024d8e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024d92:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024d96:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024d9a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024d9e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024da2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024da6:	ee18 2a10 	vmov	r2, s16
 8024daa:	eeb0 8a47 	vmov.f32	s16, s14
 8024dae:	fb92 f3f3 	sdiv	r3, r2, r3
 8024db2:	ee18 2a90 	vmov	r2, s17
 8024db6:	932f      	str	r3, [sp, #188]	; 0xbc
 8024db8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024dba:	eef0 8a67 	vmov.f32	s17, s15
 8024dbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8024dc2:	9330      	str	r3, [sp, #192]	; 0xc0
 8024dc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024dc6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024dc8:	3b01      	subs	r3, #1
 8024dca:	9316      	str	r3, [sp, #88]	; 0x58
 8024dcc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024dce:	bf08      	it	eq
 8024dd0:	4613      	moveq	r3, r2
 8024dd2:	9307      	str	r3, [sp, #28]
 8024dd4:	e600      	b.n	80249d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8024dd6:	2800      	cmp	r0, #0
 8024dd8:	f43f ae72 	beq.w	8024ac0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8024ddc:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024de0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024de4:	9108      	str	r1, [sp, #32]
 8024de6:	0e09      	lsrs	r1, r1, #24
 8024de8:	9110      	str	r1, [sp, #64]	; 0x40
 8024dea:	e669      	b.n	8024ac0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8024dec:	f113 0801 	adds.w	r8, r3, #1
 8024df0:	f53f af74 	bmi.w	8024cdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024df4:	4541      	cmp	r1, r8
 8024df6:	f6ff af71 	blt.w	8024cdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024dfa:	f11c 0801 	adds.w	r8, ip, #1
 8024dfe:	f53f af6d 	bmi.w	8024cdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024e02:	45c6      	cmp	lr, r8
 8024e04:	f6ff af6a 	blt.w	8024cdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024e08:	b209      	sxth	r1, r1
 8024e0a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8024e0e:	fa0f f38e 	sxth.w	r3, lr
 8024e12:	9100      	str	r1, [sp, #0]
 8024e14:	4639      	mov	r1, r7
 8024e16:	9301      	str	r3, [sp, #4]
 8024e18:	4633      	mov	r3, r6
 8024e1a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8024e1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024e20:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024e22:	f7ff fc51 	bl	80246c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8024e26:	e759      	b.n	8024cdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024e28:	fffff800 	.word	0xfffff800
 8024e2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024e2e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024e32:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8024e34:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024e38:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024e3a:	1427      	asrs	r7, r4, #16
 8024e3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024e3e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024e42:	142b      	asrs	r3, r5, #16
 8024e44:	fb01 7303 	mla	r3, r1, r3, r7
 8024e48:	18e7      	adds	r7, r4, r3
 8024e4a:	5ce3      	ldrb	r3, [r4, r3]
 8024e4c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024e50:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024e54:	2a00      	cmp	r2, #0
 8024e56:	f000 812b 	beq.w	80250b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8024e5a:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024e5e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8024e62:	940d      	str	r4, [sp, #52]	; 0x34
 8024e64:	0e24      	lsrs	r4, r4, #24
 8024e66:	9414      	str	r4, [sp, #80]	; 0x50
 8024e68:	b170      	cbz	r0, 8024e88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024e6a:	eb07 0e01 	add.w	lr, r7, r1
 8024e6e:	5c79      	ldrb	r1, [r7, r1]
 8024e70:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024e74:	9109      	str	r1, [sp, #36]	; 0x24
 8024e76:	0e09      	lsrs	r1, r1, #24
 8024e78:	9111      	str	r1, [sp, #68]	; 0x44
 8024e7a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024e7e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024e82:	910e      	str	r1, [sp, #56]	; 0x38
 8024e84:	0e09      	lsrs	r1, r1, #24
 8024e86:	9115      	str	r1, [sp, #84]	; 0x54
 8024e88:	b292      	uxth	r2, r2
 8024e8a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024e8c:	b280      	uxth	r0, r0
 8024e8e:	fb02 f800 	mul.w	r8, r2, r0
 8024e92:	0112      	lsls	r2, r2, #4
 8024e94:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024e98:	eba2 0e08 	sub.w	lr, r2, r8
 8024e9c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024ea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024ea2:	b280      	uxth	r0, r0
 8024ea4:	fa1f fe8e 	uxth.w	lr, lr
 8024ea8:	1a09      	subs	r1, r1, r0
 8024eaa:	fb0e f202 	mul.w	r2, lr, r2
 8024eae:	b289      	uxth	r1, r1
 8024eb0:	fb01 220c 	mla	r2, r1, ip, r2
 8024eb4:	fb00 2204 	mla	r2, r0, r4, r2
 8024eb8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024eba:	fb08 2204 	mla	r2, r8, r4, r2
 8024ebe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024ec2:	2a00      	cmp	r2, #0
 8024ec4:	f000 80e9 	beq.w	802509a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8024ec8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024ecc:	d019      	beq.n	8024f02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8024ece:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024ed2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024ed6:	fb0c fa0a 	mul.w	sl, ip, sl
 8024eda:	fb0c fc03 	mul.w	ip, ip, r3
 8024ede:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024ee2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024ee6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024eea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024eee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024ef2:	4453      	add	r3, sl
 8024ef4:	0a3f      	lsrs	r7, r7, #8
 8024ef6:	0a1b      	lsrs	r3, r3, #8
 8024ef8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024efc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024f00:	433b      	orrs	r3, r7
 8024f02:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024f04:	2cff      	cmp	r4, #255	; 0xff
 8024f06:	d020      	beq.n	8024f4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8024f08:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024f0a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024f0e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024f10:	4367      	muls	r7, r4
 8024f12:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024f14:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024f18:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024f1c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024f1e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024f22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f26:	fb04 fa0a 	mul.w	sl, r4, sl
 8024f2a:	44bc      	add	ip, r7
 8024f2c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024f30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024f38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024f44:	ea4c 040a 	orr.w	r4, ip, sl
 8024f48:	940d      	str	r4, [sp, #52]	; 0x34
 8024f4a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024f4c:	2cff      	cmp	r4, #255	; 0xff
 8024f4e:	d020      	beq.n	8024f92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8024f50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024f52:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024f56:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024f58:	4367      	muls	r7, r4
 8024f5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024f5c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024f60:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024f64:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024f66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024f6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f6e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024f72:	44bc      	add	ip, r7
 8024f74:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024f78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024f80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024f8c:	ea4c 040a 	orr.w	r4, ip, sl
 8024f90:	9409      	str	r4, [sp, #36]	; 0x24
 8024f92:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024f94:	2cff      	cmp	r4, #255	; 0xff
 8024f96:	d020      	beq.n	8024fda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8024f98:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024f9a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024f9e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024fa0:	4367      	muls	r7, r4
 8024fa2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024fa4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024fa8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024fac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024fae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024fb2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024fb6:	fb04 fa0a 	mul.w	sl, r4, sl
 8024fba:	44bc      	add	ip, r7
 8024fbc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024fc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024fc4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024fc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024fcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024fd0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024fd4:	ea4c 040a 	orr.w	r4, ip, sl
 8024fd8:	940e      	str	r4, [sp, #56]	; 0x38
 8024fda:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024fdc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024fe0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024fe4:	43d2      	mvns	r2, r2
 8024fe6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024fea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024fec:	b2d2      	uxtb	r2, r2
 8024fee:	fb0e f707 	mul.w	r7, lr, r7
 8024ff2:	fb01 770c 	mla	r7, r1, ip, r7
 8024ff6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024ffa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024ffc:	fb00 770c 	mla	r7, r0, ip, r7
 8025000:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025004:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025006:	fb08 770c 	mla	r7, r8, ip, r7
 802500a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802500e:	fb0e fe0c 	mul.w	lr, lr, ip
 8025012:	0a3f      	lsrs	r7, r7, #8
 8025014:	fb01 e303 	mla	r3, r1, r3, lr
 8025018:	9909      	ldr	r1, [sp, #36]	; 0x24
 802501a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802501e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025022:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025024:	fb00 330a 	mla	r3, r0, sl, r3
 8025028:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802502c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025030:	f8b9 3000 	ldrh.w	r3, [r9]
 8025034:	1218      	asrs	r0, r3, #8
 8025036:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802503a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802503e:	10d9      	asrs	r1, r3, #3
 8025040:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025044:	00db      	lsls	r3, r3, #3
 8025046:	4350      	muls	r0, r2
 8025048:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802504c:	ea47 070c 	orr.w	r7, r7, ip
 8025050:	b2db      	uxtb	r3, r3
 8025052:	f100 0c01 	add.w	ip, r0, #1
 8025056:	4351      	muls	r1, r2
 8025058:	4353      	muls	r3, r2
 802505a:	4a1d      	ldr	r2, [pc, #116]	; (80250d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 802505c:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8025060:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8025064:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8025068:	f103 0c01 	add.w	ip, r3, #1
 802506c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025070:	fa5f fc87 	uxtb.w	ip, r7
 8025074:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025078:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802507c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025080:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8025084:	1c4b      	adds	r3, r1, #1
 8025086:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802508a:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 802508e:	00ff      	lsls	r7, r7, #3
 8025090:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025094:	4338      	orrs	r0, r7
 8025096:	f8a9 0000 	strh.w	r0, [r9]
 802509a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802509c:	f109 0902 	add.w	r9, r9, #2
 80250a0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80250a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80250a6:	441a      	add	r2, r3
 80250a8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80250aa:	922d      	str	r2, [sp, #180]	; 0xb4
 80250ac:	441d      	add	r5, r3
 80250ae:	e649      	b.n	8024d44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80250b0:	2800      	cmp	r0, #0
 80250b2:	f43f aee9 	beq.w	8024e88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80250b6:	5c79      	ldrb	r1, [r7, r1]
 80250b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80250bc:	9109      	str	r1, [sp, #36]	; 0x24
 80250be:	0e09      	lsrs	r1, r1, #24
 80250c0:	9111      	str	r1, [sp, #68]	; 0x44
 80250c2:	e6e1      	b.n	8024e88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80250c4:	b01b      	add	sp, #108	; 0x6c
 80250c6:	ecbd 8b08 	vpop	{d8-d11}
 80250ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250ce:	bf00      	nop
 80250d0:	fffff800 	.word	0xfffff800

080250d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80250d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250d8:	b085      	sub	sp, #20
 80250da:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80250de:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80250e2:	9103      	str	r1, [sp, #12]
 80250e4:	2d00      	cmp	r5, #0
 80250e6:	fb05 7106 	mla	r1, r5, r6, r7
 80250ea:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80250ee:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80250f2:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80250f6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80250fa:	eb03 0901 	add.w	r9, r3, r1
 80250fe:	9401      	str	r4, [sp, #4]
 8025100:	f2c0 80c0 	blt.w	8025284 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8025104:	45a8      	cmp	r8, r5
 8025106:	f340 80bd 	ble.w	8025284 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 802510a:	2f00      	cmp	r7, #0
 802510c:	f2c0 80b6 	blt.w	802527c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8025110:	42be      	cmp	r6, r7
 8025112:	f340 80b3 	ble.w	802527c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8025116:	f813 c001 	ldrb.w	ip, [r3, r1]
 802511a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802511e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025122:	d019      	beq.n	8025158 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8025124:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8025128:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802512c:	435a      	muls	r2, r3
 802512e:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8025132:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8025136:	fb0c f403 	mul.w	r4, ip, r3
 802513a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802513e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025142:	441a      	add	r2, r3
 8025144:	f104 0320 	add.w	r3, r4, #32
 8025148:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 802514c:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8025150:	0a1b      	lsrs	r3, r3, #8
 8025152:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025156:	4319      	orrs	r1, r3
 8025158:	b289      	uxth	r1, r1
 802515a:	1c7b      	adds	r3, r7, #1
 802515c:	f100 8097 	bmi.w	802528e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025160:	429e      	cmp	r6, r3
 8025162:	f340 8094 	ble.w	802528e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025166:	2800      	cmp	r0, #0
 8025168:	f000 8094 	beq.w	8025294 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 802516c:	f899 4001 	ldrb.w	r4, [r9, #1]
 8025170:	9b01      	ldr	r3, [sp, #4]
 8025172:	2cff      	cmp	r4, #255	; 0xff
 8025174:	885b      	ldrh	r3, [r3, #2]
 8025176:	d01b      	beq.n	80251b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8025178:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 802517c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8025180:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025184:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025188:	fb0a f202 	mul.w	r2, sl, r2
 802518c:	fb04 fa03 	mul.w	sl, r4, r3
 8025190:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8025194:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025198:	441a      	add	r2, r3
 802519a:	f10a 0320 	add.w	r3, sl, #32
 802519e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80251a2:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80251a6:	0a1b      	lsrs	r3, r3, #8
 80251a8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80251ac:	ea4b 0303 	orr.w	r3, fp, r3
 80251b0:	b29b      	uxth	r3, r3
 80251b2:	3501      	adds	r5, #1
 80251b4:	d474      	bmi.n	80252a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80251b6:	45a8      	cmp	r8, r5
 80251b8:	dd72      	ble.n	80252a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80251ba:	f1be 0f00 	cmp.w	lr, #0
 80251be:	f000 8120 	beq.w	8025402 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 80251c2:	2f00      	cmp	r7, #0
 80251c4:	db69      	blt.n	802529a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80251c6:	42be      	cmp	r6, r7
 80251c8:	dd67      	ble.n	802529a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80251ca:	f819 5006 	ldrb.w	r5, [r9, r6]
 80251ce:	9a01      	ldr	r2, [sp, #4]
 80251d0:	2dff      	cmp	r5, #255	; 0xff
 80251d2:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80251d6:	d01c      	beq.n	8025212 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 80251d8:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80251dc:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80251e0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80251e4:	fb08 f802 	mul.w	r8, r8, r2
 80251e8:	fb05 fa0b 	mul.w	sl, r5, fp
 80251ec:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80251f0:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80251f4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80251f8:	4490      	add	r8, r2
 80251fa:	f10a 0220 	add.w	r2, sl, #32
 80251fe:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8025202:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8025206:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802520a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802520e:	ea4b 0b0a 	orr.w	fp, fp, sl
 8025212:	fa1f fb8b 	uxth.w	fp, fp
 8025216:	3701      	adds	r7, #1
 8025218:	d447      	bmi.n	80252aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 802521a:	42be      	cmp	r6, r7
 802521c:	dd45      	ble.n	80252aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 802521e:	2800      	cmp	r0, #0
 8025220:	d046      	beq.n	80252b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8025222:	3601      	adds	r6, #1
 8025224:	9a01      	ldr	r2, [sp, #4]
 8025226:	f819 7006 	ldrb.w	r7, [r9, r6]
 802522a:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 802522e:	2fff      	cmp	r7, #255	; 0xff
 8025230:	d01a      	beq.n	8025268 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8025232:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8025236:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802523a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802523e:	fb08 f806 	mul.w	r8, r8, r6
 8025242:	fb07 f902 	mul.w	r9, r7, r2
 8025246:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802524a:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 802524e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025252:	44b0      	add	r8, r6
 8025254:	f109 0620 	add.w	r6, r9, #32
 8025258:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 802525c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025260:	0a36      	lsrs	r6, r6, #8
 8025262:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025266:	4332      	orrs	r2, r6
 8025268:	b292      	uxth	r2, r2
 802526a:	280f      	cmp	r0, #15
 802526c:	d922      	bls.n	80252b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 802526e:	4b69      	ldr	r3, [pc, #420]	; (8025414 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8025270:	f240 210d 	movw	r1, #525	; 0x20d
 8025274:	4a68      	ldr	r2, [pc, #416]	; (8025418 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8025276:	4869      	ldr	r0, [pc, #420]	; (802541c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8025278:	f004 fa2c 	bl	80296d4 <__assert_func>
 802527c:	f04f 0c00 	mov.w	ip, #0
 8025280:	4661      	mov	r1, ip
 8025282:	e76a      	b.n	802515a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8025284:	2400      	movs	r4, #0
 8025286:	46a4      	mov	ip, r4
 8025288:	4623      	mov	r3, r4
 802528a:	4621      	mov	r1, r4
 802528c:	e791      	b.n	80251b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802528e:	2400      	movs	r4, #0
 8025290:	4623      	mov	r3, r4
 8025292:	e78e      	b.n	80251b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025294:	4604      	mov	r4, r0
 8025296:	4603      	mov	r3, r0
 8025298:	e78b      	b.n	80251b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802529a:	2500      	movs	r5, #0
 802529c:	46ab      	mov	fp, r5
 802529e:	e7ba      	b.n	8025216 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 80252a0:	2700      	movs	r7, #0
 80252a2:	463d      	mov	r5, r7
 80252a4:	463a      	mov	r2, r7
 80252a6:	46bb      	mov	fp, r7
 80252a8:	e7df      	b.n	802526a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80252aa:	2700      	movs	r7, #0
 80252ac:	463a      	mov	r2, r7
 80252ae:	e7dc      	b.n	802526a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80252b0:	4607      	mov	r7, r0
 80252b2:	4602      	mov	r2, r0
 80252b4:	f1be 0f0f 	cmp.w	lr, #15
 80252b8:	d8d9      	bhi.n	802526e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80252ba:	b286      	uxth	r6, r0
 80252bc:	fa1f f98e 	uxth.w	r9, lr
 80252c0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80252c4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80252c8:	fb06 f809 	mul.w	r8, r6, r9
 80252cc:	0136      	lsls	r6, r6, #4
 80252ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80252d2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80252d6:	9601      	str	r6, [sp, #4]
 80252d8:	ea4a 0101 	orr.w	r1, sl, r1
 80252dc:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80252e0:	fa1f f689 	uxth.w	r6, r9
 80252e4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80252e8:	fb10 f90e 	smulbb	r9, r0, lr
 80252ec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80252f0:	9602      	str	r6, [sp, #8]
 80252f2:	460e      	mov	r6, r1
 80252f4:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80252f8:	f1ce 0110 	rsb	r1, lr, #16
 80252fc:	ea4a 0303 	orr.w	r3, sl, r3
 8025300:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025304:	1a09      	subs	r1, r1, r0
 8025306:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802530a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802530e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025312:	4343      	muls	r3, r0
 8025314:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8025318:	9801      	ldr	r0, [sp, #4]
 802531a:	ea4a 0202 	orr.w	r2, sl, r2
 802531e:	fb01 3106 	mla	r1, r1, r6, r3
 8025322:	9e02      	ldr	r6, [sp, #8]
 8025324:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8025328:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802532c:	fb09 1302 	mla	r3, r9, r2, r1
 8025330:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025334:	1b80      	subs	r0, r0, r6
 8025336:	9e01      	ldr	r6, [sp, #4]
 8025338:	9a03      	ldr	r2, [sp, #12]
 802533a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802533e:	eba6 0608 	sub.w	r6, r6, r8
 8025342:	b280      	uxth	r0, r0
 8025344:	8811      	ldrh	r1, [r2, #0]
 8025346:	ea4a 0b0b 	orr.w	fp, sl, fp
 802534a:	b2b6      	uxth	r6, r6
 802534c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8025350:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025354:	4374      	muls	r4, r6
 8025356:	b292      	uxth	r2, r2
 8025358:	fb0e 3e0b 	mla	lr, lr, fp, r3
 802535c:	fb0c 4400 	mla	r4, ip, r0, r4
 8025360:	9802      	ldr	r0, [sp, #8]
 8025362:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8025366:	fb00 4505 	mla	r5, r0, r5, r4
 802536a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802536e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025372:	1208      	asrs	r0, r1, #8
 8025374:	fb08 5707 	mla	r7, r8, r7, r5
 8025378:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802537c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025380:	10cd      	asrs	r5, r1, #3
 8025382:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025386:	ea43 0e0e 	orr.w	lr, r3, lr
 802538a:	00c9      	lsls	r1, r1, #3
 802538c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025390:	4357      	muls	r7, r2
 8025392:	fa1f f38e 	uxth.w	r3, lr
 8025396:	b2c9      	uxtb	r1, r1
 8025398:	f107 0801 	add.w	r8, r7, #1
 802539c:	121c      	asrs	r4, r3, #8
 802539e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80253a2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80253a6:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80253aa:	b2ff      	uxtb	r7, r7
 80253ac:	fb10 f007 	smulbb	r0, r0, r7
 80253b0:	fb11 f107 	smulbb	r1, r1, r7
 80253b4:	fb04 0402 	mla	r4, r4, r2, r0
 80253b8:	10d8      	asrs	r0, r3, #3
 80253ba:	fb15 f507 	smulbb	r5, r5, r7
 80253be:	00db      	lsls	r3, r3, #3
 80253c0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80253c4:	b2a4      	uxth	r4, r4
 80253c6:	b2db      	uxtb	r3, r3
 80253c8:	fb00 5002 	mla	r0, r0, r2, r5
 80253cc:	fb03 1202 	mla	r2, r3, r2, r1
 80253d0:	1c63      	adds	r3, r4, #1
 80253d2:	b280      	uxth	r0, r0
 80253d4:	b292      	uxth	r2, r2
 80253d6:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80253da:	1c51      	adds	r1, r2, #1
 80253dc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80253e0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80253e4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80253e8:	4313      	orrs	r3, r2
 80253ea:	1c42      	adds	r2, r0, #1
 80253ec:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80253f0:	9a03      	ldr	r2, [sp, #12]
 80253f2:	0940      	lsrs	r0, r0, #5
 80253f4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80253f8:	4303      	orrs	r3, r0
 80253fa:	8013      	strh	r3, [r2, #0]
 80253fc:	b005      	add	sp, #20
 80253fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025402:	280f      	cmp	r0, #15
 8025404:	f63f af33 	bhi.w	802526e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8025408:	4677      	mov	r7, lr
 802540a:	4675      	mov	r5, lr
 802540c:	4672      	mov	r2, lr
 802540e:	46f3      	mov	fp, lr
 8025410:	e753      	b.n	80252ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8025412:	bf00      	nop
 8025414:	0802e1e2 	.word	0x0802e1e2
 8025418:	0802e7a5 	.word	0x0802e7a5
 802541c:	0802e2cb 	.word	0x0802e2cb

08025420 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025424:	ed2d 8b08 	vpush	{d8-d11}
 8025428:	b097      	sub	sp, #92	; 0x5c
 802542a:	eeb0 aa40 	vmov.f32	s20, s0
 802542e:	eef0 9a60 	vmov.f32	s19, s1
 8025432:	9214      	str	r2, [sp, #80]	; 0x50
 8025434:	eeb0 9a41 	vmov.f32	s18, s2
 8025438:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802543a:	eeb0 8a62 	vmov.f32	s16, s5
 802543e:	9308      	str	r3, [sp, #32]
 8025440:	eef0 8a43 	vmov.f32	s17, s6
 8025444:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025448:	eef0 ba44 	vmov.f32	s23, s8
 802544c:	9015      	str	r0, [sp, #84]	; 0x54
 802544e:	eeb0 ba64 	vmov.f32	s22, s9
 8025452:	9312      	str	r3, [sp, #72]	; 0x48
 8025454:	eef0 aa45 	vmov.f32	s21, s10
 8025458:	6850      	ldr	r0, [r2, #4]
 802545a:	9111      	str	r1, [sp, #68]	; 0x44
 802545c:	6812      	ldr	r2, [r2, #0]
 802545e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025462:	fb00 1303 	mla	r3, r0, r3, r1
 8025466:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802546a:	9309      	str	r3, [sp, #36]	; 0x24
 802546c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802546e:	681b      	ldr	r3, [r3, #0]
 8025470:	930b      	str	r3, [sp, #44]	; 0x2c
 8025472:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025474:	685b      	ldr	r3, [r3, #4]
 8025476:	930c      	str	r3, [sp, #48]	; 0x30
 8025478:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 802547c:	930a      	str	r3, [sp, #40]	; 0x28
 802547e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025480:	2b00      	cmp	r3, #0
 8025482:	dc03      	bgt.n	802548c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025484:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025486:	2b00      	cmp	r3, #0
 8025488:	f340 83cd 	ble.w	8025c26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 802548c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802548e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025492:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025496:	1e48      	subs	r0, r1, #1
 8025498:	1e55      	subs	r5, r2, #1
 802549a:	9b08      	ldr	r3, [sp, #32]
 802549c:	2b00      	cmp	r3, #0
 802549e:	f340 81a5 	ble.w	80257ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80254a2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80254a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80254a6:	1436      	asrs	r6, r6, #16
 80254a8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80254ac:	d406      	bmi.n	80254bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80254ae:	4286      	cmp	r6, r0
 80254b0:	da04      	bge.n	80254bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80254b2:	2b00      	cmp	r3, #0
 80254b4:	db02      	blt.n	80254bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80254b6:	42ab      	cmp	r3, r5
 80254b8:	f2c0 8199 	blt.w	80257ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80254bc:	3601      	adds	r6, #1
 80254be:	f100 8186 	bmi.w	80257ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80254c2:	42b1      	cmp	r1, r6
 80254c4:	f2c0 8183 	blt.w	80257ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80254c8:	3301      	adds	r3, #1
 80254ca:	f100 8180 	bmi.w	80257ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80254ce:	429a      	cmp	r2, r3
 80254d0:	f2c0 817d 	blt.w	80257ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80254d4:	9b08      	ldr	r3, [sp, #32]
 80254d6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80254da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80254dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80254de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80254e0:	2b00      	cmp	r3, #0
 80254e2:	f340 81a6 	ble.w	8025832 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80254e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80254e8:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80254ea:	1418      	asrs	r0, r3, #16
 80254ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80254ee:	142d      	asrs	r5, r5, #16
 80254f0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80254f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80254f6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80254fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80254fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025500:	f100 81fa 	bmi.w	80258f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025504:	f102 3eff 	add.w	lr, r2, #4294967295
 8025508:	4575      	cmp	r5, lr
 802550a:	f280 81f5 	bge.w	80258f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802550e:	2800      	cmp	r0, #0
 8025510:	f2c0 81f2 	blt.w	80258f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025514:	f103 3eff 	add.w	lr, r3, #4294967295
 8025518:	4570      	cmp	r0, lr
 802551a:	f280 81ed 	bge.w	80258f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802551e:	b212      	sxth	r2, r2
 8025520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025522:	fa1f fe81 	uxth.w	lr, r1
 8025526:	fb00 5002 	mla	r0, r0, r2, r5
 802552a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802552e:	eb03 0a00 	add.w	sl, r3, r0
 8025532:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025536:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802553a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802553e:	b29b      	uxth	r3, r3
 8025540:	f1bc 0f00 	cmp.w	ip, #0
 8025544:	f000 81bb 	beq.w	80258be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025548:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802554c:	eb0a 0b02 	add.w	fp, sl, r2
 8025550:	fa1f fa8c 	uxth.w	sl, ip
 8025554:	940d      	str	r4, [sp, #52]	; 0x34
 8025556:	fb0a fe0e 	mul.w	lr, sl, lr
 802555a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802555e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025562:	eba5 050e 	sub.w	r5, r5, lr
 8025566:	940e      	str	r4, [sp, #56]	; 0x38
 8025568:	fa1f fa8a 	uxth.w	sl, sl
 802556c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802556e:	b2ad      	uxth	r5, r5
 8025570:	eba3 030a 	sub.w	r3, r3, sl
 8025574:	fb08 f505 	mul.w	r5, r8, r5
 8025578:	b29b      	uxth	r3, r3
 802557a:	fb09 5303 	mla	r3, r9, r3, r5
 802557e:	fb0a 3304 	mla	r3, sl, r4, r3
 8025582:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025584:	fb0e 3304 	mla	r3, lr, r4, r3
 8025588:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802558c:	2b00      	cmp	r3, #0
 802558e:	f000 8111 	beq.w	80257b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025592:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025594:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025598:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802559c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80255a0:	f000 8192 	beq.w	80258c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80255a4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80255a8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80255ac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80255b0:	fb0a fe0e 	mul.w	lr, sl, lr
 80255b4:	fb09 f000 	mul.w	r0, r9, r0
 80255b8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80255bc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80255c0:	f100 0b20 	add.w	fp, r0, #32
 80255c4:	44ce      	add	lr, r9
 80255c6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80255ca:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80255ce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80255d2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80255d6:	ea4e 0909 	orr.w	r9, lr, r9
 80255da:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80255de:	8868      	ldrh	r0, [r5, #2]
 80255e0:	d019      	beq.n	8025616 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80255e2:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80255e6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80255ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80255ee:	fb0a fe0e 	mul.w	lr, sl, lr
 80255f2:	fb08 f800 	mul.w	r8, r8, r0
 80255f6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80255fa:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80255fe:	f108 0b20 	add.w	fp, r8, #32
 8025602:	4486      	add	lr, r0
 8025604:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025608:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802560c:	0a00      	lsrs	r0, r0, #8
 802560e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025612:	ea4e 0000 	orr.w	r0, lr, r0
 8025616:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802561a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802561e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025622:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025626:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802562a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802562e:	ea4e 0909 	orr.w	r9, lr, r9
 8025632:	ea4a 0000 	orr.w	r0, sl, r0
 8025636:	f1bc 0f00 	cmp.w	ip, #0
 802563a:	f000 8147 	beq.w	80258cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 802563e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025642:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025644:	3a01      	subs	r2, #1
 8025646:	2cff      	cmp	r4, #255	; 0xff
 8025648:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802564c:	f102 0202 	add.w	r2, r2, #2
 8025650:	eb05 0e02 	add.w	lr, r5, r2
 8025654:	5aaa      	ldrh	r2, [r5, r2]
 8025656:	d018      	beq.n	802568a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8025658:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 802565c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025660:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025664:	fb04 fa02 	mul.w	sl, r4, r2
 8025668:	fb08 f805 	mul.w	r8, r8, r5
 802566c:	f10a 0520 	add.w	r5, sl, #32
 8025670:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025674:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025678:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802567c:	4442      	add	r2, r8
 802567e:	0a2d      	lsrs	r5, r5, #8
 8025680:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025684:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025688:	432a      	orrs	r2, r5
 802568a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802568c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025690:	2cff      	cmp	r4, #255	; 0xff
 8025692:	d01a      	beq.n	80256ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8025694:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025698:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802569c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80256a0:	fb04 fa05 	mul.w	sl, r4, r5
 80256a4:	fb08 f80e 	mul.w	r8, r8, lr
 80256a8:	f10a 0e20 	add.w	lr, sl, #32
 80256ac:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80256b0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80256b4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80256b8:	4445      	add	r5, r8
 80256ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80256be:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80256c2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80256c6:	ea45 050e 	orr.w	r5, r5, lr
 80256ca:	fb1c fe01 	smulbb	lr, ip, r1
 80256ce:	f1cc 0810 	rsb	r8, ip, #16
 80256d2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80256d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80256da:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80256de:	eba8 0801 	sub.w	r8, r8, r1
 80256e2:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80256e6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80256ea:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80256ee:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80256f2:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80256f6:	ea4a 0202 	orr.w	r2, sl, r2
 80256fa:	4341      	muls	r1, r0
 80256fc:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025700:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025704:	fb09 1108 	mla	r1, r9, r8, r1
 8025708:	ea4b 0505 	orr.w	r5, fp, r5
 802570c:	fb0c 1102 	mla	r1, ip, r2, r1
 8025710:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025714:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025718:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802571c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025720:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025724:	ea42 0e0e 	orr.w	lr, r2, lr
 8025728:	fa1f f28e 	uxth.w	r2, lr
 802572c:	2bff      	cmp	r3, #255	; 0xff
 802572e:	d103      	bne.n	8025738 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025730:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025732:	29ff      	cmp	r1, #255	; 0xff
 8025734:	f000 80de 	beq.w	80258f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025738:	990a      	ldr	r1, [sp, #40]	; 0x28
 802573a:	8838      	ldrh	r0, [r7, #0]
 802573c:	434b      	muls	r3, r1
 802573e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025740:	1205      	asrs	r5, r0, #8
 8025742:	f103 0c01 	add.w	ip, r3, #1
 8025746:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802574a:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 802574e:	ea6f 2c23 	mvn.w	ip, r3, asr #8
 8025752:	1213      	asrs	r3, r2, #8
 8025754:	fa5f fc8c 	uxtb.w	ip, ip
 8025758:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802575c:	fb15 f50c 	smulbb	r5, r5, ip
 8025760:	fb03 5301 	mla	r3, r3, r1, r5
 8025764:	10d1      	asrs	r1, r2, #3
 8025766:	00d2      	lsls	r2, r2, #3
 8025768:	b29d      	uxth	r5, r3
 802576a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802576e:	10c3      	asrs	r3, r0, #3
 8025770:	00c0      	lsls	r0, r0, #3
 8025772:	b2d2      	uxtb	r2, r2
 8025774:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025778:	b2c0      	uxtb	r0, r0
 802577a:	fb13 f30c 	smulbb	r3, r3, ip
 802577e:	fb10 f00c 	smulbb	r0, r0, ip
 8025782:	fb01 3104 	mla	r1, r1, r4, r3
 8025786:	1c6b      	adds	r3, r5, #1
 8025788:	fb02 0204 	mla	r2, r2, r4, r0
 802578c:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8025790:	b292      	uxth	r2, r2
 8025792:	b289      	uxth	r1, r1
 8025794:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8025798:	1c50      	adds	r0, r2, #1
 802579a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802579e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80257a2:	4313      	orrs	r3, r2
 80257a4:	1c4a      	adds	r2, r1, #1
 80257a6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80257aa:	0949      	lsrs	r1, r1, #5
 80257ac:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80257b0:	430b      	orrs	r3, r1
 80257b2:	803b      	strh	r3, [r7, #0]
 80257b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80257b6:	3702      	adds	r7, #2
 80257b8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80257ba:	4413      	add	r3, r2
 80257bc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80257be:	9329      	str	r3, [sp, #164]	; 0xa4
 80257c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80257c2:	441a      	add	r2, r3
 80257c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80257c6:	3b01      	subs	r3, #1
 80257c8:	922a      	str	r2, [sp, #168]	; 0xa8
 80257ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80257cc:	e687      	b.n	80254de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80257ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80257d0:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 80257d2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80257d4:	4433      	add	r3, r6
 80257d6:	9329      	str	r3, [sp, #164]	; 0xa4
 80257d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80257da:	441c      	add	r4, r3
 80257dc:	9b08      	ldr	r3, [sp, #32]
 80257de:	3b01      	subs	r3, #1
 80257e0:	942a      	str	r4, [sp, #168]	; 0xa8
 80257e2:	9308      	str	r3, [sp, #32]
 80257e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257e6:	3302      	adds	r3, #2
 80257e8:	9309      	str	r3, [sp, #36]	; 0x24
 80257ea:	e656      	b.n	802549a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80257ec:	d028      	beq.n	8025840 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80257ee:	9b08      	ldr	r3, [sp, #32]
 80257f0:	982b      	ldr	r0, [sp, #172]	; 0xac
 80257f2:	3b01      	subs	r3, #1
 80257f4:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80257f6:	fb00 5003 	mla	r0, r0, r3, r5
 80257fa:	1400      	asrs	r0, r0, #16
 80257fc:	f53f ae6a 	bmi.w	80254d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025800:	3901      	subs	r1, #1
 8025802:	4288      	cmp	r0, r1
 8025804:	f6bf ae66 	bge.w	80254d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025808:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802580a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 802580c:	fb01 0303 	mla	r3, r1, r3, r0
 8025810:	141b      	asrs	r3, r3, #16
 8025812:	f53f ae5f 	bmi.w	80254d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025816:	3a01      	subs	r2, #1
 8025818:	4293      	cmp	r3, r2
 802581a:	f6bf ae5b 	bge.w	80254d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802581e:	9b08      	ldr	r3, [sp, #32]
 8025820:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025824:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025828:	9313      	str	r3, [sp, #76]	; 0x4c
 802582a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802582c:	2b00      	cmp	r3, #0
 802582e:	f300 8082 	bgt.w	8025936 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8025832:	9b08      	ldr	r3, [sp, #32]
 8025834:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802583a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802583e:	9309      	str	r3, [sp, #36]	; 0x24
 8025840:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025842:	2b00      	cmp	r3, #0
 8025844:	f340 81ef 	ble.w	8025c26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8025848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802584c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802584e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025852:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025856:	eef0 6a48 	vmov.f32	s13, s16
 802585a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802585e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025862:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025866:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802586a:	eef0 6a68 	vmov.f32	s13, s17
 802586e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025872:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8025876:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802587a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802587e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025882:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025886:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802588a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802588e:	ee18 2a10 	vmov	r2, s16
 8025892:	eeb0 8a47 	vmov.f32	s16, s14
 8025896:	fb92 f3f3 	sdiv	r3, r2, r3
 802589a:	ee18 2a90 	vmov	r2, s17
 802589e:	932b      	str	r3, [sp, #172]	; 0xac
 80258a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258a2:	eef0 8a67 	vmov.f32	s17, s15
 80258a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80258aa:	932c      	str	r3, [sp, #176]	; 0xb0
 80258ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80258ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80258b0:	3b01      	subs	r3, #1
 80258b2:	9311      	str	r3, [sp, #68]	; 0x44
 80258b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258b6:	bf08      	it	eq
 80258b8:	4613      	moveq	r3, r2
 80258ba:	9308      	str	r3, [sp, #32]
 80258bc:	e5df      	b.n	802547e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80258be:	fb08 f505 	mul.w	r5, r8, r5
 80258c2:	fb09 5303 	mla	r3, r9, r3, r5
 80258c6:	e65f      	b.n	8025588 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 80258c8:	4681      	mov	r9, r0
 80258ca:	e686      	b.n	80255da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80258cc:	f1c1 0210 	rsb	r2, r1, #16
 80258d0:	4341      	muls	r1, r0
 80258d2:	fb09 1902 	mla	r9, r9, r2, r1
 80258d6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80258da:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80258de:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80258e2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80258e6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80258ea:	ea42 0909 	orr.w	r9, r2, r9
 80258ee:	fa1f f289 	uxth.w	r2, r9
 80258f2:	e71b      	b.n	802572c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80258f4:	803a      	strh	r2, [r7, #0]
 80258f6:	e75d      	b.n	80257b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80258f8:	f115 0e01 	adds.w	lr, r5, #1
 80258fc:	f53f af5a 	bmi.w	80257b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025900:	4572      	cmp	r2, lr
 8025902:	f6ff af57 	blt.w	80257b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025906:	f110 0e01 	adds.w	lr, r0, #1
 802590a:	f53f af53 	bmi.w	80257b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802590e:	4573      	cmp	r3, lr
 8025910:	f6ff af50 	blt.w	80257b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025914:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025916:	b21b      	sxth	r3, r3
 8025918:	b212      	sxth	r2, r2
 802591a:	9502      	str	r5, [sp, #8]
 802591c:	9301      	str	r3, [sp, #4]
 802591e:	9200      	str	r2, [sp, #0]
 8025920:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025924:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025928:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 802592c:	4639      	mov	r1, r7
 802592e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025930:	f7ff fbd0 	bl	80250d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8025934:	e73e      	b.n	80257b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025936:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025938:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802593c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802593e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025942:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025944:	fa1f fc82 	uxth.w	ip, r2
 8025948:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802594c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802594e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025952:	141f      	asrs	r7, r3, #16
 8025954:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025956:	141b      	asrs	r3, r3, #16
 8025958:	fb01 3707 	mla	r7, r1, r7, r3
 802595c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802595e:	eb03 0a07 	add.w	sl, r3, r7
 8025962:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025966:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802596a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802596e:	b29b      	uxth	r3, r3
 8025970:	2d00      	cmp	r5, #0
 8025972:	f000 813d 	beq.w	8025bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8025976:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802597a:	eb0a 0b01 	add.w	fp, sl, r1
 802597e:	fa1f fa85 	uxth.w	sl, r5
 8025982:	940f      	str	r4, [sp, #60]	; 0x3c
 8025984:	fb0a fc0c 	mul.w	ip, sl, ip
 8025988:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802598c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025990:	eba0 000c 	sub.w	r0, r0, ip
 8025994:	9410      	str	r4, [sp, #64]	; 0x40
 8025996:	fa1f fa8a 	uxth.w	sl, sl
 802599a:	b280      	uxth	r0, r0
 802599c:	eba3 030a 	sub.w	r3, r3, sl
 80259a0:	fb08 f000 	mul.w	r0, r8, r0
 80259a4:	b29b      	uxth	r3, r3
 80259a6:	fb09 0303 	mla	r3, r9, r3, r0
 80259aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80259ac:	fb0a 3300 	mla	r3, sl, r0, r3
 80259b0:	fb0c 3304 	mla	r3, ip, r4, r3
 80259b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80259b8:	2b00      	cmp	r3, #0
 80259ba:	f000 810b 	beq.w	8025bd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 80259be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80259c0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80259c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80259c6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80259ca:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80259ce:	f000 8114 	beq.w	8025bfa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 80259d2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80259d6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80259da:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80259de:	fb0a fc0c 	mul.w	ip, sl, ip
 80259e2:	fb09 f707 	mul.w	r7, r9, r7
 80259e6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80259ea:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80259ee:	f107 0b20 	add.w	fp, r7, #32
 80259f2:	44cc      	add	ip, r9
 80259f4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80259f8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80259fc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025a00:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025a04:	ea4c 0909 	orr.w	r9, ip, r9
 8025a08:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025a0c:	8847      	ldrh	r7, [r0, #2]
 8025a0e:	d019      	beq.n	8025a44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8025a10:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025a14:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025a18:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025a1c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025a20:	fb08 f807 	mul.w	r8, r8, r7
 8025a24:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025a28:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025a2c:	f108 0b20 	add.w	fp, r8, #32
 8025a30:	44bc      	add	ip, r7
 8025a32:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025a36:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025a3a:	0a3f      	lsrs	r7, r7, #8
 8025a3c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025a40:	ea4c 0707 	orr.w	r7, ip, r7
 8025a44:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025a48:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025a4c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025a50:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025a54:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025a58:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025a5c:	ea4c 0909 	orr.w	r9, ip, r9
 8025a60:	ea4a 0707 	orr.w	r7, sl, r7
 8025a64:	2d00      	cmp	r5, #0
 8025a66:	f000 80ca 	beq.w	8025bfe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8025a6a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025a6e:	3901      	subs	r1, #1
 8025a70:	0049      	lsls	r1, r1, #1
 8025a72:	3102      	adds	r1, #2
 8025a74:	eb00 0c01 	add.w	ip, r0, r1
 8025a78:	5a41      	ldrh	r1, [r0, r1]
 8025a7a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025a7c:	28ff      	cmp	r0, #255	; 0xff
 8025a7e:	d019      	beq.n	8025ab4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8025a80:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8025a84:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025a86:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025a8a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025a8e:	fb04 fa01 	mul.w	sl, r4, r1
 8025a92:	fb08 f800 	mul.w	r8, r8, r0
 8025a96:	f10a 0020 	add.w	r0, sl, #32
 8025a9a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025a9e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025aa2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025aa6:	4441      	add	r1, r8
 8025aa8:	0a00      	lsrs	r0, r0, #8
 8025aaa:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025aae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ab2:	4301      	orrs	r1, r0
 8025ab4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025ab6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025aba:	2cff      	cmp	r4, #255	; 0xff
 8025abc:	d01a      	beq.n	8025af4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8025abe:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8025ac2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ac6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025aca:	fb04 fa00 	mul.w	sl, r4, r0
 8025ace:	fb08 f80c 	mul.w	r8, r8, ip
 8025ad2:	f10a 0c20 	add.w	ip, sl, #32
 8025ad6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025ada:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025ade:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025ae2:	4440      	add	r0, r8
 8025ae4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ae8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025aec:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025af0:	ea40 000c 	orr.w	r0, r0, ip
 8025af4:	fb15 fc02 	smulbb	ip, r5, r2
 8025af8:	f1c5 0810 	rsb	r8, r5, #16
 8025afc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025b00:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025b04:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025b08:	eba8 0802 	sub.w	r8, r8, r2
 8025b0c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025b10:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025b14:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025b18:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025b1c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8025b20:	ea4a 0101 	orr.w	r1, sl, r1
 8025b24:	437a      	muls	r2, r7
 8025b26:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025b2a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025b2e:	fb09 2208 	mla	r2, r9, r8, r2
 8025b32:	ea4b 0000 	orr.w	r0, fp, r0
 8025b36:	fb05 2201 	mla	r2, r5, r1, r2
 8025b3a:	fb0c 2200 	mla	r2, ip, r0, r2
 8025b3e:	0d57      	lsrs	r7, r2, #21
 8025b40:	0952      	lsrs	r2, r2, #5
 8025b42:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025b46:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025b4a:	433a      	orrs	r2, r7
 8025b4c:	2bff      	cmp	r3, #255	; 0xff
 8025b4e:	b292      	uxth	r2, r2
 8025b50:	d102      	bne.n	8025b58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8025b52:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025b54:	29ff      	cmp	r1, #255	; 0xff
 8025b56:	d063      	beq.n	8025c20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8025b58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025b5a:	1215      	asrs	r5, r2, #8
 8025b5c:	f8be 1000 	ldrh.w	r1, [lr]
 8025b60:	4343      	muls	r3, r0
 8025b62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025b64:	10cf      	asrs	r7, r1, #3
 8025b66:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025b6a:	1c58      	adds	r0, r3, #1
 8025b6c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025b70:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8025b74:	1208      	asrs	r0, r1, #8
 8025b76:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025b7a:	00c9      	lsls	r1, r1, #3
 8025b7c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025b80:	b2db      	uxtb	r3, r3
 8025b82:	b2c9      	uxtb	r1, r1
 8025b84:	fb10 f003 	smulbb	r0, r0, r3
 8025b88:	fb11 f103 	smulbb	r1, r1, r3
 8025b8c:	fb05 0504 	mla	r5, r5, r4, r0
 8025b90:	10d0      	asrs	r0, r2, #3
 8025b92:	fb17 f703 	smulbb	r7, r7, r3
 8025b96:	00d2      	lsls	r2, r2, #3
 8025b98:	b2ad      	uxth	r5, r5
 8025b9a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025b9e:	b2d2      	uxtb	r2, r2
 8025ba0:	fb00 7004 	mla	r0, r0, r4, r7
 8025ba4:	1c6b      	adds	r3, r5, #1
 8025ba6:	fb02 1204 	mla	r2, r2, r4, r1
 8025baa:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025bae:	b292      	uxth	r2, r2
 8025bb0:	b280      	uxth	r0, r0
 8025bb2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025bb6:	1c57      	adds	r7, r2, #1
 8025bb8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025bbc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025bc0:	433d      	orrs	r5, r7
 8025bc2:	1c47      	adds	r7, r0, #1
 8025bc4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025bc8:	097f      	lsrs	r7, r7, #5
 8025bca:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025bce:	433d      	orrs	r5, r7
 8025bd0:	f8ae 5000 	strh.w	r5, [lr]
 8025bd4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025bd6:	f10e 0e02 	add.w	lr, lr, #2
 8025bda:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025bdc:	4413      	add	r3, r2
 8025bde:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025be0:	9329      	str	r3, [sp, #164]	; 0xa4
 8025be2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025be4:	441a      	add	r2, r3
 8025be6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025be8:	3b01      	subs	r3, #1
 8025bea:	922a      	str	r2, [sp, #168]	; 0xa8
 8025bec:	9313      	str	r3, [sp, #76]	; 0x4c
 8025bee:	e61c      	b.n	802582a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8025bf0:	fb08 f000 	mul.w	r0, r8, r0
 8025bf4:	fb09 0303 	mla	r3, r9, r3, r0
 8025bf8:	e6dc      	b.n	80259b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8025bfa:	46b9      	mov	r9, r7
 8025bfc:	e704      	b.n	8025a08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 8025bfe:	f1c2 0110 	rsb	r1, r2, #16
 8025c02:	437a      	muls	r2, r7
 8025c04:	fb09 2901 	mla	r9, r9, r1, r2
 8025c08:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025c0c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025c10:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025c14:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025c18:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025c1c:	4302      	orrs	r2, r0
 8025c1e:	e795      	b.n	8025b4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8025c20:	f8ae 2000 	strh.w	r2, [lr]
 8025c24:	e7d6      	b.n	8025bd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8025c26:	b017      	add	sp, #92	; 0x5c
 8025c28:	ecbd 8b08 	vpop	{d8-d11}
 8025c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025c30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c34:	b085      	sub	sp, #20
 8025c36:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8025c3a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8025c3e:	9103      	str	r1, [sp, #12]
 8025c40:	2d00      	cmp	r5, #0
 8025c42:	fb05 7106 	mla	r1, r5, r6, r7
 8025c46:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8025c4a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8025c4e:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8025c52:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8025c56:	eb02 0901 	add.w	r9, r2, r1
 8025c5a:	9401      	str	r4, [sp, #4]
 8025c5c:	f2c0 80c0 	blt.w	8025de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8025c60:	45a8      	cmp	r8, r5
 8025c62:	f340 80bd 	ble.w	8025de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8025c66:	2f00      	cmp	r7, #0
 8025c68:	f2c0 80b6 	blt.w	8025dd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8025c6c:	42be      	cmp	r6, r7
 8025c6e:	f340 80b3 	ble.w	8025dd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8025c72:	f812 c001 	ldrb.w	ip, [r2, r1]
 8025c76:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8025c7a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025c7e:	d019      	beq.n	8025cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8025c80:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8025c84:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025c88:	435a      	muls	r2, r3
 8025c8a:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8025c8e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8025c92:	fb0c f403 	mul.w	r4, ip, r3
 8025c96:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8025c9a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025c9e:	441a      	add	r2, r3
 8025ca0:	f104 0320 	add.w	r3, r4, #32
 8025ca4:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8025ca8:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8025cac:	0a1b      	lsrs	r3, r3, #8
 8025cae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025cb2:	4319      	orrs	r1, r3
 8025cb4:	b289      	uxth	r1, r1
 8025cb6:	1c7b      	adds	r3, r7, #1
 8025cb8:	f100 8097 	bmi.w	8025dea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8025cbc:	429e      	cmp	r6, r3
 8025cbe:	f340 8094 	ble.w	8025dea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8025cc2:	2800      	cmp	r0, #0
 8025cc4:	f000 8094 	beq.w	8025df0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8025cc8:	f899 4001 	ldrb.w	r4, [r9, #1]
 8025ccc:	9b01      	ldr	r3, [sp, #4]
 8025cce:	2cff      	cmp	r4, #255	; 0xff
 8025cd0:	885b      	ldrh	r3, [r3, #2]
 8025cd2:	d01b      	beq.n	8025d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8025cd4:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8025cd8:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8025cdc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025ce0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025ce4:	fb0a f202 	mul.w	r2, sl, r2
 8025ce8:	fb04 fa03 	mul.w	sl, r4, r3
 8025cec:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8025cf0:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025cf4:	441a      	add	r2, r3
 8025cf6:	f10a 0320 	add.w	r3, sl, #32
 8025cfa:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025cfe:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8025d02:	0a1b      	lsrs	r3, r3, #8
 8025d04:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025d08:	ea4b 0303 	orr.w	r3, fp, r3
 8025d0c:	b29b      	uxth	r3, r3
 8025d0e:	3501      	adds	r5, #1
 8025d10:	d474      	bmi.n	8025dfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8025d12:	45a8      	cmp	r8, r5
 8025d14:	dd72      	ble.n	8025dfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8025d16:	f1be 0f00 	cmp.w	lr, #0
 8025d1a:	f000 8111 	beq.w	8025f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
 8025d1e:	2f00      	cmp	r7, #0
 8025d20:	db69      	blt.n	8025df6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8025d22:	42be      	cmp	r6, r7
 8025d24:	dd67      	ble.n	8025df6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8025d26:	f819 5006 	ldrb.w	r5, [r9, r6]
 8025d2a:	9a01      	ldr	r2, [sp, #4]
 8025d2c:	2dff      	cmp	r5, #255	; 0xff
 8025d2e:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8025d32:	d01c      	beq.n	8025d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8025d34:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8025d38:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8025d3c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8025d40:	fb08 f802 	mul.w	r8, r8, r2
 8025d44:	fb05 fa0b 	mul.w	sl, r5, fp
 8025d48:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025d4c:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8025d50:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025d54:	4490      	add	r8, r2
 8025d56:	f10a 0220 	add.w	r2, sl, #32
 8025d5a:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8025d5e:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8025d62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d66:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025d6a:	ea4b 0b0a 	orr.w	fp, fp, sl
 8025d6e:	fa1f fb8b 	uxth.w	fp, fp
 8025d72:	3701      	adds	r7, #1
 8025d74:	d447      	bmi.n	8025e06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8025d76:	42be      	cmp	r6, r7
 8025d78:	dd45      	ble.n	8025e06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8025d7a:	2800      	cmp	r0, #0
 8025d7c:	d046      	beq.n	8025e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8025d7e:	3601      	adds	r6, #1
 8025d80:	9a01      	ldr	r2, [sp, #4]
 8025d82:	f819 7006 	ldrb.w	r7, [r9, r6]
 8025d86:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8025d8a:	2fff      	cmp	r7, #255	; 0xff
 8025d8c:	d01a      	beq.n	8025dc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8025d8e:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8025d92:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8025d96:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025d9a:	fb08 f806 	mul.w	r8, r8, r6
 8025d9e:	fb07 f902 	mul.w	r9, r7, r2
 8025da2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025da6:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8025daa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025dae:	44b0      	add	r8, r6
 8025db0:	f109 0620 	add.w	r6, r9, #32
 8025db4:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8025db8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025dbc:	0a36      	lsrs	r6, r6, #8
 8025dbe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025dc2:	4332      	orrs	r2, r6
 8025dc4:	b292      	uxth	r2, r2
 8025dc6:	280f      	cmp	r0, #15
 8025dc8:	d922      	bls.n	8025e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8025dca:	4b61      	ldr	r3, [pc, #388]	; (8025f50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8025dcc:	f240 210d 	movw	r1, #525	; 0x20d
 8025dd0:	4a60      	ldr	r2, [pc, #384]	; (8025f54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8025dd2:	4861      	ldr	r0, [pc, #388]	; (8025f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8025dd4:	f003 fc7e 	bl	80296d4 <__assert_func>
 8025dd8:	f04f 0c00 	mov.w	ip, #0
 8025ddc:	4661      	mov	r1, ip
 8025dde:	e76a      	b.n	8025cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8025de0:	2400      	movs	r4, #0
 8025de2:	46a4      	mov	ip, r4
 8025de4:	4623      	mov	r3, r4
 8025de6:	4621      	mov	r1, r4
 8025de8:	e791      	b.n	8025d0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8025dea:	2400      	movs	r4, #0
 8025dec:	4623      	mov	r3, r4
 8025dee:	e78e      	b.n	8025d0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8025df0:	4604      	mov	r4, r0
 8025df2:	4603      	mov	r3, r0
 8025df4:	e78b      	b.n	8025d0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8025df6:	2500      	movs	r5, #0
 8025df8:	46ab      	mov	fp, r5
 8025dfa:	e7ba      	b.n	8025d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8025dfc:	2700      	movs	r7, #0
 8025dfe:	463d      	mov	r5, r7
 8025e00:	463a      	mov	r2, r7
 8025e02:	46bb      	mov	fp, r7
 8025e04:	e7df      	b.n	8025dc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8025e06:	2700      	movs	r7, #0
 8025e08:	463a      	mov	r2, r7
 8025e0a:	e7dc      	b.n	8025dc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8025e0c:	4607      	mov	r7, r0
 8025e0e:	4602      	mov	r2, r0
 8025e10:	f1be 0f0f 	cmp.w	lr, #15
 8025e14:	d8d9      	bhi.n	8025dca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8025e16:	b286      	uxth	r6, r0
 8025e18:	fa1f f98e 	uxth.w	r9, lr
 8025e1c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025e20:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025e24:	fb06 f809 	mul.w	r8, r6, r9
 8025e28:	0136      	lsls	r6, r6, #4
 8025e2a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025e2e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8025e32:	9601      	str	r6, [sp, #4]
 8025e34:	ea4a 0101 	orr.w	r1, sl, r1
 8025e38:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8025e3c:	fa1f f689 	uxth.w	r6, r9
 8025e40:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025e44:	fb10 f90e 	smulbb	r9, r0, lr
 8025e48:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025e4c:	9602      	str	r6, [sp, #8]
 8025e4e:	460e      	mov	r6, r1
 8025e50:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8025e54:	f1ce 0110 	rsb	r1, lr, #16
 8025e58:	ea4a 0303 	orr.w	r3, sl, r3
 8025e5c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025e60:	1a09      	subs	r1, r1, r0
 8025e62:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8025e66:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025e6a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025e6e:	4343      	muls	r3, r0
 8025e70:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8025e74:	ea4a 0202 	orr.w	r2, sl, r2
 8025e78:	9802      	ldr	r0, [sp, #8]
 8025e7a:	fb01 3106 	mla	r1, r1, r6, r3
 8025e7e:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8025e82:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025e86:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025e8a:	fb09 1302 	mla	r3, r9, r2, r1
 8025e8e:	9901      	ldr	r1, [sp, #4]
 8025e90:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025e94:	9a03      	ldr	r2, [sp, #12]
 8025e96:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8025e9a:	ea4a 0b0b 	orr.w	fp, sl, fp
 8025e9e:	8812      	ldrh	r2, [r2, #0]
 8025ea0:	1a09      	subs	r1, r1, r0
 8025ea2:	9801      	ldr	r0, [sp, #4]
 8025ea4:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8025ea8:	eba0 0608 	sub.w	r6, r0, r8
 8025eac:	b289      	uxth	r1, r1
 8025eae:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8025eb2:	b2b6      	uxth	r6, r6
 8025eb4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025eb8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025ebc:	4374      	muls	r4, r6
 8025ebe:	10d0      	asrs	r0, r2, #3
 8025ec0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025ec4:	fb0c 4401 	mla	r4, ip, r1, r4
 8025ec8:	9902      	ldr	r1, [sp, #8]
 8025eca:	ea43 0e0e 	orr.w	lr, r3, lr
 8025ece:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025ed2:	fb01 4505 	mla	r5, r1, r5, r4
 8025ed6:	1211      	asrs	r1, r2, #8
 8025ed8:	00d2      	lsls	r2, r2, #3
 8025eda:	fb08 5707 	mla	r7, r8, r7, r5
 8025ede:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025ee2:	b2d2      	uxtb	r2, r2
 8025ee4:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8025ee8:	fa1f f38e 	uxth.w	r3, lr
 8025eec:	b2ff      	uxtb	r7, r7
 8025eee:	4379      	muls	r1, r7
 8025ef0:	4378      	muls	r0, r7
 8025ef2:	4357      	muls	r7, r2
 8025ef4:	1c4a      	adds	r2, r1, #1
 8025ef6:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8025efa:	1219      	asrs	r1, r3, #8
 8025efc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025f00:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8025f04:	4a15      	ldr	r2, [pc, #84]	; (8025f5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
 8025f06:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8025f0a:	1c42      	adds	r2, r0, #1
 8025f0c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025f10:	10da      	asrs	r2, r3, #3
 8025f12:	00db      	lsls	r3, r3, #3
 8025f14:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025f18:	b2db      	uxtb	r3, r3
 8025f1a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025f1e:	00d2      	lsls	r2, r2, #3
 8025f20:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025f24:	430a      	orrs	r2, r1
 8025f26:	1c79      	adds	r1, r7, #1
 8025f28:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8025f2c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025f30:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8025f34:	4313      	orrs	r3, r2
 8025f36:	9a03      	ldr	r2, [sp, #12]
 8025f38:	8013      	strh	r3, [r2, #0]
 8025f3a:	b005      	add	sp, #20
 8025f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f40:	280f      	cmp	r0, #15
 8025f42:	f63f af42 	bhi.w	8025dca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8025f46:	4677      	mov	r7, lr
 8025f48:	4675      	mov	r5, lr
 8025f4a:	4672      	mov	r2, lr
 8025f4c:	46f3      	mov	fp, lr
 8025f4e:	e762      	b.n	8025e16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8025f50:	0802e1e2 	.word	0x0802e1e2
 8025f54:	0802e7a5 	.word	0x0802e7a5
 8025f58:	0802e2cb 	.word	0x0802e2cb
 8025f5c:	fffff800 	.word	0xfffff800

08025f60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f64:	ed2d 8b08 	vpush	{d8-d11}
 8025f68:	b093      	sub	sp, #76	; 0x4c
 8025f6a:	eeb0 aa40 	vmov.f32	s20, s0
 8025f6e:	eef0 9a60 	vmov.f32	s19, s1
 8025f72:	9210      	str	r2, [sp, #64]	; 0x40
 8025f74:	eeb0 9a41 	vmov.f32	s18, s2
 8025f78:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025f7a:	eeb0 8a62 	vmov.f32	s16, s5
 8025f7e:	9011      	str	r0, [sp, #68]	; 0x44
 8025f80:	eef0 8a43 	vmov.f32	s17, s6
 8025f84:	6850      	ldr	r0, [r2, #4]
 8025f86:	eef0 ba44 	vmov.f32	s23, s8
 8025f8a:	910e      	str	r1, [sp, #56]	; 0x38
 8025f8c:	eeb0 ba64 	vmov.f32	s22, s9
 8025f90:	9306      	str	r3, [sp, #24]
 8025f92:	eef0 aa45 	vmov.f32	s21, s10
 8025f96:	6812      	ldr	r2, [r2, #0]
 8025f98:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025f9c:	fb00 1303 	mla	r3, r0, r3, r1
 8025fa0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025fa4:	9307      	str	r3, [sp, #28]
 8025fa6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025fa8:	681b      	ldr	r3, [r3, #0]
 8025faa:	9308      	str	r3, [sp, #32]
 8025fac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025fae:	685b      	ldr	r3, [r3, #4]
 8025fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8025fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025fb4:	2b00      	cmp	r3, #0
 8025fb6:	dc03      	bgt.n	8025fc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8025fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025fba:	2b00      	cmp	r3, #0
 8025fbc:	f340 83b8 	ble.w	8026730 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8025fc0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025fc2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025fc6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025fca:	1e48      	subs	r0, r1, #1
 8025fcc:	1e55      	subs	r5, r2, #1
 8025fce:	9b06      	ldr	r3, [sp, #24]
 8025fd0:	2b00      	cmp	r3, #0
 8025fd2:	f340 819b 	ble.w	802630c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8025fd6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8025fd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025fda:	1436      	asrs	r6, r6, #16
 8025fdc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025fe0:	d406      	bmi.n	8025ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025fe2:	4286      	cmp	r6, r0
 8025fe4:	da04      	bge.n	8025ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025fe6:	2b00      	cmp	r3, #0
 8025fe8:	db02      	blt.n	8025ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025fea:	42ab      	cmp	r3, r5
 8025fec:	f2c0 818f 	blt.w	802630e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025ff0:	3601      	adds	r6, #1
 8025ff2:	f100 817c 	bmi.w	80262ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025ff6:	42b1      	cmp	r1, r6
 8025ff8:	f2c0 8179 	blt.w	80262ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025ffc:	3301      	adds	r3, #1
 8025ffe:	f100 8176 	bmi.w	80262ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026002:	429a      	cmp	r2, r3
 8026004:	f2c0 8173 	blt.w	80262ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026008:	9b06      	ldr	r3, [sp, #24]
 802600a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802600e:	9f07      	ldr	r7, [sp, #28]
 8026010:	930f      	str	r3, [sp, #60]	; 0x3c
 8026012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026014:	2b00      	cmp	r3, #0
 8026016:	f340 819c 	ble.w	8026352 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802601a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802601c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802601e:	1418      	asrs	r0, r3, #16
 8026020:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026022:	142d      	asrs	r5, r5, #16
 8026024:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026028:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802602a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802602e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026030:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026034:	f100 81f0 	bmi.w	8026418 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026038:	f102 3eff 	add.w	lr, r2, #4294967295
 802603c:	4575      	cmp	r5, lr
 802603e:	f280 81eb 	bge.w	8026418 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026042:	2800      	cmp	r0, #0
 8026044:	f2c0 81e8 	blt.w	8026418 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026048:	f103 3eff 	add.w	lr, r3, #4294967295
 802604c:	4570      	cmp	r0, lr
 802604e:	f280 81e3 	bge.w	8026418 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026052:	b212      	sxth	r2, r2
 8026054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026056:	fa1f fe81 	uxth.w	lr, r1
 802605a:	fb00 5002 	mla	r0, r0, r2, r5
 802605e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026062:	eb03 0a00 	add.w	sl, r3, r0
 8026066:	f813 9000 	ldrb.w	r9, [r3, r0]
 802606a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802606e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026072:	b29b      	uxth	r3, r3
 8026074:	f1bc 0f00 	cmp.w	ip, #0
 8026078:	f000 81b1 	beq.w	80263de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47e>
 802607c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026080:	eb0a 0b02 	add.w	fp, sl, r2
 8026084:	fa1f fa8c 	uxth.w	sl, ip
 8026088:	940a      	str	r4, [sp, #40]	; 0x28
 802608a:	fb0a fe0e 	mul.w	lr, sl, lr
 802608e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026092:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026096:	eba5 050e 	sub.w	r5, r5, lr
 802609a:	940b      	str	r4, [sp, #44]	; 0x2c
 802609c:	fa1f fa8a 	uxth.w	sl, sl
 80260a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80260a2:	b2ad      	uxth	r5, r5
 80260a4:	eba3 030a 	sub.w	r3, r3, sl
 80260a8:	fb08 f505 	mul.w	r5, r8, r5
 80260ac:	b29b      	uxth	r3, r3
 80260ae:	fb09 5303 	mla	r3, r9, r3, r5
 80260b2:	fb0a 3304 	mla	r3, sl, r4, r3
 80260b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80260b8:	fb0e 3304 	mla	r3, lr, r4, r3
 80260bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80260c0:	2b00      	cmp	r3, #0
 80260c2:	f000 8107 	beq.w	80262d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80260c6:	9c08      	ldr	r4, [sp, #32]
 80260c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80260cc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80260d0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80260d4:	f000 8188 	beq.w	80263e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80260d8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80260dc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80260e0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80260e4:	fb0a fe0e 	mul.w	lr, sl, lr
 80260e8:	fb09 f000 	mul.w	r0, r9, r0
 80260ec:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80260f0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80260f4:	f100 0b20 	add.w	fp, r0, #32
 80260f8:	44ce      	add	lr, r9
 80260fa:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80260fe:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026102:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026106:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802610a:	ea4e 0909 	orr.w	r9, lr, r9
 802610e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026112:	8868      	ldrh	r0, [r5, #2]
 8026114:	d019      	beq.n	802614a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026116:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802611a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802611e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026122:	fb0a fe0e 	mul.w	lr, sl, lr
 8026126:	fb08 f800 	mul.w	r8, r8, r0
 802612a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802612e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026132:	f108 0b20 	add.w	fp, r8, #32
 8026136:	4486      	add	lr, r0
 8026138:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802613c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026140:	0a00      	lsrs	r0, r0, #8
 8026142:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026146:	ea4e 0000 	orr.w	r0, lr, r0
 802614a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802614e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026152:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026156:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802615a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802615e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026162:	ea4e 0909 	orr.w	r9, lr, r9
 8026166:	ea4a 0000 	orr.w	r0, sl, r0
 802616a:	f1bc 0f00 	cmp.w	ip, #0
 802616e:	f000 813d 	beq.w	80263ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8026172:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026176:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026178:	3a01      	subs	r2, #1
 802617a:	2cff      	cmp	r4, #255	; 0xff
 802617c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026180:	f102 0202 	add.w	r2, r2, #2
 8026184:	eb05 0e02 	add.w	lr, r5, r2
 8026188:	5aaa      	ldrh	r2, [r5, r2]
 802618a:	d018      	beq.n	80261be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802618c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026190:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026194:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026198:	fb04 fa02 	mul.w	sl, r4, r2
 802619c:	fb08 f805 	mul.w	r8, r8, r5
 80261a0:	f10a 0520 	add.w	r5, sl, #32
 80261a4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80261a8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80261ac:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80261b0:	4442      	add	r2, r8
 80261b2:	0a2d      	lsrs	r5, r5, #8
 80261b4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80261b8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80261bc:	432a      	orrs	r2, r5
 80261be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80261c0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80261c4:	2cff      	cmp	r4, #255	; 0xff
 80261c6:	d01a      	beq.n	80261fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80261c8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80261cc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80261d0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80261d4:	fb04 fa05 	mul.w	sl, r4, r5
 80261d8:	fb08 f80e 	mul.w	r8, r8, lr
 80261dc:	f10a 0e20 	add.w	lr, sl, #32
 80261e0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80261e4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80261e8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80261ec:	4445      	add	r5, r8
 80261ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80261f2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80261f6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80261fa:	ea45 050e 	orr.w	r5, r5, lr
 80261fe:	fb1c fe01 	smulbb	lr, ip, r1
 8026202:	f1cc 0810 	rsb	r8, ip, #16
 8026206:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802620a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802620e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026212:	eba8 0801 	sub.w	r8, r8, r1
 8026216:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802621a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802621e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026222:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026226:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802622a:	ea4a 0202 	orr.w	r2, sl, r2
 802622e:	4341      	muls	r1, r0
 8026230:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026234:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026238:	fb09 1108 	mla	r1, r9, r8, r1
 802623c:	ea4b 0505 	orr.w	r5, fp, r5
 8026240:	fb0c 1102 	mla	r1, ip, r2, r1
 8026244:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026248:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802624c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026250:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026254:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026258:	ea42 0e0e 	orr.w	lr, r2, lr
 802625c:	fa1f f28e 	uxth.w	r2, lr
 8026260:	2bff      	cmp	r3, #255	; 0xff
 8026262:	f000 80d7 	beq.w	8026414 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026266:	f8b7 c000 	ldrh.w	ip, [r7]
 802626a:	43db      	mvns	r3, r3
 802626c:	ea4f 202c 	mov.w	r0, ip, asr #8
 8026270:	fa5f fe83 	uxtb.w	lr, r3
 8026274:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026278:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802627c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8026280:	fb00 f00e 	mul.w	r0, r0, lr
 8026284:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026288:	b2db      	uxtb	r3, r3
 802628a:	1c41      	adds	r1, r0, #1
 802628c:	fb05 f50e 	mul.w	r5, r5, lr
 8026290:	fb03 f30e 	mul.w	r3, r3, lr
 8026294:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026298:	1210      	asrs	r0, r2, #8
 802629a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802629e:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 80262a2:	496c      	ldr	r1, [pc, #432]	; (8026454 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>)
 80262a4:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 80262a8:	1c69      	adds	r1, r5, #1
 80262aa:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80262ae:	10d1      	asrs	r1, r2, #3
 80262b0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80262b4:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80262b8:	00c9      	lsls	r1, r1, #3
 80262ba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80262be:	4301      	orrs	r1, r0
 80262c0:	1c58      	adds	r0, r3, #1
 80262c2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80262c6:	00d3      	lsls	r3, r2, #3
 80262c8:	b2db      	uxtb	r3, r3
 80262ca:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80262ce:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 80262d2:	803b      	strh	r3, [r7, #0]
 80262d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80262d6:	3702      	adds	r7, #2
 80262d8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80262da:	4413      	add	r3, r2
 80262dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80262de:	9325      	str	r3, [sp, #148]	; 0x94
 80262e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80262e2:	441a      	add	r2, r3
 80262e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80262e6:	3b01      	subs	r3, #1
 80262e8:	9226      	str	r2, [sp, #152]	; 0x98
 80262ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80262ec:	e691      	b.n	8026012 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80262ee:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80262f0:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80262f2:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80262f4:	4433      	add	r3, r6
 80262f6:	9325      	str	r3, [sp, #148]	; 0x94
 80262f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80262fa:	441c      	add	r4, r3
 80262fc:	9b06      	ldr	r3, [sp, #24]
 80262fe:	3b01      	subs	r3, #1
 8026300:	9426      	str	r4, [sp, #152]	; 0x98
 8026302:	9306      	str	r3, [sp, #24]
 8026304:	9b07      	ldr	r3, [sp, #28]
 8026306:	3302      	adds	r3, #2
 8026308:	9307      	str	r3, [sp, #28]
 802630a:	e660      	b.n	8025fce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802630c:	d028      	beq.n	8026360 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 802630e:	9b06      	ldr	r3, [sp, #24]
 8026310:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026312:	3b01      	subs	r3, #1
 8026314:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8026316:	fb00 5003 	mla	r0, r0, r3, r5
 802631a:	1400      	asrs	r0, r0, #16
 802631c:	f53f ae74 	bmi.w	8026008 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026320:	3901      	subs	r1, #1
 8026322:	4288      	cmp	r0, r1
 8026324:	f6bf ae70 	bge.w	8026008 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026328:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802632a:	9826      	ldr	r0, [sp, #152]	; 0x98
 802632c:	fb01 0303 	mla	r3, r1, r3, r0
 8026330:	141b      	asrs	r3, r3, #16
 8026332:	f53f ae69 	bmi.w	8026008 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026336:	3a01      	subs	r2, #1
 8026338:	4293      	cmp	r3, r2
 802633a:	f6bf ae65 	bge.w	8026008 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802633e:	9b06      	ldr	r3, [sp, #24]
 8026340:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026344:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8026348:	930f      	str	r3, [sp, #60]	; 0x3c
 802634a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802634c:	2b00      	cmp	r3, #0
 802634e:	f300 8083 	bgt.w	8026458 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 8026352:	9b06      	ldr	r3, [sp, #24]
 8026354:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026358:	9b07      	ldr	r3, [sp, #28]
 802635a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802635e:	9307      	str	r3, [sp, #28]
 8026360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026362:	2b00      	cmp	r3, #0
 8026364:	f340 81e4 	ble.w	8026730 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8026368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802636c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802636e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026372:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026376:	eef0 6a48 	vmov.f32	s13, s16
 802637a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802637e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026382:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026386:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802638a:	eef0 6a68 	vmov.f32	s13, s17
 802638e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026392:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8026396:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802639a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802639e:	ee37 8a48 	vsub.f32	s16, s14, s16
 80263a2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80263a6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80263aa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80263ae:	ee18 2a10 	vmov	r2, s16
 80263b2:	eeb0 8a47 	vmov.f32	s16, s14
 80263b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80263ba:	ee18 2a90 	vmov	r2, s17
 80263be:	9327      	str	r3, [sp, #156]	; 0x9c
 80263c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80263c2:	eef0 8a67 	vmov.f32	s17, s15
 80263c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80263ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80263cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80263ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80263d0:	3b01      	subs	r3, #1
 80263d2:	930e      	str	r3, [sp, #56]	; 0x38
 80263d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80263d6:	bf08      	it	eq
 80263d8:	4613      	moveq	r3, r2
 80263da:	9306      	str	r3, [sp, #24]
 80263dc:	e5e9      	b.n	8025fb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80263de:	fb08 f505 	mul.w	r5, r8, r5
 80263e2:	fb09 5303 	mla	r3, r9, r3, r5
 80263e6:	e669      	b.n	80260bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80263e8:	4681      	mov	r9, r0
 80263ea:	e690      	b.n	802610e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80263ec:	f1c1 0210 	rsb	r2, r1, #16
 80263f0:	4341      	muls	r1, r0
 80263f2:	fb09 1902 	mla	r9, r9, r2, r1
 80263f6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80263fa:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80263fe:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026402:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026406:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802640a:	ea42 0909 	orr.w	r9, r2, r9
 802640e:	fa1f f289 	uxth.w	r2, r9
 8026412:	e725      	b.n	8026260 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8026414:	803a      	strh	r2, [r7, #0]
 8026416:	e75d      	b.n	80262d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026418:	f115 0e01 	adds.w	lr, r5, #1
 802641c:	f53f af5a 	bmi.w	80262d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026420:	4572      	cmp	r2, lr
 8026422:	f6ff af57 	blt.w	80262d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026426:	f110 0e01 	adds.w	lr, r0, #1
 802642a:	f53f af53 	bmi.w	80262d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802642e:	4573      	cmp	r3, lr
 8026430:	f6ff af50 	blt.w	80262d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026434:	b21b      	sxth	r3, r3
 8026436:	b212      	sxth	r2, r2
 8026438:	9301      	str	r3, [sp, #4]
 802643a:	9200      	str	r2, [sp, #0]
 802643c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8026440:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8026444:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8026448:	4639      	mov	r1, r7
 802644a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802644c:	f7ff fbf0 	bl	8025c30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8026450:	e740      	b.n	80262d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026452:	bf00      	nop
 8026454:	fffff800 	.word	0xfffff800
 8026458:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802645a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802645e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026460:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026464:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026466:	fa1f fc82 	uxth.w	ip, r2
 802646a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802646e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026470:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026474:	141f      	asrs	r7, r3, #16
 8026476:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026478:	141b      	asrs	r3, r3, #16
 802647a:	fb01 3707 	mla	r7, r1, r7, r3
 802647e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026480:	eb03 0a07 	add.w	sl, r3, r7
 8026484:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026488:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802648c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026490:	b29b      	uxth	r3, r3
 8026492:	2d00      	cmp	r5, #0
 8026494:	f000 8131 	beq.w	80266fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 8026498:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802649c:	eb0a 0b01 	add.w	fp, sl, r1
 80264a0:	fa1f fa85 	uxth.w	sl, r5
 80264a4:	940c      	str	r4, [sp, #48]	; 0x30
 80264a6:	fb0a fc0c 	mul.w	ip, sl, ip
 80264aa:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80264ae:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80264b2:	eba0 000c 	sub.w	r0, r0, ip
 80264b6:	940d      	str	r4, [sp, #52]	; 0x34
 80264b8:	fa1f fa8a 	uxth.w	sl, sl
 80264bc:	b280      	uxth	r0, r0
 80264be:	eba3 030a 	sub.w	r3, r3, sl
 80264c2:	fb08 f000 	mul.w	r0, r8, r0
 80264c6:	b29b      	uxth	r3, r3
 80264c8:	fb09 0303 	mla	r3, r9, r3, r0
 80264cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80264ce:	fb0a 3300 	mla	r3, sl, r0, r3
 80264d2:	fb0c 3304 	mla	r3, ip, r4, r3
 80264d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80264da:	2b00      	cmp	r3, #0
 80264dc:	f000 80ff 	beq.w	80266de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 80264e0:	9808      	ldr	r0, [sp, #32]
 80264e2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80264e6:	9c08      	ldr	r4, [sp, #32]
 80264e8:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80264ec:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80264f0:	f000 8108 	beq.w	8026704 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80264f4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80264f8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80264fc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026500:	fb0a fc0c 	mul.w	ip, sl, ip
 8026504:	fb09 f707 	mul.w	r7, r9, r7
 8026508:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802650c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026510:	f107 0b20 	add.w	fp, r7, #32
 8026514:	44cc      	add	ip, r9
 8026516:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802651a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802651e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026522:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026526:	ea4c 0909 	orr.w	r9, ip, r9
 802652a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802652e:	8847      	ldrh	r7, [r0, #2]
 8026530:	d019      	beq.n	8026566 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x606>
 8026532:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026536:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802653a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802653e:	fb0a fc0c 	mul.w	ip, sl, ip
 8026542:	fb08 f807 	mul.w	r8, r8, r7
 8026546:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802654a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802654e:	f108 0b20 	add.w	fp, r8, #32
 8026552:	44bc      	add	ip, r7
 8026554:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026558:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802655c:	0a3f      	lsrs	r7, r7, #8
 802655e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026562:	ea4c 0707 	orr.w	r7, ip, r7
 8026566:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802656a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802656e:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026572:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026576:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802657a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802657e:	ea4c 0909 	orr.w	r9, ip, r9
 8026582:	ea4a 0707 	orr.w	r7, sl, r7
 8026586:	2d00      	cmp	r5, #0
 8026588:	f000 80be 	beq.w	8026708 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 802658c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026590:	3901      	subs	r1, #1
 8026592:	0049      	lsls	r1, r1, #1
 8026594:	3102      	adds	r1, #2
 8026596:	eb00 0c01 	add.w	ip, r0, r1
 802659a:	5a41      	ldrh	r1, [r0, r1]
 802659c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802659e:	28ff      	cmp	r0, #255	; 0xff
 80265a0:	d019      	beq.n	80265d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 80265a2:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80265a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80265a8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80265ac:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80265b0:	fb04 fa01 	mul.w	sl, r4, r1
 80265b4:	fb08 f800 	mul.w	r8, r8, r0
 80265b8:	f10a 0020 	add.w	r0, sl, #32
 80265bc:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80265c0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80265c4:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80265c8:	4441      	add	r1, r8
 80265ca:	0a00      	lsrs	r0, r0, #8
 80265cc:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80265d0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80265d4:	4301      	orrs	r1, r0
 80265d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80265d8:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80265dc:	2cff      	cmp	r4, #255	; 0xff
 80265de:	d01a      	beq.n	8026616 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 80265e0:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80265e4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80265e8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80265ec:	fb04 fa00 	mul.w	sl, r4, r0
 80265f0:	fb08 f80c 	mul.w	r8, r8, ip
 80265f4:	f10a 0c20 	add.w	ip, sl, #32
 80265f8:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80265fc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026600:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026604:	4440      	add	r0, r8
 8026606:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802660a:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802660e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026612:	ea40 000c 	orr.w	r0, r0, ip
 8026616:	fb15 fc02 	smulbb	ip, r5, r2
 802661a:	f1c5 0810 	rsb	r8, r5, #16
 802661e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026622:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026626:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802662a:	eba8 0802 	sub.w	r8, r8, r2
 802662e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026632:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026636:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802663a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802663e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026642:	ea4a 0101 	orr.w	r1, sl, r1
 8026646:	437a      	muls	r2, r7
 8026648:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802664c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026650:	fb09 2208 	mla	r2, r9, r8, r2
 8026654:	ea4b 0000 	orr.w	r0, fp, r0
 8026658:	fb05 2201 	mla	r2, r5, r1, r2
 802665c:	fb0c 2200 	mla	r2, ip, r0, r2
 8026660:	0d57      	lsrs	r7, r2, #21
 8026662:	0952      	lsrs	r2, r2, #5
 8026664:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026668:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802666c:	433a      	orrs	r2, r7
 802666e:	2bff      	cmp	r3, #255	; 0xff
 8026670:	b292      	uxth	r2, r2
 8026672:	d05a      	beq.n	802672a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ca>
 8026674:	f8be 7000 	ldrh.w	r7, [lr]
 8026678:	43db      	mvns	r3, r3
 802667a:	4c30      	ldr	r4, [pc, #192]	; (802673c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>)
 802667c:	1238      	asrs	r0, r7, #8
 802667e:	fa5f fc83 	uxtb.w	ip, r3
 8026682:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026686:	10fd      	asrs	r5, r7, #3
 8026688:	00fb      	lsls	r3, r7, #3
 802668a:	fb00 f00c 	mul.w	r0, r0, ip
 802668e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026692:	b2db      	uxtb	r3, r3
 8026694:	fb05 f10c 	mul.w	r1, r5, ip
 8026698:	1c45      	adds	r5, r0, #1
 802669a:	fb03 f30c 	mul.w	r3, r3, ip
 802669e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80266a2:	1215      	asrs	r5, r2, #8
 80266a4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80266a8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80266ac:	1c4d      	adds	r5, r1, #1
 80266ae:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80266b2:	10d1      	asrs	r1, r2, #3
 80266b4:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80266b8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80266bc:	00d2      	lsls	r2, r2, #3
 80266be:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80266c2:	00c9      	lsls	r1, r1, #3
 80266c4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80266c8:	4308      	orrs	r0, r1
 80266ca:	1c59      	adds	r1, r3, #1
 80266cc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80266d0:	b2d1      	uxtb	r1, r2
 80266d2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80266d6:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 80266da:	f8ae 0000 	strh.w	r0, [lr]
 80266de:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80266e0:	f10e 0e02 	add.w	lr, lr, #2
 80266e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80266e6:	4413      	add	r3, r2
 80266e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80266ea:	9325      	str	r3, [sp, #148]	; 0x94
 80266ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80266ee:	441a      	add	r2, r3
 80266f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80266f2:	3b01      	subs	r3, #1
 80266f4:	9226      	str	r2, [sp, #152]	; 0x98
 80266f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80266f8:	e627      	b.n	802634a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80266fa:	fb08 f000 	mul.w	r0, r8, r0
 80266fe:	fb09 0303 	mla	r3, r9, r3, r0
 8026702:	e6e8      	b.n	80264d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x576>
 8026704:	46b9      	mov	r9, r7
 8026706:	e710      	b.n	802652a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8026708:	f1c2 0110 	rsb	r1, r2, #16
 802670c:	437a      	muls	r2, r7
 802670e:	fb09 2901 	mla	r9, r9, r1, r2
 8026712:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026716:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802671a:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802671e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026722:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026726:	4302      	orrs	r2, r0
 8026728:	e7a1      	b.n	802666e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 802672a:	f8ae 2000 	strh.w	r2, [lr]
 802672e:	e7d6      	b.n	80266de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8026730:	b013      	add	sp, #76	; 0x4c
 8026732:	ecbd 8b08 	vpop	{d8-d11}
 8026736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802673a:	bf00      	nop
 802673c:	fffff800 	.word	0xfffff800

08026740 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8026740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026744:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8026748:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802674c:	fb0c 4e03 	mla	lr, ip, r3, r4
 8026750:	f1bc 0f00 	cmp.w	ip, #0
 8026754:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8026758:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 802675c:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8026760:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8026764:	8808      	ldrh	r0, [r1, #0]
 8026766:	db2f      	blt.n	80267c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8026768:	45e2      	cmp	sl, ip
 802676a:	dd2d      	ble.n	80267c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802676c:	2c00      	cmp	r4, #0
 802676e:	db29      	blt.n	80267c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8026770:	42a3      	cmp	r3, r4
 8026772:	dd27      	ble.n	80267c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8026774:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8026778:	1c62      	adds	r2, r4, #1
 802677a:	d428      	bmi.n	80267ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802677c:	4293      	cmp	r3, r2
 802677e:	dd26      	ble.n	80267ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8026780:	b32f      	cbz	r7, 80267ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8026782:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8026786:	f11c 0c01 	adds.w	ip, ip, #1
 802678a:	d424      	bmi.n	80267d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 802678c:	45e2      	cmp	sl, ip
 802678e:	dd22      	ble.n	80267d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8026790:	2e00      	cmp	r6, #0
 8026792:	f000 809c 	beq.w	80268ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 8026796:	2c00      	cmp	r4, #0
 8026798:	db1b      	blt.n	80267d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802679a:	42a3      	cmp	r3, r4
 802679c:	dd19      	ble.n	80267d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802679e:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 80267a2:	3401      	adds	r4, #1
 80267a4:	d41a      	bmi.n	80267dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80267a6:	42a3      	cmp	r3, r4
 80267a8:	dd18      	ble.n	80267dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80267aa:	b1cf      	cbz	r7, 80267e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 80267ac:	3301      	adds	r3, #1
 80267ae:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 80267b2:	2f0f      	cmp	r7, #15
 80267b4:	d915      	bls.n	80267e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 80267b6:	4b49      	ldr	r3, [pc, #292]	; (80268dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 80267b8:	f240 11ef 	movw	r1, #495	; 0x1ef
 80267bc:	4a48      	ldr	r2, [pc, #288]	; (80268e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 80267be:	4849      	ldr	r0, [pc, #292]	; (80268e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 80267c0:	f002 ff88 	bl	80296d4 <__assert_func>
 80267c4:	4681      	mov	r9, r0
 80267c6:	e7d7      	b.n	8026778 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 80267c8:	4686      	mov	lr, r0
 80267ca:	4681      	mov	r9, r0
 80267cc:	e7db      	b.n	8026786 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 80267ce:	4686      	mov	lr, r0
 80267d0:	e7d9      	b.n	8026786 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 80267d2:	4684      	mov	ip, r0
 80267d4:	e7e5      	b.n	80267a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 80267d6:	4603      	mov	r3, r0
 80267d8:	4684      	mov	ip, r0
 80267da:	e7ea      	b.n	80267b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80267dc:	4603      	mov	r3, r0
 80267de:	e7e8      	b.n	80267b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80267e0:	4603      	mov	r3, r0
 80267e2:	2e0f      	cmp	r6, #15
 80267e4:	d8e7      	bhi.n	80267b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80267e6:	fb17 f806 	smulbb	r8, r7, r6
 80267ea:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80267ee:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 80267f2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80267f6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80267fa:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80267fe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026802:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026806:	ea44 0909 	orr.w	r9, r4, r9
 802680a:	f1c6 0410 	rsb	r4, r6, #16
 802680e:	041a      	lsls	r2, r3, #16
 8026810:	ea4a 0e0e 	orr.w	lr, sl, lr
 8026814:	1be4      	subs	r4, r4, r7
 8026816:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 802681a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802681e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026822:	fb07 fe0e 	mul.w	lr, r7, lr
 8026826:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802682a:	4313      	orrs	r3, r2
 802682c:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8026830:	fb04 e409 	mla	r4, r4, r9, lr
 8026834:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8026838:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802683c:	b2af      	uxth	r7, r5
 802683e:	fb08 4303 	mla	r3, r8, r3, r4
 8026842:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8026846:	43ed      	mvns	r5, r5
 8026848:	4322      	orrs	r2, r4
 802684a:	b2ed      	uxtb	r5, r5
 802684c:	fb06 3202 	mla	r2, r6, r2, r3
 8026850:	10c6      	asrs	r6, r0, #3
 8026852:	0d53      	lsrs	r3, r2, #21
 8026854:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8026858:	0952      	lsrs	r2, r2, #5
 802685a:	fb16 f605 	smulbb	r6, r6, r5
 802685e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026862:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026866:	431a      	orrs	r2, r3
 8026868:	b293      	uxth	r3, r2
 802686a:	1202      	asrs	r2, r0, #8
 802686c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026870:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026874:	00dc      	lsls	r4, r3, #3
 8026876:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802687a:	fb12 f205 	smulbb	r2, r2, r5
 802687e:	b2e4      	uxtb	r4, r4
 8026880:	fb0c 2c07 	mla	ip, ip, r7, r2
 8026884:	10da      	asrs	r2, r3, #3
 8026886:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802688a:	fa1f fc8c 	uxth.w	ip, ip
 802688e:	fb02 6207 	mla	r2, r2, r7, r6
 8026892:	f10c 0301 	add.w	r3, ip, #1
 8026896:	b296      	uxth	r6, r2
 8026898:	00c2      	lsls	r2, r0, #3
 802689a:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802689e:	b2d2      	uxtb	r2, r2
 80268a0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80268a4:	fb12 f205 	smulbb	r2, r2, r5
 80268a8:	fb04 2207 	mla	r2, r4, r7, r2
 80268ac:	b292      	uxth	r2, r2
 80268ae:	1c50      	adds	r0, r2, #1
 80268b0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80268b4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80268b8:	4313      	orrs	r3, r2
 80268ba:	1c72      	adds	r2, r6, #1
 80268bc:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80268c0:	0952      	lsrs	r2, r2, #5
 80268c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80268c6:	4313      	orrs	r3, r2
 80268c8:	800b      	strh	r3, [r1, #0]
 80268ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80268ce:	2f0f      	cmp	r7, #15
 80268d0:	f63f af71 	bhi.w	80267b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80268d4:	4603      	mov	r3, r0
 80268d6:	4684      	mov	ip, r0
 80268d8:	e785      	b.n	80267e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 80268da:	bf00      	nop
 80268dc:	0802e1e2 	.word	0x0802e1e2
 80268e0:	0802e84e 	.word	0x0802e84e
 80268e4:	0802e2cb 	.word	0x0802e2cb

080268e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80268e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268ec:	ed2d 8b08 	vpush	{d8-d11}
 80268f0:	b093      	sub	sp, #76	; 0x4c
 80268f2:	461d      	mov	r5, r3
 80268f4:	eeb0 aa40 	vmov.f32	s20, s0
 80268f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80268fa:	eef0 9a60 	vmov.f32	s19, s1
 80268fe:	9210      	str	r2, [sp, #64]	; 0x40
 8026900:	eeb0 9a41 	vmov.f32	s18, s2
 8026904:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8026908:	eeb0 8a62 	vmov.f32	s16, s5
 802690c:	910a      	str	r1, [sp, #40]	; 0x28
 802690e:	eef0 8a43 	vmov.f32	s17, s6
 8026912:	920b      	str	r2, [sp, #44]	; 0x2c
 8026914:	eef0 ba44 	vmov.f32	s23, s8
 8026918:	6859      	ldr	r1, [r3, #4]
 802691a:	eeb0 ba64 	vmov.f32	s22, s9
 802691e:	681b      	ldr	r3, [r3, #0]
 8026920:	eef0 aa45 	vmov.f32	s21, s10
 8026924:	9011      	str	r0, [sp, #68]	; 0x44
 8026926:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 802692a:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802692e:	fb01 2707 	mla	r7, r1, r7, r2
 8026932:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8026936:	9307      	str	r3, [sp, #28]
 8026938:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802693a:	681b      	ldr	r3, [r3, #0]
 802693c:	9309      	str	r3, [sp, #36]	; 0x24
 802693e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026940:	43db      	mvns	r3, r3
 8026942:	b2db      	uxtb	r3, r3
 8026944:	9308      	str	r3, [sp, #32]
 8026946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026948:	2b00      	cmp	r3, #0
 802694a:	dc03      	bgt.n	8026954 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802694c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802694e:	2b00      	cmp	r3, #0
 8026950:	f340 8205 	ble.w	8026d5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8026954:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026956:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802695a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802695e:	1e48      	subs	r0, r1, #1
 8026960:	f102 3cff 	add.w	ip, r2, #4294967295
 8026964:	2d00      	cmp	r5, #0
 8026966:	f340 80da 	ble.w	8026b1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802696a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802696e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026972:	d406      	bmi.n	8026982 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026974:	4586      	cmp	lr, r0
 8026976:	da04      	bge.n	8026982 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026978:	2b00      	cmp	r3, #0
 802697a:	db02      	blt.n	8026982 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802697c:	4563      	cmp	r3, ip
 802697e:	f2c0 80cf 	blt.w	8026b20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8026982:	f11e 0e01 	adds.w	lr, lr, #1
 8026986:	f100 80c1 	bmi.w	8026b0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802698a:	4571      	cmp	r1, lr
 802698c:	f2c0 80be 	blt.w	8026b0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026990:	3301      	adds	r3, #1
 8026992:	f100 80bb 	bmi.w	8026b0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026996:	429a      	cmp	r2, r3
 8026998:	f2c0 80b8 	blt.w	8026b0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802699c:	46a9      	mov	r9, r5
 802699e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80269a2:	f1b9 0f00 	cmp.w	r9, #0
 80269a6:	f340 80d8 	ble.w	8026b5a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80269aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80269ac:	1421      	asrs	r1, r4, #16
 80269ae:	ea4f 4026 	mov.w	r0, r6, asr #16
 80269b2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80269b6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80269ba:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80269be:	f100 8112 	bmi.w	8026be6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80269c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80269c6:	4551      	cmp	r1, sl
 80269c8:	f280 810d 	bge.w	8026be6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80269cc:	2800      	cmp	r0, #0
 80269ce:	f2c0 810a 	blt.w	8026be6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80269d2:	f103 3aff 	add.w	sl, r3, #4294967295
 80269d6:	4550      	cmp	r0, sl
 80269d8:	f280 8105 	bge.w	8026be6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80269dc:	fa0f f38e 	sxth.w	r3, lr
 80269e0:	fb00 1103 	mla	r1, r0, r3, r1
 80269e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80269e6:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80269ea:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80269ee:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80269f2:	f1bc 0f00 	cmp.w	ip, #0
 80269f6:	d007      	beq.n	8026a08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80269f8:	005b      	lsls	r3, r3, #1
 80269fa:	eb0a 0003 	add.w	r0, sl, r3
 80269fe:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8026a02:	930c      	str	r3, [sp, #48]	; 0x30
 8026a04:	8843      	ldrh	r3, [r0, #2]
 8026a06:	930d      	str	r3, [sp, #52]	; 0x34
 8026a08:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8026a0c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026a10:	fb12 f30c 	smulbb	r3, r2, ip
 8026a14:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026a18:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026a1c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026a20:	10db      	asrs	r3, r3, #3
 8026a22:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026a26:	ea40 000e 	orr.w	r0, r0, lr
 8026a2a:	f1cc 0e10 	rsb	lr, ip, #16
 8026a2e:	ea4a 0101 	orr.w	r1, sl, r1
 8026a32:	9f08      	ldr	r7, [sp, #32]
 8026a34:	ebae 0e02 	sub.w	lr, lr, r2
 8026a38:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026a3c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026a40:	4351      	muls	r1, r2
 8026a42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026a44:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026a48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026a4a:	0410      	lsls	r0, r2, #16
 8026a4c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026a50:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026a54:	4310      	orrs	r0, r2
 8026a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026a58:	0412      	lsls	r2, r2, #16
 8026a5a:	fb03 e000 	mla	r0, r3, r0, lr
 8026a5e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8026a62:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026a66:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026a6a:	f8b8 c000 	ldrh.w	ip, [r8]
 8026a6e:	ea42 020e 	orr.w	r2, r2, lr
 8026a72:	ea4f 212c 	mov.w	r1, ip, asr #8
 8026a76:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8026a7a:	fb03 0302 	mla	r3, r3, r2, r0
 8026a7e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026a82:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026a86:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8026a8a:	fb11 f107 	smulbb	r1, r1, r7
 8026a8e:	0d5a      	lsrs	r2, r3, #21
 8026a90:	095b      	lsrs	r3, r3, #5
 8026a92:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026a96:	fa5f fc8c 	uxtb.w	ip, ip
 8026a9a:	fb1e fe07 	smulbb	lr, lr, r7
 8026a9e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026aa2:	fb1c fc07 	smulbb	ip, ip, r7
 8026aa6:	4313      	orrs	r3, r2
 8026aa8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8026aac:	b29b      	uxth	r3, r3
 8026aae:	1218      	asrs	r0, r3, #8
 8026ab0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026ab4:	fb00 1002 	mla	r0, r0, r2, r1
 8026ab8:	10d9      	asrs	r1, r3, #3
 8026aba:	00db      	lsls	r3, r3, #3
 8026abc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026ac0:	b280      	uxth	r0, r0
 8026ac2:	b2db      	uxtb	r3, r3
 8026ac4:	fb01 e102 	mla	r1, r1, r2, lr
 8026ac8:	fb03 c202 	mla	r2, r3, r2, ip
 8026acc:	1c43      	adds	r3, r0, #1
 8026ace:	b289      	uxth	r1, r1
 8026ad0:	b292      	uxth	r2, r2
 8026ad2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026ad6:	f102 0c01 	add.w	ip, r2, #1
 8026ada:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026ade:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026ae2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026ae6:	4313      	orrs	r3, r2
 8026ae8:	1c4a      	adds	r2, r1, #1
 8026aea:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026aee:	0949      	lsrs	r1, r1, #5
 8026af0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026af4:	430b      	orrs	r3, r1
 8026af6:	f8a8 3000 	strh.w	r3, [r8]
 8026afa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026afc:	f108 0802 	add.w	r8, r8, #2
 8026b00:	f109 39ff 	add.w	r9, r9, #4294967295
 8026b04:	441c      	add	r4, r3
 8026b06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026b08:	441e      	add	r6, r3
 8026b0a:	e74a      	b.n	80269a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8026b0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026b0e:	3d01      	subs	r5, #1
 8026b10:	441c      	add	r4, r3
 8026b12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026b14:	441e      	add	r6, r3
 8026b16:	9b07      	ldr	r3, [sp, #28]
 8026b18:	3302      	adds	r3, #2
 8026b1a:	9307      	str	r3, [sp, #28]
 8026b1c:	e722      	b.n	8026964 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026b1e:	d022      	beq.n	8026b66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026b20:	1e6b      	subs	r3, r5, #1
 8026b22:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026b24:	fb00 4003 	mla	r0, r0, r3, r4
 8026b28:	1400      	asrs	r0, r0, #16
 8026b2a:	f53f af37 	bmi.w	802699c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026b2e:	3901      	subs	r1, #1
 8026b30:	4288      	cmp	r0, r1
 8026b32:	f6bf af33 	bge.w	802699c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026b36:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026b38:	fb01 6303 	mla	r3, r1, r3, r6
 8026b3c:	141b      	asrs	r3, r3, #16
 8026b3e:	f53f af2d 	bmi.w	802699c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026b42:	3a01      	subs	r2, #1
 8026b44:	4293      	cmp	r3, r2
 8026b46:	f6bf af29 	bge.w	802699c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026b4a:	46a8      	mov	r8, r5
 8026b4c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8026b50:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8026b54:	f1b8 0f00 	cmp.w	r8, #0
 8026b58:	dc60      	bgt.n	8026c1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8026b5a:	9b07      	ldr	r3, [sp, #28]
 8026b5c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026b60:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026b64:	9307      	str	r3, [sp, #28]
 8026b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026b68:	2b00      	cmp	r3, #0
 8026b6a:	f340 80f8 	ble.w	8026d5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8026b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026b72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026b74:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026b78:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026b7c:	eef0 6a48 	vmov.f32	s13, s16
 8026b80:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026b84:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026b88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b8c:	ee16 4a90 	vmov	r4, s13
 8026b90:	eef0 6a68 	vmov.f32	s13, s17
 8026b94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b98:	ee16 6a90 	vmov	r6, s13
 8026b9c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026ba0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026ba4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026ba8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026bac:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026bb0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026bb4:	ee18 2a10 	vmov	r2, s16
 8026bb8:	eeb0 8a47 	vmov.f32	s16, s14
 8026bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8026bc0:	ee18 2a90 	vmov	r2, s17
 8026bc4:	9327      	str	r3, [sp, #156]	; 0x9c
 8026bc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026bc8:	eef0 8a67 	vmov.f32	s17, s15
 8026bcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8026bd0:	9328      	str	r3, [sp, #160]	; 0xa0
 8026bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026bd6:	3b01      	subs	r3, #1
 8026bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8026bda:	bf08      	it	eq
 8026bdc:	4615      	moveq	r5, r2
 8026bde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026be0:	bf18      	it	ne
 8026be2:	461d      	movne	r5, r3
 8026be4:	e6af      	b.n	8026946 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8026be6:	f111 0a01 	adds.w	sl, r1, #1
 8026bea:	d486      	bmi.n	8026afa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026bec:	45d6      	cmp	lr, sl
 8026bee:	db84      	blt.n	8026afa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026bf0:	f110 0a01 	adds.w	sl, r0, #1
 8026bf4:	d481      	bmi.n	8026afa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026bf6:	4553      	cmp	r3, sl
 8026bf8:	f6ff af7f 	blt.w	8026afa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026bfc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026bfe:	b21b      	sxth	r3, r3
 8026c00:	9101      	str	r1, [sp, #4]
 8026c02:	4641      	mov	r1, r8
 8026c04:	9300      	str	r3, [sp, #0]
 8026c06:	fa0f f38e 	sxth.w	r3, lr
 8026c0a:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8026c0e:	e9cd c704 	strd	ip, r7, [sp, #16]
 8026c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026c14:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026c16:	f7ff fd93 	bl	8026740 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8026c1a:	e76e      	b.n	8026afa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026c1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026c1e:	1430      	asrs	r0, r6, #16
 8026c20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026c22:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026c26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026c2a:	1423      	asrs	r3, r4, #16
 8026c2c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026c30:	fb01 3000 	mla	r0, r1, r0, r3
 8026c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026c36:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8026c3a:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8026c3e:	8858      	ldrh	r0, [r3, #2]
 8026c40:	f1be 0f00 	cmp.w	lr, #0
 8026c44:	d00b      	beq.n	8026c5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8026c46:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026c4a:	3901      	subs	r1, #1
 8026c4c:	0049      	lsls	r1, r1, #1
 8026c4e:	3102      	adds	r1, #2
 8026c50:	eb03 0b01 	add.w	fp, r3, r1
 8026c54:	5a5b      	ldrh	r3, [r3, r1]
 8026c56:	930e      	str	r3, [sp, #56]	; 0x38
 8026c58:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8026c5e:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8026c62:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026c66:	fb12 f30e 	smulbb	r3, r2, lr
 8026c6a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026c6e:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8026c72:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026c76:	10db      	asrs	r3, r3, #3
 8026c78:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026c7c:	ea41 010c 	orr.w	r1, r1, ip
 8026c80:	f1ce 0c10 	rsb	ip, lr, #16
 8026c84:	ea4b 0000 	orr.w	r0, fp, r0
 8026c88:	9f08      	ldr	r7, [sp, #32]
 8026c8a:	ebac 0c02 	sub.w	ip, ip, r2
 8026c8e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026c92:	f108 38ff 	add.w	r8, r8, #4294967295
 8026c96:	4350      	muls	r0, r2
 8026c98:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026c9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026c9e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8026ca2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026ca4:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026ca8:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8026cac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026cae:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026cb2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026cb6:	0412      	lsls	r2, r2, #16
 8026cb8:	ea4b 0101 	orr.w	r1, fp, r1
 8026cbc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026cc0:	fb03 c101 	mla	r1, r3, r1, ip
 8026cc4:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026cc8:	4302      	orrs	r2, r0
 8026cca:	fb03 1202 	mla	r2, r3, r2, r1
 8026cce:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8026cd2:	0952      	lsrs	r2, r2, #5
 8026cd4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026cd8:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8026cdc:	f8b9 2000 	ldrh.w	r2, [r9]
 8026ce0:	ea4b 0303 	orr.w	r3, fp, r3
 8026ce4:	1211      	asrs	r1, r2, #8
 8026ce6:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8026cea:	b29b      	uxth	r3, r3
 8026cec:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026cf0:	00d2      	lsls	r2, r2, #3
 8026cf2:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8026cf6:	fb11 f107 	smulbb	r1, r1, r7
 8026cfa:	1218      	asrs	r0, r3, #8
 8026cfc:	fb1c fc07 	smulbb	ip, ip, r7
 8026d00:	b2d2      	uxtb	r2, r2
 8026d02:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026d06:	fb12 f207 	smulbb	r2, r2, r7
 8026d0a:	fb00 100a 	mla	r0, r0, sl, r1
 8026d0e:	10d9      	asrs	r1, r3, #3
 8026d10:	00db      	lsls	r3, r3, #3
 8026d12:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026d16:	b280      	uxth	r0, r0
 8026d18:	b2db      	uxtb	r3, r3
 8026d1a:	fb01 c10a 	mla	r1, r1, sl, ip
 8026d1e:	fb03 230a 	mla	r3, r3, sl, r2
 8026d22:	1c42      	adds	r2, r0, #1
 8026d24:	b289      	uxth	r1, r1
 8026d26:	b29b      	uxth	r3, r3
 8026d28:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026d2c:	f101 0c01 	add.w	ip, r1, #1
 8026d30:	1c5a      	adds	r2, r3, #1
 8026d32:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026d36:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026d3a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026d3e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026d40:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026d44:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026d48:	441c      	add	r4, r3
 8026d4a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026d4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d50:	4310      	orrs	r0, r2
 8026d52:	441e      	add	r6, r3
 8026d54:	ea40 000c 	orr.w	r0, r0, ip
 8026d58:	f829 0b02 	strh.w	r0, [r9], #2
 8026d5c:	e6fa      	b.n	8026b54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026d5e:	b013      	add	sp, #76	; 0x4c
 8026d60:	ecbd 8b08 	vpop	{d8-d11}
 8026d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026d68 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8026d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d6c:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8026d70:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8026d74:	fb06 5c03 	mla	ip, r6, r3, r5
 8026d78:	2e00      	cmp	r6, #0
 8026d7a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8026d7e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8026d82:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8026d86:	8808      	ldrh	r0, [r1, #0]
 8026d88:	db2e      	blt.n	8026de8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8026d8a:	45b0      	cmp	r8, r6
 8026d8c:	dd2c      	ble.n	8026de8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8026d8e:	2d00      	cmp	r5, #0
 8026d90:	db28      	blt.n	8026de4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8026d92:	42ab      	cmp	r3, r5
 8026d94:	dd26      	ble.n	8026de4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8026d96:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8026d9a:	1c6a      	adds	r2, r5, #1
 8026d9c:	d427      	bmi.n	8026dee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8026d9e:	4293      	cmp	r3, r2
 8026da0:	dd25      	ble.n	8026dee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8026da2:	b324      	cbz	r4, 8026dee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8026da4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8026da8:	3601      	adds	r6, #1
 8026daa:	d424      	bmi.n	8026df6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8026dac:	45b0      	cmp	r8, r6
 8026dae:	dd22      	ble.n	8026df6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8026db0:	b31f      	cbz	r7, 8026dfa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8026db2:	2d00      	cmp	r5, #0
 8026db4:	db1d      	blt.n	8026df2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8026db6:	42ab      	cmp	r3, r5
 8026db8:	dd1b      	ble.n	8026df2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8026dba:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8026dbe:	3501      	adds	r5, #1
 8026dc0:	d405      	bmi.n	8026dce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8026dc2:	42ab      	cmp	r3, r5
 8026dc4:	dd03      	ble.n	8026dce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8026dc6:	b124      	cbz	r4, 8026dd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8026dc8:	3301      	adds	r3, #1
 8026dca:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8026dce:	2c0f      	cmp	r4, #15
 8026dd0:	d801      	bhi.n	8026dd6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026dd2:	2f0f      	cmp	r7, #15
 8026dd4:	d914      	bls.n	8026e00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8026dd6:	4b27      	ldr	r3, [pc, #156]	; (8026e74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8026dd8:	f240 11ef 	movw	r1, #495	; 0x1ef
 8026ddc:	4a26      	ldr	r2, [pc, #152]	; (8026e78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8026dde:	4827      	ldr	r0, [pc, #156]	; (8026e7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8026de0:	f002 fc78 	bl	80296d4 <__assert_func>
 8026de4:	4684      	mov	ip, r0
 8026de6:	e7d8      	b.n	8026d9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8026de8:	4602      	mov	r2, r0
 8026dea:	4684      	mov	ip, r0
 8026dec:	e7dc      	b.n	8026da8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8026dee:	4602      	mov	r2, r0
 8026df0:	e7da      	b.n	8026da8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8026df2:	4606      	mov	r6, r0
 8026df4:	e7e3      	b.n	8026dbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8026df6:	4606      	mov	r6, r0
 8026df8:	e7e9      	b.n	8026dce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8026dfa:	2c0f      	cmp	r4, #15
 8026dfc:	d8eb      	bhi.n	8026dd6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026dfe:	4606      	mov	r6, r0
 8026e00:	fb14 f307 	smulbb	r3, r4, r7
 8026e04:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8026e08:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8026e0c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026e10:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8026e14:	10db      	asrs	r3, r3, #3
 8026e16:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026e1a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026e1e:	ea45 0c0c 	orr.w	ip, r5, ip
 8026e22:	f1c7 0510 	rsb	r5, r7, #16
 8026e26:	ea4e 0202 	orr.w	r2, lr, r2
 8026e2a:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8026e2e:	1b2d      	subs	r5, r5, r4
 8026e30:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8026e34:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8026e38:	4354      	muls	r4, r2
 8026e3a:	fb05 450c 	mla	r5, r5, ip, r4
 8026e3e:	0404      	lsls	r4, r0, #16
 8026e40:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026e44:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026e48:	4320      	orrs	r0, r4
 8026e4a:	fb03 5400 	mla	r4, r3, r0, r5
 8026e4e:	0430      	lsls	r0, r6, #16
 8026e50:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8026e54:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026e58:	4330      	orrs	r0, r6
 8026e5a:	fb07 4000 	mla	r0, r7, r0, r4
 8026e5e:	0d43      	lsrs	r3, r0, #21
 8026e60:	0940      	lsrs	r0, r0, #5
 8026e62:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026e66:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026e6a:	4318      	orrs	r0, r3
 8026e6c:	8008      	strh	r0, [r1, #0]
 8026e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026e72:	bf00      	nop
 8026e74:	0802e1e2 	.word	0x0802e1e2
 8026e78:	0802e84e 	.word	0x0802e84e
 8026e7c:	0802e2cb 	.word	0x0802e2cb

08026e80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e84:	ed2d 8b08 	vpush	{d8-d11}
 8026e88:	b08f      	sub	sp, #60	; 0x3c
 8026e8a:	461d      	mov	r5, r3
 8026e8c:	eeb0 aa40 	vmov.f32	s20, s0
 8026e90:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026e92:	eef0 9a60 	vmov.f32	s19, s1
 8026e96:	9107      	str	r1, [sp, #28]
 8026e98:	eeb0 9a41 	vmov.f32	s18, s2
 8026e9c:	6859      	ldr	r1, [r3, #4]
 8026e9e:	eeb0 8a62 	vmov.f32	s16, s5
 8026ea2:	920c      	str	r2, [sp, #48]	; 0x30
 8026ea4:	eef0 8a43 	vmov.f32	s17, s6
 8026ea8:	681b      	ldr	r3, [r3, #0]
 8026eaa:	eef0 ba44 	vmov.f32	s23, s8
 8026eae:	eeb0 ba64 	vmov.f32	s22, s9
 8026eb2:	900d      	str	r0, [sp, #52]	; 0x34
 8026eb4:	eef0 aa45 	vmov.f32	s21, s10
 8026eb8:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8026ebc:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8026ec0:	fb01 2707 	mla	r7, r1, r7, r2
 8026ec4:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8026ec8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026eca:	f8d3 8000 	ldr.w	r8, [r3]
 8026ece:	9b07      	ldr	r3, [sp, #28]
 8026ed0:	2b00      	cmp	r3, #0
 8026ed2:	dc03      	bgt.n	8026edc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8026ed4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026ed6:	2b00      	cmp	r3, #0
 8026ed8:	f340 8182 	ble.w	80271e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8026edc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026ede:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026ee2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026ee6:	1e48      	subs	r0, r1, #1
 8026ee8:	f102 3cff 	add.w	ip, r2, #4294967295
 8026eec:	2d00      	cmp	r5, #0
 8026eee:	f340 809b 	ble.w	8027028 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8026ef2:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026ef6:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026efa:	d406      	bmi.n	8026f0a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026efc:	4586      	cmp	lr, r0
 8026efe:	da04      	bge.n	8026f0a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026f00:	2b00      	cmp	r3, #0
 8026f02:	db02      	blt.n	8026f0a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026f04:	4563      	cmp	r3, ip
 8026f06:	f2c0 8090 	blt.w	802702a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026f0a:	f11e 0e01 	adds.w	lr, lr, #1
 8026f0e:	f100 8084 	bmi.w	802701a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026f12:	4571      	cmp	r1, lr
 8026f14:	f2c0 8081 	blt.w	802701a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026f18:	3301      	adds	r3, #1
 8026f1a:	d47e      	bmi.n	802701a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026f1c:	429a      	cmp	r2, r3
 8026f1e:	db7c      	blt.n	802701a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026f20:	46aa      	mov	sl, r5
 8026f22:	46b9      	mov	r9, r7
 8026f24:	f1ba 0f00 	cmp.w	sl, #0
 8026f28:	f340 8099 	ble.w	802705e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8026f2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026f2e:	1421      	asrs	r1, r4, #16
 8026f30:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026f34:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026f38:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026f3c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026f40:	f100 80d1 	bmi.w	80270e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8026f44:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026f48:	4559      	cmp	r1, fp
 8026f4a:	f280 80cc 	bge.w	80270e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8026f4e:	2800      	cmp	r0, #0
 8026f50:	f2c0 80c9 	blt.w	80270e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8026f54:	f103 3bff 	add.w	fp, r3, #4294967295
 8026f58:	4558      	cmp	r0, fp
 8026f5a:	f280 80c4 	bge.w	80270e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8026f5e:	fa0f fe8e 	sxth.w	lr, lr
 8026f62:	fb00 110e 	mla	r1, r0, lr, r1
 8026f66:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026f6a:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8026f6e:	8841      	ldrh	r1, [r0, #2]
 8026f70:	f1bc 0f00 	cmp.w	ip, #0
 8026f74:	d00b      	beq.n	8026f8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8026f76:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8026f7a:	3b01      	subs	r3, #1
 8026f7c:	005b      	lsls	r3, r3, #1
 8026f7e:	3302      	adds	r3, #2
 8026f80:	eb00 0e03 	add.w	lr, r0, r3
 8026f84:	5ac3      	ldrh	r3, [r0, r3]
 8026f86:	9308      	str	r3, [sp, #32]
 8026f88:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8026f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8026f8e:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8026f92:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026f96:	fb12 f30c 	smulbb	r3, r2, ip
 8026f9a:	f1cc 0e10 	rsb	lr, ip, #16
 8026f9e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026fa2:	10db      	asrs	r3, r3, #3
 8026fa4:	ebae 0e02 	sub.w	lr, lr, r2
 8026fa8:	ea40 000b 	orr.w	r0, r0, fp
 8026fac:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026fb0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026fb4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026fb8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026fbc:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026fc0:	ea4b 0101 	orr.w	r1, fp, r1
 8026fc4:	4351      	muls	r1, r2
 8026fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026fc8:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026fcc:	0410      	lsls	r0, r2, #16
 8026fce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026fd2:	9908      	ldr	r1, [sp, #32]
 8026fd4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026fd8:	4310      	orrs	r0, r2
 8026fda:	9a08      	ldr	r2, [sp, #32]
 8026fdc:	0412      	lsls	r2, r2, #16
 8026fde:	fb03 e000 	mla	r0, r3, r0, lr
 8026fe2:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8026fe6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026fea:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026fee:	ea42 020e 	orr.w	r2, r2, lr
 8026ff2:	fb03 0302 	mla	r3, r3, r2, r0
 8026ff6:	0d5a      	lsrs	r2, r3, #21
 8026ff8:	095b      	lsrs	r3, r3, #5
 8026ffa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026ffe:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027002:	4313      	orrs	r3, r2
 8027004:	f8a9 3000 	strh.w	r3, [r9]
 8027008:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802700a:	f109 0902 	add.w	r9, r9, #2
 802700e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027012:	441c      	add	r4, r3
 8027014:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027016:	441e      	add	r6, r3
 8027018:	e784      	b.n	8026f24 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802701a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802701c:	3d01      	subs	r5, #1
 802701e:	3702      	adds	r7, #2
 8027020:	441c      	add	r4, r3
 8027022:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027024:	441e      	add	r6, r3
 8027026:	e761      	b.n	8026eec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027028:	d01d      	beq.n	8027066 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802702a:	1e6b      	subs	r3, r5, #1
 802702c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802702e:	fb00 4003 	mla	r0, r0, r3, r4
 8027032:	1400      	asrs	r0, r0, #16
 8027034:	f53f af74 	bmi.w	8026f20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027038:	3901      	subs	r1, #1
 802703a:	4288      	cmp	r0, r1
 802703c:	f6bf af70 	bge.w	8026f20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027040:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027042:	fb01 6303 	mla	r3, r1, r3, r6
 8027046:	141b      	asrs	r3, r3, #16
 8027048:	f53f af6a 	bmi.w	8026f20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802704c:	3a01      	subs	r2, #1
 802704e:	4293      	cmp	r3, r2
 8027050:	f6bf af66 	bge.w	8026f20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027054:	46a9      	mov	r9, r5
 8027056:	46ba      	mov	sl, r7
 8027058:	f1b9 0f00 	cmp.w	r9, #0
 802705c:	dc5b      	bgt.n	8027116 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802705e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027062:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8027066:	9b07      	ldr	r3, [sp, #28]
 8027068:	2b00      	cmp	r3, #0
 802706a:	f340 80b9 	ble.w	80271e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802706e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027072:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027074:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027078:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802707c:	eef0 6a48 	vmov.f32	s13, s16
 8027080:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027084:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027088:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802708c:	ee16 4a90 	vmov	r4, s13
 8027090:	eef0 6a68 	vmov.f32	s13, s17
 8027094:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027098:	ee16 6a90 	vmov	r6, s13
 802709c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80270a0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80270a4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80270a8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80270ac:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80270b0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80270b4:	ee18 2a10 	vmov	r2, s16
 80270b8:	eeb0 8a47 	vmov.f32	s16, s14
 80270bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80270c0:	ee18 2a90 	vmov	r2, s17
 80270c4:	9323      	str	r3, [sp, #140]	; 0x8c
 80270c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80270c8:	eef0 8a67 	vmov.f32	s17, s15
 80270cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80270d0:	9324      	str	r3, [sp, #144]	; 0x90
 80270d2:	9b07      	ldr	r3, [sp, #28]
 80270d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80270d6:	3b01      	subs	r3, #1
 80270d8:	9307      	str	r3, [sp, #28]
 80270da:	bf08      	it	eq
 80270dc:	4615      	moveq	r5, r2
 80270de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80270e0:	bf18      	it	ne
 80270e2:	461d      	movne	r5, r3
 80270e4:	e6f3      	b.n	8026ece <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80270e6:	f111 0b01 	adds.w	fp, r1, #1
 80270ea:	d48d      	bmi.n	8027008 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80270ec:	45de      	cmp	lr, fp
 80270ee:	db8b      	blt.n	8027008 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80270f0:	f110 0b01 	adds.w	fp, r0, #1
 80270f4:	d488      	bmi.n	8027008 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80270f6:	455b      	cmp	r3, fp
 80270f8:	db86      	blt.n	8027008 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80270fa:	b21b      	sxth	r3, r3
 80270fc:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8027100:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8027104:	9300      	str	r3, [sp, #0]
 8027106:	4642      	mov	r2, r8
 8027108:	fa0f f38e 	sxth.w	r3, lr
 802710c:	4649      	mov	r1, r9
 802710e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027110:	f7ff fe2a 	bl	8026d68 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8027114:	e778      	b.n	8027008 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027116:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027118:	1420      	asrs	r0, r4, #16
 802711a:	1431      	asrs	r1, r6, #16
 802711c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027120:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8027124:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027128:	fb03 0101 	mla	r1, r3, r1, r0
 802712c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027130:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8027134:	8841      	ldrh	r1, [r0, #2]
 8027136:	f1be 0f00 	cmp.w	lr, #0
 802713a:	d00b      	beq.n	8027154 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802713c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8027140:	3b01      	subs	r3, #1
 8027142:	005b      	lsls	r3, r3, #1
 8027144:	3302      	adds	r3, #2
 8027146:	eb00 0b03 	add.w	fp, r0, r3
 802714a:	5ac3      	ldrh	r3, [r0, r3]
 802714c:	930a      	str	r3, [sp, #40]	; 0x28
 802714e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027152:	930b      	str	r3, [sp, #44]	; 0x2c
 8027154:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8027158:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802715c:	fb12 f30e 	smulbb	r3, r2, lr
 8027160:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027164:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027168:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802716c:	10db      	asrs	r3, r3, #3
 802716e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027172:	ea40 000c 	orr.w	r0, r0, ip
 8027176:	f1ce 0c10 	rsb	ip, lr, #16
 802717a:	ea4b 0101 	orr.w	r1, fp, r1
 802717e:	f109 39ff 	add.w	r9, r9, #4294967295
 8027182:	ebac 0c02 	sub.w	ip, ip, r2
 8027186:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802718a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802718e:	4351      	muls	r1, r2
 8027190:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027192:	fb0c 1c00 	mla	ip, ip, r0, r1
 8027196:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027198:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802719c:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80271a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80271a2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80271a6:	0412      	lsls	r2, r2, #16
 80271a8:	ea4b 0000 	orr.w	r0, fp, r0
 80271ac:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80271b0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80271b4:	fb03 c000 	mla	r0, r3, r0, ip
 80271b8:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80271bc:	ea42 0b0b 	orr.w	fp, r2, fp
 80271c0:	fb03 000b 	mla	r0, r3, fp, r0
 80271c4:	0d43      	lsrs	r3, r0, #21
 80271c6:	0940      	lsrs	r0, r0, #5
 80271c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80271cc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80271d0:	4318      	orrs	r0, r3
 80271d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80271d4:	441c      	add	r4, r3
 80271d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80271d8:	f82a 0b02 	strh.w	r0, [sl], #2
 80271dc:	441e      	add	r6, r3
 80271de:	e73b      	b.n	8027058 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80271e0:	b00f      	add	sp, #60	; 0x3c
 80271e2:	ecbd 8b08 	vpop	{d8-d11}
 80271e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080271ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80271ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271f0:	880e      	ldrh	r6, [r1, #0]
 80271f2:	b085      	sub	sp, #20
 80271f4:	4690      	mov	r8, r2
 80271f6:	ea4f 2c26 	mov.w	ip, r6, asr #8
 80271fa:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80271fe:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8027202:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8027206:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 802720a:	00f6      	lsls	r6, r6, #3
 802720c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8027210:	9200      	str	r2, [sp, #0]
 8027212:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8027216:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 802721a:	9201      	str	r2, [sp, #4]
 802721c:	b2f2      	uxtb	r2, r6
 802721e:	2c00      	cmp	r4, #0
 8027220:	fb04 5603 	mla	r6, r4, r3, r5
 8027224:	9202      	str	r2, [sp, #8]
 8027226:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 802722a:	db36      	blt.n	802729a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 802722c:	45a6      	cmp	lr, r4
 802722e:	dd34      	ble.n	802729a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8027230:	2d00      	cmp	r5, #0
 8027232:	db30      	blt.n	8027296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8027234:	42ab      	cmp	r3, r5
 8027236:	dd2e      	ble.n	8027296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8027238:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 802723c:	1c6e      	adds	r6, r5, #1
 802723e:	d42f      	bmi.n	80272a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8027240:	42b3      	cmp	r3, r6
 8027242:	dd2d      	ble.n	80272a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8027244:	b370      	cbz	r0, 80272a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 8027246:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802724a:	3401      	adds	r4, #1
 802724c:	d42e      	bmi.n	80272ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 802724e:	45a6      	cmp	lr, r4
 8027250:	dd2c      	ble.n	80272ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8027252:	b377      	cbz	r7, 80272b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 8027254:	2d00      	cmp	r5, #0
 8027256:	db27      	blt.n	80272a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8027258:	42ab      	cmp	r3, r5
 802725a:	dd25      	ble.n	80272a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 802725c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027260:	3501      	adds	r5, #1
 8027262:	d429      	bmi.n	80272b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8027264:	42ab      	cmp	r3, r5
 8027266:	dd27      	ble.n	80272b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8027268:	b340      	cbz	r0, 80272bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 802726a:	3301      	adds	r3, #1
 802726c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8027270:	280f      	cmp	r0, #15
 8027272:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8027276:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802727a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802727e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8027282:	d801      	bhi.n	8027288 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8027284:	2f0f      	cmp	r7, #15
 8027286:	d91b      	bls.n	80272c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 8027288:	4b85      	ldr	r3, [pc, #532]	; (80274a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 802728a:	f240 210d 	movw	r1, #525	; 0x20d
 802728e:	4a85      	ldr	r2, [pc, #532]	; (80274a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8027290:	4885      	ldr	r0, [pc, #532]	; (80274a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8027292:	f002 fa1f 	bl	80296d4 <__assert_func>
 8027296:	2200      	movs	r2, #0
 8027298:	e7d0      	b.n	802723c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 802729a:	2600      	movs	r6, #0
 802729c:	4632      	mov	r2, r6
 802729e:	e7d4      	b.n	802724a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 80272a0:	2600      	movs	r6, #0
 80272a2:	e7d2      	b.n	802724a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 80272a4:	4606      	mov	r6, r0
 80272a6:	e7d0      	b.n	802724a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 80272a8:	2400      	movs	r4, #0
 80272aa:	e7d9      	b.n	8027260 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80272ac:	2300      	movs	r3, #0
 80272ae:	461c      	mov	r4, r3
 80272b0:	e7de      	b.n	8027270 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 80272b2:	463b      	mov	r3, r7
 80272b4:	463c      	mov	r4, r7
 80272b6:	e7db      	b.n	8027270 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 80272b8:	2300      	movs	r3, #0
 80272ba:	e7d9      	b.n	8027270 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 80272bc:	4603      	mov	r3, r0
 80272be:	e7d7      	b.n	8027270 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 80272c0:	b280      	uxth	r0, r0
 80272c2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80272c6:	b2bf      	uxth	r7, r7
 80272c8:	fb00 fe07 	mul.w	lr, r0, r7
 80272cc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80272d0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80272d4:	eba0 0c0e 	sub.w	ip, r0, lr
 80272d8:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80272dc:	b2bf      	uxth	r7, r7
 80272de:	fa1f fc8c 	uxth.w	ip, ip
 80272e2:	eba5 0507 	sub.w	r5, r5, r7
 80272e6:	fb0c f00a 	mul.w	r0, ip, sl
 80272ea:	b2ad      	uxth	r5, r5
 80272ec:	fb05 000b 	mla	r0, r5, fp, r0
 80272f0:	fb07 0009 	mla	r0, r7, r9, r0
 80272f4:	fb0e 0008 	mla	r0, lr, r8, r0
 80272f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80272fc:	9003      	str	r0, [sp, #12]
 80272fe:	d018      	beq.n	8027332 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x146>
 8027300:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027304:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027308:	fb0b f000 	mul.w	r0, fp, r0
 802730c:	fb0b fb02 	mul.w	fp, fp, r2
 8027310:	0a02      	lsrs	r2, r0, #8
 8027312:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027316:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802731a:	4402      	add	r2, r0
 802731c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8027320:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027324:	0a12      	lsrs	r2, r2, #8
 8027326:	0a00      	lsrs	r0, r0, #8
 8027328:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802732c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027330:	4302      	orrs	r2, r0
 8027332:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027336:	d019      	beq.n	802736c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x180>
 8027338:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802733c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027340:	fb0a fb0b 	mul.w	fp, sl, fp
 8027344:	fb0a fa06 	mul.w	sl, sl, r6
 8027348:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802734c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027350:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027354:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027358:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802735c:	445e      	add	r6, fp
 802735e:	0a00      	lsrs	r0, r0, #8
 8027360:	0a36      	lsrs	r6, r6, #8
 8027362:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027366:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802736a:	4306      	orrs	r6, r0
 802736c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027370:	d019      	beq.n	80273a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1ba>
 8027372:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027376:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802737a:	fb09 fa0a 	mul.w	sl, r9, sl
 802737e:	fb09 f904 	mul.w	r9, r9, r4
 8027382:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027386:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802738a:	f509 7080 	add.w	r0, r9, #256	; 0x100
 802738e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027392:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8027396:	4454      	add	r4, sl
 8027398:	0a00      	lsrs	r0, r0, #8
 802739a:	0a24      	lsrs	r4, r4, #8
 802739c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80273a0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80273a4:	4304      	orrs	r4, r0
 80273a6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80273aa:	d019      	beq.n	80273e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f4>
 80273ac:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80273b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80273b4:	fb08 f909 	mul.w	r9, r8, r9
 80273b8:	fb08 f803 	mul.w	r8, r8, r3
 80273bc:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80273c0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80273c4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80273c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80273cc:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80273d0:	444b      	add	r3, r9
 80273d2:	0a00      	lsrs	r0, r0, #8
 80273d4:	0a1b      	lsrs	r3, r3, #8
 80273d6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80273da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80273de:	4303      	orrs	r3, r0
 80273e0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80273e4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80273e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80273ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80273f0:	fb0c f808 	mul.w	r8, ip, r8
 80273f4:	fb0c f606 	mul.w	r6, ip, r6
 80273f8:	fb05 8800 	mla	r8, r5, r0, r8
 80273fc:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8027400:	fb05 6202 	mla	r2, r5, r2, r6
 8027404:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8027408:	fb07 8800 	mla	r8, r7, r0, r8
 802740c:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8027410:	b2ad      	uxth	r5, r5
 8027412:	fb0e 8000 	mla	r0, lr, r0, r8
 8027416:	0a00      	lsrs	r0, r0, #8
 8027418:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 802741c:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8027420:	9c00      	ldr	r4, [sp, #0]
 8027422:	fb07 2700 	mla	r7, r7, r0, r2
 8027426:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 802742a:	9b03      	ldr	r3, [sp, #12]
 802742c:	fb0e 7000 	mla	r0, lr, r0, r7
 8027430:	436b      	muls	r3, r5
 8027432:	0a00      	lsrs	r0, r0, #8
 8027434:	1c5a      	adds	r2, r3, #1
 8027436:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802743a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802743e:	ea48 0000 	orr.w	r0, r8, r0
 8027442:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8027446:	0c03      	lsrs	r3, r0, #16
 8027448:	b2d2      	uxtb	r2, r2
 802744a:	fb14 f602 	smulbb	r6, r4, r2
 802744e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8027452:	b2c0      	uxtb	r0, r0
 8027454:	fb03 6305 	mla	r3, r3, r5, r6
 8027458:	b29e      	uxth	r6, r3
 802745a:	9b01      	ldr	r3, [sp, #4]
 802745c:	fb13 f302 	smulbb	r3, r3, r2
 8027460:	fb04 3405 	mla	r4, r4, r5, r3
 8027464:	9b02      	ldr	r3, [sp, #8]
 8027466:	fb13 f202 	smulbb	r2, r3, r2
 802746a:	b2a4      	uxth	r4, r4
 802746c:	1c73      	adds	r3, r6, #1
 802746e:	fb00 2005 	mla	r0, r0, r5, r2
 8027472:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8027476:	b280      	uxth	r0, r0
 8027478:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802747c:	1c42      	adds	r2, r0, #1
 802747e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027482:	1c62      	adds	r2, r4, #1
 8027484:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027488:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802748c:	0952      	lsrs	r2, r2, #5
 802748e:	4303      	orrs	r3, r0
 8027490:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027494:	4313      	orrs	r3, r2
 8027496:	800b      	strh	r3, [r1, #0]
 8027498:	b005      	add	sp, #20
 802749a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802749e:	bf00      	nop
 80274a0:	0802e1e2 	.word	0x0802e1e2
 80274a4:	0802e7a5 	.word	0x0802e7a5
 80274a8:	0802e2cb 	.word	0x0802e2cb

080274ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80274ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274b0:	ed2d 8b08 	vpush	{d8-d11}
 80274b4:	b09d      	sub	sp, #116	; 0x74
 80274b6:	eeb0 aa40 	vmov.f32	s20, s0
 80274ba:	eef0 9a60 	vmov.f32	s19, s1
 80274be:	9219      	str	r2, [sp, #100]	; 0x64
 80274c0:	eeb0 9a41 	vmov.f32	s18, s2
 80274c4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80274c6:	eeb0 8a62 	vmov.f32	s16, s5
 80274ca:	9307      	str	r3, [sp, #28]
 80274cc:	eef0 8a43 	vmov.f32	s17, s6
 80274d0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80274d4:	eef0 ba44 	vmov.f32	s23, s8
 80274d8:	901b      	str	r0, [sp, #108]	; 0x6c
 80274da:	eeb0 ba64 	vmov.f32	s22, s9
 80274de:	931a      	str	r3, [sp, #104]	; 0x68
 80274e0:	eef0 aa45 	vmov.f32	s21, s10
 80274e4:	6850      	ldr	r0, [r2, #4]
 80274e6:	9117      	str	r1, [sp, #92]	; 0x5c
 80274e8:	6812      	ldr	r2, [r2, #0]
 80274ea:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 80274ee:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 80274f2:	fb00 1303 	mla	r3, r0, r3, r1
 80274f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80274fa:	930a      	str	r3, [sp, #40]	; 0x28
 80274fc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80274fe:	681b      	ldr	r3, [r3, #0]
 8027500:	9310      	str	r3, [sp, #64]	; 0x40
 8027502:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8027506:	930b      	str	r3, [sp, #44]	; 0x2c
 8027508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802750a:	2b00      	cmp	r3, #0
 802750c:	dc03      	bgt.n	8027516 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802750e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027510:	2b00      	cmp	r3, #0
 8027512:	f340 837b 	ble.w	8027c0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8027516:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027518:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802751c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027520:	1e48      	subs	r0, r1, #1
 8027522:	1e57      	subs	r7, r2, #1
 8027524:	9b07      	ldr	r3, [sp, #28]
 8027526:	2b00      	cmp	r3, #0
 8027528:	f340 8194 	ble.w	8027854 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802752c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027530:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027534:	d406      	bmi.n	8027544 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027536:	4584      	cmp	ip, r0
 8027538:	da04      	bge.n	8027544 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802753a:	2b00      	cmp	r3, #0
 802753c:	db02      	blt.n	8027544 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802753e:	42bb      	cmp	r3, r7
 8027540:	f2c0 8189 	blt.w	8027856 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027544:	f11c 0c01 	adds.w	ip, ip, #1
 8027548:	f100 8179 	bmi.w	802783e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802754c:	4561      	cmp	r1, ip
 802754e:	f2c0 8176 	blt.w	802783e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8027552:	3301      	adds	r3, #1
 8027554:	f100 8173 	bmi.w	802783e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8027558:	429a      	cmp	r2, r3
 802755a:	f2c0 8170 	blt.w	802783e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802755e:	9b07      	ldr	r3, [sp, #28]
 8027560:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027562:	9318      	str	r3, [sp, #96]	; 0x60
 8027564:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027566:	2b00      	cmp	r3, #0
 8027568:	f340 8192 	ble.w	8027890 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 802756c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802756e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027572:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027574:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027578:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802757c:	1422      	asrs	r2, r4, #16
 802757e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027582:	689b      	ldr	r3, [r3, #8]
 8027584:	f100 81d3 	bmi.w	802792e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8027588:	f103 38ff 	add.w	r8, r3, #4294967295
 802758c:	4542      	cmp	r2, r8
 802758e:	f280 81ce 	bge.w	802792e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8027592:	f1bc 0f00 	cmp.w	ip, #0
 8027596:	f2c0 81ca 	blt.w	802792e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802759a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802759e:	45c4      	cmp	ip, r8
 80275a0:	f280 81c5 	bge.w	802792e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80275a4:	b21b      	sxth	r3, r3
 80275a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80275a8:	fb0c 2203 	mla	r2, ip, r3, r2
 80275ac:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80275b0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80275b4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80275b8:	2800      	cmp	r0, #0
 80275ba:	f000 81af 	beq.w	802791c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80275be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80275c2:	950c      	str	r5, [sp, #48]	; 0x30
 80275c4:	0e2d      	lsrs	r5, r5, #24
 80275c6:	9513      	str	r5, [sp, #76]	; 0x4c
 80275c8:	b181      	cbz	r1, 80275ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80275ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80275ce:	3b01      	subs	r3, #1
 80275d0:	009b      	lsls	r3, r3, #2
 80275d2:	3304      	adds	r3, #4
 80275d4:	eb08 0c03 	add.w	ip, r8, r3
 80275d8:	f858 3003 	ldr.w	r3, [r8, r3]
 80275dc:	9308      	str	r3, [sp, #32]
 80275de:	0e1b      	lsrs	r3, r3, #24
 80275e0:	9311      	str	r3, [sp, #68]	; 0x44
 80275e2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80275e6:	930d      	str	r3, [sp, #52]	; 0x34
 80275e8:	0e1b      	lsrs	r3, r3, #24
 80275ea:	9314      	str	r3, [sp, #80]	; 0x50
 80275ec:	b280      	uxth	r0, r0
 80275ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80275f0:	b289      	uxth	r1, r1
 80275f2:	fb00 f901 	mul.w	r9, r0, r1
 80275f6:	0100      	lsls	r0, r0, #4
 80275f8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80275fc:	eba0 0809 	sub.w	r8, r0, r9
 8027600:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027604:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027606:	b289      	uxth	r1, r1
 8027608:	fa1f f888 	uxth.w	r8, r8
 802760c:	1a5b      	subs	r3, r3, r1
 802760e:	fb08 f000 	mul.w	r0, r8, r0
 8027612:	b29b      	uxth	r3, r3
 8027614:	fb03 000e 	mla	r0, r3, lr, r0
 8027618:	fb01 0005 	mla	r0, r1, r5, r0
 802761c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802761e:	fb09 0005 	mla	r0, r9, r5, r0
 8027622:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027626:	2800      	cmp	r0, #0
 8027628:	f000 8100 	beq.w	802782c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802762c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027630:	d01b      	beq.n	802766a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8027632:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027636:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802763a:	fb0e fa0a 	mul.w	sl, lr, sl
 802763e:	fb0e fe02 	mul.w	lr, lr, r2
 8027642:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027646:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802764a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802764e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027652:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027656:	4452      	add	r2, sl
 8027658:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802765c:	0a12      	lsrs	r2, r2, #8
 802765e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027662:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027666:	ea42 020c 	orr.w	r2, r2, ip
 802766a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802766c:	2dff      	cmp	r5, #255	; 0xff
 802766e:	d021      	beq.n	80276b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8027670:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027672:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027676:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027678:	fb05 fb0b 	mul.w	fp, r5, fp
 802767c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802767e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027682:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027684:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027688:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802768c:	fb05 fa0a 	mul.w	sl, r5, sl
 8027690:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027694:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027698:	44de      	add	lr, fp
 802769a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802769e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80276a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80276a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80276aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80276ae:	ea4e 050a 	orr.w	r5, lr, sl
 80276b2:	950c      	str	r5, [sp, #48]	; 0x30
 80276b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80276b6:	2dff      	cmp	r5, #255	; 0xff
 80276b8:	d021      	beq.n	80276fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80276ba:	9d08      	ldr	r5, [sp, #32]
 80276bc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80276c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80276c2:	fb05 fb0b 	mul.w	fp, r5, fp
 80276c6:	9d08      	ldr	r5, [sp, #32]
 80276c8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80276cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80276ce:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80276d2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80276d6:	fb05 fa0a 	mul.w	sl, r5, sl
 80276da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80276de:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80276e2:	44de      	add	lr, fp
 80276e4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80276e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80276ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80276f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80276f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80276f8:	ea4e 050a 	orr.w	r5, lr, sl
 80276fc:	9508      	str	r5, [sp, #32]
 80276fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027700:	2dff      	cmp	r5, #255	; 0xff
 8027702:	d021      	beq.n	8027748 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8027704:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027706:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802770a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802770c:	fb05 fb0b 	mul.w	fp, r5, fp
 8027710:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027712:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027716:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027718:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802771c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027720:	fb05 fa0a 	mul.w	sl, r5, sl
 8027724:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027728:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802772c:	44de      	add	lr, fp
 802772e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027732:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027736:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802773a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802773e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027742:	ea4e 050a 	orr.w	r5, lr, sl
 8027746:	950d      	str	r5, [sp, #52]	; 0x34
 8027748:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802774a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802774e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027752:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027756:	9d08      	ldr	r5, [sp, #32]
 8027758:	fb08 fc0c 	mul.w	ip, r8, ip
 802775c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027760:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027764:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027766:	fb01 cc0e 	mla	ip, r1, lr, ip
 802776a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802776e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027770:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027774:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027778:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802777a:	fb08 f80e 	mul.w	r8, r8, lr
 802777e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027782:	f8b7 e000 	ldrh.w	lr, [r7]
 8027786:	fb03 8202 	mla	r2, r3, r2, r8
 802778a:	9b08      	ldr	r3, [sp, #32]
 802778c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027790:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8027794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027796:	fb01 220a 	mla	r2, r1, sl, r2
 802779a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802779e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80277a0:	fb09 2901 	mla	r9, r9, r1, r2
 80277a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80277a6:	4343      	muls	r3, r0
 80277a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80277ac:	1c58      	adds	r0, r3, #1
 80277ae:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80277b2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80277b6:	ea4c 0c09 	orr.w	ip, ip, r9
 80277ba:	ea4f 232e 	mov.w	r3, lr, asr #8
 80277be:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80277c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80277c6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80277ca:	b2c0      	uxtb	r0, r0
 80277cc:	fb11 f102 	smulbb	r1, r1, r2
 80277d0:	ea4f 02ee 	mov.w	r2, lr, asr #3
 80277d4:	fb03 1300 	mla	r3, r3, r0, r1
 80277d8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80277dc:	b299      	uxth	r1, r3
 80277de:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80277e2:	fa5f fc8c 	uxtb.w	ip, ip
 80277e6:	fb13 f305 	smulbb	r3, r3, r5
 80277ea:	fb1c fc05 	smulbb	ip, ip, r5
 80277ee:	fb02 3200 	mla	r2, r2, r0, r3
 80277f2:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80277f6:	b2db      	uxtb	r3, r3
 80277f8:	b292      	uxth	r2, r2
 80277fa:	fb03 cc00 	mla	ip, r3, r0, ip
 80277fe:	1c4b      	adds	r3, r1, #1
 8027800:	fa1f fc8c 	uxth.w	ip, ip
 8027804:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027808:	1c51      	adds	r1, r2, #1
 802780a:	f10c 0001 	add.w	r0, ip, #1
 802780e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027812:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8027816:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 802781a:	0952      	lsrs	r2, r2, #5
 802781c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8027820:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027824:	ea43 030c 	orr.w	r3, r3, ip
 8027828:	4313      	orrs	r3, r2
 802782a:	803b      	strh	r3, [r7, #0]
 802782c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802782e:	3702      	adds	r7, #2
 8027830:	441c      	add	r4, r3
 8027832:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027834:	441e      	add	r6, r3
 8027836:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027838:	3b01      	subs	r3, #1
 802783a:	9318      	str	r3, [sp, #96]	; 0x60
 802783c:	e692      	b.n	8027564 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802783e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027840:	441c      	add	r4, r3
 8027842:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027844:	441e      	add	r6, r3
 8027846:	9b07      	ldr	r3, [sp, #28]
 8027848:	3b01      	subs	r3, #1
 802784a:	9307      	str	r3, [sp, #28]
 802784c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802784e:	3302      	adds	r3, #2
 8027850:	930a      	str	r3, [sp, #40]	; 0x28
 8027852:	e667      	b.n	8027524 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027854:	d023      	beq.n	802789e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8027856:	9b07      	ldr	r3, [sp, #28]
 8027858:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802785a:	3b01      	subs	r3, #1
 802785c:	fb00 4003 	mla	r0, r0, r3, r4
 8027860:	1400      	asrs	r0, r0, #16
 8027862:	f53f ae7c 	bmi.w	802755e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027866:	3901      	subs	r1, #1
 8027868:	4288      	cmp	r0, r1
 802786a:	f6bf ae78 	bge.w	802755e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802786e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8027870:	fb01 6303 	mla	r3, r1, r3, r6
 8027874:	141b      	asrs	r3, r3, #16
 8027876:	f53f ae72 	bmi.w	802755e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802787a:	3a01      	subs	r2, #1
 802787c:	4293      	cmp	r3, r2
 802787e:	f6bf ae6e 	bge.w	802755e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027882:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027886:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802788a:	f1bb 0f00 	cmp.w	fp, #0
 802788e:	dc6c      	bgt.n	802796a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 8027890:	9b07      	ldr	r3, [sp, #28]
 8027892:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027898:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802789c:	930a      	str	r3, [sp, #40]	; 0x28
 802789e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80278a0:	2b00      	cmp	r3, #0
 80278a2:	f340 81b3 	ble.w	8027c0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80278a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80278aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80278ac:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80278b0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80278b4:	eef0 6a48 	vmov.f32	s13, s16
 80278b8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80278bc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80278c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80278c4:	ee16 4a90 	vmov	r4, s13
 80278c8:	eef0 6a68 	vmov.f32	s13, s17
 80278cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80278d0:	ee16 6a90 	vmov	r6, s13
 80278d4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80278d8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80278dc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80278e0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80278e4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80278e8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80278ec:	ee18 2a10 	vmov	r2, s16
 80278f0:	eeb0 8a47 	vmov.f32	s16, s14
 80278f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80278f8:	ee18 2a90 	vmov	r2, s17
 80278fc:	9331      	str	r3, [sp, #196]	; 0xc4
 80278fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027900:	eef0 8a67 	vmov.f32	s17, s15
 8027904:	fb92 f3f3 	sdiv	r3, r2, r3
 8027908:	9332      	str	r3, [sp, #200]	; 0xc8
 802790a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802790c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802790e:	3b01      	subs	r3, #1
 8027910:	9317      	str	r3, [sp, #92]	; 0x5c
 8027912:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027914:	bf08      	it	eq
 8027916:	4613      	moveq	r3, r2
 8027918:	9307      	str	r3, [sp, #28]
 802791a:	e5f5      	b.n	8027508 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802791c:	2900      	cmp	r1, #0
 802791e:	f43f ae65 	beq.w	80275ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027922:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027926:	9308      	str	r3, [sp, #32]
 8027928:	0e1b      	lsrs	r3, r3, #24
 802792a:	9311      	str	r3, [sp, #68]	; 0x44
 802792c:	e65e      	b.n	80275ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802792e:	f112 0801 	adds.w	r8, r2, #1
 8027932:	f53f af7b 	bmi.w	802782c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8027936:	4543      	cmp	r3, r8
 8027938:	f6ff af78 	blt.w	802782c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802793c:	f11c 0801 	adds.w	r8, ip, #1
 8027940:	f53f af74 	bmi.w	802782c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8027944:	45c6      	cmp	lr, r8
 8027946:	f6ff af71 	blt.w	802782c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802794a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802794c:	b21b      	sxth	r3, r3
 802794e:	9201      	str	r2, [sp, #4]
 8027950:	fa0f f28e 	sxth.w	r2, lr
 8027954:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027958:	e9cd c002 	strd	ip, r0, [sp, #8]
 802795c:	9200      	str	r2, [sp, #0]
 802795e:	4639      	mov	r1, r7
 8027960:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027962:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027964:	f7ff fc42 	bl	80271ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8027968:	e760      	b.n	802782c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802796a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802796c:	1427      	asrs	r7, r4, #16
 802796e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027970:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027974:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027978:	1433      	asrs	r3, r6, #16
 802797a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802797e:	fb01 7303 	mla	r3, r1, r3, r7
 8027982:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8027986:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802798a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802798e:	2a00      	cmp	r2, #0
 8027990:	f000 8133 	beq.w	8027bfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
 8027994:	687d      	ldr	r5, [r7, #4]
 8027996:	950e      	str	r5, [sp, #56]	; 0x38
 8027998:	0e2d      	lsrs	r5, r5, #24
 802799a:	9515      	str	r5, [sp, #84]	; 0x54
 802799c:	b178      	cbz	r0, 80279be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 802799e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80279a2:	3901      	subs	r1, #1
 80279a4:	0089      	lsls	r1, r1, #2
 80279a6:	3104      	adds	r1, #4
 80279a8:	eb07 0e01 	add.w	lr, r7, r1
 80279ac:	5879      	ldr	r1, [r7, r1]
 80279ae:	9109      	str	r1, [sp, #36]	; 0x24
 80279b0:	0e09      	lsrs	r1, r1, #24
 80279b2:	9112      	str	r1, [sp, #72]	; 0x48
 80279b4:	f8de 1004 	ldr.w	r1, [lr, #4]
 80279b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80279ba:	0e09      	lsrs	r1, r1, #24
 80279bc:	9116      	str	r1, [sp, #88]	; 0x58
 80279be:	b292      	uxth	r2, r2
 80279c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80279c2:	b280      	uxth	r0, r0
 80279c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80279c6:	fb02 f800 	mul.w	r8, r2, r0
 80279ca:	0112      	lsls	r2, r2, #4
 80279cc:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80279d0:	eba2 0e08 	sub.w	lr, r2, r8
 80279d4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80279d8:	b280      	uxth	r0, r0
 80279da:	fa1f fe8e 	uxth.w	lr, lr
 80279de:	1a12      	subs	r2, r2, r0
 80279e0:	fb0e f101 	mul.w	r1, lr, r1
 80279e4:	b292      	uxth	r2, r2
 80279e6:	fb02 110c 	mla	r1, r2, ip, r1
 80279ea:	fb00 1105 	mla	r1, r0, r5, r1
 80279ee:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80279f0:	fb08 1105 	mla	r1, r8, r5, r1
 80279f4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80279f8:	2900      	cmp	r1, #0
 80279fa:	f000 80f5 	beq.w	8027be8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80279fe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027a02:	d019      	beq.n	8027a38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8027a04:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027a08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027a0c:	fb0c fa0a 	mul.w	sl, ip, sl
 8027a10:	fb0c fc03 	mul.w	ip, ip, r3
 8027a14:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027a18:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027a1c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027a20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027a24:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027a28:	4453      	add	r3, sl
 8027a2a:	0a3f      	lsrs	r7, r7, #8
 8027a2c:	0a1b      	lsrs	r3, r3, #8
 8027a2e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027a32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027a36:	433b      	orrs	r3, r7
 8027a38:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027a3a:	2dff      	cmp	r5, #255	; 0xff
 8027a3c:	d020      	beq.n	8027a80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8027a3e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027a40:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027a44:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027a46:	436f      	muls	r7, r5
 8027a48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027a4a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027a4e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027a52:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027a54:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027a58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027a5c:	fb05 fa0a 	mul.w	sl, r5, sl
 8027a60:	44bc      	add	ip, r7
 8027a62:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027a66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a6a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027a6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027a72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027a7a:	ea4c 050a 	orr.w	r5, ip, sl
 8027a7e:	950e      	str	r5, [sp, #56]	; 0x38
 8027a80:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027a82:	2dff      	cmp	r5, #255	; 0xff
 8027a84:	d020      	beq.n	8027ac8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8027a86:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027a88:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027a8c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027a8e:	436f      	muls	r7, r5
 8027a90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027a92:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027a96:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027a9a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027a9c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027aa0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027aa4:	fb05 fa0a 	mul.w	sl, r5, sl
 8027aa8:	44bc      	add	ip, r7
 8027aaa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027aae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ab2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027ab6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027aba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027abe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027ac2:	ea4c 050a 	orr.w	r5, ip, sl
 8027ac6:	9509      	str	r5, [sp, #36]	; 0x24
 8027ac8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027aca:	2dff      	cmp	r5, #255	; 0xff
 8027acc:	d020      	beq.n	8027b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 8027ace:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027ad0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027ad4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027ad6:	436f      	muls	r7, r5
 8027ad8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027ada:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027ade:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027ae2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027ae4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027ae8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027aec:	fb05 fa0a 	mul.w	sl, r5, sl
 8027af0:	44bc      	add	ip, r7
 8027af2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027af6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027afa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027afe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027b02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027b06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027b0a:	ea4c 050a 	orr.w	r5, ip, sl
 8027b0e:	950f      	str	r5, [sp, #60]	; 0x3c
 8027b10:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027b12:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027b16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027b1a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027b1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027b20:	fb0e f707 	mul.w	r7, lr, r7
 8027b24:	fb02 770c 	mla	r7, r2, ip, r7
 8027b28:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027b2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027b2e:	fb00 770c 	mla	r7, r0, ip, r7
 8027b32:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027b36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027b38:	fb08 770c 	mla	r7, r8, ip, r7
 8027b3c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027b40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027b42:	fb0e fe0c 	mul.w	lr, lr, ip
 8027b46:	0a3f      	lsrs	r7, r7, #8
 8027b48:	fb02 e303 	mla	r3, r2, r3, lr
 8027b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027b4e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027b52:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027b56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027b58:	fb00 330a 	mla	r3, r0, sl, r3
 8027b5c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8027b60:	f8b9 0000 	ldrh.w	r0, [r9]
 8027b64:	fb08 3c0c 	mla	ip, r8, ip, r3
 8027b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027b6a:	1202      	asrs	r2, r0, #8
 8027b6c:	4359      	muls	r1, r3
 8027b6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b72:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027b76:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027b7a:	1c4b      	adds	r3, r1, #1
 8027b7c:	ea47 070c 	orr.w	r7, r7, ip
 8027b80:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027b84:	0c3b      	lsrs	r3, r7, #16
 8027b86:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027b8a:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8027b8e:	b2ff      	uxtb	r7, r7
 8027b90:	fb13 f305 	smulbb	r3, r3, r5
 8027b94:	b2c9      	uxtb	r1, r1
 8027b96:	fb17 f705 	smulbb	r7, r7, r5
 8027b9a:	fb02 3201 	mla	r2, r2, r1, r3
 8027b9e:	10c3      	asrs	r3, r0, #3
 8027ba0:	fb1c fc05 	smulbb	ip, ip, r5
 8027ba4:	00c0      	lsls	r0, r0, #3
 8027ba6:	b292      	uxth	r2, r2
 8027ba8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027bac:	b2c0      	uxtb	r0, r0
 8027bae:	fb03 c301 	mla	r3, r3, r1, ip
 8027bb2:	fb00 7001 	mla	r0, r0, r1, r7
 8027bb6:	1c51      	adds	r1, r2, #1
 8027bb8:	b29b      	uxth	r3, r3
 8027bba:	b280      	uxth	r0, r0
 8027bbc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027bc0:	f100 0c01 	add.w	ip, r0, #1
 8027bc4:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8027bc8:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8027bcc:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8027bd0:	ea42 020c 	orr.w	r2, r2, ip
 8027bd4:	f103 0c01 	add.w	ip, r3, #1
 8027bd8:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8027bdc:	095b      	lsrs	r3, r3, #5
 8027bde:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027be2:	431a      	orrs	r2, r3
 8027be4:	f8a9 2000 	strh.w	r2, [r9]
 8027be8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027bea:	f109 0902 	add.w	r9, r9, #2
 8027bee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027bf2:	441c      	add	r4, r3
 8027bf4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027bf6:	441e      	add	r6, r3
 8027bf8:	e647      	b.n	802788a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8027bfa:	2800      	cmp	r0, #0
 8027bfc:	f43f aedf 	beq.w	80279be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027c00:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8027c04:	9109      	str	r1, [sp, #36]	; 0x24
 8027c06:	0e09      	lsrs	r1, r1, #24
 8027c08:	9112      	str	r1, [sp, #72]	; 0x48
 8027c0a:	e6d8      	b.n	80279be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027c0c:	b01d      	add	sp, #116	; 0x74
 8027c0e:	ecbd 8b08 	vpop	{d8-d11}
 8027c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027c18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8027c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c1c:	880e      	ldrh	r6, [r1, #0]
 8027c1e:	b085      	sub	sp, #20
 8027c20:	4690      	mov	r8, r2
 8027c22:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8027c26:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8027c2a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8027c2e:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8027c32:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8027c36:	00f6      	lsls	r6, r6, #3
 8027c38:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8027c3c:	9200      	str	r2, [sp, #0]
 8027c3e:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8027c42:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8027c46:	9201      	str	r2, [sp, #4]
 8027c48:	b2f2      	uxtb	r2, r6
 8027c4a:	2c00      	cmp	r4, #0
 8027c4c:	fb04 5603 	mla	r6, r4, r3, r5
 8027c50:	9202      	str	r2, [sp, #8]
 8027c52:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8027c56:	db36      	blt.n	8027cc6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8027c58:	45a6      	cmp	lr, r4
 8027c5a:	dd34      	ble.n	8027cc6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8027c5c:	2d00      	cmp	r5, #0
 8027c5e:	db30      	blt.n	8027cc2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8027c60:	42ab      	cmp	r3, r5
 8027c62:	dd2e      	ble.n	8027cc2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8027c64:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8027c68:	1c6e      	adds	r6, r5, #1
 8027c6a:	d42f      	bmi.n	8027ccc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8027c6c:	42b3      	cmp	r3, r6
 8027c6e:	dd2d      	ble.n	8027ccc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8027c70:	b370      	cbz	r0, 8027cd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
 8027c72:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8027c76:	3401      	adds	r4, #1
 8027c78:	d42e      	bmi.n	8027cd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8027c7a:	45a6      	cmp	lr, r4
 8027c7c:	dd2c      	ble.n	8027cd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8027c7e:	b377      	cbz	r7, 8027cde <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
 8027c80:	2d00      	cmp	r5, #0
 8027c82:	db27      	blt.n	8027cd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8027c84:	42ab      	cmp	r3, r5
 8027c86:	dd25      	ble.n	8027cd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8027c88:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027c8c:	3501      	adds	r5, #1
 8027c8e:	d429      	bmi.n	8027ce4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8027c90:	42ab      	cmp	r3, r5
 8027c92:	dd27      	ble.n	8027ce4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8027c94:	b340      	cbz	r0, 8027ce8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8027c96:	3301      	adds	r3, #1
 8027c98:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8027c9c:	280f      	cmp	r0, #15
 8027c9e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8027ca2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027ca6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027caa:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8027cae:	d801      	bhi.n	8027cb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
 8027cb0:	2f0f      	cmp	r7, #15
 8027cb2:	d91b      	bls.n	8027cec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 8027cb4:	4b7e      	ldr	r3, [pc, #504]	; (8027eb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 8027cb6:	f240 210d 	movw	r1, #525	; 0x20d
 8027cba:	4a7e      	ldr	r2, [pc, #504]	; (8027eb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8027cbc:	487e      	ldr	r0, [pc, #504]	; (8027eb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8027cbe:	f001 fd09 	bl	80296d4 <__assert_func>
 8027cc2:	2200      	movs	r2, #0
 8027cc4:	e7d0      	b.n	8027c68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 8027cc6:	2600      	movs	r6, #0
 8027cc8:	4632      	mov	r2, r6
 8027cca:	e7d4      	b.n	8027c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8027ccc:	2600      	movs	r6, #0
 8027cce:	e7d2      	b.n	8027c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8027cd0:	4606      	mov	r6, r0
 8027cd2:	e7d0      	b.n	8027c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8027cd4:	2400      	movs	r4, #0
 8027cd6:	e7d9      	b.n	8027c8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
 8027cd8:	2300      	movs	r3, #0
 8027cda:	461c      	mov	r4, r3
 8027cdc:	e7de      	b.n	8027c9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8027cde:	463b      	mov	r3, r7
 8027ce0:	463c      	mov	r4, r7
 8027ce2:	e7db      	b.n	8027c9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8027ce4:	2300      	movs	r3, #0
 8027ce6:	e7d9      	b.n	8027c9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8027ce8:	4603      	mov	r3, r0
 8027cea:	e7d7      	b.n	8027c9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8027cec:	b280      	uxth	r0, r0
 8027cee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8027cf2:	b2bf      	uxth	r7, r7
 8027cf4:	fb00 fe07 	mul.w	lr, r0, r7
 8027cf8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8027cfc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8027d00:	eba0 0c0e 	sub.w	ip, r0, lr
 8027d04:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8027d08:	b2bf      	uxth	r7, r7
 8027d0a:	fa1f fc8c 	uxth.w	ip, ip
 8027d0e:	eba5 0507 	sub.w	r5, r5, r7
 8027d12:	fb0c f00a 	mul.w	r0, ip, sl
 8027d16:	b2ad      	uxth	r5, r5
 8027d18:	fb05 000b 	mla	r0, r5, fp, r0
 8027d1c:	fb07 0009 	mla	r0, r7, r9, r0
 8027d20:	fb0e 0008 	mla	r0, lr, r8, r0
 8027d24:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027d28:	9003      	str	r0, [sp, #12]
 8027d2a:	d018      	beq.n	8027d5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x146>
 8027d2c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027d30:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027d34:	fb0b f000 	mul.w	r0, fp, r0
 8027d38:	fb0b fb02 	mul.w	fp, fp, r2
 8027d3c:	0a02      	lsrs	r2, r0, #8
 8027d3e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027d42:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027d46:	4402      	add	r2, r0
 8027d48:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8027d4c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027d50:	0a12      	lsrs	r2, r2, #8
 8027d52:	0a00      	lsrs	r0, r0, #8
 8027d54:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027d58:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027d5c:	4302      	orrs	r2, r0
 8027d5e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027d62:	d019      	beq.n	8027d98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x180>
 8027d64:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8027d68:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027d6c:	fb0a fb0b 	mul.w	fp, sl, fp
 8027d70:	fb0a fa06 	mul.w	sl, sl, r6
 8027d74:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8027d78:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027d7c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027d80:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027d84:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027d88:	445e      	add	r6, fp
 8027d8a:	0a00      	lsrs	r0, r0, #8
 8027d8c:	0a36      	lsrs	r6, r6, #8
 8027d8e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027d92:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027d96:	4306      	orrs	r6, r0
 8027d98:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027d9c:	d019      	beq.n	8027dd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1ba>
 8027d9e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027da2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027da6:	fb09 fa0a 	mul.w	sl, r9, sl
 8027daa:	fb09 f904 	mul.w	r9, r9, r4
 8027dae:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027db2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027db6:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8027dba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027dbe:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8027dc2:	4454      	add	r4, sl
 8027dc4:	0a00      	lsrs	r0, r0, #8
 8027dc6:	0a24      	lsrs	r4, r4, #8
 8027dc8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027dcc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027dd0:	4304      	orrs	r4, r0
 8027dd2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027dd6:	d019      	beq.n	8027e0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f4>
 8027dd8:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8027ddc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027de0:	fb08 f909 	mul.w	r9, r8, r9
 8027de4:	fb08 f803 	mul.w	r8, r8, r3
 8027de8:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8027dec:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027df0:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8027df4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027df8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027dfc:	444b      	add	r3, r9
 8027dfe:	0a00      	lsrs	r0, r0, #8
 8027e00:	0a1b      	lsrs	r3, r3, #8
 8027e02:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027e06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027e0a:	4303      	orrs	r3, r0
 8027e0c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8027e10:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027e14:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027e18:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027e1c:	fb0c f808 	mul.w	r8, ip, r8
 8027e20:	fb0c f606 	mul.w	r6, ip, r6
 8027e24:	fb05 8800 	mla	r8, r5, r0, r8
 8027e28:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8027e2c:	fb05 6202 	mla	r2, r5, r2, r6
 8027e30:	9d01      	ldr	r5, [sp, #4]
 8027e32:	fb07 8800 	mla	r8, r7, r0, r8
 8027e36:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8027e3a:	fb0e 8000 	mla	r0, lr, r0, r8
 8027e3e:	0a00      	lsrs	r0, r0, #8
 8027e40:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8027e44:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8027e48:	9c02      	ldr	r4, [sp, #8]
 8027e4a:	fb07 2700 	mla	r7, r7, r0, r2
 8027e4e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8027e52:	9b03      	ldr	r3, [sp, #12]
 8027e54:	fb0e 7000 	mla	r0, lr, r0, r7
 8027e58:	43da      	mvns	r2, r3
 8027e5a:	9b00      	ldr	r3, [sp, #0]
 8027e5c:	0a00      	lsrs	r0, r0, #8
 8027e5e:	b2d2      	uxtb	r2, r2
 8027e60:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027e64:	4353      	muls	r3, r2
 8027e66:	4354      	muls	r4, r2
 8027e68:	ea48 0000 	orr.w	r0, r8, r0
 8027e6c:	4355      	muls	r5, r2
 8027e6e:	4622      	mov	r2, r4
 8027e70:	1c5c      	adds	r4, r3, #1
 8027e72:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8027e76:	0c03      	lsrs	r3, r0, #16
 8027e78:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027e7c:	4b0f      	ldr	r3, [pc, #60]	; (8027ebc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8027e7e:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8027e82:	1c54      	adds	r4, r2, #1
 8027e84:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8027e88:	b2c2      	uxtb	r2, r0
 8027e8a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027e8e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027e92:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8027e96:	1c6a      	adds	r2, r5, #1
 8027e98:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8027e9c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027ea0:	00c0      	lsls	r0, r0, #3
 8027ea2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027ea6:	4318      	orrs	r0, r3
 8027ea8:	8008      	strh	r0, [r1, #0]
 8027eaa:	b005      	add	sp, #20
 8027eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027eb0:	0802e1e2 	.word	0x0802e1e2
 8027eb4:	0802e7a5 	.word	0x0802e7a5
 8027eb8:	0802e2cb 	.word	0x0802e2cb
 8027ebc:	fffff800 	.word	0xfffff800

08027ec0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ec4:	ed2d 8b08 	vpush	{d8-d11}
 8027ec8:	b09b      	sub	sp, #108	; 0x6c
 8027eca:	eeb0 aa40 	vmov.f32	s20, s0
 8027ece:	eef0 9a60 	vmov.f32	s19, s1
 8027ed2:	9218      	str	r2, [sp, #96]	; 0x60
 8027ed4:	eeb0 9a41 	vmov.f32	s18, s2
 8027ed8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8027eda:	eeb0 8a62 	vmov.f32	s16, s5
 8027ede:	9019      	str	r0, [sp, #100]	; 0x64
 8027ee0:	eef0 8a43 	vmov.f32	s17, s6
 8027ee4:	6850      	ldr	r0, [r2, #4]
 8027ee6:	eef0 ba44 	vmov.f32	s23, s8
 8027eea:	9116      	str	r1, [sp, #88]	; 0x58
 8027eec:	eeb0 ba64 	vmov.f32	s22, s9
 8027ef0:	9307      	str	r3, [sp, #28]
 8027ef2:	eef0 aa45 	vmov.f32	s21, s10
 8027ef6:	6812      	ldr	r2, [r2, #0]
 8027ef8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8027efc:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8027f00:	fb00 1303 	mla	r3, r0, r3, r1
 8027f04:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027f08:	930a      	str	r3, [sp, #40]	; 0x28
 8027f0a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027f0c:	681b      	ldr	r3, [r3, #0]
 8027f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027f10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027f12:	2b00      	cmp	r3, #0
 8027f14:	dc03      	bgt.n	8027f1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027f16:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027f18:	2b00      	cmp	r3, #0
 8027f1a:	f340 838b 	ble.w	8028634 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 8027f1e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027f20:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027f24:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027f28:	1e48      	subs	r0, r1, #1
 8027f2a:	1e57      	subs	r7, r2, #1
 8027f2c:	9b07      	ldr	r3, [sp, #28]
 8027f2e:	2b00      	cmp	r3, #0
 8027f30:	f340 818b 	ble.w	802824a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8027f34:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027f38:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027f3c:	d406      	bmi.n	8027f4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8027f3e:	4584      	cmp	ip, r0
 8027f40:	da04      	bge.n	8027f4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8027f42:	2b00      	cmp	r3, #0
 8027f44:	db02      	blt.n	8027f4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8027f46:	42bb      	cmp	r3, r7
 8027f48:	f2c0 8180 	blt.w	802824c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8027f4c:	f11c 0c01 	adds.w	ip, ip, #1
 8027f50:	f100 8170 	bmi.w	8028234 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027f54:	4561      	cmp	r1, ip
 8027f56:	f2c0 816d 	blt.w	8028234 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027f5a:	3301      	adds	r3, #1
 8027f5c:	f100 816a 	bmi.w	8028234 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027f60:	429a      	cmp	r2, r3
 8027f62:	f2c0 8167 	blt.w	8028234 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027f66:	9b07      	ldr	r3, [sp, #28]
 8027f68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027f6a:	9317      	str	r3, [sp, #92]	; 0x5c
 8027f6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027f6e:	2b00      	cmp	r3, #0
 8027f70:	f340 8189 	ble.w	8028286 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8027f74:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8027f76:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027f7a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027f7c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027f80:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027f84:	1422      	asrs	r2, r4, #16
 8027f86:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027f8a:	689b      	ldr	r3, [r3, #8]
 8027f8c:	f100 81d8 	bmi.w	8028340 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027f90:	f103 38ff 	add.w	r8, r3, #4294967295
 8027f94:	4542      	cmp	r2, r8
 8027f96:	f280 81d3 	bge.w	8028340 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027f9a:	f1bc 0f00 	cmp.w	ip, #0
 8027f9e:	f2c0 81cf 	blt.w	8028340 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027fa2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027fa6:	45c4      	cmp	ip, r8
 8027fa8:	f280 81ca 	bge.w	8028340 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027fac:	b21b      	sxth	r3, r3
 8027fae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027fb0:	fb0c 2203 	mla	r2, ip, r3, r2
 8027fb4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027fb8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027fbc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027fc0:	2900      	cmp	r1, #0
 8027fc2:	f000 81a6 	beq.w	8028312 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027fc6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027fca:	950b      	str	r5, [sp, #44]	; 0x2c
 8027fcc:	0e2d      	lsrs	r5, r5, #24
 8027fce:	9512      	str	r5, [sp, #72]	; 0x48
 8027fd0:	b180      	cbz	r0, 8027ff4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8027fd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027fd6:	3b01      	subs	r3, #1
 8027fd8:	009b      	lsls	r3, r3, #2
 8027fda:	3304      	adds	r3, #4
 8027fdc:	eb08 0c03 	add.w	ip, r8, r3
 8027fe0:	f858 3003 	ldr.w	r3, [r8, r3]
 8027fe4:	9308      	str	r3, [sp, #32]
 8027fe6:	0e1b      	lsrs	r3, r3, #24
 8027fe8:	9310      	str	r3, [sp, #64]	; 0x40
 8027fea:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027fee:	930c      	str	r3, [sp, #48]	; 0x30
 8027ff0:	0e1b      	lsrs	r3, r3, #24
 8027ff2:	9313      	str	r3, [sp, #76]	; 0x4c
 8027ff4:	b289      	uxth	r1, r1
 8027ff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027ff8:	b280      	uxth	r0, r0
 8027ffa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027ffc:	fb01 f900 	mul.w	r9, r1, r0
 8028000:	0109      	lsls	r1, r1, #4
 8028002:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028006:	eba1 0809 	sub.w	r8, r1, r9
 802800a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802800e:	b280      	uxth	r0, r0
 8028010:	fa1f f888 	uxth.w	r8, r8
 8028014:	1a09      	subs	r1, r1, r0
 8028016:	fb08 f303 	mul.w	r3, r8, r3
 802801a:	b289      	uxth	r1, r1
 802801c:	fb01 330e 	mla	r3, r1, lr, r3
 8028020:	fb00 3305 	mla	r3, r0, r5, r3
 8028024:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028026:	fb09 3305 	mla	r3, r9, r5, r3
 802802a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802802e:	2b00      	cmp	r3, #0
 8028030:	f000 80f7 	beq.w	8028222 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028034:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028038:	d01b      	beq.n	8028072 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802803a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802803e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028042:	fb0e fa0a 	mul.w	sl, lr, sl
 8028046:	fb0e fe02 	mul.w	lr, lr, r2
 802804a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802804e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028052:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028056:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802805a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802805e:	4452      	add	r2, sl
 8028060:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028064:	0a12      	lsrs	r2, r2, #8
 8028066:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802806a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802806e:	ea42 020c 	orr.w	r2, r2, ip
 8028072:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028074:	2dff      	cmp	r5, #255	; 0xff
 8028076:	d021      	beq.n	80280bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8028078:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802807a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802807e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028080:	fb05 fb0b 	mul.w	fp, r5, fp
 8028084:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028086:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802808a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802808c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028090:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028094:	fb05 fa0a 	mul.w	sl, r5, sl
 8028098:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802809c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80280a0:	44de      	add	lr, fp
 80280a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80280a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80280aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80280ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80280b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80280b6:	ea4e 050a 	orr.w	r5, lr, sl
 80280ba:	950b      	str	r5, [sp, #44]	; 0x2c
 80280bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80280be:	2dff      	cmp	r5, #255	; 0xff
 80280c0:	d021      	beq.n	8028106 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80280c2:	9d08      	ldr	r5, [sp, #32]
 80280c4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80280c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80280ca:	fb05 fb0b 	mul.w	fp, r5, fp
 80280ce:	9d08      	ldr	r5, [sp, #32]
 80280d0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80280d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80280d6:	fb05 fa0e 	mul.w	sl, r5, lr
 80280da:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80280de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80280e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80280e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80280ea:	44de      	add	lr, fp
 80280ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80280f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80280f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80280f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80280fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028100:	ea4e 050a 	orr.w	r5, lr, sl
 8028104:	9508      	str	r5, [sp, #32]
 8028106:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028108:	2dff      	cmp	r5, #255	; 0xff
 802810a:	d021      	beq.n	8028150 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802810c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802810e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028112:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028114:	fb05 fb0b 	mul.w	fp, r5, fp
 8028118:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802811a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802811e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028120:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028124:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028128:	fb05 fa0a 	mul.w	sl, r5, sl
 802812c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028130:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028134:	44de      	add	lr, fp
 8028136:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802813a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802813e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028142:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028146:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802814a:	ea4e 050a 	orr.w	r5, lr, sl
 802814e:	950c      	str	r5, [sp, #48]	; 0x30
 8028150:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028152:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028156:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802815a:	2bff      	cmp	r3, #255	; 0xff
 802815c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028160:	9d08      	ldr	r5, [sp, #32]
 8028162:	fb08 fc0c 	mul.w	ip, r8, ip
 8028166:	fb01 cc0e 	mla	ip, r1, lr, ip
 802816a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802816e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028170:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028174:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028178:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802817a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802817e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028182:	fb08 f80e 	mul.w	r8, r8, lr
 8028186:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802818a:	fb01 8202 	mla	r2, r1, r2, r8
 802818e:	9908      	ldr	r1, [sp, #32]
 8028190:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028194:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028198:	990c      	ldr	r1, [sp, #48]	; 0x30
 802819a:	fb00 220a 	mla	r2, r0, sl, r2
 802819e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80281a2:	fb09 2900 	mla	r9, r9, r0, r2
 80281a6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80281aa:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80281ae:	ea4c 0c09 	orr.w	ip, ip, r9
 80281b2:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80281b6:	f000 80b5 	beq.w	8028324 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 80281ba:	8839      	ldrh	r1, [r7, #0]
 80281bc:	43db      	mvns	r3, r3
 80281be:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80281c2:	fa5f f883 	uxtb.w	r8, r3
 80281c6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80281ca:	10c8      	asrs	r0, r1, #3
 80281cc:	00cb      	lsls	r3, r1, #3
 80281ce:	fb0e fe08 	mul.w	lr, lr, r8
 80281d2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80281d6:	b2db      	uxtb	r3, r3
 80281d8:	f10e 0101 	add.w	r1, lr, #1
 80281dc:	fb00 f008 	mul.w	r0, r0, r8
 80281e0:	fb03 f308 	mul.w	r3, r3, r8
 80281e4:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80281e8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80281ec:	fa5f fc8c 	uxtb.w	ip, ip
 80281f0:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 80281f4:	4960      	ldr	r1, [pc, #384]	; (8028378 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
 80281f6:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
 80281fa:	1c59      	adds	r1, r3, #1
 80281fc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028200:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8028204:	1c43      	adds	r3, r0, #1
 8028206:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802820a:	b2d3      	uxtb	r3, r2
 802820c:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
 8028210:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028214:	00db      	lsls	r3, r3, #3
 8028216:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802821a:	ea4c 0c03 	orr.w	ip, ip, r3
 802821e:	f8a7 c000 	strh.w	ip, [r7]
 8028222:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028224:	3702      	adds	r7, #2
 8028226:	441c      	add	r4, r3
 8028228:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802822a:	441e      	add	r6, r3
 802822c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802822e:	3b01      	subs	r3, #1
 8028230:	9317      	str	r3, [sp, #92]	; 0x5c
 8028232:	e69b      	b.n	8027f6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8028234:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028236:	441c      	add	r4, r3
 8028238:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802823a:	441e      	add	r6, r3
 802823c:	9b07      	ldr	r3, [sp, #28]
 802823e:	3b01      	subs	r3, #1
 8028240:	9307      	str	r3, [sp, #28]
 8028242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028244:	3302      	adds	r3, #2
 8028246:	930a      	str	r3, [sp, #40]	; 0x28
 8028248:	e670      	b.n	8027f2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802824a:	d023      	beq.n	8028294 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 802824c:	9b07      	ldr	r3, [sp, #28]
 802824e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8028250:	3b01      	subs	r3, #1
 8028252:	fb00 4003 	mla	r0, r0, r3, r4
 8028256:	1400      	asrs	r0, r0, #16
 8028258:	f53f ae85 	bmi.w	8027f66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802825c:	3901      	subs	r1, #1
 802825e:	4288      	cmp	r0, r1
 8028260:	f6bf ae81 	bge.w	8027f66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028264:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8028266:	fb01 6303 	mla	r3, r1, r3, r6
 802826a:	141b      	asrs	r3, r3, #16
 802826c:	f53f ae7b 	bmi.w	8027f66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028270:	3a01      	subs	r2, #1
 8028272:	4293      	cmp	r3, r2
 8028274:	f6bf ae77 	bge.w	8027f66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028278:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802827c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8028280:	f1bb 0f00 	cmp.w	fp, #0
 8028284:	dc7a      	bgt.n	802837c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8028286:	9b07      	ldr	r3, [sp, #28]
 8028288:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802828c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802828e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028292:	930a      	str	r3, [sp, #40]	; 0x28
 8028294:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028296:	2b00      	cmp	r3, #0
 8028298:	f340 81cc 	ble.w	8028634 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 802829c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80282a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80282a2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80282a6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80282aa:	eef0 6a48 	vmov.f32	s13, s16
 80282ae:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80282b2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80282b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80282ba:	ee16 4a90 	vmov	r4, s13
 80282be:	eef0 6a68 	vmov.f32	s13, s17
 80282c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80282c6:	ee16 6a90 	vmov	r6, s13
 80282ca:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80282ce:	ee69 7a27 	vmul.f32	s15, s18, s15
 80282d2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80282d6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80282da:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80282de:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80282e2:	ee18 2a10 	vmov	r2, s16
 80282e6:	eeb0 8a47 	vmov.f32	s16, s14
 80282ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80282ee:	ee18 2a90 	vmov	r2, s17
 80282f2:	932f      	str	r3, [sp, #188]	; 0xbc
 80282f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80282f6:	eef0 8a67 	vmov.f32	s17, s15
 80282fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80282fe:	9330      	str	r3, [sp, #192]	; 0xc0
 8028300:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028302:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028304:	3b01      	subs	r3, #1
 8028306:	9316      	str	r3, [sp, #88]	; 0x58
 8028308:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802830a:	bf08      	it	eq
 802830c:	4613      	moveq	r3, r2
 802830e:	9307      	str	r3, [sp, #28]
 8028310:	e5fe      	b.n	8027f10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8028312:	2800      	cmp	r0, #0
 8028314:	f43f ae6e 	beq.w	8027ff4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028318:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802831c:	9308      	str	r3, [sp, #32]
 802831e:	0e1b      	lsrs	r3, r3, #24
 8028320:	9310      	str	r3, [sp, #64]	; 0x40
 8028322:	e667      	b.n	8027ff4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028324:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8028328:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802832c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8028330:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028334:	f022 0207 	bic.w	r2, r2, #7
 8028338:	431a      	orrs	r2, r3
 802833a:	ea42 0c0c 	orr.w	ip, r2, ip
 802833e:	e76e      	b.n	802821e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8028340:	f112 0801 	adds.w	r8, r2, #1
 8028344:	f53f af6d 	bmi.w	8028222 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028348:	4543      	cmp	r3, r8
 802834a:	f6ff af6a 	blt.w	8028222 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802834e:	f11c 0801 	adds.w	r8, ip, #1
 8028352:	f53f af66 	bmi.w	8028222 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028356:	45c6      	cmp	lr, r8
 8028358:	f6ff af63 	blt.w	8028222 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802835c:	b21b      	sxth	r3, r3
 802835e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8028362:	fa0f f28e 	sxth.w	r2, lr
 8028366:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802836a:	9200      	str	r2, [sp, #0]
 802836c:	4639      	mov	r1, r7
 802836e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028370:	9819      	ldr	r0, [sp, #100]	; 0x64
 8028372:	f7ff fc51 	bl	8027c18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8028376:	e754      	b.n	8028222 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028378:	fffff800 	.word	0xfffff800
 802837c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802837e:	1421      	asrs	r1, r4, #16
 8028380:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028382:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028386:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802838a:	1433      	asrs	r3, r6, #16
 802838c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028390:	fb07 1303 	mla	r3, r7, r3, r1
 8028394:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028396:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802839a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802839e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80283a2:	2a00      	cmp	r2, #0
 80283a4:	f000 812f 	beq.w	8028606 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 80283a8:	684d      	ldr	r5, [r1, #4]
 80283aa:	950d      	str	r5, [sp, #52]	; 0x34
 80283ac:	0e2d      	lsrs	r5, r5, #24
 80283ae:	9514      	str	r5, [sp, #80]	; 0x50
 80283b0:	b178      	cbz	r0, 80283d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80283b2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80283b6:	3f01      	subs	r7, #1
 80283b8:	00bf      	lsls	r7, r7, #2
 80283ba:	3704      	adds	r7, #4
 80283bc:	eb01 0e07 	add.w	lr, r1, r7
 80283c0:	59c9      	ldr	r1, [r1, r7]
 80283c2:	9109      	str	r1, [sp, #36]	; 0x24
 80283c4:	0e09      	lsrs	r1, r1, #24
 80283c6:	9111      	str	r1, [sp, #68]	; 0x44
 80283c8:	f8de 1004 	ldr.w	r1, [lr, #4]
 80283cc:	910e      	str	r1, [sp, #56]	; 0x38
 80283ce:	0e09      	lsrs	r1, r1, #24
 80283d0:	9115      	str	r1, [sp, #84]	; 0x54
 80283d2:	b292      	uxth	r2, r2
 80283d4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80283d6:	b280      	uxth	r0, r0
 80283d8:	fb02 f900 	mul.w	r9, r2, r0
 80283dc:	0112      	lsls	r2, r2, #4
 80283de:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80283e2:	eba2 0e09 	sub.w	lr, r2, r9
 80283e6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80283ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80283ec:	b280      	uxth	r0, r0
 80283ee:	fa1f fe8e 	uxth.w	lr, lr
 80283f2:	1a09      	subs	r1, r1, r0
 80283f4:	fb0e f202 	mul.w	r2, lr, r2
 80283f8:	b289      	uxth	r1, r1
 80283fa:	fb01 220c 	mla	r2, r1, ip, r2
 80283fe:	fb00 2205 	mla	r2, r0, r5, r2
 8028402:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028404:	fb09 2205 	mla	r2, r9, r5, r2
 8028408:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802840c:	2a00      	cmp	r2, #0
 802840e:	f000 80f1 	beq.w	80285f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8028412:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028416:	d019      	beq.n	802844c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8028418:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802841c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028420:	fb0c fa0a 	mul.w	sl, ip, sl
 8028424:	fb0c fc03 	mul.w	ip, ip, r3
 8028428:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802842c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028430:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028434:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028438:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802843c:	4453      	add	r3, sl
 802843e:	0a3f      	lsrs	r7, r7, #8
 8028440:	0a1b      	lsrs	r3, r3, #8
 8028442:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028446:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802844a:	433b      	orrs	r3, r7
 802844c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802844e:	2dff      	cmp	r5, #255	; 0xff
 8028450:	d020      	beq.n	8028494 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8028452:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028454:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028458:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802845a:	436f      	muls	r7, r5
 802845c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802845e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028462:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028466:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028468:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802846c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028470:	fb05 fa0a 	mul.w	sl, r5, sl
 8028474:	44bc      	add	ip, r7
 8028476:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802847a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802847e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028482:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028486:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802848a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802848e:	ea4c 050a 	orr.w	r5, ip, sl
 8028492:	950d      	str	r5, [sp, #52]	; 0x34
 8028494:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028496:	2dff      	cmp	r5, #255	; 0xff
 8028498:	d020      	beq.n	80284dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 802849a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802849c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80284a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80284a2:	436f      	muls	r7, r5
 80284a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80284a6:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80284aa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80284ac:	fb05 fa0c 	mul.w	sl, r5, ip
 80284b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80284b4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80284b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80284bc:	44bc      	add	ip, r7
 80284be:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80284c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80284c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80284ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80284ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80284d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80284d6:	ea4c 050a 	orr.w	r5, ip, sl
 80284da:	9509      	str	r5, [sp, #36]	; 0x24
 80284dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80284de:	2dff      	cmp	r5, #255	; 0xff
 80284e0:	d020      	beq.n	8028524 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 80284e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80284e4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80284e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80284ea:	436f      	muls	r7, r5
 80284ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80284ee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80284f2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80284f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80284f8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80284fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028500:	fb05 fa0a 	mul.w	sl, r5, sl
 8028504:	44bc      	add	ip, r7
 8028506:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802850a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802850e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028512:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028516:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802851a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802851e:	ea4c 050a 	orr.w	r5, ip, sl
 8028522:	950e      	str	r5, [sp, #56]	; 0x38
 8028524:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028526:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802852a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802852e:	2aff      	cmp	r2, #255	; 0xff
 8028530:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028534:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028536:	fb0e f707 	mul.w	r7, lr, r7
 802853a:	fb01 770c 	mla	r7, r1, ip, r7
 802853e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028542:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028544:	fb00 770c 	mla	r7, r0, ip, r7
 8028548:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802854c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802854e:	fb09 770c 	mla	r7, r9, ip, r7
 8028552:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028556:	fb0e fe0c 	mul.w	lr, lr, ip
 802855a:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802855e:	fb01 e303 	mla	r3, r1, r3, lr
 8028562:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028564:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028568:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802856c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802856e:	fb00 330a 	mla	r3, r0, sl, r3
 8028572:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8028576:	fb09 3c0c 	mla	ip, r9, ip, r3
 802857a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802857e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028582:	ea47 070c 	orr.w	r7, r7, ip
 8028586:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802858a:	d045      	beq.n	8028618 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 802858c:	f8b8 1000 	ldrh.w	r1, [r8]
 8028590:	43d2      	mvns	r2, r2
 8028592:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8028596:	fa5f fe82 	uxtb.w	lr, r2
 802859a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802859e:	10c8      	asrs	r0, r1, #3
 80285a0:	00ca      	lsls	r2, r1, #3
 80285a2:	fb0c fc0e 	mul.w	ip, ip, lr
 80285a6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80285aa:	b2d2      	uxtb	r2, r2
 80285ac:	f10c 0101 	add.w	r1, ip, #1
 80285b0:	fb00 f00e 	mul.w	r0, r0, lr
 80285b4:	fb02 f20e 	mul.w	r2, r2, lr
 80285b8:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 80285bc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80285c0:	b2ff      	uxtb	r7, r7
 80285c2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80285c6:	491e      	ldr	r1, [pc, #120]	; (8028640 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x780>)
 80285c8:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80285cc:	1c51      	adds	r1, r2, #1
 80285ce:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80285d2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80285d6:	1c42      	adds	r2, r0, #1
 80285d8:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
 80285dc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80285e0:	b2df      	uxtb	r7, r3
 80285e2:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80285e6:	00ff      	lsls	r7, r7, #3
 80285e8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80285ec:	ea4c 0c07 	orr.w	ip, ip, r7
 80285f0:	f8a8 c000 	strh.w	ip, [r8]
 80285f4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80285f6:	f108 0802 	add.w	r8, r8, #2
 80285fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80285fe:	441c      	add	r4, r3
 8028600:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028602:	441e      	add	r6, r3
 8028604:	e63c      	b.n	8028280 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8028606:	2800      	cmp	r0, #0
 8028608:	f43f aee3 	beq.w	80283d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 802860c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8028610:	9109      	str	r1, [sp, #36]	; 0x24
 8028612:	0e09      	lsrs	r1, r1, #24
 8028614:	9111      	str	r1, [sp, #68]	; 0x44
 8028616:	e6dc      	b.n	80283d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8028618:	097a      	lsrs	r2, r7, #5
 802861a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802861e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028622:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028626:	f023 0307 	bic.w	r3, r3, #7
 802862a:	4313      	orrs	r3, r2
 802862c:	431f      	orrs	r7, r3
 802862e:	f8a8 7000 	strh.w	r7, [r8]
 8028632:	e7df      	b.n	80285f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8028634:	b01b      	add	sp, #108	; 0x6c
 8028636:	ecbd 8b08 	vpop	{d8-d11}
 802863a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802863e:	bf00      	nop
 8028640:	fffff800 	.word	0xfffff800

08028644 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8028644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028648:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802864c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028650:	2c00      	cmp	r4, #0
 8028652:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028656:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802865a:	fb04 ce03 	mla	lr, r4, r3, ip
 802865e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8028662:	db60      	blt.n	8028726 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8028664:	45a1      	cmp	r9, r4
 8028666:	dd5e      	ble.n	8028726 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8028668:	f1bc 0f00 	cmp.w	ip, #0
 802866c:	db59      	blt.n	8028722 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802866e:	45e0      	cmp	r8, ip
 8028670:	dd57      	ble.n	8028722 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8028672:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8028676:	f01e 0f01 	tst.w	lr, #1
 802867a:	5c16      	ldrb	r6, [r2, r0]
 802867c:	bf0c      	ite	eq
 802867e:	f006 060f 	andeq.w	r6, r6, #15
 8028682:	1136      	asrne	r6, r6, #4
 8028684:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028688:	b2f6      	uxtb	r6, r6
 802868a:	f11c 0001 	adds.w	r0, ip, #1
 802868e:	d44d      	bmi.n	802872c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8028690:	4580      	cmp	r8, r0
 8028692:	dd4b      	ble.n	802872c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8028694:	2d00      	cmp	r5, #0
 8028696:	d04b      	beq.n	8028730 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8028698:	f10e 0a01 	add.w	sl, lr, #1
 802869c:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80286a0:	f01a 0f01 	tst.w	sl, #1
 80286a4:	5c10      	ldrb	r0, [r2, r0]
 80286a6:	bf0c      	ite	eq
 80286a8:	f000 000f 	andeq.w	r0, r0, #15
 80286ac:	1100      	asrne	r0, r0, #4
 80286ae:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80286b2:	b2c0      	uxtb	r0, r0
 80286b4:	3401      	adds	r4, #1
 80286b6:	d43f      	bmi.n	8028738 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80286b8:	45a1      	cmp	r9, r4
 80286ba:	dd3d      	ble.n	8028738 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80286bc:	2f00      	cmp	r7, #0
 80286be:	f000 809e 	beq.w	80287fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 80286c2:	f1bc 0f00 	cmp.w	ip, #0
 80286c6:	db35      	blt.n	8028734 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80286c8:	45e0      	cmp	r8, ip
 80286ca:	dd33      	ble.n	8028734 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80286cc:	eb03 090e 	add.w	r9, r3, lr
 80286d0:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80286d4:	f019 0f01 	tst.w	r9, #1
 80286d8:	5d14      	ldrb	r4, [r2, r4]
 80286da:	bf0c      	ite	eq
 80286dc:	f004 040f 	andeq.w	r4, r4, #15
 80286e0:	1124      	asrne	r4, r4, #4
 80286e2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80286e6:	b2e4      	uxtb	r4, r4
 80286e8:	f11c 0c01 	adds.w	ip, ip, #1
 80286ec:	d427      	bmi.n	802873e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 80286ee:	45e0      	cmp	r8, ip
 80286f0:	dd25      	ble.n	802873e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 80286f2:	b335      	cbz	r5, 8028742 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 80286f4:	3301      	adds	r3, #1
 80286f6:	449e      	add	lr, r3
 80286f8:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80286fc:	f01e 0f01 	tst.w	lr, #1
 8028700:	5cd2      	ldrb	r2, [r2, r3]
 8028702:	bf0c      	ite	eq
 8028704:	f002 020f 	andeq.w	r2, r2, #15
 8028708:	1112      	asrne	r2, r2, #4
 802870a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802870e:	b2d3      	uxtb	r3, r2
 8028710:	2d0f      	cmp	r5, #15
 8028712:	d917      	bls.n	8028744 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8028714:	4b3c      	ldr	r3, [pc, #240]	; (8028808 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 8028716:	f240 210d 	movw	r1, #525	; 0x20d
 802871a:	4a3c      	ldr	r2, [pc, #240]	; (802880c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802871c:	483c      	ldr	r0, [pc, #240]	; (8028810 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802871e:	f000 ffd9 	bl	80296d4 <__assert_func>
 8028722:	2600      	movs	r6, #0
 8028724:	e7b1      	b.n	802868a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8028726:	2000      	movs	r0, #0
 8028728:	4606      	mov	r6, r0
 802872a:	e7c3      	b.n	80286b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802872c:	2000      	movs	r0, #0
 802872e:	e7c1      	b.n	80286b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028730:	4628      	mov	r0, r5
 8028732:	e7bf      	b.n	80286b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028734:	2400      	movs	r4, #0
 8028736:	e7d7      	b.n	80286e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8028738:	2300      	movs	r3, #0
 802873a:	461c      	mov	r4, r3
 802873c:	e7e8      	b.n	8028710 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802873e:	2300      	movs	r3, #0
 8028740:	e7e6      	b.n	8028710 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8028742:	462b      	mov	r3, r5
 8028744:	2f0f      	cmp	r7, #15
 8028746:	d8e5      	bhi.n	8028714 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8028748:	b2ad      	uxth	r5, r5
 802874a:	b2bf      	uxth	r7, r7
 802874c:	fb05 fc07 	mul.w	ip, r5, r7
 8028750:	012d      	lsls	r5, r5, #4
 8028752:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8028756:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802875a:	eba5 050c 	sub.w	r5, r5, ip
 802875e:	b2bf      	uxth	r7, r7
 8028760:	b2ad      	uxth	r5, r5
 8028762:	1bd2      	subs	r2, r2, r7
 8028764:	4368      	muls	r0, r5
 8028766:	b292      	uxth	r2, r2
 8028768:	fb06 0002 	mla	r0, r6, r2, r0
 802876c:	fb07 0404 	mla	r4, r7, r4, r0
 8028770:	fb0c 4303 	mla	r3, ip, r3, r4
 8028774:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028778:	2b00      	cmp	r3, #0
 802877a:	d03e      	beq.n	80287fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 802877c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8028780:	4a24      	ldr	r2, [pc, #144]	; (8028814 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 8028782:	4343      	muls	r3, r0
 8028784:	6816      	ldr	r6, [r2, #0]
 8028786:	1c58      	adds	r0, r3, #1
 8028788:	880a      	ldrh	r2, [r1, #0]
 802878a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802878e:	1215      	asrs	r5, r2, #8
 8028790:	1200      	asrs	r0, r0, #8
 8028792:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028796:	10d7      	asrs	r7, r2, #3
 8028798:	b284      	uxth	r4, r0
 802879a:	43c0      	mvns	r0, r0
 802879c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80287a0:	00d2      	lsls	r2, r2, #3
 80287a2:	b2c3      	uxtb	r3, r0
 80287a4:	0a30      	lsrs	r0, r6, #8
 80287a6:	fb15 f503 	smulbb	r5, r5, r3
 80287aa:	b2d2      	uxtb	r2, r2
 80287ac:	fb17 f703 	smulbb	r7, r7, r3
 80287b0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80287b4:	fb12 f303 	smulbb	r3, r2, r3
 80287b8:	fb00 5004 	mla	r0, r0, r4, r5
 80287bc:	08f5      	lsrs	r5, r6, #3
 80287be:	00f6      	lsls	r6, r6, #3
 80287c0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80287c4:	b280      	uxth	r0, r0
 80287c6:	b2f6      	uxtb	r6, r6
 80287c8:	fb05 7504 	mla	r5, r5, r4, r7
 80287cc:	fb06 3304 	mla	r3, r6, r4, r3
 80287d0:	1c44      	adds	r4, r0, #1
 80287d2:	b2ad      	uxth	r5, r5
 80287d4:	b29a      	uxth	r2, r3
 80287d6:	1c6b      	adds	r3, r5, #1
 80287d8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80287dc:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80287e0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80287e4:	095b      	lsrs	r3, r3, #5
 80287e6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80287ea:	4303      	orrs	r3, r0
 80287ec:	1c50      	adds	r0, r2, #1
 80287ee:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80287f2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80287f6:	4313      	orrs	r3, r2
 80287f8:	800b      	strh	r3, [r1, #0]
 80287fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80287fe:	2d0f      	cmp	r5, #15
 8028800:	d888      	bhi.n	8028714 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8028802:	463b      	mov	r3, r7
 8028804:	463c      	mov	r4, r7
 8028806:	e79f      	b.n	8028748 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8028808:	0802e1e2 	.word	0x0802e1e2
 802880c:	0802e7a5 	.word	0x0802e7a5
 8028810:	0802e2cb 	.word	0x0802e2cb
 8028814:	2000594c 	.word	0x2000594c

08028818 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802881c:	ed2d 8b08 	vpush	{d8-d11}
 8028820:	b097      	sub	sp, #92	; 0x5c
 8028822:	eeb0 aa40 	vmov.f32	s20, s0
 8028826:	eef0 9a60 	vmov.f32	s19, s1
 802882a:	9214      	str	r2, [sp, #80]	; 0x50
 802882c:	eeb0 9a41 	vmov.f32	s18, s2
 8028830:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8028832:	eeb0 8a62 	vmov.f32	s16, s5
 8028836:	9309      	str	r3, [sp, #36]	; 0x24
 8028838:	eef0 8a43 	vmov.f32	s17, s6
 802883c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8028840:	eef0 ba44 	vmov.f32	s23, s8
 8028844:	9015      	str	r0, [sp, #84]	; 0x54
 8028846:	eeb0 ba64 	vmov.f32	s22, s9
 802884a:	6850      	ldr	r0, [r2, #4]
 802884c:	eef0 aa45 	vmov.f32	s21, s10
 8028850:	910d      	str	r1, [sp, #52]	; 0x34
 8028852:	930e      	str	r3, [sp, #56]	; 0x38
 8028854:	6812      	ldr	r2, [r2, #0]
 8028856:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802885a:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 802885e:	fb00 1303 	mla	r3, r0, r3, r1
 8028862:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 8028866:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028868:	689b      	ldr	r3, [r3, #8]
 802886a:	3301      	adds	r3, #1
 802886c:	f023 0301 	bic.w	r3, r3, #1
 8028870:	930a      	str	r3, [sp, #40]	; 0x28
 8028872:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028874:	681f      	ldr	r7, [r3, #0]
 8028876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028878:	2b00      	cmp	r3, #0
 802887a:	dc03      	bgt.n	8028884 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802887c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802887e:	2b00      	cmp	r3, #0
 8028880:	f340 826b 	ble.w	8028d5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 8028884:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028886:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802888a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802888e:	1e48      	subs	r0, r1, #1
 8028890:	f102 3cff 	add.w	ip, r2, #4294967295
 8028894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028896:	2b00      	cmp	r3, #0
 8028898:	f340 80f4 	ble.w	8028a84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802889c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80288a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80288a4:	d406      	bmi.n	80288b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80288a6:	4586      	cmp	lr, r0
 80288a8:	da04      	bge.n	80288b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80288aa:	2b00      	cmp	r3, #0
 80288ac:	db02      	blt.n	80288b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80288ae:	4563      	cmp	r3, ip
 80288b0:	f2c0 80e9 	blt.w	8028a86 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80288b4:	f11e 0e01 	adds.w	lr, lr, #1
 80288b8:	f100 80da 	bmi.w	8028a70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80288bc:	4571      	cmp	r1, lr
 80288be:	f2c0 80d7 	blt.w	8028a70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80288c2:	3301      	adds	r3, #1
 80288c4:	f100 80d4 	bmi.w	8028a70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80288c8:	429a      	cmp	r2, r3
 80288ca:	f2c0 80d1 	blt.w	8028a70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80288ce:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80288d2:	46d0      	mov	r8, sl
 80288d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80288d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80288da:	f1b9 0f00 	cmp.w	r9, #0
 80288de:	f340 80f1 	ble.w	8028ac4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80288e2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80288e4:	1430      	asrs	r0, r6, #16
 80288e6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80288ea:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80288ee:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80288f2:	1423      	asrs	r3, r4, #16
 80288f4:	f100 813b 	bmi.w	8028b6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80288f8:	f10c 3bff 	add.w	fp, ip, #4294967295
 80288fc:	455b      	cmp	r3, fp
 80288fe:	f280 8136 	bge.w	8028b6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028902:	2800      	cmp	r0, #0
 8028904:	f2c0 8133 	blt.w	8028b6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028908:	f10e 3bff 	add.w	fp, lr, #4294967295
 802890c:	4558      	cmp	r0, fp
 802890e:	f280 812e 	bge.w	8028b6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028912:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028914:	fb00 3305 	mla	r3, r0, r5, r3
 8028918:	0858      	lsrs	r0, r3, #1
 802891a:	07dd      	lsls	r5, r3, #31
 802891c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028920:	bf54      	ite	pl
 8028922:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028926:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802892a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802892e:	fa5f fc8c 	uxtb.w	ip, ip
 8028932:	2a00      	cmp	r2, #0
 8028934:	f000 810a 	beq.w	8028b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8028938:	1c58      	adds	r0, r3, #1
 802893a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802893e:	07c0      	lsls	r0, r0, #31
 8028940:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028944:	bf54      	ite	pl
 8028946:	f00e 0e0f 	andpl.w	lr, lr, #15
 802894a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802894e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028952:	fa5f f08e 	uxtb.w	r0, lr
 8028956:	9010      	str	r0, [sp, #64]	; 0x40
 8028958:	b1e1      	cbz	r1, 8028994 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802895a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802895c:	4403      	add	r3, r0
 802895e:	0858      	lsrs	r0, r3, #1
 8028960:	07dd      	lsls	r5, r3, #31
 8028962:	f103 0301 	add.w	r3, r3, #1
 8028966:	5c38      	ldrb	r0, [r7, r0]
 8028968:	bf54      	ite	pl
 802896a:	f000 000f 	andpl.w	r0, r0, #15
 802896e:	1100      	asrmi	r0, r0, #4
 8028970:	07dd      	lsls	r5, r3, #31
 8028972:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028976:	b2c0      	uxtb	r0, r0
 8028978:	900b      	str	r0, [sp, #44]	; 0x2c
 802897a:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802897e:	f817 e000 	ldrb.w	lr, [r7, r0]
 8028982:	bf54      	ite	pl
 8028984:	f00e 030f 	andpl.w	r3, lr, #15
 8028988:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802898c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028990:	b2db      	uxtb	r3, r3
 8028992:	9311      	str	r3, [sp, #68]	; 0x44
 8028994:	b292      	uxth	r2, r2
 8028996:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028998:	b289      	uxth	r1, r1
 802899a:	fb02 f301 	mul.w	r3, r2, r1
 802899e:	0112      	lsls	r2, r2, #4
 80289a0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80289a4:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80289a8:	1ad2      	subs	r2, r2, r3
 80289aa:	b289      	uxth	r1, r1
 80289ac:	b292      	uxth	r2, r2
 80289ae:	1a40      	subs	r0, r0, r1
 80289b0:	436a      	muls	r2, r5
 80289b2:	b280      	uxth	r0, r0
 80289b4:	fb0c 2c00 	mla	ip, ip, r0, r2
 80289b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80289ba:	fb01 c102 	mla	r1, r1, r2, ip
 80289be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80289c0:	fb03 1302 	mla	r3, r3, r2, r1
 80289c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80289c8:	2b00      	cmp	r3, #0
 80289ca:	d048      	beq.n	8028a5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80289cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80289ce:	4a78      	ldr	r2, [pc, #480]	; (8028bb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 80289d0:	434b      	muls	r3, r1
 80289d2:	f8d2 e000 	ldr.w	lr, [r2]
 80289d6:	1c59      	adds	r1, r3, #1
 80289d8:	f8b8 2000 	ldrh.w	r2, [r8]
 80289dc:	ea4f 201e 	mov.w	r0, lr, lsr #8
 80289e0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80289e4:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80289e8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80289ec:	121b      	asrs	r3, r3, #8
 80289ee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80289f2:	ea4f 0be2 	mov.w	fp, r2, asr #3
 80289f6:	b299      	uxth	r1, r3
 80289f8:	43db      	mvns	r3, r3
 80289fa:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80289fe:	00d2      	lsls	r2, r2, #3
 8028a00:	b2db      	uxtb	r3, r3
 8028a02:	b2d2      	uxtb	r2, r2
 8028a04:	fb1c fc03 	smulbb	ip, ip, r3
 8028a08:	fb1b fb03 	smulbb	fp, fp, r3
 8028a0c:	fb00 c001 	mla	r0, r0, r1, ip
 8028a10:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 8028a14:	fb12 f303 	smulbb	r3, r2, r3
 8028a18:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028a1c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8028a20:	b280      	uxth	r0, r0
 8028a22:	fa5f fe8e 	uxtb.w	lr, lr
 8028a26:	fb0c bc01 	mla	ip, ip, r1, fp
 8028a2a:	fb0e 3101 	mla	r1, lr, r1, r3
 8028a2e:	1c43      	adds	r3, r0, #1
 8028a30:	fa1f fc8c 	uxth.w	ip, ip
 8028a34:	b289      	uxth	r1, r1
 8028a36:	f10c 0201 	add.w	r2, ip, #1
 8028a3a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028a3e:	1c4b      	adds	r3, r1, #1
 8028a40:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8028a44:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028a48:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028a4c:	0952      	lsrs	r2, r2, #5
 8028a4e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028a52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028a56:	4310      	orrs	r0, r2
 8028a58:	4308      	orrs	r0, r1
 8028a5a:	f8a8 0000 	strh.w	r0, [r8]
 8028a5e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028a60:	f108 0802 	add.w	r8, r8, #2
 8028a64:	f109 39ff 	add.w	r9, r9, #4294967295
 8028a68:	441c      	add	r4, r3
 8028a6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028a6c:	441e      	add	r6, r3
 8028a6e:	e734      	b.n	80288da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8028a70:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028a72:	f10a 0a02 	add.w	sl, sl, #2
 8028a76:	441c      	add	r4, r3
 8028a78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028a7a:	441e      	add	r6, r3
 8028a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a7e:	3b01      	subs	r3, #1
 8028a80:	9309      	str	r3, [sp, #36]	; 0x24
 8028a82:	e707      	b.n	8028894 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028a84:	d023      	beq.n	8028ace <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8028a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a88:	982b      	ldr	r0, [sp, #172]	; 0xac
 8028a8a:	3b01      	subs	r3, #1
 8028a8c:	fb00 4003 	mla	r0, r0, r3, r4
 8028a90:	1400      	asrs	r0, r0, #16
 8028a92:	f53f af1c 	bmi.w	80288ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028a96:	3901      	subs	r1, #1
 8028a98:	4288      	cmp	r0, r1
 8028a9a:	f6bf af18 	bge.w	80288ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028a9e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8028aa0:	fb01 6303 	mla	r3, r1, r3, r6
 8028aa4:	141b      	asrs	r3, r3, #16
 8028aa6:	f53f af12 	bmi.w	80288ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028aaa:	3a01      	subs	r2, #1
 8028aac:	4293      	cmp	r3, r2
 8028aae:	f6bf af0e 	bge.w	80288ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028ab2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8028ab6:	46d1      	mov	r9, sl
 8028ab8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8028abc:	930f      	str	r3, [sp, #60]	; 0x3c
 8028abe:	f1bb 0f00 	cmp.w	fp, #0
 8028ac2:	dc77      	bgt.n	8028bb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ac6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028aca:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8028ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028ad0:	2b00      	cmp	r3, #0
 8028ad2:	f340 8142 	ble.w	8028d5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 8028ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028ada:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028adc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028ae0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028ae4:	eef0 6a48 	vmov.f32	s13, s16
 8028ae8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028aec:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028af0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028af4:	ee16 4a90 	vmov	r4, s13
 8028af8:	eef0 6a68 	vmov.f32	s13, s17
 8028afc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028b00:	ee16 6a90 	vmov	r6, s13
 8028b04:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028b08:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028b0c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028b10:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028b14:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028b18:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028b1c:	ee18 2a10 	vmov	r2, s16
 8028b20:	eeb0 8a47 	vmov.f32	s16, s14
 8028b24:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b28:	ee18 2a90 	vmov	r2, s17
 8028b2c:	932b      	str	r3, [sp, #172]	; 0xac
 8028b2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028b30:	eef0 8a67 	vmov.f32	s17, s15
 8028b34:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b38:	932c      	str	r3, [sp, #176]	; 0xb0
 8028b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028b3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028b3e:	3b01      	subs	r3, #1
 8028b40:	930d      	str	r3, [sp, #52]	; 0x34
 8028b42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028b44:	bf08      	it	eq
 8028b46:	4613      	moveq	r3, r2
 8028b48:	9309      	str	r3, [sp, #36]	; 0x24
 8028b4a:	e694      	b.n	8028876 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8028b4c:	2900      	cmp	r1, #0
 8028b4e:	f43f af21 	beq.w	8028994 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8028b52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028b54:	4418      	add	r0, r3
 8028b56:	0843      	lsrs	r3, r0, #1
 8028b58:	07c0      	lsls	r0, r0, #31
 8028b5a:	5cfb      	ldrb	r3, [r7, r3]
 8028b5c:	bf54      	ite	pl
 8028b5e:	f003 030f 	andpl.w	r3, r3, #15
 8028b62:	111b      	asrmi	r3, r3, #4
 8028b64:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028b68:	b2db      	uxtb	r3, r3
 8028b6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8028b6c:	e712      	b.n	8028994 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8028b6e:	f113 0b01 	adds.w	fp, r3, #1
 8028b72:	f53f af74 	bmi.w	8028a5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028b76:	45dc      	cmp	ip, fp
 8028b78:	f6ff af71 	blt.w	8028a5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028b7c:	f110 0b01 	adds.w	fp, r0, #1
 8028b80:	f53f af6d 	bmi.w	8028a5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028b84:	45de      	cmp	lr, fp
 8028b86:	f6ff af6a 	blt.w	8028a5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028b8a:	9302      	str	r3, [sp, #8]
 8028b8c:	fa0f f38e 	sxth.w	r3, lr
 8028b90:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028b92:	9301      	str	r3, [sp, #4]
 8028b94:	fa0f f38c 	sxth.w	r3, ip
 8028b98:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028b9c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8028ba0:	9300      	str	r3, [sp, #0]
 8028ba2:	463a      	mov	r2, r7
 8028ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028ba6:	4641      	mov	r1, r8
 8028ba8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028baa:	f7ff fd4b 	bl	8028644 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8028bae:	e756      	b.n	8028a5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028bb0:	2000594c 	.word	0x2000594c
 8028bb4:	1422      	asrs	r2, r4, #16
 8028bb6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028bb8:	1433      	asrs	r3, r6, #16
 8028bba:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028bbe:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028bc2:	fb05 2303 	mla	r3, r5, r3, r2
 8028bc6:	085a      	lsrs	r2, r3, #1
 8028bc8:	07dd      	lsls	r5, r3, #31
 8028bca:	5cba      	ldrb	r2, [r7, r2]
 8028bcc:	bf54      	ite	pl
 8028bce:	f002 020f 	andpl.w	r2, r2, #15
 8028bd2:	1112      	asrmi	r2, r2, #4
 8028bd4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028bd8:	b2d2      	uxtb	r2, r2
 8028bda:	2900      	cmp	r1, #0
 8028bdc:	f000 80a9 	beq.w	8028d32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 8028be0:	f103 0e01 	add.w	lr, r3, #1
 8028be4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028be8:	f01e 0f01 	tst.w	lr, #1
 8028bec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028bf0:	bf0c      	ite	eq
 8028bf2:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028bf6:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028bfa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028bfe:	fa5f f58c 	uxtb.w	r5, ip
 8028c02:	9512      	str	r5, [sp, #72]	; 0x48
 8028c04:	b308      	cbz	r0, 8028c4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8028c06:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028c08:	442b      	add	r3, r5
 8028c0a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028c0e:	07dd      	lsls	r5, r3, #31
 8028c10:	f103 0301 	add.w	r3, r3, #1
 8028c14:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028c18:	bf54      	ite	pl
 8028c1a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028c1e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028c22:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028c26:	fa5f f58c 	uxtb.w	r5, ip
 8028c2a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028c2e:	950c      	str	r5, [sp, #48]	; 0x30
 8028c30:	07dd      	lsls	r5, r3, #31
 8028c32:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028c36:	bf54      	ite	pl
 8028c38:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028c3c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028c40:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028c44:	fa5f f38c 	uxtb.w	r3, ip
 8028c48:	9313      	str	r3, [sp, #76]	; 0x4c
 8028c4a:	b289      	uxth	r1, r1
 8028c4c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028c4e:	b280      	uxth	r0, r0
 8028c50:	fb01 f300 	mul.w	r3, r1, r0
 8028c54:	0109      	lsls	r1, r1, #4
 8028c56:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028c5a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8028c5e:	1ac9      	subs	r1, r1, r3
 8028c60:	b280      	uxth	r0, r0
 8028c62:	b289      	uxth	r1, r1
 8028c64:	ebac 0c00 	sub.w	ip, ip, r0
 8028c68:	4369      	muls	r1, r5
 8028c6a:	fa1f fc8c 	uxth.w	ip, ip
 8028c6e:	fb02 120c 	mla	r2, r2, ip, r1
 8028c72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028c74:	fb00 2001 	mla	r0, r0, r1, r2
 8028c78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028c7a:	fb03 0302 	mla	r3, r3, r2, r0
 8028c7e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028c82:	2b00      	cmp	r3, #0
 8028c84:	d04c      	beq.n	8028d20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8028c86:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028c88:	4a36      	ldr	r2, [pc, #216]	; (8028d64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
 8028c8a:	434b      	muls	r3, r1
 8028c8c:	f8d2 e000 	ldr.w	lr, [r2]
 8028c90:	1c59      	adds	r1, r3, #1
 8028c92:	f8b9 2000 	ldrh.w	r2, [r9]
 8028c96:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8028c9a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028c9e:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8028ca2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028ca6:	121b      	asrs	r3, r3, #8
 8028ca8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028cac:	ea4f 08e2 	mov.w	r8, r2, asr #3
 8028cb0:	b299      	uxth	r1, r3
 8028cb2:	43db      	mvns	r3, r3
 8028cb4:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8028cb8:	00d2      	lsls	r2, r2, #3
 8028cba:	b2db      	uxtb	r3, r3
 8028cbc:	b2d2      	uxtb	r2, r2
 8028cbe:	fb1c fc03 	smulbb	ip, ip, r3
 8028cc2:	fb18 f803 	smulbb	r8, r8, r3
 8028cc6:	fb00 c001 	mla	r0, r0, r1, ip
 8028cca:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 8028cce:	fb12 f203 	smulbb	r2, r2, r3
 8028cd2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028cd6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8028cda:	b280      	uxth	r0, r0
 8028cdc:	fa5f fe8e 	uxtb.w	lr, lr
 8028ce0:	fb0c 8c01 	mla	ip, ip, r1, r8
 8028ce4:	fb0e 2201 	mla	r2, lr, r1, r2
 8028ce8:	fa1f fc8c 	uxth.w	ip, ip
 8028cec:	b292      	uxth	r2, r2
 8028cee:	f10c 0801 	add.w	r8, ip, #1
 8028cf2:	1c51      	adds	r1, r2, #1
 8028cf4:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 8028cf8:	f100 0801 	add.w	r8, r0, #1
 8028cfc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028d00:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028d04:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 8028d08:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028d0c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028d10:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028d14:	ea4c 0c00 	orr.w	ip, ip, r0
 8028d18:	ea4c 0c02 	orr.w	ip, ip, r2
 8028d1c:	f8a9 c000 	strh.w	ip, [r9]
 8028d20:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028d22:	f109 0902 	add.w	r9, r9, #2
 8028d26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028d2a:	441c      	add	r4, r3
 8028d2c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028d2e:	441e      	add	r6, r3
 8028d30:	e6c5      	b.n	8028abe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8028d32:	2800      	cmp	r0, #0
 8028d34:	d089      	beq.n	8028c4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8028d36:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028d38:	442b      	add	r3, r5
 8028d3a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028d3e:	07db      	lsls	r3, r3, #31
 8028d40:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028d44:	bf54      	ite	pl
 8028d46:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028d4a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028d4e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028d52:	fa5f f38c 	uxtb.w	r3, ip
 8028d56:	930c      	str	r3, [sp, #48]	; 0x30
 8028d58:	e777      	b.n	8028c4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8028d5a:	b017      	add	sp, #92	; 0x5c
 8028d5c:	ecbd 8b08 	vpop	{d8-d11}
 8028d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d64:	2000594c 	.word	0x2000594c

08028d68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8028d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028d6c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8028d70:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028d74:	2c00      	cmp	r4, #0
 8028d76:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028d7a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8028d7e:	fb04 ce03 	mla	lr, r4, r3, ip
 8028d82:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8028d86:	db60      	blt.n	8028e4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8028d88:	45a1      	cmp	r9, r4
 8028d8a:	dd5e      	ble.n	8028e4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8028d8c:	f1bc 0f00 	cmp.w	ip, #0
 8028d90:	db59      	blt.n	8028e46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8028d92:	45e0      	cmp	r8, ip
 8028d94:	dd57      	ble.n	8028e46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8028d96:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8028d9a:	f01e 0f01 	tst.w	lr, #1
 8028d9e:	5c16      	ldrb	r6, [r2, r0]
 8028da0:	bf0c      	ite	eq
 8028da2:	f006 060f 	andeq.w	r6, r6, #15
 8028da6:	1136      	asrne	r6, r6, #4
 8028da8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028dac:	b2f6      	uxtb	r6, r6
 8028dae:	f11c 0001 	adds.w	r0, ip, #1
 8028db2:	d44d      	bmi.n	8028e50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8028db4:	4580      	cmp	r8, r0
 8028db6:	dd4b      	ble.n	8028e50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8028db8:	2d00      	cmp	r5, #0
 8028dba:	d04b      	beq.n	8028e54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8028dbc:	f10e 0a01 	add.w	sl, lr, #1
 8028dc0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8028dc4:	f01a 0f01 	tst.w	sl, #1
 8028dc8:	5c10      	ldrb	r0, [r2, r0]
 8028dca:	bf0c      	ite	eq
 8028dcc:	f000 000f 	andeq.w	r0, r0, #15
 8028dd0:	1100      	asrne	r0, r0, #4
 8028dd2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028dd6:	b2c0      	uxtb	r0, r0
 8028dd8:	3401      	adds	r4, #1
 8028dda:	d43f      	bmi.n	8028e5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8028ddc:	45a1      	cmp	r9, r4
 8028dde:	dd3d      	ble.n	8028e5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8028de0:	2f00      	cmp	r7, #0
 8028de2:	f000 8097 	beq.w	8028f14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 8028de6:	f1bc 0f00 	cmp.w	ip, #0
 8028dea:	db35      	blt.n	8028e58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8028dec:	45e0      	cmp	r8, ip
 8028dee:	dd33      	ble.n	8028e58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8028df0:	eb03 090e 	add.w	r9, r3, lr
 8028df4:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8028df8:	f019 0f01 	tst.w	r9, #1
 8028dfc:	5d14      	ldrb	r4, [r2, r4]
 8028dfe:	bf0c      	ite	eq
 8028e00:	f004 040f 	andeq.w	r4, r4, #15
 8028e04:	1124      	asrne	r4, r4, #4
 8028e06:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028e0a:	b2e4      	uxtb	r4, r4
 8028e0c:	f11c 0c01 	adds.w	ip, ip, #1
 8028e10:	d427      	bmi.n	8028e62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8028e12:	45e0      	cmp	r8, ip
 8028e14:	dd25      	ble.n	8028e62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8028e16:	b335      	cbz	r5, 8028e66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8028e18:	3301      	adds	r3, #1
 8028e1a:	449e      	add	lr, r3
 8028e1c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028e20:	f01e 0f01 	tst.w	lr, #1
 8028e24:	5cd2      	ldrb	r2, [r2, r3]
 8028e26:	bf0c      	ite	eq
 8028e28:	f002 020f 	andeq.w	r2, r2, #15
 8028e2c:	1112      	asrne	r2, r2, #4
 8028e2e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028e32:	b2d3      	uxtb	r3, r2
 8028e34:	2d0f      	cmp	r5, #15
 8028e36:	d917      	bls.n	8028e68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8028e38:	4b39      	ldr	r3, [pc, #228]	; (8028f20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8028e3a:	f240 210d 	movw	r1, #525	; 0x20d
 8028e3e:	4a39      	ldr	r2, [pc, #228]	; (8028f24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8028e40:	4839      	ldr	r0, [pc, #228]	; (8028f28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 8028e42:	f000 fc47 	bl	80296d4 <__assert_func>
 8028e46:	2600      	movs	r6, #0
 8028e48:	e7b1      	b.n	8028dae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8028e4a:	2000      	movs	r0, #0
 8028e4c:	4606      	mov	r6, r0
 8028e4e:	e7c3      	b.n	8028dd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8028e50:	2000      	movs	r0, #0
 8028e52:	e7c1      	b.n	8028dd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8028e54:	4628      	mov	r0, r5
 8028e56:	e7bf      	b.n	8028dd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8028e58:	2400      	movs	r4, #0
 8028e5a:	e7d7      	b.n	8028e0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8028e5c:	2300      	movs	r3, #0
 8028e5e:	461c      	mov	r4, r3
 8028e60:	e7e8      	b.n	8028e34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8028e62:	2300      	movs	r3, #0
 8028e64:	e7e6      	b.n	8028e34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8028e66:	462b      	mov	r3, r5
 8028e68:	2f0f      	cmp	r7, #15
 8028e6a:	d8e5      	bhi.n	8028e38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8028e6c:	b2ad      	uxth	r5, r5
 8028e6e:	b2bf      	uxth	r7, r7
 8028e70:	fb05 fc07 	mul.w	ip, r5, r7
 8028e74:	012d      	lsls	r5, r5, #4
 8028e76:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8028e7a:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8028e7e:	eba5 050c 	sub.w	r5, r5, ip
 8028e82:	b2bf      	uxth	r7, r7
 8028e84:	b2ad      	uxth	r5, r5
 8028e86:	1bd2      	subs	r2, r2, r7
 8028e88:	4368      	muls	r0, r5
 8028e8a:	b292      	uxth	r2, r2
 8028e8c:	fb06 0002 	mla	r0, r6, r2, r0
 8028e90:	fb07 0404 	mla	r4, r7, r4, r0
 8028e94:	fb0c 4303 	mla	r3, ip, r3, r4
 8028e98:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028e9c:	2b00      	cmp	r3, #0
 8028e9e:	d037      	beq.n	8028f10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 8028ea0:	4a22      	ldr	r2, [pc, #136]	; (8028f2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 8028ea2:	b298      	uxth	r0, r3
 8028ea4:	43db      	mvns	r3, r3
 8028ea6:	6816      	ldr	r6, [r2, #0]
 8028ea8:	880a      	ldrh	r2, [r1, #0]
 8028eaa:	b2db      	uxtb	r3, r3
 8028eac:	0a34      	lsrs	r4, r6, #8
 8028eae:	1215      	asrs	r5, r2, #8
 8028eb0:	10d7      	asrs	r7, r2, #3
 8028eb2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028eb6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028eba:	00d2      	lsls	r2, r2, #3
 8028ebc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8028ec0:	fb15 f503 	smulbb	r5, r5, r3
 8028ec4:	b2d2      	uxtb	r2, r2
 8028ec6:	fb17 f703 	smulbb	r7, r7, r3
 8028eca:	fb04 5400 	mla	r4, r4, r0, r5
 8028ece:	08f5      	lsrs	r5, r6, #3
 8028ed0:	fb12 f303 	smulbb	r3, r2, r3
 8028ed4:	00f6      	lsls	r6, r6, #3
 8028ed6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8028eda:	b2a4      	uxth	r4, r4
 8028edc:	b2f6      	uxtb	r6, r6
 8028ede:	fb05 7500 	mla	r5, r5, r0, r7
 8028ee2:	1c62      	adds	r2, r4, #1
 8028ee4:	fb06 3000 	mla	r0, r6, r0, r3
 8028ee8:	b2ad      	uxth	r5, r5
 8028eea:	b280      	uxth	r0, r0
 8028eec:	1c6b      	adds	r3, r5, #1
 8028eee:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028ef2:	1c42      	adds	r2, r0, #1
 8028ef4:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8028ef8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028efc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028f00:	095b      	lsrs	r3, r3, #5
 8028f02:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028f06:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028f0a:	4323      	orrs	r3, r4
 8028f0c:	4303      	orrs	r3, r0
 8028f0e:	800b      	strh	r3, [r1, #0]
 8028f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028f14:	2d0f      	cmp	r5, #15
 8028f16:	d88f      	bhi.n	8028e38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8028f18:	463b      	mov	r3, r7
 8028f1a:	463c      	mov	r4, r7
 8028f1c:	e7a6      	b.n	8028e6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8028f1e:	bf00      	nop
 8028f20:	0802e1e2 	.word	0x0802e1e2
 8028f24:	0802e7a5 	.word	0x0802e7a5
 8028f28:	0802e2cb 	.word	0x0802e2cb
 8028f2c:	2000594c 	.word	0x2000594c

08028f30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f34:	ed2d 8b08 	vpush	{d8-d11}
 8028f38:	b093      	sub	sp, #76	; 0x4c
 8028f3a:	461d      	mov	r5, r3
 8028f3c:	eeb0 aa40 	vmov.f32	s20, s0
 8028f40:	920c      	str	r2, [sp, #48]	; 0x30
 8028f42:	eef0 9a60 	vmov.f32	s19, s1
 8028f46:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8028f48:	eeb0 9a41 	vmov.f32	s18, s2
 8028f4c:	9011      	str	r0, [sp, #68]	; 0x44
 8028f4e:	eeb0 8a62 	vmov.f32	s16, s5
 8028f52:	6850      	ldr	r0, [r2, #4]
 8028f54:	eef0 8a43 	vmov.f32	s17, s6
 8028f58:	9107      	str	r1, [sp, #28]
 8028f5a:	eef0 ba44 	vmov.f32	s23, s8
 8028f5e:	6812      	ldr	r2, [r2, #0]
 8028f60:	eeb0 ba64 	vmov.f32	s22, s9
 8028f64:	eef0 aa45 	vmov.f32	s21, s10
 8028f68:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8028f6c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8028f70:	fb00 1303 	mla	r3, r0, r3, r1
 8028f74:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028f78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028f7a:	689b      	ldr	r3, [r3, #8]
 8028f7c:	3301      	adds	r3, #1
 8028f7e:	f023 0301 	bic.w	r3, r3, #1
 8028f82:	9306      	str	r3, [sp, #24]
 8028f84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028f86:	681f      	ldr	r7, [r3, #0]
 8028f88:	9b07      	ldr	r3, [sp, #28]
 8028f8a:	2b00      	cmp	r3, #0
 8028f8c:	dc03      	bgt.n	8028f96 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028f90:	2b00      	cmp	r3, #0
 8028f92:	f340 8262 	ble.w	802945a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8028f96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028f98:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028f9c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028fa0:	1e48      	subs	r0, r1, #1
 8028fa2:	f102 3cff 	add.w	ip, r2, #4294967295
 8028fa6:	2d00      	cmp	r5, #0
 8028fa8:	f340 80ee 	ble.w	8029188 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8028fac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028fb0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028fb4:	d406      	bmi.n	8028fc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028fb6:	4586      	cmp	lr, r0
 8028fb8:	da04      	bge.n	8028fc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028fba:	2b00      	cmp	r3, #0
 8028fbc:	db02      	blt.n	8028fc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028fbe:	4563      	cmp	r3, ip
 8028fc0:	f2c0 80e3 	blt.w	802918a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8028fc4:	f11e 0e01 	adds.w	lr, lr, #1
 8028fc8:	f100 80d6 	bmi.w	8029178 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8028fcc:	4571      	cmp	r1, lr
 8028fce:	f2c0 80d3 	blt.w	8029178 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8028fd2:	3301      	adds	r3, #1
 8028fd4:	f100 80d0 	bmi.w	8029178 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8028fd8:	429a      	cmp	r2, r3
 8028fda:	f2c0 80cd 	blt.w	8029178 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8028fde:	46c8      	mov	r8, r9
 8028fe0:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8028fe4:	9509      	str	r5, [sp, #36]	; 0x24
 8028fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028fe8:	2b00      	cmp	r3, #0
 8028fea:	f340 80eb 	ble.w	80291c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8028fee:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8028ff2:	1430      	asrs	r0, r6, #16
 8028ff4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028ff8:	9308      	str	r3, [sp, #32]
 8028ffa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028ffc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029000:	1423      	asrs	r3, r4, #16
 8029002:	f100 813c 	bmi.w	802927e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8029006:	f10c 3bff 	add.w	fp, ip, #4294967295
 802900a:	455b      	cmp	r3, fp
 802900c:	f280 8137 	bge.w	802927e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8029010:	2800      	cmp	r0, #0
 8029012:	f2c0 8134 	blt.w	802927e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8029016:	f10e 3bff 	add.w	fp, lr, #4294967295
 802901a:	4558      	cmp	r0, fp
 802901c:	f280 812f 	bge.w	802927e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8029020:	9a06      	ldr	r2, [sp, #24]
 8029022:	fb00 3302 	mla	r3, r0, r2, r3
 8029026:	0858      	lsrs	r0, r3, #1
 8029028:	07da      	lsls	r2, r3, #31
 802902a:	9a08      	ldr	r2, [sp, #32]
 802902c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029030:	bf54      	ite	pl
 8029032:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029036:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802903a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802903e:	fa5f fc8c 	uxtb.w	ip, ip
 8029042:	2a00      	cmp	r2, #0
 8029044:	f000 8102 	beq.w	802924c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8029048:	1c58      	adds	r0, r3, #1
 802904a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802904e:	07c0      	lsls	r0, r0, #31
 8029050:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029054:	bf54      	ite	pl
 8029056:	f00e 0e0f 	andpl.w	lr, lr, #15
 802905a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802905e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029062:	fa5f fe8e 	uxtb.w	lr, lr
 8029066:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802906a:	b1b9      	cbz	r1, 802909c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802906c:	4453      	add	r3, sl
 802906e:	0858      	lsrs	r0, r3, #1
 8029070:	07da      	lsls	r2, r3, #31
 8029072:	5c38      	ldrb	r0, [r7, r0]
 8029074:	bf54      	ite	pl
 8029076:	f000 000f 	andpl.w	r0, r0, #15
 802907a:	1100      	asrmi	r0, r0, #4
 802907c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029080:	b2c0      	uxtb	r0, r0
 8029082:	900a      	str	r0, [sp, #40]	; 0x28
 8029084:	1c58      	adds	r0, r3, #1
 8029086:	0843      	lsrs	r3, r0, #1
 8029088:	07c2      	lsls	r2, r0, #31
 802908a:	5cfb      	ldrb	r3, [r7, r3]
 802908c:	bf54      	ite	pl
 802908e:	f003 030f 	andpl.w	r3, r3, #15
 8029092:	111b      	asrmi	r3, r3, #4
 8029094:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029098:	b2db      	uxtb	r3, r3
 802909a:	930e      	str	r3, [sp, #56]	; 0x38
 802909c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80290a0:	b289      	uxth	r1, r1
 80290a2:	fb02 f301 	mul.w	r3, r2, r1
 80290a6:	0112      	lsls	r2, r2, #4
 80290a8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80290ac:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80290b0:	1ad2      	subs	r2, r2, r3
 80290b2:	b289      	uxth	r1, r1
 80290b4:	b292      	uxth	r2, r2
 80290b6:	1a40      	subs	r0, r0, r1
 80290b8:	fa1f fe80 	uxth.w	lr, r0
 80290bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80290be:	4342      	muls	r2, r0
 80290c0:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80290c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80290c6:	fb01 c102 	mla	r1, r1, r2, ip
 80290ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80290cc:	fb03 1302 	mla	r3, r3, r2, r1
 80290d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80290d4:	2b00      	cmp	r3, #0
 80290d6:	d045      	beq.n	8029164 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80290d8:	4a79      	ldr	r2, [pc, #484]	; (80292c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
 80290da:	2bff      	cmp	r3, #255	; 0xff
 80290dc:	6811      	ldr	r1, [r2, #0]
 80290de:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 80290e2:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 80290e6:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 80290ea:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80290ee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80290f2:	b2c9      	uxtb	r1, r1
 80290f4:	f000 80bb 	beq.w	802926e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80290f8:	f8b8 c000 	ldrh.w	ip, [r8]
 80290fc:	fa1f fb83 	uxth.w	fp, r3
 8029100:	43db      	mvns	r3, r3
 8029102:	fb1e fe0b 	smulbb	lr, lr, fp
 8029106:	ea4f 202c 	mov.w	r0, ip, asr #8
 802910a:	fb12 f20b 	smulbb	r2, r2, fp
 802910e:	b2db      	uxtb	r3, r3
 8029110:	fb11 f10b 	smulbb	r1, r1, fp
 8029114:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029118:	fb00 e003 	mla	r0, r0, r3, lr
 802911c:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8029120:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029124:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8029128:	b280      	uxth	r0, r0
 802912a:	fa5f fc8c 	uxtb.w	ip, ip
 802912e:	fb0e 2203 	mla	r2, lr, r3, r2
 8029132:	fb0c 1303 	mla	r3, ip, r3, r1
 8029136:	1c41      	adds	r1, r0, #1
 8029138:	b292      	uxth	r2, r2
 802913a:	b29b      	uxth	r3, r3
 802913c:	f102 0e01 	add.w	lr, r2, #1
 8029140:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029144:	1c59      	adds	r1, r3, #1
 8029146:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802914a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802914e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029152:	0952      	lsrs	r2, r2, #5
 8029154:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029158:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802915c:	4310      	orrs	r0, r2
 802915e:	4318      	orrs	r0, r3
 8029160:	f8a8 0000 	strh.w	r0, [r8]
 8029164:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029166:	f108 0802 	add.w	r8, r8, #2
 802916a:	441c      	add	r4, r3
 802916c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802916e:	441e      	add	r6, r3
 8029170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029172:	3b01      	subs	r3, #1
 8029174:	9309      	str	r3, [sp, #36]	; 0x24
 8029176:	e736      	b.n	8028fe6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029178:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802917a:	3d01      	subs	r5, #1
 802917c:	f109 0902 	add.w	r9, r9, #2
 8029180:	441c      	add	r4, r3
 8029182:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029184:	441e      	add	r6, r3
 8029186:	e70e      	b.n	8028fa6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8029188:	d020      	beq.n	80291cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802918a:	1e6b      	subs	r3, r5, #1
 802918c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802918e:	fb00 4003 	mla	r0, r0, r3, r4
 8029192:	1400      	asrs	r0, r0, #16
 8029194:	f53f af23 	bmi.w	8028fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029198:	3901      	subs	r1, #1
 802919a:	4288      	cmp	r0, r1
 802919c:	f6bf af1f 	bge.w	8028fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80291a0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80291a2:	fb01 6303 	mla	r3, r1, r3, r6
 80291a6:	141b      	asrs	r3, r3, #16
 80291a8:	f53f af19 	bmi.w	8028fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80291ac:	3a01      	subs	r2, #1
 80291ae:	4293      	cmp	r3, r2
 80291b0:	f6bf af15 	bge.w	8028fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80291b4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80291b8:	46aa      	mov	sl, r5
 80291ba:	46c8      	mov	r8, r9
 80291bc:	9308      	str	r3, [sp, #32]
 80291be:	f1ba 0f00 	cmp.w	sl, #0
 80291c2:	dc7f      	bgt.n	80292c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80291c4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80291c8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80291cc:	9b07      	ldr	r3, [sp, #28]
 80291ce:	2b00      	cmp	r3, #0
 80291d0:	f340 8143 	ble.w	802945a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 80291d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80291d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80291da:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80291de:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80291e2:	eef0 6a48 	vmov.f32	s13, s16
 80291e6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80291ea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80291ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80291f2:	ee16 4a90 	vmov	r4, s13
 80291f6:	eef0 6a68 	vmov.f32	s13, s17
 80291fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80291fe:	ee16 6a90 	vmov	r6, s13
 8029202:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029206:	ee69 7a27 	vmul.f32	s15, s18, s15
 802920a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802920e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029212:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029216:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802921a:	ee18 2a10 	vmov	r2, s16
 802921e:	eeb0 8a47 	vmov.f32	s16, s14
 8029222:	fb92 f3f3 	sdiv	r3, r2, r3
 8029226:	ee18 2a90 	vmov	r2, s17
 802922a:	9327      	str	r3, [sp, #156]	; 0x9c
 802922c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802922e:	eef0 8a67 	vmov.f32	s17, s15
 8029232:	fb92 f3f3 	sdiv	r3, r2, r3
 8029236:	9328      	str	r3, [sp, #160]	; 0xa0
 8029238:	9b07      	ldr	r3, [sp, #28]
 802923a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802923c:	3b01      	subs	r3, #1
 802923e:	9307      	str	r3, [sp, #28]
 8029240:	bf08      	it	eq
 8029242:	4615      	moveq	r5, r2
 8029244:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029246:	bf18      	it	ne
 8029248:	461d      	movne	r5, r3
 802924a:	e69d      	b.n	8028f88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802924c:	2900      	cmp	r1, #0
 802924e:	f43f af25 	beq.w	802909c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8029252:	eb0a 0003 	add.w	r0, sl, r3
 8029256:	0843      	lsrs	r3, r0, #1
 8029258:	07c0      	lsls	r0, r0, #31
 802925a:	5cfb      	ldrb	r3, [r7, r3]
 802925c:	bf54      	ite	pl
 802925e:	f003 030f 	andpl.w	r3, r3, #15
 8029262:	111b      	asrmi	r3, r3, #4
 8029264:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029268:	b2db      	uxtb	r3, r3
 802926a:	930a      	str	r3, [sp, #40]	; 0x28
 802926c:	e716      	b.n	802909c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802926e:	00d2      	lsls	r2, r2, #3
 8029270:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8029274:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8029278:	f8a8 1000 	strh.w	r1, [r8]
 802927c:	e772      	b.n	8029164 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802927e:	f113 0b01 	adds.w	fp, r3, #1
 8029282:	f53f af6f 	bmi.w	8029164 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8029286:	45dc      	cmp	ip, fp
 8029288:	f6ff af6c 	blt.w	8029164 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802928c:	f110 0b01 	adds.w	fp, r0, #1
 8029290:	f53f af68 	bmi.w	8029164 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8029294:	45de      	cmp	lr, fp
 8029296:	f6ff af65 	blt.w	8029164 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802929a:	9302      	str	r3, [sp, #8]
 802929c:	fa0f f38e 	sxth.w	r3, lr
 80292a0:	9a08      	ldr	r2, [sp, #32]
 80292a2:	9301      	str	r3, [sp, #4]
 80292a4:	fa0f f38c 	sxth.w	r3, ip
 80292a8:	9105      	str	r1, [sp, #20]
 80292aa:	4641      	mov	r1, r8
 80292ac:	9300      	str	r3, [sp, #0]
 80292ae:	4653      	mov	r3, sl
 80292b0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80292b4:	463a      	mov	r2, r7
 80292b6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80292b8:	f7ff fd56 	bl	8028d68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80292bc:	e752      	b.n	8029164 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80292be:	bf00      	nop
 80292c0:	2000594c 	.word	0x2000594c
 80292c4:	1422      	asrs	r2, r4, #16
 80292c6:	9906      	ldr	r1, [sp, #24]
 80292c8:	1433      	asrs	r3, r6, #16
 80292ca:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80292ce:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80292d2:	fb01 2303 	mla	r3, r1, r3, r2
 80292d6:	085a      	lsrs	r2, r3, #1
 80292d8:	07d9      	lsls	r1, r3, #31
 80292da:	5cba      	ldrb	r2, [r7, r2]
 80292dc:	bf54      	ite	pl
 80292de:	f002 020f 	andpl.w	r2, r2, #15
 80292e2:	1112      	asrmi	r2, r2, #4
 80292e4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80292e8:	b2d2      	uxtb	r2, r2
 80292ea:	2800      	cmp	r0, #0
 80292ec:	f000 809c 	beq.w	8029428 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 80292f0:	f103 0e01 	add.w	lr, r3, #1
 80292f4:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80292f8:	f01e 0f01 	tst.w	lr, #1
 80292fc:	5c79      	ldrb	r1, [r7, r1]
 80292fe:	bf0c      	ite	eq
 8029300:	f001 010f 	andeq.w	r1, r1, #15
 8029304:	1109      	asrne	r1, r1, #4
 8029306:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802930a:	b2c9      	uxtb	r1, r1
 802930c:	910f      	str	r1, [sp, #60]	; 0x3c
 802930e:	f1bc 0f00 	cmp.w	ip, #0
 8029312:	d01a      	beq.n	802934a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 8029314:	9908      	ldr	r1, [sp, #32]
 8029316:	440b      	add	r3, r1
 8029318:	0859      	lsrs	r1, r3, #1
 802931a:	f013 0f01 	tst.w	r3, #1
 802931e:	f103 0301 	add.w	r3, r3, #1
 8029322:	5c79      	ldrb	r1, [r7, r1]
 8029324:	bf0c      	ite	eq
 8029326:	f001 010f 	andeq.w	r1, r1, #15
 802932a:	1109      	asrne	r1, r1, #4
 802932c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029330:	b2c9      	uxtb	r1, r1
 8029332:	910b      	str	r1, [sp, #44]	; 0x2c
 8029334:	0859      	lsrs	r1, r3, #1
 8029336:	07db      	lsls	r3, r3, #31
 8029338:	5c79      	ldrb	r1, [r7, r1]
 802933a:	bf54      	ite	pl
 802933c:	f001 010f 	andpl.w	r1, r1, #15
 8029340:	1109      	asrmi	r1, r1, #4
 8029342:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029346:	b2c9      	uxtb	r1, r1
 8029348:	9110      	str	r1, [sp, #64]	; 0x40
 802934a:	b280      	uxth	r0, r0
 802934c:	fa1f fc8c 	uxth.w	ip, ip
 8029350:	fb00 f30c 	mul.w	r3, r0, ip
 8029354:	0100      	lsls	r0, r0, #4
 8029356:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802935a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802935e:	1ac0      	subs	r0, r0, r3
 8029360:	fa1f fc8c 	uxth.w	ip, ip
 8029364:	b280      	uxth	r0, r0
 8029366:	eba1 010c 	sub.w	r1, r1, ip
 802936a:	fa1f fe81 	uxth.w	lr, r1
 802936e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029370:	4348      	muls	r0, r1
 8029372:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029374:	fb02 020e 	mla	r2, r2, lr, r0
 8029378:	fb0c 2c01 	mla	ip, ip, r1, r2
 802937c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802937e:	fb03 c302 	mla	r3, r3, r2, ip
 8029382:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029386:	2b00      	cmp	r3, #0
 8029388:	d045      	beq.n	8029416 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802938a:	4a36      	ldr	r2, [pc, #216]	; (8029464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
 802938c:	2bff      	cmp	r3, #255	; 0xff
 802938e:	6811      	ldr	r1, [r2, #0]
 8029390:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8029394:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 8029398:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 802939c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80293a0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80293a4:	b2c9      	uxtb	r1, r1
 80293a6:	d050      	beq.n	802944a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 80293a8:	f8b8 c000 	ldrh.w	ip, [r8]
 80293ac:	fa1f fb83 	uxth.w	fp, r3
 80293b0:	43db      	mvns	r3, r3
 80293b2:	fb1e fe0b 	smulbb	lr, lr, fp
 80293b6:	ea4f 202c 	mov.w	r0, ip, asr #8
 80293ba:	fb12 f20b 	smulbb	r2, r2, fp
 80293be:	b2db      	uxtb	r3, r3
 80293c0:	fb11 f10b 	smulbb	r1, r1, fp
 80293c4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80293c8:	fb00 e003 	mla	r0, r0, r3, lr
 80293cc:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80293d0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80293d4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80293d8:	b280      	uxth	r0, r0
 80293da:	fa5f fc8c 	uxtb.w	ip, ip
 80293de:	fb0e 2203 	mla	r2, lr, r3, r2
 80293e2:	fb0c 1103 	mla	r1, ip, r3, r1
 80293e6:	b292      	uxth	r2, r2
 80293e8:	b289      	uxth	r1, r1
 80293ea:	f102 0e01 	add.w	lr, r2, #1
 80293ee:	1c4b      	adds	r3, r1, #1
 80293f0:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80293f4:	f100 0e01 	add.w	lr, r0, #1
 80293f8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80293fc:	0952      	lsrs	r2, r2, #5
 80293fe:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8029402:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029406:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802940a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802940e:	4302      	orrs	r2, r0
 8029410:	430a      	orrs	r2, r1
 8029412:	f8a8 2000 	strh.w	r2, [r8]
 8029416:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029418:	f108 0802 	add.w	r8, r8, #2
 802941c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029420:	441c      	add	r4, r3
 8029422:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029424:	441e      	add	r6, r3
 8029426:	e6ca      	b.n	80291be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8029428:	f1bc 0f00 	cmp.w	ip, #0
 802942c:	d08d      	beq.n	802934a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 802942e:	9908      	ldr	r1, [sp, #32]
 8029430:	440b      	add	r3, r1
 8029432:	0859      	lsrs	r1, r3, #1
 8029434:	07db      	lsls	r3, r3, #31
 8029436:	5c79      	ldrb	r1, [r7, r1]
 8029438:	bf54      	ite	pl
 802943a:	f001 010f 	andpl.w	r1, r1, #15
 802943e:	1109      	asrmi	r1, r1, #4
 8029440:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029444:	b2c9      	uxtb	r1, r1
 8029446:	910b      	str	r1, [sp, #44]	; 0x2c
 8029448:	e77f      	b.n	802934a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 802944a:	00d2      	lsls	r2, r2, #3
 802944c:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8029450:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8029454:	f8a8 1000 	strh.w	r1, [r8]
 8029458:	e7dd      	b.n	8029416 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802945a:	b013      	add	sp, #76	; 0x4c
 802945c:	ecbd 8b08 	vpop	{d8-d11}
 8029460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029464:	2000594c 	.word	0x2000594c

08029468 <CRC_Lock>:
 8029468:	4a1d      	ldr	r2, [pc, #116]	; (80294e0 <CRC_Lock+0x78>)
 802946a:	b530      	push	{r4, r5, lr}
 802946c:	6813      	ldr	r3, [r2, #0]
 802946e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8029472:	f24c 2540 	movw	r5, #49728	; 0xc240
 8029476:	f023 0301 	bic.w	r3, r3, #1
 802947a:	6013      	str	r3, [r2, #0]
 802947c:	4b19      	ldr	r3, [pc, #100]	; (80294e4 <CRC_Lock+0x7c>)
 802947e:	681a      	ldr	r2, [r3, #0]
 8029480:	4022      	ands	r2, r4
 8029482:	42aa      	cmp	r2, r5
 8029484:	d005      	beq.n	8029492 <CRC_Lock+0x2a>
 8029486:	681b      	ldr	r3, [r3, #0]
 8029488:	f24c 2270 	movw	r2, #49776	; 0xc270
 802948c:	4023      	ands	r3, r4
 802948e:	4293      	cmp	r3, r2
 8029490:	d11d      	bne.n	80294ce <CRC_Lock+0x66>
 8029492:	4b15      	ldr	r3, [pc, #84]	; (80294e8 <CRC_Lock+0x80>)
 8029494:	681b      	ldr	r3, [r3, #0]
 8029496:	b9d3      	cbnz	r3, 80294ce <CRC_Lock+0x66>
 8029498:	4a14      	ldr	r2, [pc, #80]	; (80294ec <CRC_Lock+0x84>)
 802949a:	6813      	ldr	r3, [r2, #0]
 802949c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80294a0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80294a4:	d006      	beq.n	80294b4 <CRC_Lock+0x4c>
 80294a6:	6813      	ldr	r3, [r2, #0]
 80294a8:	f240 4283 	movw	r2, #1155	; 0x483
 80294ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80294b0:	4293      	cmp	r3, r2
 80294b2:	d10c      	bne.n	80294ce <CRC_Lock+0x66>
 80294b4:	4b0e      	ldr	r3, [pc, #56]	; (80294f0 <CRC_Lock+0x88>)
 80294b6:	2201      	movs	r2, #1
 80294b8:	601a      	str	r2, [r3, #0]
 80294ba:	681a      	ldr	r2, [r3, #0]
 80294bc:	2a00      	cmp	r2, #0
 80294be:	d1fc      	bne.n	80294ba <CRC_Lock+0x52>
 80294c0:	4b0c      	ldr	r3, [pc, #48]	; (80294f4 <CRC_Lock+0x8c>)
 80294c2:	6018      	str	r0, [r3, #0]
 80294c4:	6818      	ldr	r0, [r3, #0]
 80294c6:	1a43      	subs	r3, r0, r1
 80294c8:	4258      	negs	r0, r3
 80294ca:	4158      	adcs	r0, r3
 80294cc:	bd30      	pop	{r4, r5, pc}
 80294ce:	4b0a      	ldr	r3, [pc, #40]	; (80294f8 <CRC_Lock+0x90>)
 80294d0:	2201      	movs	r2, #1
 80294d2:	601a      	str	r2, [r3, #0]
 80294d4:	681a      	ldr	r2, [r3, #0]
 80294d6:	2a00      	cmp	r2, #0
 80294d8:	d1fc      	bne.n	80294d4 <CRC_Lock+0x6c>
 80294da:	4b08      	ldr	r3, [pc, #32]	; (80294fc <CRC_Lock+0x94>)
 80294dc:	e7f1      	b.n	80294c2 <CRC_Lock+0x5a>
 80294de:	bf00      	nop
 80294e0:	e0002000 	.word	0xe0002000
 80294e4:	e000ed00 	.word	0xe000ed00
 80294e8:	e0042000 	.word	0xe0042000
 80294ec:	5c001000 	.word	0x5c001000
 80294f0:	58024c08 	.word	0x58024c08
 80294f4:	58024c00 	.word	0x58024c00
 80294f8:	40023008 	.word	0x40023008
 80294fc:	40023000 	.word	0x40023000

08029500 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029500:	6101      	str	r1, [r0, #16]
 8029502:	4770      	bx	lr

08029504 <_ZN8touchgfx8Gestures4tickEv>:
 8029504:	7b83      	ldrb	r3, [r0, #14]
 8029506:	b14b      	cbz	r3, 802951c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029508:	8903      	ldrh	r3, [r0, #8]
 802950a:	3301      	adds	r3, #1
 802950c:	b29b      	uxth	r3, r3
 802950e:	2b07      	cmp	r3, #7
 8029510:	8103      	strh	r3, [r0, #8]
 8029512:	bf81      	itttt	hi
 8029514:	2300      	movhi	r3, #0
 8029516:	8143      	strhhi	r3, [r0, #10]
 8029518:	8183      	strhhi	r3, [r0, #12]
 802951a:	7383      	strbhi	r3, [r0, #14]
 802951c:	4770      	bx	lr
	...

08029520 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029520:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029524:	4604      	mov	r4, r0
 8029526:	4698      	mov	r8, r3
 8029528:	8880      	ldrh	r0, [r0, #4]
 802952a:	4617      	mov	r7, r2
 802952c:	4b1d      	ldr	r3, [pc, #116]	; (80295a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802952e:	460e      	mov	r6, r1
 8029530:	f8ad 0006 	strh.w	r0, [sp, #6]
 8029534:	eba8 0000 	sub.w	r0, r8, r0
 8029538:	9300      	str	r3, [sp, #0]
 802953a:	2300      	movs	r3, #0
 802953c:	b280      	uxth	r0, r0
 802953e:	8aa2      	ldrh	r2, [r4, #20]
 8029540:	f88d 3004 	strb.w	r3, [sp, #4]
 8029544:	b203      	sxth	r3, r0
 8029546:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802954a:	88e1      	ldrh	r1, [r4, #6]
 802954c:	2b00      	cmp	r3, #0
 802954e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029552:	f8ad 1008 	strh.w	r1, [sp, #8]
 8029556:	bfb8      	it	lt
 8029558:	4240      	neglt	r0, r0
 802955a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802955e:	bfb8      	it	lt
 8029560:	b203      	sxthlt	r3, r0
 8029562:	4293      	cmp	r3, r2
 8029564:	dc08      	bgt.n	8029578 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8029566:	1a69      	subs	r1, r5, r1
 8029568:	b289      	uxth	r1, r1
 802956a:	b20b      	sxth	r3, r1
 802956c:	2b00      	cmp	r3, #0
 802956e:	bfbc      	itt	lt
 8029570:	4249      	neglt	r1, r1
 8029572:	b20b      	sxthlt	r3, r1
 8029574:	429a      	cmp	r2, r3
 8029576:	da13      	bge.n	80295a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8029578:	6920      	ldr	r0, [r4, #16]
 802957a:	4669      	mov	r1, sp
 802957c:	eba8 0606 	sub.w	r6, r8, r6
 8029580:	1bef      	subs	r7, r5, r7
 8029582:	6803      	ldr	r3, [r0, #0]
 8029584:	685b      	ldr	r3, [r3, #4]
 8029586:	4798      	blx	r3
 8029588:	2300      	movs	r3, #0
 802958a:	2001      	movs	r0, #1
 802958c:	8166      	strh	r6, [r4, #10]
 802958e:	8123      	strh	r3, [r4, #8]
 8029590:	81a7      	strh	r7, [r4, #12]
 8029592:	f8a4 8004 	strh.w	r8, [r4, #4]
 8029596:	80e5      	strh	r5, [r4, #6]
 8029598:	73a0      	strb	r0, [r4, #14]
 802959a:	b004      	add	sp, #16
 802959c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80295a0:	2000      	movs	r0, #0
 80295a2:	e7fa      	b.n	802959a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80295a4:	0802d660 	.word	0x0802d660

080295a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80295a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80295aa:	461e      	mov	r6, r3
 80295ac:	1e4b      	subs	r3, r1, #1
 80295ae:	b085      	sub	sp, #20
 80295b0:	4604      	mov	r4, r0
 80295b2:	2b01      	cmp	r3, #1
 80295b4:	460d      	mov	r5, r1
 80295b6:	4617      	mov	r7, r2
 80295b8:	d84b      	bhi.n	8029652 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80295ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80295be:	1cd3      	adds	r3, r2, #3
 80295c0:	b29b      	uxth	r3, r3
 80295c2:	2b06      	cmp	r3, #6
 80295c4:	d916      	bls.n	80295f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80295c6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8029668 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80295ca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80295ce:	f8cd c004 	str.w	ip, [sp, #4]
 80295d2:	f04f 0c00 	mov.w	ip, #0
 80295d6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80295da:	6900      	ldr	r0, [r0, #16]
 80295dc:	f8ad 100c 	strh.w	r1, [sp, #12]
 80295e0:	a901      	add	r1, sp, #4
 80295e2:	f88d c008 	strb.w	ip, [sp, #8]
 80295e6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80295ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80295ee:	6803      	ldr	r3, [r0, #0]
 80295f0:	689b      	ldr	r3, [r3, #8]
 80295f2:	4798      	blx	r3
 80295f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80295f8:	1cd3      	adds	r3, r2, #3
 80295fa:	b29b      	uxth	r3, r3
 80295fc:	2b06      	cmp	r3, #6
 80295fe:	d916      	bls.n	802962e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029600:	f8df c064 	ldr.w	ip, [pc, #100]	; 8029668 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029604:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029608:	f8cd c004 	str.w	ip, [sp, #4]
 802960c:	f04f 0c01 	mov.w	ip, #1
 8029610:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029614:	6920      	ldr	r0, [r4, #16]
 8029616:	f8ad 100c 	strh.w	r1, [sp, #12]
 802961a:	a901      	add	r1, sp, #4
 802961c:	f88d c008 	strb.w	ip, [sp, #8]
 8029620:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029624:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029628:	6803      	ldr	r3, [r0, #0]
 802962a:	689b      	ldr	r3, [r3, #8]
 802962c:	4798      	blx	r3
 802962e:	4b0d      	ldr	r3, [pc, #52]	; (8029664 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029630:	a901      	add	r1, sp, #4
 8029632:	6920      	ldr	r0, [r4, #16]
 8029634:	9301      	str	r3, [sp, #4]
 8029636:	2300      	movs	r3, #0
 8029638:	f88d 5008 	strb.w	r5, [sp, #8]
 802963c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029640:	f8ad 600c 	strh.w	r6, [sp, #12]
 8029644:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029648:	6803      	ldr	r3, [r0, #0]
 802964a:	681b      	ldr	r3, [r3, #0]
 802964c:	4798      	blx	r3
 802964e:	b005      	add	sp, #20
 8029650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029652:	2900      	cmp	r1, #0
 8029654:	d1eb      	bne.n	802962e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029656:	80a2      	strh	r2, [r4, #4]
 8029658:	80c6      	strh	r6, [r0, #6]
 802965a:	60a1      	str	r1, [r4, #8]
 802965c:	81a1      	strh	r1, [r4, #12]
 802965e:	73a1      	strb	r1, [r4, #14]
 8029660:	e7e5      	b.n	802962e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029662:	bf00      	nop
 8029664:	0802d64c 	.word	0x0802d64c
 8029668:	0802d674 	.word	0x0802d674

0802966c <__aeabi_atexit>:
 802966c:	460b      	mov	r3, r1
 802966e:	4601      	mov	r1, r0
 8029670:	4618      	mov	r0, r3
 8029672:	f000 b853 	b.w	802971c <__cxa_atexit>

08029676 <_ZdlPvj>:
 8029676:	f000 b812 	b.w	802969e <_ZdlPv>

0802967a <__cxa_guard_acquire>:
 802967a:	6803      	ldr	r3, [r0, #0]
 802967c:	07db      	lsls	r3, r3, #31
 802967e:	d406      	bmi.n	802968e <__cxa_guard_acquire+0x14>
 8029680:	7843      	ldrb	r3, [r0, #1]
 8029682:	b103      	cbz	r3, 8029686 <__cxa_guard_acquire+0xc>
 8029684:	deff      	udf	#255	; 0xff
 8029686:	2301      	movs	r3, #1
 8029688:	7043      	strb	r3, [r0, #1]
 802968a:	4618      	mov	r0, r3
 802968c:	4770      	bx	lr
 802968e:	2000      	movs	r0, #0
 8029690:	4770      	bx	lr

08029692 <__cxa_guard_release>:
 8029692:	2301      	movs	r3, #1
 8029694:	6003      	str	r3, [r0, #0]
 8029696:	4770      	bx	lr

08029698 <__cxa_pure_virtual>:
 8029698:	b508      	push	{r3, lr}
 802969a:	f000 f80f 	bl	80296bc <_ZSt9terminatev>

0802969e <_ZdlPv>:
 802969e:	f000 b989 	b.w	80299b4 <free>

080296a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80296a2:	b508      	push	{r3, lr}
 80296a4:	4780      	blx	r0
 80296a6:	f000 f80e 	bl	80296c6 <abort>
	...

080296ac <_ZSt13get_terminatev>:
 80296ac:	4b02      	ldr	r3, [pc, #8]	; (80296b8 <_ZSt13get_terminatev+0xc>)
 80296ae:	6818      	ldr	r0, [r3, #0]
 80296b0:	f3bf 8f5b 	dmb	ish
 80296b4:	4770      	bx	lr
 80296b6:	bf00      	nop
 80296b8:	200001bc 	.word	0x200001bc

080296bc <_ZSt9terminatev>:
 80296bc:	b508      	push	{r3, lr}
 80296be:	f7ff fff5 	bl	80296ac <_ZSt13get_terminatev>
 80296c2:	f7ff ffee 	bl	80296a2 <_ZN10__cxxabiv111__terminateEPFvvE>

080296c6 <abort>:
 80296c6:	b508      	push	{r3, lr}
 80296c8:	2006      	movs	r0, #6
 80296ca:	f000 fe01 	bl	802a2d0 <raise>
 80296ce:	2001      	movs	r0, #1
 80296d0:	f7da fa96 	bl	8003c00 <_exit>

080296d4 <__assert_func>:
 80296d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80296d6:	4614      	mov	r4, r2
 80296d8:	461a      	mov	r2, r3
 80296da:	4b09      	ldr	r3, [pc, #36]	; (8029700 <__assert_func+0x2c>)
 80296dc:	681b      	ldr	r3, [r3, #0]
 80296de:	4605      	mov	r5, r0
 80296e0:	68d8      	ldr	r0, [r3, #12]
 80296e2:	b14c      	cbz	r4, 80296f8 <__assert_func+0x24>
 80296e4:	4b07      	ldr	r3, [pc, #28]	; (8029704 <__assert_func+0x30>)
 80296e6:	9100      	str	r1, [sp, #0]
 80296e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80296ec:	4906      	ldr	r1, [pc, #24]	; (8029708 <__assert_func+0x34>)
 80296ee:	462b      	mov	r3, r5
 80296f0:	f000 f8fe 	bl	80298f0 <fiprintf>
 80296f4:	f7ff ffe7 	bl	80296c6 <abort>
 80296f8:	4b04      	ldr	r3, [pc, #16]	; (802970c <__assert_func+0x38>)
 80296fa:	461c      	mov	r4, r3
 80296fc:	e7f3      	b.n	80296e6 <__assert_func+0x12>
 80296fe:	bf00      	nop
 8029700:	200001c0 	.word	0x200001c0
 8029704:	0802ea3f 	.word	0x0802ea3f
 8029708:	0802ea4c 	.word	0x0802ea4c
 802970c:	0802ea7a 	.word	0x0802ea7a

08029710 <atexit>:
 8029710:	2300      	movs	r3, #0
 8029712:	4601      	mov	r1, r0
 8029714:	461a      	mov	r2, r3
 8029716:	4618      	mov	r0, r3
 8029718:	f000 bf0c 	b.w	802a534 <__register_exitproc>

0802971c <__cxa_atexit>:
 802971c:	b510      	push	{r4, lr}
 802971e:	4c05      	ldr	r4, [pc, #20]	; (8029734 <__cxa_atexit+0x18>)
 8029720:	4613      	mov	r3, r2
 8029722:	b12c      	cbz	r4, 8029730 <__cxa_atexit+0x14>
 8029724:	460a      	mov	r2, r1
 8029726:	4601      	mov	r1, r0
 8029728:	2002      	movs	r0, #2
 802972a:	f000 ff03 	bl	802a534 <__register_exitproc>
 802972e:	bd10      	pop	{r4, pc}
 8029730:	4620      	mov	r0, r4
 8029732:	e7fc      	b.n	802972e <__cxa_atexit+0x12>
 8029734:	0802a535 	.word	0x0802a535

08029738 <__errno>:
 8029738:	4b01      	ldr	r3, [pc, #4]	; (8029740 <__errno+0x8>)
 802973a:	6818      	ldr	r0, [r3, #0]
 802973c:	4770      	bx	lr
 802973e:	bf00      	nop
 8029740:	200001c0 	.word	0x200001c0

08029744 <std>:
 8029744:	2300      	movs	r3, #0
 8029746:	b510      	push	{r4, lr}
 8029748:	4604      	mov	r4, r0
 802974a:	e9c0 3300 	strd	r3, r3, [r0]
 802974e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8029752:	6083      	str	r3, [r0, #8]
 8029754:	8181      	strh	r1, [r0, #12]
 8029756:	6643      	str	r3, [r0, #100]	; 0x64
 8029758:	81c2      	strh	r2, [r0, #14]
 802975a:	6183      	str	r3, [r0, #24]
 802975c:	4619      	mov	r1, r3
 802975e:	2208      	movs	r2, #8
 8029760:	305c      	adds	r0, #92	; 0x5c
 8029762:	f000 f93d 	bl	80299e0 <memset>
 8029766:	4b05      	ldr	r3, [pc, #20]	; (802977c <std+0x38>)
 8029768:	6263      	str	r3, [r4, #36]	; 0x24
 802976a:	4b05      	ldr	r3, [pc, #20]	; (8029780 <std+0x3c>)
 802976c:	62a3      	str	r3, [r4, #40]	; 0x28
 802976e:	4b05      	ldr	r3, [pc, #20]	; (8029784 <std+0x40>)
 8029770:	62e3      	str	r3, [r4, #44]	; 0x2c
 8029772:	4b05      	ldr	r3, [pc, #20]	; (8029788 <std+0x44>)
 8029774:	6224      	str	r4, [r4, #32]
 8029776:	6323      	str	r3, [r4, #48]	; 0x30
 8029778:	bd10      	pop	{r4, pc}
 802977a:	bf00      	nop
 802977c:	0802a309 	.word	0x0802a309
 8029780:	0802a32b 	.word	0x0802a32b
 8029784:	0802a363 	.word	0x0802a363
 8029788:	0802a387 	.word	0x0802a387

0802978c <_cleanup_r>:
 802978c:	4901      	ldr	r1, [pc, #4]	; (8029794 <_cleanup_r+0x8>)
 802978e:	f000 b8c1 	b.w	8029914 <_fwalk_reent>
 8029792:	bf00      	nop
 8029794:	0802a725 	.word	0x0802a725

08029798 <__sfmoreglue>:
 8029798:	b570      	push	{r4, r5, r6, lr}
 802979a:	2268      	movs	r2, #104	; 0x68
 802979c:	1e4d      	subs	r5, r1, #1
 802979e:	4355      	muls	r5, r2
 80297a0:	460e      	mov	r6, r1
 80297a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80297a6:	f000 f98f 	bl	8029ac8 <_malloc_r>
 80297aa:	4604      	mov	r4, r0
 80297ac:	b140      	cbz	r0, 80297c0 <__sfmoreglue+0x28>
 80297ae:	2100      	movs	r1, #0
 80297b0:	e9c0 1600 	strd	r1, r6, [r0]
 80297b4:	300c      	adds	r0, #12
 80297b6:	60a0      	str	r0, [r4, #8]
 80297b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80297bc:	f000 f910 	bl	80299e0 <memset>
 80297c0:	4620      	mov	r0, r4
 80297c2:	bd70      	pop	{r4, r5, r6, pc}

080297c4 <__sfp_lock_acquire>:
 80297c4:	4801      	ldr	r0, [pc, #4]	; (80297cc <__sfp_lock_acquire+0x8>)
 80297c6:	f000 b8ea 	b.w	802999e <__retarget_lock_acquire_recursive>
 80297ca:	bf00      	nop
 80297cc:	20005a42 	.word	0x20005a42

080297d0 <__sfp_lock_release>:
 80297d0:	4801      	ldr	r0, [pc, #4]	; (80297d8 <__sfp_lock_release+0x8>)
 80297d2:	f000 b8e6 	b.w	80299a2 <__retarget_lock_release_recursive>
 80297d6:	bf00      	nop
 80297d8:	20005a42 	.word	0x20005a42

080297dc <__sinit_lock_acquire>:
 80297dc:	4801      	ldr	r0, [pc, #4]	; (80297e4 <__sinit_lock_acquire+0x8>)
 80297de:	f000 b8de 	b.w	802999e <__retarget_lock_acquire_recursive>
 80297e2:	bf00      	nop
 80297e4:	20005a43 	.word	0x20005a43

080297e8 <__sinit_lock_release>:
 80297e8:	4801      	ldr	r0, [pc, #4]	; (80297f0 <__sinit_lock_release+0x8>)
 80297ea:	f000 b8da 	b.w	80299a2 <__retarget_lock_release_recursive>
 80297ee:	bf00      	nop
 80297f0:	20005a43 	.word	0x20005a43

080297f4 <__sinit>:
 80297f4:	b510      	push	{r4, lr}
 80297f6:	4604      	mov	r4, r0
 80297f8:	f7ff fff0 	bl	80297dc <__sinit_lock_acquire>
 80297fc:	69a3      	ldr	r3, [r4, #24]
 80297fe:	b11b      	cbz	r3, 8029808 <__sinit+0x14>
 8029800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029804:	f7ff bff0 	b.w	80297e8 <__sinit_lock_release>
 8029808:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802980c:	6523      	str	r3, [r4, #80]	; 0x50
 802980e:	4b13      	ldr	r3, [pc, #76]	; (802985c <__sinit+0x68>)
 8029810:	4a13      	ldr	r2, [pc, #76]	; (8029860 <__sinit+0x6c>)
 8029812:	681b      	ldr	r3, [r3, #0]
 8029814:	62a2      	str	r2, [r4, #40]	; 0x28
 8029816:	42a3      	cmp	r3, r4
 8029818:	bf04      	itt	eq
 802981a:	2301      	moveq	r3, #1
 802981c:	61a3      	streq	r3, [r4, #24]
 802981e:	4620      	mov	r0, r4
 8029820:	f000 f820 	bl	8029864 <__sfp>
 8029824:	6060      	str	r0, [r4, #4]
 8029826:	4620      	mov	r0, r4
 8029828:	f000 f81c 	bl	8029864 <__sfp>
 802982c:	60a0      	str	r0, [r4, #8]
 802982e:	4620      	mov	r0, r4
 8029830:	f000 f818 	bl	8029864 <__sfp>
 8029834:	2200      	movs	r2, #0
 8029836:	60e0      	str	r0, [r4, #12]
 8029838:	2104      	movs	r1, #4
 802983a:	6860      	ldr	r0, [r4, #4]
 802983c:	f7ff ff82 	bl	8029744 <std>
 8029840:	68a0      	ldr	r0, [r4, #8]
 8029842:	2201      	movs	r2, #1
 8029844:	2109      	movs	r1, #9
 8029846:	f7ff ff7d 	bl	8029744 <std>
 802984a:	68e0      	ldr	r0, [r4, #12]
 802984c:	2202      	movs	r2, #2
 802984e:	2112      	movs	r1, #18
 8029850:	f7ff ff78 	bl	8029744 <std>
 8029854:	2301      	movs	r3, #1
 8029856:	61a3      	str	r3, [r4, #24]
 8029858:	e7d2      	b.n	8029800 <__sinit+0xc>
 802985a:	bf00      	nop
 802985c:	0802eadc 	.word	0x0802eadc
 8029860:	0802978d 	.word	0x0802978d

08029864 <__sfp>:
 8029864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029866:	4607      	mov	r7, r0
 8029868:	f7ff ffac 	bl	80297c4 <__sfp_lock_acquire>
 802986c:	4b1e      	ldr	r3, [pc, #120]	; (80298e8 <__sfp+0x84>)
 802986e:	681e      	ldr	r6, [r3, #0]
 8029870:	69b3      	ldr	r3, [r6, #24]
 8029872:	b913      	cbnz	r3, 802987a <__sfp+0x16>
 8029874:	4630      	mov	r0, r6
 8029876:	f7ff ffbd 	bl	80297f4 <__sinit>
 802987a:	3648      	adds	r6, #72	; 0x48
 802987c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8029880:	3b01      	subs	r3, #1
 8029882:	d503      	bpl.n	802988c <__sfp+0x28>
 8029884:	6833      	ldr	r3, [r6, #0]
 8029886:	b30b      	cbz	r3, 80298cc <__sfp+0x68>
 8029888:	6836      	ldr	r6, [r6, #0]
 802988a:	e7f7      	b.n	802987c <__sfp+0x18>
 802988c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8029890:	b9d5      	cbnz	r5, 80298c8 <__sfp+0x64>
 8029892:	4b16      	ldr	r3, [pc, #88]	; (80298ec <__sfp+0x88>)
 8029894:	60e3      	str	r3, [r4, #12]
 8029896:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802989a:	6665      	str	r5, [r4, #100]	; 0x64
 802989c:	f000 f87e 	bl	802999c <__retarget_lock_init_recursive>
 80298a0:	f7ff ff96 	bl	80297d0 <__sfp_lock_release>
 80298a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80298a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80298ac:	6025      	str	r5, [r4, #0]
 80298ae:	61a5      	str	r5, [r4, #24]
 80298b0:	2208      	movs	r2, #8
 80298b2:	4629      	mov	r1, r5
 80298b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80298b8:	f000 f892 	bl	80299e0 <memset>
 80298bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80298c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80298c4:	4620      	mov	r0, r4
 80298c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80298c8:	3468      	adds	r4, #104	; 0x68
 80298ca:	e7d9      	b.n	8029880 <__sfp+0x1c>
 80298cc:	2104      	movs	r1, #4
 80298ce:	4638      	mov	r0, r7
 80298d0:	f7ff ff62 	bl	8029798 <__sfmoreglue>
 80298d4:	4604      	mov	r4, r0
 80298d6:	6030      	str	r0, [r6, #0]
 80298d8:	2800      	cmp	r0, #0
 80298da:	d1d5      	bne.n	8029888 <__sfp+0x24>
 80298dc:	f7ff ff78 	bl	80297d0 <__sfp_lock_release>
 80298e0:	230c      	movs	r3, #12
 80298e2:	603b      	str	r3, [r7, #0]
 80298e4:	e7ee      	b.n	80298c4 <__sfp+0x60>
 80298e6:	bf00      	nop
 80298e8:	0802eadc 	.word	0x0802eadc
 80298ec:	ffff0001 	.word	0xffff0001

080298f0 <fiprintf>:
 80298f0:	b40e      	push	{r1, r2, r3}
 80298f2:	b503      	push	{r0, r1, lr}
 80298f4:	4601      	mov	r1, r0
 80298f6:	ab03      	add	r3, sp, #12
 80298f8:	4805      	ldr	r0, [pc, #20]	; (8029910 <fiprintf+0x20>)
 80298fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80298fe:	6800      	ldr	r0, [r0, #0]
 8029900:	9301      	str	r3, [sp, #4]
 8029902:	f000 f97f 	bl	8029c04 <_vfiprintf_r>
 8029906:	b002      	add	sp, #8
 8029908:	f85d eb04 	ldr.w	lr, [sp], #4
 802990c:	b003      	add	sp, #12
 802990e:	4770      	bx	lr
 8029910:	200001c0 	.word	0x200001c0

08029914 <_fwalk_reent>:
 8029914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029918:	4606      	mov	r6, r0
 802991a:	4688      	mov	r8, r1
 802991c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029920:	2700      	movs	r7, #0
 8029922:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029926:	f1b9 0901 	subs.w	r9, r9, #1
 802992a:	d505      	bpl.n	8029938 <_fwalk_reent+0x24>
 802992c:	6824      	ldr	r4, [r4, #0]
 802992e:	2c00      	cmp	r4, #0
 8029930:	d1f7      	bne.n	8029922 <_fwalk_reent+0xe>
 8029932:	4638      	mov	r0, r7
 8029934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029938:	89ab      	ldrh	r3, [r5, #12]
 802993a:	2b01      	cmp	r3, #1
 802993c:	d907      	bls.n	802994e <_fwalk_reent+0x3a>
 802993e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029942:	3301      	adds	r3, #1
 8029944:	d003      	beq.n	802994e <_fwalk_reent+0x3a>
 8029946:	4629      	mov	r1, r5
 8029948:	4630      	mov	r0, r6
 802994a:	47c0      	blx	r8
 802994c:	4307      	orrs	r7, r0
 802994e:	3568      	adds	r5, #104	; 0x68
 8029950:	e7e9      	b.n	8029926 <_fwalk_reent+0x12>
	...

08029954 <__libc_init_array>:
 8029954:	b570      	push	{r4, r5, r6, lr}
 8029956:	4d0d      	ldr	r5, [pc, #52]	; (802998c <__libc_init_array+0x38>)
 8029958:	4c0d      	ldr	r4, [pc, #52]	; (8029990 <__libc_init_array+0x3c>)
 802995a:	1b64      	subs	r4, r4, r5
 802995c:	10a4      	asrs	r4, r4, #2
 802995e:	2600      	movs	r6, #0
 8029960:	42a6      	cmp	r6, r4
 8029962:	d109      	bne.n	8029978 <__libc_init_array+0x24>
 8029964:	4d0b      	ldr	r5, [pc, #44]	; (8029994 <__libc_init_array+0x40>)
 8029966:	4c0c      	ldr	r4, [pc, #48]	; (8029998 <__libc_init_array+0x44>)
 8029968:	f000 ffd0 	bl	802a90c <_init>
 802996c:	1b64      	subs	r4, r4, r5
 802996e:	10a4      	asrs	r4, r4, #2
 8029970:	2600      	movs	r6, #0
 8029972:	42a6      	cmp	r6, r4
 8029974:	d105      	bne.n	8029982 <__libc_init_array+0x2e>
 8029976:	bd70      	pop	{r4, r5, r6, pc}
 8029978:	f855 3b04 	ldr.w	r3, [r5], #4
 802997c:	4798      	blx	r3
 802997e:	3601      	adds	r6, #1
 8029980:	e7ee      	b.n	8029960 <__libc_init_array+0xc>
 8029982:	f855 3b04 	ldr.w	r3, [r5], #4
 8029986:	4798      	blx	r3
 8029988:	3601      	adds	r6, #1
 802998a:	e7f2      	b.n	8029972 <__libc_init_array+0x1e>
 802998c:	080479c4 	.word	0x080479c4
 8029990:	080479c4 	.word	0x080479c4
 8029994:	080479c4 	.word	0x080479c4
 8029998:	080479d8 	.word	0x080479d8

0802999c <__retarget_lock_init_recursive>:
 802999c:	4770      	bx	lr

0802999e <__retarget_lock_acquire_recursive>:
 802999e:	4770      	bx	lr

080299a0 <__retarget_lock_release>:
 80299a0:	4770      	bx	lr

080299a2 <__retarget_lock_release_recursive>:
 80299a2:	4770      	bx	lr

080299a4 <malloc>:
 80299a4:	4b02      	ldr	r3, [pc, #8]	; (80299b0 <malloc+0xc>)
 80299a6:	4601      	mov	r1, r0
 80299a8:	6818      	ldr	r0, [r3, #0]
 80299aa:	f000 b88d 	b.w	8029ac8 <_malloc_r>
 80299ae:	bf00      	nop
 80299b0:	200001c0 	.word	0x200001c0

080299b4 <free>:
 80299b4:	4b02      	ldr	r3, [pc, #8]	; (80299c0 <free+0xc>)
 80299b6:	4601      	mov	r1, r0
 80299b8:	6818      	ldr	r0, [r3, #0]
 80299ba:	f000 b819 	b.w	80299f0 <_free_r>
 80299be:	bf00      	nop
 80299c0:	200001c0 	.word	0x200001c0

080299c4 <memcpy>:
 80299c4:	440a      	add	r2, r1
 80299c6:	4291      	cmp	r1, r2
 80299c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80299cc:	d100      	bne.n	80299d0 <memcpy+0xc>
 80299ce:	4770      	bx	lr
 80299d0:	b510      	push	{r4, lr}
 80299d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80299d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80299da:	4291      	cmp	r1, r2
 80299dc:	d1f9      	bne.n	80299d2 <memcpy+0xe>
 80299de:	bd10      	pop	{r4, pc}

080299e0 <memset>:
 80299e0:	4402      	add	r2, r0
 80299e2:	4603      	mov	r3, r0
 80299e4:	4293      	cmp	r3, r2
 80299e6:	d100      	bne.n	80299ea <memset+0xa>
 80299e8:	4770      	bx	lr
 80299ea:	f803 1b01 	strb.w	r1, [r3], #1
 80299ee:	e7f9      	b.n	80299e4 <memset+0x4>

080299f0 <_free_r>:
 80299f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80299f2:	2900      	cmp	r1, #0
 80299f4:	d044      	beq.n	8029a80 <_free_r+0x90>
 80299f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80299fa:	9001      	str	r0, [sp, #4]
 80299fc:	2b00      	cmp	r3, #0
 80299fe:	f1a1 0404 	sub.w	r4, r1, #4
 8029a02:	bfb8      	it	lt
 8029a04:	18e4      	addlt	r4, r4, r3
 8029a06:	f000 ff41 	bl	802a88c <__malloc_lock>
 8029a0a:	4a1e      	ldr	r2, [pc, #120]	; (8029a84 <_free_r+0x94>)
 8029a0c:	9801      	ldr	r0, [sp, #4]
 8029a0e:	6813      	ldr	r3, [r2, #0]
 8029a10:	b933      	cbnz	r3, 8029a20 <_free_r+0x30>
 8029a12:	6063      	str	r3, [r4, #4]
 8029a14:	6014      	str	r4, [r2, #0]
 8029a16:	b003      	add	sp, #12
 8029a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029a1c:	f000 bf3c 	b.w	802a898 <__malloc_unlock>
 8029a20:	42a3      	cmp	r3, r4
 8029a22:	d908      	bls.n	8029a36 <_free_r+0x46>
 8029a24:	6825      	ldr	r5, [r4, #0]
 8029a26:	1961      	adds	r1, r4, r5
 8029a28:	428b      	cmp	r3, r1
 8029a2a:	bf01      	itttt	eq
 8029a2c:	6819      	ldreq	r1, [r3, #0]
 8029a2e:	685b      	ldreq	r3, [r3, #4]
 8029a30:	1949      	addeq	r1, r1, r5
 8029a32:	6021      	streq	r1, [r4, #0]
 8029a34:	e7ed      	b.n	8029a12 <_free_r+0x22>
 8029a36:	461a      	mov	r2, r3
 8029a38:	685b      	ldr	r3, [r3, #4]
 8029a3a:	b10b      	cbz	r3, 8029a40 <_free_r+0x50>
 8029a3c:	42a3      	cmp	r3, r4
 8029a3e:	d9fa      	bls.n	8029a36 <_free_r+0x46>
 8029a40:	6811      	ldr	r1, [r2, #0]
 8029a42:	1855      	adds	r5, r2, r1
 8029a44:	42a5      	cmp	r5, r4
 8029a46:	d10b      	bne.n	8029a60 <_free_r+0x70>
 8029a48:	6824      	ldr	r4, [r4, #0]
 8029a4a:	4421      	add	r1, r4
 8029a4c:	1854      	adds	r4, r2, r1
 8029a4e:	42a3      	cmp	r3, r4
 8029a50:	6011      	str	r1, [r2, #0]
 8029a52:	d1e0      	bne.n	8029a16 <_free_r+0x26>
 8029a54:	681c      	ldr	r4, [r3, #0]
 8029a56:	685b      	ldr	r3, [r3, #4]
 8029a58:	6053      	str	r3, [r2, #4]
 8029a5a:	4421      	add	r1, r4
 8029a5c:	6011      	str	r1, [r2, #0]
 8029a5e:	e7da      	b.n	8029a16 <_free_r+0x26>
 8029a60:	d902      	bls.n	8029a68 <_free_r+0x78>
 8029a62:	230c      	movs	r3, #12
 8029a64:	6003      	str	r3, [r0, #0]
 8029a66:	e7d6      	b.n	8029a16 <_free_r+0x26>
 8029a68:	6825      	ldr	r5, [r4, #0]
 8029a6a:	1961      	adds	r1, r4, r5
 8029a6c:	428b      	cmp	r3, r1
 8029a6e:	bf04      	itt	eq
 8029a70:	6819      	ldreq	r1, [r3, #0]
 8029a72:	685b      	ldreq	r3, [r3, #4]
 8029a74:	6063      	str	r3, [r4, #4]
 8029a76:	bf04      	itt	eq
 8029a78:	1949      	addeq	r1, r1, r5
 8029a7a:	6021      	streq	r1, [r4, #0]
 8029a7c:	6054      	str	r4, [r2, #4]
 8029a7e:	e7ca      	b.n	8029a16 <_free_r+0x26>
 8029a80:	b003      	add	sp, #12
 8029a82:	bd30      	pop	{r4, r5, pc}
 8029a84:	20005a44 	.word	0x20005a44

08029a88 <sbrk_aligned>:
 8029a88:	b570      	push	{r4, r5, r6, lr}
 8029a8a:	4e0e      	ldr	r6, [pc, #56]	; (8029ac4 <sbrk_aligned+0x3c>)
 8029a8c:	460c      	mov	r4, r1
 8029a8e:	6831      	ldr	r1, [r6, #0]
 8029a90:	4605      	mov	r5, r0
 8029a92:	b911      	cbnz	r1, 8029a9a <sbrk_aligned+0x12>
 8029a94:	f000 fbe4 	bl	802a260 <_sbrk_r>
 8029a98:	6030      	str	r0, [r6, #0]
 8029a9a:	4621      	mov	r1, r4
 8029a9c:	4628      	mov	r0, r5
 8029a9e:	f000 fbdf 	bl	802a260 <_sbrk_r>
 8029aa2:	1c43      	adds	r3, r0, #1
 8029aa4:	d00a      	beq.n	8029abc <sbrk_aligned+0x34>
 8029aa6:	1cc4      	adds	r4, r0, #3
 8029aa8:	f024 0403 	bic.w	r4, r4, #3
 8029aac:	42a0      	cmp	r0, r4
 8029aae:	d007      	beq.n	8029ac0 <sbrk_aligned+0x38>
 8029ab0:	1a21      	subs	r1, r4, r0
 8029ab2:	4628      	mov	r0, r5
 8029ab4:	f000 fbd4 	bl	802a260 <_sbrk_r>
 8029ab8:	3001      	adds	r0, #1
 8029aba:	d101      	bne.n	8029ac0 <sbrk_aligned+0x38>
 8029abc:	f04f 34ff 	mov.w	r4, #4294967295
 8029ac0:	4620      	mov	r0, r4
 8029ac2:	bd70      	pop	{r4, r5, r6, pc}
 8029ac4:	20005a48 	.word	0x20005a48

08029ac8 <_malloc_r>:
 8029ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029acc:	1ccd      	adds	r5, r1, #3
 8029ace:	f025 0503 	bic.w	r5, r5, #3
 8029ad2:	3508      	adds	r5, #8
 8029ad4:	2d0c      	cmp	r5, #12
 8029ad6:	bf38      	it	cc
 8029ad8:	250c      	movcc	r5, #12
 8029ada:	2d00      	cmp	r5, #0
 8029adc:	4607      	mov	r7, r0
 8029ade:	db01      	blt.n	8029ae4 <_malloc_r+0x1c>
 8029ae0:	42a9      	cmp	r1, r5
 8029ae2:	d905      	bls.n	8029af0 <_malloc_r+0x28>
 8029ae4:	230c      	movs	r3, #12
 8029ae6:	603b      	str	r3, [r7, #0]
 8029ae8:	2600      	movs	r6, #0
 8029aea:	4630      	mov	r0, r6
 8029aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029af0:	4e2e      	ldr	r6, [pc, #184]	; (8029bac <_malloc_r+0xe4>)
 8029af2:	f000 fecb 	bl	802a88c <__malloc_lock>
 8029af6:	6833      	ldr	r3, [r6, #0]
 8029af8:	461c      	mov	r4, r3
 8029afa:	bb34      	cbnz	r4, 8029b4a <_malloc_r+0x82>
 8029afc:	4629      	mov	r1, r5
 8029afe:	4638      	mov	r0, r7
 8029b00:	f7ff ffc2 	bl	8029a88 <sbrk_aligned>
 8029b04:	1c43      	adds	r3, r0, #1
 8029b06:	4604      	mov	r4, r0
 8029b08:	d14d      	bne.n	8029ba6 <_malloc_r+0xde>
 8029b0a:	6834      	ldr	r4, [r6, #0]
 8029b0c:	4626      	mov	r6, r4
 8029b0e:	2e00      	cmp	r6, #0
 8029b10:	d140      	bne.n	8029b94 <_malloc_r+0xcc>
 8029b12:	6823      	ldr	r3, [r4, #0]
 8029b14:	4631      	mov	r1, r6
 8029b16:	4638      	mov	r0, r7
 8029b18:	eb04 0803 	add.w	r8, r4, r3
 8029b1c:	f000 fba0 	bl	802a260 <_sbrk_r>
 8029b20:	4580      	cmp	r8, r0
 8029b22:	d13a      	bne.n	8029b9a <_malloc_r+0xd2>
 8029b24:	6821      	ldr	r1, [r4, #0]
 8029b26:	3503      	adds	r5, #3
 8029b28:	1a6d      	subs	r5, r5, r1
 8029b2a:	f025 0503 	bic.w	r5, r5, #3
 8029b2e:	3508      	adds	r5, #8
 8029b30:	2d0c      	cmp	r5, #12
 8029b32:	bf38      	it	cc
 8029b34:	250c      	movcc	r5, #12
 8029b36:	4629      	mov	r1, r5
 8029b38:	4638      	mov	r0, r7
 8029b3a:	f7ff ffa5 	bl	8029a88 <sbrk_aligned>
 8029b3e:	3001      	adds	r0, #1
 8029b40:	d02b      	beq.n	8029b9a <_malloc_r+0xd2>
 8029b42:	6823      	ldr	r3, [r4, #0]
 8029b44:	442b      	add	r3, r5
 8029b46:	6023      	str	r3, [r4, #0]
 8029b48:	e00e      	b.n	8029b68 <_malloc_r+0xa0>
 8029b4a:	6822      	ldr	r2, [r4, #0]
 8029b4c:	1b52      	subs	r2, r2, r5
 8029b4e:	d41e      	bmi.n	8029b8e <_malloc_r+0xc6>
 8029b50:	2a0b      	cmp	r2, #11
 8029b52:	d916      	bls.n	8029b82 <_malloc_r+0xba>
 8029b54:	1961      	adds	r1, r4, r5
 8029b56:	42a3      	cmp	r3, r4
 8029b58:	6025      	str	r5, [r4, #0]
 8029b5a:	bf18      	it	ne
 8029b5c:	6059      	strne	r1, [r3, #4]
 8029b5e:	6863      	ldr	r3, [r4, #4]
 8029b60:	bf08      	it	eq
 8029b62:	6031      	streq	r1, [r6, #0]
 8029b64:	5162      	str	r2, [r4, r5]
 8029b66:	604b      	str	r3, [r1, #4]
 8029b68:	4638      	mov	r0, r7
 8029b6a:	f104 060b 	add.w	r6, r4, #11
 8029b6e:	f000 fe93 	bl	802a898 <__malloc_unlock>
 8029b72:	f026 0607 	bic.w	r6, r6, #7
 8029b76:	1d23      	adds	r3, r4, #4
 8029b78:	1af2      	subs	r2, r6, r3
 8029b7a:	d0b6      	beq.n	8029aea <_malloc_r+0x22>
 8029b7c:	1b9b      	subs	r3, r3, r6
 8029b7e:	50a3      	str	r3, [r4, r2]
 8029b80:	e7b3      	b.n	8029aea <_malloc_r+0x22>
 8029b82:	6862      	ldr	r2, [r4, #4]
 8029b84:	42a3      	cmp	r3, r4
 8029b86:	bf0c      	ite	eq
 8029b88:	6032      	streq	r2, [r6, #0]
 8029b8a:	605a      	strne	r2, [r3, #4]
 8029b8c:	e7ec      	b.n	8029b68 <_malloc_r+0xa0>
 8029b8e:	4623      	mov	r3, r4
 8029b90:	6864      	ldr	r4, [r4, #4]
 8029b92:	e7b2      	b.n	8029afa <_malloc_r+0x32>
 8029b94:	4634      	mov	r4, r6
 8029b96:	6876      	ldr	r6, [r6, #4]
 8029b98:	e7b9      	b.n	8029b0e <_malloc_r+0x46>
 8029b9a:	230c      	movs	r3, #12
 8029b9c:	603b      	str	r3, [r7, #0]
 8029b9e:	4638      	mov	r0, r7
 8029ba0:	f000 fe7a 	bl	802a898 <__malloc_unlock>
 8029ba4:	e7a1      	b.n	8029aea <_malloc_r+0x22>
 8029ba6:	6025      	str	r5, [r4, #0]
 8029ba8:	e7de      	b.n	8029b68 <_malloc_r+0xa0>
 8029baa:	bf00      	nop
 8029bac:	20005a44 	.word	0x20005a44

08029bb0 <__sfputc_r>:
 8029bb0:	6893      	ldr	r3, [r2, #8]
 8029bb2:	3b01      	subs	r3, #1
 8029bb4:	2b00      	cmp	r3, #0
 8029bb6:	b410      	push	{r4}
 8029bb8:	6093      	str	r3, [r2, #8]
 8029bba:	da08      	bge.n	8029bce <__sfputc_r+0x1e>
 8029bbc:	6994      	ldr	r4, [r2, #24]
 8029bbe:	42a3      	cmp	r3, r4
 8029bc0:	db01      	blt.n	8029bc6 <__sfputc_r+0x16>
 8029bc2:	290a      	cmp	r1, #10
 8029bc4:	d103      	bne.n	8029bce <__sfputc_r+0x1e>
 8029bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029bca:	f000 bbe1 	b.w	802a390 <__swbuf_r>
 8029bce:	6813      	ldr	r3, [r2, #0]
 8029bd0:	1c58      	adds	r0, r3, #1
 8029bd2:	6010      	str	r0, [r2, #0]
 8029bd4:	7019      	strb	r1, [r3, #0]
 8029bd6:	4608      	mov	r0, r1
 8029bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029bdc:	4770      	bx	lr

08029bde <__sfputs_r>:
 8029bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029be0:	4606      	mov	r6, r0
 8029be2:	460f      	mov	r7, r1
 8029be4:	4614      	mov	r4, r2
 8029be6:	18d5      	adds	r5, r2, r3
 8029be8:	42ac      	cmp	r4, r5
 8029bea:	d101      	bne.n	8029bf0 <__sfputs_r+0x12>
 8029bec:	2000      	movs	r0, #0
 8029bee:	e007      	b.n	8029c00 <__sfputs_r+0x22>
 8029bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029bf4:	463a      	mov	r2, r7
 8029bf6:	4630      	mov	r0, r6
 8029bf8:	f7ff ffda 	bl	8029bb0 <__sfputc_r>
 8029bfc:	1c43      	adds	r3, r0, #1
 8029bfe:	d1f3      	bne.n	8029be8 <__sfputs_r+0xa>
 8029c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029c04 <_vfiprintf_r>:
 8029c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c08:	460d      	mov	r5, r1
 8029c0a:	b09d      	sub	sp, #116	; 0x74
 8029c0c:	4614      	mov	r4, r2
 8029c0e:	4698      	mov	r8, r3
 8029c10:	4606      	mov	r6, r0
 8029c12:	b118      	cbz	r0, 8029c1c <_vfiprintf_r+0x18>
 8029c14:	6983      	ldr	r3, [r0, #24]
 8029c16:	b90b      	cbnz	r3, 8029c1c <_vfiprintf_r+0x18>
 8029c18:	f7ff fdec 	bl	80297f4 <__sinit>
 8029c1c:	4b89      	ldr	r3, [pc, #548]	; (8029e44 <_vfiprintf_r+0x240>)
 8029c1e:	429d      	cmp	r5, r3
 8029c20:	d11b      	bne.n	8029c5a <_vfiprintf_r+0x56>
 8029c22:	6875      	ldr	r5, [r6, #4]
 8029c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029c26:	07d9      	lsls	r1, r3, #31
 8029c28:	d405      	bmi.n	8029c36 <_vfiprintf_r+0x32>
 8029c2a:	89ab      	ldrh	r3, [r5, #12]
 8029c2c:	059a      	lsls	r2, r3, #22
 8029c2e:	d402      	bmi.n	8029c36 <_vfiprintf_r+0x32>
 8029c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029c32:	f7ff feb4 	bl	802999e <__retarget_lock_acquire_recursive>
 8029c36:	89ab      	ldrh	r3, [r5, #12]
 8029c38:	071b      	lsls	r3, r3, #28
 8029c3a:	d501      	bpl.n	8029c40 <_vfiprintf_r+0x3c>
 8029c3c:	692b      	ldr	r3, [r5, #16]
 8029c3e:	b9eb      	cbnz	r3, 8029c7c <_vfiprintf_r+0x78>
 8029c40:	4629      	mov	r1, r5
 8029c42:	4630      	mov	r0, r6
 8029c44:	f000 fc08 	bl	802a458 <__swsetup_r>
 8029c48:	b1c0      	cbz	r0, 8029c7c <_vfiprintf_r+0x78>
 8029c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029c4c:	07dc      	lsls	r4, r3, #31
 8029c4e:	d50e      	bpl.n	8029c6e <_vfiprintf_r+0x6a>
 8029c50:	f04f 30ff 	mov.w	r0, #4294967295
 8029c54:	b01d      	add	sp, #116	; 0x74
 8029c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029c5a:	4b7b      	ldr	r3, [pc, #492]	; (8029e48 <_vfiprintf_r+0x244>)
 8029c5c:	429d      	cmp	r5, r3
 8029c5e:	d101      	bne.n	8029c64 <_vfiprintf_r+0x60>
 8029c60:	68b5      	ldr	r5, [r6, #8]
 8029c62:	e7df      	b.n	8029c24 <_vfiprintf_r+0x20>
 8029c64:	4b79      	ldr	r3, [pc, #484]	; (8029e4c <_vfiprintf_r+0x248>)
 8029c66:	429d      	cmp	r5, r3
 8029c68:	bf08      	it	eq
 8029c6a:	68f5      	ldreq	r5, [r6, #12]
 8029c6c:	e7da      	b.n	8029c24 <_vfiprintf_r+0x20>
 8029c6e:	89ab      	ldrh	r3, [r5, #12]
 8029c70:	0598      	lsls	r0, r3, #22
 8029c72:	d4ed      	bmi.n	8029c50 <_vfiprintf_r+0x4c>
 8029c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029c76:	f7ff fe94 	bl	80299a2 <__retarget_lock_release_recursive>
 8029c7a:	e7e9      	b.n	8029c50 <_vfiprintf_r+0x4c>
 8029c7c:	2300      	movs	r3, #0
 8029c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8029c80:	2320      	movs	r3, #32
 8029c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8029c8a:	2330      	movs	r3, #48	; 0x30
 8029c8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8029e50 <_vfiprintf_r+0x24c>
 8029c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029c94:	f04f 0901 	mov.w	r9, #1
 8029c98:	4623      	mov	r3, r4
 8029c9a:	469a      	mov	sl, r3
 8029c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029ca0:	b10a      	cbz	r2, 8029ca6 <_vfiprintf_r+0xa2>
 8029ca2:	2a25      	cmp	r2, #37	; 0x25
 8029ca4:	d1f9      	bne.n	8029c9a <_vfiprintf_r+0x96>
 8029ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8029caa:	d00b      	beq.n	8029cc4 <_vfiprintf_r+0xc0>
 8029cac:	465b      	mov	r3, fp
 8029cae:	4622      	mov	r2, r4
 8029cb0:	4629      	mov	r1, r5
 8029cb2:	4630      	mov	r0, r6
 8029cb4:	f7ff ff93 	bl	8029bde <__sfputs_r>
 8029cb8:	3001      	adds	r0, #1
 8029cba:	f000 80aa 	beq.w	8029e12 <_vfiprintf_r+0x20e>
 8029cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029cc0:	445a      	add	r2, fp
 8029cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8029cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8029cc8:	2b00      	cmp	r3, #0
 8029cca:	f000 80a2 	beq.w	8029e12 <_vfiprintf_r+0x20e>
 8029cce:	2300      	movs	r3, #0
 8029cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8029cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029cd8:	f10a 0a01 	add.w	sl, sl, #1
 8029cdc:	9304      	str	r3, [sp, #16]
 8029cde:	9307      	str	r3, [sp, #28]
 8029ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8029ce6:	4654      	mov	r4, sl
 8029ce8:	2205      	movs	r2, #5
 8029cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029cee:	4858      	ldr	r0, [pc, #352]	; (8029e50 <_vfiprintf_r+0x24c>)
 8029cf0:	f7d6 faf6 	bl	80002e0 <memchr>
 8029cf4:	9a04      	ldr	r2, [sp, #16]
 8029cf6:	b9d8      	cbnz	r0, 8029d30 <_vfiprintf_r+0x12c>
 8029cf8:	06d1      	lsls	r1, r2, #27
 8029cfa:	bf44      	itt	mi
 8029cfc:	2320      	movmi	r3, #32
 8029cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029d02:	0713      	lsls	r3, r2, #28
 8029d04:	bf44      	itt	mi
 8029d06:	232b      	movmi	r3, #43	; 0x2b
 8029d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8029d10:	2b2a      	cmp	r3, #42	; 0x2a
 8029d12:	d015      	beq.n	8029d40 <_vfiprintf_r+0x13c>
 8029d14:	9a07      	ldr	r2, [sp, #28]
 8029d16:	4654      	mov	r4, sl
 8029d18:	2000      	movs	r0, #0
 8029d1a:	f04f 0c0a 	mov.w	ip, #10
 8029d1e:	4621      	mov	r1, r4
 8029d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029d24:	3b30      	subs	r3, #48	; 0x30
 8029d26:	2b09      	cmp	r3, #9
 8029d28:	d94e      	bls.n	8029dc8 <_vfiprintf_r+0x1c4>
 8029d2a:	b1b0      	cbz	r0, 8029d5a <_vfiprintf_r+0x156>
 8029d2c:	9207      	str	r2, [sp, #28]
 8029d2e:	e014      	b.n	8029d5a <_vfiprintf_r+0x156>
 8029d30:	eba0 0308 	sub.w	r3, r0, r8
 8029d34:	fa09 f303 	lsl.w	r3, r9, r3
 8029d38:	4313      	orrs	r3, r2
 8029d3a:	9304      	str	r3, [sp, #16]
 8029d3c:	46a2      	mov	sl, r4
 8029d3e:	e7d2      	b.n	8029ce6 <_vfiprintf_r+0xe2>
 8029d40:	9b03      	ldr	r3, [sp, #12]
 8029d42:	1d19      	adds	r1, r3, #4
 8029d44:	681b      	ldr	r3, [r3, #0]
 8029d46:	9103      	str	r1, [sp, #12]
 8029d48:	2b00      	cmp	r3, #0
 8029d4a:	bfbb      	ittet	lt
 8029d4c:	425b      	neglt	r3, r3
 8029d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8029d52:	9307      	strge	r3, [sp, #28]
 8029d54:	9307      	strlt	r3, [sp, #28]
 8029d56:	bfb8      	it	lt
 8029d58:	9204      	strlt	r2, [sp, #16]
 8029d5a:	7823      	ldrb	r3, [r4, #0]
 8029d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8029d5e:	d10c      	bne.n	8029d7a <_vfiprintf_r+0x176>
 8029d60:	7863      	ldrb	r3, [r4, #1]
 8029d62:	2b2a      	cmp	r3, #42	; 0x2a
 8029d64:	d135      	bne.n	8029dd2 <_vfiprintf_r+0x1ce>
 8029d66:	9b03      	ldr	r3, [sp, #12]
 8029d68:	1d1a      	adds	r2, r3, #4
 8029d6a:	681b      	ldr	r3, [r3, #0]
 8029d6c:	9203      	str	r2, [sp, #12]
 8029d6e:	2b00      	cmp	r3, #0
 8029d70:	bfb8      	it	lt
 8029d72:	f04f 33ff 	movlt.w	r3, #4294967295
 8029d76:	3402      	adds	r4, #2
 8029d78:	9305      	str	r3, [sp, #20]
 8029d7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8029e60 <_vfiprintf_r+0x25c>
 8029d7e:	7821      	ldrb	r1, [r4, #0]
 8029d80:	2203      	movs	r2, #3
 8029d82:	4650      	mov	r0, sl
 8029d84:	f7d6 faac 	bl	80002e0 <memchr>
 8029d88:	b140      	cbz	r0, 8029d9c <_vfiprintf_r+0x198>
 8029d8a:	2340      	movs	r3, #64	; 0x40
 8029d8c:	eba0 000a 	sub.w	r0, r0, sl
 8029d90:	fa03 f000 	lsl.w	r0, r3, r0
 8029d94:	9b04      	ldr	r3, [sp, #16]
 8029d96:	4303      	orrs	r3, r0
 8029d98:	3401      	adds	r4, #1
 8029d9a:	9304      	str	r3, [sp, #16]
 8029d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029da0:	482c      	ldr	r0, [pc, #176]	; (8029e54 <_vfiprintf_r+0x250>)
 8029da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029da6:	2206      	movs	r2, #6
 8029da8:	f7d6 fa9a 	bl	80002e0 <memchr>
 8029dac:	2800      	cmp	r0, #0
 8029dae:	d03f      	beq.n	8029e30 <_vfiprintf_r+0x22c>
 8029db0:	4b29      	ldr	r3, [pc, #164]	; (8029e58 <_vfiprintf_r+0x254>)
 8029db2:	bb1b      	cbnz	r3, 8029dfc <_vfiprintf_r+0x1f8>
 8029db4:	9b03      	ldr	r3, [sp, #12]
 8029db6:	3307      	adds	r3, #7
 8029db8:	f023 0307 	bic.w	r3, r3, #7
 8029dbc:	3308      	adds	r3, #8
 8029dbe:	9303      	str	r3, [sp, #12]
 8029dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029dc2:	443b      	add	r3, r7
 8029dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8029dc6:	e767      	b.n	8029c98 <_vfiprintf_r+0x94>
 8029dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8029dcc:	460c      	mov	r4, r1
 8029dce:	2001      	movs	r0, #1
 8029dd0:	e7a5      	b.n	8029d1e <_vfiprintf_r+0x11a>
 8029dd2:	2300      	movs	r3, #0
 8029dd4:	3401      	adds	r4, #1
 8029dd6:	9305      	str	r3, [sp, #20]
 8029dd8:	4619      	mov	r1, r3
 8029dda:	f04f 0c0a 	mov.w	ip, #10
 8029dde:	4620      	mov	r0, r4
 8029de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029de4:	3a30      	subs	r2, #48	; 0x30
 8029de6:	2a09      	cmp	r2, #9
 8029de8:	d903      	bls.n	8029df2 <_vfiprintf_r+0x1ee>
 8029dea:	2b00      	cmp	r3, #0
 8029dec:	d0c5      	beq.n	8029d7a <_vfiprintf_r+0x176>
 8029dee:	9105      	str	r1, [sp, #20]
 8029df0:	e7c3      	b.n	8029d7a <_vfiprintf_r+0x176>
 8029df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8029df6:	4604      	mov	r4, r0
 8029df8:	2301      	movs	r3, #1
 8029dfa:	e7f0      	b.n	8029dde <_vfiprintf_r+0x1da>
 8029dfc:	ab03      	add	r3, sp, #12
 8029dfe:	9300      	str	r3, [sp, #0]
 8029e00:	462a      	mov	r2, r5
 8029e02:	4b16      	ldr	r3, [pc, #88]	; (8029e5c <_vfiprintf_r+0x258>)
 8029e04:	a904      	add	r1, sp, #16
 8029e06:	4630      	mov	r0, r6
 8029e08:	f3af 8000 	nop.w
 8029e0c:	4607      	mov	r7, r0
 8029e0e:	1c78      	adds	r0, r7, #1
 8029e10:	d1d6      	bne.n	8029dc0 <_vfiprintf_r+0x1bc>
 8029e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029e14:	07d9      	lsls	r1, r3, #31
 8029e16:	d405      	bmi.n	8029e24 <_vfiprintf_r+0x220>
 8029e18:	89ab      	ldrh	r3, [r5, #12]
 8029e1a:	059a      	lsls	r2, r3, #22
 8029e1c:	d402      	bmi.n	8029e24 <_vfiprintf_r+0x220>
 8029e1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029e20:	f7ff fdbf 	bl	80299a2 <__retarget_lock_release_recursive>
 8029e24:	89ab      	ldrh	r3, [r5, #12]
 8029e26:	065b      	lsls	r3, r3, #25
 8029e28:	f53f af12 	bmi.w	8029c50 <_vfiprintf_r+0x4c>
 8029e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029e2e:	e711      	b.n	8029c54 <_vfiprintf_r+0x50>
 8029e30:	ab03      	add	r3, sp, #12
 8029e32:	9300      	str	r3, [sp, #0]
 8029e34:	462a      	mov	r2, r5
 8029e36:	4b09      	ldr	r3, [pc, #36]	; (8029e5c <_vfiprintf_r+0x258>)
 8029e38:	a904      	add	r1, sp, #16
 8029e3a:	4630      	mov	r0, r6
 8029e3c:	f000 f880 	bl	8029f40 <_printf_i>
 8029e40:	e7e4      	b.n	8029e0c <_vfiprintf_r+0x208>
 8029e42:	bf00      	nop
 8029e44:	0802ea9c 	.word	0x0802ea9c
 8029e48:	0802eabc 	.word	0x0802eabc
 8029e4c:	0802ea7c 	.word	0x0802ea7c
 8029e50:	0802eae0 	.word	0x0802eae0
 8029e54:	0802eaea 	.word	0x0802eaea
 8029e58:	00000000 	.word	0x00000000
 8029e5c:	08029bdf 	.word	0x08029bdf
 8029e60:	0802eae6 	.word	0x0802eae6

08029e64 <_printf_common>:
 8029e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029e68:	4616      	mov	r6, r2
 8029e6a:	4699      	mov	r9, r3
 8029e6c:	688a      	ldr	r2, [r1, #8]
 8029e6e:	690b      	ldr	r3, [r1, #16]
 8029e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029e74:	4293      	cmp	r3, r2
 8029e76:	bfb8      	it	lt
 8029e78:	4613      	movlt	r3, r2
 8029e7a:	6033      	str	r3, [r6, #0]
 8029e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8029e80:	4607      	mov	r7, r0
 8029e82:	460c      	mov	r4, r1
 8029e84:	b10a      	cbz	r2, 8029e8a <_printf_common+0x26>
 8029e86:	3301      	adds	r3, #1
 8029e88:	6033      	str	r3, [r6, #0]
 8029e8a:	6823      	ldr	r3, [r4, #0]
 8029e8c:	0699      	lsls	r1, r3, #26
 8029e8e:	bf42      	ittt	mi
 8029e90:	6833      	ldrmi	r3, [r6, #0]
 8029e92:	3302      	addmi	r3, #2
 8029e94:	6033      	strmi	r3, [r6, #0]
 8029e96:	6825      	ldr	r5, [r4, #0]
 8029e98:	f015 0506 	ands.w	r5, r5, #6
 8029e9c:	d106      	bne.n	8029eac <_printf_common+0x48>
 8029e9e:	f104 0a19 	add.w	sl, r4, #25
 8029ea2:	68e3      	ldr	r3, [r4, #12]
 8029ea4:	6832      	ldr	r2, [r6, #0]
 8029ea6:	1a9b      	subs	r3, r3, r2
 8029ea8:	42ab      	cmp	r3, r5
 8029eaa:	dc26      	bgt.n	8029efa <_printf_common+0x96>
 8029eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8029eb0:	1e13      	subs	r3, r2, #0
 8029eb2:	6822      	ldr	r2, [r4, #0]
 8029eb4:	bf18      	it	ne
 8029eb6:	2301      	movne	r3, #1
 8029eb8:	0692      	lsls	r2, r2, #26
 8029eba:	d42b      	bmi.n	8029f14 <_printf_common+0xb0>
 8029ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8029ec0:	4649      	mov	r1, r9
 8029ec2:	4638      	mov	r0, r7
 8029ec4:	47c0      	blx	r8
 8029ec6:	3001      	adds	r0, #1
 8029ec8:	d01e      	beq.n	8029f08 <_printf_common+0xa4>
 8029eca:	6823      	ldr	r3, [r4, #0]
 8029ecc:	68e5      	ldr	r5, [r4, #12]
 8029ece:	6832      	ldr	r2, [r6, #0]
 8029ed0:	f003 0306 	and.w	r3, r3, #6
 8029ed4:	2b04      	cmp	r3, #4
 8029ed6:	bf08      	it	eq
 8029ed8:	1aad      	subeq	r5, r5, r2
 8029eda:	68a3      	ldr	r3, [r4, #8]
 8029edc:	6922      	ldr	r2, [r4, #16]
 8029ede:	bf0c      	ite	eq
 8029ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029ee4:	2500      	movne	r5, #0
 8029ee6:	4293      	cmp	r3, r2
 8029ee8:	bfc4      	itt	gt
 8029eea:	1a9b      	subgt	r3, r3, r2
 8029eec:	18ed      	addgt	r5, r5, r3
 8029eee:	2600      	movs	r6, #0
 8029ef0:	341a      	adds	r4, #26
 8029ef2:	42b5      	cmp	r5, r6
 8029ef4:	d11a      	bne.n	8029f2c <_printf_common+0xc8>
 8029ef6:	2000      	movs	r0, #0
 8029ef8:	e008      	b.n	8029f0c <_printf_common+0xa8>
 8029efa:	2301      	movs	r3, #1
 8029efc:	4652      	mov	r2, sl
 8029efe:	4649      	mov	r1, r9
 8029f00:	4638      	mov	r0, r7
 8029f02:	47c0      	blx	r8
 8029f04:	3001      	adds	r0, #1
 8029f06:	d103      	bne.n	8029f10 <_printf_common+0xac>
 8029f08:	f04f 30ff 	mov.w	r0, #4294967295
 8029f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029f10:	3501      	adds	r5, #1
 8029f12:	e7c6      	b.n	8029ea2 <_printf_common+0x3e>
 8029f14:	18e1      	adds	r1, r4, r3
 8029f16:	1c5a      	adds	r2, r3, #1
 8029f18:	2030      	movs	r0, #48	; 0x30
 8029f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8029f1e:	4422      	add	r2, r4
 8029f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029f28:	3302      	adds	r3, #2
 8029f2a:	e7c7      	b.n	8029ebc <_printf_common+0x58>
 8029f2c:	2301      	movs	r3, #1
 8029f2e:	4622      	mov	r2, r4
 8029f30:	4649      	mov	r1, r9
 8029f32:	4638      	mov	r0, r7
 8029f34:	47c0      	blx	r8
 8029f36:	3001      	adds	r0, #1
 8029f38:	d0e6      	beq.n	8029f08 <_printf_common+0xa4>
 8029f3a:	3601      	adds	r6, #1
 8029f3c:	e7d9      	b.n	8029ef2 <_printf_common+0x8e>
	...

08029f40 <_printf_i>:
 8029f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029f44:	7e0f      	ldrb	r7, [r1, #24]
 8029f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029f48:	2f78      	cmp	r7, #120	; 0x78
 8029f4a:	4691      	mov	r9, r2
 8029f4c:	4680      	mov	r8, r0
 8029f4e:	460c      	mov	r4, r1
 8029f50:	469a      	mov	sl, r3
 8029f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8029f56:	d807      	bhi.n	8029f68 <_printf_i+0x28>
 8029f58:	2f62      	cmp	r7, #98	; 0x62
 8029f5a:	d80a      	bhi.n	8029f72 <_printf_i+0x32>
 8029f5c:	2f00      	cmp	r7, #0
 8029f5e:	f000 80d8 	beq.w	802a112 <_printf_i+0x1d2>
 8029f62:	2f58      	cmp	r7, #88	; 0x58
 8029f64:	f000 80a3 	beq.w	802a0ae <_printf_i+0x16e>
 8029f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8029f70:	e03a      	b.n	8029fe8 <_printf_i+0xa8>
 8029f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8029f76:	2b15      	cmp	r3, #21
 8029f78:	d8f6      	bhi.n	8029f68 <_printf_i+0x28>
 8029f7a:	a101      	add	r1, pc, #4	; (adr r1, 8029f80 <_printf_i+0x40>)
 8029f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8029f80:	08029fd9 	.word	0x08029fd9
 8029f84:	08029fed 	.word	0x08029fed
 8029f88:	08029f69 	.word	0x08029f69
 8029f8c:	08029f69 	.word	0x08029f69
 8029f90:	08029f69 	.word	0x08029f69
 8029f94:	08029f69 	.word	0x08029f69
 8029f98:	08029fed 	.word	0x08029fed
 8029f9c:	08029f69 	.word	0x08029f69
 8029fa0:	08029f69 	.word	0x08029f69
 8029fa4:	08029f69 	.word	0x08029f69
 8029fa8:	08029f69 	.word	0x08029f69
 8029fac:	0802a0f9 	.word	0x0802a0f9
 8029fb0:	0802a01d 	.word	0x0802a01d
 8029fb4:	0802a0db 	.word	0x0802a0db
 8029fb8:	08029f69 	.word	0x08029f69
 8029fbc:	08029f69 	.word	0x08029f69
 8029fc0:	0802a11b 	.word	0x0802a11b
 8029fc4:	08029f69 	.word	0x08029f69
 8029fc8:	0802a01d 	.word	0x0802a01d
 8029fcc:	08029f69 	.word	0x08029f69
 8029fd0:	08029f69 	.word	0x08029f69
 8029fd4:	0802a0e3 	.word	0x0802a0e3
 8029fd8:	682b      	ldr	r3, [r5, #0]
 8029fda:	1d1a      	adds	r2, r3, #4
 8029fdc:	681b      	ldr	r3, [r3, #0]
 8029fde:	602a      	str	r2, [r5, #0]
 8029fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8029fe8:	2301      	movs	r3, #1
 8029fea:	e0a3      	b.n	802a134 <_printf_i+0x1f4>
 8029fec:	6820      	ldr	r0, [r4, #0]
 8029fee:	6829      	ldr	r1, [r5, #0]
 8029ff0:	0606      	lsls	r6, r0, #24
 8029ff2:	f101 0304 	add.w	r3, r1, #4
 8029ff6:	d50a      	bpl.n	802a00e <_printf_i+0xce>
 8029ff8:	680e      	ldr	r6, [r1, #0]
 8029ffa:	602b      	str	r3, [r5, #0]
 8029ffc:	2e00      	cmp	r6, #0
 8029ffe:	da03      	bge.n	802a008 <_printf_i+0xc8>
 802a000:	232d      	movs	r3, #45	; 0x2d
 802a002:	4276      	negs	r6, r6
 802a004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a008:	485e      	ldr	r0, [pc, #376]	; (802a184 <_printf_i+0x244>)
 802a00a:	230a      	movs	r3, #10
 802a00c:	e019      	b.n	802a042 <_printf_i+0x102>
 802a00e:	680e      	ldr	r6, [r1, #0]
 802a010:	602b      	str	r3, [r5, #0]
 802a012:	f010 0f40 	tst.w	r0, #64	; 0x40
 802a016:	bf18      	it	ne
 802a018:	b236      	sxthne	r6, r6
 802a01a:	e7ef      	b.n	8029ffc <_printf_i+0xbc>
 802a01c:	682b      	ldr	r3, [r5, #0]
 802a01e:	6820      	ldr	r0, [r4, #0]
 802a020:	1d19      	adds	r1, r3, #4
 802a022:	6029      	str	r1, [r5, #0]
 802a024:	0601      	lsls	r1, r0, #24
 802a026:	d501      	bpl.n	802a02c <_printf_i+0xec>
 802a028:	681e      	ldr	r6, [r3, #0]
 802a02a:	e002      	b.n	802a032 <_printf_i+0xf2>
 802a02c:	0646      	lsls	r6, r0, #25
 802a02e:	d5fb      	bpl.n	802a028 <_printf_i+0xe8>
 802a030:	881e      	ldrh	r6, [r3, #0]
 802a032:	4854      	ldr	r0, [pc, #336]	; (802a184 <_printf_i+0x244>)
 802a034:	2f6f      	cmp	r7, #111	; 0x6f
 802a036:	bf0c      	ite	eq
 802a038:	2308      	moveq	r3, #8
 802a03a:	230a      	movne	r3, #10
 802a03c:	2100      	movs	r1, #0
 802a03e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a042:	6865      	ldr	r5, [r4, #4]
 802a044:	60a5      	str	r5, [r4, #8]
 802a046:	2d00      	cmp	r5, #0
 802a048:	bfa2      	ittt	ge
 802a04a:	6821      	ldrge	r1, [r4, #0]
 802a04c:	f021 0104 	bicge.w	r1, r1, #4
 802a050:	6021      	strge	r1, [r4, #0]
 802a052:	b90e      	cbnz	r6, 802a058 <_printf_i+0x118>
 802a054:	2d00      	cmp	r5, #0
 802a056:	d04d      	beq.n	802a0f4 <_printf_i+0x1b4>
 802a058:	4615      	mov	r5, r2
 802a05a:	fbb6 f1f3 	udiv	r1, r6, r3
 802a05e:	fb03 6711 	mls	r7, r3, r1, r6
 802a062:	5dc7      	ldrb	r7, [r0, r7]
 802a064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802a068:	4637      	mov	r7, r6
 802a06a:	42bb      	cmp	r3, r7
 802a06c:	460e      	mov	r6, r1
 802a06e:	d9f4      	bls.n	802a05a <_printf_i+0x11a>
 802a070:	2b08      	cmp	r3, #8
 802a072:	d10b      	bne.n	802a08c <_printf_i+0x14c>
 802a074:	6823      	ldr	r3, [r4, #0]
 802a076:	07de      	lsls	r6, r3, #31
 802a078:	d508      	bpl.n	802a08c <_printf_i+0x14c>
 802a07a:	6923      	ldr	r3, [r4, #16]
 802a07c:	6861      	ldr	r1, [r4, #4]
 802a07e:	4299      	cmp	r1, r3
 802a080:	bfde      	ittt	le
 802a082:	2330      	movle	r3, #48	; 0x30
 802a084:	f805 3c01 	strble.w	r3, [r5, #-1]
 802a088:	f105 35ff 	addle.w	r5, r5, #4294967295
 802a08c:	1b52      	subs	r2, r2, r5
 802a08e:	6122      	str	r2, [r4, #16]
 802a090:	f8cd a000 	str.w	sl, [sp]
 802a094:	464b      	mov	r3, r9
 802a096:	aa03      	add	r2, sp, #12
 802a098:	4621      	mov	r1, r4
 802a09a:	4640      	mov	r0, r8
 802a09c:	f7ff fee2 	bl	8029e64 <_printf_common>
 802a0a0:	3001      	adds	r0, #1
 802a0a2:	d14c      	bne.n	802a13e <_printf_i+0x1fe>
 802a0a4:	f04f 30ff 	mov.w	r0, #4294967295
 802a0a8:	b004      	add	sp, #16
 802a0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a0ae:	4835      	ldr	r0, [pc, #212]	; (802a184 <_printf_i+0x244>)
 802a0b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802a0b4:	6829      	ldr	r1, [r5, #0]
 802a0b6:	6823      	ldr	r3, [r4, #0]
 802a0b8:	f851 6b04 	ldr.w	r6, [r1], #4
 802a0bc:	6029      	str	r1, [r5, #0]
 802a0be:	061d      	lsls	r5, r3, #24
 802a0c0:	d514      	bpl.n	802a0ec <_printf_i+0x1ac>
 802a0c2:	07df      	lsls	r7, r3, #31
 802a0c4:	bf44      	itt	mi
 802a0c6:	f043 0320 	orrmi.w	r3, r3, #32
 802a0ca:	6023      	strmi	r3, [r4, #0]
 802a0cc:	b91e      	cbnz	r6, 802a0d6 <_printf_i+0x196>
 802a0ce:	6823      	ldr	r3, [r4, #0]
 802a0d0:	f023 0320 	bic.w	r3, r3, #32
 802a0d4:	6023      	str	r3, [r4, #0]
 802a0d6:	2310      	movs	r3, #16
 802a0d8:	e7b0      	b.n	802a03c <_printf_i+0xfc>
 802a0da:	6823      	ldr	r3, [r4, #0]
 802a0dc:	f043 0320 	orr.w	r3, r3, #32
 802a0e0:	6023      	str	r3, [r4, #0]
 802a0e2:	2378      	movs	r3, #120	; 0x78
 802a0e4:	4828      	ldr	r0, [pc, #160]	; (802a188 <_printf_i+0x248>)
 802a0e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802a0ea:	e7e3      	b.n	802a0b4 <_printf_i+0x174>
 802a0ec:	0659      	lsls	r1, r3, #25
 802a0ee:	bf48      	it	mi
 802a0f0:	b2b6      	uxthmi	r6, r6
 802a0f2:	e7e6      	b.n	802a0c2 <_printf_i+0x182>
 802a0f4:	4615      	mov	r5, r2
 802a0f6:	e7bb      	b.n	802a070 <_printf_i+0x130>
 802a0f8:	682b      	ldr	r3, [r5, #0]
 802a0fa:	6826      	ldr	r6, [r4, #0]
 802a0fc:	6961      	ldr	r1, [r4, #20]
 802a0fe:	1d18      	adds	r0, r3, #4
 802a100:	6028      	str	r0, [r5, #0]
 802a102:	0635      	lsls	r5, r6, #24
 802a104:	681b      	ldr	r3, [r3, #0]
 802a106:	d501      	bpl.n	802a10c <_printf_i+0x1cc>
 802a108:	6019      	str	r1, [r3, #0]
 802a10a:	e002      	b.n	802a112 <_printf_i+0x1d2>
 802a10c:	0670      	lsls	r0, r6, #25
 802a10e:	d5fb      	bpl.n	802a108 <_printf_i+0x1c8>
 802a110:	8019      	strh	r1, [r3, #0]
 802a112:	2300      	movs	r3, #0
 802a114:	6123      	str	r3, [r4, #16]
 802a116:	4615      	mov	r5, r2
 802a118:	e7ba      	b.n	802a090 <_printf_i+0x150>
 802a11a:	682b      	ldr	r3, [r5, #0]
 802a11c:	1d1a      	adds	r2, r3, #4
 802a11e:	602a      	str	r2, [r5, #0]
 802a120:	681d      	ldr	r5, [r3, #0]
 802a122:	6862      	ldr	r2, [r4, #4]
 802a124:	2100      	movs	r1, #0
 802a126:	4628      	mov	r0, r5
 802a128:	f7d6 f8da 	bl	80002e0 <memchr>
 802a12c:	b108      	cbz	r0, 802a132 <_printf_i+0x1f2>
 802a12e:	1b40      	subs	r0, r0, r5
 802a130:	6060      	str	r0, [r4, #4]
 802a132:	6863      	ldr	r3, [r4, #4]
 802a134:	6123      	str	r3, [r4, #16]
 802a136:	2300      	movs	r3, #0
 802a138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a13c:	e7a8      	b.n	802a090 <_printf_i+0x150>
 802a13e:	6923      	ldr	r3, [r4, #16]
 802a140:	462a      	mov	r2, r5
 802a142:	4649      	mov	r1, r9
 802a144:	4640      	mov	r0, r8
 802a146:	47d0      	blx	sl
 802a148:	3001      	adds	r0, #1
 802a14a:	d0ab      	beq.n	802a0a4 <_printf_i+0x164>
 802a14c:	6823      	ldr	r3, [r4, #0]
 802a14e:	079b      	lsls	r3, r3, #30
 802a150:	d413      	bmi.n	802a17a <_printf_i+0x23a>
 802a152:	68e0      	ldr	r0, [r4, #12]
 802a154:	9b03      	ldr	r3, [sp, #12]
 802a156:	4298      	cmp	r0, r3
 802a158:	bfb8      	it	lt
 802a15a:	4618      	movlt	r0, r3
 802a15c:	e7a4      	b.n	802a0a8 <_printf_i+0x168>
 802a15e:	2301      	movs	r3, #1
 802a160:	4632      	mov	r2, r6
 802a162:	4649      	mov	r1, r9
 802a164:	4640      	mov	r0, r8
 802a166:	47d0      	blx	sl
 802a168:	3001      	adds	r0, #1
 802a16a:	d09b      	beq.n	802a0a4 <_printf_i+0x164>
 802a16c:	3501      	adds	r5, #1
 802a16e:	68e3      	ldr	r3, [r4, #12]
 802a170:	9903      	ldr	r1, [sp, #12]
 802a172:	1a5b      	subs	r3, r3, r1
 802a174:	42ab      	cmp	r3, r5
 802a176:	dcf2      	bgt.n	802a15e <_printf_i+0x21e>
 802a178:	e7eb      	b.n	802a152 <_printf_i+0x212>
 802a17a:	2500      	movs	r5, #0
 802a17c:	f104 0619 	add.w	r6, r4, #25
 802a180:	e7f5      	b.n	802a16e <_printf_i+0x22e>
 802a182:	bf00      	nop
 802a184:	0802eaf1 	.word	0x0802eaf1
 802a188:	0802eb02 	.word	0x0802eb02

0802a18c <cleanup_glue>:
 802a18c:	b538      	push	{r3, r4, r5, lr}
 802a18e:	460c      	mov	r4, r1
 802a190:	6809      	ldr	r1, [r1, #0]
 802a192:	4605      	mov	r5, r0
 802a194:	b109      	cbz	r1, 802a19a <cleanup_glue+0xe>
 802a196:	f7ff fff9 	bl	802a18c <cleanup_glue>
 802a19a:	4621      	mov	r1, r4
 802a19c:	4628      	mov	r0, r5
 802a19e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a1a2:	f7ff bc25 	b.w	80299f0 <_free_r>
	...

0802a1a8 <_reclaim_reent>:
 802a1a8:	4b2c      	ldr	r3, [pc, #176]	; (802a25c <_reclaim_reent+0xb4>)
 802a1aa:	681b      	ldr	r3, [r3, #0]
 802a1ac:	4283      	cmp	r3, r0
 802a1ae:	b570      	push	{r4, r5, r6, lr}
 802a1b0:	4604      	mov	r4, r0
 802a1b2:	d051      	beq.n	802a258 <_reclaim_reent+0xb0>
 802a1b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802a1b6:	b143      	cbz	r3, 802a1ca <_reclaim_reent+0x22>
 802a1b8:	68db      	ldr	r3, [r3, #12]
 802a1ba:	2b00      	cmp	r3, #0
 802a1bc:	d14a      	bne.n	802a254 <_reclaim_reent+0xac>
 802a1be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a1c0:	6819      	ldr	r1, [r3, #0]
 802a1c2:	b111      	cbz	r1, 802a1ca <_reclaim_reent+0x22>
 802a1c4:	4620      	mov	r0, r4
 802a1c6:	f7ff fc13 	bl	80299f0 <_free_r>
 802a1ca:	6961      	ldr	r1, [r4, #20]
 802a1cc:	b111      	cbz	r1, 802a1d4 <_reclaim_reent+0x2c>
 802a1ce:	4620      	mov	r0, r4
 802a1d0:	f7ff fc0e 	bl	80299f0 <_free_r>
 802a1d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802a1d6:	b111      	cbz	r1, 802a1de <_reclaim_reent+0x36>
 802a1d8:	4620      	mov	r0, r4
 802a1da:	f7ff fc09 	bl	80299f0 <_free_r>
 802a1de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802a1e0:	b111      	cbz	r1, 802a1e8 <_reclaim_reent+0x40>
 802a1e2:	4620      	mov	r0, r4
 802a1e4:	f7ff fc04 	bl	80299f0 <_free_r>
 802a1e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802a1ea:	b111      	cbz	r1, 802a1f2 <_reclaim_reent+0x4a>
 802a1ec:	4620      	mov	r0, r4
 802a1ee:	f7ff fbff 	bl	80299f0 <_free_r>
 802a1f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a1f4:	b111      	cbz	r1, 802a1fc <_reclaim_reent+0x54>
 802a1f6:	4620      	mov	r0, r4
 802a1f8:	f7ff fbfa 	bl	80299f0 <_free_r>
 802a1fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802a1fe:	b111      	cbz	r1, 802a206 <_reclaim_reent+0x5e>
 802a200:	4620      	mov	r0, r4
 802a202:	f7ff fbf5 	bl	80299f0 <_free_r>
 802a206:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802a208:	b111      	cbz	r1, 802a210 <_reclaim_reent+0x68>
 802a20a:	4620      	mov	r0, r4
 802a20c:	f7ff fbf0 	bl	80299f0 <_free_r>
 802a210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a212:	b111      	cbz	r1, 802a21a <_reclaim_reent+0x72>
 802a214:	4620      	mov	r0, r4
 802a216:	f7ff fbeb 	bl	80299f0 <_free_r>
 802a21a:	69a3      	ldr	r3, [r4, #24]
 802a21c:	b1e3      	cbz	r3, 802a258 <_reclaim_reent+0xb0>
 802a21e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802a220:	4620      	mov	r0, r4
 802a222:	4798      	blx	r3
 802a224:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802a226:	b1b9      	cbz	r1, 802a258 <_reclaim_reent+0xb0>
 802a228:	4620      	mov	r0, r4
 802a22a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a22e:	f7ff bfad 	b.w	802a18c <cleanup_glue>
 802a232:	5949      	ldr	r1, [r1, r5]
 802a234:	b941      	cbnz	r1, 802a248 <_reclaim_reent+0xa0>
 802a236:	3504      	adds	r5, #4
 802a238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a23a:	2d80      	cmp	r5, #128	; 0x80
 802a23c:	68d9      	ldr	r1, [r3, #12]
 802a23e:	d1f8      	bne.n	802a232 <_reclaim_reent+0x8a>
 802a240:	4620      	mov	r0, r4
 802a242:	f7ff fbd5 	bl	80299f0 <_free_r>
 802a246:	e7ba      	b.n	802a1be <_reclaim_reent+0x16>
 802a248:	680e      	ldr	r6, [r1, #0]
 802a24a:	4620      	mov	r0, r4
 802a24c:	f7ff fbd0 	bl	80299f0 <_free_r>
 802a250:	4631      	mov	r1, r6
 802a252:	e7ef      	b.n	802a234 <_reclaim_reent+0x8c>
 802a254:	2500      	movs	r5, #0
 802a256:	e7ef      	b.n	802a238 <_reclaim_reent+0x90>
 802a258:	bd70      	pop	{r4, r5, r6, pc}
 802a25a:	bf00      	nop
 802a25c:	200001c0 	.word	0x200001c0

0802a260 <_sbrk_r>:
 802a260:	b538      	push	{r3, r4, r5, lr}
 802a262:	4d06      	ldr	r5, [pc, #24]	; (802a27c <_sbrk_r+0x1c>)
 802a264:	2300      	movs	r3, #0
 802a266:	4604      	mov	r4, r0
 802a268:	4608      	mov	r0, r1
 802a26a:	602b      	str	r3, [r5, #0]
 802a26c:	f7d9 fd40 	bl	8003cf0 <_sbrk>
 802a270:	1c43      	adds	r3, r0, #1
 802a272:	d102      	bne.n	802a27a <_sbrk_r+0x1a>
 802a274:	682b      	ldr	r3, [r5, #0]
 802a276:	b103      	cbz	r3, 802a27a <_sbrk_r+0x1a>
 802a278:	6023      	str	r3, [r4, #0]
 802a27a:	bd38      	pop	{r3, r4, r5, pc}
 802a27c:	20005b54 	.word	0x20005b54

0802a280 <_raise_r>:
 802a280:	291f      	cmp	r1, #31
 802a282:	b538      	push	{r3, r4, r5, lr}
 802a284:	4604      	mov	r4, r0
 802a286:	460d      	mov	r5, r1
 802a288:	d904      	bls.n	802a294 <_raise_r+0x14>
 802a28a:	2316      	movs	r3, #22
 802a28c:	6003      	str	r3, [r0, #0]
 802a28e:	f04f 30ff 	mov.w	r0, #4294967295
 802a292:	bd38      	pop	{r3, r4, r5, pc}
 802a294:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a296:	b112      	cbz	r2, 802a29e <_raise_r+0x1e>
 802a298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a29c:	b94b      	cbnz	r3, 802a2b2 <_raise_r+0x32>
 802a29e:	4620      	mov	r0, r4
 802a2a0:	f000 f830 	bl	802a304 <_getpid_r>
 802a2a4:	462a      	mov	r2, r5
 802a2a6:	4601      	mov	r1, r0
 802a2a8:	4620      	mov	r0, r4
 802a2aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a2ae:	f000 b817 	b.w	802a2e0 <_kill_r>
 802a2b2:	2b01      	cmp	r3, #1
 802a2b4:	d00a      	beq.n	802a2cc <_raise_r+0x4c>
 802a2b6:	1c59      	adds	r1, r3, #1
 802a2b8:	d103      	bne.n	802a2c2 <_raise_r+0x42>
 802a2ba:	2316      	movs	r3, #22
 802a2bc:	6003      	str	r3, [r0, #0]
 802a2be:	2001      	movs	r0, #1
 802a2c0:	e7e7      	b.n	802a292 <_raise_r+0x12>
 802a2c2:	2400      	movs	r4, #0
 802a2c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a2c8:	4628      	mov	r0, r5
 802a2ca:	4798      	blx	r3
 802a2cc:	2000      	movs	r0, #0
 802a2ce:	e7e0      	b.n	802a292 <_raise_r+0x12>

0802a2d0 <raise>:
 802a2d0:	4b02      	ldr	r3, [pc, #8]	; (802a2dc <raise+0xc>)
 802a2d2:	4601      	mov	r1, r0
 802a2d4:	6818      	ldr	r0, [r3, #0]
 802a2d6:	f7ff bfd3 	b.w	802a280 <_raise_r>
 802a2da:	bf00      	nop
 802a2dc:	200001c0 	.word	0x200001c0

0802a2e0 <_kill_r>:
 802a2e0:	b538      	push	{r3, r4, r5, lr}
 802a2e2:	4d07      	ldr	r5, [pc, #28]	; (802a300 <_kill_r+0x20>)
 802a2e4:	2300      	movs	r3, #0
 802a2e6:	4604      	mov	r4, r0
 802a2e8:	4608      	mov	r0, r1
 802a2ea:	4611      	mov	r1, r2
 802a2ec:	602b      	str	r3, [r5, #0]
 802a2ee:	f7d9 fc77 	bl	8003be0 <_kill>
 802a2f2:	1c43      	adds	r3, r0, #1
 802a2f4:	d102      	bne.n	802a2fc <_kill_r+0x1c>
 802a2f6:	682b      	ldr	r3, [r5, #0]
 802a2f8:	b103      	cbz	r3, 802a2fc <_kill_r+0x1c>
 802a2fa:	6023      	str	r3, [r4, #0]
 802a2fc:	bd38      	pop	{r3, r4, r5, pc}
 802a2fe:	bf00      	nop
 802a300:	20005b54 	.word	0x20005b54

0802a304 <_getpid_r>:
 802a304:	f7d9 bc64 	b.w	8003bd0 <_getpid>

0802a308 <__sread>:
 802a308:	b510      	push	{r4, lr}
 802a30a:	460c      	mov	r4, r1
 802a30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a310:	f000 fac8 	bl	802a8a4 <_read_r>
 802a314:	2800      	cmp	r0, #0
 802a316:	bfab      	itete	ge
 802a318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802a31a:	89a3      	ldrhlt	r3, [r4, #12]
 802a31c:	181b      	addge	r3, r3, r0
 802a31e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802a322:	bfac      	ite	ge
 802a324:	6563      	strge	r3, [r4, #84]	; 0x54
 802a326:	81a3      	strhlt	r3, [r4, #12]
 802a328:	bd10      	pop	{r4, pc}

0802a32a <__swrite>:
 802a32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a32e:	461f      	mov	r7, r3
 802a330:	898b      	ldrh	r3, [r1, #12]
 802a332:	05db      	lsls	r3, r3, #23
 802a334:	4605      	mov	r5, r0
 802a336:	460c      	mov	r4, r1
 802a338:	4616      	mov	r6, r2
 802a33a:	d505      	bpl.n	802a348 <__swrite+0x1e>
 802a33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a340:	2302      	movs	r3, #2
 802a342:	2200      	movs	r2, #0
 802a344:	f000 fa2a 	bl	802a79c <_lseek_r>
 802a348:	89a3      	ldrh	r3, [r4, #12]
 802a34a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a34e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a352:	81a3      	strh	r3, [r4, #12]
 802a354:	4632      	mov	r2, r6
 802a356:	463b      	mov	r3, r7
 802a358:	4628      	mov	r0, r5
 802a35a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a35e:	f000 b869 	b.w	802a434 <_write_r>

0802a362 <__sseek>:
 802a362:	b510      	push	{r4, lr}
 802a364:	460c      	mov	r4, r1
 802a366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a36a:	f000 fa17 	bl	802a79c <_lseek_r>
 802a36e:	1c43      	adds	r3, r0, #1
 802a370:	89a3      	ldrh	r3, [r4, #12]
 802a372:	bf15      	itete	ne
 802a374:	6560      	strne	r0, [r4, #84]	; 0x54
 802a376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802a37a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802a37e:	81a3      	strheq	r3, [r4, #12]
 802a380:	bf18      	it	ne
 802a382:	81a3      	strhne	r3, [r4, #12]
 802a384:	bd10      	pop	{r4, pc}

0802a386 <__sclose>:
 802a386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a38a:	f000 b935 	b.w	802a5f8 <_close_r>
	...

0802a390 <__swbuf_r>:
 802a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a392:	460e      	mov	r6, r1
 802a394:	4614      	mov	r4, r2
 802a396:	4605      	mov	r5, r0
 802a398:	b118      	cbz	r0, 802a3a2 <__swbuf_r+0x12>
 802a39a:	6983      	ldr	r3, [r0, #24]
 802a39c:	b90b      	cbnz	r3, 802a3a2 <__swbuf_r+0x12>
 802a39e:	f7ff fa29 	bl	80297f4 <__sinit>
 802a3a2:	4b21      	ldr	r3, [pc, #132]	; (802a428 <__swbuf_r+0x98>)
 802a3a4:	429c      	cmp	r4, r3
 802a3a6:	d12b      	bne.n	802a400 <__swbuf_r+0x70>
 802a3a8:	686c      	ldr	r4, [r5, #4]
 802a3aa:	69a3      	ldr	r3, [r4, #24]
 802a3ac:	60a3      	str	r3, [r4, #8]
 802a3ae:	89a3      	ldrh	r3, [r4, #12]
 802a3b0:	071a      	lsls	r2, r3, #28
 802a3b2:	d52f      	bpl.n	802a414 <__swbuf_r+0x84>
 802a3b4:	6923      	ldr	r3, [r4, #16]
 802a3b6:	b36b      	cbz	r3, 802a414 <__swbuf_r+0x84>
 802a3b8:	6923      	ldr	r3, [r4, #16]
 802a3ba:	6820      	ldr	r0, [r4, #0]
 802a3bc:	1ac0      	subs	r0, r0, r3
 802a3be:	6963      	ldr	r3, [r4, #20]
 802a3c0:	b2f6      	uxtb	r6, r6
 802a3c2:	4283      	cmp	r3, r0
 802a3c4:	4637      	mov	r7, r6
 802a3c6:	dc04      	bgt.n	802a3d2 <__swbuf_r+0x42>
 802a3c8:	4621      	mov	r1, r4
 802a3ca:	4628      	mov	r0, r5
 802a3cc:	f000 f9aa 	bl	802a724 <_fflush_r>
 802a3d0:	bb30      	cbnz	r0, 802a420 <__swbuf_r+0x90>
 802a3d2:	68a3      	ldr	r3, [r4, #8]
 802a3d4:	3b01      	subs	r3, #1
 802a3d6:	60a3      	str	r3, [r4, #8]
 802a3d8:	6823      	ldr	r3, [r4, #0]
 802a3da:	1c5a      	adds	r2, r3, #1
 802a3dc:	6022      	str	r2, [r4, #0]
 802a3de:	701e      	strb	r6, [r3, #0]
 802a3e0:	6963      	ldr	r3, [r4, #20]
 802a3e2:	3001      	adds	r0, #1
 802a3e4:	4283      	cmp	r3, r0
 802a3e6:	d004      	beq.n	802a3f2 <__swbuf_r+0x62>
 802a3e8:	89a3      	ldrh	r3, [r4, #12]
 802a3ea:	07db      	lsls	r3, r3, #31
 802a3ec:	d506      	bpl.n	802a3fc <__swbuf_r+0x6c>
 802a3ee:	2e0a      	cmp	r6, #10
 802a3f0:	d104      	bne.n	802a3fc <__swbuf_r+0x6c>
 802a3f2:	4621      	mov	r1, r4
 802a3f4:	4628      	mov	r0, r5
 802a3f6:	f000 f995 	bl	802a724 <_fflush_r>
 802a3fa:	b988      	cbnz	r0, 802a420 <__swbuf_r+0x90>
 802a3fc:	4638      	mov	r0, r7
 802a3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a400:	4b0a      	ldr	r3, [pc, #40]	; (802a42c <__swbuf_r+0x9c>)
 802a402:	429c      	cmp	r4, r3
 802a404:	d101      	bne.n	802a40a <__swbuf_r+0x7a>
 802a406:	68ac      	ldr	r4, [r5, #8]
 802a408:	e7cf      	b.n	802a3aa <__swbuf_r+0x1a>
 802a40a:	4b09      	ldr	r3, [pc, #36]	; (802a430 <__swbuf_r+0xa0>)
 802a40c:	429c      	cmp	r4, r3
 802a40e:	bf08      	it	eq
 802a410:	68ec      	ldreq	r4, [r5, #12]
 802a412:	e7ca      	b.n	802a3aa <__swbuf_r+0x1a>
 802a414:	4621      	mov	r1, r4
 802a416:	4628      	mov	r0, r5
 802a418:	f000 f81e 	bl	802a458 <__swsetup_r>
 802a41c:	2800      	cmp	r0, #0
 802a41e:	d0cb      	beq.n	802a3b8 <__swbuf_r+0x28>
 802a420:	f04f 37ff 	mov.w	r7, #4294967295
 802a424:	e7ea      	b.n	802a3fc <__swbuf_r+0x6c>
 802a426:	bf00      	nop
 802a428:	0802ea9c 	.word	0x0802ea9c
 802a42c:	0802eabc 	.word	0x0802eabc
 802a430:	0802ea7c 	.word	0x0802ea7c

0802a434 <_write_r>:
 802a434:	b538      	push	{r3, r4, r5, lr}
 802a436:	4d07      	ldr	r5, [pc, #28]	; (802a454 <_write_r+0x20>)
 802a438:	4604      	mov	r4, r0
 802a43a:	4608      	mov	r0, r1
 802a43c:	4611      	mov	r1, r2
 802a43e:	2200      	movs	r2, #0
 802a440:	602a      	str	r2, [r5, #0]
 802a442:	461a      	mov	r2, r3
 802a444:	f7d9 fc03 	bl	8003c4e <_write>
 802a448:	1c43      	adds	r3, r0, #1
 802a44a:	d102      	bne.n	802a452 <_write_r+0x1e>
 802a44c:	682b      	ldr	r3, [r5, #0]
 802a44e:	b103      	cbz	r3, 802a452 <_write_r+0x1e>
 802a450:	6023      	str	r3, [r4, #0]
 802a452:	bd38      	pop	{r3, r4, r5, pc}
 802a454:	20005b54 	.word	0x20005b54

0802a458 <__swsetup_r>:
 802a458:	4b32      	ldr	r3, [pc, #200]	; (802a524 <__swsetup_r+0xcc>)
 802a45a:	b570      	push	{r4, r5, r6, lr}
 802a45c:	681d      	ldr	r5, [r3, #0]
 802a45e:	4606      	mov	r6, r0
 802a460:	460c      	mov	r4, r1
 802a462:	b125      	cbz	r5, 802a46e <__swsetup_r+0x16>
 802a464:	69ab      	ldr	r3, [r5, #24]
 802a466:	b913      	cbnz	r3, 802a46e <__swsetup_r+0x16>
 802a468:	4628      	mov	r0, r5
 802a46a:	f7ff f9c3 	bl	80297f4 <__sinit>
 802a46e:	4b2e      	ldr	r3, [pc, #184]	; (802a528 <__swsetup_r+0xd0>)
 802a470:	429c      	cmp	r4, r3
 802a472:	d10f      	bne.n	802a494 <__swsetup_r+0x3c>
 802a474:	686c      	ldr	r4, [r5, #4]
 802a476:	89a3      	ldrh	r3, [r4, #12]
 802a478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a47c:	0719      	lsls	r1, r3, #28
 802a47e:	d42c      	bmi.n	802a4da <__swsetup_r+0x82>
 802a480:	06dd      	lsls	r5, r3, #27
 802a482:	d411      	bmi.n	802a4a8 <__swsetup_r+0x50>
 802a484:	2309      	movs	r3, #9
 802a486:	6033      	str	r3, [r6, #0]
 802a488:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802a48c:	81a3      	strh	r3, [r4, #12]
 802a48e:	f04f 30ff 	mov.w	r0, #4294967295
 802a492:	e03e      	b.n	802a512 <__swsetup_r+0xba>
 802a494:	4b25      	ldr	r3, [pc, #148]	; (802a52c <__swsetup_r+0xd4>)
 802a496:	429c      	cmp	r4, r3
 802a498:	d101      	bne.n	802a49e <__swsetup_r+0x46>
 802a49a:	68ac      	ldr	r4, [r5, #8]
 802a49c:	e7eb      	b.n	802a476 <__swsetup_r+0x1e>
 802a49e:	4b24      	ldr	r3, [pc, #144]	; (802a530 <__swsetup_r+0xd8>)
 802a4a0:	429c      	cmp	r4, r3
 802a4a2:	bf08      	it	eq
 802a4a4:	68ec      	ldreq	r4, [r5, #12]
 802a4a6:	e7e6      	b.n	802a476 <__swsetup_r+0x1e>
 802a4a8:	0758      	lsls	r0, r3, #29
 802a4aa:	d512      	bpl.n	802a4d2 <__swsetup_r+0x7a>
 802a4ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a4ae:	b141      	cbz	r1, 802a4c2 <__swsetup_r+0x6a>
 802a4b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a4b4:	4299      	cmp	r1, r3
 802a4b6:	d002      	beq.n	802a4be <__swsetup_r+0x66>
 802a4b8:	4630      	mov	r0, r6
 802a4ba:	f7ff fa99 	bl	80299f0 <_free_r>
 802a4be:	2300      	movs	r3, #0
 802a4c0:	6363      	str	r3, [r4, #52]	; 0x34
 802a4c2:	89a3      	ldrh	r3, [r4, #12]
 802a4c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a4c8:	81a3      	strh	r3, [r4, #12]
 802a4ca:	2300      	movs	r3, #0
 802a4cc:	6063      	str	r3, [r4, #4]
 802a4ce:	6923      	ldr	r3, [r4, #16]
 802a4d0:	6023      	str	r3, [r4, #0]
 802a4d2:	89a3      	ldrh	r3, [r4, #12]
 802a4d4:	f043 0308 	orr.w	r3, r3, #8
 802a4d8:	81a3      	strh	r3, [r4, #12]
 802a4da:	6923      	ldr	r3, [r4, #16]
 802a4dc:	b94b      	cbnz	r3, 802a4f2 <__swsetup_r+0x9a>
 802a4de:	89a3      	ldrh	r3, [r4, #12]
 802a4e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a4e8:	d003      	beq.n	802a4f2 <__swsetup_r+0x9a>
 802a4ea:	4621      	mov	r1, r4
 802a4ec:	4630      	mov	r0, r6
 802a4ee:	f000 f98d 	bl	802a80c <__smakebuf_r>
 802a4f2:	89a0      	ldrh	r0, [r4, #12]
 802a4f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a4f8:	f010 0301 	ands.w	r3, r0, #1
 802a4fc:	d00a      	beq.n	802a514 <__swsetup_r+0xbc>
 802a4fe:	2300      	movs	r3, #0
 802a500:	60a3      	str	r3, [r4, #8]
 802a502:	6963      	ldr	r3, [r4, #20]
 802a504:	425b      	negs	r3, r3
 802a506:	61a3      	str	r3, [r4, #24]
 802a508:	6923      	ldr	r3, [r4, #16]
 802a50a:	b943      	cbnz	r3, 802a51e <__swsetup_r+0xc6>
 802a50c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802a510:	d1ba      	bne.n	802a488 <__swsetup_r+0x30>
 802a512:	bd70      	pop	{r4, r5, r6, pc}
 802a514:	0781      	lsls	r1, r0, #30
 802a516:	bf58      	it	pl
 802a518:	6963      	ldrpl	r3, [r4, #20]
 802a51a:	60a3      	str	r3, [r4, #8]
 802a51c:	e7f4      	b.n	802a508 <__swsetup_r+0xb0>
 802a51e:	2000      	movs	r0, #0
 802a520:	e7f7      	b.n	802a512 <__swsetup_r+0xba>
 802a522:	bf00      	nop
 802a524:	200001c0 	.word	0x200001c0
 802a528:	0802ea9c 	.word	0x0802ea9c
 802a52c:	0802eabc 	.word	0x0802eabc
 802a530:	0802ea7c 	.word	0x0802ea7c

0802a534 <__register_exitproc>:
 802a534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a538:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802a5f4 <__register_exitproc+0xc0>
 802a53c:	4606      	mov	r6, r0
 802a53e:	f8d8 0000 	ldr.w	r0, [r8]
 802a542:	461f      	mov	r7, r3
 802a544:	460d      	mov	r5, r1
 802a546:	4691      	mov	r9, r2
 802a548:	f7ff fa29 	bl	802999e <__retarget_lock_acquire_recursive>
 802a54c:	4b25      	ldr	r3, [pc, #148]	; (802a5e4 <__register_exitproc+0xb0>)
 802a54e:	681c      	ldr	r4, [r3, #0]
 802a550:	b934      	cbnz	r4, 802a560 <__register_exitproc+0x2c>
 802a552:	4c25      	ldr	r4, [pc, #148]	; (802a5e8 <__register_exitproc+0xb4>)
 802a554:	601c      	str	r4, [r3, #0]
 802a556:	4b25      	ldr	r3, [pc, #148]	; (802a5ec <__register_exitproc+0xb8>)
 802a558:	b113      	cbz	r3, 802a560 <__register_exitproc+0x2c>
 802a55a:	681b      	ldr	r3, [r3, #0]
 802a55c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802a560:	6863      	ldr	r3, [r4, #4]
 802a562:	2b1f      	cmp	r3, #31
 802a564:	dd07      	ble.n	802a576 <__register_exitproc+0x42>
 802a566:	f8d8 0000 	ldr.w	r0, [r8]
 802a56a:	f7ff fa1a 	bl	80299a2 <__retarget_lock_release_recursive>
 802a56e:	f04f 30ff 	mov.w	r0, #4294967295
 802a572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a576:	b34e      	cbz	r6, 802a5cc <__register_exitproc+0x98>
 802a578:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802a57c:	b988      	cbnz	r0, 802a5a2 <__register_exitproc+0x6e>
 802a57e:	4b1c      	ldr	r3, [pc, #112]	; (802a5f0 <__register_exitproc+0xbc>)
 802a580:	b923      	cbnz	r3, 802a58c <__register_exitproc+0x58>
 802a582:	f8d8 0000 	ldr.w	r0, [r8]
 802a586:	f7ff fa0b 	bl	80299a0 <__retarget_lock_release>
 802a58a:	e7f0      	b.n	802a56e <__register_exitproc+0x3a>
 802a58c:	f44f 7084 	mov.w	r0, #264	; 0x108
 802a590:	f7ff fa08 	bl	80299a4 <malloc>
 802a594:	2800      	cmp	r0, #0
 802a596:	d0f4      	beq.n	802a582 <__register_exitproc+0x4e>
 802a598:	2300      	movs	r3, #0
 802a59a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802a59e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802a5a2:	6863      	ldr	r3, [r4, #4]
 802a5a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802a5a8:	2201      	movs	r2, #1
 802a5aa:	409a      	lsls	r2, r3
 802a5ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802a5b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802a5b4:	4313      	orrs	r3, r2
 802a5b6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802a5ba:	2e02      	cmp	r6, #2
 802a5bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802a5c0:	bf02      	ittt	eq
 802a5c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802a5c6:	4313      	orreq	r3, r2
 802a5c8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802a5cc:	6863      	ldr	r3, [r4, #4]
 802a5ce:	f8d8 0000 	ldr.w	r0, [r8]
 802a5d2:	1c5a      	adds	r2, r3, #1
 802a5d4:	3302      	adds	r3, #2
 802a5d6:	6062      	str	r2, [r4, #4]
 802a5d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802a5dc:	f7ff f9e1 	bl	80299a2 <__retarget_lock_release_recursive>
 802a5e0:	2000      	movs	r0, #0
 802a5e2:	e7c6      	b.n	802a572 <__register_exitproc+0x3e>
 802a5e4:	20005be4 	.word	0x20005be4
 802a5e8:	20005b58 	.word	0x20005b58
 802a5ec:	0802eb14 	.word	0x0802eb14
 802a5f0:	080299a5 	.word	0x080299a5
 802a5f4:	20000224 	.word	0x20000224

0802a5f8 <_close_r>:
 802a5f8:	b538      	push	{r3, r4, r5, lr}
 802a5fa:	4d06      	ldr	r5, [pc, #24]	; (802a614 <_close_r+0x1c>)
 802a5fc:	2300      	movs	r3, #0
 802a5fe:	4604      	mov	r4, r0
 802a600:	4608      	mov	r0, r1
 802a602:	602b      	str	r3, [r5, #0]
 802a604:	f7d9 fb3f 	bl	8003c86 <_close>
 802a608:	1c43      	adds	r3, r0, #1
 802a60a:	d102      	bne.n	802a612 <_close_r+0x1a>
 802a60c:	682b      	ldr	r3, [r5, #0]
 802a60e:	b103      	cbz	r3, 802a612 <_close_r+0x1a>
 802a610:	6023      	str	r3, [r4, #0]
 802a612:	bd38      	pop	{r3, r4, r5, pc}
 802a614:	20005b54 	.word	0x20005b54

0802a618 <__sflush_r>:
 802a618:	898a      	ldrh	r2, [r1, #12]
 802a61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a61e:	4605      	mov	r5, r0
 802a620:	0710      	lsls	r0, r2, #28
 802a622:	460c      	mov	r4, r1
 802a624:	d458      	bmi.n	802a6d8 <__sflush_r+0xc0>
 802a626:	684b      	ldr	r3, [r1, #4]
 802a628:	2b00      	cmp	r3, #0
 802a62a:	dc05      	bgt.n	802a638 <__sflush_r+0x20>
 802a62c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802a62e:	2b00      	cmp	r3, #0
 802a630:	dc02      	bgt.n	802a638 <__sflush_r+0x20>
 802a632:	2000      	movs	r0, #0
 802a634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a63a:	2e00      	cmp	r6, #0
 802a63c:	d0f9      	beq.n	802a632 <__sflush_r+0x1a>
 802a63e:	2300      	movs	r3, #0
 802a640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802a644:	682f      	ldr	r7, [r5, #0]
 802a646:	602b      	str	r3, [r5, #0]
 802a648:	d032      	beq.n	802a6b0 <__sflush_r+0x98>
 802a64a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802a64c:	89a3      	ldrh	r3, [r4, #12]
 802a64e:	075a      	lsls	r2, r3, #29
 802a650:	d505      	bpl.n	802a65e <__sflush_r+0x46>
 802a652:	6863      	ldr	r3, [r4, #4]
 802a654:	1ac0      	subs	r0, r0, r3
 802a656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a658:	b10b      	cbz	r3, 802a65e <__sflush_r+0x46>
 802a65a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a65c:	1ac0      	subs	r0, r0, r3
 802a65e:	2300      	movs	r3, #0
 802a660:	4602      	mov	r2, r0
 802a662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a664:	6a21      	ldr	r1, [r4, #32]
 802a666:	4628      	mov	r0, r5
 802a668:	47b0      	blx	r6
 802a66a:	1c43      	adds	r3, r0, #1
 802a66c:	89a3      	ldrh	r3, [r4, #12]
 802a66e:	d106      	bne.n	802a67e <__sflush_r+0x66>
 802a670:	6829      	ldr	r1, [r5, #0]
 802a672:	291d      	cmp	r1, #29
 802a674:	d82c      	bhi.n	802a6d0 <__sflush_r+0xb8>
 802a676:	4a2a      	ldr	r2, [pc, #168]	; (802a720 <__sflush_r+0x108>)
 802a678:	40ca      	lsrs	r2, r1
 802a67a:	07d6      	lsls	r6, r2, #31
 802a67c:	d528      	bpl.n	802a6d0 <__sflush_r+0xb8>
 802a67e:	2200      	movs	r2, #0
 802a680:	6062      	str	r2, [r4, #4]
 802a682:	04d9      	lsls	r1, r3, #19
 802a684:	6922      	ldr	r2, [r4, #16]
 802a686:	6022      	str	r2, [r4, #0]
 802a688:	d504      	bpl.n	802a694 <__sflush_r+0x7c>
 802a68a:	1c42      	adds	r2, r0, #1
 802a68c:	d101      	bne.n	802a692 <__sflush_r+0x7a>
 802a68e:	682b      	ldr	r3, [r5, #0]
 802a690:	b903      	cbnz	r3, 802a694 <__sflush_r+0x7c>
 802a692:	6560      	str	r0, [r4, #84]	; 0x54
 802a694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a696:	602f      	str	r7, [r5, #0]
 802a698:	2900      	cmp	r1, #0
 802a69a:	d0ca      	beq.n	802a632 <__sflush_r+0x1a>
 802a69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a6a0:	4299      	cmp	r1, r3
 802a6a2:	d002      	beq.n	802a6aa <__sflush_r+0x92>
 802a6a4:	4628      	mov	r0, r5
 802a6a6:	f7ff f9a3 	bl	80299f0 <_free_r>
 802a6aa:	2000      	movs	r0, #0
 802a6ac:	6360      	str	r0, [r4, #52]	; 0x34
 802a6ae:	e7c1      	b.n	802a634 <__sflush_r+0x1c>
 802a6b0:	6a21      	ldr	r1, [r4, #32]
 802a6b2:	2301      	movs	r3, #1
 802a6b4:	4628      	mov	r0, r5
 802a6b6:	47b0      	blx	r6
 802a6b8:	1c41      	adds	r1, r0, #1
 802a6ba:	d1c7      	bne.n	802a64c <__sflush_r+0x34>
 802a6bc:	682b      	ldr	r3, [r5, #0]
 802a6be:	2b00      	cmp	r3, #0
 802a6c0:	d0c4      	beq.n	802a64c <__sflush_r+0x34>
 802a6c2:	2b1d      	cmp	r3, #29
 802a6c4:	d001      	beq.n	802a6ca <__sflush_r+0xb2>
 802a6c6:	2b16      	cmp	r3, #22
 802a6c8:	d101      	bne.n	802a6ce <__sflush_r+0xb6>
 802a6ca:	602f      	str	r7, [r5, #0]
 802a6cc:	e7b1      	b.n	802a632 <__sflush_r+0x1a>
 802a6ce:	89a3      	ldrh	r3, [r4, #12]
 802a6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a6d4:	81a3      	strh	r3, [r4, #12]
 802a6d6:	e7ad      	b.n	802a634 <__sflush_r+0x1c>
 802a6d8:	690f      	ldr	r7, [r1, #16]
 802a6da:	2f00      	cmp	r7, #0
 802a6dc:	d0a9      	beq.n	802a632 <__sflush_r+0x1a>
 802a6de:	0793      	lsls	r3, r2, #30
 802a6e0:	680e      	ldr	r6, [r1, #0]
 802a6e2:	bf08      	it	eq
 802a6e4:	694b      	ldreq	r3, [r1, #20]
 802a6e6:	600f      	str	r7, [r1, #0]
 802a6e8:	bf18      	it	ne
 802a6ea:	2300      	movne	r3, #0
 802a6ec:	eba6 0807 	sub.w	r8, r6, r7
 802a6f0:	608b      	str	r3, [r1, #8]
 802a6f2:	f1b8 0f00 	cmp.w	r8, #0
 802a6f6:	dd9c      	ble.n	802a632 <__sflush_r+0x1a>
 802a6f8:	6a21      	ldr	r1, [r4, #32]
 802a6fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802a6fc:	4643      	mov	r3, r8
 802a6fe:	463a      	mov	r2, r7
 802a700:	4628      	mov	r0, r5
 802a702:	47b0      	blx	r6
 802a704:	2800      	cmp	r0, #0
 802a706:	dc06      	bgt.n	802a716 <__sflush_r+0xfe>
 802a708:	89a3      	ldrh	r3, [r4, #12]
 802a70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a70e:	81a3      	strh	r3, [r4, #12]
 802a710:	f04f 30ff 	mov.w	r0, #4294967295
 802a714:	e78e      	b.n	802a634 <__sflush_r+0x1c>
 802a716:	4407      	add	r7, r0
 802a718:	eba8 0800 	sub.w	r8, r8, r0
 802a71c:	e7e9      	b.n	802a6f2 <__sflush_r+0xda>
 802a71e:	bf00      	nop
 802a720:	20400001 	.word	0x20400001

0802a724 <_fflush_r>:
 802a724:	b538      	push	{r3, r4, r5, lr}
 802a726:	690b      	ldr	r3, [r1, #16]
 802a728:	4605      	mov	r5, r0
 802a72a:	460c      	mov	r4, r1
 802a72c:	b913      	cbnz	r3, 802a734 <_fflush_r+0x10>
 802a72e:	2500      	movs	r5, #0
 802a730:	4628      	mov	r0, r5
 802a732:	bd38      	pop	{r3, r4, r5, pc}
 802a734:	b118      	cbz	r0, 802a73e <_fflush_r+0x1a>
 802a736:	6983      	ldr	r3, [r0, #24]
 802a738:	b90b      	cbnz	r3, 802a73e <_fflush_r+0x1a>
 802a73a:	f7ff f85b 	bl	80297f4 <__sinit>
 802a73e:	4b14      	ldr	r3, [pc, #80]	; (802a790 <_fflush_r+0x6c>)
 802a740:	429c      	cmp	r4, r3
 802a742:	d11b      	bne.n	802a77c <_fflush_r+0x58>
 802a744:	686c      	ldr	r4, [r5, #4]
 802a746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a74a:	2b00      	cmp	r3, #0
 802a74c:	d0ef      	beq.n	802a72e <_fflush_r+0xa>
 802a74e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a750:	07d0      	lsls	r0, r2, #31
 802a752:	d404      	bmi.n	802a75e <_fflush_r+0x3a>
 802a754:	0599      	lsls	r1, r3, #22
 802a756:	d402      	bmi.n	802a75e <_fflush_r+0x3a>
 802a758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a75a:	f7ff f920 	bl	802999e <__retarget_lock_acquire_recursive>
 802a75e:	4628      	mov	r0, r5
 802a760:	4621      	mov	r1, r4
 802a762:	f7ff ff59 	bl	802a618 <__sflush_r>
 802a766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a768:	07da      	lsls	r2, r3, #31
 802a76a:	4605      	mov	r5, r0
 802a76c:	d4e0      	bmi.n	802a730 <_fflush_r+0xc>
 802a76e:	89a3      	ldrh	r3, [r4, #12]
 802a770:	059b      	lsls	r3, r3, #22
 802a772:	d4dd      	bmi.n	802a730 <_fflush_r+0xc>
 802a774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a776:	f7ff f914 	bl	80299a2 <__retarget_lock_release_recursive>
 802a77a:	e7d9      	b.n	802a730 <_fflush_r+0xc>
 802a77c:	4b05      	ldr	r3, [pc, #20]	; (802a794 <_fflush_r+0x70>)
 802a77e:	429c      	cmp	r4, r3
 802a780:	d101      	bne.n	802a786 <_fflush_r+0x62>
 802a782:	68ac      	ldr	r4, [r5, #8]
 802a784:	e7df      	b.n	802a746 <_fflush_r+0x22>
 802a786:	4b04      	ldr	r3, [pc, #16]	; (802a798 <_fflush_r+0x74>)
 802a788:	429c      	cmp	r4, r3
 802a78a:	bf08      	it	eq
 802a78c:	68ec      	ldreq	r4, [r5, #12]
 802a78e:	e7da      	b.n	802a746 <_fflush_r+0x22>
 802a790:	0802ea9c 	.word	0x0802ea9c
 802a794:	0802eabc 	.word	0x0802eabc
 802a798:	0802ea7c 	.word	0x0802ea7c

0802a79c <_lseek_r>:
 802a79c:	b538      	push	{r3, r4, r5, lr}
 802a79e:	4d07      	ldr	r5, [pc, #28]	; (802a7bc <_lseek_r+0x20>)
 802a7a0:	4604      	mov	r4, r0
 802a7a2:	4608      	mov	r0, r1
 802a7a4:	4611      	mov	r1, r2
 802a7a6:	2200      	movs	r2, #0
 802a7a8:	602a      	str	r2, [r5, #0]
 802a7aa:	461a      	mov	r2, r3
 802a7ac:	f7d9 fa92 	bl	8003cd4 <_lseek>
 802a7b0:	1c43      	adds	r3, r0, #1
 802a7b2:	d102      	bne.n	802a7ba <_lseek_r+0x1e>
 802a7b4:	682b      	ldr	r3, [r5, #0]
 802a7b6:	b103      	cbz	r3, 802a7ba <_lseek_r+0x1e>
 802a7b8:	6023      	str	r3, [r4, #0]
 802a7ba:	bd38      	pop	{r3, r4, r5, pc}
 802a7bc:	20005b54 	.word	0x20005b54

0802a7c0 <__swhatbuf_r>:
 802a7c0:	b570      	push	{r4, r5, r6, lr}
 802a7c2:	460e      	mov	r6, r1
 802a7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a7c8:	2900      	cmp	r1, #0
 802a7ca:	b096      	sub	sp, #88	; 0x58
 802a7cc:	4614      	mov	r4, r2
 802a7ce:	461d      	mov	r5, r3
 802a7d0:	da08      	bge.n	802a7e4 <__swhatbuf_r+0x24>
 802a7d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802a7d6:	2200      	movs	r2, #0
 802a7d8:	602a      	str	r2, [r5, #0]
 802a7da:	061a      	lsls	r2, r3, #24
 802a7dc:	d410      	bmi.n	802a800 <__swhatbuf_r+0x40>
 802a7de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a7e2:	e00e      	b.n	802a802 <__swhatbuf_r+0x42>
 802a7e4:	466a      	mov	r2, sp
 802a7e6:	f000 f86f 	bl	802a8c8 <_fstat_r>
 802a7ea:	2800      	cmp	r0, #0
 802a7ec:	dbf1      	blt.n	802a7d2 <__swhatbuf_r+0x12>
 802a7ee:	9a01      	ldr	r2, [sp, #4]
 802a7f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802a7f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802a7f8:	425a      	negs	r2, r3
 802a7fa:	415a      	adcs	r2, r3
 802a7fc:	602a      	str	r2, [r5, #0]
 802a7fe:	e7ee      	b.n	802a7de <__swhatbuf_r+0x1e>
 802a800:	2340      	movs	r3, #64	; 0x40
 802a802:	2000      	movs	r0, #0
 802a804:	6023      	str	r3, [r4, #0]
 802a806:	b016      	add	sp, #88	; 0x58
 802a808:	bd70      	pop	{r4, r5, r6, pc}
	...

0802a80c <__smakebuf_r>:
 802a80c:	898b      	ldrh	r3, [r1, #12]
 802a80e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a810:	079d      	lsls	r5, r3, #30
 802a812:	4606      	mov	r6, r0
 802a814:	460c      	mov	r4, r1
 802a816:	d507      	bpl.n	802a828 <__smakebuf_r+0x1c>
 802a818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a81c:	6023      	str	r3, [r4, #0]
 802a81e:	6123      	str	r3, [r4, #16]
 802a820:	2301      	movs	r3, #1
 802a822:	6163      	str	r3, [r4, #20]
 802a824:	b002      	add	sp, #8
 802a826:	bd70      	pop	{r4, r5, r6, pc}
 802a828:	ab01      	add	r3, sp, #4
 802a82a:	466a      	mov	r2, sp
 802a82c:	f7ff ffc8 	bl	802a7c0 <__swhatbuf_r>
 802a830:	9900      	ldr	r1, [sp, #0]
 802a832:	4605      	mov	r5, r0
 802a834:	4630      	mov	r0, r6
 802a836:	f7ff f947 	bl	8029ac8 <_malloc_r>
 802a83a:	b948      	cbnz	r0, 802a850 <__smakebuf_r+0x44>
 802a83c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a840:	059a      	lsls	r2, r3, #22
 802a842:	d4ef      	bmi.n	802a824 <__smakebuf_r+0x18>
 802a844:	f023 0303 	bic.w	r3, r3, #3
 802a848:	f043 0302 	orr.w	r3, r3, #2
 802a84c:	81a3      	strh	r3, [r4, #12]
 802a84e:	e7e3      	b.n	802a818 <__smakebuf_r+0xc>
 802a850:	4b0d      	ldr	r3, [pc, #52]	; (802a888 <__smakebuf_r+0x7c>)
 802a852:	62b3      	str	r3, [r6, #40]	; 0x28
 802a854:	89a3      	ldrh	r3, [r4, #12]
 802a856:	6020      	str	r0, [r4, #0]
 802a858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a85c:	81a3      	strh	r3, [r4, #12]
 802a85e:	9b00      	ldr	r3, [sp, #0]
 802a860:	6163      	str	r3, [r4, #20]
 802a862:	9b01      	ldr	r3, [sp, #4]
 802a864:	6120      	str	r0, [r4, #16]
 802a866:	b15b      	cbz	r3, 802a880 <__smakebuf_r+0x74>
 802a868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a86c:	4630      	mov	r0, r6
 802a86e:	f000 f83d 	bl	802a8ec <_isatty_r>
 802a872:	b128      	cbz	r0, 802a880 <__smakebuf_r+0x74>
 802a874:	89a3      	ldrh	r3, [r4, #12]
 802a876:	f023 0303 	bic.w	r3, r3, #3
 802a87a:	f043 0301 	orr.w	r3, r3, #1
 802a87e:	81a3      	strh	r3, [r4, #12]
 802a880:	89a0      	ldrh	r0, [r4, #12]
 802a882:	4305      	orrs	r5, r0
 802a884:	81a5      	strh	r5, [r4, #12]
 802a886:	e7cd      	b.n	802a824 <__smakebuf_r+0x18>
 802a888:	0802978d 	.word	0x0802978d

0802a88c <__malloc_lock>:
 802a88c:	4801      	ldr	r0, [pc, #4]	; (802a894 <__malloc_lock+0x8>)
 802a88e:	f7ff b886 	b.w	802999e <__retarget_lock_acquire_recursive>
 802a892:	bf00      	nop
 802a894:	20005a41 	.word	0x20005a41

0802a898 <__malloc_unlock>:
 802a898:	4801      	ldr	r0, [pc, #4]	; (802a8a0 <__malloc_unlock+0x8>)
 802a89a:	f7ff b882 	b.w	80299a2 <__retarget_lock_release_recursive>
 802a89e:	bf00      	nop
 802a8a0:	20005a41 	.word	0x20005a41

0802a8a4 <_read_r>:
 802a8a4:	b538      	push	{r3, r4, r5, lr}
 802a8a6:	4d07      	ldr	r5, [pc, #28]	; (802a8c4 <_read_r+0x20>)
 802a8a8:	4604      	mov	r4, r0
 802a8aa:	4608      	mov	r0, r1
 802a8ac:	4611      	mov	r1, r2
 802a8ae:	2200      	movs	r2, #0
 802a8b0:	602a      	str	r2, [r5, #0]
 802a8b2:	461a      	mov	r2, r3
 802a8b4:	f7d9 f9ae 	bl	8003c14 <_read>
 802a8b8:	1c43      	adds	r3, r0, #1
 802a8ba:	d102      	bne.n	802a8c2 <_read_r+0x1e>
 802a8bc:	682b      	ldr	r3, [r5, #0]
 802a8be:	b103      	cbz	r3, 802a8c2 <_read_r+0x1e>
 802a8c0:	6023      	str	r3, [r4, #0]
 802a8c2:	bd38      	pop	{r3, r4, r5, pc}
 802a8c4:	20005b54 	.word	0x20005b54

0802a8c8 <_fstat_r>:
 802a8c8:	b538      	push	{r3, r4, r5, lr}
 802a8ca:	4d07      	ldr	r5, [pc, #28]	; (802a8e8 <_fstat_r+0x20>)
 802a8cc:	2300      	movs	r3, #0
 802a8ce:	4604      	mov	r4, r0
 802a8d0:	4608      	mov	r0, r1
 802a8d2:	4611      	mov	r1, r2
 802a8d4:	602b      	str	r3, [r5, #0]
 802a8d6:	f7d9 f9e2 	bl	8003c9e <_fstat>
 802a8da:	1c43      	adds	r3, r0, #1
 802a8dc:	d102      	bne.n	802a8e4 <_fstat_r+0x1c>
 802a8de:	682b      	ldr	r3, [r5, #0]
 802a8e0:	b103      	cbz	r3, 802a8e4 <_fstat_r+0x1c>
 802a8e2:	6023      	str	r3, [r4, #0]
 802a8e4:	bd38      	pop	{r3, r4, r5, pc}
 802a8e6:	bf00      	nop
 802a8e8:	20005b54 	.word	0x20005b54

0802a8ec <_isatty_r>:
 802a8ec:	b538      	push	{r3, r4, r5, lr}
 802a8ee:	4d06      	ldr	r5, [pc, #24]	; (802a908 <_isatty_r+0x1c>)
 802a8f0:	2300      	movs	r3, #0
 802a8f2:	4604      	mov	r4, r0
 802a8f4:	4608      	mov	r0, r1
 802a8f6:	602b      	str	r3, [r5, #0]
 802a8f8:	f7d9 f9e1 	bl	8003cbe <_isatty>
 802a8fc:	1c43      	adds	r3, r0, #1
 802a8fe:	d102      	bne.n	802a906 <_isatty_r+0x1a>
 802a900:	682b      	ldr	r3, [r5, #0]
 802a902:	b103      	cbz	r3, 802a906 <_isatty_r+0x1a>
 802a904:	6023      	str	r3, [r4, #0]
 802a906:	bd38      	pop	{r3, r4, r5, pc}
 802a908:	20005b54 	.word	0x20005b54

0802a90c <_init>:
 802a90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a90e:	bf00      	nop
 802a910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a912:	bc08      	pop	{r3}
 802a914:	469e      	mov	lr, r3
 802a916:	4770      	bx	lr

0802a918 <_fini>:
 802a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a91a:	bf00      	nop
 802a91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a91e:	bc08      	pop	{r3}
 802a920:	469e      	mov	lr, r3
 802a922:	4770      	bx	lr
